import {
  g as g4,
  l as l9,
  s as s13
} from "./chunk-MTOX4AVT.js";
import "./chunk-C4G2D42P.js";
import {
  i as i9,
  n as n11,
  o as o12,
  r as r11
} from "./chunk-HFUGSKPL.js";
import {
  o as o11
} from "./chunk-XGPYUGO5.js";
import {
  p as p4
} from "./chunk-BUA5NESM.js";
import {
  g as g5,
  t as t10
} from "./chunk-GKCEBA6Q.js";
import {
  a as a4,
  c as c9,
  r as r12,
  s as s14
} from "./chunk-C73RDNI6.js";
import {
  c as c10,
  e as e12
} from "./chunk-NSTC2VR7.js";
import {
  r as r13
} from "./chunk-LYNZJBHM.js";
import {
  _ as _3,
  d as d7,
  t2 as t8
} from "./chunk-SHYE33QH.js";
import "./chunk-LTMF2W73.js";
import {
  m as m10
} from "./chunk-VWMPQK5V.js";
import {
  a as a5,
  e as e11,
  u as u8
} from "./chunk-IGBV77N3.js";
import {
  c as c8,
  m as m9,
  p as p5
} from "./chunk-5Y3EUPZN.js";
import {
  o as o10
} from "./chunk-XBU3UEEJ.js";
import {
  Gt,
  H,
  Y,
  Z,
  _ as _4,
  at,
  ft,
  gt,
  ht,
  jt,
  kt,
  lt,
  mt,
  ot,
  pt,
  tt,
  ut,
  wt,
  xt,
  yt
} from "./chunk-55AFRDJF.js";
import {
  e as e10
} from "./chunk-F5C72MOD.js";
import "./chunk-ZYIU2RXY.js";
import {
  r as r10
} from "./chunk-MQW6TXNA.js";
import "./chunk-YBXGYFQH.js";
import {
  h as h6,
  s as s11
} from "./chunk-NFDUQVJM.js";
import {
  i as i7
} from "./chunk-2W7OT7Z4.js";
import "./chunk-3PPDORWL.js";
import {
  h as h5
} from "./chunk-YIXK32VF.js";
import {
  t as t7
} from "./chunk-CHTPXQAG.js";
import {
  t as t6
} from "./chunk-7DRFV7H6.js";
import {
  e as e8
} from "./chunk-2NTKYBCL.js";
import {
  I,
  I2
} from "./chunk-BDWOUZQR.js";
import "./chunk-H34ENSPL.js";
import "./chunk-4ADC6HZF.js";
import {
  c as c7,
  l as l8,
  n as n9
} from "./chunk-XFKS4JQP.js";
import "./chunk-H6F6O2KE.js";
import "./chunk-AF3FX2UV.js";
import {
  M as M2,
  h as h4,
  i as i5,
  o as o8,
  r as r7
} from "./chunk-DRAQJS2F.js";
import "./chunk-BZYXFNL4.js";
import {
  n as n8
} from "./chunk-VNTS5E5O.js";
import {
  g as g3
} from "./chunk-TMFB3DKM.js";
import {
  P as P2
} from "./chunk-X3UT6DT7.js";
import "./chunk-JD3UVEVP.js";
import {
  s as s6
} from "./chunk-NO2XQDLB.js";
import "./chunk-LBC3MAJX.js";
import {
  t as t9
} from "./chunk-NBTAZUMP.js";
import {
  l as l7
} from "./chunk-H7XUEHGR.js";
import {
  j as j4,
  l as l5
} from "./chunk-3ZORAHSR.js";
import "./chunk-SZN55B2M.js";
import {
  i as i8
} from "./chunk-Z53ZFYD2.js";
import {
  n as n10
} from "./chunk-NMP7ZOVG.js";
import {
  f as f4,
  i as i6,
  s as s12,
  u as u7
} from "./chunk-YHYQP7QX.js";
import "./chunk-RP7FUW55.js";
import {
  r as r9
} from "./chunk-MPV4X4LZ.js";
import "./chunk-2JRCX6DU.js";
import {
  S as S2,
  e as e7,
  m as m7,
  o as o9,
  r as r8
} from "./chunk-TNW4TPNP.js";
import {
  i as i4
} from "./chunk-XAXNVZUO.js";
import {
  e as e9
} from "./chunk-XNTJ4ENZ.js";
import {
  O,
  c as c4,
  e as e4,
  n as n3,
  t as t4
} from "./chunk-DIR2YFTR.js";
import {
  L as L3,
  i as i3,
  j as j2,
  n2 as n4
} from "./chunk-ZSRASSN6.js";
import "./chunk-N5GLJRXG.js";
import "./chunk-77M4J56U.js";
import {
  L as L4,
  m as m11
} from "./chunk-UECUZHH7.js";
import "./chunk-KSRBNZJ2.js";
import {
  r as r14
} from "./chunk-6WL2SHX6.js";
import "./chunk-CL7PETHS.js";
import "./chunk-CAZNHUEV.js";
import "./chunk-XDXJG3QL.js";
import "./chunk-YSCIEMYQ.js";
import {
  m as m8
} from "./chunk-ZXGBNDYM.js";
import "./chunk-GOWWJ2HE.js";
import {
  m as m6
} from "./chunk-5GBXHGKW.js";
import {
  R
} from "./chunk-7ZMGKXLG.js";
import "./chunk-JMXPE5PE.js";
import "./chunk-LL73CCBG.js";
import "./chunk-6TS2ZJL4.js";
import "./chunk-IBGTNH54.js";
import "./chunk-ROVRMLYN.js";
import "./chunk-SYPTUUSZ.js";
import "./chunk-YZLWQJLF.js";
import {
  n as n7
} from "./chunk-3LRL7HAL.js";
import {
  l as l4
} from "./chunk-4OESBQFK.js";
import {
  h as h3
} from "./chunk-L7EN54WK.js";
import {
  u as u5
} from "./chunk-6QTMK7BB.js";
import "./chunk-BNO7HCVD.js";
import "./chunk-6U2RA2A3.js";
import "./chunk-UGHHK55N.js";
import "./chunk-LFWK3CIR.js";
import "./chunk-5SRIFOTG.js";
import {
  O as O2,
  U as U2
} from "./chunk-7NMH5MM5.js";
import "./chunk-TCIXF7MM.js";
import "./chunk-UGTICYU7.js";
import "./chunk-3MHRDLQO.js";
import "./chunk-F4KXGA4J.js";
import {
  m as m5
} from "./chunk-VUGQF5TL.js";
import "./chunk-ZAISHGSP.js";
import "./chunk-KHRHKYU2.js";
import {
  d as d6
} from "./chunk-2IMSGFJN.js";
import "./chunk-VHTQ5H2C.js";
import "./chunk-YX2VTIZR.js";
import "./chunk-LYSDGL5S.js";
import "./chunk-SRJX4QLW.js";
import "./chunk-WPTJIN2M.js";
import "./chunk-KUP5BM5G.js";
import "./chunk-HNQNVI5C.js";
import "./chunk-G34OBNLT.js";
import "./chunk-WJUYGRZY.js";
import "./chunk-FKFXOPPT.js";
import {
  l as l6
} from "./chunk-KE3WBZYL.js";
import "./chunk-EOMIFMDH.js";
import "./chunk-QFU5COFB.js";
import "./chunk-45ILJ6ZH.js";
import "./chunk-VCRP2PLV.js";
import "./chunk-BDLVUYG2.js";
import "./chunk-6QA2BVC5.js";
import {
  n as n6
} from "./chunk-HWKQJUGY.js";
import "./chunk-QVKLS4LH.js";
import "./chunk-2KVNXQA7.js";
import "./chunk-XDCUZFJX.js";
import "./chunk-DNZK6PPI.js";
import {
  e as e6,
  u as u6
} from "./chunk-7BWCD63N.js";
import {
  n as n5
} from "./chunk-65K4DQAH.js";
import {
  c as c5
} from "./chunk-MUKDJQWB.js";
import "./chunk-6KFXWKZZ.js";
import {
  _ as _2,
  d as d5
} from "./chunk-HPGYEHVI.js";
import {
  c as c6,
  g as g2,
  p as p3,
  s as s10
} from "./chunk-YBJ5GVXQ.js";
import {
  V
} from "./chunk-X3R5OB6L.js";
import "./chunk-RACDQ3AL.js";
import "./chunk-TEXTBDH7.js";
import "./chunk-N3A2BVTW.js";
import "./chunk-IGYEHOTB.js";
import {
  a as a2
} from "./chunk-TVM3SZJR.js";
import {
  P
} from "./chunk-52HWRRRQ.js";
import {
  s as s8
} from "./chunk-VNTEV3V4.js";
import "./chunk-OGOQOMMV.js";
import "./chunk-7Z3AF3B2.js";
import {
  s as s9,
  u as u4,
  x
} from "./chunk-6GWORUT3.js";
import "./chunk-U57T7EQN.js";
import "./chunk-CMHHL5UO.js";
import "./chunk-XHYOFJ4U.js";
import "./chunk-HCYE6OE4.js";
import "./chunk-KJSBBQ22.js";
import {
  e as e3,
  p
} from "./chunk-LMEOPAGQ.js";
import {
  o as o7
} from "./chunk-YIV2QKTZ.js";
import {
  U,
  a as a3,
  f,
  h as h2,
  j,
  l as l3,
  w
} from "./chunk-A3VAC24F.js";
import {
  M,
  o as o6,
  r as r5,
  s as s4
} from "./chunk-FPSA4NFH.js";
import "./chunk-UY6B6IVT.js";
import "./chunk-6PV45IYU.js";
import {
  p as p2
} from "./chunk-SRQCQD63.js";
import {
  m as m4
} from "./chunk-FIRNXFAH.js";
import {
  f as f3,
  t as t5,
  z
} from "./chunk-O5TPFXRT.js";
import {
  _,
  e as e5,
  j as j3,
  y
} from "./chunk-Q6XRAGMA.js";
import "./chunk-JUAPMINU.js";
import {
  f as f2
} from "./chunk-PK2ZR2SJ.js";
import "./chunk-YFPGM5UE.js";
import {
  d as d4,
  s as s7
} from "./chunk-OXSERRAR.js";
import "./chunk-7HI4VRVW.js";
import {
  r as r6
} from "./chunk-ZX46THLM.js";
import {
  d as d3,
  i as i2
} from "./chunk-Y2ZIOB7Y.js";
import {
  s as s5
} from "./chunk-KTUX3OKX.js";
import {
  l as l2
} from "./chunk-E3KEUGUG.js";
import {
  b as b2,
  c,
  c2 as c3,
  m as m2,
  o,
  o2,
  o3,
  r as r2,
  r2 as r3,
  t,
  t3 as t2
} from "./chunk-N3XLUQJI.js";
import {
  a2 as a,
  s as s2
} from "./chunk-JUAD7TJ6.js";
import {
  m
} from "./chunk-VHLUKPRH.js";
import {
  r
} from "./chunk-5TPMG26T.js";
import "./chunk-3NBBZ43U.js";
import "./chunk-VOLWOTEG.js";
import {
  A as A2,
  F
} from "./chunk-XTNIDRTB.js";
import "./chunk-FGWIXJQY.js";
import "./chunk-TKYAZCMB.js";
import "./chunk-3TBMFSPB.js";
import {
  n as n2,
  r as r4,
  t as t3
} from "./chunk-PSZLDJJA.js";
import "./chunk-ZWFY3WY5.js";
import "./chunk-LQFTAGIV.js";
import {
  n,
  u
} from "./chunk-S7IJH524.js";
import {
  A,
  E,
  L as L2,
  S,
  b,
  c3 as c2,
  d as d2,
  e,
  e2,
  g,
  h,
  l2 as l,
  m2 as m3,
  o3 as o4,
  o4 as o5,
  s as s3,
  u2,
  u3
} from "./chunk-GZ2P4SCJ.js";
import {
  i2 as i,
  s
} from "./chunk-XWG6QGFK.js";
import "./chunk-GWNLQRNM.js";
import {
  L,
  d,
  has
} from "./chunk-FXKORAMT.js";
import "./chunk-GNMFMITH.js";

// node_modules/@arcgis/core/views/BreakpointsOwner.js
var l10 = { widthBreakpoint: { getValue(e28) {
  const i29 = e28.viewSize[0], s33 = e28.breakpoints, a29 = this.values;
  return i29 <= s33.xsmall ? a29.xsmall : i29 <= s33.small ? a29.small : i29 <= s33.medium ? a29.medium : i29 <= s33.large ? a29.large : a29.xlarge;
}, values: { xsmall: "xsmall", small: "small", medium: "medium", large: "large", xlarge: "xlarge" }, valueToClassName: { xsmall: "esri-view-width-xsmall esri-view-width-less-than-small esri-view-width-less-than-medium esri-view-width-less-than-large esri-view-width-less-than-xlarge", small: "esri-view-width-small esri-view-width-greater-than-xsmall esri-view-width-less-than-medium esri-view-width-less-than-large esri-view-width-less-than-xlarge", medium: "esri-view-width-medium esri-view-width-greater-than-xsmall esri-view-width-greater-than-small esri-view-width-less-than-large esri-view-width-less-than-xlarge", large: "esri-view-width-large esri-view-width-greater-than-xsmall esri-view-width-greater-than-small esri-view-width-greater-than-medium esri-view-width-less-than-xlarge", xlarge: "esri-view-width-xlarge esri-view-width-greater-than-xsmall esri-view-width-greater-than-small esri-view-width-greater-than-medium esri-view-width-greater-than-large" } }, heightBreakpoint: { getValue(e28) {
  const i29 = e28.viewSize[1], s33 = e28.breakpoints, a29 = this.values;
  return i29 <= s33.xsmall ? a29.xsmall : i29 <= s33.small ? a29.small : i29 <= s33.medium ? a29.medium : i29 <= s33.large ? a29.large : a29.xlarge;
}, values: { xsmall: "xsmall", small: "small", medium: "medium", large: "large", xlarge: "xlarge" }, valueToClassName: { xsmall: "esri-view-height-xsmall esri-view-height-less-than-small esri-view-height-less-than-medium esri-view-height-less-than-large esri-view-height-less-than-xlarge", small: "esri-view-height-small esri-view-height-greater-than-xsmall esri-view-height-less-than-medium esri-view-height-less-than-large esri-view-height-less-than-xlarge", medium: "esri-view-height-medium esri-view-height-greater-than-xsmall esri-view-height-greater-than-small esri-view-height-less-than-large esri-view-height-less-than-xlarge", large: "esri-view-height-large esri-view-height-greater-than-xsmall esri-view-height-greater-than-small esri-view-height-greater-than-medium esri-view-height-less-than-xlarge", xlarge: "esri-view-height-xlarge esri-view-height-greater-than-xsmall esri-view-height-greater-than-small esri-view-height-greater-than-medium esri-view-height-greater-than-large" } }, orientation: { getValue(e28) {
  const i29 = e28.viewSize, s33 = i29[0], a29 = i29[1], t28 = this.values;
  return a29 >= s33 ? t28.portrait : t28.landscape;
}, values: { portrait: "portrait", landscape: "landscape" }, valueToClassName: { portrait: "esri-view-orientation-portrait", landscape: "esri-view-orientation-landscape" } } };
var h7 = { xsmall: 544, small: 768, medium: 992, large: 1200 };
function n12(e28) {
  const i29 = e28;
  return i29 && i29.xsmall < i29.small && i29.small < i29.medium && i29.medium < i29.large;
}
function m12(e28, i29) {
  return i29 ? l10[e28].valueToClassName[i29].split(" ") : [];
}
var o13 = (o31) => {
  let g16 = class extends o31 {
    constructor(...e28) {
      super(...e28), this.orientation = null, this.widthBreakpoint = null, this.heightBreakpoint = null, this.breakpoints = h7;
    }
    initialize() {
      this.addHandles(l3(() => [this.breakpoints, this.size], () => this._updateClassNames(), h2));
    }
    destroy() {
      this.destroyed || this._removeActiveClassNames();
    }
    set breakpoints(e28) {
      if (e28 === this._get("breakpoints")) return;
      if (!n12(e28)) {
        const i29 = JSON.stringify(h7, null, 2);
        console.warn("provided breakpoints are not valid, using defaults:" + i29), e28 = h7;
      }
      this._set("breakpoints", { ...e28 });
    }
    _updateClassNames() {
      if (!this.container) return;
      const e28 = t2.acquire(), s33 = t2.acquire();
      let a29, t28 = false;
      for (a29 in l10) {
        const i29 = this[a29], r31 = l10[a29].getValue({ viewSize: this.size, breakpoints: this.breakpoints });
        i29 !== r31 && (t28 = true, this[a29] = r31, m12(a29, i29).forEach((e29) => s33.push(e29)), m12(a29, r31).forEach((i30) => e28.push(i30)));
      }
      t28 && (this._applyClassNameChanges(e28, s33), t2.release(e28), t2.release(s33));
    }
    _applyClassNameChanges(e28, i29) {
      const s33 = this.container;
      s33 && (i29.forEach((e29) => s33.classList.remove(e29)), e28.forEach((e29) => s33.classList.add(e29)));
    }
    _removeActiveClassNames() {
      const e28 = this.container;
      if (!e28) return;
      let i29;
      for (i29 in l10) m12(i29, this[i29]).forEach((i30) => e28.classList.remove(i30));
    }
  };
  return r([m2()], g16.prototype, "breakpoints", null), r([m2()], g16.prototype, "orientation", void 0), r([m2()], g16.prototype, "widthBreakpoint", void 0), r([m2()], g16.prototype, "heightBreakpoint", void 0), g16 = r([a("esri.views.BreakpointsOwner")], g16), g16;
};

// node_modules/@arcgis/core/views/overlay/ViewOverlay.js
var a6 = class extends b2 {
  constructor() {
    super(...arguments), this.items = new V(), this._watchUpdatingTracking = new h5(), this._callbacks = /* @__PURE__ */ new Map(), this._projector = i3(), this._hiddenProjector = i3();
  }
  get needsRender() {
    return this.items.length > 0;
  }
  get updating() {
    return this._watchUpdatingTracking?.updating ?? false;
  }
  initialize() {
    const t28 = document.createElement("div");
    t28.className = "esri-overlay-surface", this._set("surface", t28), this._hiddenSurface = document.createElement("div"), this._hiddenSurface.setAttribute("style", "visibility: hidden;"), t28.appendChild(this._hiddenSurface), this._watchUpdatingTracking.addOnCollectionChange(() => this.items, (t29) => {
      for (const e28 of t29.added) {
        const t30 = () => e28.render();
        this._callbacks.set(e28, t30), this._projector.append(this.surface, t30);
      }
      for (const e28 of t29.removed) {
        const t30 = this._projector.detach(this._callbacks.get(e28));
        this.surface.removeChild(t30.domNode), this._callbacks.delete(e28);
      }
    });
  }
  addItem(t28) {
    this.items.add(t28);
  }
  removeItem(t28) {
    this.items.remove(t28);
  }
  destroy() {
    this.items.removeAll(), this._callbacks.forEach((t28) => this._projector.detach(t28)), this._callbacks = null, this._projector = null, this._watchUpdatingTracking.destroy();
  }
  render() {
    this._projector.renderNow();
  }
  computeBoundingRect(t28) {
    const e28 = this._hiddenSurface, o31 = this._hiddenProjector;
    let r31;
    const s33 = () => (r31 = t28.render(), r31);
    o31.append(e28, s33), o31.renderNow();
    const i29 = { left: 0, top: 0, right: 0, bottom: 0 };
    if (r31?.domNode) {
      const t29 = r31.domNode.getBoundingClientRect();
      i29.left = t29.left, i29.top = t29.top, i29.right = t29.right, i29.bottom = t29.bottom;
    }
    for (o31.detach(s33); e28.firstChild; ) e28.removeChild(e28.firstChild);
    return i29;
  }
  overlaps(t28, e28) {
    const o31 = this.computeBoundingRect(t28), r31 = this.computeBoundingRect(e28);
    return Math.max(o31.left, r31.left) <= Math.min(o31.right, r31.right) && Math.max(o31.top, r31.top) <= Math.min(o31.bottom, r31.bottom);
  }
  get hasVisibleItems() {
    return this.items.some((t28) => t28.visible);
  }
  async prepare() {
    await document.fonts.load(this._fontString()).catch(() => {
    });
  }
  renderCanvas(t28, e28) {
    const o31 = !!e28?.disableDecorations;
    if (!this.items.some((t29) => t29.visible && !(o31 && t29.isDecoration))) return;
    const r31 = t28.getContext("2d");
    r31.save(), r31.font = this._fontString(), this.items.forEach((t29) => {
      o31 && t29.isDecoration || (r31.save(), t29.renderCanvas(r31), r31.restore());
    }), r31.restore();
  }
  _fontString() {
    return `10px ${getComputedStyle(this.surface).fontFamily}`;
  }
};
r([m2({ readOnly: true })], a6.prototype, "surface", void 0), r([m2({ readOnly: true })], a6.prototype, "items", void 0), r([m2({ readOnly: true })], a6.prototype, "needsRender", null), r([m2({ readOnly: true })], a6.prototype, "_watchUpdatingTracking", void 0), r([m2({ readOnly: true })], a6.prototype, "updating", null), a6 = r([a("esri.views.overlay.ViewOverlay")], a6);
var c11 = a6;

// node_modules/@arcgis/core/views/DOMContainer.js
var p6 = [0, 0];
function m13(e28) {
  const t28 = (e28.ownerDocument || window.document).defaultView, s33 = e28.getBoundingClientRect();
  return p6[0] = s33.left + (t28?.pageXOffset ?? 0), p6[1] = s33.top + (t28?.pageYOffset ?? 0), p6;
}
function f5(e28) {
  e28 && (e28.textContent = "", e28.parentNode && e28.parentNode.removeChild(e28));
}
function y2(e28) {
  const t28 = document.createElement("div");
  return e28.appendChild(t28), t28;
}
var g6 = 16;
var _5 = 750;
var v = 512;
var w2 = 2;
var C = (p29) => {
  let C5 = class extends p29 {
    constructor(...e28) {
      super(...e28), this._freqInfo = { freq: g6, time: _5 }, this._overlayRenderTaskHandle = null, this.height = 0, this.messagesCommon = null, this.overlay = null, this.position = null, this.resizing = false, this.root = null, this.surface = null, this.suspended = true, this.userContent = null, this.width = 0, this.widthBreakpoint = null, this.addHandles([l3(() => this.cursor, (e29) => {
        const { surface: t28 } = this;
        t28 && t28.setAttribute("data-cursor", e29);
      }), l3(() => this.navigating, (e29) => {
        const { surface: t28 } = this;
        t28 && t28.setAttribute("data-navigating", e29.toString());
      })]);
    }
    initialize() {
      this.addHandles([l3(() => this.ui, (e28, t28) => this._handleUIChange(e28, t28), h2), this.on("focus", () => this.notifyChange("focused")), this.on("blur", () => this.notifyChange("focused"))]);
    }
    destroy() {
      this.destroyed || (this.ui?.destroy(), this.container = null);
    }
    get container() {
      return this._get("container") ?? null;
    }
    set container(e28) {
      const i29 = this._get("container"), r31 = n3(e28);
      if (r31 || "string" != typeof e28 || i.getLogger(this).error("#container", `element with id '${e28}' not found`), i29 === r31) return;
      if (this._stopMeasuring(), i29 && (i29.classList.remove("esri-view"), this._overlayRenderTaskHandle && (this._overlayRenderTaskHandle.remove(), this._overlayRenderTaskHandle = null), this.overlay && (this.overlay.destroy(), this._set("overlay", null)), this.root && (f5(this.root), this._set("root", null)), this.userContent && (t4(this.userContent, i29), f5(this.userContent), this._set("userContent", null))), !r31) return this._set("width", 0), this._set("height", 0), this._set("position", null), this._set("suspended", true), this._set("surface", null), void this._set("container", null);
      r31.classList.add("esri-view");
      const h20 = document.createElement("div");
      h20.className = "esri-view-user-storage", t4(r31, h20), r31.appendChild(h20), this._set("userContent", h20);
      const l23 = document.createElement("div");
      l23.className = "esri-view-root", r31.insertBefore(l23, r31.firstChild), this._set("root", l23);
      const u18 = document.createElement("div");
      u18.className = "esri-view-surface", u18.setAttribute("role", "application"), u18.tabIndex = 0, l23.appendChild(u18), this._set("surface", u18);
      const p30 = new c11();
      l23.appendChild(p30.surface), this._set("overlay", p30), this.addHandles(l3(() => p30.needsRender, (e29) => {
        e29 && !this._overlayRenderTaskHandle ? this._overlayRenderTaskHandle = F({ render: () => this.overlay?.render() }) : this._overlayRenderTaskHandle = l(this._overlayRenderTaskHandle);
      })), this.forceDOMReadyCycle(), this._set("container", r31), this._startMeasuring();
    }
    get focused() {
      const e28 = document.activeElement === this.surface;
      return document.hasFocus() && e28;
    }
    get size() {
      return [this.width, this.height];
    }
    set ui(e28) {
      const t28 = this._get("ui");
      t28 !== e28 && t28?.destroy(), this._set("ui", e28);
    }
    blur() {
      this.surface?.blur();
    }
    focus() {
      this.surface?.focus();
    }
    pageToContainer(e28, t28, s33) {
      const i29 = this.position;
      return e28 -= i29 ? i29[0] : 0, t28 -= i29 ? i29[1] : 0, s33 ? (s33[0] = e28, s33[1] = t28) : s33 = [e28, t28], s33;
    }
    containerToPage(e28, t28, s33) {
      const i29 = this.position;
      return e28 += i29 ? i29[0] : 0, t28 += i29 ? i29[1] : 0, s33 ? (s33[0] = e28, s33[1] = t28) : s33 = [e28, t28], s33;
    }
    _handleUIChange(e28, t28) {
      this.removeHandles("ui"), t28 && t28 !== e28 && t28.destroy(), e28 && (e28.view = this, this.addHandles(l3(() => this.root, (t29) => {
        e28.container = t29 ? y2(t29) : null;
      }, h2), "ui")), this._set("ui", e28);
    }
    _stopMeasuring() {
      this.removeHandles("measuring"), this._get("resizing") && this._set("resizing", false);
    }
    _startMeasuring() {
      const e28 = this._freqInfo;
      e28.freq = g6, e28.time = _5;
      const t28 = F({ prepare: (e29) => {
        const s34 = this._measure(), i29 = this._freqInfo;
        if (i29.time += e29.deltaTime, s34 && (i29.freq = g6, this._get("resizing") || this._set("resizing", true)), i29.time < i29.freq) return;
        i29.time = 0;
        const r31 = this._position();
        i29.freq = r31 || s34 ? g6 : Math.min(_5, i29.freq * w2), !s34 && i29.freq >= v && (t28.pause(), this._get("resizing") && this._set("resizing", false));
      } }), s33 = new ResizeObserver((s34) => {
        e28.freq = g6, e28.time = _5, t28.resume();
      });
      null != this.container && s33.observe(this.container);
      const o31 = e(() => s33.disconnect());
      this.addHandles([o5(window, "resize", () => {
        e28.freq = g6, e28.time = _5, t28.resume();
      }), o31, t28], "measuring"), this._measure(), this._position();
    }
    _measure() {
      const e28 = this.container, t28 = e28 ? e28.clientWidth : 0, s33 = e28 ? e28.clientHeight : 0;
      if (0 === t28 || 0 === s33) return this.suspended || this._set("suspended", true), false;
      const i29 = this.width, r31 = this.height;
      return t28 === i29 && s33 === r31 ? (this.suspended && this._set("suspended", false), false) : (this._set("width", t28), this._set("height", s33), this.suspended && this._set("suspended", false), this.emit("resize", { oldWidth: i29, oldHeight: r31, width: t28, height: s33 }), true);
    }
    _position() {
      const e28 = this.container, t28 = this.position, s33 = e28 && m13(e28);
      return !!s33 && ((!t28 || s33[0] !== t28[0] || s33[1] !== t28[1]) && (this._set("position", [s33[0], s33[1]]), true));
    }
    forceDOMReadyCycle() {
    }
  };
  return r([m2()], C5.prototype, "container", null), r([m2({ readOnly: true })], C5.prototype, "focused", null), r([m2({ readOnly: true })], C5.prototype, "height", void 0), r([m2()], C5.prototype, "messagesCommon", void 0), r([m2({ type: c11 })], C5.prototype, "overlay", void 0), r([m2({ readOnly: true })], C5.prototype, "position", void 0), r([m2({ readOnly: true })], C5.prototype, "resizing", void 0), r([m2({ readOnly: true })], C5.prototype, "root", void 0), r([m2({ value: null, readOnly: true })], C5.prototype, "size", null), r([m2({ readOnly: true })], C5.prototype, "surface", void 0), r([m2({ readOnly: true })], C5.prototype, "suspended", void 0), r([m2({ nonNullable: true })], C5.prototype, "ui", null), r([m2({ readOnly: true })], C5.prototype, "userContent", void 0), r([m2({ readOnly: true })], C5.prototype, "width", void 0), r([m2()], C5.prototype, "widthBreakpoint", void 0), C5 = r([a("esri.views.DOMContainer")], C5), C5;
};

// node_modules/@arcgis/core/views/PopupView.js
function m14(p29) {
  return null != p29 && "open" in p29 && "declaredClass" in p29;
}
function f6(p29) {
  return null != p29 && "declaredClass" in p29 && "dockOptions" in p29;
}
var w3 = (a29) => {
  let w8 = class extends a29 {
    constructor() {
      super(...arguments), this._popupSetupTask = null, this.popup = {}, this.popupEnabled = true;
    }
    initialize() {
      this.addHandles([l3(() => [this.ui, this.popup], ([p29, e28], t28) => {
        const o31 = "popup", i29 = "manual";
        if (t28) {
          const [p30, i30] = t28;
          p30 && m14(i30) && (i30.view = null, f6(i30) && (p30.remove(i30, o31), i30 !== e28 && e28 && i30.destroy()));
        }
        p29 && m14(e28) && (e28.view = this, f6(e28) && p29.add(e28, { key: o31, position: i29, internal: true }));
      }, w), this.on("click", (p29) => {
        this.popup && this.popupEnabled && ("mouse" !== p29.pointerType || 0 === p29.button) && (m14(this.popup) ? this.popup.viewModel.handleViewClick(p29) : p29.defer(async () => {
          await this.setupPopup(), m14(this.popup) && !this.destroyed && this.ready && this.popupEnabled && this.popup.viewModel.handleViewClick(p29);
        }));
      }, _3.WIDGET)]), j(() => this.ready && this.popupEnabled && !this.updating).then(() => {
        import("./Popup-QNE4RREM.js");
      });
    }
    destroy() {
      this.destroyed || this.closePopup();
    }
    async openPopup(p29) {
      if (m14(this.popup)) return this.popup.open(p29);
      try {
        if (await this.setupPopup(), !this.popup) return void i.getLogger(this).error(new s("view:null-popup", "Popup is null and can't be opened"));
        this.popup.open(p29);
      } catch {
      }
    }
    closePopup() {
      this._popupSetupTask?.abort(), m14(this.popup) && this.popup.close();
    }
    async fetchPopupFeatures(p29, e28) {
      return await this.when(), this._popupHitsToFeatures(await this._getPopupHits(p29, e28), e28);
    }
    async setupPopup() {
      if (this._popupSetupTask?.abort(), this.popup && !m14(this.popup)) return this._popupSetupTask = d5(async (p29) => {
        const { default: e28 } = await import("./Popup-QNE4RREM.js");
        if (s3(p29), !this.popup || m14(this.popup)) return;
        const t28 = this.popup;
        delete t28.open, delete t28.close, this.popup = new e28(t28);
      }), this._popupSetupTask.promise;
    }
    async _popupHitsToFeatures({ location: p29, hits: e28 }, t28) {
      const o31 = [], i29 = [];
      let a30 = false;
      const u18 = E(t28, has("popup-view-fetch-timeout") ?? P3), n32 = (p30) => {
        const e29 = new y3(p30);
        return i29.push(e29), o31.push(e29.promise), e29;
      }, c29 = (p30) => {
        const e29 = i29.at(-1);
        return e29 && e29.layerView === p30 && !a30 ? e29 : n32(p30);
      };
      for (const s33 of e28) if ("graphic" in s33) {
        c29(s33.layerView).graphics.push(s33.graphic), a30 = false;
      } else o31.push(s33.layerView.fetchPopupFeaturesAtLocation(s33.mapPoint, u18)), a30 = true;
      i29.map((p30) => p30.resolve(u18));
      const h20 = g(o31).then((p30) => p30.filter((p31) => !!p31).flat());
      return { pendingFeatures: o31, allGraphicsPromise: h20, location: p29 };
    }
    async _getPopupHits(p29, e28) {
      const { hits: t28, location: o31 } = await this.popupHitTest(p29);
      s3(e28);
      const s33 = [];
      for (const i29 of t28) if ("graphic" in i29) {
        if (this._isValidPopupGraphic(i29.graphic, e28)) {
          const p30 = this._isValidPopupGraphicsLayerView(i29.layerView) ? i29.layerView : void 0;
          s33.push({ graphic: i29.graphic, layerView: p30 });
        }
      } else this._isValidPopupLocationLayerView(i29.layerView) && s33.push({ mapPoint: i29.mapPoint, layerView: i29.layerView });
      return { hits: s33, location: o31 };
    }
    _isValidPopupGraphic(p29, e28) {
      return p29 && !!p29.getEffectivePopupTemplate(e28?.defaultPopupTemplateEnabled);
    }
    _isValidPopupGraphicsLayerView(p29) {
      return !p29 || (!("layer" in p29) || !p29.suspended) && "fetchPopupFeaturesFromGraphics" in p29;
    }
    _isValidPopupLocationLayerView(p29) {
      return (!("layer" in p29) || !p29.suspended) && "fetchPopupFeaturesAtLocation" in p29;
    }
  };
  return r([m2()], w8.prototype, "popup", void 0), r([m2()], w8.prototype, "popupEnabled", void 0), w8 = r([a("esri.views.PopupView")], w8), w8;
};
var y3 = class {
  constructor(p29) {
    this.layerView = p29, this._resolver = L2(), this.graphics = [];
  }
  get promise() {
    return this._resolver.promise;
  }
  resolve(p29) {
    const { layerView: e28, graphics: t28, _resolver: o31 } = this;
    if (!e28) return o31.resolve(t28), o31.promise;
    let i29;
    return e28.fetchPopupFeaturesFromGraphics(t28, p29).catch((p30) => (i29 = p30, null)).then((p30) => {
      p30 ? o31.resolve(p30) : o31.reject(i29);
    }), o31.promise;
  }
};
var P3 = 5e3;

// node_modules/@arcgis/core/support/AnalysesCollection.js
var t11 = class extends n9 {
  constructor(e28) {
    super(e28), this.addHandles(this.on("before-add", (e29) => {
      null != e29.item && e29.item.parent === this.owner && (i.getLogger(this).warn("Analysis inside the collection must be unique. Not adding this element again."), e29.preventDefault());
    }));
  }
  _own(e28) {
    e28.parent = this.owner;
  }
  _release(e28) {
    e28.parent = null;
  }
};
t11 = r([a("esri.support.AnalysesCollection")], t11);

// node_modules/@arcgis/core/views/BasemapView.js
var n13 = class extends b2 {
  constructor(e28) {
    super(e28), this.view = null, this.baseLayerViews = new V(), this.referenceLayerViews = new V(), this._loadingHandle = l3(() => this.view?.map?.basemap, (e29) => {
      e29 && e29.load().catch(() => {
      });
    }, h2);
  }
  destroy() {
    this._set("view", null), this._loadingHandle && (this._loadingHandle.remove(), this._loadingHandle = null);
    for (const e28 of this.baseLayerViews) e28.destroy();
    this.baseLayerViews.length = 0;
    for (const e28 of this.referenceLayerViews) e28.destroy();
    this.referenceLayerViews.length = 0;
  }
  get suspended() {
    return this.view?.suspended ?? true;
  }
  get updating() {
    if (this.view?.suspended) return false;
    const e28 = this.view?.map?.basemap;
    return !!e28?.loaded && (this.baseLayerViews.some((e29) => e29.updating) || this.referenceLayerViews.some((e29) => e29.updating));
  }
};
r([m2({ constructOnly: true })], n13.prototype, "view", void 0), r([m2({ readOnly: true })], n13.prototype, "baseLayerViews", void 0), r([m2({ readOnly: true })], n13.prototype, "referenceLayerViews", void 0), r([m2({ readOnly: true })], n13.prototype, "suspended", null), r([m2({ type: Boolean, readOnly: true })], n13.prototype, "updating", null), n13 = r([a("esri.views.BasemapView")], n13);
var p7 = n13;

// node_modules/@arcgis/core/views/Magnifier.js
var i10 = class extends b2 {
  constructor(o31) {
    super(o31), this.factor = 1.5, this.offset = c5(0, 0), this.position = null, this.size = 120, this.maskUrl = null, this.maskEnabled = true, this.overlayUrl = null, this.overlayEnabled = true, this.visible = true;
  }
  get version() {
    return this.commitProperty("factor"), this.commitProperty("offset"), this.commitProperty("position"), this.commitProperty("visible"), this.commitProperty("size"), this.commitProperty("maskUrl"), this.commitProperty("maskEnabled"), this.commitProperty("overlayUrl"), this.commitProperty("overlayEnabled"), (this._get("version") || 0) + 1;
  }
};
r([m2({ type: Number })], i10.prototype, "factor", void 0), r([m2({ nonNullable: true })], i10.prototype, "offset", void 0), r([m2()], i10.prototype, "position", void 0), r([m2({ type: Number, range: { min: 0 } })], i10.prototype, "size", void 0), r([m2()], i10.prototype, "maskUrl", void 0), r([m2()], i10.prototype, "maskEnabled", void 0), r([m2()], i10.prototype, "overlayUrl", void 0), r([m2()], i10.prototype, "overlayEnabled", void 0), r([m2({ readOnly: true })], i10.prototype, "version", null), r([m2({ type: Boolean })], i10.prototype, "visible", void 0), i10 = r([a("esri.views.Magnifier")], i10);
var p8 = i10;

// node_modules/@arcgis/core/views/support/selectionUtils.js
function e13(e28) {
  return !(null == e28 || "object" != typeof e28 || !("createQuery" in e28) || !e28.createQuery);
}

// node_modules/@arcgis/core/views/SelectionManager.js
var S3 = class extends o7.EventedAccessor {
  constructor(e28) {
    super(e28), this._selectionMap = new s6(), this._sources = new V(), this._trashCan = [], this._layerEditHandles = new V(), this._vizTaskId = 0, this.view = null, this.showHighlight = true, this.highlightName = "default";
  }
  initialize() {
    this.addHandles([l3(() => [this.view, this.showHighlight], () => this._refreshVisualization()), l3(() => this.view, (e28) => {
      e28?.when().then(() => this.syncSources());
    }, h2), a3(() => this.sources, "change", (e28) => {
      const t28 = this._selectionMap, s33 = [];
      for (const o31 of e28.removed) {
        const e29 = t28.get(o31);
        e29 && (t28.delete(o31), e29.highlightHandle?.remove(), s33.push({ layer: o31, selection: [], added: [], removed: [...e29.selection] }));
      }
      this._refreshListeners(), s33.length && this._onSelectionChange(s33);
    }, { onListenerAdd: () => this._refreshListeners() })]);
  }
  destroy() {
    this.clear(), this._layerEditHandles.drain(l);
  }
  get selections() {
    return Array.from(this._selectionMap.entries()).map((e28) => {
      const [t28, s33] = e28;
      return { layer: t28, selection: [...s33.selection] };
    });
  }
  get count() {
    let e28 = 0;
    for (const t28 of this._selectionMap.values()) e28 += t28.selection.length;
    return e28;
  }
  get hasSelection() {
    return this.count > 0;
  }
  get sources() {
    return this._sources;
  }
  set sources(e28) {
    n5(e28, this._sources);
  }
  syncSources() {
    const e28 = /* @__PURE__ */ new Set(), t28 = this.view?.map;
    if (!t28) return;
    const s33 = (t29) => {
      c6(t29) ? (t29.layers?.forEach(s33), t29.tables?.forEach(s33)) : s10(t29) ? (t29.sublayers?.forEach(s33), t29.subtables?.forEach(s33)) : p3(t29) ? t29.sublayers?.forEach(s33) : e13(t29) && e28.add(t29);
    };
    t28.allLayers.forEach(s33), t28.allTables.forEach(s33), this.sources = [...e28];
  }
  async getSelectedFeatures(e28, t28 = {}, s33 = "layerView") {
    const { view: o31, selections: i29 } = this;
    if (!o31 && "layerView" === s33) return i.getLogger(this).warn("Cannot query layer views without a view."), [];
    const r31 = e28?.length ? i29.filter((t29) => e28.includes(t29.layer)) : i29, l23 = [];
    return r31.forEach(async (e29) => {
      const { layer: i30, selection: n32 } = e29;
      if (!n32.length) return;
      const r32 = g2(i30) ? i30.parent : i30;
      if (null == r32) return;
      if ("layer" === s33) return void l23.push(F2(r32, n32, t28));
      if (b3(r32) || !o31 || !E2(r32)) return;
      const c29 = await o31.whenLayerView(r32).catch(() => null);
      c29 && l23.push(F2(c29, n32, t28));
    }), (await Promise.all(l23)).filter((e29) => null != e29);
  }
  updateSelection(e28) {
    const s33 = /* @__PURE__ */ new Map();
    for (const [t28, n32] of this._selectionMap) s33.set(t28, [...n32.selection]);
    let o31 = false;
    const i29 = e28.current.concat(e28.added);
    for (const t28 of i29) {
      const e29 = t28.sourceLayer, i30 = t28.getObjectId();
      if (this.sources.includes(e29) && (e13(e29) || g2(e29)) && null !== i30) {
        const t29 = u(s33, e29, () => []);
        t29.includes(i30) || (t29.push(i30), o31 = true);
      }
    }
    for (const t28 of e28.removed) {
      const e29 = t28.sourceLayer, i30 = t28.getObjectId();
      if (this.sources.includes(e29) && (e13(e29) || g2(e29)) && null !== i30) {
        const t29 = s33.get(e29), n32 = t29?.indexOf(i30);
        void 0 !== n32 && n32 >= 0 && (t29?.splice(n32, 1), o31 = true);
      }
    }
    if (o31) {
      const { _selectionMap: e29, _trashCan: o32 } = this, i30 = [];
      for (const [n32, r31] of s33) {
        const s34 = e29.get(n32);
        void 0 !== s34 && o32.push(s34), e29.set(n32, { selection: r31 }), i30.push({ layer: n32, selection: r31, ...d(void 0 !== s34 ? s34.selection : [], r31) });
      }
      this._onSelectionChange(i30);
    }
  }
  setSelection(e28, t28) {
    this._setSelection(e28, t28);
  }
  getSelection(e28) {
    const t28 = this._selectionMap.get(e28);
    return t28?.selection;
  }
  appendToSelection(e28, t28) {
    const s33 = this._selectionMap.get(e28), o31 = void 0 !== s33 ? [...s33.selection] : [];
    for (const i29 of t28) o31.includes(i29) || o31.push(i29);
    this._setSelection(e28, o31);
  }
  removeFromSelection(e28, t28) {
    const s33 = this._selectionMap.get(e28);
    if (!s33) return;
    const o31 = [];
    for (const i29 of s33.selection) t28.includes(i29) || o31.push(i29);
    this._setSelection(e28, o31);
  }
  toggleInSelection(e28, t28) {
    const s33 = this._selectionMap.get(e28);
    if (!s33 || 0 === s33.selection.length) return void this._setSelection(e28, t28);
    const o31 = new Set(s33.selection), i29 = new Set(t28), n32 = c3(o31, i29);
    this._setSelection(e28, Array.from(n32));
  }
  clear() {
    const e28 = this._selectionMap.values();
    this._trashCan.push(...e28);
    const t28 = [];
    for (const [s33, o31] of this._selectionMap.entries()) t28.push({ layer: s33, added: [], removed: [...o31.selection], selection: [] });
    this._selectionMap.clear(), this._onSelectionChange(t28);
  }
  _onSelectionChange(e28) {
    this._refreshVisualization(), this.emit("selection-change", { view: this.view, changes: e28 });
  }
  _refreshVisualization() {
    for (this._vizTaskId++; this._trashCan.length > 0; ) {
      const e29 = this._trashCan.pop();
      e29?.highlightHandle?.remove();
    }
    if (null == this.view) return;
    const { sources: e28, view: t28, _selectionMap: s33, showHighlight: o31 } = this, i29 = this._vizTaskId;
    for (const n32 of e28) {
      const e29 = s33.get(n32), r31 = g2(n32) ? n32.parent : n32;
      if (null != r31 && E2(r31)) {
        if (b3(r31)) continue;
        t28.whenLayerView(r31).then((t29) => {
          e29?.highlightHandle?.remove(), null != e29 && o31 && i29 === this._vizTaskId && "highlight" in t29 && "function" == typeof t29.highlight && e29.selection.length > 0 && (e29.highlightHandle = t29.highlight(e29.selection, this.highlightName));
        }).catch(() => {
          e29?.highlightHandle?.remove();
        });
      }
    }
  }
  _refreshListeners() {
    this._layerEditHandles.drain(l);
    const e28 = new Set(this.sources.map((e29) => g2(e29) ? e29.parent : e29));
    for (const t28 of e28) e13(t28) && "on" in t28 && t28.on && this._layerEditHandles.push(t28.on("edits", (e29) => this._onLayerEdit(e29, t28)));
  }
  _onLayerEdit(e28, t28) {
    if (p3(t28)) this._onParentLayerEdit(e28, t28);
    else if (e28.deletedFeatures.length && this._selectionMap.has(t28)) {
      const s33 = [];
      e28.deletedFeatures.forEach(({ error: e29, objectId: t29 }) => {
        null != t29 && null == e29 && s33.push(t29);
      }), this.removeFromSelection(t28, s33);
    }
  }
  _onParentLayerEdit(e28, t28) {
    const { deletedFeatures: s33, edits: o31, updatedFeatures: i29 } = e28;
    if (o31?.updateFeatures?.forEach((e29) => {
      const s34 = e29.getObjectId() ?? e29.attributes[t28.objectIdField];
      if (null == s34) return;
      if (i29.find((e30) => e30.objectId === s34)?.error) return;
      const o32 = t28.findSublayerForFeature(e29);
      if (!e13(o32)) return;
      const n32 = t28.sublayers.find((e30) => !(!e13(e30) || !this.getSelection(e30)?.includes(s34)));
      e13(n32) && n32 !== o32 && (this.removeFromSelection(n32, [s34]), this.appendToSelection(o32, [s34]));
    }), s33.length) {
      const e29 = [];
      s33.forEach(({ error: t29, objectId: s34 }) => {
        null != s34 && null == t29 && e29.push(s34);
      }), t28.sublayers.forEach((t29) => {
        e13(t29) && this._selectionMap.has(t29) && this.removeFromSelection(t29, e29);
      });
    }
  }
  _setSelection(e28, s33) {
    if (!this.sources.includes(e28)) throw new Error(`Cannot set selection on layer ${e28.title} because it is not in 'sources'`);
    const o31 = this._selectionMap.get(e28);
    if (void 0 === o31 || !M3(o31, { selection: s33 })) {
      void 0 !== o31 && this._trashCan.push(o31), this._selectionMap.set(e28, { selection: [...s33] });
      const i29 = { layer: e28, selection: [...s33], ...d(void 0 !== o31 ? o31.selection : [], s33) };
      this._onSelectionChange([i29]);
    }
  }
};
r([m2()], S3.prototype, "_selectionMap", void 0), r([m2()], S3.prototype, "_sources", void 0), r([m2({ readOnly: true, nonNullable: true })], S3.prototype, "selections", null), r([m2({ readOnly: true, nonNullable: true })], S3.prototype, "count", null), r([m2()], S3.prototype, "view", void 0), r([m2({ readOnly: true, nonNullable: true })], S3.prototype, "hasSelection", null), r([m2()], S3.prototype, "showHighlight", void 0), r([m2()], S3.prototype, "sources", null), r([m2()], S3.prototype, "highlightName", void 0), S3 = r([a("esri.views.SelectionManager")], S3);
var b3 = (e28) => g2(e28) ? true === e28.parent?.isTable : e28.isTable;
var j5 = (e28) => void 0 !== e28.layer;
var E2 = (e28) => void 0 !== e28?.when;
var M3 = (e28, t28) => {
  if (null == e28 && null == t28) return true;
  if (null != e28 && null == t28 || null == e28 && null != t28) return false;
  if (null != e28 && null != t28 && null != e28.selection && null != t28.selection) {
    const s33 = [...e28.selection], o31 = [...t28.selection];
    if (s33.length !== o31.length) return false;
    s33.sort(), o31.sort();
    for (let e29 = 0; e29 < s33.length; e29++) if (s33[e29] !== o31[e29]) return false;
  }
  return true;
};
var F2 = async (e28, t28, s33 = {}) => {
  let o31;
  if (j5(e28)) {
    const i29 = e28;
    o31 = void 0 === i29 ? null : await i29.queryFeatures(new R({ ...s33, objectIds: t28 })).then((t29) => ({ data: t29, layer: e28.layer }));
  } else {
    const i29 = e28;
    o31 = void 0 === i29 ? null : await i29.queryFeatures(new R({ ...s33, objectIds: t28 })).then((e29) => ({ data: e29, layer: i29 }));
  }
  return o31;
};
var L5 = S3;

// node_modules/@arcgis/core/views/Theme.js
var p9 = class extends a2.ClonableMixin(b2) {
  constructor(o31) {
    super(o31), this.accentColor = new l6([255, 127, 0]), this.textColor = new l6([255, 255, 255]);
  }
};
r([m2({ type: l6, nonNullable: true })], p9.prototype, "accentColor", void 0), r([m2({ type: l6, nonNullable: true })], p9.prototype, "textColor", void 0), p9 = r([a("esri.views.Theme")], p9);
var l11 = p9;

// node_modules/@arcgis/core/views/input/ViewEvents.js
var i11 = ["click", "double-click", "immediate-click", "immediate-double-click", "hold", "drag", "key-down", "key-up", "pointer-down", "pointer-move", "pointer-up", "pointer-drag", "mouse-wheel", "pointer-enter", "pointer-leave", "gamepad", "focus", "blur"];
var o14 = {};
function s15(e28) {
  return !!o14[e28];
}
function p10(e28) {
  for (const t28 of e28) if (!s15(t28)) return false;
  return true;
}
i11.forEach((e28) => {
  o14[e28] = true;
});
var c12 = class {
  constructor(e28) {
    this._handlers = /* @__PURE__ */ new Map(), this._counter = 0, this._handlerCounts = /* @__PURE__ */ new Map(), this.view = e28, this.inputManager = null;
  }
  connect(e28) {
    e28 && this.disconnect(), this.inputManager = e28, this._handlers.forEach(({ handler: e29, priority: t28 }, n32) => this.inputManager?.installHandlers(n32, [e29], t28));
  }
  disconnect() {
    this.inputManager && this._handlers.forEach((e28, t28) => this.inputManager?.uninstallHandlers(t28)), this.inputManager = null;
  }
  destroy() {
    this.disconnect(), this._handlers.clear(), this.view = null;
  }
  on(t28, n32, a29, i29) {
    const o31 = Array.isArray(t28) ? t28 : t28.split(",");
    if (!p10(o31)) return o31.some(s15) && console.error("Error: registering input events and other events on the view at the same time is not supported."), null;
    let c29, u18;
    Array.isArray(n32) ? u18 = n32 : (c29 = n32, u18 = []), "function" == typeof a29 ? c29 = a29 : i29 = a29, i29 = null != i29 ? i29 : _3.DEFAULT;
    const d21 = this._createUniqueGroupName(), m26 = new l12(this.view, o31, u18, c29);
    this._handlers.set(d21, { handler: m26, priority: i29 });
    for (const e28 of o31) {
      const t29 = this._handlerCounts.get(e28) || 0;
      this._handlerCounts.set(e28, t29 + 1);
    }
    return this.inputManager && this.inputManager.installHandlers(d21, [m26], i29), e(() => this._removeHandler(d21, o31));
  }
  hasHandler(e28) {
    return !!this._handlerCounts.get(e28);
  }
  _removeHandler(e28, t28) {
    if (this._handlers.has(e28)) {
      this._handlers.delete(e28);
      for (const e29 of t28) {
        const t29 = this._handlerCounts.get(e29);
        void 0 === t29 || (1 === t29 ? this._handlerCounts.delete(e29) : this._handlerCounts.set(e29, t29 - 1));
      }
    }
    this.inputManager && this.inputManager.uninstallHandlers(e28);
  }
  _createUniqueGroupName() {
    return this._counter += 1, `viewEvents_${this._counter}`;
  }
};
var l12 = class extends t8 {
  constructor(e28, t28, n32, a29) {
    super(true), this._latestDragStart = void 0, this.view = e28;
    for (const r31 of t28) switch (r31) {
      case "click":
        this.registerIncoming("click", n32, (t29) => a29(m15(e28, t29)));
        break;
      case "double-click":
        this.registerIncoming("double-click", n32, (t29) => a29(g7(e28, t29)));
        break;
      case "immediate-click":
        this.registerIncoming("immediate-click", n32, (t29) => a29(f7(e28, t29)));
        break;
      case "immediate-double-click":
        this.registerIncoming("immediate-double-click", n32, (t29) => a29(v2(e28, t29)));
        break;
      case "hold":
        this.registerIncoming("hold", n32, (t29) => a29(h8(e28, t29)));
        break;
      case "drag":
        this.registerIncoming("drag", n32, (e29) => {
          const t29 = this._wrapDrag(e29);
          t29 && a29(t29);
        });
        break;
      case "key-down":
        this.registerIncoming("key-down", n32, (e29) => a29(y4(e29)));
        break;
      case "key-up":
        this.registerIncoming("key-up", n32, (e29) => a29(k(e29)));
        break;
      case "pointer-down":
        this.registerIncoming("pointer-down", n32, (e29) => a29(I3(e29, "pointer-down")));
        break;
      case "pointer-move":
        this.registerIncoming("pointer-move", n32, (e29) => a29(I3(e29, "pointer-move")));
        break;
      case "pointer-up":
        this.registerIncoming("pointer-up", n32, (e29) => a29(I3(e29, "pointer-up")));
        break;
      case "pointer-drag":
        this.registerIncoming("pointer-drag", n32, (e29) => a29(D(e29)));
        break;
      case "mouse-wheel":
        this.registerIncoming("mouse-wheel", n32, (e29) => a29(P4(e29)));
        break;
      case "pointer-enter":
        this.registerIncoming("pointer-enter", n32, (e29) => a29(I3(e29, "pointer-enter")));
        break;
      case "pointer-leave":
        this.registerIncoming("pointer-leave", n32, (e29) => a29(I3(e29, "pointer-leave")));
        break;
      case "gamepad":
        this.registerIncoming("gamepad", n32, (e29) => {
          a29(_6(e29));
        });
        break;
      case "focus":
        this.registerIncoming("focus", n32, (e29) => {
          a29(u9(e29));
        });
        break;
      case "blur":
        this.registerIncoming("blur", n32, (e29) => {
          a29(d8(e29));
        });
    }
  }
  _wrapDrag(e28) {
    const n32 = e28.data, { x: a29, y: r31 } = n32.center, { action: i29, pointerType: o31, button: s33 } = n32;
    if ("start" === i29 && (this._latestDragStart = n32), !this._latestDragStart) return;
    const p29 = n32.pointer.native, c29 = n32.buttons, { cancelable: l23, timestamp: u18 } = e28, d21 = { x: this._latestDragStart.center.x, y: this._latestDragStart.center.y };
    return "end" === i29 && (this._latestDragStart = void 0), { type: "drag", action: i29, x: a29, y: r31, origin: d21, pointerType: o31, button: s33, buttons: c29, radius: n32.radius, angle: M(n32.angle), native: p29, timestamp: u18, cancelable: l23, stopPropagation: () => e28.stopPropagation(), defer: (t28) => e28.defer(t28), preventDefault: () => e28.preventDefault() };
  }
};
function u9(e28) {
  return { type: "focus", timestamp: e28.timestamp, native: e28.data.native, cancelable: e28.cancelable, stopPropagation: () => e28.stopPropagation(), defer: (t28) => e28.defer(t28), preventDefault: () => e28.preventDefault() };
}
function d8(e28) {
  return { type: "blur", timestamp: e28.timestamp, native: e28.data.native, cancelable: e28.cancelable, stopPropagation: () => e28.stopPropagation(), defer: (t28) => e28.defer(t28), preventDefault: () => e28.preventDefault() };
}
function m15(e28, t28) {
  const { pointerType: a29, button: r31, buttons: i29, x: o31, y: s33, native: p29, eventId: c29 } = t28.data, { cancelable: l23, timestamp: u18 } = t28;
  return { type: "click", pointerType: a29, button: r31, buttons: i29, x: o31, y: s33, native: p29, timestamp: u18, screenPoint: c5(o31, s33), mapPoint: b4(e28, o31, s33), eventId: c29, cancelable: l23, stopPropagation: () => t28.stopPropagation(), defer: (e29) => t28.defer(e29), preventDefault: () => t28.preventDefault() };
}
function g7(e28, t28) {
  const { pointerType: n32, button: a29, buttons: r31, x: i29, y: o31, native: s33, eventId: p29 } = t28.data, { cancelable: c29, timestamp: l23 } = t28;
  return { type: "double-click", pointerType: n32, button: a29, buttons: r31, x: i29, y: o31, native: s33, timestamp: l23, mapPoint: b4(e28, i29, o31), eventId: p29, cancelable: c29, stopPropagation: () => t28.stopPropagation(), defer: (e29) => t28.defer(e29), preventDefault: () => t28.preventDefault() };
}
function f7(e28, t28) {
  const { pointerType: n32, button: a29, buttons: r31, x: i29, y: o31, native: s33, eventId: p29 } = t28.data, c29 = s33.pointerId, { cancelable: l23, timestamp: u18 } = t28;
  return { type: "immediate-click", pointerId: c29, pointerType: n32, button: a29, buttons: r31, x: i29, y: o31, native: s33, timestamp: u18, mapPoint: b4(e28, i29, o31), eventId: p29, cancelable: l23, stopPropagation: () => t28.stopPropagation(), defer: (e29) => t28.defer(e29), preventDefault: () => t28.preventDefault() };
}
function v2(e28, t28) {
  const { pointerType: n32, button: a29, buttons: r31, x: i29, y: o31, native: s33, eventId: p29 } = t28.data, c29 = s33.pointerId, { cancelable: l23, timestamp: u18 } = t28;
  return { type: "immediate-double-click", pointerId: c29, pointerType: n32, button: a29, buttons: r31, x: i29, y: o31, native: s33, timestamp: u18, mapPoint: b4(e28, i29, o31), eventId: p29, cancelable: l23, stopPropagation: () => t28.stopPropagation(), defer: (e29) => t28.defer(e29), preventDefault: () => t28.preventDefault() };
}
function h8(e28, t28) {
  const { pointerType: n32, button: a29, buttons: r31, x: i29, y: o31, native: s33 } = t28.data, { cancelable: p29, timestamp: c29 } = t28;
  return { type: "hold", pointerType: n32, button: a29, buttons: r31, x: i29, y: o31, native: s33, timestamp: c29, mapPoint: b4(e28, i29, o31), cancelable: p29, stopPropagation: () => t28.stopPropagation(), defer: (e29) => t28.defer(e29), preventDefault: () => t28.preventDefault() };
}
function b4(e28, t28, a29) {
  return e28.toMap(c5(t28, a29), { exclude: [] });
}
function y4(e28) {
  const { key: t28, repeat: n32, native: a29 } = e28.data, { cancelable: r31, timestamp: i29 } = e28;
  return { type: "key-down", key: t28, repeat: n32, native: a29, timestamp: i29, cancelable: r31, stopPropagation: () => e28.stopPropagation(), defer: (t29) => e28.defer(t29), preventDefault: () => e28.preventDefault() };
}
function k(e28) {
  const { key: t28, native: n32 } = e28.data, { cancelable: a29, timestamp: r31 } = e28;
  return { type: "key-up", key: t28, native: n32, timestamp: r31, cancelable: a29, stopPropagation: () => e28.stopPropagation(), defer: (t29) => e28.defer(t29), preventDefault: () => e28.preventDefault() };
}
function I3(e28, t28) {
  const { x: n32, y: a29, button: r31, buttons: i29, native: o31, eventId: s33 } = e28.data, p29 = o31.pointerId, c29 = o31.pointerType, { cancelable: l23, timestamp: u18 } = e28;
  return { type: t28, x: n32, y: a29, pointerId: p29, pointerType: c29, button: r31, buttons: i29, native: o31, timestamp: u18, eventId: s33, cancelable: l23, stopPropagation: () => e28.stopPropagation(), defer: (t29) => e28.defer(t29), preventDefault: () => e28.preventDefault() };
}
function D(e28) {
  const { x: t28, y: n32, buttons: a29, native: r31, eventId: i29 } = e28.data.currentEvent, { button: o31 } = e28.data.startEvent, s33 = e28.data.startEvent.native.pointerId, p29 = e28.data.startEvent.native.pointerType, c29 = e28.data.action, l23 = { x: e28.data.startEvent.x, y: e28.data.startEvent.y }, { cancelable: u18, timestamp: d21 } = e28;
  return { type: "pointer-drag", x: t28, y: n32, pointerId: s33, pointerType: p29, button: o31, buttons: a29, action: c29, origin: l23, native: r31, timestamp: d21, eventId: i29, cancelable: u18, stopPropagation: () => e28.stopPropagation(), defer: (t29) => e28.defer(t29), preventDefault: () => e28.preventDefault() };
}
function P4(e28) {
  const { cancelable: t28, data: n32, timestamp: a29 } = e28, { x: r31, y: i29, deltaY: o31, native: s33 } = n32;
  return { type: "mouse-wheel", x: r31, y: i29, deltaY: o31, native: s33, timestamp: a29, cancelable: t28, stopPropagation: () => e28.stopPropagation(), defer: (t29) => e28.defer(t29), preventDefault: () => e28.preventDefault() };
}
function _6(e28) {
  const { action: t28, state: n32, device: a29 } = e28.data, { cancelable: r31, timestamp: i29 } = e28, { buttons: o31, axes: s33 } = n32;
  return { type: "gamepad", device: a29, timestamp: i29, action: t28, buttons: o31, axes: s33, cancelable: r31, stopPropagation: () => e28.stopPropagation(), defer: (t29) => e28.defer(t29), preventDefault: () => e28.preventDefault() };
}

// node_modules/@arcgis/core/views/interactive/interactiveToolUtils.js
function i12(t28) {
  return [t28.on("before-add", (o31) => {
    const i29 = o31.item;
    if (null == i29 || t28.includes(i29)) return i.getLogger("esri.views.interactive.interactiveToolUtils").warn("Tool is either already in the list of tools or tool is `null`. Not adding tool."), void o31.preventDefault();
    i29.onAdd();
  }), t28.on("after-remove", (e28) => {
    const t29 = e28.item;
    t29.active && (t29.view.activeTool = null), t29.destroy();
  })];
}
function n14(e28) {
  return e28.visible && null != e28.getEditableFlag && e28.getEditableFlag(o11.USER) && e28.getEditableFlag(o11.MANAGER);
}
function r15(e28) {
  return "key-down" === e28.type && e28.key === p4.cancel;
}

// node_modules/@arcgis/core/views/interactive/ToolViewManagerManipulatorState.js
var i13 = class {
  constructor() {
    this._pointerLocations = /* @__PURE__ */ new Map(), this._hoveredManipulators = /* @__PURE__ */ new Map(), this._grabbedManipulators = /* @__PURE__ */ new Map(), this._draggedManipulators = /* @__PURE__ */ new Map(), this._stopDrag = false, this._externallyDragging = false, this._revertToNullActiveTool = false, this._cursor = null;
  }
  get cursor() {
    return this._cursor;
  }
  hasFocusedManipulators() {
    return this._grabbedManipulators.size > 0 || this._draggedManipulators.size > 0;
  }
  handleInputEvent(e28, o31) {
    const a29 = () => e28.stopPropagation();
    switch (e28.type) {
      case "pointer-move":
        l13(e28.pointerType) && this._pointerLocations.set(e28.pointerId, { x: e28.x, y: e28.y, pointerType: e28.pointerType });
        break;
      case "drag":
        this._grabbedManipulators.size > 0 ? this._stopDrag = true : "start" === e28.action ? this._externallyDragging = true : "end" === e28.action && (this._externallyDragging = false), this._stopDrag && (a29(), "end" === e28.action && (this._stopDrag = false));
        break;
      case "pointer-down": {
        if (!p11(e28)) break;
        const t28 = n11(e28), i29 = s16(t28, e28.pointerType, o31.forEachTool);
        if (null == i29) break;
        const n32 = i29.manipulator, l23 = i29.tool;
        null == n32 || null == l23 || !n32.interactive || n32.grabbable && n32.grabbableForEvent(e28) || !n32.grabbing || n32.dragging || this._releaseManipulatorBeforeDragging(n32, e28, o31), null != n32 && null != l23 && n32.interactive && n32.grabbable && n32.grabbableForEvent(e28) && !n32.grabbing && (this._grabbedManipulators.set(e28.pointerId, { manipulator: n32, tool: l23, start: t28, pointerType: e28.pointerType }), 1 === this._grabbedManipulators.size && null == o31.activeTool && (this._revertToNullActiveTool = true, o31.setActiveTool(i29.tool)), n32.grabbing = true, n32.events.emit("grab-changed", { action: "start", pointerType: e28.pointerType, screenPoint: t28 }), a29());
        break;
      }
      case "pointer-up":
        this._draggedManipulators.has(e28.pointerId) || this._handlePointerEnd(e28, o31);
        break;
      case "pointer-drag": {
        if (!p11(e28)) break;
        const i29 = this._grabbedManipulators.get(e28.pointerId), n32 = i29?.manipulator, s33 = i29?.tool;
        if (null == n32 || null == s33) break;
        const l23 = n11(e28);
        l23.x = r5(l23.x, 0, o31.view.width), l23.y = r5(l23.y, 0, o31.view.height);
        const u18 = i29.start, c29 = this._draggedManipulators.get(e28.pointerId);
        switch (e28.action) {
          case "start":
          case "update":
            "update" !== e28.action && 1 !== this._grabbedManipulators.size || (n32.dragging = true, c29 ? n32.events.emit("drag", { action: "update", start: u18, screenPoint: l23 }) : n32.events.emit("drag", { action: "start", start: u18, screenPoint: l23, pointerType: e28.pointerType }), this._draggedManipulators.set(e28.pointerId, { tool: s33, manipulator: n32, start: u18 }));
            break;
          case "end":
            n32.dragging = false, c29 && n32.events.emit("drag", { action: "end", start: u18, screenPoint: l23 }), this._draggedManipulators.delete(e28.pointerId), this._handlePointerEnd(e28, o31);
        }
        a29();
        break;
      }
      case "immediate-click": {
        const t28 = n11(e28), i29 = s16(t28, e28.pointerType, o31.forEachTool);
        if (u10(e28) || o31.forEachTool((e29) => {
          if ((null == i29 || i29.tool !== e29 || e29.automaticManipulatorSelection) && e29.manipulators) {
            let t29 = false;
            e29.manipulators.forEach(({ manipulator: e30 }) => {
              e30.selected && (e30.selected = false, t29 = true);
            }), t29 && e29.onManipulatorSelectionChanged && e29.onManipulatorSelectionChanged();
          }
        }), null == i29) break;
        const { manipulator: n32, tool: l23 } = i29;
        if (!n32.interactive) break;
        n32.selectable && l23.automaticManipulatorSelection && (n32.selected = !n32.selected, l23.onManipulatorSelectionChanged && l23.onManipulatorSelectionChanged());
        const p29 = e28.native.shiftKey;
        n32.events.emit("immediate-click", { screenPoint: t28, button: e28.button, pointerType: e28.pointerType, shiftKey: p29, stopPropagation: a29 }), c13(n32, a29);
        break;
      }
      case "click": {
        const t28 = n11(e28), i29 = s16(t28, e28.pointerType, o31.forEachTool), n32 = i29?.manipulator;
        if (null == n32 || !n32.interactive) break;
        const l23 = e28.native.shiftKey;
        n32.events.emit(e28.type, { screenPoint: t28, button: e28.button, pointerType: e28.pointerType, shiftKey: l23 }), a29();
        break;
      }
      case "double-click": {
        const t28 = n11(e28), i29 = s16(t28, e28.pointerType, o31.forEachTool), n32 = null != i29 ? i29.manipulator : null;
        if (null == n32 || !n32.interactive) break;
        const l23 = e28.native.shiftKey;
        n32.events.emit("double-click", { screenPoint: t28, button: e28.button, pointerType: e28.pointerType, shiftKey: l23, stopPropagation: a29 }), c13(n32, a29);
        break;
      }
      case "immediate-double-click": {
        const t28 = n11(e28), i29 = s16(t28, e28.pointerType, o31.forEachTool), n32 = null != i29 ? i29.manipulator : null;
        if (null == n32 || !n32.interactive) break;
        const l23 = e28.native.shiftKey;
        n32.events.emit("immediate-double-click", { screenPoint: t28, button: e28.button, pointerType: e28.pointerType, shiftKey: l23, stopPropagation: a29 }), "mouse" === e28.pointerType && c13(n32, a29);
        break;
      }
    }
    this._onFocusChange(o31.forEachTool);
  }
  _releaseManipulatorBeforeDragging(e28, t28, o31) {
    e28.grabbing = false, e28.events.emit("grab-changed", { action: "end", pointerType: t28.pointerType, screenPoint: n11(t28) }), this._grabbedManipulators.forEach(({ manipulator: t29 }, o32) => {
      t29 === e28 && this._grabbedManipulators.delete(o32);
    }), this._afterManipulatorRelease(o31.setActiveTool);
  }
  _handlePointerEnd(e28, t28) {
    const o31 = this._grabbedManipulators.get(e28.pointerId)?.manipulator;
    null != o31 && o31.grabbing && (o31.grabbing = false, o31.events.emit("grab-changed", { action: "end", pointerType: e28.pointerType, screenPoint: n11(e28) }), this._grabbedManipulators.delete(e28.pointerId), this._afterManipulatorRelease(t28.setActiveTool));
  }
  _onFocusChange(e28) {
    this._updateCursor(), this._updateFocusedManipulatorTools(e28);
  }
  _updateCursor() {
    this._grabbedManipulators.size > 0 ? this._cursor = n15(this._grabbedManipulators) || "grabbing" : this._hoveredManipulators.size > 0 ? this._cursor = n15(this._hoveredManipulators) || "pointer" : this._cursor = null;
  }
  _updateFocusedManipulatorTools(t28) {
    const o31 = /* @__PURE__ */ new Set(), a29 = /* @__PURE__ */ new Set();
    this._grabbedManipulators.forEach(({ tool: e28 }) => {
      o31.add(e28);
    }), this._hoveredManipulators.forEach(({ tool: e28 }) => {
      a29.add(e28);
    }), t28((t29) => {
      t29.hasGrabbedManipulators = o31.has(t29), t29.hasHoveredManipulators = a29.has(t29);
      const r31 = this._grabbedManipulators.values(), i29 = o3(r31, ({ tool: e28 }) => e28 === t29);
      t29.firstGrabbedManipulator = null != i29 ? i29.manipulator : null;
    });
  }
  clearPointers(e28, { forEachTool: t28, setActiveTool: o31 }, a29 = true, r31) {
    const i29 = (t29, o32) => t29 === e28 && (null == r31 || r31 === o32);
    this._grabbedManipulators.forEach(({ tool: e29, manipulator: t29, pointerType: o32 }, a30) => {
      i29(e29, t29) && (this._grabbedManipulators.delete(a30), t29.grabbing = false, t29.events.emit("grab-changed", { action: "end", screenPoint: null, pointerType: o32 }));
    }), this._draggedManipulators.forEach(({ tool: e29, manipulator: t29 }, o32) => {
      i29(e29, t29) && (this._draggedManipulators.delete(o32), t29.dragging = false, t29.events.emit("drag", { action: "cancel" }));
    }), a29 && this._hoveredManipulators.forEach(({ tool: e29, manipulator: t29 }, o32) => {
      i29(e29, t29) && (this._hoveredManipulators.delete(o32), t29.hovering = false);
    }), this._afterManipulatorRelease(o31), this._onFocusChange(t28);
  }
  updateHoveredStateFromKnownPointers(e28) {
    this._pointerLocations.forEach((t28, a29) => {
      this._updateHoveredStateForPointerAtScreenPosition(c5(t28.x, t28.y), a29, t28.pointerType, e28);
    });
  }
  handleHoverEvent(e28, t28) {
    const o31 = e28.type;
    "pointer-up" !== o31 && "immediate-click" !== o31 && "pointer-move" !== o31 || !l13(e28.pointerType) || ("pointer-up" !== o31 && this._externallyDragging ? this._clearHoveredManipulatorStates(e28.pointerId) : this._updateHoveredStateForPointerAtScreenPosition(n11(e28), e28.pointerId, e28.pointerType, t28));
  }
  _updateHoveredStateForPointerAtScreenPosition(e28, t28, o31, a29) {
    let r31 = s16(e28, o31, a29);
    const i29 = this._hoveredManipulators.get(t28)?.manipulator;
    null == r31 || r31.manipulator.interactive || (r31 = null), null != r31 && i29 === r31.manipulator || (null != i29 && (i29.hovering = false), null != r31 ? (r31.manipulator.hovering = true, this._hoveredManipulators.set(t28, r31)) : this._hoveredManipulators.delete(t28), this._onFocusChange(a29));
  }
  _afterManipulatorRelease(e28) {
    0 === this._grabbedManipulators.size && this._revertToNullActiveTool && (e28(null), this._revertToNullActiveTool = false);
  }
  _clearHoveredManipulatorStates(e28) {
    this._hoveredManipulators.forEach(({ manipulator: t28 }, o31) => {
      e28 === o31 && (this._hoveredManipulators.delete(e28), t28.hovering = false);
    });
  }
};
function n15(e28) {
  for (const { manipulator: t28 } of e28.values()) if (null != t28 && t28.interactive) {
    if (t28.grabbing && t28.grabCursor) return t28.grabCursor;
    if (t28.cursor) return t28.cursor;
  }
  return null;
}
function s16(e28, t28, o31) {
  let r31 = null;
  return o31((o32) => {
    if (null == o32.manipulators || !n14(o32)) return false;
    const i29 = o32.manipulators.intersect(e28, t28);
    return null != i29 && (r31 = { tool: o32, manipulator: i29 }, true);
  }), r31;
}
function l13(e28) {
  return "mouse" === e28;
}
function p11(e28) {
  return "mouse" !== e28.pointerType || 0 === e28.button;
}
function u10(e28) {
  return !!e28.native.shiftKey;
}
function c13(e28, t28) {
  e28?.consumesClicks && t28();
}

// node_modules/@arcgis/core/views/ToolViewManager.js
var g8 = "attached";
var T = "tools";
var f8 = 1e3;
var E3 = class extends b2 {
  constructor(t28) {
    super(t28), this._updatingHandles = new h5(), this._clock = o4, this._manipulatorState = new i13(), this.tools = new V(), this.cursor = null, this._interacting = false, this._interactingTimeout = f8, this._interactingTimeoutHandle = null, this._forEachTool = (t29) => {
      for (const o31 of this.tools.items) if (t29(o31)) return;
    };
  }
  initialize() {
    this.addHandles([this.view.on(i11, (t28) => {
      this._handleInputEvent(t28);
    }, _3.TOOL), ...i12(this.tools), this.tools.on("before-add", ({ item: t28 }) => {
      this._updateToolEditableFlag(t28);
    }), this.tools.on("before-remove", ({ item: t28 }) => {
      this._manipulatorState.clearPointers(t28, this._manipulatorStateEventArgs), this._updateCursor();
    }), this.tools.on("change", () => {
      this._refreshToolWatchers();
    })]);
  }
  destroy() {
    this.activeTool = null, this.tools.drain((t28) => t28.destroy()), this._clearInteractingTimeout(), this._interacting = false, this._updatingHandles.destroy();
  }
  get _manipulatorStateEventArgs() {
    return { forEachTool: this._forEachTool, activeTool: this.activeTool, setActiveTool: (t28) => {
      this.activeTool = t28;
    }, view: this.view };
  }
  set activeTool(t28) {
    if (null != t28 && !this.view.ready) return void i.getLogger(this).error("Cannot set active tool while view is not ready.");
    if (t28 === this.activeTool) return;
    const o31 = this.activeTool;
    this._set("activeTool", t28), null != o31 && o31.deactivate(), null != t28 && t28.activate(), this._removeIncompleteTools(t28);
    for (const e28 of this.tools) {
      this._updateToolEditableFlag(e28);
      const t29 = n14(e28);
      null != this.activeTool && t29 || this._manipulatorState.clearPointers(e28, this._manipulatorStateEventArgs, !t29);
    }
    this._updateCursor();
  }
  get updating() {
    return this._updatingHandles.updating || this.tools.some((t28) => t28.updating);
  }
  get interacting() {
    return this._interacting;
  }
  _clearInteractingTimeout() {
    this._interactingTimeoutHandle = l(this._interactingTimeoutHandle);
  }
  _startInteractingTimeout() {
    this._clearInteractingTimeout(), this._interactingTimeoutHandle = this._clock.setTimeout(() => this._interacting = false, this._interactingTimeout);
  }
  attach() {
    "3d" === this.view.type ? this.addHandles([l3(() => {
      const { state: t28 } = this.view;
      return "camera" in t28 && t28.camera;
    }, () => this._forEachManipulator((t28) => t28.onViewChange())), this.view.elevationProvider?.on("elevation-change", (t28) => this._forEachManipulator((o31) => o31.onElevationChange(t28)))], g8) : this.addHandles(l3(() => this.view.extent, () => this._forEachManipulator((t28) => t28.onViewChange())));
  }
  detach() {
    this.activeTool = null, this.tools.removeAll(), this.removeHandles(g8), this._clearInteractingTimeout(), this._interacting = false;
  }
  _forEachManipulator(t28) {
    this._forEachTool((o31) => {
      o31.manipulators && o31.manipulators.forEach(({ manipulator: e28 }) => t28(e28, o31));
    });
  }
  _handleInputEvent(t28) {
    let o31 = false;
    const e28 = { ...t28, stopPropagation: () => {
      o31 = true, t28.stopPropagation();
    } };
    null != this.activeTool ? this.activeTool.handleInputEvent && this.activeTool.handleInputEvent(e28) : this._forEachTool((t29) => {
      !o31 && t29.visible && t29.handleInputEvent(e28);
    }), !o31 && r15(t28) && this.activeTool && (t28.stopPropagation(), t28.preventDefault(), this.activeTool.cancel(), this.activeTool = null), this._manipulatorState.handleInputEvent(e28, this._manipulatorStateEventArgs), o31 || null == this.activeTool || this.activeTool.handleInputEventAfter(e28), this._manipulatorState.handleHoverEvent(e28, this._forEachTool), this._updateCursor(), "pointer-move" === t28.type && (this._manipulatorState.hasFocusedManipulators() || this.activeTool) && (this._interacting = true, this._startInteractingTimeout());
  }
  _refreshToolWatchers() {
    this.removeHandles(T), this._forEachTool((t28) => {
      if (t28 instanceof b2) {
        const o31 = l3(() => [t28.cursor, t28.visible, t28.editable], () => {
          n14(t28) || this._manipulatorState.clearPointers(t28, this._manipulatorStateEventArgs), this._updateCursor();
        });
        this.addHandles(o31, T);
      }
      t28.manipulators && this.addHandles([t28.manipulators.on("after-remove", (o31) => {
        this._manipulatorState.clearPointers(t28, this._manipulatorStateEventArgs, true, o31.item.manipulator);
      }), t28.manipulators.on("change", () => {
        this._manipulatorState.updateHoveredStateFromKnownPointers(this._forEachTool), this._updateCursor();
      })], T);
    }), this._manipulatorState.updateHoveredStateFromKnownPointers(this._forEachTool), this._updateCursor();
  }
  _updateToolEditableFlag(t28) {
    t28.setEditableFlag?.(o11.MANAGER, null == this.activeTool || t28 === this.activeTool);
  }
  _updateCursor() {
    let t28 = this._manipulatorState.cursor;
    null == t28 && this._forEachTool((o31) => !(null == o31.cursor || !o31.visible) && (t28 = o31.cursor, true)), this._get("cursor") !== t28 && this._set("cursor", t28);
  }
  _removeIncompleteTools(t28) {
    this.tools.filter((o31) => (null == t28 || o31 !== t28) && !o31.created && o31.removeIncompleteOnCancel).forEach((t29) => {
      this.tools.remove(t29);
    });
  }
  get test() {
  }
};
r([m2({ constructOnly: true, nonNullable: true })], E3.prototype, "view", void 0), r([m2({ value: null })], E3.prototype, "activeTool", null), r([m2({ readOnly: true, type: V })], E3.prototype, "tools", void 0), r([m2({ readOnly: true })], E3.prototype, "cursor", void 0), r([m2({ readOnly: true })], E3.prototype, "updating", null), r([m2()], E3.prototype, "_interacting", void 0), r([m2({ readOnly: true })], E3.prototype, "interacting", null), E3 = r([a("esri.views.ToolViewManager")], E3);

// node_modules/@arcgis/core/views/3d/support/DefaultHighlights.js
function n16() {
  return new (V.ofType(u8))([new u8({ name: c8 }), new u8({ name: m9, color: p5 })]);
}

// node_modules/@arcgis/core/views/input/gamepad/GamepadInputDevice.js
var n17 = class extends b2 {
  constructor(e28) {
    super(), this.nativeIndex = null, this._detectedDeviceType = "unknown", "standard" === e28.mapping ? this._detectedDeviceType = "standard" : i14.test(e28.id) ? this._detectedDeviceType = "spacemouse" : this._detectedDeviceType = "unknown", this.nativeIndex = e28.index;
  }
  get native() {
    const e28 = navigator.getGamepads ? navigator.getGamepads() : [];
    return null != this.nativeIndex && this.nativeIndex < e28.length ? e28[this.nativeIndex] : null;
  }
  get deviceType() {
    return this._detectedDeviceType;
  }
  get axisThreshold() {
    return a7[this.deviceType];
  }
};
r([m2({ nonNullable: true, readOnly: true })], n17.prototype, "nativeIndex", void 0), r([m2({ type: String, readOnly: true })], n17.prototype, "deviceType", null), r([m2({ type: Number, readOnly: true })], n17.prototype, "axisThreshold", null), n17 = r([a("esri.views.input.gamepad.GamepadInputDevice")], n17);
var o15 = n17;
var i14 = new RegExp("^(3dconnexion|space(mouse|navigator|pilot|explorer))", "i");
var a7 = { standard: 0.15, spacemouse: 0.025, unknown: 0 };

// node_modules/@arcgis/core/views/input/gamepad/GamepadSettings.js
var p12 = class extends b2 {
  constructor(...o31) {
    super(...o31), this.devices = new V(), this.enabledFocusMode = "document";
  }
};
r([m2({ type: V.ofType(o15), readOnly: true })], p12.prototype, "devices", void 0), r([m2({ type: ["document", "view", "none"] })], p12.prototype, "enabledFocusMode", void 0), p12 = r([a("esri.views.input.gamepad.GamepadSettings")], p12);
var i15 = p12;

// node_modules/@arcgis/core/views/input/Input.js
var p13 = class extends b2 {
  constructor() {
    super(...arguments), this.gamepad = new i15();
  }
};
r([m2({ readOnly: true })], p13.prototype, "gamepad", void 0), p13 = r([a("esri.views.input.Input")], p13);
var a8 = p13;

// node_modules/@arcgis/core/views/navigation/NavigationActionMap.js
var s17 = () => m2({ type: ["pan", "rotate", "zoom", "none"], nonNullable: true });
var a9 = class extends b2 {
  constructor(o31) {
    super(o31), this.dragPrimary = "pan", this.dragSecondary = "rotate", this.dragTertiary = "zoom", this.mouseWheel = "zoom";
  }
};
r([s17()], a9.prototype, "dragPrimary", void 0), r([s17()], a9.prototype, "dragSecondary", void 0), r([s17()], a9.prototype, "dragTertiary", void 0), r([m2({ type: ["zoom", "none"], nonNullable: true })], a9.prototype, "mouseWheel", void 0), a9 = r([a("esri.views.navigation.NavigationActionMap")], a9);
var p14 = a9;

// node_modules/@arcgis/core/views/navigation/gamepad/GamepadSettings.js
var s18 = class extends b2 {
  constructor(o31) {
    super(o31), this.enabled = true, this.device = null, this.mode = "pan", this.tiltDirection = "forward-down", this.velocityFactor = 1;
  }
};
r([m2({ type: Boolean, nonNullable: true })], s18.prototype, "enabled", void 0), r([m2({ type: o15 })], s18.prototype, "device", void 0), r([m2({ type: ["pan", "zoom"], nonNullable: true })], s18.prototype, "mode", void 0), r([m2({ type: ["forward-down", "forward-up"], nonNullable: true })], s18.prototype, "tiltDirection", void 0), r([m2({ type: Number, nonNullable: true })], s18.prototype, "velocityFactor", void 0), s18 = r([a("esri.views.navigation.gamepad.GamepadSettings")], s18);
var i16 = s18;

// node_modules/@arcgis/core/views/navigation/Navigation.js
var i17 = class extends b2 {
  constructor(o31) {
    super(o31), this.actionMap = new p14(), this.browserTouchPanEnabled = true, this.gamepad = new i16(), this.momentumEnabled = true;
  }
  get effectiveMomentumEnabled() {
    return this.momentumEnabled && !o10();
  }
  get mouseWheelZoomEnabled() {
    return "zoom" === this.actionMap.mouseWheel;
  }
  set mouseWheelZoomEnabled(o31) {
    c(i.getLogger(this), "mouseWheelZoomEnabled", { replacement: "actionMap.mouseWheel", version: "4.32", warnOnce: true }), this.actionMap.mouseWheel = o31 ? "zoom" : "none";
  }
};
r([m2({ type: p14, nonNullable: true })], i17.prototype, "actionMap", void 0), r([m2({ type: Boolean })], i17.prototype, "browserTouchPanEnabled", void 0), r([m2({ type: i16, nonNullable: true })], i17.prototype, "gamepad", void 0), r([m2({ type: Boolean })], i17.prototype, "momentumEnabled", void 0), r([m2({ type: Boolean })], i17.prototype, "mouseWheelZoomEnabled", null), i17 = r([a("esri.views.navigation.Navigation")], i17);
var l14 = i17;

// node_modules/@arcgis/core/views/support/DefaultsFromMap.js
var d9 = class extends b2 {
  constructor(e28) {
    super(e28), this.required = { extent: false, heightModelInfo: false, tileInfo: false }, this.defaultSpatialReference = null, this.userSpatialReference = null, this.sourcePreloadCount = 10, this.priorityCollection = null, this.requiresExtentInSpatialReference = true, this.suspended = false, this._projectExtentTask = { task: null, input: null, output: null, spatialReference: null };
  }
  destroy() {
    this._projectExtentTask.task && (this._projectExtentTask.task = e2(this._projectExtentTask.task)), this._set("map", null);
  }
  get ready() {
    return !this._spatialReferenceTask.updating && !this._tileInfoTask.updating && !this._extentTask.updating;
  }
  get heightModelInfoReady() {
    return !this._heightModelInfoTask.updating;
  }
  get spatialReference() {
    return this.userSpatialReference ?? this._spatialReferenceTask.spatialReference;
  }
  get extent() {
    return this._extentTask.extent;
  }
  get heightModelInfo() {
    return this._heightModelInfoTask.heightModelInfo;
  }
  get vcsWkid() {
    return this._heightModelInfoTask.vcsWkid;
  }
  get latestVcsWkid() {
    return this._heightModelInfoTask.latestVcsWkid;
  }
  get viewingMode() {
    return null == this.userSpatialReference || this.userSpatialReference.equals(this._spatialReferenceTask.spatialReference) ? this._spatialReferenceTask.viewingMode : null;
  }
  get tileInfo() {
    return this._tileInfoTask.tileInfo;
  }
  get mapCollections() {
    const e28 = this.map?.(), t28 = [];
    return null != this.priorityCollection && t28.push(this.priorityCollection), t28.push({ parent: e28?.basemap, layers: e28?.basemap?.baseLayers }, { layers: e28?.layers }, { parent: e28?.ground, layers: e28?.ground?.layers }, { parent: e28?.basemap, layers: e28?.basemap?.referenceLayers }), t28;
  }
  get _spatialReferenceTask() {
    if (this.suspended) return this._get("_spatialReferenceTask") ?? { updating: false };
    let e28;
    if (this._collectLayers(this.mapCollections, (t29) => {
      const n32 = this._getSupportedSpatialReferences(t29);
      if (n32.length > 0) {
        const t30 = this._narrowDownSpatialReferenceCandidates(e28, n32);
        null != t30 && (e28 = t30);
      }
      return 1 === e28?.length;
    }) && 1 !== e28?.length) return { updating: true };
    const t28 = this._pickSpatialReferenceCandidate(e28);
    return { spatialReference: t28?.spatialReference ?? null, viewingMode: t28?.viewingMode ?? null, updating: false };
  }
  get _tileInfoTask() {
    if (!this.required.tileInfo) return this._get("_tileInfoTask") ?? { updating: false };
    const e28 = this.map?.(), t28 = this.spatialReference;
    if (!t28) return { updating: this._spatialReferenceTask.updating };
    let n32;
    const a29 = this._collectLayers([{ parent: e28?.basemap, layers: e28?.basemap?.baseLayers }, { layers: e28?.layers }], (e29) => !(!("tileInfo" in e29) || !e29.tileInfo?.spatialReference.equals(t28)) && (n32 = e29, true), (e29) => "tileInfo" in e29);
    if (n32) {
      return { tileInfo: n32.tileInfo, updating: false };
    }
    return { updating: a29 };
  }
  get _heightModelInfoTask() {
    if (!this.required.heightModelInfo || this.suspended && this._get("_heightModelInfoTask")?.heightModelInfo) return this._get("_heightModelInfoTask") ?? { updating: false };
    let e28 = {};
    const t28 = this._collectLayers(this.mapCollections, (t29) => {
      const n32 = l9(t29);
      return !!n32 && (e28 = { heightModelInfo: n32, vcsWkid: t29.spatialReference?.vcsWkid, latestVcsWkid: t29.spatialReference?.latestVcsWkid }, true);
    }, (e29) => g4(e29));
    return { ...e28, updating: t28 };
  }
  get _extentCandidatesTask() {
    if (this.suspended || !this.required.extent) return this._get("_extentCandidatesTask") ?? { updating: false };
    if (!this.spatialReference) return { updating: this._spatialReferenceTask.updating };
    const e28 = [], t28 = this._collectLayers(this.mapCollections, (t29) => {
      const n32 = "fullExtents" in t29 && t29.fullExtents || (null != t29.fullExtent ? [t29.fullExtent] : []), a29 = this.requiresExtentInSpatialReference ? null : n32[0], s33 = n32.find((e29) => e29.spatialReference.equals(this.spatialReference)) ?? a29;
      if (s33) return e28.push({ extent: s33, layer: t29 }), true;
      if (this._getSupportedSpatialReferences(t29).length > 0) for (const i29 of n32) e28.push({ extent: i29, layer: t29 });
      return false;
    });
    return { candidates: e28, updating: t28 };
  }
  get _extentTask() {
    const { candidates: e28, updating: t28 } = this._extentCandidatesTask;
    if (t28) return { updating: t28 };
    if (null == e28 || 0 === e28.length) return { updating: false };
    if (!this.spatialReference) return { updating: this._spatialReferenceTask.updating };
    const i29 = this._pickExtentCandidate(e28), r31 = this.spatialReference;
    return i29.extent.equals(this._projectExtentTask.input) && r31.equals(this._projectExtentTask.spatialReference) ? { extent: this._projectExtentTask.output, updating: null != this._projectExtentTask.task && !this._projectExtentTask.task.finished } : (null != this._projectExtentTask.task && (this._projectExtentTask.task = e2(this._projectExtentTask.task)), this._projectExtentTask = { input: i29.extent.clone(), output: null, spatialReference: r31.clone(), task: d5(async (e29) => {
      try {
        const t29 = await s13(i29.extent, r31, "portalItem" in i29.layer ? i29.layer.portalItem : void 0, e29);
        this._projectExtentTask = { ...this._projectExtentTask, task: null, output: t29 };
      } catch (t29) {
        if (c2(e29)) return;
        this._projectExtentTask = { ...this._projectExtentTask, task: null };
      }
    }) }, { updating: true });
  }
  _narrowDownSpatialReferenceCandidates(e28, t28) {
    if (null == e28) return t28;
    const n32 = new Array();
    for (const a29 of e28) for (const e29 of t28) {
      if (!a29.spatialReference.equals(e29.spatialReference)) continue;
      const t29 = h9(a29.viewingMode, e29.viewingMode);
      if (false !== t29) {
        n32.push({ spatialReference: a29.spatialReference, viewingMode: t29 });
        break;
      }
    }
    return n32.length > 0 ? n32 : null;
  }
  _pickSpatialReferenceCandidate(e28) {
    const t28 = this.defaultSpatialReference;
    return null == e28 || e28.length < 1 ? t28 ? { spatialReference: t28, viewingMode: null } : null : (null != t28 && e28.length > 1 && e28.some(({ spatialReference: e29 }) => e29.equals(t28)) && (e28 = e28.filter(({ spatialReference: e29 }) => e29.equals(t28))), e28.length > 1 && e28.some(({ viewingMode: e29 }) => e29 !== l7.Local) && (e28 = e28.filter(({ viewingMode: e29 }) => e29 !== l7.Local)), e28[0]);
  }
  _getSupportedSpatialReferences(e28) {
    const t28 = "supportedSpatialReferences" in e28 && e28.supportedSpatialReferences || (e28.spatialReference ? [e28.spatialReference] : []);
    if (0 === t28.length) return [];
    const n32 = [];
    for (const a29 of t28) {
      const t29 = this.getSpatialReferenceSupport(a29, e28);
      if (null != t29) {
        const e29 = t29.constraints ?? [{ spatialReference: a29, viewingMode: null }];
        for (const { spatialReference: t30, viewingMode: a30 } of e29) this.requiresExtentInSpatialReference && null != this.userSpatialReference && !t30.equals(this.userSpatialReference) || n32.push({ spatialReference: t30, viewingMode: a30 });
      }
    }
    return n32;
  }
  _pickExtentCandidate(e28) {
    const t28 = this.spatialReference;
    return e28.find(({ extent: e29 }) => t28.equals(e29.spatialReference)) || e28[0];
  }
  _collectLayers(e28, t28, n32 = () => true) {
    switch (this._loadMaybe(this.map?.())) {
      case "loading":
        return true;
      case "failed":
        return false;
    }
    const a29 = new f9(n32, t28);
    for (const s33 of e28) if (this._collectCollection(s33, a29), a29.done || a29.preloading === this.sourcePreloadCount) break;
    return a29.updating;
  }
  _collectCollection(e28, t28) {
    if (e28.layers) {
      switch (this._loadMaybe(e28.parent)) {
        case "loading":
          return t28.updating = true, void ++t28.preloading;
        case "failed":
          return;
      }
      for (const n32 of e28.layers) if (t28.layerFilter(n32)) {
        switch (this._loadMaybe(n32)) {
          case "failed":
            continue;
          case "loading":
            t28.updating = true, ++t28.preloading;
            break;
          case "loaded":
            if (t28.updating || (t28.done = t28.pushLayer(n32)), t28.done || t28.preloading === this.sourcePreloadCount) break;
            "layers" in n32 && this._collectCollection({ layers: n32.layers }, t28);
        }
        if (t28.done || t28.preloading === this.sourcePreloadCount) break;
      }
    }
  }
  _loadMaybe(e28) {
    return e28 && "loadStatus" in e28 && null != e28.loadStatus ? "not-loaded" === e28.loadStatus ? (e28.load().catch((e29) => {
      b(e29);
    }), "loading") : e28.loadStatus : "loaded";
  }
};
r([m2()], d9.prototype, "required", void 0), r([m2({ constructOnly: true })], d9.prototype, "map", void 0), r([m2({ constructOnly: true })], d9.prototype, "getSpatialReferenceSupport", void 0), r([m2()], d9.prototype, "defaultSpatialReference", void 0), r([m2()], d9.prototype, "userSpatialReference", void 0), r([m2()], d9.prototype, "sourcePreloadCount", void 0), r([m2()], d9.prototype, "priorityCollection", void 0), r([m2()], d9.prototype, "requiresExtentInSpatialReference", void 0), r([m2()], d9.prototype, "suspended", void 0), r([m2({ readOnly: true })], d9.prototype, "ready", null), r([m2({ readOnly: true })], d9.prototype, "heightModelInfoReady", null), r([m2({ readOnly: true })], d9.prototype, "spatialReference", null), r([m2({ readOnly: true })], d9.prototype, "extent", null), r([m2({ readOnly: true })], d9.prototype, "heightModelInfo", null), r([m2({ readOnly: true })], d9.prototype, "vcsWkid", null), r([m2({ readOnly: true })], d9.prototype, "latestVcsWkid", null), r([m2({ readOnly: true })], d9.prototype, "viewingMode", null), r([m2({ readOnly: true })], d9.prototype, "tileInfo", null), r([m2({ readOnly: true })], d9.prototype, "mapCollections", null), r([m2({ readOnly: true })], d9.prototype, "_spatialReferenceTask", null), r([m2({ readOnly: true })], d9.prototype, "_tileInfoTask", null), r([m2({ readOnly: true })], d9.prototype, "_heightModelInfoTask", null), r([m2({ readOnly: true })], d9.prototype, "_extentCandidatesTask", null), r([m2()], d9.prototype, "_extentTask", null), r([m2()], d9.prototype, "_projectExtentTask", void 0), d9 = r([a("esri.views.support.DefaultsFromMap")], d9);
var f9 = class {
  constructor(e28, t28) {
    this.layerFilter = e28, this.pushLayer = t28, this.preloading = -1, this.updating = false, this.done = false;
  }
};
function h9(e28, t28) {
  return null != e28 ? null != t28 ? e28 === t28 && e28 : e28 : t28;
}

// node_modules/@arcgis/core/views/support/LayerLayerViewInfo.js
function o16(e28) {
  return "tryRecycleWith" in e28;
}
var s19 = class {
  constructor(r31, l23, a29) {
    this.layer = r31, this.view = l23, this.layerViewImporter = a29, this._controller = new AbortController(), this._deferred = L2(), this._started = false, this.done = false, this.promise = this._deferred.promise, m3(this._controller.signal, () => {
      this._recycleController?.abort();
      const t28 = new s("cancelled:layerview-create", "layerview creation cancelled", { layer: r31 });
      this._deferred.reject(t28);
    });
  }
  tryRecycle(e28) {
    if (!this.done || !this.layerView || !o16(this.layerView)) return null;
    this._recycleController?.abort(), this._recycleController = new AbortController();
    const r31 = this.layer.type, t28 = this._recycleController.signal;
    for (let i29 = 0; i29 < e28.length; i29++) {
      const a29 = e28[i29];
      if (a29.type !== r31) continue;
      const o31 = this.layerView.tryRecycleWith(a29, { signal: t28 });
      if (o31) {
        e28.splice(i29, 1), this.layer = a29;
        const r32 = this.layerView, s33 = r32.view;
        return this.promise = o31.then(() => (s3(t28), a29.emit("layerview-destroy", { view: s33, layerView: r32 }), s33.emit("layerview-destroy", { view: s33, layerView: r32 }), a29.emit("layerview-create", { view: s33, layerView: r32 }), s33.emit("layerview-create", { view: s33, layerView: r32 }), r32)), this.promise;
      }
    }
    return null;
  }
  destroy() {
    this._controller.abort();
    const { layerView: e28 } = this;
    if (e28) {
      const { layer: r31, view: t28 } = this;
      r31.emit("layerview-destroy", { view: t28, layerView: e28 }), t28.emit("layerview-destroy", { layer: r31, layerView: e28 });
    }
    this.done = true, this.layer = null, this.layerView = null, this.view = null, this.layerViewImporter = null, this._map = null;
  }
  async start() {
    const { view: t28 } = this;
    if (this._started || !t28.map) return;
    this._started = true;
    const { _controller: { signal: a29 }, layer: o31 } = this;
    this._map = t28.map;
    try {
      let y10, w8;
      if (await o31.load({ signal: a29 }), o31.prefetchResources && await o31.prefetchResources({ signal: a29 }), n18(o31)) y10 = await o31.createLayerView(t28, { signal: a29 });
      else {
        if (!this.layerViewImporter.hasLayerViewModule(o31)) throw new s("layer:view-not-supported", "No layerview implementation was found");
        const r31 = await this.layerViewImporter.importLayerView(o31);
        s3(a29), y10 = "default" in r31 ? new r31.default({ layer: o31, view: t28 }) : new r31({ layer: o31, view: t28 });
      }
      const c29 = () => {
        w8 = l(w8), y10.destroyed || y10.destroy(), y10.layer = null, y10.parent = null, y10.view = null, this.done = true;
      };
      w8 = m3(a29, c29), s3(a29);
      try {
        await y10.when();
      } catch (s33) {
        throw c29(), s33;
      }
      const h20 = this._map?.allLayers?.includes(o31);
      if (!h20) return c29(), void this._deferred.reject(new s("view:no-layerview-for-layer", "The layer has been removed from the map", { layer: o31 }));
      this.layerView = y10, o31.emit("layerview-create", { view: t28, layerView: y10 }), t28.emit("layerview-create", { layer: o31, layerView: y10 }), this.done = true, this._deferred.resolve(y10);
    } catch (s33) {
      o31.emit("layerview-create-error", { view: t28, error: s33 }), t28.emit("layerview-create-error", { layer: o31, error: s33 }), this.done = true, this._deferred.reject(new s("layerview:create-error", "layerview creation failed", { layer: o31, error: s33 }));
    }
  }
};
function n18(e28) {
  return e28.createLayerView !== h3.prototype.createLayerView;
}

// node_modules/@arcgis/core/views/support/LayerViewManager.js
function g9(e28) {
  return null != e28 && "object" == typeof e28 && "layerViews" in e28;
}
var _7 = class extends b2 {
  constructor(e28) {
    super(e28), this._layerLayerViewInfoMap = /* @__PURE__ */ new Map(), this._recyclingInfoMap = /* @__PURE__ */ new Map(), this._watchUpdatingTracking = new h5(), this.supportsGround = true, this._preloadLayerViewModules = () => {
      const e29 = this.view.map?.allLayers;
      if (e29) for (const r31 of e29) false !== this.layerViewFilter?.(r31) && this.layerViewImporter.hasLayerViewModule(r31) && this.layerViewImporter.importLayerView(r31);
    }, this._reschedule = () => this.destroyed ? Promise.reject() : (null == this._workPromise && (this._workPromise = L2(), this._workPromise.promise.catch(() => {
    })), this.removeHandles("reschedule"), this.addHandles(A2(this._doWork), "reschedule"), this._workPromise.promise), this._doWork = () => {
      const e29 = this.view.map;
      if (this.destroyed || !e29) return void this.clear();
      if (this._map !== e29 && (this.clear(), this._map = e29), null == this._workPromise) return void this.notifyChange("updating");
      this.removeHandles("reschedule"), this.removeHandles("collection-change");
      const r31 = /* @__PURE__ */ new Set(), i29 = [], t28 = this.view.ready, s33 = (e30) => {
        if (null != e30) {
          for (const o32 of e30) if (o32) {
            if (false === this.layerViewFilter?.(o32)) continue;
            r31.add(o32);
            const e31 = this._layerLayerViewInfoMap.get(o32);
            e31 && t28 ? e31.start() : e31 || this._recyclingInfoMap.has(o32) || i29.push(o32), "layers" in o32 && o32.layers && s33(o32.layers);
          }
        }
      };
      for (const n32 of this._rootCollectionNames) s33(o(this, n32));
      const o31 = new Array(), a29 = (e30) => {
        const r32 = e30.tryRecycle(i29);
        r32 ? (this._recyclingInfoMap.set(e30.layer, e30), this.notifyChange("updating"), r32.then(() => {
          this._recyclingInfoMap.delete(e30.layer), this._layerLayerViewInfoMap.set(e30.layer, e30), this._reschedule(), this.notifyChange("updating");
        }).catch((r33) => {
          b(r33) || (this._recyclingInfoMap.delete(e30.layer), e30.destroy(), this._reschedule(), this.notifyChange("updating"));
        })) : o31.push(e30);
      };
      for (const n32 of this._layerLayerViewInfoMap.values()) r31.has(n32.layer) || (this._layerLayerViewInfoMap.delete(n32.layer), a29(n32));
      for (const n32 of this._recyclingInfoMap.values()) r31.has(n32.layer) || (this._recyclingInfoMap.delete(n32.layer), a29(n32));
      for (const n32 of i29) this._createLayerView(n32);
      this._refreshCollections(), o31.forEach((e30) => e30.destroy());
      const l23 = [e29?.ground?.layers, e29?.basemap?.baseLayers, e29?.basemap?.referenceLayers, e29?.layers].filter((e30) => !!e30);
      r31.forEach((e30) => "layers" in e30 && l23.push(e30.layers)), this.addHandles(l23.map((e30) => this._watchUpdatingTracking.addOnCollectionChange(() => e30, this._reschedule)), "collection-change"), this._workPromise.resolve(), this._workPromise = null;
    };
  }
  initialize() {
    this.addHandles([a3(() => this.view?.map?.allLayers, "change", this._preloadLayerViewModules, { onListenerAdd: this._preloadLayerViewModules }), l3(() => {
      const e28 = this.view, r31 = e28?.map;
      return [r31?.basemap, r31?.ground, r31?.layers, e28?.ready];
    }, () => this._reschedule(), w)]), this._preloadLayerViewModules(), this._reschedule();
  }
  destroy() {
    this.clear(), n7(this._recyclingInfoMap), n7(this._layerLayerViewInfoMap), this._watchUpdatingTracking.destroy(), this._map = null, null != this._workPromise && (this._workPromise.reject(u3()), this._workPromise = null);
  }
  get _layersToLayerViews() {
    const e28 = [["view.map.basemap.baseLayers", "view.basemapView.baseLayerViews"], ["view.map.layers", "view.layerViews"], ["view.map.basemap.referenceLayers", "view.basemapView.referenceLayerViews"]];
    return this.supportsGround && e28.push(["view.map.ground.layers", "view.groundView.layerViews"]), new Map(e28);
  }
  get _rootCollectionNames() {
    return Array.from(this._layersToLayerViews.keys());
  }
  get updating() {
    return null != this._workPromise || this._watchUpdatingTracking.updating || n(this._layerLayerViewInfoMap, (e28) => !e28.done) || this._recyclingInfoMap.size > 0;
  }
  get updatingRemaining() {
    let e28 = 0;
    for (const r31 of this._layerLayerViewInfoMap.values()) r31.done || ++e28;
    return e28;
  }
  clear() {
    this.destroyed || (this._clearCollections(), n7(this._layerLayerViewInfoMap));
  }
  async whenLayerView(e28) {
    if (await this._reschedule(), !this._layerLayerViewInfoMap.has(e28)) {
      if (this._recyclingInfoMap.has(e28)) return this._recyclingInfoMap.get(e28).promise;
      throw new s("view:no-layerview-for-layer", "No layerview has been found for the layer", { layer: e28 });
    }
    return this._layerLayerViewInfoMap.get(e28).promise;
  }
  isCreatingLayerViewsForLayer(e28, r31) {
    this.commitProperty("updatingRemaining");
    const i29 = this._layerLayerViewInfoMap.get(e28);
    if (!i29?.done) return true;
    const t28 = i29.layerView;
    return !(!t28 || !r31 || t28.parent === r31) || !!(i29.done && t28 && "layers" in e28 && e28.layers?.length) && e28.layers.some((e29) => this.isCreatingLayerViewsForLayer(e29, t28));
  }
  _refreshCollections() {
    for (const [e28, r31] of this._layersToLayerViews) this._populateLayerViewsOwners(o(this, e28), o(this, r31), this.view);
    this.notifyChange("updating"), this.notifyChange("updatingRemaining");
  }
  _clearCollections() {
    for (const e28 of this._layersToLayerViews.values()) o(this, e28)?.removeAll();
  }
  _populateLayerViewsOwners(e28, r31, i29) {
    if (!e28 || !r31) return void r31?.removeAll();
    let t28 = 0;
    for (const s33 of e28) {
      const e29 = this._layerLayerViewInfoMap.get(s33);
      if (!e29?.layerView) continue;
      const o31 = e29.layerView;
      o31.layer = s33, o31.parent = i29, r31.at(t28) !== o31 && r31.splice(t28, 0, o31), "layers" in s33 && g9(o31) && this._populateLayerViewsOwners(s33.layers, o31.layerViews, o31), t28 += 1;
    }
    t28 < r31.length && r31.splice(t28);
  }
  _createLayerView(e28) {
    e28.load().catch(() => {
    }), this.layerViewImporter.hasLayerViewModule(e28) && this.layerViewImporter.importLayerView(e28);
    const r31 = new s19(e28, this.view, this.layerViewImporter);
    r31.promise.then(() => this._refreshCollections(), (r32) => {
      r32 && (b(r32) || "cancelled:layerview-create" === r32.name) || i.getLogger(this).error(`Failed to create layerview for layer title:'${e28.title ?? "no title"}', id:'${e28.id ?? "no id"}' of type '${e28.type}'.`, { layer: e28, error: r32 }), this._refreshCollections();
    }), this._layerLayerViewInfoMap.set(e28, r31), this.view.ready && r31.start(), this.notifyChange("updating"), this.notifyChange("updatingRemaining");
  }
};
r([m2()], _7.prototype, "_workPromise", void 0), r([m2({ readOnly: true })], _7.prototype, "_watchUpdatingTracking", void 0), r([m2({ readOnly: true })], _7.prototype, "_layersToLayerViews", null), r([m2({ readOnly: true })], _7.prototype, "_rootCollectionNames", null), r([m2({ constructOnly: true })], _7.prototype, "layerViewFilter", void 0), r([m2()], _7.prototype, "layerViewImporter", void 0), r([m2()], _7.prototype, "supportsGround", void 0), r([m2({ readOnly: true })], _7.prototype, "updating", null), r([m2({ readOnly: true })], _7.prototype, "updatingRemaining", null), r([m2({ constructOnly: true })], _7.prototype, "view", void 0), _7 = r([a("esri.views.support.LayerViewManager")], _7);
var V2 = _7;

// node_modules/@arcgis/core/views/support/RequiredFieldsOptions.js
var t13 = class extends b2 {
  constructor(o31) {
    super(o31), this.featureTitleFields = false, this.utilityNetworkFields = false, this.globalIdField = false;
  }
};
r([m2()], t13.prototype, "featureTitleFields", void 0), r([m2()], t13.prototype, "utilityNetworkFields", void 0), r([m2()], t13.prototype, "globalIdField", void 0), t13 = r([a("esri.views.support.RequiredFieldsOptions")], t13);
var i18 = t13;

// node_modules/@arcgis/core/views/View.js
var $;
var _a;
var B = (_a = class extends o7.EventedMixin(m4.EsriPromiseMixin(b2)) {
  constructor(e28) {
    super(e28), this._userSpatialReference = null, this._cursor = null, this.handles = new r3(), this.updatingHandles = new h5(), this.allLayerViews = new l4({ getCollections: () => [this.basemapView?.baseLayerViews, this.groundView?.layerViews, this.layerViews, this.basemapView?.referenceLayerViews], getChildrenFunction: Q }), this.analyses = new t11(), this.basemapView = null, this.displayFilterEnabled = true, this.fatalError = null, this.graphics = new c7(), this.groundView = null, this.typeSpecificPreconditionsReady = true, this.layerViews = new V(), this.magnifier = new p8(), this.padding = { left: 0, top: 0, right: 0, bottom: 0 }, this.ready = false, this._readyStateWaitingTask = null, this.supportsGround = true, this.type = null, this.scale = null, this.updating = false, this.initialExtentRequired = true, this.input = new a8(), this.navigation = new l14(), this.layerViewManager = null, this.analysisViewManager = null, this.isHeightModelInfoRequired = false, this.width = null, this.height = null, this.resizing = false, this.suspended = false, this.viewEvents = new c12(this), this.persistableViewModels = new V(), this.requiredFieldsOptions = new i18(), this._isValid = false, this._readyCycleForced = false, this._lockedSpatialReference = null, this._userTimeZone = null, this._lockedTimeZone = null, this._userTimeExtent = null, this._lockedTimeExtent = null, this.theme = null, this.handles.add(l3(() => this.preconditionsReady, (e29) => {
      const t28 = this.ready;
      if (e29 ? (this._lockedSpatialReference = this.spatialReference, this._lockedTimeZone = this.timeZone, this._lockedTimeExtent = this.timeExtent, $.views.add(this)) : (this._lockedSpatialReference = null, $.views.remove(this)), this.notifyChange("spatialReference"), !e29 && t28) this.toolViewManager?.detach(), null != this.analysisViewManager && this.analysisViewManager.detach(), this.layerViewManager?.clear(), this._teardown();
      else if (e29 && !t28) {
        try {
          this._startup();
        } catch (i29) {
          return void queueMicrotask(() => {
            this.fatalError = new s("view:startup-error", "View._startup failed", i29);
          });
        }
        null != this.analysisViewManager && this.analysisViewManager.attach(), this.toolViewManager.attach();
      }
    }, U));
  }
  initialize() {
    this.addResolvingPromise(Promise.all([this.loadAsyncDependencies(), this.validate()]).then(() => (this._isValid = true, j(() => this.ready)))), this.basemapView = new p7({ view: this }), this.layerViewManager = new V2({ view: this, layerViewFilter: (e28) => this.layerViewFilter?.(e28) ?? true, layerViewImporter: { importLayerView: (e28) => this.importLayerView(e28), hasLayerViewModule: (e28) => this.hasLayerViewModule(e28) }, supportsGround: this.supportsGround }), this.toolViewManager = new E3({ view: this }), this.selectionManager = new L5({ view: this }), this.addHandles([f(() => "map-content-error" === this.readyState && !this.spatialReference, () => {
      i.getLogger(this).warn("#spatialReference", "no spatial reference could be derived from the currently added map layers");
    }), l3(() => this.initialExtentRequired, (e28) => this.defaultsFromMap.required = { ...this.defaultsFromMap.required, extent: e28 }, w), l3(() => this.ready, (e28) => {
      this.defaultsFromMap && (this.defaultsFromMap.suspended = e28, this.defaultsFromMap.userSpatialReference = e28 ? this.spatialReference : this._userSpatialReference);
    }, U), l3(() => this._userSpatialReference, (e28) => {
      this.defaultsFromMap && (this.defaultsFromMap.userSpatialReference = e28);
    }, w)]);
  }
  destroy() {
    this.destroyed || ($.views.remove(this), this.viewEvents.destroy(), this.allLayerViews.destroy(), this.navigation && (this.navigation.destroy(), this._set("navigation", null)), this.graphics = u2(this.graphics), this.analyses = u2(this.analyses), this.defaultsFromMap.destroy(), this._set("defaultsFromMap", null), u2(this.analysisViewManager), this.toolViewManager = u2(this.toolViewManager), this.layerViewManager = u2(this.layerViewManager), this.selectionManager = u2(this.selectionManager), this.basemapView = u2(this.basemapView), this.groundView?.destroy(), this.layerViews?.forEach((e28) => e28.destroy()), this.layerViews.length = 0, this.invalidate(), this._emitter.clear(), this.handles.destroy(), this.map = u2(this.map), this.updatingHandles.destroy());
  }
  _startup() {
    this._set("ready", true);
  }
  _teardown() {
    this._set("ready", false);
  }
  whenReady() {
    return Promise.resolve(this);
  }
  toMap() {
    return i.getLogger(this).error("#toMap()", "Not implemented on this instance of View"), null;
  }
  get activeTool() {
    return this.toolViewManager?.activeTool;
  }
  set activeTool(e28) {
    this.toolViewManager && (this.toolViewManager.activeTool = e28);
  }
  get animation() {
    return this._get("animation");
  }
  set animation(e28) {
    this._set("animation", e28);
  }
  get center() {
    return null;
  }
  get defaultsFromMapSettings() {
    return {};
  }
  get defaultsFromMap() {
    return new d9({ required: { tileInfo: false, heightModelInfo: false, extent: false }, map: () => this.map, getSpatialReferenceSupport: (e28, t28) => this.getSpatialReferenceSupport(e28, t28), ...this.defaultsFromMapSettings });
  }
  get extent() {
    return this._get("extent");
  }
  set extent(e28) {
    this._set("extent", e28);
  }
  get heightModelInfo() {
    return this.getDefaultHeightModelInfo();
  }
  get highlights() {
    return this._get("highlights") ?? n16();
  }
  set highlights(e28) {
    this._set("highlights", n5(e28, this._get("highlights"), V.ofType(u8)));
  }
  get interacting() {
    return this.navigating;
  }
  get navigating() {
    return false;
  }
  get preconditionsReady() {
    return !this.destroying && !this.destroyed && !(this.fatalError || !this._isValid || this._readyCycleForced || !this.map || p2.isLoadable(this.map) && !this.map.loaded || 0 === this.width || 0 === this.height || !this.spatialReference || !this._validateSpatialReference(this.spatialReference) || !this._lockedSpatialReference && !this.defaultsFromMap?.ready || !this.typeSpecificPreconditionsReady);
  }
  get resolution() {
    return 0;
  }
  set map(e28) {
    e28 !== this._get("map") && (e28?.destroyed && (i.getLogger(this).warn("#map", "The provided map is already destroyed", { map: e28 }), e28 = null), p2.isLoadable(e28) && e28.load().catch(() => {
    }), this.constructed && !this.destroyed && (this.forceReadyCycle(), this._lockedSpatialReference = null), this._set("map", e28));
  }
  get readyState() {
    if (this.destroyed) return this._get("readyState");
    if (!this.map) return "missing-map";
    if ("container" in this && !this.container) return "missing-container";
    if (this.fatalError) return "rendering-error";
    if ((this.defaultsFromMap?.ready ?? false) && !this.spatialReference) {
      const e28 = !("loaded" in this.map) || this.map.loaded, t28 = this.map.ground.loaded, i29 = this.map.basemap?.loaded ?? true;
      return e28 && i29 && t28 && !this.map?.allLayers.length ? "empty-map" : (this._readyStateWaitingTask || (this._readyStateWaitingTask = d5((e29) => A(has("view-readyState-waiting-delay"), null, e29)), this.addHandles(this._readyStateWaitingTask), this.addHandles(this._readyStateWaitingTask, "ready-state-task")), this._readyStateWaitingTask?.finished ? "map-content-error" : "loading");
    }
    return this._readyStateWaitingTask = e2(this._readyStateWaitingTask), this.removeHandles("ready-state-task"), this.ready ? "ready" : "loading";
  }
  get spatialReference() {
    const e28 = this._userSpatialReference || this._lockedSpatialReference || this.getDefaultSpatialReference() || null;
    if (e28 && this.defaultsFromMap?.required?.heightModelInfo) {
      const t28 = e28.clone();
      return t28.vcsWkid = this.defaultsFromMap.vcsWkid, t28.latestVcsWkid = this.defaultsFromMap.latestVcsWkid, t28;
    }
    return e28;
  }
  set spatialReference(e28) {
    const t28 = !s7(e28, this._get("spatialReference"));
    this._set("_userSpatialReference", e28), t28 && (this._set("spatialReference", e28), this._spatialReferenceChanged(e28));
  }
  _spatialReferenceChanged(e28) {
  }
  get stationary() {
    return !this.animation && !this.navigating && !this.resizing;
  }
  get timeExtent() {
    return this._userTimeExtent ?? this._lockedTimeExtent ?? this.getDefaultTimeExtent() ?? null;
  }
  set timeExtent(e28) {
    this._userTimeExtent = e28;
  }
  get timeZone() {
    return this._userTimeZone ?? this._lockedTimeZone ?? this.getDefaultTimeZone() ?? e3;
  }
  set timeZone(e28) {
    this._userTimeZone = e28, p(e28) || i.getLogger(this).warn("#timeZone", `the parsed value '${e28}' may not be a valid IANA time zone`);
  }
  get tools() {
    return this.toolViewManager?.tools;
  }
  get initialExtent() {
    return this.defaultsFromMap?.extent;
  }
  get cursor() {
    return this.toolViewManager?.cursor ?? this._cursor ?? "default";
  }
  set cursor(e28) {
    this._cursor = e28, this.notifyChange("cursor");
  }
  get size() {
    return [this.width, this.height];
  }
  get effectiveTheme() {
    return this.theme ?? new l11();
  }
  whenLayerView(e28) {
    return this.layerViewManager?.whenLayerView(e28) ?? Promise.reject();
  }
  getDefaultSpatialReference() {
    return this.defaultsFromMap?.spatialReference;
  }
  getDefaultHeightModelInfo() {
    return (this.map && "heightModelInfo" in this.map ? this.map.heightModelInfo : void 0) ?? this.defaultsFromMap?.heightModelInfo ?? null;
  }
  getDefaultTimeZone() {
    return null;
  }
  getDefaultTimeExtent() {
    return null;
  }
  importLayerView(e28) {
    throw new s("view:importLayerView-missing", "importLayerView() not implemented");
  }
  hasLayerViewModule(e28) {
    return false;
  }
  async validate() {
  }
  async loadAsyncDependencies() {
  }
  invalidate() {
    this._isValid = false;
  }
  getSpatialReferenceSupport() {
    return { constraints: null };
  }
  _validateSpatialReference(e28) {
    return null != this.getSpatialReferenceSupport(e28);
  }
  when(e28, t28) {
    return this.isResolved() && !this.ready && i.getLogger(this).warn("#when()", "Calling view.when() while the view is no longer ready but was already resolved once will resolve immediately. Use reactiveUtils.whenOnce(() => view.ready).then(...) instead."), super.when(e28, t28);
  }
  forceReadyCycle() {
    this.ready && (f(() => this.destroyed || false === this.preconditionsReady, () => this._readyCycleForced = false, { once: true }), this._readyCycleForced = true);
  }
  addAndActivateTool(e28) {
    this.toolViewManager.tools.add(e28), this.activeTool = e28;
  }
  tryFatalErrorRecovery() {
    this.fatalError = null;
  }
}, $ = _a, _a.views = new V(), _a);
r([m2()], B.prototype, "_userSpatialReference", void 0), r([m2()], B.prototype, "activeTool", null), r([m2({ readOnly: true })], B.prototype, "allLayerViews", void 0), r([m2(l8(t11, "analyses"))], B.prototype, "analyses", void 0), r([m2()], B.prototype, "animation", null), r([m2()], B.prototype, "basemapView", void 0), r([m2()], B.prototype, "center", null), r([m2()], B.prototype, "defaultsFromMapSettings", null), r([m2()], B.prototype, "defaultsFromMap", null), r([m2()], B.prototype, "displayFilterEnabled", void 0), r([m2({ type: z })], B.prototype, "extent", null), r([m2()], B.prototype, "fatalError", void 0), r([m2(l8(c7, "graphics"))], B.prototype, "graphics", void 0), r([m2()], B.prototype, "groundView", void 0), r([m2({ readOnly: true, type: m6 })], B.prototype, "heightModelInfo", null), r([m2({ type: V.ofType(u8) })], B.prototype, "highlights", null), r([m2({ readOnly: true })], B.prototype, "interacting", null), r([m2({ constructOnly: true })], B.prototype, "layerViewFilter", void 0), r([m2({ readOnly: true })], B.prototype, "navigating", null), r([m2({ readOnly: true, dependsOn: ["fatalError", "_isValid", "_readyCycleForced", "map", "map.loaded?", "width", "height", "spatialReference", "_lockedSpatialReference", "defaultsFromMap.ready", "typeSpecificPreconditionsReady"] })], B.prototype, "preconditionsReady", null), r([m2({ readOnly: true })], B.prototype, "typeSpecificPreconditionsReady", void 0), r([m2({ type: V, readOnly: true })], B.prototype, "layerViews", void 0), r([m2()], B.prototype, "resolution", null), r([m2({ type: p8 })], B.prototype, "magnifier", void 0), r([m2({ value: null, type: L4 })], B.prototype, "map", null), r([m2()], B.prototype, "padding", void 0), r([m2({ readOnly: true })], B.prototype, "ready", void 0), r([m2()], B.prototype, "_readyStateWaitingTask", void 0), r([m2({ readOnly: true })], B.prototype, "readyState", null), r([m2({ type: f2 })], B.prototype, "spatialReference", null), r([m2()], B.prototype, "stationary", null), r([m2({ readOnly: true })], B.prototype, "supportsGround", void 0), r([m2({ type: u5 })], B.prototype, "timeExtent", null), r([m2({ type: String, nonNullable: true })], B.prototype, "timeZone", null), r([m2()], B.prototype, "tools", null), r([m2()], B.prototype, "toolViewManager", void 0), r([m2({ readOnly: true })], B.prototype, "type", void 0), r([m2({ type: Number })], B.prototype, "scale", void 0), r([m2({ readOnly: true })], B.prototype, "updating", void 0), r([m2({ readOnly: true })], B.prototype, "initialExtentRequired", void 0), r([m2({ readOnly: true })], B.prototype, "initialExtent", null), r([m2()], B.prototype, "cursor", null), r([m2({ readOnly: true })], B.prototype, "input", void 0), r([m2({ type: l14, nonNullable: true })], B.prototype, "navigation", void 0), r([m2()], B.prototype, "layerViewManager", void 0), r([m2()], B.prototype, "analysisViewManager", void 0), r([m2()], B.prototype, "selectionManager", void 0), r([m2()], B.prototype, "width", void 0), r([m2()], B.prototype, "height", void 0), r([m2({ readOnly: true })], B.prototype, "resizing", void 0), r([m2({ value: null, readOnly: true })], B.prototype, "size", null), r([m2({ readOnly: true })], B.prototype, "suspended", void 0), r([m2({ readOnly: true })], B.prototype, "viewEvents", void 0), r([m2({ readOnly: true })], B.prototype, "persistableViewModels", void 0), r([m2()], B.prototype, "_isValid", void 0), r([m2()], B.prototype, "_readyCycleForced", void 0), r([m2()], B.prototype, "_lockedSpatialReference", void 0), r([m2()], B.prototype, "_userTimeZone", void 0), r([m2()], B.prototype, "_lockedTimeZone", void 0), r([m2()], B.prototype, "_userTimeExtent", void 0), r([m2()], B.prototype, "_lockedTimeExtent", void 0), r([m2({ type: l11 })], B.prototype, "theme", void 0), r([m2({ readOnly: true, type: l11 })], B.prototype, "effectiveTheme", null), B = $ = r([a("esri.views.View")], B);
var J = globalThis.$arcgis;
J && !J.views && Object.defineProperty(J, "views", { configurable: false, enumerable: true, writable: false, value: B.views });
var K = B;
function Q(e28) {
  return e28.layerViews;
}

// node_modules/@arcgis/core/core/libs/gl-matrix-2/types/vec2.js
function n19(n32) {
  return n32 instanceof Float32Array && n32.length >= 2;
}
function r16(n32) {
  return Array.isArray(n32) && n32.length >= 2;
}
function t14(t28) {
  return n19(t28) || r16(t28);
}

// node_modules/@arcgis/core/views/2d/ViewState.js
var G;
var O3 = [0, 0];
var W = G = class extends l2 {
  constructor(t28) {
    super(t28), this._viewpoint2D = { center: n8(), rotation: 0, scale: 0, spatialReference: void 0 }, this.center = [0, 0], this.extent = new z(), this.id = 0, this.inverseTransform = e10(), this.resolution = 0, this.rotation = 0, this.scale = 0, this.transform = e10(), this.transformNoRotation = e10(), this.displayMat3 = e11(), this.displayViewMat3 = e11(), this.viewMat3 = e11(), this.viewMat2d = n10(), this.worldScreenWidth = 0, this.size = [0, 0];
  }
  set pixelRatio(t28) {
    this._set("pixelRatio", t28), this._update();
  }
  set size(t28) {
    this._set("size", t28), this._update();
  }
  set viewpoint(t28) {
    if (t28) {
      const i29 = this._viewpoint2D, e28 = t28.targetGeometry;
      i29.center[0] = e28.x, i29.center[1] = e28.y, i29.rotation = t28.rotation, i29.scale = t28.scale, i29.spatialReference = e28.spatialReference;
    }
    this._update();
  }
  get visibleArea() {
    const [t28, i29] = this.size;
    return [this.toMap([0, 0], 0, 0), this.toMap([0, 0], 0, i29), this.toMap([0, 0], t28, i29), this.toMap([0, 0], t28, 0)];
  }
  copy(t28) {
    const i29 = this.size, e28 = this.viewpoint;
    return e28 && i29 ? (this.viewpoint = Z(e28, t28.viewpoint), this._set("size", r8(i29, t28.size))) : (this.viewpoint = t28.viewpoint.clone(), this._set("size", [t28.size[0], t28.size[1]])), this._set("pixelRatio", t28.pixelRatio), this;
  }
  clone() {
    return new G({ size: this.size, viewpoint: this.viewpoint.clone(), pixelRatio: this.pixelRatio });
  }
  toMap(t28, i29, e28) {
    return t14(i29) ? S2(t28, i29, this.inverseTransform) : (O3[0] = i29, O3[1] = e28, S2(t28, O3, this.inverseTransform));
  }
  toScreen(t28, i29, e28) {
    return t14(i29) ? S2(t28, i29, this.transform) : (O3[0] = i29, O3[1] = e28, S2(t28, O3, this.transform));
  }
  toScreenNoRotation(t28, i29, e28) {
    return t14(i29) ? S2(t28, i29, this.transformNoRotation) : (O3[0] = i29, O3[1] = e28, S2(t28, O3, this.transformNoRotation));
  }
  wrapMapCoordinate(t28, i29) {
    r8(t28, i29);
    const [e28] = i29, [s33] = this.center, { extent: o31, spatialReference: r31 } = this;
    let { xmin: a29, xmax: n32 } = o31;
    if (r31.isWrappable) {
      const t29 = mt(r31) / 2;
      a29 = Math.max(a29, s33 - t29), n32 = Math.min(n32, s33 + t29);
    }
    return (e28 < a29 || e28 > n32) && (t28[0] = P2(e28, s33, r31)), t28;
  }
  getScreenTransform(t28, i29) {
    const { center: e28 } = this._viewpoint2D, s33 = this._get("pixelRatio") || 1, o31 = this._get("size");
    return ut(t28, e28, o31, i29, 0, s33), t28;
  }
  _update() {
    const { center: t28, spatialReference: e28, scale: s33, rotation: o31 } = this._viewpoint2D, h20 = this._get("pixelRatio") || 1, c29 = this._get("size"), u18 = new m5({ targetGeometry: new _(t28[0], t28[1], e28), scale: s33, rotation: o31 });
    if (this._set("viewpoint", u18), !c29 || !e28 || !s33) return;
    this.resolution = ot(u18), this.rotation = o31, this.scale = s33, this.spatialReference = e28, r8(this.center, t28);
    const j8 = 0 !== c29[0] ? 2 / c29[0] : 0, g16 = 0 !== c29[1] ? -2 / c29[1] : 0;
    r7(this.displayMat3, j8, 0, 0, 0, g16, 0, -1, 1, 1);
    const R2 = o8(this.viewMat3), _11 = r9(c29[0] / 2, c29[1] / 2), b8 = r9(-c29[0] / 2, -c29[1] / 2), z4 = u6(o31);
    M2(R2, R2, _11), h4(R2, R2, z4), M2(R2, R2, b8), i5(this.displayViewMat3, this.displayMat3, R2);
    const S4 = f4(this.viewMat2d, _11);
    return s12(S4, S4, z4), i6(S4, S4, b8), _4(this.extent, u18, c29), lt(this.transform, u18, c29, h20), u7(this.inverseTransform, this.transform), ft(this.transformNoRotation, u18, c29, h20), this.worldScreenWidth = yt(this.spatialReference, this.resolution), this._set("id", this.id + 1), this.notifyChange("visibleArea"), this;
  }
};
r([m2({ readOnly: true })], W.prototype, "id", void 0), r([m2({ value: 1, json: { write: true } })], W.prototype, "pixelRatio", null), r([m2({ json: { write: true } })], W.prototype, "size", null), r([m2()], W.prototype, "spatialReference", void 0), r([m2({ type: m5, json: { write: true } })], W.prototype, "viewpoint", null), r([m2({ readOnly: true })], W.prototype, "visibleArea", null), W = G = r([a("esri.views.2d.ViewState")], W);
var L6 = W;

// node_modules/@arcgis/core/views/2d/PaddedViewState.js
var l15;
var m16;
var g10 = l15 = class extends b2 {
  constructor() {
    super(...arguments), this.left = 0, this.top = 0, this.right = 0, this.bottom = 0;
  }
  clone() {
    return new l15({ left: this.left, top: this.top, right: this.right, bottom: this.bottom });
  }
};
r([m2()], g10.prototype, "left", void 0), r([m2()], g10.prototype, "top", void 0), r([m2()], g10.prototype, "right", void 0), r([m2()], g10.prototype, "bottom", void 0), g10 = l15 = r([a("esri.views.2d.PaddedViewState.Padding")], g10);
var w4 = m16 = class extends L6 {
  constructor(...t28) {
    super(...t28), this.paddedViewState = new L6(), this._updateContent = (() => {
      const t29 = n8();
      return () => {
        const e28 = this._get("size"), i29 = this._get("padding");
        if (!e28 || !i29) return;
        const o31 = this.paddedViewState;
        o9(t29, i29.left + i29.right, i29.top + i29.bottom), e7(t29, e28, t29), r8(o31.size, t29);
        const s33 = o31.viewpoint;
        s33 && (this.viewpoint = s33);
      };
    })(), this.addHandles(l3(() => [this.size, this.padding], () => this._updateContent(), U)), this.padding = new g10(), this.size = [0, 0];
  }
  set padding(t28) {
    this._set("padding", t28 || new g10());
  }
  set viewpoint(t28) {
    if (t28) {
      this.paddedViewState.viewpoint = t28;
      let e28 = t28;
      const i29 = this._get("padding");
      i29 && (e28 = gt(t28.clone(), t28, this._get("size"), i29));
      const { targetGeometry: o31, rotation: s33, scale: r31 } = e28, { x: p29, y: d21, spatialReference: a29 } = o31, n32 = this._viewpoint2D;
      n32.center[0] = p29, n32.center[1] = d21, n32.rotation = s33, n32.scale = r31, n32.spatialReference = a29, this._update();
    }
  }
  clone() {
    return new m16({ padding: this.padding.clone(), size: this.size.slice(), viewpoint: this.paddedViewState.viewpoint.clone(), pixelRatio: this.pixelRatio });
  }
};
r([m2()], w4.prototype, "paddedViewState", void 0), r([m2({ type: g10 })], w4.prototype, "padding", null), r([m2()], w4.prototype, "viewpoint", null), w4 = m16 = r([a("esri.views.2d.PaddedViewState")], w4);
var f10 = w4;

// node_modules/@arcgis/core/views/2d/FrameTask.js
var h10 = class {
  constructor(a29) {
    this.view = a29, this._stationaryHandle = null, this._frameTaskHandle = null, this._updateParameters = null, this._updateRequested = false, this._scheduler = I2(), this._schedulerHandle = f(() => this._scheduler.updating, () => this.requestFrame()), this.stationary = true, this.prepare = () => {
      this._updateParameters && (this._updateParameters.state = this.view.state, this._updateParameters.stationary = this.view.stationary, this._updateParameters.pixelRatio = window.devicePixelRatio, this._updateParameters.renderingOptions = this.view.renderingOptions, this._updateParameters.targetState.copy(this.view.state), null == this.view.animation?.target || S(this.view.animation.target) || (this._updateParameters.targetState.viewpoint = this.view.animation.target));
    }, this.update = (e28) => {
      if (this._updateRequested = false, this.view?.destroyed) return;
      const { allLayerViews: t28, graphicsView: a30, labelManager: s33, state: { id: i29 } } = this.view;
      t28?.forEach(this._updateLayerView, this), null != s33 && (s33.lastUpdateId !== i29 && (s33.viewChange(), s33.lastUpdateId = i29), s33.updateRequested && s33.processUpdate(this._updateParameters)), null != a30 && (a30.lastUpdateId !== i29 && (a30.viewChange(), a30.lastUpdateId = i29), a30.updateRequested && a30.processUpdate(this._updateParameters)), this.view.graphicsTileStore?.setViewState(this._updateParameters.state), this.view.animation ? this._scheduler.state = I.ANIMATING : this.view.interacting ? this._scheduler.state = I.INTERACTING : this._scheduler.state = I.IDLE;
      this._scheduler.frame(e28) || this._updateRequested || this._scheduler.state !== I.IDLE || this._frameTaskHandle?.pause();
    };
  }
  destroy() {
    this.stop(), this._schedulerHandle.remove(), this._scheduler.destroy();
  }
  get scheduler() {
    return this._scheduler;
  }
  start() {
    if (this._frameTaskHandle) return;
    const e28 = this.view;
    this.stationary = e28.stationary, this._updateParameters = { state: e28.state, targetState: new f10(), pixelRatio: window.devicePixelRatio, stationary: this.stationary, renderingOptions: e28.renderingOptions }, this._stationaryHandle = l3(() => e28.stationary, (e29) => {
      this.stationary = e29, this.requestFrame();
    }), this._frameTaskHandle = F(this), this.requestUpdate();
  }
  stop() {
    this._frameTaskHandle && (this._updateRequested = false, this._stationaryHandle?.remove(), this._frameTaskHandle.remove(), this._updateParameters = this._stationaryHandle = this._frameTaskHandle = null, this.stationary = true);
  }
  requestUpdate() {
    this._updateRequested || (this._updateRequested = true, this.requestFrame());
  }
  requestFrame() {
    this._frameTaskHandle && this._frameTaskHandle.resume();
  }
  _updateLayerView(e28) {
    if (!e28.attached) return void this.requestUpdate();
    const t28 = this.view.state, a29 = e28.lastUpdateId;
    null != a29 && (this.stationary || e28.moving) || (e28.moving = true), a29 !== t28.id && e28.viewChange(), this.stationary && e28.moving && (e28.moving = false, e28.moveEnd()), e28.lastUpdateId = t28.id, e28.updateRequested && e28.processUpdate(this._updateParameters), "layerViews" in e28 && e28.layerViews?.forEach(this._updateLayerView, this);
  }
};

// node_modules/@arcgis/core/geometry/support/near.js
function r17(r31, l23) {
  const { spatialReference: s33 } = l23, a29 = [l23.x, l23.y];
  let c29, m26, x5, f18;
  const p29 = [0, 0], u18 = i19(r31);
  for (let e28 = 0; e28 < u18.length; e28++) {
    const t28 = u18[e28];
    for (let r32 = 0; r32 < t28.length - 1; r32++) {
      s8(p29, a29, t28, r32);
      const i29 = m7(a29, p29);
      (null == c29 || i29 < c29) && (c29 = i29, m26 = [...p29], x5 = e28, f18 = r32);
    }
  }
  if (null == c29 || !m26 || null == x5 || null == f18) throw new s("nearest-coordinate:failed", "Failed to find the nearest coordinate");
  const [y10, d21] = m26;
  return { coordinate: new _({ x: y10, y: d21, spatialReference: s33 }), distance: c29 };
}
function i19(e28) {
  switch (e28.type) {
    case "extent":
      return [[[e28.xmin, e28.ymin], [e28.xmin, e28.ymax], [e28.xmax, e28.ymax], [e28.xmax, e28.ymin], [e28.xmin, e28.ymin]]];
    case "polygon":
      return e28.rings;
    case "polyline":
      return e28.paths;
  }
}

// node_modules/@arcgis/core/views/2d/constraints/GeometryConstraint.js
var l16;
var p15 = l16 = class extends n6.NumericIdentifiableMixin(b2) {
  constructor(e28) {
    super(e28), this.geometry = null, this.spatialReference = null;
  }
  get normalizedGeometry() {
    if (null == this.geometry || !this.spatialReference) return null;
    if (!this.spatialReference.equals(this.geometry.spatialReference)) try {
      return O2(this.geometry, this.spatialReference);
    } catch (e28) {
      return i.getLogger(this).error("#constraints.geometry", "could not project the geometry to the view's spatial reference", { geometry: this.geometry, spatialReference: this.spatialReference, error: e28 }), null;
    }
    return this.geometry;
  }
  constrain(e28, r31) {
    if (null == this.normalizedGeometry) return e28;
    const t28 = e28.targetGeometry;
    if ("extent" === this.normalizedGeometry.type ? t5(this.normalizedGeometry, t28) : f3(this.normalizedGeometry, t28)) return e28;
    const { coordinate: o31 } = r17(this.normalizedGeometry, t28);
    return o31 ? (e28.targetGeometry = o31, e28) : e28;
  }
  clone() {
    return new l16({ geometry: this.geometry?.clone(), spatialReference: this.spatialReference?.clone() });
  }
};
r([m2({ constructOnly: true })], p15.prototype, "geometry", void 0), r([m2({ readOnly: true })], p15.prototype, "normalizedGeometry", null), r([m2({ constructOnly: true })], p15.prototype, "spatialReference", void 0), p15 = l16 = r([a("esri.views.2d.constraints.GeometryConstraint")], p15);

// node_modules/@arcgis/core/views/2d/constraints/RotationConstraint.js
var i20;
var n20 = i20 = class extends n6.NumericIdentifiableMixin(b2) {
  constructor() {
    super(...arguments), this.enabled = true, this.rotationEnabled = true;
  }
  constrain(o31, t28) {
    return this.enabled && t28 ? (this.rotationEnabled || (o31.rotation = t28.rotation), o31) : o31;
  }
  clone() {
    return new i20({ enabled: this.enabled, rotationEnabled: this.rotationEnabled });
  }
};
r([m2()], n20.prototype, "enabled", void 0), r([m2()], n20.prototype, "rotationEnabled", void 0), n20 = i20 = r([a("esri.views.2d.constraints.RotationConstraint")], n20);
var a10 = n20;

// node_modules/@arcgis/core/views/2d/constraints/ZoomConstraint.js
var a11;
var c14 = a11 = class extends n6.NumericIdentifiableMixin(b2) {
  constructor(e28) {
    super(e28), this._lodByScale = {}, this._scales = [], this.effectiveLODs = null, this.effectiveMinZoom = -1, this.effectiveMaxZoom = -1, this.effectiveMinScale = 0, this.effectiveMaxScale = 0, this.lods = null, this.minZoom = -1, this.maxZoom = -1, this.minScale = 0, this.maxScale = 0, this.snapToZoom = true;
  }
  initialize() {
    let e28, { lods: t28, minScale: o31, maxScale: s33, minZoom: i29, maxZoom: a29 } = this, c29 = -1, r31 = -1, l23 = false, n32 = false;
    if (0 !== o31 && 0 !== s33 && o31 < s33 && ([o31, s33] = [s33, o31]), !t28?.length) return this._set("effectiveMinScale", o31), void this._set("effectiveMaxScale", s33);
    t28 = t28.map((e29) => e29.clone()), t28.sort((e29, t29) => t29.scale - e29.scale), t28.forEach((e29, t29) => e29.level = t29);
    for (const f18 of t28) !l23 && o31 > 0 && o31 >= f18.scale && (c29 = f18.level, l23 = true), !n32 && s33 > 0 && s33 >= f18.scale && (r31 = e28 ? e28.level : -1, n32 = true), e28 = f18;
    -1 === i29 && (i29 = 0 === o31 ? 0 : c29), -1 === a29 && (a29 = 0 === s33 ? t28.length - 1 : r31), i29 = Math.max(i29, 0), i29 = Math.min(i29, t28.length - 1), a29 = Math.max(a29, 0), a29 = Math.min(a29, t28.length - 1), i29 > a29 && ([i29, a29] = [a29, i29]), o31 = t28[i29].scale, s33 = t28[a29].scale, t28.splice(0, i29), t28.splice(a29 - i29 + 1), t28.forEach((e29, t29) => {
      this._lodByScale[e29.scale] = e29, this._scales[t29] = e29.scale;
    }), this._set("effectiveLODs", t28), this._set("effectiveMinZoom", i29), this._set("effectiveMaxZoom", a29), this._set("effectiveMinScale", o31), this._set("effectiveMaxScale", s33);
  }
  constrain(e28, t28) {
    if (t28 && e28.scale === t28.scale) return e28;
    const o31 = this.effectiveMinScale, s33 = this.effectiveMaxScale, i29 = e28.targetGeometry, a29 = t28 && t28.targetGeometry, c29 = 0 !== s33 && e28.scale < s33, r31 = 0 !== o31 && e28.scale > o31;
    if (c29 || r31) {
      const c30 = r31 ? o31 : s33;
      if (t28 && a29) {
        const o32 = (c30 - t28.scale) / (e28.scale - t28.scale);
        i29.x = a29.x + (i29.x - a29.x) * o32, i29.y = a29.y + (i29.y - a29.y) * o32;
      }
      e28.scale = c30;
    }
    return this.snapToZoom && this.effectiveLODs && (e28.scale = this._getClosestScale(e28.scale)), e28;
  }
  fit(e28) {
    if (!this.effectiveLODs || !this.snapToZoom) return this.constrain(e28, null);
    const t28 = this.scaleToZoom(e28.scale), o31 = Math.abs(t28 - Math.floor(t28));
    return e28.scale = this.zoomToScale(o31 > 0.99 ? Math.round(t28) : Math.floor(t28)), e28;
  }
  zoomToScale(e28) {
    if (!this.effectiveLODs) return 0;
    e28 -= this.effectiveMinZoom, e28 = Math.max(0, e28);
    const t28 = this._scales;
    if (e28 <= 0) return t28[0];
    if (e28 >= t28.length) return t28[t28.length - 1];
    const o31 = Math.floor(e28), s33 = Math.ceil(e28);
    return t28[o31] + (e28 - o31) * (t28[s33] - t28[o31]);
  }
  scaleToZoom(e28) {
    if (!this.effectiveLODs) return -1;
    const t28 = this._scales;
    let o31, s33;
    if (e28 >= t28[0]) return this.effectiveMinZoom;
    if (e28 <= t28[t28.length - 1]) return this.effectiveMaxZoom;
    for (let i29 = 0; i29 < t28.length - 1; i29++) {
      if (o31 = t28[i29], s33 = t28[i29 + 1], s33 === e28) {
        return i29 + this.effectiveMinZoom + 1;
      }
      if (o31 > e28 && s33 < e28) {
        return i29 + this.effectiveMinZoom + 1 - (e28 - s33) / (o31 - s33);
      }
    }
    return -1;
  }
  snapToClosestScale(e28) {
    if (!this.effectiveLODs) return e28;
    const t28 = this.scaleToZoom(e28);
    return this.zoomToScale(Math.round(t28));
  }
  snapToNextScale(e28, t28 = 0.5) {
    if (!this.effectiveLODs) return e28 * t28;
    const o31 = Math.round(this.scaleToZoom(e28));
    return this.zoomToScale(o31 + 1);
  }
  snapToPreviousScale(e28, t28 = 2) {
    if (!this.effectiveLODs) return e28 * t28;
    const o31 = Math.round(this.scaleToZoom(e28));
    return this.zoomToScale(o31 - 1);
  }
  clone() {
    return new a11({ lods: this.lods, minZoom: this.minZoom, maxZoom: this.maxZoom, minScale: this.minScale, maxScale: this.maxScale });
  }
  _getClosestScale(e28) {
    return this._lodByScale[e28] || (e28 = this._scales.reduce((t28, o31) => Math.abs(o31 - e28) <= Math.abs(t28 - e28) ? o31 : t28, this._scales[0])), this._lodByScale[e28].scale;
  }
};
r([m2({ readOnly: true })], c14.prototype, "effectiveLODs", void 0), r([m2({ readOnly: true })], c14.prototype, "effectiveMinZoom", void 0), r([m2({ readOnly: true })], c14.prototype, "effectiveMaxZoom", void 0), r([m2({ readOnly: true })], c14.prototype, "effectiveMinScale", void 0), r([m2({ readOnly: true })], c14.prototype, "effectiveMaxScale", void 0), r([m2()], c14.prototype, "lods", void 0), r([m2()], c14.prototype, "minZoom", void 0), r([m2()], c14.prototype, "maxZoom", void 0), r([m2()], c14.prototype, "minScale", void 0), r([m2()], c14.prototype, "maxScale", void 0), r([m2()], c14.prototype, "snapToZoom", void 0), c14 = a11 = r([a("esri.views.2d.constraints.ZoomConstraint")], c14);
var r18 = c14;

// node_modules/@arcgis/core/views/2d/MapViewConstraints.js
var p16 = { base: null, key: "type", typeMap: { extent: z, polygon: P } };
var y5 = class extends b2 {
  constructor(o31) {
    super(o31), this.lods = null, this.minScale = 0, this.maxScale = 0, this.minZoom = -1, this.maxZoom = -1, this.rotationEnabled = true, this.snapToZoom = true, this.customConstraints = new V();
  }
  destroy() {
    this.view = null;
  }
  get effectiveLODs() {
    return this._zoom.effectiveLODs;
  }
  get effectiveMinScale() {
    return this._zoom.effectiveMinScale;
  }
  get effectiveMaxScale() {
    return this._zoom.effectiveMaxScale;
  }
  get effectiveMinZoom() {
    return this._zoom.effectiveMinZoom;
  }
  get effectiveMaxZoom() {
    return this._zoom.effectiveMaxZoom;
  }
  set geometry(o31) {
    o31 ? this._set("geometry", o31) : this._set("geometry", null);
  }
  get version() {
    return `${this._zoom?.uid}/${this._rotation?.uid}/${this._geometry?.uid}`;
  }
  get _geometry() {
    const o31 = this._get("_geometry");
    return o31 && this.geometry === o31.geometry && this.view?.constraintsInfo.spatialReference === o31.spatialReference ? o31 : new p15({ geometry: this.geometry, spatialReference: this.view?.constraintsInfo.spatialReference });
  }
  get _rotation() {
    return new a10({ rotationEnabled: this.rotationEnabled });
  }
  get _zoom() {
    const o31 = this._get("_zoom"), t28 = this.lods || this.view?.constraintsInfo.lods, e28 = this.minZoom, r31 = this.maxZoom, s33 = this.minScale, n32 = this.maxScale, i29 = this.snapToZoom;
    return o31 && o31.lods === t28 && o31.minZoom === e28 && o31.maxZoom === r31 && o31.minScale === s33 && o31.maxScale === n32 && o31.snapToZoom === i29 ? o31 : new r18({ lods: t28, minZoom: e28, maxZoom: r31, minScale: s33, maxScale: n32, snapToZoom: i29 });
  }
  canZoomInTo(o31) {
    const t28 = this.effectiveMaxScale;
    return 0 === t28 || o31 >= t28;
  }
  canZoomOutTo(o31) {
    const t28 = this.effectiveMinScale;
    return 0 === t28 || o31 <= t28;
  }
  constrain(o31, t28) {
    return this._zoom.constrain(o31, t28), this._rotation.constrain(o31, t28), this._geometry.constrain(o31, t28), this.customConstraints.forEach((e28) => e28.constrain(o31, t28)), o31;
  }
  constrainByGeometry(o31) {
    return this._geometry.constrain(o31), this.customConstraints.forEach((t28) => t28.applyPanConstraint?.(o31)), o31;
  }
  fit(o31) {
    return this._zoom.fit(o31);
  }
  zoomToScale(o31) {
    return this._zoom.zoomToScale(o31);
  }
  scaleToZoom(o31) {
    return this._zoom.scaleToZoom(o31);
  }
  snapScale(o31) {
    return this._zoom.snapToClosestScale(o31);
  }
  snapToNextScale(o31) {
    return this._zoom.snapToNextScale(o31);
  }
  snapToPreviousScale(o31) {
    return this._zoom.snapToPreviousScale(o31);
  }
};
r([m2({ readOnly: true })], y5.prototype, "effectiveLODs", null), r([m2({ readOnly: true })], y5.prototype, "effectiveMinScale", null), r([m2({ readOnly: true })], y5.prototype, "effectiveMaxScale", null), r([m2({ readOnly: true })], y5.prototype, "effectiveMinZoom", null), r([m2({ readOnly: true })], y5.prototype, "effectiveMaxZoom", null), r([m2({ types: p16, value: null })], y5.prototype, "geometry", null), r([m2({ type: [l5] })], y5.prototype, "lods", void 0), r([m2()], y5.prototype, "minScale", void 0), r([m2()], y5.prototype, "maxScale", void 0), r([m2()], y5.prototype, "minZoom", void 0), r([m2()], y5.prototype, "maxZoom", void 0), r([m2()], y5.prototype, "rotationEnabled", void 0), r([m2()], y5.prototype, "snapToZoom", void 0), r([m2({ type: V })], y5.prototype, "customConstraints", void 0), r([m2()], y5.prototype, "view", void 0), r([m2({ readOnly: true })], y5.prototype, "version", null), r([m2({ type: p15, readOnly: true })], y5.prototype, "_geometry", null), r([m2({ type: a10 })], y5.prototype, "_rotation", null), r([m2({ readOnly: true, type: r18 })], y5.prototype, "_zoom", null), y5 = r([a("esri.views.2d.MapViewConstraints")], y5);
var f11 = y5;

// node_modules/@arcgis/core/views/2d/ViewStateManager.js
var z2 = class extends b2 {
  constructor(t28) {
    super(t28), this.constraints = null, this.ready = false, this.resizeAlign = "center", this.addHandles([l3(() => this.constraints?.version, (t29) => {
      this.constraints && t29 && this.ready && (this.state.viewpoint = this.constraints.fit(this.state.paddedViewState.viewpoint));
    }, U)]);
  }
  get center() {
    if (!this.ready) return this._get("center");
    const { center: t28, spatialReference: e28 } = this.state.paddedViewState;
    return this.state.commitProperty("id"), new _({ x: t28[0], y: t28[1], spatialReference: e28 });
  }
  set center(t28) {
    if (null == t28) return;
    if (!this.ready) return void this._set("center", t28);
    let e28;
    try {
      e28 = this._project(t28, this.state.spatialReference);
    } catch (o31) {
      return void i.getLogger(this).error(new s("mapview:invalid-center", "could not project the value in the view's spatial reference", { input: t28, error: o31 }));
    }
    const i29 = this.viewpoint;
    xt(i29, i29, e28), this.viewpoint = i29;
  }
  get extent() {
    return this.ready ? (this.state.commitProperty("id"), this.state.paddedViewState.extent.clone()) : this._get("extent");
  }
  set extent(t28) {
    if (null == t28) return;
    if (!t28.width || !t28.height) return void i.getLogger(this).error(new s("mapview:invalid-extent", "invalid extent size"));
    if (!this.ready) return this._set("extent", t28), this._set("center", void 0), this._set("viewpoint", void 0), this._set("scale", void 0), void this._set("zoom", void 0);
    let e28;
    try {
      e28 = this._project(t28, this.state.spatialReference);
    } catch (o31) {
      return void i.getLogger(this).error(new s("mapview:invalid-extent", "could not project the value in the view's spatial reference", { error: o31 }));
    }
    const i29 = this.viewpoint;
    tt(i29, i29, e28, this.state.size, { constraints: this.constraints }), this.viewpoint = i29;
  }
  get padding() {
    return this.ready ? this.state.padding : this._get("padding");
  }
  set padding(t28) {
    this.ready ? (this.state.padding = t28, this._set("padding", this.state.padding)) : this._set("padding", t28);
  }
  get resolution() {
    return this.ready ? (this.state.commitProperty("id"), this.state.resolution) : 0;
  }
  get rotation() {
    return this.ready ? (this.state.commitProperty("id"), this.state.rotation) : this._get("rotation");
  }
  set rotation(t28) {
    if (isNaN(t28)) return;
    if (!this.ready) return void this._set("rotation", t28);
    const e28 = this.viewpoint;
    wt(e28, e28, t28), this.viewpoint = e28;
  }
  get scale() {
    return this.ready ? (this.state.commitProperty("id"), this.state.scale) : this._get("scale");
  }
  set scale(t28) {
    if (!t28 || isNaN(t28)) return;
    if (!this.ready) {
      this._set("scale", t28), this._set("zoom", void 0);
      const e29 = this._get("extent");
      return void (e29 && (this._set("extent", void 0), this._set("center", e29.center)));
    }
    const e28 = this.viewpoint;
    jt(e28, e28, t28), this.viewpoint = e28;
  }
  get viewpoint() {
    if (!this.ready) return this._get("viewpoint");
    return this.state.paddedViewState.viewpoint.clone();
  }
  set viewpoint(t28) {
    if (null == t28) return;
    if (!this.ready) return this._set("viewpoint", t28), this._set("extent", void 0), this._set("center", void 0), this._set("zoom", void 0), void this._set("scale", void 0);
    let i29, o31;
    try {
      i29 = this._project(t28, this.state.spatialReference), !t28.scale || isNaN(t28.scale) ? o31 = new s("mapview:invalid-viewpoint", `invalid scale value of ${t28.scale}`) : null == t28.targetGeometry && (o31 = new s("mapview:invalid-viewpoint", "geometry not defined"));
    } catch (a29) {
      o31 = new s("mapview:invalid-viewpoint", "could not project the value in the view's spatial reference", { error: a29 });
    }
    if (o31) return void i.getLogger(this).error(o31);
    this._scaleBeforeChangingSpatialReference = null;
    const n32 = new m5({ targetGeometry: new _(), scale: 0, rotation: 0 });
    Z(n32, i29), this.constraints?.constrain(n32, this.state.paddedViewState.viewpoint), this.state.viewpoint = n32, this._set("viewpoint", n32);
  }
  get visibleArea() {
    return this.ready ? this.state.visibleArea : null;
  }
  get zoom() {
    return this.ready ? this.constraints?.scaleToZoom(this.scale) ?? -1 : this._get("zoom");
  }
  set zoom(t28) {
    if (!(t28 >= 0)) return;
    if (!this.ready) {
      this._set("zoom", t28), this._set("scale", void 0);
      const e29 = this._get("extent");
      return void (e29 && (this._set("extent", void 0), this._set("center", e29.center)));
    }
    const e28 = this.constraints?.zoomToScale(t28) ?? 0;
    if (!e28) return void this._set("zoom", -1);
    const i29 = this.viewpoint;
    jt(i29, i29, e28), this.viewpoint = i29, this._set("zoom", this.constraints?.scaleToZoom(this.scale) ?? -1);
  }
  getUserStartupOptions(t28) {
    if (!t28[0] && !t28[1]) return { center: void 0, rotation: void 0, scale: void 0 };
    const { padding: e28, constraints: i29 } = this, s33 = this._get("center"), r31 = this._get("extent"), o31 = this._get("scale"), n32 = this._get("rotation"), a29 = this._get("viewpoint"), c29 = this._get("zoom"), p29 = null != c29 && null != i29 && i29.zoomToScale(c29) || void 0;
    let h20, l23, d21;
    const v6 = a29?.rotation, u18 = a29?.targetGeometry;
    "extent" === u18?.type ? h20 = u18 : "point" === u18?.type && (l23 = u18, d21 = a29?.scale);
    const m26 = r31 ?? h20;
    return { center: s33 ?? l23 ?? m26?.center, rotation: n32 ?? v6, scale: (o31 ?? p29 ?? d21 ?? (m26 && H(m26, [t28[0] - e28.left - e28.right, t28[1] - e28.top - e28.bottom]))) || void 0 };
  }
  startup(t28, e28, i29, s33) {
    const o31 = t28.targetGeometry;
    try {
      this._project(t28, i29);
    } catch (n32) {
      i.getLogger(this).warn(new s2("mapview:startup-projection-error", "projection of initial viewpoint to the view's spatial reference, defaulting to the initial viewpoint.", { center: o31.toJSON(), spatialReference: i29, error: n32 })), t28.targetGeometry = s33 || new _({ x: 0, y: 0, spatialReference: i29 });
    }
    this.constraints?.fit(t28), this._set("state", new f10({ padding: this.padding, size: e28, viewpoint: t28 })), this._set("ready", true);
  }
  teardown() {
    this._set("ready", false);
    const { center: [t28, e28], spatialReference: i29, rotation: s33, scale: r31 } = this.state.paddedViewState, o31 = new _({ x: t28, y: e28, spatialReference: i29 });
    this._set("viewpoint", null), this._set("extent", null), this._set("center", o31), this._set("zoom", -1), this._set("rotation", s33), this._set("scale", r31), this._set("state", null);
  }
  changeSpatialReference(t28) {
    const i29 = this.state.paddedViewState.clone();
    if (null == this._scaleBeforeChangingSpatialReference) this._scaleBeforeChangingSpatialReference = i29.scale;
    else {
      const t29 = i29.viewpoint.clone();
      t29.scale = this._scaleBeforeChangingSpatialReference, i29.viewpoint = t29;
    }
    const s33 = i29.clone(), [o31, n32] = i29.center;
    let a29 = null;
    try {
      a29 = this._project(new _({ x: o31, y: n32, spatialReference: i29.spatialReference }), t28);
    } catch (h20) {
      r6() || i.getLogger(this).warn(new s2("mapview:spatial-reference-change", "could not project the view's center to the new spatial reference", { center: a29?.toJSON(), spatialReference: t28, error: h20 }));
    }
    a29 || (a29 = new _({ x: 0, y: 0, spatialReference: t28 }));
    const p29 = xt(new m5({ targetGeometry: new _(), scale: 0, rotation: 0 }), i29.viewpoint, a29);
    s33.viewpoint = p29;
    try {
      const e28 = 20, r31 = [i29.size[0] / 2, i29.size[1] / 2], o32 = [r31[0] + e28, r31[1]], n33 = i29.toMap([0, 0], o32), { x: a30, y: c29 } = this._project(new _({ x: n33[0], y: n33[1], spatialReference: i29.spatialReference }), t28);
      n33[0] = a30, n33[1] = c29, s33.toScreen(n33, n33);
      const h20 = pt(r31, n33, o32), l23 = Math.hypot(n33[0] - r31[0], n33[1] - r31[1]) / e28;
      !Number.isFinite(l23) || Math.abs(l23) > 4 ? (p29.rotation = 0, p29.targetGeometry = new _({ x: 0, y: 0, spatialReference: t28 })) : (p29.scale *= l23, p29.scale > has("mapview-srswitch-adjust-rotation-scale-threshold") ? p29.rotation = 0 : p29.rotation += Number.isFinite(h20) ? h20 : 0);
    } catch {
    }
    this._get("constraints")?.constrain(p29, void 0), this._get("state").viewpoint = p29;
  }
  resize(t28, e28) {
    if (!this.ready) return;
    const i29 = this.state;
    let s33 = this.state.paddedViewState.viewpoint;
    const r31 = this.state.paddedViewState.size.slice();
    i29.size = [t28, e28], ht(s33, s33, r31, this.state.paddedViewState.size, this.resizeAlign), s33 = this.constraints?.constrain(s33, void 0) ?? s33, this.state.viewpoint = s33;
  }
  toMap(t28) {
    if (!this.ready) return null;
    const e28 = [0, 0], [i29, s33] = this.state.toMap(e28, [t28.x, t28.y]), r31 = this.state.spatialReference;
    return new _({ x: i29, y: s33, spatialReference: r31 });
  }
  toScreen(t28, e28) {
    if (!this.ready) return null;
    const i29 = this._project(t28, this.state.spatialReference), s33 = [i29.x, i29.y];
    return false === e28?.pickClosestTarget || this.state.paddedViewState.wrapMapCoordinate(s33, s33), this.state.toScreen(s33, s33), c5(s33[0], s33[1]);
  }
  _project(t28, e28) {
    const i29 = t28?.targetGeometry || t28;
    if (!e28) return t28;
    if (!i29) return null;
    if (e28.imageCoordinateSystem || i29.spatialReference?.imageCoordinateSystem) return t28;
    if (s7(e28, i29.spatialReference)) return t28;
    const r31 = O2(i29, e28);
    if (!r31) throw new s("mapview:projection-not-possible", "projecting input geometry to target spatial reference returned a null value", { geometry: i29, spatialReference: e28 });
    return V3(t28) ? (t28.targetGeometry = r31, t28) : r31;
  }
};
function V3(t28) {
  return "esri.Viewpoint" === t28?.declaredClass;
}
r([m2({ type: _ })], z2.prototype, "center", null), r([m2()], z2.prototype, "constraints", void 0), r([m2({ type: z })], z2.prototype, "extent", null), r([m2({ value: { top: 0, right: 0, bottom: 0, left: 0 }, cast: (t28) => ({ top: 0, right: 0, bottom: 0, left: 0, ...t28 }) })], z2.prototype, "padding", null), r([m2()], z2.prototype, "ready", void 0), r([m2()], z2.prototype, "resizeAlign", void 0), r([m2({ readOnly: true })], z2.prototype, "resolution", null), r([m2({ type: Number })], z2.prototype, "rotation", null), r([m2({ type: Number })], z2.prototype, "scale", null), r([m2({ readOnly: true })], z2.prototype, "state", void 0), r([m2({ type: m5 })], z2.prototype, "viewpoint", null), r([m2({ readOnly: true })], z2.prototype, "visibleArea", null), r([m2()], z2.prototype, "zoom", null), z2 = r([a("esri.views.2d.ViewStateManager")], z2);

// node_modules/@arcgis/core/views/2d/support/StationaryManager.js
var e14 = 160;
var i21 = class extends b2 {
  constructor() {
    super(...arguments), this._timer = void 0;
  }
  get stationary() {
    return !this._timer;
  }
  flip() {
    this._timestamp = performance.now(), null == this._timer && (this._timer = setInterval(() => {
      performance.now() - this._timestamp >= e14 && this.clear();
    }, e14));
  }
  clear() {
    this._timer && (clearInterval(this._timer), this._timer = void 0);
  }
};
r([m2()], i21.prototype, "_timer", void 0), r([m2()], i21.prototype, "stationary", null), i21 = r([a("esri.views.2d.support.StationaryManager")], i21);

// node_modules/@arcgis/core/views/Viewport2DBaseMixin.js
var d10 = (d21) => {
  let h20 = class extends d21 {
    constructor(...t28) {
      super(...t28), this.fullOpacity = 1, this.stateManager = new z2({ constraints: new f11({ view: this }) }), this.stationaryManager = new i21(), this.mapViewNavigation = null, this.renderingOptions = { samplingMode: "dynamic", edgeLabelsVisible: false, labelsAnimationTime: 0, labelCollisionsEnabled: false }, this.frameTask = new h10(this), this.viewEvents = new c12(this), this.padding = { top: 0, right: 0, bottom: 0, left: 0 }, this.addHandles([l3(() => this.viewpoint, () => this.stationaryManager.flip(), U)]);
    }
    get constraintsInfo() {
      return { lods: null, spatialReference: null };
    }
    get extent() {
      return this.stateManager?.extent ?? null;
    }
    set extent(t28) {
      this.stateManager.extent = t28;
    }
    get state() {
      return this.stateManager.state;
    }
    get interacting() {
      return false;
    }
    get stationary() {
      return !this.animation && this.stationaryManager.stationary;
    }
    set animation(t28) {
      const e28 = this._get("animation");
      if (t28 === e28) return;
      if (e28 && e28.stop(), t28 !== this.animationManager.animation && this.animationManager.stop(), !t28 || t28.isFulfilled()) return void this._set("animation", null);
      this._set("animation", t28);
      const i29 = () => {
        this.destroyed || t28 === this._get("animation") && (this._set("animation", null), this.frameTask?.requestFrame());
      };
      t28.when(i29, i29);
    }
    get constraints() {
      return this.stateManager?.constraints;
    }
    set constraints(t28) {
      t28.view = this;
      const e28 = this.stateManager.constraints;
      this.stateManager.constraints = t28, e28?.destroy();
    }
    get padding() {
      return this.stateManager?.padding;
    }
    set padding(t28) {
      this.stateManager && (this.stateManager.padding = t28);
    }
    get resizeAlign() {
      return this.stateManager.resizeAlign;
    }
    set resizeAlign(t28) {
      this.stateManager.resizeAlign = t28;
    }
    get rotation() {
      return this.stateManager.rotation ?? 0;
    }
    set rotation(t28) {
      const { rotationEnabled: e28 } = this.constraints;
      this.constraints.rotationEnabled = true, this.stateManager.rotation = t28, this.constraints.rotationEnabled = e28;
    }
    get viewpoint() {
      return this.stateManager.viewpoint ?? null;
    }
    set viewpoint(t28) {
      this.stateManager.viewpoint = t28, this.frameTask.requestFrame();
    }
  };
  return r([m2({ readOnly: true })], h20.prototype, "animationManager", void 0), r([m2({ readOnly: true })], h20.prototype, "fullOpacity", void 0), r([m2()], h20.prototype, "stateManager", void 0), r([m2()], h20.prototype, "constraintsInfo", null), r([m2()], h20.prototype, "extent", null), r([m2({ readOnly: true })], h20.prototype, "state", null), r([m2({ readOnly: true })], h20.prototype, "mapViewNavigation", void 0), r([m2()], h20.prototype, "renderingOptions", void 0), r([m2({ readOnly: true })], h20.prototype, "interacting", null), r([m2()], h20.prototype, "stationary", null), r([m2()], h20.prototype, "animation", null), r([m2({ type: f11 })], h20.prototype, "constraints", null), r([m2()], h20.prototype, "padding", null), r([m2()], h20.prototype, "resizeAlign", null), r([m2()], h20.prototype, "rotation", null), r([m2({ readOnly: true })], h20.prototype, "viewEvents", void 0), r([m2({ type: m5 })], h20.prototype, "viewpoint", null), h20 = r([a("esri.views.Viewport2DBaseMixin")], h20), h20;
};

// node_modules/@arcgis/core/views/ViewAnimation.js
var p17 = class extends m4 {
  constructor(t28) {
    super(t28), this.state = "running", this.target = null, this._resolver = null;
  }
  initialize() {
    this._resolver = L2(), this.addResolvingPromise(this._resolver.promise);
  }
  get done() {
    return "finished" === this.state || "stopped" === this.state;
  }
  stop() {
    "stopped" !== this.state && "finished" !== this.state && (this._set("state", "stopped"), this._resolver?.reject(new s("view:animation-stopped", "ViewAnimation stopped")));
  }
  finish() {
    "stopped" !== this.state && "finished" !== this.state && (this._set("state", "finished"), this._resolver?.resolve());
  }
  update(t28, e28) {
    e28 || (e28 = S(t28) ? "waiting-for-target" : "running"), this._set("target", t28), this._set("state", e28);
  }
};
r([m2({ readOnly: true })], p17.prototype, "done", null), r([m2({ readOnly: true, type: String })], p17.prototype, "state", void 0), r([m2()], p17.prototype, "target", void 0), p17 = r([a("esri.views.ViewAnimation")], p17), function(t28) {
  t28.State = { RUNNING: "running", STOPPED: "stopped", FINISHED: "finished", WAITING_FOR_TARGET: "waiting-for-target" };
}(p17 || (p17 = {}));
var a12 = p17;

// node_modules/@arcgis/core/views/2d/GoToManager.js
var h11 = class extends b2 {
  constructor(t28) {
    super(t28), this._gotoTask = null;
  }
  destroy() {
    this._gotoTask = null;
  }
  async goTo(t28, e28) {
    if (!t28) return void i.getLogger(this).error("#goTo()", "target cannot be null or undefined");
    const i29 = new a12();
    this.view.animation = i29, await j(() => this.view.ready, e28);
    const s33 = { ...e28, animate: e28?.animate ?? !o10(), animationMode: e28?.animationMode ?? "auto" }, { extent: a29, spatialReference: c29, size: m26, viewpoint: h20, constraints: g16, padding: w8, allLayerViews: d21 } = this.view, u18 = Y(t28, { extent: a29, spatialReference: c29, size: m26, viewpoint: h20, constraints: g16, padding: w8, allLayerViews: d21, pickClosestTarget: e28?.pickClosestTarget ?? true });
    return i29?.update(u18), this._gotoTask = {}, s33.animate ? this._gotoAnimated(u18, s33) : this._gotoImmediate(u18, s33);
  }
  _gotoImmediate(t28, o31) {
    const e28 = this._gotoTask, r31 = this.view.animation, a29 = t28.then((t29) => {
      if (s3(o31), e28 !== this._gotoTask) throw new s("view:goto-interrupted", "Goto was interrupted");
      this.view.viewpoint = r31.target = t29, r31.finish();
    });
    return this._cancellableGoTo(e28, r31, a29, o31);
  }
  _gotoAnimated(t28, o31) {
    const e28 = this._gotoTask, r31 = this.view.animation;
    if (!r31) return Promise.resolve();
    const a29 = t28.then((t29) => {
      if (s3(o31), e28 !== this._gotoTask) throw new s("view:goto-interrupted", "Goto was interrupted");
      return r31.update(t29), this.view.animationManager.animate(r31, this.view.viewpoint, o31), r31.when().then(() => {
      }, () => {
      });
    });
    return this._cancellableGoTo(e28, r31, a29, o31);
  }
  _cancellableGoTo(t28, o31, e28, i29) {
    const r31 = () => t28 === this._gotoTask;
    return h(e28, i29).finally(() => {
      r31() && (o31.done || o31.stop());
    });
  }
};
r([m2({ constructOnly: true })], h11.prototype, "view", void 0), h11 = r([a("esri.views.2d.GoToManager")], h11);

// node_modules/@arcgis/core/views/input/handlers/support.js
function r19(r31, e28) {
  switch (e28) {
    case "primary":
      return "touch" === r31.pointerType || 0 === r31.button;
    case "secondary":
      return "touch" !== r31.pointerType && 2 === r31.button;
    case "tertiary":
      return "touch" !== r31.pointerType && 1 === r31.button;
  }
}
function e15(e28, t28) {
  return t28.some((t29) => r19(e28, t29));
}
function n21(r31, { dragPrimary: e28, dragSecondary: t28, dragTertiary: n32 }) {
  return [{ key: "primary", value: e28 }, { key: "secondary", value: t28 }, { key: "tertiary", value: n32 }].filter((e29) => e29.value === r31).map((r32) => r32.key);
}

// node_modules/@arcgis/core/views/2d/input/handlers/DoubleClickZoom.js
var a13 = class extends t8 {
  constructor(t28, i29) {
    super(true), this._view = t28, this.registerIncoming("double-click", i29, (t29) => this._handleDoubleClick(t29, i29));
  }
  _handleDoubleClick(t28, a29) {
    r19(t28.data, "primary") && (t28.stopPropagation(), a29 ? this._view.mapViewNavigation.zoomOut([t28.data.x, t28.data.y]) : this._view.mapViewNavigation.zoomIn([t28.data.x, t28.data.y]));
  }
};

// node_modules/@arcgis/core/views/2d/input/handlers/DoubleTapDragZoom.js
var e16 = class extends t8 {
  constructor(t28, e28, a29) {
    super(true), this.view = t28, this.pointerType = e28, this.registerIncoming("double-tap-drag", a29, (t29) => this._handleDoubleTapDrag(t29));
  }
  _handleDoubleTapDrag(t28) {
    const { data: e28 } = t28, { pointerType: a29 } = e28;
    if (a29 !== this.pointerType) return;
    t28.stopPropagation();
    const { action: s33, delta: i29 } = e28, { view: r31 } = this, { mapViewNavigation: n32 } = r31;
    switch (s33) {
      case "begin": {
        const { scale: t29 } = r31;
        this._startScale = t29, this._currentScale = t29, this._previousDelta = i29, n32.begin();
        break;
      }
      case "update": {
        if (this._previousDelta.y === i29.y) return;
        this._previousDelta = i29;
        const t29 = 1.015 ** i29.y, e29 = this._startScale * t29, a30 = e29 / this._currentScale;
        n32.setViewpointImmediate(a30), this._currentScale = e29;
        break;
      }
      case "end": {
        const { constraints: t29 } = r31, { effectiveLODs: e29, snapToZoom: a30 } = t29;
        if (!a30 || !e29) return void n32.end();
        const s34 = t29.snapScale(this._currentScale), o31 = (i29.y > 0 ? Math.max(s34, t29.snapToPreviousScale(this._startScale)) : Math.min(s34, t29.snapToNextScale(this._startScale))) / this._currentScale;
        n32.zoom(o31).then(() => {
          n32.end();
        });
        break;
      }
    }
  }
};

// node_modules/@arcgis/core/views/input/DragEventSeparator.js
var t15 = class {
  constructor(t28) {
    this._callbacks = t28, this._currentCount = 0, this._callbacks.condition || (this._callbacks.condition = () => true);
  }
  handle(t28) {
    const s33 = t28.data, i29 = s33.pointers.size;
    switch (s33.action) {
      case "start":
        this._currentCount = i29, this._emitStart(t28);
        break;
      case "added":
        this._emitEnd(this._previousEvent), this._currentCount = i29, this._emitStart(t28);
        break;
      case "update":
        this._emitUpdate(t28);
        break;
      case "removed":
        this._startEvent && this._emitEnd(this._previousEvent), this._currentCount = i29, this._emitStart(t28);
        break;
      case "end":
        this._emitEnd(t28), this._currentCount = 0;
    }
    this._previousEvent = t28;
  }
  _emitStart(t28) {
    this._startEvent = t28, this._callbacks.condition?.(this._currentCount, t28) && this._callbacks.start(this._currentCount, t28, this._startEvent);
  }
  _emitUpdate(t28) {
    this._callbacks.condition?.(this._currentCount, t28) && this._callbacks.update(this._currentCount, t28, this._startEvent);
  }
  _emitEnd(t28) {
    this._callbacks.condition?.(this._currentCount, t28) && this._callbacks.end(this._currentCount, t28, this._startEvent), this._startEvent = null;
  }
};

// node_modules/@arcgis/core/views/2d/input/handlers/DragPan.js
var n22 = class extends t8 {
  constructor(t28, i29, a29) {
    super(true), this.view = t28, this.pointerActions = i29, this.registerIncoming("drag", a29, (t29) => this._handleDrag(t29)), this.registerIncoming("pointer-down", () => this.stopMomentumNavigation());
  }
  onInstall(i29) {
    super.onInstall(i29), this._dragEventSeparator = new t15({ start: (t28, i30) => {
      this.view.mapViewNavigation.pan.begin(this.view, i30.data), i30.stopPropagation();
    }, update: (t28, i30) => {
      this.view.mapViewNavigation.pan.update(this.view, i30.data), i30.stopPropagation();
    }, end: (t28, i30) => {
      this.view.mapViewNavigation.pan.end(this.view, i30.data), i30.stopPropagation();
    }, condition: (t28, i30) => 1 === t28 && e15(i30.data, this.pointerActions) });
  }
  _handleDrag(t28) {
    const i29 = this.view.mapViewNavigation;
    i29.pinch.zoomMomentum || i29.pinch.rotateMomentum ? this.stopMomentumNavigation() : this._dragEventSeparator.handle(t28);
  }
  stopMomentumNavigation() {
    this.view.mapViewNavigation.pan.stopMomentumNavigation();
  }
};

// node_modules/@arcgis/core/views/2d/input/handlers/DragRotate.js
var o17 = class extends t8 {
  constructor(a29, o31, r31) {
    super(true), this._view = a29, this.pointerActions = o31;
    const e28 = this._view.mapViewNavigation;
    this._dragEventSeparator = new t15({ start: (t28, a30) => {
      e28.rotate.begin(this._view, a30.data), a30.stopPropagation();
    }, update: (t28, a30) => {
      e28.rotate.update(this._view, a30.data), a30.stopPropagation();
    }, end: (t28, a30) => {
      e28.rotate.end(), a30.stopPropagation();
    }, condition: (t28, a30) => 1 === t28 && e15(a30.data, this.pointerActions) }), this.registerIncoming("drag", r31, (t28) => this._dragEventSeparator.handle(t28));
  }
};

// node_modules/@arcgis/core/views/navigation/gamepadAndKeyboardUtils.js
function n23(t28) {
  let n32 = t28 * t28;
  return t28 < 0 && (n32 *= -1), n32;
}
function a14(t28) {
  return t28.translation[0] = 0, t28.translation[1] = 0, t28.translation[2] = 0, t28.heading = 0, t28.tilt = 0, t28;
}
function i22(a29, i29, o31) {
  const s33 = o31, e28 = a29.state, r31 = a29.device, l23 = "forward-down" === i29.tiltDirection ? 1 : -1, c29 = 1;
  return "standard" === r31.deviceType ? (s33.translation[0] = n23(e28.axes[0]), s33.translation[1] = n23(e28.axes[1]), s33.translation[2] = n23(e28.buttons[7]) - n23(e28.buttons[6]), s33.heading = n23(e28.axes[2]), s33.tilt = n23(e28.axes[3])) : "spacemouse" === r31.deviceType && (s33.translation[0] = 1.2 * n23(e28.axes[0]), s33.translation[1] = 1.2 * n23(e28.axes[1]), s33.translation[2] = 2 * -n23(e28.axes[2]), s33.heading = 1.2 * n23(e28.axes[5]), s33.tilt = 1.2 * n23(e28.axes[3])), s33.tilt *= l23, g3(s33.translation, s33.translation, c29), s33;
}
function s20(t28) {
  return 0 === t28.translation[0] && 0 === t28.translation[1] && 0 === t28.translation[2] && 0 === t28.heading && 0 === t28.tilt && 0 === t28.zoom;
}

// node_modules/@arcgis/core/views/2d/input/handlers/GamepadNavigation.js
var m17 = class extends t8 {
  constructor(e28) {
    super(true), this._view = e28, this._frameTask = null, this._watchHandles = new r3(), this._currentDevice = null, this._transformation = { translation: [0, 0, 0], heading: 0, tilt: 0, zoom: 0 }, this._handle = this.registerIncoming("gamepad", (t28) => this._handleGamePadEvent(t28)), this._handle.pause();
  }
  onInstall(t28) {
    super.onInstall(t28), this._watchHandles.add([l3(() => this._view.navigation.gamepad?.enabled, (t29) => {
      t29 ? (this._handle.resume(), this._frameTask || (this._frameTask = F({ update: (t30) => this._frameUpdate(t30.deltaTime) }))) : (this._handle.pause(), this._frameTask && (this._frameTask.remove(), this._frameTask = null));
    }, h2)]);
  }
  onUninstall() {
    this._watchHandles.removeAll(), this._frameTask && (this._frameTask.remove(), this._frameTask = null), super.onUninstall();
  }
  _handleGamePadEvent(t28) {
    const e28 = this._view.navigation.gamepad.device;
    e28 && t28.data.device !== e28 || this._currentDevice && this._currentDevice !== t28.data.device || ("end" === t28.data.action ? (this._currentDevice = null, a14(this._transformation)) : (this._currentDevice = t28.data.device, i22(t28.data, this._view.navigation.gamepad, this._transformation)), this._frameTask?.resume());
  }
  _frameUpdate(t28) {
    const e28 = this._transformation;
    if (s20(e28)) return void this._frameTask?.pause();
    const i29 = this._view.viewpoint.clone(), a29 = this._view.navigation.gamepad.velocityFactor, r31 = _8 * a29 * t28;
    kt(i29, i29, [e28.translation[0] * r31, -e28.translation[1] * r31]);
    const o31 = 1 + e28.translation[2] * c15 * t28, h20 = this._view.constraints.rotationEnabled ? -e28.heading * d11 * t28 : 0, m26 = this._view.size, v6 = [m26[0] / 2, m26[1]];
    Gt(i29, i29, o31, h20, v6, m26);
    const p29 = this._view.constraints.constrain(i29, this._view.viewpoint);
    this._view.viewpoint = p29;
  }
};
var d11 = 0.06;
var _8 = 0.7;
var c15 = 6e-4;

// node_modules/@arcgis/core/views/input/VisibilityChange.js
function i23(i29) {
  const t28 = () => i29("visible" === document.visibilityState);
  return document.addEventListener("visibilitychange", t28), e(() => document.removeEventListener("visibilitychange", t28));
}

// node_modules/@arcgis/core/views/2d/input/handlers/KeyPan.js
var e17 = class extends t8 {
  constructor(i29, e28, s33) {
    super(true), this.view = i29, this.keys = e28, this._isSticky = false, this._pressedKeys = /* @__PURE__ */ new Set(), this._timeout = void 0, this._currentDirection = void 0, this._stickyKeyDuration = 200, this._handleKey = (i30) => {
      const t28 = this._keyMap[i30.data.key];
      if (i30.modifiers.has("Meta") || i30.modifiers.has("Control")) return void this._stopMovement();
      if (null == t28) return;
      i30.stopPropagation(), i30.preventDefault();
      const e29 = "key-down" === i30.type;
      if (this._pressedKeys[e29 ? "add" : "delete"](t28), e29) {
        if (this._direction === t28) return;
        this._direction = t28, this._isSticky = false, this._setTimeout(() => {
          this._isSticky && this._handlePopKey();
        });
      } else {
        const i31 = void 0 === this._timeout, t29 = this._pressedKeys.size > 0;
        i31 || t29 ? this._handlePopKey() : this._isSticky = true;
      }
    }, this._handlePopKey = () => {
      this._direction = Array.from(this._pressedKeys).pop(), null == this._direction && this._stopMovement();
    }, this._stopMovement = () => {
      this._isSticky = false, this._direction = void 0, this._pressedKeys.clear(), this._setTimeout(void 0);
    }, this._keyMap = { [e28.left]: "left", [e28.right]: "right", [e28.up]: "up", [e28.down]: "down" }, this.registerIncoming("key-down", s33, this._handleKey), this.registerIncoming("key-up", s33, this._handleKey), this.registerIncoming("blur", s33, this._stopMovement), this._visibilityHandle = i23((i30) => i30 ? null : this._stopMovement());
  }
  onUninstall() {
    this._stopMovement(), this._visibilityHandle?.remove();
  }
  get _direction() {
    return this._currentDirection;
  }
  set _direction(i29) {
    const t28 = null != this._currentDirection;
    if (null != i29) {
      if (t28 || this.view.mapViewNavigation.begin(), this._currentDirection !== i29) switch (i29) {
        case "left":
          this.view.mapViewNavigation.continuousPanLeft();
          break;
        case "right":
          this.view.mapViewNavigation.continuousPanRight();
          break;
        case "up":
          this.view.mapViewNavigation.continuousPanUp();
          break;
        case "down":
          this.view.mapViewNavigation.continuousPanDown();
      }
    } else t28 && this.view.mapViewNavigation.stop();
    this._currentDirection = i29;
  }
  _setTimeout(i29) {
    clearTimeout(this._timeout), this._timeout = void 0 === i29 ? void 0 : setTimeout(() => {
      this._timeout = void 0, i29();
    }, this._stickyKeyDuration);
  }
};

// node_modules/@arcgis/core/views/2d/input/handlers/KeyRotate.js
var t16 = class extends t8 {
  constructor(e28, t28, s33) {
    super(true), this.view = e28, this.keys = t28, this._keyToDirection = /* @__PURE__ */ new Map(), this._pressed = false, this._addKeysMapping(t28), this.registerIncoming("key-down", s33, (e29) => this._handleKeyDown(e29)), this.registerIncoming("key-up", s33, (e29) => this._handleKeyUp(e29)), this.registerIncoming("blur", s33, () => this._handleStop()), this._visibilityHandle = i23((e29) => e29 ? null : this._handleStop());
  }
  onUninstall() {
    this._visibilityHandle?.remove(), this._handleStop();
  }
  _addKeysMapping(e28) {
    this._addKeyMapping(e28.clockwise, "clockwise"), this._addKeyMapping(e28.counterClockwise, "counterClockwise"), this._addKeyMapping(e28.reset, "reset");
  }
  _addKeyMapping(e28, i29) {
    for (const t28 of e28) this._keyToDirection.set(t28, i29);
  }
  _handleKeyDown(e28) {
    e28.data.repeat || this._handleKey(e28, true);
  }
  _handleKeyUp(e28) {
    this._handleKey(e28, false);
  }
  _handleStop() {
    this._pressed && (this._pressed = false, this.view.mapViewNavigation.stop());
  }
  _handleKey(e28, i29) {
    const t28 = e28.modifiers;
    if (t28.size > 0 && !t28.has("Shift") || !this.view.constraints.rotationEnabled) return;
    const s33 = this._keyToDirection.get(e28.data.key);
    if (this._pressed = null != s33, this._pressed) {
      if (e28.preventDefault(), i29) switch (this.view.mapViewNavigation.begin(), s33) {
        case "clockwise":
          this.view.mapViewNavigation.continuousRotateClockwise();
          break;
        case "counterClockwise":
          this.view.mapViewNavigation.continuousRotateCounterclockwise();
          break;
        case "reset":
          this.view.mapViewNavigation.resetRotation();
      }
      else this._pressed = false, this.view.mapViewNavigation.stop();
      e28.stopPropagation();
    }
  }
};

// node_modules/@arcgis/core/views/2d/input/handlers/KeyZoom.js
var t17;
!function(o31) {
  o31[o31.IN = 0] = "IN", o31[o31.OUT = 1] = "OUT";
}(t17 || (t17 = {}));
var e18 = class extends t8 {
  constructor(o31, e28, i29) {
    super(true), this.view = o31, this.keys = e28, this._keysToZoomAction = {}, this.registerIncoming("key-down", i29, (o32) => this._handleKeyDown(o32)), e28.zoomIn.forEach((o32) => this._keysToZoomAction[o32] = t17.IN), e28.zoomOut.forEach((o32) => this._keysToZoomAction[o32] = t17.OUT);
  }
  _handleKeyDown(o31) {
    this._handleKey(o31);
  }
  _handleKey(o31) {
    const e28 = o31.modifiers;
    if (e28.size > 0 && !e28.has("Shift")) return;
    const { key: i29 } = o31.data;
    if (!(i29 in this._keysToZoomAction)) return;
    const n32 = this._keysToZoomAction[i29], { mapViewNavigation: s33 } = this.view;
    let r31 = null;
    switch (n32) {
      case t17.IN:
        r31 = s33.zoomIn();
        break;
      case t17.OUT:
        r31 = s33.zoomOut();
        break;
      default:
        return;
    }
    s33.begin(), r31.then(() => s33.end()), o31.stopPropagation();
  }
};

// node_modules/@arcgis/core/views/2d/input/handlers/MouseWheelZoom.js
var t18 = 0.6;
var o18 = class extends t8 {
  constructor(e28, t28) {
    super(true), this._view = e28, this._canZoom = true, this.registerIncoming("mouse-wheel", t28, (e29) => this._handleMouseWheel(e29));
  }
  _handleMouseWheel(e28) {
    if ("zoom" !== this._view.navigation.actionMap.mouseWheel) return;
    if (e28.preventDefault(), e28.stopPropagation(), !this._canZoom) return;
    const o31 = this._view.mapViewNavigation, { x: i29, y: n32, deltaY: s33 } = e28.data, a29 = 1 / t18 ** (1 / 60 * s33), h20 = o31.zoom(a29, [i29, n32]);
    h20 && (this._canZoom = false, h20.catch(() => {
    }).then(() => {
      this._canZoom = true, o31.end();
    }));
  }
};

// node_modules/@arcgis/core/views/2d/input/handlers/PinchAction.js
var a15 = class extends t8 {
  constructor(i29) {
    super(true), this.view = i29, this.registerIncoming("drag", (t28) => this._handleDrag(t28)), this.registerIncoming("pointer-down", () => this._stopMomentumNavigation());
    const a29 = this.view.mapViewNavigation;
    this._dragEventSeparator = new t15({ start: (t28, i30) => {
      a29.pinch.begin(this.view, i30.data), i30.stopPropagation();
    }, update: (t28, i30) => {
      a29.pinch.update(this.view, i30.data), i30.stopPropagation();
    }, end: (t28, i30) => {
      a29.pinch.end(this.view), i30.stopPropagation();
    }, condition: (t28) => t28 >= 2 });
  }
  _handleDrag(t28) {
    this._dragEventSeparator.handle(t28);
  }
  _stopMomentumNavigation() {
    this.view.mapViewNavigation.pinch.stopMomentumNavigation();
  }
};

// node_modules/@arcgis/core/views/input/gamepad/GamepadState.js
function t19(t28) {
  const n32 = t28.native;
  return n32 ? { buttons: n32.buttons.map((t29) => t29.pressed ? t29.value || 1 : 0), axes: n32.axes.map((n33) => s21(n33, t28.axisThreshold)) } : { buttons: [], axes: [] };
}
function n24(t28, n32) {
  if (t28.axes.length !== n32.axes.length) return false;
  if (t28.buttons.length !== n32.buttons.length) return false;
  for (let e28 = 0; e28 < t28.axes.length; e28++) if (t28.axes[e28] !== n32.axes[e28]) return false;
  for (let e28 = 0; e28 < t28.buttons.length; e28++) if (t28.buttons[e28] !== n32.buttons[e28]) return false;
  return true;
}
function e19(t28) {
  for (let n32 = 0; n32 < t28.axes.length; n32++) if (0 !== t28.axes[n32]) return false;
  for (let n32 = 0; n32 < t28.buttons.length; n32++) if (0 !== t28.buttons[n32]) return false;
  return true;
}
function s21(t28, n32) {
  const e28 = Math.abs(t28);
  return e28 < n32 ? 0 : Math.sign(t28) * (e28 - n32) / (1 - n32);
}

// node_modules/@arcgis/core/views/input/gamepad/GamepadSource.js
var a16 = class {
  constructor(e28, t28) {
    this._element = e28, this._input = t28, this._hasEventListeners = false, this._onConnectGamepad = (e29) => {
      this._connectGamepad(e29.gamepad);
    }, this._onDisconnectGamepad = (e29) => {
      const t29 = e29.gamepad, n33 = t29.index, i30 = this._inputDevices[n33];
      i30 && (this._emitGamepadEvent(t29, t19(i30), false), this._inputDevices.splice(n33, 1), this._latestUpdate.splice(n33, 1), this._input.gamepad.devices.remove(i30), this.ensurePollingState());
    }, this._frameTask = null, this._latestUpdate = new Array(), this._inputDevices = new Array(), this._callback = null;
    const n32 = "getGamepads" in window.navigator, i29 = window.isSecureContext;
    this.supported = n32 && i29, this.supported && (d12((e29) => this._connectGamepad(e29)), window.addEventListener("gamepadconnected", this._onConnectGamepad), window.addEventListener("gamepaddisconnected", this._onDisconnectGamepad), this.ensurePollingState());
  }
  destroy() {
    this.hasEventListeners = false, this.supported && (window.removeEventListener("gamepadconnected", this._onConnectGamepad), window.removeEventListener("gamepaddisconnected", this._onDisconnectGamepad));
  }
  set hasEventListeners(e28) {
    this._hasEventListeners !== e28 && (this._hasEventListeners = e28, this.ensurePollingState());
  }
  get _eventsEnabled() {
    return this.supported && this._inputDevices.length > 0 && this._hasEventListeners;
  }
  set onEvent(e28) {
    this._callback = e28;
  }
  _connectGamepad(e28) {
    const s33 = new o15(e28);
    "unknown" !== s33.deviceType && (this._inputDevices[e28.index] = s33, this._input.gamepad.devices.add(s33)), this.ensurePollingState();
  }
  ensurePollingState() {
    this._eventsEnabled ? this._startPolling() : this._stopPolling();
  }
  _startPolling() {
    null == this._frameTask && (this._frameTask = F({ update: () => this._readGamepadState() }));
  }
  _stopPolling() {
    null != this._frameTask && (this._frameTask.remove(), this._frameTask = null, this._latestUpdate = new Array());
  }
  _readGamepadState() {
    const e28 = document.hasFocus(), t28 = this._element.contains(document.activeElement), a29 = "document" === this._input.gamepad.enabledFocusMode && !e28 || "view" === this._input.gamepad.enabledFocusMode && !t28;
    d12((e29) => {
      const t29 = this._inputDevices[e29.index];
      if (!t29) return;
      const o31 = this._latestUpdate[e29.index], d21 = t19(t29), c29 = a29 || e19(d21);
      if (o31) {
        if (o31.timestamp === e29.timestamp) return;
        if (!o31.active && c29) return;
        if (n24(o31.state, d21)) return;
      }
      this._emitGamepadEvent(e29, d21, !c29);
    });
  }
  _emitGamepadEvent(e28, t28, s33) {
    const n32 = this._latestUpdate[e28.index], i29 = n32 && n32.active;
    if (!i29 && !s33) return;
    const a29 = !i29 && s33 ? "start" : i29 && s33 ? "update" : "end";
    this._latestUpdate[e28.index] = { timestamp: e28.timestamp, state: t28, active: s33 }, this._callback && this._callback({ device: this._inputDevices[e28.index], state: t28, action: a29 });
  }
};
function o19(e28) {
  if (!e28) return false;
  if (!e28.connected) return false;
  for (let t28 = 0; t28 < e28.axes.length; t28++) if (isNaN(e28.axes[t28])) return false;
  return true;
}
function d12(e28) {
  for (const t28 of navigator.getGamepads()) o19(t28) && e28(t28);
}

// node_modules/@arcgis/core/views/input/BrowserEventSource.js
var i24 = has("edge");
var a17 = has("chrome");
var o20 = has("ff");
var s22 = has("safari");
var r20 = "esri-view-surface";
var h12 = { touchNone: `${r20}--touch-none`, touchPan: `${r20}--touch-pan` };
var _l = class _l {
  constructor(e28, n32) {
    this._active = {}, this._callback = () => {
    }, this._activePointerCaptures = /* @__PURE__ */ new Set(), this._keyDownState = /* @__PURE__ */ new Set(), this._eventId = 1, this._browserTouchPanningEnabled = false, this._element = e28, e28.getAttribute("tabindex") || e28.setAttribute("tabindex", "0"), this._eventHandlers = { "key-down": this._handleKey, "key-up": this._handleKey, "pointer-down": this._handlePointer, "pointer-move": this._handlePointerPreventDefault, "pointer-up": this._handlePointerPreventDefault, "pointer-enter": this._handlePointer, "pointer-leave": this._handlePointer, "pointer-cancel": this._handlePointer, "mouse-wheel": this._handleMouseWheel, "pointer-capture-lost": this._handlePointerCaptureLost }, this._updateTouchAction(), this._element.addEventListener("keydown", this._preventAltKeyDefault), this._gamepadSource = new a16(e28, n32), this._gamepadSource.onEvent = (e29) => this._callback("gamepad", e29);
  }
  destroy() {
    this._callback = () => {
    }, this.activeEvents = null, this._activePointerCaptures.forEach((e28) => this._releasePointerCaptureSafe(e28)), this._activePointerCaptures.clear(), this._gamepadSource = u2(this._gamepadSource), this._removeTouchAction(), this._element.removeEventListener("keydown", this._preventAltKeyDefault);
  }
  get browserTouchPanningEnabled() {
    return this._browserTouchPanningEnabled;
  }
  set browserTouchPanningEnabled(e28) {
    this._browserTouchPanningEnabled = e28, this._updateTouchAction(), this._updateTouchEventHandling();
  }
  set onEventReceived(e28) {
    this._callback = e28;
  }
  set activeEvents(e28) {
    for (const t28 in this._active) if (!e28 || !e28.has(t28)) {
      const e29 = this._active[t28];
      this._element.removeEventListener(c16[t28], e29), delete this._active[t28];
    }
    e28 && e28.forEach((e29) => {
      if (!this._active[e29] && c16[e29]) {
        const t28 = (this._eventHandlers[e29] || this._handleDefault).bind(this, e29);
        this._element.addEventListener(c16[e29], t28), this._active[e29] = t28;
      }
    }), this._gamepadSource && (this._gamepadSource.hasEventListeners = e28?.has("gamepad") ?? false);
  }
  setPointerCapture(e28, t28) {
    t28 ? this._setPointerCaptureSafe(e28.pointerId) : (this._releasePointerCaptureSafe(e28.pointerId), this._activePointerCaptures.delete(e28.pointerId));
  }
  _updateTouchAction() {
    this._element.classList.remove(this._browserTouchPanningEnabled ? h12.touchNone : h12.touchPan), this._element.classList.add(this._browserTouchPanningEnabled ? h12.touchPan : h12.touchNone);
  }
  _updateTouchEventHandling() {
    this._browserTouchPanningEnabled ? this._element.addEventListener("touchmove", this._preventMultiTouchPanning) : this._element.removeEventListener("touchmove", this._preventMultiTouchPanning);
  }
  _removeTouchAction() {
    this._element.classList.remove(h12.touchNone), this._element.classList.remove(h12.touchPan), this._element.removeEventListener("touchmove", this._preventMultiTouchPanning);
  }
  _setPointerCaptureSafe(e28) {
    try {
      this._element.setPointerCapture(e28), this._activePointerCaptures.add(e28);
    } catch {
    }
  }
  _releasePointerCaptureSafe(e28) {
    try {
      if (this._element.hasPointerCapture && !this._element.hasPointerCapture(e28)) return;
      this._element.releasePointerCapture(e28);
    } catch (t28) {
    }
  }
  _updateNormalizedPointerLikeEvent(e28, t28) {
    const i29 = i9(this._element, e28);
    return _l.test.disableSubpixelCoordinates && (i29.x = Math.round(i29.x), i29.y = Math.round(i29.y)), t28.x = i29.x, t28.y = i29.y, t28;
  }
  _handleKey(e28, t28) {
    const { key: n32 } = t28;
    n32 && "key-up" === e28 && this._keyDownState.delete(n32);
    const i29 = { native: t28, key: n32, repeat: !!n32 && this._keyDownState.has(n32) };
    n32 && "key-down" === e28 && this._keyDownState.add(i29.key), this._callback(e28, i29);
  }
  _handlePointer(e28, t28) {
    const n32 = this._updateNormalizedPointerLikeEvent(t28, { native: t28, x: 0, y: 0, pointerType: t28.pointerType, button: t28.button, buttons: t28.buttons, eventId: this._eventId++ });
    this._callback(e28, n32);
  }
  _handlePointerPreventDefault(e28, t28) {
    const n32 = this._updateNormalizedPointerLikeEvent(t28, { native: t28, x: 0, y: 0, pointerType: t28.pointerType, button: t28.button, buttons: t28.buttons, eventId: this._eventId++ });
    t28.preventDefault(), this._callback(e28, n32);
  }
  _getDeltaFromTrackpadOrMouseWheel(e28) {
    return e28.shiftKey && has("mac") && 0 === e28.deltaY ? e28.deltaX : e28.deltaY;
  }
  _handleMouseWheel(e28, t28) {
    let n32 = this._getDeltaFromTrackpadOrMouseWheel(t28);
    switch (t28.deltaMode) {
      case 0:
        i24 && (n32 = n32 / document.documentElement.clientHeight * 600);
        break;
      case 1:
        n32 *= 30;
        break;
      case 2:
        n32 *= 900;
    }
    i24 ? n32 *= 0.7 : a17 || s22 ? n32 *= 0.6 : o20 && (n32 *= 1.375);
    const r31 = 100, h20 = Math.abs(n32);
    if (h20 > r31) {
      n32 = n32 / h20 * 200 / (1 + Math.exp(-0.02 * (h20 - r31)));
    }
    const l23 = this._updateNormalizedPointerLikeEvent(t28, { native: t28, x: 0, y: 0, deltaY: n32 });
    this._callback(e28, l23);
  }
  _handlePointerCaptureLost(e28, t28) {
    this._activePointerCaptures.delete(t28.pointerId), this._handleDefault(e28, t28);
  }
  _handleDefault(e28, t28) {
    const n32 = { native: t28 };
    t28.preventDefault(), this._callback(e28, n32);
  }
  _preventAltKeyDefault(e28) {
    "Alt" === e28.key && e28.preventDefault();
  }
  _preventMultiTouchPanning(e28) {
    e28.touches.length > 1 && e28.preventDefault();
  }
};
_l.test = { disableSubpixelCoordinates: false };
var l17 = _l;
var c16 = { "key-down": "keydown", "key-up": "keyup", "pointer-down": "pointerdown", "pointer-up": "pointerup", "pointer-move": "pointermove", "mouse-wheel": "wheel", "pointer-capture-got": "gotpointercapture", "pointer-capture-lost": "lostpointercapture", "context-menu": "contextmenu", "pointer-enter": "pointerenter", "pointer-leave": "pointerleave", "pointer-cancel": "pointercancel", focus: "focus", blur: "blur" };

// node_modules/@arcgis/core/views/input/handlers/PreventContextMenu.js
var e20 = class extends t8 {
  constructor() {
    super(true), this.registerIncoming("context-menu", (t28) => t28.data.native.preventDefault());
  }
};

// node_modules/@arcgis/core/views/input/recognizers/support.js
var t20 = () => ({ maximumClickDelay: 300 });
var n25 = (e28 = {}) => ({ ...t20(), movementUntilMouseDrag: 1.5, movementUntilPenDrag: 6, movementUntilTouchDrag: 6, holdDelay: 500, ...e28 });
var r21 = (e28 = {}) => ({ ...t20(), maximumDoubleClickDistance: 10, maximumDoubleTouchDistance: 35, maximumDoubleClickDelay: 250, maximumDoubleTouchDelay: 350, ...e28 });
function o21(e28, t28) {
  return Math.abs(t28.x - e28.x) + Math.abs(t28.y - e28.y);
}
function c17(e28, t28) {
  const n32 = t28.x - e28.x, r31 = t28.y - e28.y;
  return Math.sqrt(n32 * n32 + r31 * r31);
}
function i25(t28, n32) {
  if (n32 ? (n32.radius = 0, n32.center.x = 0, n32.center.y = 0) : n32 = { radius: 0, center: c5() }, 0 === t28.length) return n32;
  if (1 === t28.length) return n32.center.x = t28[0].x, n32.center.y = t28[0].y, n32;
  if (2 === t28.length) {
    const [e28, r32] = t28, [o32, c30] = [r32.x - e28.x, r32.y - e28.y];
    return n32.radius = Math.sqrt(o32 * o32 + c30 * c30) / 2, n32.center.x = (e28.x + r32.x) / 2, n32.center.y = (e28.y + r32.y) / 2, n32;
  }
  let r31 = 0, o31 = 0;
  for (let e28 = 0; e28 < t28.length; e28++) r31 += t28[e28].x, o31 += t28[e28].y;
  r31 /= t28.length, o31 /= t28.length;
  const c29 = t28.map((e28) => e28.x - r31), i29 = t28.map((e28) => e28.y - o31);
  let u18 = 0, a29 = 0, l23 = 0, m26 = 0, s33 = 0, x5 = 0, y10 = 0;
  for (let e28 = 0; e28 < c29.length; e28++) {
    const t29 = c29[e28], n33 = i29[e28], r32 = t29 * t29, o32 = n33 * n33;
    u18 += r32, a29 += o32, l23 += t29 * n33, m26 += r32 * t29, s33 += o32 * n33, x5 += t29 * o32, y10 += n33 * r32;
  }
  const h20 = 0.5 * (m26 + x5), D4 = 0.5 * (s33 + y10), g16 = u18 * a29 - l23 * l23, f18 = (h20 * a29 - D4 * l23) / g16, p29 = (u18 * D4 - l23 * h20) / g16, b8 = c5(f18 + r31, p29 + o31);
  return { radius: Math.sqrt(f18 * f18 + p29 * p29 + (u18 + a29) / t28.length), center: b8 };
}
function u11(e28) {
  const { native: t28 } = e28, { pointerId: n32, button: r31, pointerType: o31 } = t28;
  return "mouse" === o31 ? `${n32}:${r31}` : `${o31}`;
}

// node_modules/@arcgis/core/views/input/recognizers/DoubleTapDrag.js
var p18 = class extends t8 {
  constructor(e28 = {}, a29 = o4) {
    super(false), this._clock = a29, this._doubleTapDragReady = false, this._doubleTapDragActive = false, this._dragStartCenter = c5(0, 0), this._pointerState = /* @__PURE__ */ new Map(), this._parameters = r21(e28), this._doubleTapDrag = this.registerOutgoing("double-tap-drag"), this._dragEventSeparator = new t15({ start: (t28, e29) => this._dragStart(t28, e29), update: (t28, e29) => this._dragUpdate(e29), end: (t28, e29) => this._dragEnd(e29) }), this.registerIncoming("drag", (t28) => this._dragEventSeparator.handle(t28)), this.registerIncoming("pointer-down", (t28) => this._handlePointerDown(t28)), this.registerIncoming("pointer-up", () => this._handlePointerUp());
  }
  onUninstall() {
    this._pointerState.forEach((t28) => {
      t28.doubleTapTimeout = l(t28.doubleTapTimeout);
    });
  }
  get hasPendingInputs() {
    for (const t28 of this._pointerState.values()) if (null != t28.doubleTapTimeout) return true;
    return false;
  }
  _clearPointerDown(t28) {
    const r31 = this._pointerState.get(t28);
    r31 && (r31.doubleTapTimeout = l(r31.doubleTapTimeout), this._pointerState.delete(t28), this.refreshHasPendingInputs());
  }
  _dragStart(t28, e28) {
    if (!this._doubleTapDragReady || 1 !== t28) return;
    this._doubleTapDragReady = false, this._doubleTapDragActive = true;
    const { data: i29, modifiers: a29 } = e28, { center: o31 } = i29;
    this._dragStartCenter = o31;
    const n32 = d13("begin", c5(0, 0), i29);
    this._doubleTapDrag.emit(n32, void 0, a29), e28.stopPropagation();
  }
  _dragUpdate(t28) {
    if (!this._doubleTapDragActive) return;
    const { data: e28, modifiers: i29 } = t28, { center: a29 } = e28, o31 = d13("update", c5(a29.x - this._dragStartCenter.x, a29.y - this._dragStartCenter.y), e28);
    this._doubleTapDrag.emit(o31, void 0, i29), t28.stopPropagation();
  }
  _dragEnd(t28) {
    if (!this._doubleTapDragActive) return;
    const { data: e28, modifiers: i29 } = t28, { center: a29 } = e28, o31 = d13("end", c5(a29.x - this._dragStartCenter.x, a29.y - this._dragStartCenter.y), e28);
    this._doubleTapDrag.emit(o31, void 0, i29), this._doubleTapDragActive = false, t28.stopPropagation();
  }
  _handlePointerDown(t28) {
    const { data: e28 } = t28, r31 = u11(e28), i29 = this._pointerState.get(r31), { pointerType: a29 } = e28.native;
    if (i29) {
      const o31 = "touch" === a29 ? this._parameters.maximumDoubleTouchDistance : this._parameters.maximumDoubleClickDistance;
      this._clearPointerDown(r31), o21(i29.event.data, e28) > o31 ? this._storePointerDown(t28) : this._doubleTapDragReady = true;
    } else this._storePointerDown(t28);
  }
  _handlePointerUp() {
    this._doubleTapDragReady = false;
  }
  _storePointerDown(t28) {
    const { data: e28 } = t28, { pointerType: r31 } = e28.native, i29 = u11(e28), a29 = "touch" === r31 ? this._parameters.maximumDoubleTouchDelay : this._parameters.maximumDoubleClickDelay, o31 = this._clock.setTimeout(() => this._clearPointerDown(i29), a29);
    this._pointerState.set(i29, { event: t28, doubleTapTimeout: o31 }), this.refreshHasPendingInputs();
  }
};
function d13(t28, e28, r31) {
  const { button: i29, buttons: a29, pointer: o31, pointers: n32, pointerType: s33, timestamp: p29 } = r31;
  return { action: t28, delta: e28, button: i29, buttons: a29, pointer: o31, pointers: n32, pointerType: s33, timestamp: p29 };
}

// node_modules/@arcgis/core/views/input/recognizers/Drag.js
var s23 = class extends t8 {
  constructor(t28) {
    super(false), this._navigationTouch = t28, this._startStateModifiers = /* @__PURE__ */ new Set(), this._activePointerMap = /* @__PURE__ */ new Map(), this._isDragging = false, this._isCurrentDragSuppressed = false, this._drag = this.registerOutgoing("drag"), this.registerIncoming("pointer-drag", this._handlePointerDrag.bind(this)), this.registerIncoming("pointer-up", this._handlePointerUpAndPointerLost.bind(this)), this.registerIncoming("pointer-capture-lost", this._handlePointerUpAndPointerLost.bind(this)), this.registerIncoming("pointer-cancel", this._handlePointerUpAndPointerLost.bind(this));
  }
  _createPayload(t28, e28, i29, n32) {
    return { action: t28, pointerType: this._pointerType, button: this._mouseButton, buttons: e28.buttons, timestamp: n32, pointers: o22(this._activePointerMap), pointer: e28, angle: i29.angle, radius: i29.radius, center: i29.center };
  }
  _addPointer(t28) {
    const e28 = t28.native.pointerId, i29 = a18(this._activePointerMap).angle, n32 = { event: t28, initialAngle: 0, lastAngle: 0 };
    this._activePointerMap.set(e28, n32);
    const s33 = h13(n32, r22(this._activePointerMap));
    n32.initialAngle = s33, n32.lastAngle = s33, this._updatePointerAngles(i29);
  }
  _updatePointer(t28) {
    if (t28 && null == t28.x && null == t28.y) return;
    const e28 = t28.native.pointerId, i29 = this._activePointerMap.get(e28);
    i29 ? i29.event = t28 : this._addPointer(t28);
  }
  _removePointer(t28) {
    const e28 = a18(this._activePointerMap).angle;
    this._activePointerMap.delete(t28), this._updatePointerAngles(e28);
  }
  _updatePointerAngles(t28) {
    const e28 = a18(this._activePointerMap);
    this._activePointerMap.forEach((i29) => {
      i29.initialAngle = h13(i29, e28) - t28, i29.lastAngle = h13(i29, e28) - t28;
    });
  }
  _emitEvent(t28, e28, i29) {
    const n32 = a18(this._activePointerMap);
    this._drag.emit(this._createPayload(t28, e28, n32, i29), void 0, this._startStateModifiers);
  }
  _handlePointerUpAndPointerLost(t28) {
    const i29 = t28.data.native.pointerId, n32 = n2(t28.timestamp);
    this._activePointerMap.get(i29) && (1 === this._activePointerMap.size ? (this._updatePointer(t28.data), !this._isCurrentDragSuppressed && this._emitEvent("end", t28.data, n32), this._isDragging = false, this._isCurrentDragSuppressed = false, this._removePointer(i29)) : (this._removePointer(i29), this._emitEvent("removed", t28.data, n2(t28.timestamp))));
  }
  _handlePointerDrag(t28) {
    const i29 = t28.data, n32 = i29.currentEvent, s33 = n2(t28.timestamp);
    switch (i29.action) {
      case "start":
      case "update":
        this._isDragging ? this._activePointerMap.has(n32.native.pointerId) ? (this._updatePointer(n32), !this._isCurrentDragSuppressed && this._emitEvent("update", n32, s33)) : (this._addPointer(n32), this._emitEvent("added", n32, s33), this._isCurrentDragSuppressed = this._isSuppressed) : (this._updatePointer(n32), this._pointerType = t28.data.startEvent.pointerType, this._mouseButton = t28.data.startEvent.button, this._startStateModifiers = t28.modifiers, this._isDragging = true, this._isCurrentDragSuppressed = this._isSuppressed, !this._isCurrentDragSuppressed && this._emitEvent("start", n32, s33));
    }
  }
  get _isSuppressed() {
    return !!this._navigationTouch && !this._navigationTouch.browserTouchPanEnabled && "touch" === this._pointerType && 1 === this._activePointerMap.size;
  }
};
function r22(e28) {
  const i29 = [];
  return e28.forEach((e29) => {
    i29.push(c5(e29.event.x, e29.event.y));
  }), i25(i29);
}
function a18(t28) {
  const e28 = r22(t28);
  let i29 = 0;
  return t28.forEach((t29) => {
    let n32 = h13(t29, e28), s33 = n32 - t29.lastAngle;
    for (; s33 > Math.PI; ) s33 -= 2 * Math.PI;
    for (; s33 < -Math.PI; ) s33 += 2 * Math.PI;
    n32 = t29.lastAngle + s33, t29.lastAngle = n32;
    const r31 = n32 - t29.initialAngle;
    i29 += r31;
  }), i29 /= t28.size || 1, { angle: i29, radius: e28.radius, center: e28.center };
}
function o22(t28) {
  const e28 = /* @__PURE__ */ new Map();
  return t28.forEach((t29, i29) => e28.set(i29, t29.event)), e28;
}
function h13(t28, e28) {
  const i29 = t28.event, n32 = i29.x - e28.center.x, s33 = i29.y - e28.center.y;
  return Math.atan2(s33, n32);
}
var p19;
!function(t28) {
  t28[t28.Left = 0] = "Left", t28[t28.Middle = 1] = "Middle", t28[t28.Right = 2] = "Right", t28[t28.Back = 3] = "Back", t28[t28.Forward = 4] = "Forward", t28[t28.Undefined = -1] = "Undefined";
}(p19 || (p19 = {}));

// node_modules/@arcgis/core/views/input/recognizers/ImmediateDoubleClick.js
var s24 = class extends t8 {
  constructor(e28 = {}, a29 = o4) {
    super(false), this._clock = a29, this._pointerState = /* @__PURE__ */ new Map(), this._parameters = r21(e28), this._immediateDoubleClick = this.registerOutgoing("immediate-double-click"), this.registerIncoming("pointer-down", this._handlePointerDown.bind(this)), this.registerIncoming("pointer-up", this._handlePointerUp.bind(this));
  }
  onUninstall() {
    this._pointerState.forEach((t28) => {
      t28.immediateDoubleClick && t28.immediateDoubleClick.timeoutHandle.remove();
    }), super.onUninstall();
  }
  _handlePointerDown(t28) {
    const e28 = t28.data, i29 = u11(e28);
    if (!this._pointerState.has(i29)) {
      const t29 = { downButton: e28.native.button, x: e28.x, y: e28.y, immediateDoubleClick: null };
      this._pointerState.set(i29, t29), this.startCapturingPointer(e28.native);
    }
  }
  _handlePointerUp(t28) {
    const e28 = t28.data, i29 = u11(e28), s33 = this._pointerState.get(i29);
    if (s33 && s33.downButton === e28.native.button) {
      const i30 = s33.immediateDoubleClick, a29 = "touch" === t28.data.native.pointerType ? this._parameters.maximumDoubleTouchDistance : this._parameters.maximumDoubleClickDistance;
      i30 ? (i30.timeoutHandle.remove(), o21(i30, t28.data) > a29 ? this._startImmediateDoubleClick(t28, s33) : (this._immediateDoubleClick.emit(t28.data, void 0, i30.modifiers), this._removeState(e28))) : o21(s33, t28.data) > a29 ? this._removeState(e28) : this._startImmediateDoubleClick(t28, s33);
    }
  }
  _startImmediateDoubleClick(t28, e28) {
    const i29 = "touch" === t28.data.native.pointerType ? this._parameters.maximumDoubleTouchDelay : this._parameters.maximumDoubleClickDelay;
    e28.immediateDoubleClick = { x: t28.data.x, y: t28.data.y, modifiers: t28.modifiers, timeoutHandle: this._clock.setTimeout(() => this._removeState(t28.data), i29) };
  }
  _removeState(t28) {
    const e28 = u11(t28);
    this._pointerState.delete(e28), this.stopCapturingPointer(t28.native), this.refreshHasPendingInputs();
  }
};

// node_modules/@arcgis/core/views/input/recognizers/PointerClickHoldAndDrag.js
var r23 = class extends t8 {
  constructor(e28 = {}, i29 = o4) {
    super(false), this._clock = i29, this._pointerState = /* @__PURE__ */ new Map(), this._parameters = n25(e28), this._pointerDrag = this.registerOutgoing("pointer-drag"), this._immediateClick = this.registerOutgoing("immediate-click"), this._pointerHold = this.registerOutgoing("hold"), this.registerIncoming("pointer-down", (t28) => this._handlePointerDown(t28)), this.registerIncoming("pointer-up", (t28) => this._handlePointerLoss(t28, "pointer-up")), this.registerIncoming("pointer-capture-lost", (t28) => this._handlePointerLoss(t28, "pointer-capture-lost")), this.registerIncoming("pointer-cancel", (t28) => this._handlePointerLoss(t28, "pointer-cancel")), this._moveHandle = this.registerIncoming("pointer-move", (t28) => this._handlePointerMove(t28)), this._moveHandle.pause();
  }
  onUninstall() {
    this._pointerState.forEach((t28) => {
      t28.holdTimeout = l(t28.holdTimeout);
    }), super.onUninstall();
  }
  _handlePointerDown(t28) {
    const e28 = t28.data, i29 = e28.native.pointerId;
    let o31 = null;
    0 === this._pointerState.size && (o31 = this._clock.setTimeout(() => {
      const e29 = this._pointerState.get(i29);
      if (e29) {
        if (!e29.isDragging) {
          const i30 = e29.previousEvent;
          this._pointerHold.emit(i30, void 0, t28.modifiers), e29.holdEmitted = true;
        }
        e29.holdTimeout = null;
      }
    }, this._parameters.holdDelay));
    const n32 = { startEvent: e28, previousEvent: e28, startTimestamp: t28.timestamp, isDragging: false, downButton: e28.native.button, holdTimeout: o31, modifiers: /* @__PURE__ */ new Set() };
    this._pointerState.set(i29, n32), this.startCapturingPointer(e28.native), this._moveHandle.resume(), this._pointerState.size > 1 && this._startDragging(t28);
  }
  _handlePointerMove(t28) {
    const e28 = t28.data, i29 = e28.native.pointerId, o31 = this._pointerState.get(i29);
    if (o31) {
      if (o31.isDragging) this._pointerDrag.emit(s25("update", o31, e28), void 0, o31.modifiers);
      else {
        c17(e28, o31.startEvent) > this._getDragThreshold(e28.native.pointerType) && this._startDragging(t28);
      }
      o31.previousEvent = e28;
    }
  }
  _getDragThreshold(t28) {
    switch (t28) {
      case "touch":
        return this._parameters.movementUntilTouchDrag;
      case "pen":
        return this._parameters.movementUntilPenDrag;
      default:
        return this._parameters.movementUntilMouseDrag;
    }
  }
  _startDragging(t28) {
    const e28 = t28.data, i29 = e28.native.pointerId;
    this._pointerState.forEach((o31) => {
      null != o31.holdTimeout && (o31.holdTimeout.remove(), o31.holdTimeout = null), o31.isDragging || (o31.modifiers = t28.modifiers, o31.isDragging = true, i29 === o31.startEvent.native.pointerId ? this._pointerDrag.emit(s25("start", o31, e28)) : this._pointerDrag.emit(s25("start", o31, o31.previousEvent), t28.timestamp));
    });
  }
  _handlePointerLoss(t28, e28) {
    const i29 = t28.data, o31 = i29.native.pointerId, n32 = this._pointerState.get(o31);
    if (n32) {
      if (null != n32.holdTimeout && (n32.holdTimeout.remove(), n32.holdTimeout = null), n32.isDragging) this._pointerDrag.emit(s25("end", n32, "pointer-up" === e28 ? i29 : n32.previousEvent), void 0, n32.modifiers);
      else if ("pointer-up" === e28 && n32.downButton === i29.native.button) {
        t28.timestamp - n32.startTimestamp <= this._parameters.maximumClickDelay && !n32.holdEmitted && this._immediateClick.emit(i29);
      }
      this._pointerState.delete(o31), this.stopCapturingPointer(i29.native), 0 === this._pointerState.size && this._moveHandle.pause();
    }
  }
};
function s25(t28, e28, i29) {
  return { action: t28, startEvent: e28.startEvent, previousEvent: e28.previousEvent, currentEvent: i29 };
}

// node_modules/@arcgis/core/views/input/recognizers/SingleAndDoubleClick.js
var s26 = class extends t8 {
  constructor(e28 = {}, i29 = o4) {
    super(false), this._clock = i29, this._pointerState = /* @__PURE__ */ new Map(), this._parameters = r21(e28), this._click = this.registerOutgoing("click"), this._doubleClick = this.registerOutgoing("double-click"), this.registerIncoming("immediate-click", (t28) => this._handleImmediateClick(t28)), this.registerIncoming("pointer-down", (t28) => this._handlePointerDown(t28));
  }
  onUninstall() {
    this._pointerState.forEach((t28) => t28.doubleClickTimer = l(t28.doubleClickTimer));
  }
  get hasPendingInputs() {
    for (const t28 of this._pointerState.values()) if (null != t28.doubleClickTimer) return true;
    return false;
  }
  _clearDoubleClickTimer(t28, i29) {
    const o31 = this._pointerState.get(t28);
    o31 && (o31.doubleClickTimer = l(o31.doubleClickTimer), i29 && this._click.emit(o31.event.data, void 0, o31.event.modifiers), this._pointerState.delete(t28), this.refreshHasPendingInputs());
  }
  _doubleClickTimeoutExceeded(t28) {
    const e28 = this._pointerState.get(t28);
    1 === e28.pointerDownCount && this._click.emit(e28.event.data, void 0, e28.event.modifiers), e28.doubleClickTimer = null, this._pointerState.delete(t28), this.refreshHasPendingInputs();
  }
  _handleImmediateClick(t28) {
    const e28 = t28.data, { pointerType: i29 } = e28.native, o31 = a19(e28);
    if (!this._pointerState.has(o31)) return void this._startClick(t28);
    const r31 = this._pointerState.get(o31), { data: s33, modifiers: l23 } = r31.event, c29 = "touch" === i29 ? this._parameters.maximumDoubleTouchDistance : this._parameters.maximumDoubleClickDistance;
    o21(s33, e28) > c29 ? (this._clearDoubleClickTimer(o31, true), this._startClick(t28)) : (this._clearDoubleClickTimer(o31, false), 2 === r31.pointerDownCount && this._doubleClick.emit(s33, void 0, l23));
  }
  _handlePointerDown(t28) {
    const e28 = u11(t28.data), i29 = this._pointerState.get(e28);
    i29 && (i29.pointerDownCount += 1);
  }
  _startClick(t28) {
    const { data: e28 } = t28, { native: { pointerType: i29 } } = e28, o31 = u11(e28), n32 = "touch" === i29 ? this._parameters.maximumDoubleTouchDelay : this._parameters.maximumDoubleClickDelay, s33 = this._clock.setTimeout(() => this._doubleClickTimeoutExceeded(o31), n32), a29 = 1;
    this._pointerState.set(o31, { event: t28, doubleClickTimer: s33, pointerDownCount: a29 }), this.refreshHasPendingInputs();
  }
};
function a19(t28) {
  const { pointerId: e28, pointerType: i29, button: o31 } = t28.native;
  return "mouse" === i29 ? `${e28}:${o31}` : `${i29}`;
}

// node_modules/@arcgis/core/views/2d/input/MapViewInputManager.js
var C2 = { counter: "Control", pan: { left: "ArrowLeft", right: "ArrowRight", up: "ArrowUp", down: "ArrowDown" }, zoom: { zoomIn: ["=", "+"], zoomOut: ["-", "_"] }, rotate: { clockwise: ["a", "A"], counterClockwise: ["d", "D"], reset: ["n", "N"] } };
var L7 = Symbol("handles");
var k2 = class extends b2 {
  initialize() {
    const e28 = () => this.view?.ready;
    this.addHandles([f(() => !e28(), () => this._disconnect()), f(e28, () => this._connect())]);
  }
  destroy() {
    this._disconnect();
  }
  get latestPointerType() {
    return this._inputManager?.latestPointerType;
  }
  get latestPointerLocation() {
    return this._inputManager?.latestPointerLocation;
  }
  get multiTouchActive() {
    return this._inputManager?.multiTouchActive ?? false;
  }
  isModifierKeyDown(e28) {
    return this._inputManager?.isModifierKeyDown(e28) ?? false;
  }
  _disconnect() {
    this.view.viewEvents.disconnect(), this.removeHandles(L7), this._inputManager = u2(this._inputManager);
  }
  _connect() {
    const e28 = this.view.surface, t28 = new l17(e28, this.view.input), o31 = [new s24(), new r23(), new s26(), new s23(this.view.navigation), new p18()], r31 = new d7({ eventSource: t28, recognizers: o31 }), a29 = new n22(this.view, ["primary"]), c29 = new o17(this.view, ["secondary"]);
    r31.installHandlers("prevent-context-menu", [new e20()], _3.INTERNAL), r31.installHandlers("navigation", [new a15(this.view), new m17(this.view), new o18(this.view), new a13(this.view), new a13(this.view, [C2.counter]), a29, new e17(this.view, C2.pan), new e18(this.view, C2.zoom), new t16(this.view, C2.rotate), c29, new e16(this.view, "touch")], _3.INTERNAL), this.view.viewEvents.connect(r31), this._source = t28, this._inputManager = r31, this.addHandles([l3(() => this.view?.navigation?.browserTouchPanEnabled, (e29) => {
      this._source && (this._source.browserTouchPanningEnabled = !e29);
    }, h2), l3(() => {
      const { actionMap: e29 } = this.view.navigation;
      return { panActions: n21("pan", e29), rotateActions: n21("rotate", e29) };
    }, ({ panActions: e29, rotateActions: t29 }) => {
      a29.pointerActions = e29, c29.pointerActions = t29;
    }, w)], L7);
  }
  get test() {
  }
};
r([m2()], k2.prototype, "view", void 0), r([m2()], k2.prototype, "latestPointerType", null), r([m2()], k2.prototype, "latestPointerLocation", null), r([m2()], k2.prototype, "multiTouchActive", null), k2 = r([a("esri.views.2d.input.MapViewInputManager")], k2);
var E4 = k2;

// node_modules/@arcgis/core/views/Viewport2DMixin.js
var a20 = (a29) => {
  let p29 = class extends a29 {
    constructor(...t28) {
      super(...t28), this.goToManager = new h11({ view: this }), this.inputManager = new E4({ view: this }), this.addHandles([this.on("resize", (t29) => this.stateManager.resize(t29.width, t29.height))]);
    }
    get interacting() {
      return this.navigating;
    }
    get stationary() {
      return !this.animation && !this.navigating && !this.resizing && this.stationaryManager.stationary;
    }
    on(t28, r31, e28, s33) {
      const o31 = this.inputManager && this.viewEvents.on(t28, r31, e28, s33);
      return o31 || super.on(t28, r31);
    }
    hasEventListener(t28) {
      return super.hasEventListener(t28) || this.viewEvents.hasHandler(t28);
    }
    goTo(t28, r31) {
      return this.goToManager.goTo(t28, r31);
    }
    toMap(t28) {
      if (!this.ready) return null;
      const r31 = o12(t28) ? r11(this, t28) : t28;
      return this.stateManager.toMap(r31);
    }
  };
  return r([m2()], p29.prototype, "goToManager", void 0), r([m2({ readOnly: true })], p29.prototype, "interacting", null), r([m2()], p29.prototype, "stationary", null), r([m2({ readOnly: true })], p29.prototype, "inputManager", void 0), p29 = r([a("esri.views.Viewport2DMixin")], p29), p29;
};

// node_modules/@arcgis/core/views/2d/pointToPoint/Camera.js
var a21 = class {
  constructor(e28) {
    this._view = e28, this.viewpoint = new m5({ targetGeometry: new _(), scale: 0, rotation: 0 });
  }
  get view() {
    return this._view;
  }
  get size() {
    const [t28, e28] = this._view.size;
    return Math.sqrt(t28 * t28 + e28 * e28);
  }
  get scale() {
    return this.viewpoint.scale;
  }
  get rotation() {
    return this.viewpoint.rotation;
  }
  get center() {
    return this.viewpoint.targetGeometry;
  }
  get scaleToResolutionFactor() {
    return at(this.center.spatialReference);
  }
  pixelsPerPanAtZoom(t28) {
    return 1 / (t28 * this.scaleToResolutionFactor);
  }
  zoomAtPixelsPerPan(t28) {
    return 1 / (t28 * this.scaleToResolutionFactor);
  }
  pixelsPerRotate() {
    return this.size / 2;
  }
  compareTo(t28, o31) {
    o31.pan = e5(this.center, t28.center);
    let i29 = Math.abs(t28.rotation - this.rotation);
    i29 = i29 >= 180 ? 360 - i29 : i29, o31.rotate = s4(i29), o31.sourceZoom = this.scale, o31.targetZoom = t28.scale;
  }
  interpolate(t28, e28, i29) {
    const { pan: r31, rotate: s33, zoom: n32, zoomOffset: a29 } = i29, { center: c29 } = this;
    c29.spatialReference = t28.center.spatialReference, c29.x = o6(t28.center.x, e28.center.x, r31), c29.y = o6(t28.center.y, e28.center.y, r31), this.viewpoint.scale = o6(t28.scale, e28.scale + a29, n32);
    let p29 = t28.rotation;
    const l23 = e28.rotation;
    Math.abs(l23 - p29) >= 180 && (p29 += 360 * (p29 < l23 ? 1 : -1)), this.viewpoint.rotation = o6(p29, l23, s33);
  }
  copyFrom(t28) {
    Z(this.viewpoint, t28.viewpoint), this._view = t28.view;
  }
};

// node_modules/@arcgis/core/views/animation/easing.js
var u12 = (t28) => t28;
var i26 = (t28) => t28 * t28;
var o23 = (t28) => 1 - i26(1 - t28);
var n26 = (t28) => t28 < 0.5 ? i26(2 * t28) / 2 : (o23(2 * (t28 - 0.5)) + 1) / 2;
var c18 = (t28) => t28 * t28 * t28;
var a22 = (t28) => 1 - c18(1 - t28);
var s27 = (t28) => t28 < 0.5 ? c18(2 * t28) / 2 : (a22(2 * (t28 - 0.5)) + 1) / 2;
var q = (t28) => t28 * t28 * t28 * t28;
var e21 = (t28) => 1 - q(1 - t28);
var r24 = (t28) => t28 < 0.5 ? q(2 * t28) / 2 : (e21(2 * (t28 - 0.5)) + 1) / 2;
var d14 = (t28) => t28 * t28 * t28 * t28 * t28;
var b5 = (t28) => 1 - d14(1 - t28);
var p20 = (t28) => t28 < 0.5 ? d14(2 * t28) / 2 : (b5(2 * (t28 - 0.5)) + 1) / 2;
var x2 = (t28) => 1 - Math.cos(t28 * Math.PI / 2);
var h14 = (t28) => 1 - x2(1 - t28);
var M4 = (t28) => t28 < 0.5 ? x2(2 * t28) / 2 : (h14(2 * (t28 - 0.5)) + 1) / 2;
var f12 = (t28) => 2 ** (10 * (t28 - 1));
var I4 = (t28) => 1 - f12(1 - t28);
var m18 = (t28) => t28 < 0.5 ? f12(2 * t28) / 2 : (I4(2 * (t28 - 0.5)) + 1) / 2;
var O4 = (t28) => -(Math.sqrt(1 - t28 * t28) - 1);
var j6 = (t28) => 1 - O4(1 - t28);
var l18 = (t28) => t28 < 0.5 ? O4(2 * t28) / 2 : (j6(2 * (t28 - 0.5)) + 1) / 2;
function z3(t28) {
  const u18 = 2 * (t28 - Math.sqrt((t28 - 1) * t28)), i29 = u18 / 2 / t28;
  return (o31) => o31 < i29 ? t28 * o31 * o31 : u18 * o31 - u18 + 1;
}
function B2(t28, u18) {
  return (i29, o31) => i29 < u18 ? u18 * t28(i29 / u18, o31) : 1 - t28((1 - i29) / (1 - u18), o31) * (1 - u18);
}
var P5 = B2(z3(1), 1);
var g11 = B2(z3(1), 0);
var k3 = B2(z3(1), 0.5);
var v3 = B2(z3(2), 1);
var w5 = B2(z3(2), 0);
var y6 = B2(z3(2), 0.5);
var A3 = B2(z3(3), 1);
var C3 = B2(z3(3), 0);
var D2 = B2(z3(3), 0.5);
var E5 = B2(z3(4), 1);
var F3 = B2(z3(4), 0);
var G2 = B2(z3(4), 0.5);
var H2 = { linear: u12, "in-quad": i26, "out-quad": o23, "in-out-quad": n26, "in-coast-quad": P5, "out-coast-quad": g11, "in-out-coast-quad": k3, "in-cubic": c18, "out-cubic": a22, "in-out-cubic": s27, "in-coast-cubic": v3, "out-coast-cubic": w5, "in-out-coast-cubic": y6, "in-quart": q, "out-quart": e21, "in-out-quart": r24, "in-coast-quart": A3, "out-coast-quart": C3, "in-out-coast-quart": D2, "in-quint": d14, "out-quint": b5, "in-out-quint": p20, "in-coast-quint": E5, "out-coast-quint": F3, "in-out-coast-quint": G2, "in-sine": x2, "out-sine": h14, "in-out-sine": M4, "in-expo": f12, "out-expo": I4, "in-out-expo": m18, "in-circ": O4, "out-circ": j6, "in-out-circ": l18, "quad-in": i26, "quad-out": o23, "quad-in-out": n26, "quad-in-coast": P5, "quad-out-coast": g11, "quad-in-out-coast": k3, "cubic-in": c18, "cubic-out": a22, "cubic-in-out": s27, "cubic-in-coast": v3, "cubic-out-coast": w5, "cubic-in-out-coast": y6, "quart-in": q, "quart-out": e21, "quart-in-out": r24, "quart-in-coast": A3, "quart-out-coast": C3, "quart-in-out-coast": D2, "quint-in": d14, "quint-out": b5, "quint-in-out": p20, "quint-in-coast": E5, "quint-out-coast": F3, "quint-in-out-coast": G2, "sine-in": x2, "sine-out": h14, "sine-in-out": M4, "expo-in": f12, "expo-out": I4, "expo-in-out": m18, "circ-in": O4, "circ-out": j6, "circ-in-out": l18, ease: (u18) => t6.ease(u18), "ease-in": (u18) => t6.easeIn(u18), "ease-out": (u18) => t6.easeOut(u18), "ease-in-out": (u18) => t6.easeInOut(u18) };

// node_modules/@arcgis/core/views/animation/pointToPoint/Camera.js
var t21 = class {
  constructor() {
    this.pan = 0, this.rotate = 0, this.fov = 0, this.sourceZoom = 0, this.targetZoom = 0;
  }
};

// node_modules/@arcgis/core/views/animation/pointToPoint/Settings.js
var o24 = { desiredScreenFlow: 2, minDuration: n2(500), maxDuration: n2(8e3) };
var r25 = { ...o24, maxDuration: n2(4e3) };

// node_modules/@arcgis/core/views/animation/pointToPoint/Definition.js
var r26 = class _r {
  constructor(t28) {
    this._createCamera = t28, this.compared = new t21(), this.segmentStart = 0, this.segmentEnd = 1, this.settings = { desiredScreenFlow: o24.desiredScreenFlow }, this.source = t28(), this.target = t28();
  }
  clone() {
    const t28 = new _r(this._createCamera);
    return t28.copyFrom(this), t28;
  }
  copyFrom(t28) {
    this.update(t28.source, t28.target, t28.settings);
  }
  update(t28, e28, r31) {
    this.source !== t28 && this.source.copyFrom(t28), this.target !== e28 && this.target.copyFrom(e28), this.source.compareTo(this.target, this.compared), this.settings.desiredScreenFlow = r31.desiredScreenFlow ?? o24.desiredScreenFlow, this.desiredPixelFlow = this.settings.desiredScreenFlow * this.target.size, this.halfWindowSize = this.target.size / 2;
  }
  halfWindowPanAtZoom(t28) {
    const e28 = this.target.pixelsPerPanAtZoom(t28);
    return this.halfWindowSize / e28;
  }
  get hasZoom() {
    return Math.abs(this.compared.sourceZoom - this.compared.targetZoom) > 1e-5;
  }
  get hasPan() {
    return this.compared.pan > e6();
  }
  get hasFov() {
    return Math.abs(this.compared.fov) > e6();
  }
  get hasRotate() {
    return this.compared.rotate > e6();
  }
};

// node_modules/@arcgis/core/views/animation/pointToPoint/InterpolateComponents.js
var t22 = class {
  constructor() {
    this.pan = 0, this.rotate = 0, this.zoom = 0, this.fov = 0, this.zoomOffset = 0;
  }
};

// node_modules/@arcgis/core/views/animation/pointToPoint/Path.js
var e22 = class {
  constructor() {
    this.segments = new Array();
  }
  get time() {
    return this.segments.reduce((e28, o31) => t3(e28 + o31.time), t3(0));
  }
  interpolateComponentsAt(t28, e28) {
    t28 = Math.min(Math.max(t28, 0), 1), t28 *= this.time;
    let o31 = 0, s33 = 0;
    const n32 = this.definition, a29 = this.segments.reduce((t29, e29) => t29 || e29.definition.hasZoom, false);
    for (let i29 = 0; i29 < this.segments.length; i29++) {
      const m26 = this.segments[i29], r31 = m26.definition;
      if (t28 <= m26.time || i29 === this.segments.length - 1) {
        if (this.segmentInterpolateComponentsAt(m26, 0 === m26.time ? 0 : t28 / m26.time, e28), n32.hasPan && !isNaN(e28.pan) && isFinite(n32.compared.pan) ? e28.pan = (o31 + r31.compared.pan * e28.pan) / n32.compared.pan : e28.pan = 1, n32.hasRotate && !isNaN(e28.rotate) && isFinite(n32.compared.rotate) ? e28.rotate = (s33 + r31.compared.rotate * e28.rotate) / n32.compared.rotate : e28.rotate = 1, a29 && !isNaN(e28.zoom) && isFinite(r31.compared.targetZoom)) {
          const { sourceZoom: t29, targetZoom: o32 } = r31.compared, s34 = e28.zoom * (o32 - t29) + t29, n33 = this.segments[0].definition.compared.sourceZoom, a30 = this.segments[this.segments.length - 1].definition.compared.targetZoom, i30 = Math.abs(o32 - n33) > Math.abs(t29 - n33) ? o32 : t29;
          e28.zoomOffset = i30 - a30, e28.zoom = (s34 - n33) / (i30 - n33);
        } else e28.zoom = 1;
        return e28;
      }
      t28 -= m26.time, o31 += r31.compared.pan, s33 += r31.compared.rotate;
    }
  }
  segmentInterpolateComponentsAt(t28, e28, o31) {
    t28.interpolateComponentsAt(e28, o31);
  }
};

// node_modules/@arcgis/core/views/animation/pointToPoint/Segment.js
var o25 = class {
  get time() {
    return this._time;
  }
  constructor(t28) {
    t28 && this.update(t28);
  }
  update(t28) {
    t28 && (this.definition ? this.definition.copyFrom(t28) : this.definition = t28.clone()), this._updatePrecomputedVariables(), this._updatePixelFlow();
  }
  _updatePrecomputedVariables() {
    const t28 = this.definition, i29 = t28.compared, o31 = i29.sourceZoom, e28 = i29.targetZoom;
    this._zoomSign = o31 > e28 ? 1 : -1, this._panPixelsAtSource = i29.pan * t28.source.pixelsPerPanAtZoom(o31);
    const n32 = (t28.source.pixelsPerRotate() + t28.target.pixelsPerRotate()) / 2;
    this._rotatePixels = i29.rotate * n32;
  }
  _updatePixelFlow() {
    const t28 = this.definition.compared.sourceZoom, o31 = this.definition.compared.targetZoom, { hasZoom: e28, hasPan: n32, hasRotate: s33 } = this.definition;
    let h20 = 0, a29 = 0;
    e28 && (n32 && (h20 = (o31 / t28 - 1) / (-1 / (this._zoomSign * this.definition.halfWindowSize) * Math.LN2 * this._panPixelsAtSource)), s33 && (a29 = this._zoomSign * (Math.log(t28 / o31) / Math.LN2) * this.definition.halfWindowSize / this._rotatePixels)), this._zoomPixelFlow = 0, this._panPixelFlow = 0, this._rotatePixelFlow = 0;
    const r31 = this.definition.desiredPixelFlow;
    if (e28 && n32 && s33) {
      const t29 = h20 + a29 + h20 * a29;
      this._zoomPixelFlow = h20 * a29 / t29 * r31, this._panPixelFlow = a29 / t29 * r31, this._rotatePixelFlow = h20 / t29 * r31;
    } else if (e28 && n32) {
      const t29 = 1 + h20;
      this._zoomPixelFlow = h20 / t29 * r31, this._panPixelFlow = 1 / t29 * r31;
    } else if (e28 && s33) {
      const t29 = 1 + a29;
      this._zoomPixelFlow = a29 / t29 * r31, this._rotatePixelFlow = 1 / t29 * r31;
    } else if (n32 && s33) {
      const t29 = this._panPixelsAtSource / this._rotatePixels, i29 = 1 + t29;
      this._panPixelFlow = t29 / i29 * r31, this._rotatePixelFlow = 1 / i29 * r31;
    } else n32 ? this._panPixelFlow = r31 : e28 ? this._zoomPixelFlow = r31 : s33 && (this._rotatePixelFlow = r31);
    if (this._time = t3(Math.max(this.rotateTime, this.zoomTime, this.panTime)), this.fovTime > this._time) {
      const t29 = this.fovTime / this._time;
      this._time = this.fovTime, this._zoomPixelFlow /= t29, this._panPixelFlow /= t29, this._rotatePixelFlow /= t29;
    }
  }
  get rotateTime() {
    return this.definition.hasRotate ? t3(this._rotatePixels / this._rotatePixelFlow) : t3(0);
  }
  get zoomTime() {
    return this.definition.hasZoom ? t3(this._zoomSign * (Math.log(this.definition.compared.sourceZoom / this.definition.compared.targetZoom) / Math.LN2) * this.definition.halfWindowSize / this._zoomPixelFlow) : t3(0);
  }
  get fovTime() {
    return this.definition.hasFov ? t3(Math.abs(this.definition.compared.fov) / e23) : t3(0);
  }
  get panTime() {
    if (!this.definition.hasPan) return t3(0);
    if (this.definition.hasZoom) {
      const t28 = -1 / (this._zoomSign * this.definition.halfWindowSize) * Math.LN2, o31 = t28 * this._panPixelsAtSource;
      return t3(Math.log(o31 * (this._zoomPixelFlow / this._panPixelFlow) + 1) / (t28 * this._zoomPixelFlow));
    }
    return t3(this._panPixelsAtSource / this._panPixelFlow);
  }
  _interpolateComponentsZoom(t28) {
    if (0 === t28 || 1 === t28) return t28;
    if (this.definition.hasZoom) {
      const i29 = this.definition.compared.sourceZoom, o31 = this.definition.compared.targetZoom;
      return (i29 * (i29 / o31) ** -t28 - i29) / (o31 - i29);
    }
    return t28;
  }
  _interpolateComponentsFov(t28) {
    if (0 === t28) return this.definition.segmentStart;
    if (1 === t28) return this.definition.segmentEnd;
    if (this.definition.hasFov) {
      const { segmentStart: i29, segmentEnd: o31 } = this.definition;
      return i29 + t28 * (o31 - i29);
    }
    return this.definition.segmentStart;
  }
  _interpolateComponentsPan(t28) {
    if (0 === t28 || 1 === t28) return t28;
    if (this.definition.hasPan && this.definition.hasZoom) {
      const i29 = -1 / (this._zoomSign * this.definition.halfWindowSize) * this._zoomPixelFlow;
      return 1 / this._panPixelsAtSource * (this._panPixelFlow * (2 ** (i29 * t28 * this._time) - 1)) / (i29 * Math.LN2);
    }
    return t28;
  }
  _interpolateComponentsRotate(t28) {
    return t28;
  }
  interpolateComponentsAt(t28, i29) {
    t28 = Math.min(Math.max(t28, 0), 1), i29.zoom = this._interpolateComponentsZoom(t28), i29.pan = this._interpolateComponentsPan(t28), i29.rotate = this._interpolateComponentsRotate(t28), i29.zoomOffset = 0, i29.fov = this._interpolateComponentsFov(t28);
  }
};
var e23 = s4(45);

// node_modules/@arcgis/core/views/animation/pointToPoint/apex/functions.js
function o26(o31, e28, a29) {
  const n32 = e28 - o31.compared.sourceZoom, t28 = o31.halfWindowPanAtZoom(n32);
  return -o31.halfWindowSize * (a29.ascensionFactor * Math.LN2 * o31.compared.pan + t28) * Math.log(o31.compared.sourceZoom / e28) / (o31.desiredPixelFlow * Math.LN2 * t28);
}
function e24(o31, e28, a29) {
  const n32 = 1 / e28, t28 = Math.log(o31.compared.sourceZoom * n32), i29 = 1 / o31.desiredPixelFlow, r31 = 1 / Math.LN2, d21 = e28 - o31.compared.sourceZoom, c29 = 1 / d21, l23 = (a29.ascensionFactor * Math.LN2 * o31.compared.pan + o31.halfWindowPanAtZoom(d21)) / o31.halfWindowPanAtZoom(1);
  return o31.halfWindowSize * n32 * i29 * r31 * c29 * l23 - o31.halfWindowSize * t28 * i29 * r31 * c29 + o31.halfWindowSize * t28 * i29 * r31 * l23 / (d21 * d21);
}
function a23(o31, e28, a29) {
  const n32 = e28 - o31.compared.sourceZoom, t28 = 1 / n32, i29 = 1 / e28, r31 = Math.log(o31.compared.sourceZoom * i29), d21 = (a29.ascensionFactor * Math.LN2 * o31.compared.pan + o31.halfWindowPanAtZoom(n32)) / o31.halfWindowPanAtZoom(1);
  return o31.halfWindowSize * t28 * (-2 * t28 * i29 * d21 + 2 * t28 * r31 + 2 * i29 - 2 * r31 * d21 / (n32 * n32) - d21 / (e28 * e28)) / (o31.desiredPixelFlow * Math.LN2);
}
function n27(o31, e28) {
  return -o31.halfWindowSize * Math.log(o31.compared.sourceZoom / e28) / (o31.desiredPixelFlow * Math.LN2);
}
function t23(o31, e28) {
  return o31.halfWindowSize / (e28 * o31.desiredPixelFlow * Math.LN2);
}
function i27(o31, e28) {
  return -o31.halfWindowSize / (e28 * e28 * o31.desiredPixelFlow * Math.LN2);
}
function r27(o31, e28, a29) {
  return -o31.compared.pan * o31.halfWindowSize * (a29.ascensionFactor + a29.descensionFactor - 1) / (o31.desiredPixelFlow * o31.halfWindowPanAtZoom(e28));
}
function d15(o31, e28, a29) {
  return o31.compared.pan * o31.halfWindowSize * (a29.ascensionFactor + a29.descensionFactor - 1) / (o31.desiredPixelFlow * o31.halfWindowPanAtZoom(e28 * e28));
}
function c19(o31, e28, a29) {
  return -2 * o31.compared.pan * o31.halfWindowSize * (a29.ascensionFactor + a29.descensionFactor - 1) / (o31.desiredPixelFlow * o31.halfWindowPanAtZoom(e28 * e28 * e28));
}
function l19(o31, e28, a29) {
  return o31.halfWindowSize * (-o31.halfWindowPanAtZoom(e28) - a29.descensionFactor * Math.LN2 * o31.compared.pan + o31.halfWindowPanAtZoom(o31.compared.targetZoom)) * Math.log(e28 / o31.compared.targetZoom) / (o31.desiredPixelFlow * Math.LN2 * o31.halfWindowPanAtZoom(-e28 + o31.compared.targetZoom));
}
function m19(o31, e28, a29) {
  const n32 = Math.log(e28 / o31.compared.targetZoom), t28 = 1 / o31.desiredPixelFlow, i29 = 1 / Math.LN2, r31 = -e28 + o31.compared.targetZoom, d21 = 1 / r31, c29 = (-o31.halfWindowPanAtZoom(e28) - a29.descensionFactor * Math.LN2 * o31.compared.pan + o31.halfWindowPanAtZoom(o31.compared.targetZoom)) / o31.halfWindowPanAtZoom(1);
  return -o31.halfWindowSize * n32 * t28 * i29 * d21 + o31.halfWindowSize * n32 * t28 * i29 * c29 / (r31 * r31) + o31.halfWindowSize * t28 * i29 * d21 * c29 / e28;
}
function h15(o31, e28, a29) {
  const n32 = e28 - o31.compared.targetZoom, t28 = 1 / n32, i29 = 1 / e28, r31 = Math.log(e28 / o31.compared.targetZoom), d21 = (o31.halfWindowPanAtZoom(e28) + a29.descensionFactor * Math.LN2 * o31.compared.pan - o31.halfWindowPanAtZoom(o31.compared.targetZoom)) / o31.halfWindowPanAtZoom(1);
  return o31.halfWindowSize * t28 * (-2 * t28 * i29 * d21 - 2 * t28 * r31 + 2 * i29 + 2 * r31 * d21 / (n32 * n32) - d21 / (e28 * e28)) / (o31.desiredPixelFlow * Math.LN2);
}
function s28(o31, e28) {
  return o31.halfWindowSize * Math.log(e28 / o31.compared.targetZoom) / (o31.desiredPixelFlow * Math.LN2);
}
function f13(o31, e28) {
  return o31.halfWindowSize / (e28 * o31.desiredPixelFlow * Math.LN2);
}
function w6(o31, e28) {
  return -o31.halfWindowSize / (e28 * e28 * o31.desiredPixelFlow * Math.LN2);
}
function p21(o31) {
  const e28 = o31.compared.sourceZoom - o31.compared.targetZoom;
  if (0 === e28) return o31.compared.pan * o31.halfWindowSize / (o31.desiredPixelFlow * o31.halfWindowPanAtZoom(o31.compared.sourceZoom));
  const a29 = Math.LN2 * o31.compared.pan, n32 = e28, t28 = o31.halfWindowPanAtZoom(n32), i29 = o31.halfWindowSize * Math.log(o31.compared.sourceZoom / o31.compared.targetZoom) / (o31.desiredPixelFlow * Math.LN2 * t28);
  return o31.compared.sourceZoom <= o31.compared.targetZoom ? i29 * (a29 - t28) : i29 * (a29 + t28);
}

// node_modules/@arcgis/core/views/animation/pointToPoint/apex/planning.js
function f14(f18, Z3) {
  let b8 = D3(f18, Z3);
  const h20 = { ascensionFactor: null != Z3.ascensionFactor ? Z3.ascensionFactor : 0.5, descensionFactor: null != Z3.descensionFactor ? Z3.descensionFactor : 0.5 }, M5 = 0 === h20.ascensionFactor, N = 0 === h20.descensionFactor, P7 = M5 ? n27 : o26, g16 = M5 ? t23 : e24, k4 = M5 ? i27 : a23, j8 = N ? s28 : l19, w8 = N ? f13 : m19, z4 = N ? w6 : h15, A5 = (o31) => P7(f18, o31, h20) + r27(f18, o31, h20) + j8(f18, o31, h20), I5 = (o31) => g16(f18, o31, h20) + d15(f18, o31, h20) + w8(f18, o31, h20), S4 = (o31) => k4(f18, o31, h20) + c19(f18, o31, h20) + z4(f18, o31, h20);
  let q2 = A5(b8);
  const v6 = p21(f18);
  let y10;
  const B4 = Z3.maximumIterations || 20, C5 = null != Z3.maximumDistance ? Z3.maximumDistance : 1 / 0;
  for (y10 = 0; y10 < B4; y10++) {
    const o31 = Z3.desiredSlope ?? 1e-6;
    let e28 = I5(b8);
    Math.abs(e28) > o31 && (e28 += o31);
    const n32 = e28 / S4(b8);
    if (isNaN(n32) || b8 >= C5 && n32 < 0) {
      if (!isFinite(C5)) return null;
      b8 = C5, q2 = A5(b8);
      break;
    }
    if (b8 -= n32, b8 <= f18.compared.sourceZoom || b8 <= f18.compared.targetZoom) return null;
    const a29 = A5(b8);
    if (Math.abs(a29 - q2) / q2 <= 5e-3) break;
    q2 = a29;
  }
  const E6 = 0.3;
  return isNaN(q2) || q2 > v6 * (1 - E6) || b8 <= f18.compared.sourceZoom || b8 <= f18.compared.targetZoom ? null : b8;
}
function D3(o31, e28) {
  const n32 = Math.max(o31.compared.sourceZoom, o31.compared.targetZoom), a29 = o31.source.zoomAtPixelsPerPan(o31.desiredPixelFlow / o31.compared.pan) / 2;
  return a29 < n32 ? null != e28.maximumDistance ? n32 + (e28.maximumDistance - n32) / 2 : 1.5 * n32 : e28.maximumDistance ? Math.min(e28.maximumDistance, a29) : a29;
}

// node_modules/@arcgis/core/views/animation/pointToPoint/apex/Path.js
var s29 = class extends e22 {
  constructor(i29, n32) {
    super(), this._preallocSegments = [new o25(), new o25(), new o25()], this._ascensionSegment = null, this._descensionSegment = null, this.update(i29, n32);
  }
  update(i29, n32) {
    if (!i29) return;
    this.definition ? this.definition.copyFrom(i29) : this.definition = i29.clone();
    const e28 = n32?.apex ? f14(i29, n32.apex) : null;
    this.segments.length = 0, this._ascensionSegment = null, this._descensionSegment = null, e28 ? this._updateWithApex(e28, n32?.apex) : this._updateWithoutApex();
  }
  segmentInterpolateComponentsAt(e28, t28, o31) {
    e28.interpolateComponentsAt(t28, o31), e28 === this._ascensionSegment ? o31.zoom = o23(o31.zoom) : e28 === this._descensionSegment && (o31.zoom = i26(o31.zoom));
  }
  _updateWithApex(i29, n32) {
    const [e28, t28, o31] = this._preallocSegments, s33 = n32?.ascensionFactor ?? 0.5, d21 = Math.min(1 - s33, null != n32?.ascensionFactor && null != n32.descensionFactor ? n32.descensionFactor : 0.5), a29 = 1 - s33 - d21;
    e28.definition ? e28.definition.copyFrom(this.definition) : e28.definition = this.definition.clone(), e28.definition.compared.targetZoom = i29, e28.definition.compared.pan = this.definition.compared.pan * s33, e28.definition.compared.rotate = this.definition.compared.rotate * s33, e28.definition.segmentEnd = s33, e28.update(), this._ascensionSegment = e28, this.segments.push(e28), a29 > 0 && (t28.definition ? t28.definition.copyFrom(this.definition) : t28.definition = this.definition.clone(), t28.definition.copyFrom(this.definition), t28.definition.compared.sourceZoom = i29, t28.definition.compared.targetZoom = i29, t28.definition.compared.pan = this.definition.compared.pan * a29, t28.definition.compared.rotate = this.definition.compared.rotate * a29, t28.definition.segmentStart = e28.definition.segmentEnd, t28.definition.segmentEnd = e28.definition.segmentEnd + a29, t28.update(), this.segments.push(t28)), o31.definition ? o31.definition.copyFrom(this.definition) : o31.definition = this.definition.clone(), o31.definition.compared.sourceZoom = i29, o31.definition.compared.pan = this.definition.compared.pan * d21, o31.definition.compared.rotate = this.definition.compared.rotate * d21, o31.definition.segmentStart = s33 + a29, o31.update(), this._descensionSegment = o31, this.segments.push(o31);
  }
  _updateWithoutApex() {
    const [i29] = this._preallocSegments;
    i29.update(this.definition), this.segments.push(i29);
  }
};

// node_modules/@arcgis/core/views/animation/pointToPoint/Animation.js
var h16 = new t22();
var p22 = class {
  get time() {
    return this._time;
  }
  get isLinear() {
    return 1 === this.path.segments.length;
  }
  constructor(i29) {
    this._time = n2(0), this._easing = k3, this.definition = new r26(i29), this.path = new s29();
  }
  update(t28, a29, o31) {
    this.definition.update(t28, a29, o31), this.path.update(this.definition, o31), this._time = this._applyTimeSettings(r4(isFinite(this.path.time) ? this.path.time : t3(0)), o31), this._easing = o31.easing ?? (this._time >= 1e3 ? k3 : I4);
  }
  cameraAt(t28, i29) {
    t28 = Math.min(Math.max(0, t28), 1), t28 = this._normalizedEasing(t28);
    const e28 = this.path.interpolateComponentsAt(t28, h16);
    i29.interpolate(this.definition.source, this.definition.target, e28);
  }
  _normalizedEasing(t28) {
    const i29 = this._easing(0, this._time), e28 = this._easing(1, this._time);
    return (this._easing(t28, this._time) - i29) / (e28 - i29);
  }
  _applyTimeSettings(i29, e28) {
    const n32 = null != e28.speedFactor ? e28.speedFactor : 1, s33 = e28.minDuration ?? o24.minDuration / n32, a29 = e28.maxDuration ?? o24.maxDuration / n32;
    return i29 = null != e28.duration ? n2(e28.duration) : n2(Math.min(Math.max(i29 / n32, s33), a29));
  }
};

// node_modules/@arcgis/core/views/2d/AnimationManager.js
var f15 = 2e3;
var g12 = 64;
var j7 = class {
  constructor(t28) {
    this._view = t28, this._animation = new p22(() => new a21(this._view)), this._current = new a21(this._view);
  }
  get _source() {
    return this._animation.definition.source;
  }
  get _target() {
    return this._animation.definition.target;
  }
  get duration() {
    return this._animation.time;
  }
  get animation() {
    return this._animation;
  }
  update(t28, i29, e28 = {}) {
    Z(this._current.viewpoint, t28), Z(this._source.viewpoint, t28), Z(this._target.viewpoint, i29), this._animation.update(this._source, this._target, e28);
  }
  applyRatio(t28, i29) {
    this._animation.cameraAt(i29, this._current), Z(t28, this._current.viewpoint);
  }
};
var y7 = class extends b2 {
  constructor(t28) {
    super(t28), this._animation = null, this._destinationViewState = new f10(), this.updateFunction = null, this.easing = H2.ease, this.viewpoint = new m5({ targetGeometry: new _(), scale: 0, rotation: 0 }), this._updateTask = F({ postRender: this._postRender.bind(this) }), this._updateTask.pause(), this._transition = new j7(t28.view);
  }
  destroy() {
    this._updateTask = l(this._updateTask);
  }
  get animation() {
    return this._animation;
  }
  set animation(t28) {
    this._animation = t28, this.view.animation = t28;
  }
  animate(t28, i29, e28) {
    this.stop();
    const n32 = this.viewpoint;
    Z(n32, i29);
    const s33 = t28.target;
    this._transition.update(this.viewpoint, s33, { apex: { maximumDistance: Math.min(Math.min(i29.scale, s33.scale) * g12, this.view.constraints.effectiveMinScale), desiredSlope: 5e-8 }, duration: e28?.duration, maxDuration: "auto" === e28?.animationMode ? n2(1 / 0) : e28?.maxDuration ?? r25.maxDuration, speedFactor: e28?.speedFactor, easing: ("string" == typeof e28?.easing ? H2[e28.easing] : e28?.easing) || this.easing }), "auto" === e28?.animationMode && (this._destinationViewState.copy(this.view.state), this._destinationViewState.viewpoint = s33, T2(this._transition.animation, e28, this.view.state, this._destinationViewState) || this._transition.update(this.viewpoint, s33, { duration: n2(0) }));
    const o31 = () => {
      this.animation === t28 && this._updateTask && ("finished" === t28.state && (this._transition.applyRatio(this.viewpoint, 1), this.view.state && (this.view.state.viewpoint = this.viewpoint.clone())), this.animation = null, this.updateFunction = null);
    };
    return t28.when(o31, o31), this._startTime = performance.now(), this._updateTask.resume(), this.animation = t28, t28;
  }
  animateContinuous(t28, i29) {
    this.stop(), this.updateFunction = i29, this.viewpoint = t28;
    const e28 = new a12({ target: t28.clone() }), n32 = () => {
      this.animation === e28 && this._updateTask && (this.animation = null, this.updateFunction = null);
    };
    return e28.when(n32, n32), this._startTime = performance.now(), this._updateTask.resume(), this.animation = e28, e28;
  }
  stop() {
    this.animation && (this.animation.stop(), this.animation = null, this.updateFunction = null);
  }
  _postRender(t28) {
    const i29 = this.animation;
    if (i29 && i29.state !== a12.State.STOPPED) {
      if (this.updateFunction) this.updateFunction(this.viewpoint, t28.deltaTime), this.animation?.update(this.viewpoint);
      else {
        const t29 = performance.now() - this._startTime, i30 = this._transition.duration, e28 = i30 > 0 ? t29 / i30 : 1, n32 = e28 >= 1;
        this._transition.applyRatio(this.viewpoint, e28), n32 && this.animation?.finish();
      }
      this.view.state && (this.view.state.viewpoint = this.viewpoint.clone());
    } else this._updateTask.pause();
  }
};
function T2(t28, i29, e28, n32) {
  if (null != i29?.duration) return true;
  const { time: s33, isLinear: a29 } = t28, r31 = i29?.speedFactor || 1;
  if (s33 > (i29?.maxDuration ?? r25.maxDuration / r31)) return false;
  if (a29) {
    const t29 = 1.5, i30 = n8(), a30 = c5(...n32.toScreen(i30, ...e28.center)), m26 = c5(...e28.toScreen(i30, ...n32.center)), h20 = null != m26 && m26.x > -1 * e28.size[0] && m26.x < (t29 + 0.5) * e28.size[0] && m26.y > -1 * e28.size[1] && m26.y < (t29 + 0.5) * e28.size[1], u18 = null != a30 && a30.x > -1 * n32.size[0] && a30.x < (t29 + 0.5) * n32.size[0] && a30.y > -1 * n32.size[1] && a30.y < (t29 + 0.5) * n32.size[1];
    if (s33 > f15 / r31 && !h20 && !u18) return false;
  }
  return true;
}
r([m2()], y7.prototype, "easing", void 0), r([m2()], y7.prototype, "view", void 0), r([m2()], y7.prototype, "viewpoint", void 0), y7 = r([a("esri.views.2d.AnimationManager")], y7);
var x3 = y7;

// node_modules/@arcgis/core/views/2d/layerViewModuleImportUtils.js
function r28() {
  return Promise.all([import("./webglDeps-7FOIOWLZ.js"), import("./mapViewDeps-ENOR75OZ.js")]);
}
var a24 = () => r28().then(() => import("./TileLayerView2D-U64LSDBS.js"));
var t24 = () => r28().then(() => import("./FeatureLayerView2D-UP3XDC77.js"));
var i28 = { "base-dynamic": () => r28().then(() => import("./BaseDynamicLayerView2D-O6ZFRFCS.js")), "base-tile": a24, "bing-maps": a24, catalog: () => r28().then(() => import("./CatalogLayerView2D-7WUMXWWF.js")), "catalog-dynamic-group": () => r28().then(() => import("./CatalogDynamicGroupLayerView2D-UXMNV77X.js")), "catalog-footprint": () => r28().then(() => import("./CatalogFootprintLayerView2D-O5J26PKT.js")), csv: t24, "geo-rss": () => r28().then(() => import("./GeoRSSLayerView2D-MMEMERHI.js")), feature: t24, geojson: t24, parquet: t24, graphics: () => r28().then(() => import("./GraphicsLayerView2D-L3XHHNRF.js")), group: () => r28().then(() => import("./GroupLayerView2D-ZMRYUGUE.js")), imagery: () => r28().then(() => import("./ImageryLayerView2D-SDMZTG2F.js")), "imagery-tile": () => r28().then(() => import("./ImageryTileLayerView2D-WBEZT2P5.js")), kml: () => r28().then(() => import("./KMLLayerView2D-4WLPMNWS.js")), "knowledge-graph": () => r28().then(() => import("./KnowledgeGraphLayerView2D-6JZ66RDV.js")), "link-chart": () => r28().then(() => import("./KnowledgeGraphLayerView2D-6JZ66RDV.js")), "knowledge-graph-sublayer": t24, "map-image": () => r28().then(() => import("./MapImageLayerView2D-J3JCH4PN.js")), "map-notes": () => r28().then(() => import("./MapNotesLayerView2D-YI5B6EWD.js")), media: () => r28().then(() => import("./MediaLayerView2D-PNQBOQ7C.js")), "ogc-feature": () => r28().then(() => import("./OGCFeatureLayerView2D-TNAHTSN6.js")), "open-street-map": a24, "oriented-imagery": t24, route: () => r28().then(() => import("./RouteLayerView2D-WWMCM3DK.js")), stream: () => r28().then(() => import("./StreamLayerView2D-EQJMM6ZX.js")), "subtype-group": () => r28().then(() => import("./SubtypeGroupLayerView2D-HRGEAVQC.js")), tile: a24, "vector-tile": () => r28().then(() => import("./VectorTileLayerView2D-2D3MMNJA.js")), video: () => r28().then(() => import("./VideoLayerView2D-5MYBIVAT.js")), wcs: () => r28().then(() => import("./ImageryTileLayerView2D-WBEZT2P5.js")), "web-tile": a24, wfs: t24, wms: () => r28().then(() => import("./WMSLayerView2D-BOUXY7VC.js")), wmts: () => r28().then(() => import("./WMTSLayerView2D-YU2QDAOJ.js")), "line-of-sight": null, "base-elevation": null, "building-scene": null, dimension: null, elevation: null, "integrated-mesh": null, "integrated-mesh-3dtiles": null, "point-cloud": null, viewshed: null, voxel: null, scene: null, unknown: null, unsupported: null };
function s30(r31) {
  const a29 = r31.declaredClass ? r31.declaredClass.slice(r31.declaredClass.lastIndexOf(".") + 1) : "Unknown", t28 = a29.replaceAll(/([a-z])([A-Z])/g, "$1-$2").toLowerCase();
  return new s(`${t28}:view-not-supported`, `${a29} is not supported in 2D`);
}
var l20 = { hasLayerViewModule: (e28) => null != i28[e28.type], importLayerView: (e28) => {
  const r31 = i28[e28.type];
  if (null == r31) throw s30(e28);
  return r31(e28);
} };

// node_modules/@arcgis/core/views/2d/layers/features/support/TileStore.js
var d16 = { added: [], removed: [] };
var a25 = /* @__PURE__ */ new Set();
var c20 = new e8(0, 0, 0, 0);
function m20(e28, t28) {
  const s33 = d4(t28);
  if (!s33) return null;
  const [i29, r31] = s33.valid;
  return e28[2] > r31 ? [u4([e28[0], e28[1], r31, e28[3]]), u4([i29, e28[1], i29 + e28[2] - r31, e28[3]])] : e28[0] < i29 ? [u4([i29, e28[1], e28[2], e28[3]]), u4([r31 - (i29 - e28[0]), e28[1], r31, e28[3]])] : null;
}
var u13 = class extends o7 {
  constructor(e28) {
    super(), this._tiles = /* @__PURE__ */ new Map(), this._index = i7(9, has("esri-csp-restrictions") ? (e29) => ({ minX: e29.bounds[0], minY: e29.bounds[1], maxX: e29.bounds[2], maxY: e29.bounds[3] }) : [".bounds[0]", ".bounds[1]", ".bounds[2]", ".bounds[3]"]), this.tiles = [], this.tileScheme = e28;
  }
  destroy() {
    this.clear();
  }
  clear() {
    this.tiles.length = 0, this._tiles.clear(), this._index.clear();
  }
  has(e28) {
    return this._tiles.has(e28);
  }
  get(e28) {
    return this._tiles.get(e28);
  }
  getIntersectingTiles(e28) {
    if (!e28 || 0 === x(e28) || 0 === s9(e28)) return [];
    const t28 = m20(e28, this.tileScheme.spatialReference);
    return null != t28 ? [.../* @__PURE__ */ new Set([...this.boundsIntersections(t28[0]), ...this.boundsIntersections(t28[1])])] : this.boundsIntersections(e28);
  }
  boundsIntersections(e28) {
    return this._index.search({ minX: e28[0], minY: e28[1], maxX: e28[2], maxY: e28[3] });
  }
  updateTiles(e28) {
    const t28 = { added: [], removed: [] };
    for (const s33 of e28.added) if (!this.has(s33)) {
      const e29 = new r10(this.tileScheme, s33);
      this._tiles.set(s33, e29), this._index.insert(e29), t28.added.push(e29);
    }
    for (const s33 of e28.removed) if (this.has(s33)) {
      const e29 = this.get(s33);
      this._tiles.delete(s33), this._index.remove(e29), t28.removed.push(e29);
    }
    this.tiles.length = 0, this._tiles.forEach((e29) => this.tiles.push(e29)), (t28.added.length || t28.removed.length) && this.emit("update", t28);
  }
  setViewState(e28) {
    const t28 = this.tileScheme.getTileCoverage(e28, 0);
    if (!t28) return;
    const { spans: s33, lodInfo: i29 } = t28, { level: o31 } = i29;
    if (s33.length > 0) for (const { row: n32, colFrom: l23, colTo: h20 } of s33) for (let e29 = l23; e29 <= h20; e29++) {
      const t29 = c20.set(o31, n32, i29.normalizeCol(e29), i29.getWorldForColumn(e29)).id;
      if (a25.add(t29), !this.has(t29)) {
        const e30 = new r10(this.tileScheme, t29);
        this._tiles.set(t29, e30), this._index.insert(e30), this.tiles.push(e30), d16.added.push(e30);
      }
    }
    for (let n32 = this.tiles.length - 1; n32 >= 0; n32--) {
      const e29 = this.tiles[n32];
      a25.has(e29.id) || (this._tiles.delete(e29.id), this.tiles.splice(n32, 1), this._index.remove(e29), d16.removed.push(e29));
    }
    (d16.added.length || d16.removed.length) && this.emit("update", d16), s11.pool.release(t28), a25.clear(), d16.added.length = 0, d16.removed.length = 0;
  }
};

// node_modules/@arcgis/core/views/2d/support/hitTestUtils.js
async function s31(e28, i29, s33) {
  const f18 = o12(i29) ? r11(e28, i29) : i29;
  if (!e28.ready || isNaN(f18.x) || isNaN(f18.y)) return { screenPoint: f18, results: [] };
  let d21 = /* @__PURE__ */ new Set();
  const y10 = /* @__PURE__ */ new Set();
  let u18 = false, h20 = null, g16 = null;
  s33?.include ? o27(s33.include, n28(e28, (e29) => {
    d21.add(e29), p23(e29, (e30) => y10.add(e30));
  }, (e29, r31) => {
    y10.add(e29), d21.add(r31);
  }, (e29) => {
    h20 || (h20 = /* @__PURE__ */ new Set()), h20.add(e29);
  }, (e29) => d21.add(e29), () => u18 = true)) : (u18 = true, d21 = new Set(e28.allLayerViews), d21.forEach((e29) => {
    p23(e29, (e30) => y10.add(e30));
  })), s33?.exclude && o27(s33.exclude, n28(e28, (e29) => {
    d21.delete(e29), p23(e29, (e30) => y10.delete(e30));
  }, (e29) => y10.delete(e29), (e29) => {
    g16 || (g16 = /* @__PURE__ */ new Set()), g16.add(e29);
  }));
  const m26 = e28.toMap(f18), w8 = e28.allLayerViews.filter((r31) => !r31.suspended && d21.has(r31) && r31.clips.every((r32) => m10(e28, r32, f18, m26))).reverse();
  let V4 = [...u18 ? e28.graphicsView.hitTest(m26).map((e29) => ({ type: "graphic", graphic: e29, layer: null, mapPoint: m26 })) : [], ...await Promise.all(w8.map((e29) => e29.hitTest(m26, f18)).toArray())].filter(L).flat().filter(L);
  return V4 = V4.filter((e29) => "graphic" !== e29.type || "subtype-group" !== e29.layer?.type || y10.has(e29.graphic.layer)), h20 && (V4 = V4.filter((e29) => !("graphic" in e29) || !e29.graphic || h20?.has(c21(e29.graphic)))), g16 && (V4 = V4.filter((e29) => !("graphic" in e29) || !e29.graphic || !g16?.has(c21(e29.graphic)))), { screenPoint: f18, results: V4 };
}
function n28(r31, i29, t28, a29, l23, s33) {
  return (n32) => {
    if (n32 instanceof d6) {
      if (n32.layer === r31) s33?.();
      else {
        const e28 = r31.allLayerViews.find((e29) => e29.layer === n32.layer);
        e28 && l23?.(e28);
      }
      a29(c21(n32));
    } else if ("layer" in n32 && "element" in n32) ;
    else if ("subtype-sublayer" === n32.type) {
      const e28 = r31.allLayerViews.find((e29) => e29.layer === n32.parent);
      e28 && t28(n32, e28);
    } else {
      const e28 = r31.allLayerViews.find((e29) => e29.layer === n32);
      e28 && i29(e28);
    }
  };
}
function o27(e28, r31) {
  if (e28) if (t(e28)) for (const t28 of e28) if (t(t28)) for (const e29 of t28) r31(e29);
  else r31(t28);
  else r31(e28);
}
function c21(e28) {
  const r31 = e28.getObjectId();
  return r31 ? `${e28.layer?.uid ?? e28.sourceLayer?.uid ?? "MapView"}/${r31}` : `"MapView/${e28.uid}`;
}
function p23({ layer: e28 }, r31) {
  "subtype-group" === e28?.type && e28.sublayers.forEach((e29) => {
    r31(e29);
  });
}

// node_modules/@arcgis/core/views/2d/support/screenshotUtils.js
var e25 = { flipY: true, premultipliedAlpha: true };
async function o28(t28, n32) {
  const o31 = await a26(t28, n32), { format: r31, quality: l23 } = c9(n32?.format, n32?.quality);
  return a4(o31, { format: r31, quality: l23 }, e25);
}
async function r29(i29, h20) {
  const n32 = await a26(i29, h20);
  return r12(n32, e25);
}
function a26(t28, i29) {
  const h20 = d17(i29 || {}, u14(t28.stage, t28.size), t28.size, t28.padding), n32 = l21(i29, t28.allLayerViews);
  return t28.stage.takeScreenshot(h20, n32, t28.backgroundColor, i29?.rotation);
}
function l21(t28 = {}, i29) {
  if (!t28.layers) return;
  const h20 = [];
  return t28.layers.forEach((t29) => {
    const n32 = i29.find((i30) => i30.layer.id === t29.id);
    n32?.container && h20.push(n32.container);
  }), h20;
}
function u14(t28, i29) {
  return Math.min(4, s14(i29, Math.min(4096, t28.context.parameters.maxTextureSize)));
}
function d17(t28, i29, h20, n32) {
  t28.ignorePadding && (n32 = { left: 0, right: 0, top: 0, bottom: 0 });
  let e28 = null;
  null != t28.width && null != t28.height ? e28 = [t28.width, t28.height] : null == t28.width && null != t28.height ? e28 = [t28.height, t28.height] : null != t28.width && null == t28.height ? e28 = [t28.width, t28.width] : null == t28.width && null == t28.height && (e28 = null);
  const o31 = h20[0] - (n32.left + n32.right), r31 = h20[1] - (n32.top + n32.bottom);
  let a29, l23, u18 = t28.area || { x: 0, y: 0, width: o31, height: r31 };
  if (e28) {
    const t29 = o31 / r31, i30 = e28[0] / e28[1];
    if (i30 > t29) {
      const t30 = u18.width / i30;
      u18 = { x: u18.x, y: Math.round(u18.y + (u18.height - t30) / 2), width: u18.width, height: Math.round(t30) };
    } else {
      const t30 = u18.height * i30;
      u18 = { x: Math.round(u18.x + (u18.width - t30) / 2), y: u18.y, width: Math.round(t30), height: u18.height };
    }
  } else e28 = [u18.width, u18.height];
  return e28[0] > u18.width ? (a29 = Math.min(e28[0] / u18.width, i29), l23 = e28[0] / u18.width / a29) : (a29 = 1, l23 = e28[0] / u18.width), { cropArea: { x: Math.round((u18.x + n32.left) * a29), y: Math.round((u18.y + n32.top) * a29), width: Math.round(u18.width * a29), height: Math.round(u18.height * a29) }, outputScale: l23, resolutionScale: a29 };
}

// node_modules/@arcgis/core/views/support/WebGLRequirements.js
function t25(t28) {
  const o31 = t7();
  return o31.available ? "3d" === t28 && o31.majorPerformanceCaveat ? new s("webgl:major-performance-caveat-detected", `Your WebGL implementation (${o31.unmaskedRenderer}) doesn't seem to support hardware accelerated rendering. Check your browser settings or if your GPU is in a blocklist.`) : o31.supportsHighPrecisionFragment ? o31.supportsVertexShaderSamplers ? null : new s("webgl:vertex-shader-samplers-required", "WebGL support for vertex shader samplers is required but not supported.") : new s("webgl:high-precision-fragment-required", "WebGL support for high precision fragment shaders is required but not supported.") : new s("webgl:required", "WebGL2 is required but not supported.", new Error().stack);
}

// node_modules/@arcgis/core/views/ui/Component.js
function n29(t28) {
  return t28 && "nodeType" in t28;
}
function d18(t28) {
  return t28 && "function" == typeof t28.render;
}
var c22 = { component: "esri-component" };
var p24 = class extends b2 {
  constructor() {
    super(...arguments), this.widget = null;
  }
  destroy() {
    this.node = null, this.widget?.destroy();
  }
  get id() {
    return this._get("id") ?? this.widget?.id ?? this.node?.id;
  }
  set id(t28) {
    this._set("id", t28);
  }
  set node(t28) {
    const o31 = this._get("node");
    t28 !== o31 && (t28 && t28.classList.add(c22.component), o31 && o31.classList.remove(c22.component), this._set("node", t28));
  }
  castNode(t28) {
    return this.widget?.destroy(), t28 ? "string" == typeof t28 || n29(t28) ? (this._set("widget", null), n3(t28)) : (d18(t28) && !t28.domNode && (t28.domNode = document.createElement("div")), this._set("widget", t28), t28.domNode) : (this._set("widget", null), null);
  }
};
r([m2()], p24.prototype, "id", null), r([m2()], p24.prototype, "node", null), r([s5("node")], p24.prototype, "castNode", null), r([m2({ readOnly: true })], p24.prototype, "widget", void 0), p24 = r([a("esri.views.ui.Component")], p24);
var m21 = p24;

// node_modules/@arcgis/core/views/ui/UI.js
var f16 = { left: 0, top: 0, bottom: 0, right: 0 };
var _9 = { bottom: 30, top: 15, right: 15, left: 15 };
var g13 = "esri-ui";
var y8 = { ui: g13, corner: `${g13}-corner`, innerContainer: `${g13}-inner-container`, manualContainer: `${g13}-manual-container`, cornerContainer: `${g13}-corner-container`, topLeft: `${g13}-top-left`, topRight: `${g13}-top-right`, bottomLeft: `${g13}-bottom-left`, bottomRight: `${g13}-bottom-right` };
function C4(t28) {
  return t28 && !t28._started && "function" == typeof t28.postMixInProperties && "function" == typeof t28.buildRendering && "function" == typeof t28.postCreate && "function" == typeof t28.startup;
}
function v4(t28) {
  return 0 === t28 ? "0" : `${t28}px`;
}
function b6(t28) {
  const o31 = "object" == typeof t28 && null !== t28 && Object.getPrototypeOf(t28);
  return (null === o31 || o31 === Object.prototype) && ("component" in t28 || "index" in t28 || "position" in t28) ? t28 : null;
}
function w7(t28, { top: o31, bottom: n32, left: e28, right: i29 }) {
  t28.style.top = o31, t28.style.bottom = n32, t28.style.left = e28, t28.style.right = i29;
}
var P6 = class extends o7.EventedAccessor {
  constructor(t28) {
    super(t28), this._cornerNameToContainerLookup = {}, this._positionNameToContainerLookup = {}, this._components = new Array(), this._componentMap = /* @__PURE__ */ new Map(), this._removeWidgetHandleKey = Symbol("componentOnRemoveSymbol"), this._locale = i2(), this.view = null, this._applyViewPadding = () => {
      const t29 = this.container;
      t29 && w7(t29, this._toPixelPosition(this._getViewPadding()));
    }, this._applyUIPadding = () => {
      const t29 = this._innerContainer;
      t29 && w7(t29, this._toPixelPosition(this.padding));
    }, this._initContainers();
  }
  initialize() {
    this.addHandles([l3(() => [this.view?.padding, this.container], this._applyViewPadding, h2), l3(() => this.padding, this._applyUIPadding, h2), l3(() => [this.container, this._locale], ([t28, o31]) => {
      t28 && t28.setAttribute("lang", o31);
    }, h2), d3((t28) => {
      this._locale = t28;
    })]);
  }
  destroy() {
    this.container = null;
    for (const t28 of this._components) t28.destroy();
    this._components.length = 0, this._componentMap.clear();
  }
  set container(t28) {
    const o31 = this._get("container");
    t28 !== o31 && (t28 && (t28.classList.add(y8.ui), i4(t28), this._attachContainers(t28)), o31 && (o31.classList.remove(y8.ui), w7(o31, { top: "", bottom: "", left: "", right: "" }), o31.textContent = ""), this._set("container", t28));
  }
  get height() {
    const t28 = this.view?.height ?? 0;
    if (0 === t28) return t28;
    const o31 = this._getViewPadding(), { top: n32, bottom: e28 } = o31;
    return Math.max(t28 - n32 - e28, 0);
  }
  get padding() {
    return this._get("padding");
  }
  set padding(t28) {
    this._overrideIfSome("padding", t28);
  }
  castPadding(t28) {
    return "number" == typeof t28 ? { bottom: t28, top: t28, right: t28, left: t28 } : { ..._9, ...t28 };
  }
  get width() {
    const t28 = this.view?.width ?? 0;
    if (0 === t28) return t28;
    const o31 = this._getViewPadding(), { left: n32, right: e28 } = o31;
    return Math.max(t28 - n32 - e28, 0);
  }
  add(t28, o31) {
    let n32, e28, i29;
    if (Array.isArray(t28)) return void t28.forEach((t29) => this.add(t29, o31));
    const r31 = b6(t28);
    r31 && ({ index: n32, position: o31, component: t28, key: e28 } = r31), o31 && "object" == typeof o31 && ({ index: n32, key: e28, position: o31, internal: i29 } = o31), !t28 || o31 && !this._isValidPosition(o31) || this._add(t28, o31, n32 ?? this._getNumComponentsAtPosition(o31), e28, i29);
  }
  remove(t28, o31) {
    if (!t28) return;
    if (Array.isArray(t28)) return t28.map((t29) => this.remove(t29, o31));
    const n32 = this._find(t28);
    if (n32) {
      const t29 = this._componentMap.get(n32);
      if (!t29 || t29.key !== o31) return;
      const e28 = this._components.indexOf(n32), i29 = n32.node.parentNode;
      return i29?.removeChild(n32.node), this._componentMap.delete(n32), n32.widget?.removeHandlesReference(this._removeWidgetHandleKey), this._components.forEach((o32) => {
        const n33 = this._componentMap.get(o32);
        n33 && n33.position === t29.position && n33.index > t29.index && n33.index--;
      }), this._components.splice(e28, 1)[0];
    }
  }
  empty(t28, o31 = { removeInternal: false }) {
    if (Array.isArray(t28)) {
      for (const n33 of t28) this.empty(n33, o31);
      return;
    }
    const n32 = this._positionNameToContainerLookup[t28 ?? "manual"], e28 = Array.prototype.slice.call(n32.children).map((t29) => this._findByNode(t29)).filter((t29) => {
      if (null == t29) return false;
      return !(this._componentMap.get(t29)?.internal ?? false) || o31.removeInternal;
    });
    for (const i29 of e28) this.remove(i29);
  }
  move(t28, o31) {
    if (Array.isArray(t28) && t28.forEach((t29) => this.move(t29, o31)), !t28) return;
    let n32;
    const e28 = b6(t28) || b6(o31);
    if (e28 && (n32 = e28.index, o31 = e28.position, t28 = e28.component || t28), o31 && !this._isValidPosition(o31)) return;
    const i29 = this.remove(t28);
    i29 && this.add(i29, { position: o31, index: n32 });
  }
  find(t28) {
    if (!t28) return null;
    const o31 = this._findById(t28);
    return o31 && (o31.widget || o31.node);
  }
  getComponents(t28, o31 = { includeInternal: false }) {
    return t28 ? Array.isArray(t28) ? t28.flatMap((t29) => this._getComponentsAtPosition(t29, o31)) : this._getComponentsAtPosition(t28, o31) : this._components.filter((t29) => o31.includeInternal || !this._componentMap.get(t29)?.internal).map(({ widget: t29, node: o32 }) => t29 ?? o32);
  }
  getPosition(t28) {
    for (const o31 in this._positionNameToContainerLookup) {
      if (this._positionNameToContainerLookup[o31].contains(t28)) return o31;
    }
    return null;
  }
  _add(t28, n32, e28, r31, s33) {
    t28 instanceof m21 || (t28 = new m21({ node: t28 }));
    const { widget: a29 } = t28;
    null != a29 && a29 instanceof b2 && a29.addHandles(e(() => {
      queueMicrotask(() => this.remove(t28));
    }), this._removeWidgetHandleKey);
    this._components.some((t29) => this._componentMap.get(t29)?.position === n32 && this._componentMap.get(t29)?.index === e28) && this._components.forEach((t29) => {
      const o31 = this._componentMap.get(t29);
      o31 && o31.position === n32 && o31.index >= e28 && o31.index++;
    }), this._place({ component: t28, position: n32, index: e28 }), this._components.push(t28), this._componentMap.set(t28, { key: r31, position: n32, internal: s33, index: e28 });
  }
  _find(t28) {
    return t28 ? t28 instanceof m21 ? this._findByComponent(t28) : "string" == typeof t28 ? this._findById(t28) : "domNode" in t28 ? this._findByNode(t28.domNode) : this._findByNode(t28) : null;
  }
  _getViewPadding() {
    return this.view?.padding ?? f16;
  }
  _attachContainers(t28) {
    t28.appendChild(this._innerContainer), t28.appendChild(this._manualContainer);
  }
  _initContainers() {
    const t28 = document.createElement("div");
    t28.classList.add(y8.innerContainer, y8.cornerContainer);
    const o31 = document.createElement("div");
    o31.classList.add(y8.innerContainer, y8.manualContainer);
    const n32 = document.createElement("div");
    n32.classList.add(y8.topLeft, y8.corner), t28.appendChild(n32);
    const e28 = document.createElement("div");
    e28.classList.add(y8.topRight, y8.corner), t28.appendChild(e28);
    const i29 = document.createElement("div");
    i29.classList.add(y8.bottomLeft, y8.corner), t28.appendChild(i29);
    const r31 = document.createElement("div");
    r31.classList.add(y8.bottomRight, y8.corner), t28.appendChild(r31), this._innerContainer = t28, this._manualContainer = o31;
    const s33 = L3();
    this._cornerNameToContainerLookup = { "top-left": n32, "top-right": e28, "bottom-left": i29, "bottom-right": r31, "top-leading": s33 ? e28 : n32, "top-trailing": s33 ? n32 : e28, "bottom-leading": s33 ? r31 : i29, "bottom-trailing": s33 ? i29 : r31 }, this._positionNameToContainerLookup = { manual: o31, ...this._cornerNameToContainerLookup };
  }
  _isValidPosition(t28) {
    return !!this._positionNameToContainerLookup[t28];
  }
  _place(t28) {
    const o31 = t28.position ?? "manual", { component: n32, index: e28 } = t28, i29 = this._positionNameToContainerLookup[o31], r31 = null != e28 && e28 > -1;
    if (C4(n32.widget) && n32.widget.startup(), !r31) return void i29.appendChild(n32.node);
    const s33 = Array.from(i29.children);
    if (0 !== s33.length) {
      for (const t29 of s33) {
        const o32 = this._findByNode(t29);
        if (o32 && e28 < (this._componentMap.get(o32)?.index ?? 0)) return void t29.parentNode?.insertBefore(n32.node, t29);
      }
      i29.appendChild(n32.node);
    } else i29.appendChild(n32.node);
  }
  _toPixelPosition(t28) {
    return { top: v4(t28.top), left: v4(t28.left), right: v4(t28.right), bottom: v4(t28.bottom) };
  }
  _findByComponent(t28) {
    return this._components.find((o31) => o31 === t28) ?? null;
  }
  _findById(t28) {
    return this._components.find(({ id: o31 }) => o31 === t28) ?? null;
  }
  _findByNode(t28) {
    return t28 ? this._components.find(({ node: o31 }) => o31 === t28) : null;
  }
  _getComponentsAtPosition(t28, o31) {
    const e28 = this._positionNameToContainerLookup[t28];
    return Array.prototype.slice.call(e28.children).map((t29) => this._findByNode(t29)).filter(L).filter((t29) => o31.includeInternal || !this._componentMap.get(t29)?.internal).map(({ widget: t29, node: o32 }) => t29 ?? o32);
  }
  _getNumComponentsAtPosition(t28) {
    const o31 = this._positionNameToContainerLookup[t28];
    return o31?.children.length ?? 0;
  }
};
r([m2()], P6.prototype, "_locale", void 0), r([m2()], P6.prototype, "container", null), r([m2()], P6.prototype, "height", null), r([m2({ value: _9 })], P6.prototype, "padding", null), r([s5("padding")], P6.prototype, "castPadding", null), r([m2()], P6.prototype, "view", void 0), r([m2()], P6.prototype, "width", null), P6 = r([a("esri.views.ui.UI")], P6);
var x4 = P6;

// node_modules/@arcgis/core/views/3d/layers/Lyr3DWasm.js
var a27 = /* @__PURE__ */ new Map();
function l22(e28) {
  return a27.get(e28);
}

// node_modules/@arcgis/core/widgets/Attribution/AttributionViewModel.js
function f17(t28, e28) {
  return t28 && "copyright" in t28 && (!e28 || "function" == typeof t28.originOf && "user" === t28.originOf("copyright"));
}
function y9(t28, e28) {
  return t28.length !== e28.length || t28.some((t29, i29) => t29.text !== e28[i29].text);
}
function b7(t28, e28, i29) {
  if (!i29 || !e28) return;
  t28.find((t29) => t29.layerView === e28 && t29.text === i29) || t28.push({ text: i29, layerView: e28 });
}
function g14(t28) {
  return "bing-maps" === t28.type;
}
var A4 = [];
var _10 = class extends b2 {
  constructor(t28) {
    super(t28), this._clear = () => {
      this._fetchedAttributionData.clear(), this._pendingAttributions.clear(), this.removeHandles("suspension"), this.notifyChange("state");
    }, this._pendingAttributions = /* @__PURE__ */ new Set(), this._fetchedAttributionData = /* @__PURE__ */ new Map(), this.items = new V(), this.view = null, this._allLayerViewsChange = (t29) => {
      this.removeHandles("suspension"), this.removeHandles("visible-geometry-changed");
      const e28 = this.view?.allLayerViews;
      e28 && (this.addHandles(e28.map((t30) => l3(() => [t30.suspended, t30.layer?.attributionVisible], () => this._updateAttributionItems())).toArray(), "suspension"), e28.forEach((t30) => {
        "esri.views.3d.layers.Tiles3DLayerView3D" === t30.declaredClass && this.addHandles(t30.on("visible-geometry-changed", () => this._updateAttributionItems()), "visible-geometry-changed");
      })), t29?.removed && t29.removed.forEach((t30) => {
        this._pendingAttributions.delete(t30), this._fetchedAttributionData.delete(t30);
      }), this._updateAttributionItems();
    }, this.addHandles([a3(() => this.view?.allLayerViews, "change", (t29) => this._allLayerViewsChange(t29), { onListenerAdd: () => this._allLayerViewsChange(), onListenerRemove: this._clear }), f(() => true === this.view?.stationary, () => this._updateAttributionItems())]);
  }
  destroy() {
    this.view = null, this._fetchedAttributionData.clear(), this._pendingAttributions.clear(), this.items.removeAll();
  }
  get state() {
    return this.view?.ready ? this._pendingAttributions.size > 0 ? "loading" : "ready" : "disabled";
  }
  _updateAttributionItems() {
    const t28 = this.view, e28 = t28?.allLayerViews;
    if (A4.length = 0, !t28 || !e28) return void this._clear();
    e28.forEach((e29) => {
      if (e29.suspended || !e29.layer?.attributionVisible) return;
      const i30 = e29.layer;
      if (f17(i30, "user")) return void b7(A4, e29, i30.copyright);
      if (i30.hasAttributionData) {
        if (this._fetchedAttributionData.has(e29)) {
          const r32 = this._fetchedAttributionData.get(e29);
          return void (r32 ? b7(A4, e29, this._getDynamicAttribution(r32, t28, i30)) : f17(i30) && b7(A4, e29, i30.copyright));
        }
        return void this._fetchAttributionData(e29);
      }
      const r31 = "portalItem" in i30 ? i30.portalItem?.accessInformation : void 0;
      b7(A4, e29, r31 || i30.copyright);
    });
    const i29 = e28.find((t29) => "integrated-mesh-3dtiles" === t29.layer?.type);
    if (this.view && i29) {
      const t29 = l22(this.view);
      if (t29) {
        const e29 = t29.getAttributionText();
        for (let t30 = 0; t30 < e29.length; ++t30) b7(A4, i29, e29[t30]);
      }
    }
    y9(this.items, A4) && (this.items.removeAll(), this.items.addMany(A4)), A4.length = 0, this.notifyChange("state");
  }
  async _fetchAttributionData(t28) {
    if (this._pendingAttributions.has(t28)) return;
    this._pendingAttributions.add(t28);
    const e28 = await _2(t28.layer.fetchAttributionData());
    if (this._pendingAttributions.has(t28)) {
      const i29 = e28.ok ? this._createContributionIndex(e28.value, g14(t28.layer)) : null;
      this._pendingAttributions.delete(t28), this._fetchedAttributionData.set(t28, i29);
    }
    this._updateAttributionItems();
  }
  _createContributionIndex(t28, e28) {
    const i29 = t28.contributors, r31 = {};
    if (!i29) return r31;
    for (let s33 = 0; s33 < i29.length; s33++) {
      const t29 = i29[s33], o31 = t29.coverageAreas;
      if (!o31) return;
      for (const i30 of o31) {
        const o32 = i30.bbox, n32 = i30.zoomMin - (e28 && i30.zoomMin ? 1 : 0), a29 = i30.zoomMax - (e28 && i30.zoomMax ? 1 : 0), c29 = new z({ xmin: o32[1], ymin: o32[0], xmax: o32[3], ymax: o32[2], spatialReference: f2.WGS84 }), u18 = { extent: j3(c29), attribution: t29.attribution || "", score: null != i30.score ? i30.score : 100, id: s33 };
        for (let t30 = n32; t30 <= a29; t30++) r31[t30] ??= [], r31[t30].push(u18);
      }
    }
    return r31.maxKey = Math.max.apply(null, Object.keys(r31)), r31;
  }
  _getDynamicAttribution(t28, e28, i29) {
    const { extent: r31, scale: s33 } = e28;
    let o31 = i29.tileInfo?.scaleToZoom(s33) ?? 0;
    if (o31 = Math.min(t28.maxKey ?? 0, Math.round(o31)), !r31 || null == o31 || o31 <= -1) return "";
    const n32 = t28[o31], a29 = y(r31.center.clone().normalize(), f2.WebMercator), c29 = /* @__PURE__ */ new Set();
    return n32 ? n32.filter((t29) => {
      const e29 = t29.id, i30 = !c29.has(e29) && a29 && t29.extent && t5(t29.extent, a29);
      return i30 && c29.add(e29), i30;
    }).sort((t29, e29) => e29.score - t29.score || t29.objectId - e29.objectId).map((t29) => t29.attribution).join(", ") : "";
  }
};
r([m2({ readOnly: true, type: V })], _10.prototype, "items", void 0), r([m2({ readOnly: true })], _10.prototype, "state", null), r([m2()], _10.prototype, "view", void 0), _10 = r([a("esri.widgets.Attribution.AttributionViewModel")], _10);
var v5 = _10;

// node_modules/@arcgis/core/widgets/Attribution.js
var c23 = "esri-attribution";
var a28 = { base: c23, poweredBy: `${c23}__powered-by`, sources: `${c23}__sources`, open: `${c23}--open`, sourcesOpen: `${c23}__sources--open`, link: `${c23}__link` };
var h17 = class extends O {
  constructor(e28, t28) {
    super(e28, t28), this._isOpen = false, this._attributionTextOverflowed = false, this._prevSourceNodeHeight = 0, this._resizeObserver = new ResizeObserver((e29) => e29.forEach(({ target: e30 }) => this._checkSourceTextOverflow(e30))), this.itemDelimiter = " | ", this.messages = null, this.viewModel = new v5();
  }
  initialize() {
    this.addHandles(a3(() => this.viewModel?.items, "change", () => this.scheduleRender()));
  }
  destroy() {
    this._resizeObserver?.disconnect();
  }
  get _isInteractive() {
    return this._isOpen || this._attributionTextOverflowed;
  }
  get attributionText() {
    return this.viewModel.items.reduce((e28, t28) => (e28.includes(t28.text) || e28.push(t28.text), e28), []).join(this.itemDelimiter);
  }
  get icon() {
    return "description";
  }
  set icon(e28) {
    this._overrideIfSome("icon", e28);
  }
  get label() {
    return this.messages?.widgetLabel ?? "";
  }
  set label(e28) {
    this._overrideIfSome("label", e28);
  }
  get view() {
    return this.viewModel.view;
  }
  set view(e28) {
    this.viewModel.view = e28;
  }
  render() {
    const e28 = { [a28.open]: this._isOpen };
    return n4("div", { bind: this, class: this.classes(a28.base, e9.widget, e28), dir: "ltr", onclick: this._toggleState, onkeydown: this._toggleState }, this._renderSourcesNode(), this._renderPoweredBy());
  }
  _renderPoweredBy() {
    return n4("div", { class: a28.poweredBy }, "Powered by", " ", n4("a", { class: a28.link, href: "https://www.esri.com/", rel: "noreferrer", target: "_blank" }, "Esri"));
  }
  _renderSourcesNode() {
    const e28 = this._isOpen, t28 = this._isInteractive, i29 = t28 ? 0 : void 0, { attributionText: r31 } = this, s33 = { [a28.sourcesOpen]: e28, [e9.interactive]: t28 };
    return n4("div", { afterCreate: this._afterSourcesNodeCreate, bind: this, class: this.classes(a28.sources, s33), innerHTML: r31, tabIndex: i29 });
  }
  _afterSourcesNodeCreate(e28) {
    this._prevSourceNodeHeight = e28.clientWidth, this._resizeObserver.observe(e28);
  }
  _checkSourceTextOverflow(e28) {
    let t28 = false;
    const { clientHeight: i29, clientWidth: r31, scrollWidth: s33 } = e28, o31 = s33 > r31, n32 = this._attributionTextOverflowed !== o31;
    if (this._attributionTextOverflowed = o31, n32 && (t28 = true), this._isOpen) {
      const e29 = i29 < this._prevSourceNodeHeight;
      this._prevSourceNodeHeight = i29, e29 && (this._isOpen = false, t28 = true);
    }
    t28 && this.scheduleRender();
  }
  _toggleState() {
    this._isInteractive && (this._isOpen = !this._isOpen);
  }
};
r([m2()], h17.prototype, "_isOpen", void 0), r([m2()], h17.prototype, "_isInteractive", null), r([m2()], h17.prototype, "_attributionTextOverflowed", void 0), r([m2()], h17.prototype, "_prevSourceNodeHeight", void 0), r([m2({ readOnly: true, dependsOn: ["viewModel.items.length", "itemDelimiter"] })], h17.prototype, "attributionText", null), r([m2()], h17.prototype, "icon", null), r([m2()], h17.prototype, "itemDelimiter", void 0), r([m2()], h17.prototype, "label", null), r([m2(), e4("esri/widgets/Attribution/t9n/Attribution")], h17.prototype, "messages", void 0), r([m2()], h17.prototype, "view", null), r([m2({ type: v5 })], h17.prototype, "viewModel", void 0), r([t9()], h17.prototype, "_toggleState", null), h17 = r([a("esri.widgets.Attribution")], h17);
var u15 = h17;

// node_modules/@arcgis/core/widgets/Compass/utils.js
function e26(e28) {
  return e28?.spatialReference?.isWebMercator || e28?.spatialReference?.isGeographic || false;
}

// node_modules/@arcgis/core/widgets/Compass/CompassViewModel.js
var h18 = class extends i8(b2) {
  constructor(t28) {
    super(t28), this.orientation = { x: 0, y: 0, z: 0 }, this.view = null, this._updateForCamera = this._updateForCamera.bind(this), this._updateForRotation = this._updateForRotation.bind(this), this._updateRotationWatcher = this._updateRotationWatcher.bind(this);
  }
  initialize() {
    this._watchForView(h2);
  }
  destroy() {
    this.view = null;
  }
  get canShowNorth() {
    return e26(this.view);
  }
  get state() {
    return !this.view?.ready || "2d" === this.view.type && !this.view.constraints.rotationEnabled ? "disabled" : this.canShowNorth ? "compass" : "rotation";
  }
  reset() {
    this.view?.ready && ("2d" === this.view?.type ? this.callGoTo({ target: { rotation: 0 }, options: { animationMode: "always", duration: r13() } }) : this.callGoTo({ target: { heading: 0 } }));
  }
  _updateForRotation(t28) {
    null != t28 && this._set("orientation", { z: t28 });
  }
  _updateForCamera(t28) {
    if (!t28) return;
    const o31 = -t28.heading;
    this._set("orientation", { x: 0, y: 0, z: o31 });
  }
  _updateRotationWatcher(t28) {
    this.removeAllHandles(), this._watchForView(), t28 && this.addHandles("2d" === t28.type ? l3(() => t28?.rotation, this._updateForRotation, h2) : l3(() => t28?.camera, this._updateForCamera, h2));
  }
  _watchForView(t28) {
    this.addHandles(l3(() => this.view, this._updateRotationWatcher, t28));
  }
};
r([m2({ readOnly: true })], h18.prototype, "canShowNorth", null), r([m2({ readOnly: true })], h18.prototype, "orientation", void 0), r([m2({ readOnly: true })], h18.prototype, "state", null), r([m2()], h18.prototype, "view", void 0), h18 = r([a("esri.widgets.Compass.CompassViewModel")], h18);
var p25 = h18;

// node_modules/@arcgis/core/widgets/Compass/css.js
var n30 = "esri-compass";
var o29 = { base: n30, iconContainer: `${n30}__icon-container` };

// node_modules/@arcgis/core/widgets/Compass.js
var c24 = class extends O {
  constructor(e28, t28) {
    super(e28, t28), this.messages = null, this.viewModel = new p25(), this._reset = () => {
      this.viewModel.reset();
    }, this._toRotationTransform = (e29) => ({ transform: `rotateZ(${e29.z}deg)` });
  }
  loadDependencies() {
    return c4({ button: () => import("./calcite-button-YXGWMUBG.js"), icon: () => import("./calcite-icon-5R57LYRD.js") });
  }
  get goToOverride() {
    return this.viewModel.goToOverride;
  }
  set goToOverride(e28) {
    this.viewModel.goToOverride = e28;
  }
  get icon() {
    return "rotation" === this.viewModel.state ? "arrow-up" : "compass-needle";
  }
  set icon(e28) {
    this._overrideIfSome("icon", e28);
  }
  get label() {
    return this.messages?.widgetLabel ?? "";
  }
  set label(e28) {
    this._overrideIfSome("label", e28);
  }
  get view() {
    return this.viewModel.view;
  }
  set view(e28) {
    this.viewModel.view = e28;
  }
  reset() {
    return this.viewModel.reset();
  }
  render() {
    const { orientation: e28, state: t28 } = this.viewModel, { messages: o31 } = this;
    return n4("div", { class: this.classes(o29.base, e9.widget) }, n4("calcite-button", { class: e9.widgetButton, disabled: "disabled" === t28, kind: "neutral", label: o31.reset, onclick: this._reset, round: true, scale: "s", title: o31.reset }, n4("div", { "aria-hidden": "true", class: o29.iconContainer, title: o31.reset }, n4("calcite-icon", { icon: this.icon, styles: this._toRotationTransform(e28) }))));
  }
};
r([m2()], c24.prototype, "goToOverride", null), r([m2()], c24.prototype, "icon", null), r([m2()], c24.prototype, "label", null), r([m2(), e4("esri/widgets/Compass/t9n/Compass")], c24.prototype, "messages", void 0), r([m2()], c24.prototype, "view", null), r([m2({ type: p25 })], c24.prototype, "viewModel", void 0), c24 = r([a("esri.widgets.Compass")], c24);
var d20 = c24;

// node_modules/@arcgis/core/widgets/NavigationToggle/css.js
var o30 = "esri-navigation-toggle";
var t26 = { base: o30, isLayoutHorizontal: `${o30}--horizontal` };

// node_modules/@arcgis/core/widgets/NavigationToggle/NavigationToggleViewModel.js
var n31 = class extends b2 {
  constructor(t28) {
    super(t28), this._navigationMode = "pan", this.view = null, t28?.isDefaultViewModel || o2(i.getLogger(this), "Navigation Toggle", "arcgis-navigation-toggle", { version: "4.33" });
  }
  normalizeCtorArgs(t28 = {}) {
    const { isDefaultViewModel: o31, ...i29 } = t28;
    return i29;
  }
  initialize() {
    this.addHandles(f(() => this.view?.navigation?.actionMap, () => this._updateNavigationActionMap()));
  }
  destroy() {
    this.view = null;
  }
  get state() {
    return this.view?.ready && "3d" === this.view?.type ? "ready" : "disabled";
  }
  get navigationMode() {
    return this._navigationMode;
  }
  set navigationMode(t28) {
    this._navigationMode = t28, this._updateNavigationActionMap();
  }
  toggle() {
    "disabled" !== this.state && (this.navigationMode = "pan" !== this.navigationMode ? "pan" : "rotate");
  }
  _updateNavigationActionMap() {
    const t28 = this.view?.navigation?.actionMap;
    if (!t28) return;
    const o31 = "pan" === this._navigationMode;
    t28.dragPrimary = o31 ? "pan" : "rotate", t28.dragSecondary = o31 ? "rotate" : "pan";
  }
};
r([m2({ readOnly: true })], n31.prototype, "state", null), r([m2()], n31.prototype, "_navigationMode", void 0), r([m2()], n31.prototype, "view", void 0), n31 = r([a("esri.widgets.NavigationToggle.NavigationToggleViewModel")], n31);
var g15 = n31;

// node_modules/@arcgis/core/widgets/NavigationToggle.js
var u16 = class extends O {
  constructor(t28, i29) {
    super(t28, i29), this.messages = null, this.viewModel = new g15({ isDefaultViewModel: true }), this.toggle = () => this.viewModel.toggle(), this._panButton = null, this._rotateButton = null, this._toggle = () => {
      const t29 = "pan" === this.viewModel?.navigationMode ? this._rotateButton : this._panButton;
      j2(t29), this.toggle();
    }, t28?.isDefaultUI || r2(i.getLogger(this), "Navigation Toggle", "arcgis-navigation-toggle", { version: "4.32" });
  }
  normalizeCtorArgs(t28 = {}) {
    const { isDefaultUI: e28, ...o31 } = t28;
    return o31;
  }
  loadDependencies() {
    return c4({ button: () => import("./calcite-button-YXGWMUBG.js") });
  }
  get icon() {
    return "move";
  }
  set icon(t28) {
    this._overrideIfSome("icon", t28);
  }
  get label() {
    return this.messages?.widgetLabel ?? "";
  }
  set label(t28) {
    this._overrideIfSome("label", t28);
  }
  set layout(t28) {
    "horizontal" !== t28 && (t28 = "vertical"), this._set("layout", t28);
  }
  get view() {
    return this.viewModel.view;
  }
  set view(t28) {
    this.viewModel.view = t28;
  }
  render() {
    const t28 = "disabled" === this.viewModel?.state, e28 = "pan" === this.viewModel?.navigationMode, o31 = this.messages.toggle;
    return n4("div", { class: this.classes(t26.base, e9.widget, { [t26.isLayoutHorizontal]: "horizontal" === this.layout }) }, n4("calcite-button", { afterCreate: (t29) => {
      this._panButton = t29;
    }, appearance: e28 ? "outline-fill" : "solid", class: e9.widgetButton, disabled: t28, iconStart: "move", kind: "neutral", label: o31, onclick: this._toggle, tabIndex: e28 ? void 0 : -1, title: o31 }), n4("calcite-button", { afterCreate: (t29) => {
      this._rotateButton = t29;
    }, appearance: e28 ? "solid" : "outline-fill", class: e9.widgetButton, disabled: t28, iconStart: "rotate", kind: "neutral", label: o31, onclick: this._toggle, tabIndex: e28 ? -1 : void 0, title: o31 }));
  }
};
r([m2()], u16.prototype, "icon", null), r([m2()], u16.prototype, "label", null), r([m2({ value: "vertical" })], u16.prototype, "layout", null), r([m2(), e4("esri/widgets/NavigationToggle/t9n/NavigationToggle")], u16.prototype, "messages", void 0), r([m2()], u16.prototype, "view", null), r([m2({ type: g15 })], u16.prototype, "viewModel", void 0), u16 = r([a("esri.widgets.NavigationToggle")], u16);
var m22 = u16;

// node_modules/@arcgis/core/widgets/Zoom/ZoomConditions2D.js
var r30 = class extends b2 {
  get canZoomIn() {
    const o31 = this.view?.ready;
    if (!o31) return false;
    const t28 = this.view?.constraints?.effectiveMaxScale;
    return 0 === t28 || this._scale > t28;
  }
  get canZoomOut() {
    const { view: o31 } = this, t28 = o31?.ready;
    if (!t28) return false;
    const e28 = o31.constraints?.effectiveMinScale;
    return 0 === e28 || this._scale < e28;
  }
  get _scale() {
    const o31 = this.view?.animation?.target;
    return (o31 && "then" in o31 ? void 0 : o31?.scale) ?? this.view?.scale ?? 0;
  }
};
r([m2({ readOnly: true })], r30.prototype, "canZoomIn", null), r([m2({ readOnly: true })], r30.prototype, "canZoomOut", null), r([m2()], r30.prototype, "view", void 0), r([m2()], r30.prototype, "_scale", null), r30 = r([a("esri.widgets.Zoom.ZoomConditions2D")], r30);
var c25 = r30;

// node_modules/@arcgis/core/widgets/Zoom/ZoomConditions3D.js
var s32 = class extends b2 {
  get canZoomIn() {
    return !!this.view.ready;
  }
  get canZoomOut() {
    return !!this.view.ready;
  }
};
r([m2({ readOnly: true })], s32.prototype, "canZoomIn", null), r([m2({ readOnly: true })], s32.prototype, "canZoomOut", null), r([m2()], s32.prototype, "view", void 0), s32 = r([a("esri.widgets.Zoom.ZoomConditions3D")], s32);
var c26 = s32;

// node_modules/@arcgis/core/widgets/Zoom/ZoomViewModel.js
var m23 = class extends b2 {
  constructor(o31) {
    super(o31);
  }
  destroy() {
    this.view = null;
  }
  get canZoomIn() {
    return null != this._zoomConditions && this._zoomConditions.canZoomIn;
  }
  get canZoomOut() {
    return null != this._zoomConditions && this._zoomConditions?.canZoomOut;
  }
  get state() {
    return this.view?.ready ? "ready" : "disabled";
  }
  set view(o31) {
    o31 ? "2d" === o31.type ? this._zoomConditions = new c25({ view: o31 }) : "3d" === o31.type && (this._zoomConditions = new c26({ view: o31 })) : this._zoomConditions = null, this._set("view", o31);
  }
  zoomIn() {
    const o31 = this.view;
    this.canZoomIn && o31 && ("2d" === o31.type ? o31.mapViewNavigation.zoomIn() : d2(o31.goTo({ zoomFactor: 2 })));
  }
  zoomOut() {
    const o31 = this.view;
    this.canZoomOut && o31 && ("2d" === o31.type ? o31.mapViewNavigation.zoomOut() : d2(o31.goTo({ zoomFactor: 0.5 })));
  }
};
r([m2()], m23.prototype, "_zoomConditions", void 0), r([m2()], m23.prototype, "canZoomIn", null), r([m2()], m23.prototype, "canZoomOut", null), r([m2({ readOnly: true })], m23.prototype, "state", null), r([m2()], m23.prototype, "view", null), m23 = r([a("esri.widgets.Zoom.ZoomViewModel")], m23);
var p26 = m23;

// node_modules/@arcgis/core/widgets/Zoom.js
var m24 = { base: "esri-zoom", horizontalLayout: "esri-zoom--horizontal" };
var c27 = class extends O {
  constructor(o31, t28) {
    super(o31, t28), this.messages = null, this.viewModel = new p26(), this.zoomIn = () => this.viewModel.zoomIn(), this.zoomOut = () => this.viewModel.zoomOut();
  }
  loadDependencies() {
    return c4({ button: () => import("./calcite-button-YXGWMUBG.js") });
  }
  get icon() {
    return "magnifying-glass-plus";
  }
  set icon(o31) {
    this._overrideIfSome("icon", o31);
  }
  get label() {
    return this.messages?.widgetLabel ?? "";
  }
  set label(o31) {
    this._overrideIfSome("label", o31);
  }
  set layout(o31) {
    "horizontal" !== o31 && (o31 = "vertical"), this._set("layout", o31);
  }
  set view(o31) {
    this.viewModel.view = o31;
  }
  get view() {
    return this.viewModel.view;
  }
  render() {
    const o31 = { [m24.horizontalLayout]: "horizontal" === this.layout }, { canZoomIn: t28, canZoomOut: e28 } = this.viewModel, { zoomIn: s33, zoomOut: i29 } = this.messages;
    return n4("div", { class: this.classes(m24.base, e9.widget, o31) }, n4("calcite-button", { class: e9.widgetButton, disabled: !t28, iconStart: "plus", kind: "neutral", label: s33, onclick: this.zoomIn, title: s33 }), n4("calcite-button", { class: e9.widgetButton, disabled: !e28, iconStart: "minus", kind: "neutral", label: i29, onclick: this.zoomOut, title: i29 }));
  }
};
r([m2()], c27.prototype, "icon", null), r([m2()], c27.prototype, "label", null), r([m2({ value: "vertical" })], c27.prototype, "layout", null), r([m2(), e4("esri/widgets/Zoom/t9n/Zoom")], c27.prototype, "messages", void 0), r([m2()], c27.prototype, "view", null), r([m2({ type: p26 })], c27.prototype, "viewModel", void 0), c27 = r([a("esri.widgets.Zoom")], c27);
var p27 = c27;

// node_modules/@arcgis/core/views/ui/DefaultUI.js
function m25(t28) {
  return void 0 !== t28?.view;
}
var h19 = class extends x4 {
  constructor(t28) {
    super(t28), this._defaultPositionLookup = { attribution: "manual", compass: "top-left", "navigation-toggle": "top-left", zoom: "top-left" }, this.components = [], this._updateViewAwareWidgets = (t29) => {
      this.components.forEach((o31) => {
        const e28 = this._find(o31), i29 = e28?.widget;
        m25(i29) && (i29.view = t29);
      });
    }, this._componentsWatcher = (t29, o31) => {
      this._removeComponents(o31), this._addComponents(t29), this._adjustPadding(t29);
    };
  }
  initialize() {
    this.addHandles([l3(() => this.components, this._componentsWatcher, h2), l3(() => this.view, this._updateViewAwareWidgets, h2)]);
  }
  _add(t28, o31, e28, i29, s33) {
    let r31 = t28;
    if ("string" == typeof t28 && this._defaultPositionLookup[t28]) {
      if (this._find(t28)) return;
      r31 = this._createComponent(t28);
    }
    super._add(r31, o31, e28, i29, s33);
  }
  _removeComponents(t28) {
    t28.forEach((t29) => {
      const o31 = this._find(t29);
      o31 && (this.remove(o31), o31.destroy());
    });
  }
  _adjustPadding(t28) {
    if (!t28.includes("attribution") && !this._isOverridden("padding")) {
      const { top: t29 } = this.padding;
      this.padding = t29;
    }
  }
  _addComponents(t28) {
    this.constructed && t28.forEach((t29) => this.add(this._createComponent(t29), this._defaultPositionLookup[t29]));
  }
  _createComponent(t28) {
    const o31 = this._createWidget(t28);
    return new m21({ id: t28, node: o31 });
  }
  _createWidget(t28) {
    const o31 = this.view;
    switch (t28) {
      case "attribution":
        return new u15({ view: o31 });
      case "compass":
        return new d20({ view: o31 });
      case "navigation-toggle":
        return new m22({ view: o31, isDefaultUI: true });
      case "zoom":
        return new p27({ view: o31 });
    }
  }
};
r([m2()], h19.prototype, "components", void 0), h19 = r([a("esri.views.ui.DefaultUI")], h19);
var u17 = h19;

// node_modules/@arcgis/core/views/ui/2d/DefaultUI2D.js
var e27 = class extends u17 {
  constructor(o31) {
    super(o31), this.components = ["attribution", "zoom"];
  }
};
r([m2()], e27.prototype, "components", void 0), e27 = r([a("esri.views.ui.2d.DefaultUI2D")], e27);
var c28 = e27;

// node_modules/@arcgis/core/views/View2D.js
var F4;
var H3;
var B3;
var Z2;
var J2;
var K2;
var Q2;
async function X() {
  const [, { GraphicsView2D: e28, GraphicContainer: t28, LabelManager: i29, MapViewNavigation: r31, MagnifierView2D: s33, GridView2D: a29, Stage: n32 }] = await Promise.all([import("./webglDeps-7FOIOWLZ.js"), import("./mapViewDeps-ENOR75OZ.js")]);
  H3 = e28, B3 = t28, Z2 = i29, J2 = r31, K2 = s33, Q2 = a29, F4 = n32;
}
var _a2;
var Y2 = (_a2 = class extends a20(d10(o13(w3(C(K))))) {
  constructor(e28) {
    super(e28), this._magnifierView = null, this._gridView = null, this.stage = null, this._resolveWhenReady = [], this.rootLayerViews = new l4({ getCollections: () => [this.basemapView?.baseLayerViews, this.layerViews, this.basemapView?.referenceLayerViews], getChildrenFunction: () => null }), this.featuresTilingScheme = null, this.graphicsView = null, this.labelManager = null, this.navigation = new l14({ actionMap: new p14({ dragTertiary: "none" }) }), this.renderingOptions = { samplingMode: "dynamic", edgeLabelsVisible: true, labelsAnimationTime: 125, labelCollisionsEnabled: true }, this.supersampleScreenshotsEnabled = true, this.supportsGround = false, this.floors = new V(), this.grid = null, this.map = null, this.spatialReferenceLocked = false, this.timeline = new e12(), this.type = "2d", this.view2dType = null, this.ui = new c28(), this.test = { takeScreenshot: async (e29) => r29(this._getScreenshotView(e29), e29) }, this.padding = { top: 0, right: 0, bottom: 0, left: 0 }, m8();
  }
  destroy() {
    this.layerViewManager.clear(), this._set("preconditionsReady", false), this.frameTask = u2(this.frameTask), this.goToManager.destroy(), this.rootLayerViews.destroy(), this.inputManager.destroy(), this._set("inputManager", null);
  }
  get graphicsTileStore() {
    return new u13(this.featuresTilingScheme);
  }
  get constraintsInfo() {
    const e28 = this.defaultsFromMap?.tileInfo, t28 = this.spatialReference;
    return { lods: e28?.spatialReference?.equals(t28) ? e28.lods : null, spatialReference: t28 };
  }
  get initialExtentRequired() {
    if (!this.stateManager) return false;
    const { scale: e28, constraints: t28, center: i29, viewpoint: r31, extent: s33 } = this;
    let a29 = this.zoom;
    return !(this.map && "initialViewProperties" in this.map && this.map.initialViewProperties?.viewpoint) && (!s33 && (t28?.effectiveLODs || (a29 = -1), (!i29 || 0 === e28 && -1 === a29) && (null == r31?.targetGeometry || "extent" !== r31.targetGeometry.type && !r31.scale)));
  }
  get defaultsFromMapSettings() {
    return { required: { extent: false, heightModelInfo: false, tileInfo: true }, requiresExtentInSpatialReference: this.spatialReferenceLocked };
  }
  get scheduler() {
    return this.frameTask.scheduler;
  }
  get typeSpecificPreconditionsReady() {
    const e28 = this._getDefaultViewpoint();
    if (!e28) return false;
    const t28 = e28.targetGeometry, i29 = this.spatialReference;
    return U2(t28.spatialReference, i29);
  }
  get background() {
    return r14(this.map) ? this.map.initialViewProperties.background : null;
  }
  set background(e28) {
    this._override("background", e28);
  }
  get center() {
    return this.stateManager?.center ?? null;
  }
  set center(e28) {
    this.stateManager.center = e28;
  }
  get highlightOptions() {
    return t10(this);
  }
  set highlightOptions(e28) {
    g5(this, e28);
  }
  get padding() {
    return this.stateManager?.padding;
  }
  set padding(e28) {
    this.stateManager && (this.stateManager.padding = e28);
  }
  get rendering() {
    return this.stage?.renderRequested ?? false;
  }
  get resolution() {
    return this.stateManager.resolution ?? 0;
  }
  get scale() {
    return this.stateManager?.scale ?? 0;
  }
  set scale(e28) {
    this.stateManager && (this.stateManager.scale = e28);
  }
  get tileInfo() {
    return this.featuresTilingScheme?.tileInfo;
  }
  get updating() {
    const e28 = !(!this.magnifier.visible || null === this.magnifier.position || !this._magnifierView?.updatingHandles.updating), t28 = !this.destroyed && (!this.layerViewManager || !this.labelManager || !this.graphicsView || true === this.layerViewManager.updating || true === this.labelManager.updating || true === this.graphicsView.updating || this.allLayerViews.some((e29) => !e29.destroyed && !("layerViews" in e29) && true === e29.updating) || e28);
    if (has("esri-2d-log-updating")) {
      const i29 = this.allLayerViews.reduce((e29, t29) => ({ ...e29, [`${t29.layer.id}(${t29.layer.type})`]: !t29.destroyed && !("layerViews" in t29) && t29.updating }), {});
      console.log(`Updating MapView: ${t28}
-> Null LayerViewManager: ${!this.layerViewManager}
-> Null LabelManager: ${!this.labelManager}
-> Null GraphicsView: ${!this.graphicsView}
-> layerViewManager.updating: ${this.layerViewManager?.updating}
-> labelManager.updating: ${this.labelManager?.updating}
-> graphicsView.updating: ${this.graphicsView?.updating}
-> allLayerViews: ${JSON.stringify(i29)}
-> updatingMagnifier: ${e28}
`);
    }
    return t28;
  }
  get visibleArea() {
    const e28 = this.stateManager.visibleArea;
    return e28 ? new P({ rings: [e28.map((e29) => [e29[0], e29[1]])], spatialReference: this.spatialReference }) : e28;
  }
  get zoom() {
    return this.stateManager.zoom ?? -1;
  }
  set zoom(e28) {
    this.stateManager.zoom = e28;
  }
  get navigating() {
    return this.mapViewNavigation?.interacting ?? false;
  }
  async hitTest(e28, t28) {
    return s31(this, e28, t28);
  }
  async takeScreenshot(e28) {
    return o28(this._getScreenshotView(e28), e28);
  }
  toScreen(e28, t28) {
    return this.stateManager.toScreen(e28, t28);
  }
  whenLayerView(e28) {
    return super.whenLayerView(e28);
  }
  graphicChanged(e28) {
    if (this.graphicsView) {
      this.graphicsView.graphicUpdateHandler(e28);
    }
  }
  whenReady() {
    return new Promise((e28) => {
      this.ready ? e28(this) : this._resolveWhenReady.push(e28);
    });
  }
  forceDOMReadyCycle() {
    this.forceReadyCycle();
  }
  getDefaultSpatialReference() {
    return this.map && "initialViewProperties" in this.map && this.map.initialViewProperties.spatialReference || this.defaultsFromMap?.spatialReference || null;
  }
  getDefaultTimeZone() {
    return r14(this.map) ? this.map.initialViewProperties.timeZone : null;
  }
  getDefaultTimeExtent() {
    return r14(this.map) ? this.map.initialViewProperties.timeExtent : null;
  }
  hasLayerViewModule(e28) {
    return l20.hasLayerViewModule(e28);
  }
  importLayerView(e28) {
    return l20.importLayerView(e28);
  }
  pixelSizeAt() {
    return this.ready ? this.resolution : (i.getLogger(this).error("#pixelSizeAt()", "Map view cannot be used before it is ready"), null);
  }
  async popupHitTest(e28) {
    const t28 = this.toMap(e28), i29 = await this.hitTest(e28), r31 = this.allLayerViews.toArray().filter((i30) => i30.clips.every((i31) => m10(this, i31, e28, t28))).reverse(), s33 = new globalThis.Map(r31.map((e29) => [e29.layer.uid, e29])), a29 = [];
    let n32 = 0, o31 = 0;
    for (; n32 < i29.results.length || o31 < r31.length; ) {
      const e29 = i29.results.at(n32);
      if (e29 && "graphic" !== e29.type) {
        ++n32;
        continue;
      }
      const l23 = s33.get((e29?.layer ?? e29?.graphic.layer)?.uid);
      if ((!e29 || l23) && o31 < r31.length && r31.at(o31) !== l23) {
        const e30 = r31.at(o31);
        "fetchPopupFeaturesAtLocation" in e30 && a29.push({ mapPoint: t28, layerView: e30 }), ++o31;
      } else e29 && (a29.push({ graphic: e29.graphic, layerView: l23 }), ++n32);
    }
    return { hits: a29, location: t28 };
  }
  requestUpdate() {
    this.ready && this.frameTask.requestUpdate();
  }
  async validate() {
    let e28 = t25(this.type);
    if (has("safari") && has("safari") < 9 && (e28 = new s("mapview:browser-not-supported", "This browser is not supported by MapView (Safari < 9)", { type: "safari", requiredVersion: 9, detectedVersion: has("safari") })), null != e28) {
      i.getLogger(this).warn("#validate()", e28.message);
      const t28 = document.createElement("div");
      t28.setAttribute("style", "display: flex; flex-direction: column; gap: 8px; padding: 20px; height: 100%; justify-content: center; color: black; background: white; font-family: sans-serif;");
      const i29 = document.createElement("div");
      i29.innerHTML = "Unable to display map. WebGL2 support is required.", i29.setAttribute("style", "font-size: 24px; font-weight: bold;");
      const r31 = document.createElement("div");
      r31.innerHTML = "Ensure that your browser and hardware meet the minimum requirements.", r31.setAttribute("style", "font-size: 18px;");
      const s33 = document.createElement("a");
      throw s33.innerHTML = "https://esriurl.com/systemRequirements", s33.target = "_blank", s33.setAttribute("style", "font-size: 18px;"), s33.href = "https://esriurl.com/systemRequirements", t28.appendChild(i29), t28.appendChild(r31), t28.appendChild(s33), this.surface.appendChild(t28), e28;
    }
  }
  loadAsyncDependencies() {
    return X();
  }
  _getDefaultViewpoint() {
    const { constraints: e28, initialExtent: i29, map: r31, padding: s33, size: a29 } = this;
    if (!e28) return null;
    const n32 = r31 && "initialViewProperties" in r31 ? r31.initialViewProperties : void 0, o31 = this.stateManager.getUserStartupOptions(this.size), l23 = n32?.viewpoint, p29 = l23?.targetGeometry?.extent ?? i29, h20 = p29?.center, d21 = l23?.rotation ?? 0, g16 = l23?.scale || p29 && H(p29, [a29[0] - s33.left - s33.right, a29[1] - s33.top - s33.bottom]), c29 = o31.center ?? h20, u18 = o31.rotation ?? d21, m26 = o31.scale ?? g16;
    return c29 && m26 ? new m5({ targetGeometry: c29, scale: m26, rotation: u18 }) : null;
  }
  _startup() {
    this.timeline.begin("MapView Startup");
    const e28 = this._getDefaultViewpoint();
    this.stateManager.startup(e28, this.size, this.spatialReference, this.defaultsFromMap.extent?.center), this.graphics.owner = this;
    const t28 = new c10(this.surface), i29 = new F4(this.surface, { canvas: this.renderCanvas, contextOptions: { disabledExtensions: this.deactivatedWebGLExtensions, debugWebGLExtensions: this.debugWebGLExtensions }, renderingOptions: this.renderingOptions, timeline: this.timeline }, t28);
    this.stage = i29, this._magnifierView = new K2(), this._magnifierView.magnifier = this.magnifier, this._gridView = new Q2();
    const r31 = new Z2({ view: this });
    this._set("labelManager", r31);
    const s33 = new x3({ view: this });
    this._set("animationManager", s33);
    const a29 = new J2({ view: this, animationManager: s33 });
    this._set("mapViewNavigation", a29), this._setupSpatialReferenceDependentProperties(), this.addHandles([this.rootLayerViews.on("change", () => this._updateStageChildren()), i29.on("webgl-error", (e29) => this.fatalError = e29.error), l3(() => this.stationary, (e29) => i29.stationary = e29, w), l3(() => this.background, (e29) => {
      i29.backgroundColor = e29?.color, this._magnifierView.backgroundColor = e29?.color;
    }, w), l3(() => this.magnifier, (e29) => this._magnifierView.magnifier = e29, w), l3(() => this.grid, (e29) => this._gridView.grid = e29, w), l3(() => this.renderingOptions, (e29) => i29.renderingOptions = e29, w), l3(() => this.highlights.items.map((e29) => ({ name: e29.name, options: { fillColor: e29.color, haloColor: e29.haloColor, fillOpacity: e29.fillOpacity, haloOpacity: e29.haloOpacity, haloWidth: e29.haloWidth, haloBlur: e29.haloBlur } })), () => {
      i29.highlightGradient = a5(i29.highlightGradient, this.highlights.items);
    }, w), l3(() => this.state.id, () => i29.state = this.state, w)], "map-view"), this._updateStageChildren();
    const n32 = this._resolveWhenReady;
    this._resolveWhenReady = [], n32.forEach((e29) => e29(this)), this.timeline.end("MapView Startup"), this.frameTask.start(), this._set("ready", true);
  }
  _teardown() {
    this._destroySpatialReferenceDependentProperties(), this.removeHandles("map-view"), this.mapViewNavigation.destroy(), this._set("mapViewNavigation", null), this.animation = null, this.animationManager.destroy(), this._set("animationManager", null), this.layerViewManager.clear(), this.labelManager.destroy(), this._magnifierView.destroy(), this._gridView.destroy(), this.stage.destroy(), this.stage = null, this._set("graphicsView", null), this._magnifierView = null, this._gridView = null, this._set("labelManager", null), this._set("mapViewNavigation", null), this.graphics.owner = null, this.frameTask.stop(), this.stationaryManager.clear(), this._set("ready", false), this.stateManager.teardown();
  }
  _updateStageChildren() {
    this.stage.removeAllChildren(), this.rootLayerViews.forEach((e29) => {
      this.stage.addChild(e29.container);
    });
    const e28 = this.graphicsView;
    this.stage.addChild(e28.container), this.stage.addChild(this._magnifierView), this.stage.addChild(this._gridView);
  }
  _setupSpatialReferenceDependentProperties() {
    const e28 = new h6(j4.create({ spatialReference: this.spatialReference, size: 512, numLODs: 36 }));
    this._set("featuresTilingScheme", e28);
    const t28 = new H3({ view: this, graphics: this.graphics, requestUpdateCallback: () => this.requestUpdate(), container: new B3(e28) });
    this._set("graphicsView", t28);
  }
  _destroySpatialReferenceDependentProperties() {
    const e28 = this.graphicsView;
    this._set("graphicsView", null), e28.destroy(), this._set("featuresTilingScheme", null);
  }
  _getScreenshotView(e28) {
    const { allLayerViews: t28, padding: i29, size: r31, stage: s33 } = this;
    return { allLayerViews: t28, backgroundColor: e28?.ignoreBackground ? null : this.background?.color, padding: i29, size: r31, stage: s33 };
  }
  _spatialReferenceChanged(e28) {
    if (this.ready) {
      this.frameTask.stop();
      for (const e29 of this.allLayerViews) e29.processDetach();
      this._destroySpatialReferenceDependentProperties(), this.stateManager.changeSpatialReference(e28), this.stage.state = this.state, this._setupSpatialReferenceDependentProperties();
      for (const e29 of this.allLayerViews) e29.processAttach();
      this.frameTask.requestFrame(), this.frameTask.start(), this._updateStageChildren();
    }
  }
}, _a2.type = "2d", _a2);
r([m2({ constructOnly: true })], Y2.prototype, "deactivatedWebGLExtensions", void 0), r([m2({ constructOnly: true })], Y2.prototype, "debugWebGLExtensions", void 0), r([m2({ readOnly: true })], Y2.prototype, "featuresTilingScheme", void 0), r([m2({ readOnly: true })], Y2.prototype, "graphicsTileStore", null), r([m2()], Y2.prototype, "graphicsView", void 0), r([m2()], Y2.prototype, "constraintsInfo", null), r([m2()], Y2.prototype, "initialExtentRequired", null), r([m2()], Y2.prototype, "labelManager", void 0), r([m2({ type: l14, nonNullable: true })], Y2.prototype, "navigation", void 0), r([m2({ constructOnly: true })], Y2.prototype, "renderCanvas", void 0), r([m2()], Y2.prototype, "renderingOptions", void 0), r([m2({ constructOnly: true })], Y2.prototype, "supersampleScreenshotsEnabled", void 0), r([m2({ readOnly: true })], Y2.prototype, "supportsGround", void 0), r([m2()], Y2.prototype, "defaultsFromMapSettings", null), r([m2({ readOnly: true })], Y2.prototype, "typeSpecificPreconditionsReady", null), r([m2({ type: m11 })], Y2.prototype, "background", null), r([m2()], Y2.prototype, "center", null), r([m2({ type: V })], Y2.prototype, "floors", void 0), r([m2()], Y2.prototype, "grid", void 0), r([m2({ type: u8 })], Y2.prototype, "highlightOptions", null), r([m2()], Y2.prototype, "map", void 0), r([m2()], Y2.prototype, "padding", null), r([m2({ readOnly: true })], Y2.prototype, "rendering", null), r([m2({ readOnly: true })], Y2.prototype, "resolution", null), r([m2()], Y2.prototype, "scale", null), r([m2({ constructOnly: true })], Y2.prototype, "spatialReferenceLocked", void 0), r([m2({ readOnly: true })], Y2.prototype, "tileInfo", null), r([m2({ type: e12, readOnly: true })], Y2.prototype, "timeline", void 0), r([m2({ readOnly: true })], Y2.prototype, "type", void 0), r([m2({ readOnly: true })], Y2.prototype, "updating", null), r([m2({ readOnly: true })], Y2.prototype, "view2dType", void 0), r([m2({ readOnly: true })], Y2.prototype, "visibleArea", null), r([m2()], Y2.prototype, "zoom", null), r([m2({ readOnly: true })], Y2.prototype, "navigating", null), r([m2(), s5((e28) => e28 instanceof u17 ? e28 : m(c28, e28))], Y2.prototype, "ui", void 0), Y2 = r([a("esri.views.View2D")], Y2);
var ee = Y2;

// node_modules/@arcgis/core/views/MapView.js
var t27 = class extends ee {
  constructor(o31) {
    super(o31), this.view2dType = "map";
  }
};
r([m2({ readOnly: true })], t27.prototype, "view2dType", void 0), t27 = r([a("esri.views.MapView")], t27);
var p28 = t27;
export {
  p28 as default
};
//# sourceMappingURL=@arcgis_core_views_MapView.js.map
