import {
  e as e2
} from "./chunk-XNTJ4ENZ.js";
import {
  O,
  c,
  e
} from "./chunk-DIR2YFTR.js";
import {
  n2 as n
} from "./chunk-ZSRASSN6.js";
import "./chunk-N5GLJRXG.js";
import "./chunk-77M4J56U.js";
import {
  l as l2,
  m as m2
} from "./chunk-6U2RA2A3.js";
import "./chunk-UGHHK55N.js";
import "./chunk-LFWK3CIR.js";
import "./chunk-5SRIFOTG.js";
import {
  K,
  L,
  k
} from "./chunk-7NMH5MM5.js";
import "./chunk-TCIXF7MM.js";
import "./chunk-UGTICYU7.js";
import "./chunk-3MHRDLQO.js";
import "./chunk-F4KXGA4J.js";
import {
  d,
  j as j2
} from "./chunk-QVKLS4LH.js";
import "./chunk-2KVNXQA7.js";
import "./chunk-XDCUZFJX.js";
import "./chunk-DNZK6PPI.js";
import "./chunk-7BWCD63N.js";
import "./chunk-65K4DQAH.js";
import "./chunk-MUKDJQWB.js";
import "./chunk-6KFXWKZZ.js";
import "./chunk-HPGYEHVI.js";
import "./chunk-YBJ5GVXQ.js";
import "./chunk-X3R5OB6L.js";
import "./chunk-RACDQ3AL.js";
import "./chunk-TEXTBDH7.js";
import "./chunk-52HWRRRQ.js";
import "./chunk-VNTEV3V4.js";
import "./chunk-OGOQOMMV.js";
import "./chunk-7Z3AF3B2.js";
import "./chunk-6GWORUT3.js";
import "./chunk-U57T7EQN.js";
import "./chunk-CMHHL5UO.js";
import "./chunk-XHYOFJ4U.js";
import "./chunk-HCYE6OE4.js";
import "./chunk-KJSBBQ22.js";
import "./chunk-LMEOPAGQ.js";
import "./chunk-YIV2QKTZ.js";
import {
  h,
  j,
  l
} from "./chunk-A3VAC24F.js";
import "./chunk-FPSA4NFH.js";
import "./chunk-UY6B6IVT.js";
import "./chunk-6PV45IYU.js";
import "./chunk-SRQCQD63.js";
import "./chunk-FIRNXFAH.js";
import "./chunk-O5TPFXRT.js";
import "./chunk-Q6XRAGMA.js";
import "./chunk-JUAPMINU.js";
import "./chunk-PK2ZR2SJ.js";
import "./chunk-YFPGM5UE.js";
import {
  s as s2
} from "./chunk-OXSERRAR.js";
import "./chunk-7HI4VRVW.js";
import "./chunk-ZX46THLM.js";
import "./chunk-Y2ZIOB7Y.js";
import {
  s
} from "./chunk-KTUX3OKX.js";
import "./chunk-E3KEUGUG.js";
import {
  b,
  m,
  r as r2
} from "./chunk-N3XLUQJI.js";
import {
  a2 as a
} from "./chunk-JUAD7TJ6.js";
import "./chunk-VHLUKPRH.js";
import {
  r
} from "./chunk-5TPMG26T.js";
import "./chunk-3NBBZ43U.js";
import "./chunk-VOLWOTEG.js";
import "./chunk-XTNIDRTB.js";
import "./chunk-FGWIXJQY.js";
import "./chunk-TKYAZCMB.js";
import "./chunk-3TBMFSPB.js";
import "./chunk-PSZLDJJA.js";
import "./chunk-ZWFY3WY5.js";
import "./chunk-LQFTAGIV.js";
import "./chunk-S7IJH524.js";
import "./chunk-GZ2P4SCJ.js";
import {
  i2 as i
} from "./chunk-XWG6QGFK.js";
import "./chunk-GWNLQRNM.js";
import "./chunk-FXKORAMT.js";
import "./chunk-GNMFMITH.js";

// node_modules/@arcgis/core/widgets/BasemapToggle/BasemapToggleViewModel.js
var g = class extends b {
  constructor(e4) {
    super(e4), this._basemapCache = {}, this._loadingProjectionEngine = false, this.nextBasemap = m2("hybrid", this._basemapCache), this.view = null;
  }
  initialize() {
    l(() => this.nextBasemap, (e4) => {
      e4 && !e4.loaded && e4.load().catch(() => {
      });
    }, h);
  }
  destroy() {
    this.view = null, l2(this._basemapCache), this._basemapCache = null;
  }
  get _nextBasemapSpatialReferenceTask() {
    return d(this.view, this.nextBasemap);
  }
  get _viewSpatialReferenceLocked() {
    const { view: e4 } = this;
    return !e4 || !("spatialReferenceLocked" in e4) || e4.spatialReferenceLocked;
  }
  get activeBasemap() {
    return m2(this.view?.map?.basemap ?? "topo-vector", this._basemapCache);
  }
  castNextBasemap(e4) {
    return m2(e4, this._basemapCache);
  }
  get state() {
    const { view: e4 } = this;
    if (!e4?.ready) return "disabled";
    if (this._nextBasemapSpatialReferenceTask.updating) return "disabled";
    const { spatialReference: a3 } = this._nextBasemapSpatialReferenceTask;
    return this._viewSpatialReferenceLocked && null != a3 && !e4.spatialReference.equals(a3) ? "incompatible-next-basemap" : this._loadingProjectionEngine ? "loading" : "ready";
  }
  async toggle() {
    const { activeBasemap: e4, nextBasemap: a3, state: t, view: s3 } = this;
    if (!s3 || "disabled" === t || "incompatible-next-basemap" === t) return;
    const r3 = this._viewSpatialReferenceLocked;
    if (!r3) {
      if (await j(() => !this._nextBasemapSpatialReferenceTask.updating), a3 !== this.nextBasemap || e4 !== this.activeBasemap) return;
      const { spatialReference: t2 } = this._nextBasemapSpatialReferenceTask;
      if (null == t2 || s2(s3.spatialReference, t2) || k() || L(s3.spatialReference, t2) || (this._loadingProjectionEngine = true, await K(), this._loadingProjectionEngine = false), a3 !== this.nextBasemap || e4 !== this.activeBasemap) return;
    }
    s3.map.basemap = a3, r3 || null == this._nextBasemapSpatialReferenceTask.spatialReference || s2(s3.spatialReference, this._nextBasemapSpatialReferenceTask.spatialReference) || (s3.spatialReference = this._nextBasemapSpatialReferenceTask.spatialReference), this.nextBasemap = e4;
  }
  static getThumbnailUrl(e4) {
    return j2(e4);
  }
};
r([m()], g.prototype, "_loadingProjectionEngine", void 0), r([m({ readOnly: true })], g.prototype, "_nextBasemapSpatialReferenceTask", null), r([m({ readOnly: true })], g.prototype, "_viewSpatialReferenceLocked", null), r([m({ readOnly: true })], g.prototype, "activeBasemap", null), r([m()], g.prototype, "nextBasemap", void 0), r([s("nextBasemap")], g.prototype, "castNextBasemap", null), r([m({ readOnly: true })], g.prototype, "state", null), r([m()], g.prototype, "view", void 0), r([m()], g.prototype, "toggle", null), g = r([a("esri.widgets.BasemapToggle.BasemapToggleViewModel")], g);
var B = g;

// node_modules/@arcgis/core/widgets/BasemapToggle/css.js
var e3 = "esri-basemap-toggle";
var a2 = "esri-basemap-thumbnail";
var _ = { base: e3, secondaryBasemapImage: `${e3}__image--secondary`, container: `${a2} ${e3}__container`, image: `${a2}__image ${e3}__image`, imageLoading: `${e3}__image--loading`, overlay: `${a2}__overlay ${e3}__image-overlay`, title: `${a2}__title ${e3}__title`, overlayScrim: `${a2}__overlay-scrim` };

// node_modules/@arcgis/core/widgets/BasemapToggle.js
function u(e4) {
  const t = j2(e4);
  return t ? { backgroundImage: "url(" + t + ")" } : { backgroundImage: "" };
}
var v = { title: false };
var b2 = class extends O {
  constructor(e4, o) {
    super(e4, o), this.messages = null, this.viewModel = new B(), this.visibleElements = { ...v }, this.toggle = () => this.viewModel.toggle(), r2(i.getLogger(this), "Basemap Toggle", "arcgis-basemap-toggle", { version: "4.32" });
  }
  loadDependencies() {
    return c({ button: () => import("./calcite-button-YXGWMUBG.js"), icon: () => import("./calcite-icon-5R57LYRD.js"), scrim: () => import("./calcite-scrim-K6XWXI4L.js") });
  }
  get activeBasemap() {
    return this.viewModel.activeBasemap;
  }
  get icon() {
    return "layer-basemap";
  }
  set icon(e4) {
    this._overrideIfSome("icon", e4);
  }
  get label() {
    return this.messages?.widgetLabel ?? "";
  }
  set label(e4) {
    this._overrideIfSome("label", e4);
  }
  get nextBasemap() {
    return this.viewModel.nextBasemap;
  }
  set nextBasemap(e4) {
    this.viewModel.nextBasemap = e4;
  }
  get view() {
    return this.viewModel.view;
  }
  set view(e4) {
    this.viewModel.view = e4;
  }
  castVisibleElements(e4) {
    return { ...v, ...e4 };
  }
  render() {
    const e4 = this.viewModel, t = "disabled" === e4.state ? null : e4.activeBasemap, s3 = "disabled" === e4.state ? null : e4.nextBasemap, o = "loading" === e4.state, i2 = "incompatible-next-basemap" === e4.state, a3 = s3?.title ?? "", l3 = s3 && "loaded" !== s3.loadStatus;
    let r3;
    const n2 = this.visibleElements.title && a3, p = i2;
    return (n2 || p) && (r3 = n("div", { class: _.overlay, key: "overlay" }, n2 ? n("span", { class: _.title, title: a3 }, a3) : null, p ? n("calcite-scrim", { class: _.overlayScrim, title: this.messages.incompatibleSpatialReference }, n("calcite-icon", { icon: "exclamation-mark-triangle" })) : null)), n("div", { class: this.classes(_.base, e2.widget) }, n("calcite-button", { appearance: "transparent", "data-basemap-id": s3 ? s3.id : "", disabled: i2, kind: "neutral", label: this.label, onclick: () => {
      this.toggle();
    }, title: this.label }, n("div", { class: this.classes(_.container, _.secondaryBasemapImage) }, n("div", { class: _.image, styles: u(t) })), n("div", { class: _.container }, n("div", { class: this.classes(_.image, l3 ? _.imageLoading : null), styles: u(s3) }, l3 || o ? n("calcite-scrim", null, n("span", { "aria-hidden": "true", class: e2.loaderAnimation, role: "presentation" })) : null), r3)));
  }
};
r([m({ readOnly: true })], b2.prototype, "activeBasemap", null), r([m()], b2.prototype, "icon", null), r([m()], b2.prototype, "label", null), r([m(), e("esri/widgets/BasemapToggle/t9n/BasemapToggle")], b2.prototype, "messages", void 0), r([m()], b2.prototype, "nextBasemap", null), r([m()], b2.prototype, "view", null), r([m({ type: B })], b2.prototype, "viewModel", void 0), r([m()], b2.prototype, "visibleElements", void 0), r([s("visibleElements")], b2.prototype, "castVisibleElements", null), b2 = r([a("esri.widgets.BasemapToggle")], b2);
var h2 = b2;
export {
  h2 as default
};
//# sourceMappingURL=@arcgis_core_widgets_BasemapToggle.js.map
