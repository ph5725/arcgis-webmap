import {
  s as s5
} from "./chunk-NLRZQNRK.js";
import {
  e as e7
} from "./chunk-DUXHDPUA.js";
import {
  a as a3
} from "./chunk-VT4WVFMU.js";
import {
  g,
  i as i4,
  k as k3,
  k2 as k4,
  u as u8,
  v as v2,
  w as w2
} from "./chunk-J3XB4ULO.js";
import "./chunk-VENSIPP6.js";
import {
  L as L3,
  S,
  v,
  w
} from "./chunk-WVBSJHTR.js";
import "./chunk-YUR5WF2T.js";
import {
  V as V2,
  l as l4
} from "./chunk-TIURERCF.js";
import {
  t as t4
} from "./chunk-7AYTMUX3.js";
import "./chunk-X2OBBDFX.js";
import "./chunk-KQAVVHOP.js";
import {
  r as r3
} from "./chunk-OJPRITNM.js";
import {
  c as c4,
  s as s4,
  t as t3,
  u as u7
} from "./chunk-NX6M4L74.js";
import {
  c as c3,
  d as d2,
  l2 as l3,
  o as o4,
  p as p2,
  s as s3,
  u2 as u6
} from "./chunk-CK3BFX2D.js";
import "./chunk-QK4EVUO7.js";
import "./chunk-2YMDAZQY.js";
import "./chunk-SNXPARJV.js";
import "./chunk-GUDLBPXV.js";
import "./chunk-UP64JZZX.js";
import "./chunk-2EA3JV2W.js";
import "./chunk-H4DIXMI4.js";
import {
  y
} from "./chunk-GSLLUDFN.js";
import "./chunk-VKWCSYR2.js";
import {
  u as u5
} from "./chunk-4O5CCRUE.js";
import {
  h as h2,
  q
} from "./chunk-P3IYNFCG.js";
import {
  k as k2
} from "./chunk-IFIUGMR3.js";
import "./chunk-7WMSTTK2.js";
import "./chunk-RKY3RWEE.js";
import "./chunk-VFPRGLLJ.js";
import "./chunk-DU2INJD7.js";
import "./chunk-RWNJO2QP.js";
import "./chunk-K5MBDBKI.js";
import "./chunk-5533VDSZ.js";
import "./chunk-T2JYPYET.js";
import "./chunk-QRFE4Y45.js";
import {
  t as t2
} from "./chunk-74RFD6IA.js";
import {
  u as u4
} from "./chunk-SBXGAPXW.js";
import "./chunk-LNHEN3TD.js";
import {
  e as e6,
  n as n3
} from "./chunk-UUGXVV4Y.js";
import "./chunk-YGH6TKDR.js";
import "./chunk-QNRDEVXA.js";
import "./chunk-N5WAT47V.js";
import "./chunk-QIPPWPN2.js";
import "./chunk-HU6PCND5.js";
import "./chunk-BNQMKYX6.js";
import "./chunk-N6PQ3YTD.js";
import "./chunk-7BUQKFTK.js";
import {
  e as e5
} from "./chunk-MULZ6YKT.js";
import {
  O,
  c as c2,
  e as e2
} from "./chunk-TE7YCJS2.js";
import {
  L as L2,
  i as i2,
  n2 as n
} from "./chunk-OP6LRQXD.js";
import "./chunk-NC6NRJ4L.js";
import "./chunk-IXG2DG4Y.js";
import "./chunk-TTJN3FRZ.js";
import {
  s as s2
} from "./chunk-CZ5NAE7H.js";
import {
  o as o3
} from "./chunk-HOMBRYQA.js";
import {
  f
} from "./chunk-BTHUW4N5.js";
import "./chunk-QKPVPYY4.js";
import "./chunk-I46UR5TE.js";
import "./chunk-LGFPDJKG.js";
import "./chunk-FXHM22U2.js";
import "./chunk-W5TM52TN.js";
import "./chunk-5STLSGEP.js";
import "./chunk-ECLBD23H.js";
import "./chunk-2SYVQEHQ.js";
import "./chunk-Z4FXE5ZY.js";
import {
  f as f3,
  p
} from "./chunk-F55QMTG7.js";
import "./chunk-PV34BPRN.js";
import "./chunk-O5RG7LN7.js";
import "./chunk-O7RY3LSW.js";
import "./chunk-3DX7JRFE.js";
import "./chunk-NWCWLUFM.js";
import "./chunk-6TUZ4YA5.js";
import "./chunk-WZN27JEC.js";
import "./chunk-KRQCVEAR.js";
import "./chunk-KWF2EMWM.js";
import "./chunk-YSN2RNWL.js";
import "./chunk-3M6ALZOH.js";
import "./chunk-MNLLECZK.js";
import {
  i as i3
} from "./chunk-AY2QJBSK.js";
import "./chunk-IDEYLMUZ.js";
import "./chunk-RVPGX63S.js";
import "./chunk-ZXRP35LY.js";
import "./chunk-GX56M7IU.js";
import "./chunk-HXFXVXCW.js";
import "./chunk-S7GLMIAQ.js";
import "./chunk-NZOEKKOM.js";
import "./chunk-N72SEXBR.js";
import "./chunk-34DHK2PQ.js";
import "./chunk-AWUIH6LS.js";
import "./chunk-EMULKSUV.js";
import "./chunk-X27PLUCA.js";
import "./chunk-YI2YRLFK.js";
import "./chunk-RSUAYRSX.js";
import "./chunk-N25MTHOP.js";
import "./chunk-BK6RS4A5.js";
import "./chunk-SYPO5O55.js";
import "./chunk-F336IK7Q.js";
import "./chunk-65ADBMA4.js";
import "./chunk-7VUYQLDN.js";
import "./chunk-P3BGKZHX.js";
import {
  m as m2,
  u as u3
} from "./chunk-ZRBYLN4Y.js";
import "./chunk-XPUNLKG5.js";
import "./chunk-6H7Z3DDS.js";
import "./chunk-W24DQAZA.js";
import {
  l as l2
} from "./chunk-NKLYO4IS.js";
import "./chunk-NJKMZWA2.js";
import {
  E,
  T
} from "./chunk-IVZWEHBI.js";
import {
  e as e4
} from "./chunk-6MMKMLLO.js";
import {
  n as n2
} from "./chunk-FOPBVVXE.js";
import "./chunk-GDOCPZ6Q.js";
import "./chunk-MTGGGPTM.js";
import "./chunk-H6ZVHKNF.js";
import "./chunk-YAXW2DL6.js";
import {
  e as e3,
  u
} from "./chunk-4AKMPOG7.js";
import "./chunk-GGULOQ2O.js";
import "./chunk-RKF6WUZT.js";
import "./chunk-UBVUJDBU.js";
import "./chunk-B7CWOJM2.js";
import "./chunk-HJNQCQCZ.js";
import "./chunk-QX6KAF46.js";
import "./chunk-IUEM4OPB.js";
import "./chunk-JPOU6HGW.js";
import "./chunk-PS57JJSG.js";
import "./chunk-D7ZFLOML.js";
import "./chunk-FV6ZNHFI.js";
import {
  r as r2
} from "./chunk-ZJQPHR3K.js";
import "./chunk-5LHHC3GS.js";
import "./chunk-XL6LITTU.js";
import {
  u as u2
} from "./chunk-T46EFUYJ.js";
import {
  V
} from "./chunk-UQAF7QQZ.js";
import "./chunk-Y2UIZPKP.js";
import "./chunk-NQNWOZQX.js";
import "./chunk-WMZMBTHZ.js";
import "./chunk-XJWC7NCV.js";
import "./chunk-4TWBUXAH.js";
import "./chunk-7SZWPZRB.js";
import {
  a as a2,
  f as f2,
  h,
  j,
  l
} from "./chunk-LDV5WK2W.js";
import "./chunk-SDIBXPSJ.js";
import "./chunk-SDSNQWKE.js";
import "./chunk-NHSKLNWT.js";
import "./chunk-GR5Z7GPO.js";
import "./chunk-W5L4VHOE.js";
import "./chunk-BWSSIPNW.js";
import "./chunk-356T5UZN.js";
import "./chunk-MGG7YB43.js";
import "./chunk-LLGOMKTE.js";
import "./chunk-ZX7V5AZS.js";
import {
  d
} from "./chunk-Y65WZQIV.js";
import {
  s
} from "./chunk-6CTJVQRL.js";
import "./chunk-BHG7PKE6.js";
import {
  b,
  e,
  m,
  o
} from "./chunk-VM5L7KHF.js";
import {
  a2 as a
} from "./chunk-A36F4B3C.js";
import "./chunk-YG5HLUHA.js";
import {
  r
} from "./chunk-JBQ4B7X4.js";
import {
  o as o2
} from "./chunk-WZSLBQN7.js";
import "./chunk-DL6FZ7ZH.js";
import {
  H,
  t
} from "./chunk-IA5FLB5V.js";
import {
  Ht
} from "./chunk-MWAZW5EU.js";
import "./chunk-JNYZ3I5R.js";
import "./chunk-UR4HHZKS.js";
import "./chunk-FSAXKL5E.js";
import "./chunk-SUMI43CH.js";
import "./chunk-5HRTFQ6H.js";
import "./chunk-6ACTD4UJ.js";
import {
  k
} from "./chunk-RH5Q3AVL.js";
import {
  c,
  i2 as i
} from "./chunk-VNH2FDEQ.js";
import "./chunk-EX5MO5LF.js";
import {
  L,
  has
} from "./chunk-7DUTYOCL.js";
import "./chunk-GNMFMITH.js";

// node_modules/@arcgis/core/widgets/Legend/support/clusterUtils.js
function l5(l9, i7, s8) {
  const a11 = l9.effectiveClusterRenderer;
  if (!a11 || !("visualVariables" in a11) || !a11.visualVariables) return null;
  const n9 = a11.visualVariables.find((e10) => "size" === e10.type);
  if (!("stops" in n9) || !n9.stops) return null;
  const t5 = n9.stops.find((e10) => e10.useMinValue), u13 = n9.stops.find((e10) => e10.useMaxValue);
  if (null == t5 || null == u13) return null;
  const r8 = s8.featuresTilingScheme.getClosestInfoForScale(s8.scale).level, f9 = n9.field, o7 = i7.getDisplayStatistics(r8, f9);
  return o7 ? new f3({ field: n9.field, minSize: l9.clusterMinSize, minDataValue: o7.minValue, maxSize: l9.clusterMaxSize, maxDataValue: o7.maxValue }) : null;
}

// node_modules/@arcgis/core/widgets/smartMapping/support/utils.js
function s6(t5) {
  const n9 = 2, o7 = Math.floor(Math.log10(Math.abs(t5))) + 1, e10 = o7 < 4 || o7 > 6 ? 4 : o7, r8 = 1e6, s8 = Math.abs(t5) >= r8 ? "compact" : "standard";
  return o3(t5, { notation: s8, minimumSignificantDigits: n9, maximumSignificantDigits: e10 });
}

// node_modules/@arcgis/core/widgets/Legend/support/ActiveLayerInfo.js
var de = 16;
var ye = "https://utility.arcgis.com/sharing/tools/legend";
var he = "esri.layers.ImageryLayer";
var me = "esri.layers.ImageryTileLayer";
var pe = "esri.layers.WCSLayer";
var fe = /^\s*(return\s+)?\$view\.scale\s*(;)?\s*$/i;
var ge = new o2({ esriGeometryPoint: "point", esriGeometryMultipoint: "multipoint", esriGeometryPolyline: "polyline", esriGeometryPolygon: "polygon", esriGeometryMultiPatch: "multipatch" });
var be = new u3({ size: 6, outline: { color: [128, 128, 128, 0.5], width: 0.5 } });
var Se = new m2({ style: "solid" });
function _e(e10) {
  return "flow" === e10.type;
}
function we(e10) {
  return "vector-field" === e10.type;
}
function ve(e10) {
  return "raster-colormap" === e10.type;
}
function Le(e10) {
  return "raster-stretch" === e10.type;
}
function Ee(e10) {
  return "raster-shaded-relief" === e10.type;
}
function Ce(e10) {
  return "esri.renderers.SimpleRenderer" === e10.declaredClass;
}
function Ie(e10) {
  return "esri.renderers.ClassBreaksRenderer" === e10.declaredClass;
}
function Fe(e10) {
  return "esri.renderers.UniqueValueRenderer" === e10.declaredClass;
}
function Re(e10) {
  return "esri.renderers.HeatmapRenderer" === e10.declaredClass;
}
function Ve(e10) {
  return xe(e10) || ze(e10) || Te(e10) || De(e10);
}
function De(e10) {
  return "esri.renderers.PointCloudRGBRenderer" === e10.declaredClass;
}
function xe(e10) {
  return "esri.renderers.PointCloudClassBreaksRenderer" === e10.declaredClass;
}
function ze(e10) {
  return "esri.renderers.PointCloudStretchRenderer" === e10.declaredClass;
}
function Te(e10) {
  return "esri.renderers.PointCloudUniqueValueRenderer" === e10.declaredClass;
}
function je(e10) {
  return "esri.renderers.DotDensityRenderer" === e10.declaredClass;
}
function Oe(e10) {
  return "esri.renderers.PieChartRenderer" === e10.declaredClass;
}
function Pe(e10, t5) {
  return Ce(e10) || Ie(e10) || Fe(e10) || Re(e10) || je(e10) || Oe(e10) ? "2d" === t5.type || s5(e10) : Le(e10) || ve(e10) || Ee(e10) || xe(e10) || ze(e10) || Te(e10) || we(e10) || _e(e10);
}
function Me(e10) {
  return "esri.layers.BuildingSceneLayer" === e10.declaredClass;
}
function ke(e10) {
  return "esri.layers.SubtypeGroupLayer" === e10.declaredClass;
}
function Ae(e10) {
  return "esri.layers.VoxelLayer" === e10.declaredClass;
}
function Ue(e10) {
  return "esri.layers.WMSLayer" === e10.declaredClass;
}
function Be(e10) {
  return "esri.layers.WMTSLayer" === e10.declaredClass;
}
function Ne(e10) {
  return "esri.layers.MapImageLayer" === e10.declaredClass;
}
function qe(e10) {
  return "esri.layers.TileLayer" === e10.declaredClass;
}
function $e(e10) {
  return e10.declaredClass === he;
}
function He(e10) {
  return e10.declaredClass === me;
}
function We(e10) {
  return e10.declaredClass === pe;
}
function Ge(e10) {
  return "stretch-ramp" === e10.type;
}
function Je(e10) {
  const t5 = "authoringInfo" in e10 ? e10?.authoringInfo : null;
  return "univariate-color-size" === t5?.type;
}
function Qe(e10) {
  const t5 = "authoringInfo" in e10 ? e10?.authoringInfo : null;
  return "univariate-color-size" === t5?.type && "above-and-below" === t5?.univariateTheme;
}
function Ze(e10) {
  return "sublayers" in e10;
}
function Ke(e10) {
  return e10 && "symbol" in e10;
}
async function Xe(e10, t5) {
  const s8 = await f("esri/widgets/Legend/t9n/Legend");
  return "previewTemplateAriaLabel" !== e10 || t5 || (e10 = "previewAriaLabel"), s2(s8[e10], { label: t5 });
}
function Ye(e10, t5) {
  const { field: s8, field2: i7, field3: l9, fieldDelimiter: r8, valueExpression: n9 } = e10;
  if (!s8) return null;
  const a11 = !(!s8 && !n9 || !i7 && !l9) ? t5?.toString().split(r8 || "") : [t5], o7 = s8 ? { [s8]: a11?.[0] } : null;
  return o7 && (i7 && (o7[i7] = a11?.[1]), l9 && (o7[l9] = a11?.[2])), o7;
}
var et = new u3({ style: "path", path: "M10,5 L5,0 0,5 M5,0 L5,15", size: 15, outline: { width: 1, color: [85, 85, 85, 1] } });
var tt = {};
var st = class extends b {
  constructor(e10) {
    super(e10), this._hasColorRamp = false, this._hasOpacityRamp = false, this._hasSizeRamp = false, this._webStyleSymbolCache = /* @__PURE__ */ new Map(), this._dotDensityUrlCache = /* @__PURE__ */ new Map(), this._scaleDrivenSizeVariable = null, this._hasClusterSizeVariable = false, this._layerDefinitionExpression = null, this._layerDefinitionExpressionClause = null, this._layerDisplayFilterId = null, this._layerDisplayFilterClause = null, this.children = new V(), this.layerView = null, this.layer = null, this.legendElements = [], this.parent = null, this.hideLayersNotInCurrentView = false, this.keepCacheOnDestroy = false, this.respectLayerDefinitionExpression = false, this.respectLayerVisibility = true, this.sublayerIds = [], this.title = null, this.view = null;
  }
  initialize() {
    const e10 = () => this.notifyChange("ready");
    this.addHandles([a2(() => this.children, "change", (t5) => {
      const { added: s8, removed: i7 } = t5;
      s8.forEach((t6) => {
        const s9 = `activeLayerInfo-ready-watcher-${t6.layer.uid}`;
        this.addHandles(l(() => t6.ready, e10, h), s9);
      }), i7.forEach((e11) => this.removeHandles(e11.layer.uid)), e10();
    })]), this.keepCacheOnDestroy || (tt = {});
  }
  destroy() {
    this._webStyleSymbolCache = null, this._dotDensityUrlCache = null, this._scaleDrivenSizeVariable = null, this.keepCacheOnDestroy || (tt = null), this._layerDefinitionExpressionClause = null;
  }
  get effectList() {
    const e10 = this.layer;
    let t5 = null;
    return "effect" in e10 && e10.effect && (t5 = new a3(), t5.effect = e10.effect, t5.endTransition(), t5.scale = this.scale), t5;
  }
  get opacity() {
    const e10 = this.layer.opacity, t5 = this.parent?.opacity, s8 = this.layer.parent, i7 = s8 && "uid" in s8 ? this._getParentLayerOpacity(s8) : null;
    return null != t5 ? t5 * e10 : null != i7 ? i7 * e10 : e10;
  }
  get ready() {
    return null === this.layer || (this.children.length > 0 ? this._isGroupActive() : this.legendElements.length > 0);
  }
  get scale() {
    return this.view?.scale ?? 0;
  }
  get isScaleDriven() {
    const e10 = this.layer;
    if (null === e10) return false;
    if ("effect" in e10 && e10.effect && Array.isArray(e10.effect)) return true;
    if ("featureReduction" in e10 && e10.featureReduction) {
      if ("cluster" === e10.featureReduction.type) return true;
      if ("binning" === e10.featureReduction.type && "renderer" in e10.featureReduction && e10.featureReduction.renderer) return this._isRendererScaleDriven(e10.featureReduction.renderer);
    }
    return "renderer" in e10 && e10.renderer ? !!("displayFilterInfo" in e10 && e10.displayFilterInfo && Fe(e10.renderer)) || this._isRendererScaleDriven(e10.renderer) : this._isLayerScaleDriven(this.layer);
  }
  get version() {
    return this._get("version") + 1;
  }
  async buildLegendElementsForFeatureCollections(e10) {
    if (!(!this.hideLayersNotInCurrentView || await this._isLayerInCurrentView())) return this.legendElements = [], void this.notifyChange("ready");
    const t5 = Array.from(e10, (e11) => {
      if (u2(e11)) return this._getRendererLegendElements(e11.renderer, { title: e11.title });
      if (e11.featureSet?.features.length) {
        const t6 = e11.layerDefinition, s8 = t6?.drawingInfo, i7 = s8 && t2(s8.renderer), l9 = ge.read(t6.geometryType);
        return i7 ? this._getRendererLegendElements(i7, { title: e11.name, geometryType: l9 }) : (i.getLogger(this).warn("drawingInfo not available!"), null);
      }
      return null;
    });
    try {
      const e11 = [], s8 = await Promise.allSettled(t5);
      for (const t6 of s8) if ("fulfilled" === t6.status) for (const s9 of t6.value ?? []) e11.push(s9);
      this.legendElements = e11, this.notifyChange("ready");
    } catch (s8) {
      i.getLogger(this).warn("error while building legend for layer!", s8);
    }
  }
  async buildLegendElementsForRenderer(e10) {
    try {
      const t5 = !this.hideLayersNotInCurrentView || await this._isLayerInCurrentView();
      this.legendElements = t5 ? await this._getRendererLegendElements(e10) : [], this.notifyChange("ready");
    } catch (t5) {
      i.getLogger(this).warn("error while building legend for layer!", t5);
    }
  }
  async buildLegendElementsForFeatureReduction(e10) {
    try {
      const t5 = !this.hideLayersNotInCurrentView || await this._isLayerInCurrentView();
      this.legendElements = t5 ? await this._getLegendElementsForFeatureReduction(e10) : [], this.notifyChange("ready");
    } catch (t5) {
      i.getLogger(this).warn("error while building legend for layer!", t5);
    }
  }
  async buildLegendElementsForTools() {
    const e10 = this.layer;
    if (Ae(e10)) this._constructLegendElementsForVoxelLayer();
    else if (Be(e10)) this._constructLegendElementsForWMTSlayer();
    else if (Ue(e10)) await this._constructLegendElementsForWMSSublayers();
    else if (Me(e10)) await this._constructLegendElementsForBuildingSceneLayer();
    else if (Ne(e10) || qe(e10) || ke(e10)) await this._constructLegendElementsForSublayers();
    else {
      this.removeHandles("imageryLayers-watcher");
      let t5 = "default";
      if ($e(e10)) {
        const s8 = e10;
        t5 = (s8?.rasterFunction?.functionName || "default") + "_" + (e10.bandIds?.length ? e10.bandIds.join("") : "###");
      }
      if (He(e10) || "link-chart" === e10.type) return;
      await this._getLegendLayers(`${e10.uid}-${t5}`).then(async (t6) => {
        this.legendElements = [], this.notifyChange("ready");
        const s8 = t6.map(async (t7) => {
          if ($e(e10)) {
            const t8 = l(() => [e10.rasterFunction, e10.bandIds], () => k(async () => {
              tt.default = null, e10.renderer ? await this.buildLegendElementsForRenderer(e10.renderer) : await this.buildLegendElementsForTools();
            })());
            this.addHandles(t8, "imageryLayers-watcher");
          }
          const s9 = this._generateSymbolTableElementForLegendLayer(t7);
          s9?.infos.length && ($e(e10) && (s9.title = e10.title), this.legendElements.push(s9)), this.notifyChange("ready");
        });
        await Promise.allSettled(s8);
      }).catch((e11) => {
        i.getLogger(this).warn("Request to server for legend has failed!", e11);
      });
    }
  }
  async _isLayerInCurrentView() {
    const e10 = this.layer, t5 = this.layerView, s8 = t5 && "createQuery" in t5 && "queryFeatureCount" in t5;
    if (!s8 && !(t5 && "createQuery" in e10 && "queryFeatureCount" in e10)) return true;
    await j(() => !t5.updating);
    const i7 = s8 ? "createQuery" in t5 && t5.createQuery() : "createQuery" in e10 && e10.createQuery();
    if (!i7) return true;
    i7.geometry = this.view.extent;
    return 0 !== (s8 ? "queryFeatureCount" in t5 && await t5.queryFeatureCount(i7) : "queryFeatureCount" in e10 && await e10.queryFeatureCount(i7));
  }
  _getParentLayerOpacity(e10) {
    let t5 = 1;
    const s8 = e10.parent;
    return s8 && "uid" in s8 && (t5 = this._getParentLayerOpacity(s8)), e10.opacity * t5;
  }
  _isGroupActive() {
    return this.children.some((e10) => e10.ready);
  }
  _isRendererScaleDriven(e10) {
    if ("dot-density" === e10.type) return true;
    const t5 = "valueExpression" in e10 ? e10.valueExpression : null;
    if (fe.test(t5)) return true;
    const s8 = "visualVariables" in e10 ? e10.visualVariables : null;
    return !!s8?.some((e11) => this._isScaleDrivenSizeVariable(e11)) || this._hasScaleDrivenSymbols(e10);
  }
  _hasScaleDrivenSymbols(e10) {
    switch (e10.type) {
      case "simple":
        return this._isScaleDrivenSymbol(e10.symbol);
      case "class-breaks":
        return this._isScaleDrivenSymbol(e10.defaultSymbol) || e10.classBreakInfos.some((e11) => this._isScaleDrivenSymbol(e11.symbol));
      case "unique-value":
        return this._isScaleDrivenSymbol(e10.defaultSymbol) || !!e10.uniqueValueInfos?.some((e11) => this._isScaleDrivenSymbol(e11.symbol));
    }
    return false;
  }
  _isScaleDrivenSymbol(e10) {
    if ("cim" === e10?.type) {
      const { primitiveOverrides: t5, minScale: s8, maxScale: i7 } = e10.data, l9 = t5?.some((e11) => /\$view\.scale/.test(e11.valueExpressionInfo?.expression || "")) ?? false;
      return null != s8 || null != i7 || l9;
    }
    return false;
  }
  _isScaleDrivenSizeVariable(e10) {
    if (e10 && "size" !== e10.type) return false;
    const t5 = e10, s8 = t5.minSize, i7 = t5.maxSize;
    return !("object" != typeof s8 || !s8 || !this._isScaleDrivenSizeVariable(s8)) || (!("object" != typeof i7 || !i7 || !this._isScaleDrivenSizeVariable(i7)) || fe.test(t5.valueExpression));
  }
  _isLayerScaleDriven(e10) {
    if ("minScale" in e10 && e10.minScale > 0 || "maxScale" in e10 && e10.maxScale > 0) return true;
    if ("sublayers" in e10 && e10.sublayers) return e10.sublayers.some((e11) => this._isLayerScaleDriven(e11));
    const t5 = e10.parent;
    if (false === e10.loaded && t5 && Ne(t5) && "source" in e10 && e10.source && "map-layer" === e10.source.type) {
      for (const s8 of t5.sourceJSON.layers ?? []) if (s8.id === e10.source.mapLayerId && (s8.minScale > 0 || s8.maxScale > 0)) return true;
    }
    return false;
  }
  async _constructLegendElementsForVoxelLayer() {
    this.legendElements = [], this.removeHandles("voxel-style-watcher"), this.removeHandles("voxel-current-variable");
    const e10 = this.layer;
    this.addHandles(l(() => e10.currentVariableId, () => this._constructLegendElementsForVoxelLayer()), "voxel-current-variable"), this.addHandles(l(() => e10.getVariableStyles(), () => this._constructLegendElementsForVoxelLayer()), "voxel-style-watcher");
    const t5 = e10.getVariableStyle(null), s8 = [];
    if (t5) {
      if (t5.uniqueValues?.length) {
        const e11 = [];
        t5.uniqueValues.forEach((t6) => {
          t6.enabled && e11.push({ label: t6.label || `${t6.value}`, value: t6.value, symbol: new m2({ color: t6.color, outline: null }) });
        }), e11.length && s8.push({ type: "symbol-table", title: t5.label, infos: e11 });
      } else if (t5.transferFunction) {
        const { colorStops: e11, stretchRange: i7 } = t5.transferFunction, l9 = e11.toArray().reverse(), r8 = i7.map((e12, t6) => `${0 === t6 ? o4 : l3} ${s6(e12)}`).reverse(), n9 = l9.map((e12) => ({ color: e12.color, value: null, label: null }));
        n9[0].label = r8[0], n9[n9.length - 1].label = r8[1], s8.push({ type: "color-ramp", title: t5.label, infos: n9, preview: v2(l9.map((e12) => e12.color), { ariaLabel: await Xe("previewColorRampAriaLabel") }) });
      }
    }
    await this._generatePreviewsForLegendElements(s8, { opacity: e10.opacity }), this.legendElements = s8, this.notifyChange("ready");
  }
  _constructLegendElementsForWMTSlayer() {
    this.legendElements = [], this.removeHandles("wmts-activeLayer-watcher");
    const e10 = this.layer.activeLayer;
    this.addHandles(l(() => {
      const { layer: e11 } = this;
      return e11 && "activeLayer" in e11 && e11.activeLayer;
    }, () => this._constructLegendElementsForWMTSlayer()), "wmts-activeLayer-watcher");
    const t5 = e10.styleId ? e10.styles?.find(({ id: t6 }) => t6 === e10.styleId)?.legendUrl : void 0;
    t5 && (this.legendElements = [{ type: "symbol-table", title: e10.title, infos: [{ src: t5, opacity: this.opacity }] }]), this.notifyChange("ready");
  }
  async _constructLegendElementsForWMSSublayers() {
    this.legendElements = [], this.removeHandles("wms-sublayers-watcher");
    const e10 = this.layer;
    let t5 = null;
    (e10.customParameters || e10.customLayerParameters) && (t5 = { ...e10.customParameters, ...e10.customLayerParameters }), this.addHandles(l(() => {
      const { layer: e11 } = this;
      return e11 && "sublayers" in e11 && e11.sublayers;
    }, () => this._constructLegendElementsForWMSSublayers()), "wms-sublayers-watcher"), this.legendElements = await this._generateLegendElementsForWMSSublayers(e10.sublayers, t5), this.notifyChange("ready");
  }
  async _generateLegendElementsForWMSSublayers(e10, t5) {
    const s8 = this.layer, i7 = [];
    this.addHandles(e10.on("change", () => this._constructLegendElementsForWMSSublayers()), "wms-sublayers-watcher");
    const l9 = this.sublayerIds?.map((e11) => s8.findSublayerById(e11))?.filter(L) ?? [], n9 = l9.length ? l9 : e10.toArray();
    for (const r8 of n9) {
      const e11 = l(() => [r8.title, r8.visible, r8.legendEnabled], () => this._constructLegendElementsForWMSSublayers());
      if (this.addHandles(e11, "wms-sublayers-watcher"), !this.respectLayerVisibility || r8.visible && r8.legendEnabled) {
        const e12 = await this._generateSymbolTableElementForWMSSublayer(r8, t5);
        e12?.infos.length && i7.unshift(e12);
      }
    }
    return i7;
  }
  async _generateSymbolTableElementForWMSSublayer(e10, t5) {
    if (!e10.legendUrl && e10.sublayers) {
      const s8 = (await this._generateLegendElementsForWMSSublayers(e10.sublayers, t5)).filter((e11) => e11);
      return { type: "symbol-table", title: e10.title, infos: s8 };
    }
    return this._generateSymbolTableElementForLegendUrl(e10, t5);
  }
  async _generateSymbolTableElementForLegendUrl(e10, t5) {
    let s8 = e10.legendUrl;
    if (!s8) return;
    const l9 = { type: "symbol-table", title: e10.title || e10.name || String(e10.id ?? ""), infos: [] };
    t5 && (s8 = Ht(s8, t5));
    let r8 = null;
    const n9 = e10.layer?.opacity;
    try {
      r8 = (await H(s8, { responseType: "image" })).data, r8 && (r8.style.opacity = n9);
    } catch {
    }
    return l9.infos.push({ src: s8, preview: r8, opacity: n9 }), l9;
  }
  _getLegendLayers(e10, t5) {
    const s8 = tt && tt[e10];
    return s8 ? Promise.resolve(s8) : this._legendRequest(t5).then((t6) => {
      const s9 = t6.layers;
      return tt[e10] = s9, s9;
    });
  }
  _legendRequest(e10) {
    const t5 = this.layer;
    let s8 = { f: "json", dynamicLayers: e10 };
    if ($e(t5)) {
      const e11 = t5.exportImageServiceParameters.rasterFunction;
      if (e11 && (s8.renderingRule = JSON.stringify(e11.functionDefinition?.toJSON() || e11.toJSON())), t5.bandIds && (s8.bandIds = t5.bandIds.join()), t5.raster || t5.viewId || t5.customParameters) {
        const { raster: e12, viewId: i7, customParameters: l10 } = t5;
        s8 = { raster: e12, viewId: i7, ...s8, ...l10 };
      }
    }
    let l9 = t5.url.replace(/(\/)+$/, "");
    if ("version" in t5 && +t5.version >= 10.01) {
      const e11 = l9.indexOf("?");
      e11 > -1 ? l9 = l9.slice(0, e11) + "/legend" + l9.slice(e11) : l9 += "/legend";
    } else {
      const e11 = l9.toLowerCase().indexOf("/rest/"), t6 = -1 === e11 ? l9 : l9.slice(0, e11) + l9.slice(e11 + 5);
      l9 = ye + "?soapUrl=" + encodeURI(t6) + "&returnbytes=true";
    }
    return H(l9, { query: s8 }).then((e11) => e11.data);
  }
  async _constructLegendElementsForBuildingSceneLayer() {
    this.legendElements = [], this.removeHandles("sublayers-watcher");
    const e10 = this.layer;
    this.addHandles(l(() => e10.sublayers, () => this._constructLegendElementsForBuildingSceneLayer()), "sublayers-watcher");
    try {
      this.legendElements = await this._generateLegendElementsForBuildingSublayers(e10.sublayers, this.opacity), this.notifyChange("ready");
    } catch (t5) {
      i.getLogger(this).warn("Request to server for legend has failed!", t5);
    }
  }
  async _generateLegendElementsForBuildingSublayers(e10, t5) {
    let s8 = [];
    this.addHandles(e10.on("change", () => this._constructLegendElementsForBuildingSceneLayer()), "sublayers-watcher");
    const i7 = e10.toArray();
    for (const l9 of i7) {
      const e11 = l(() => ["renderer" in l9 && l9.renderer, l9.opacity, l9.title, l9.visible], () => this._constructLegendElementsForBuildingSceneLayer());
      if (this.addHandles(e11, "sublayers-watcher"), !this.respectLayerVisibility || l9.visible) {
        const e12 = null != l9?.opacity ? l9.opacity : null, i8 = null != e12 ? e12 * t5 : t5;
        if ("building-group" === l9.type) {
          const e13 = { type: "symbol-table", title: l9.title, infos: [] }, t6 = await this._generateLegendElementsForBuildingSublayers(l9.sublayers, i8);
          e13.infos.push(...t6), s8 = [e13, ...s8];
        } else if (l9.renderer) {
          s8 = [...await this._getRendererLegendElements(l9.renderer, { title: l9.title, opacity: i8, sublayer: l9 }), ...s8];
        }
      }
    }
    return s8.filter((e11) => !!e11 && (!("infos" in e11) || !e11.infos || e11.infos.length > 0));
  }
  async _constructLegendElementsForSublayers() {
    this.legendElements = [], this.removeHandles("sublayers-watcher");
    const e10 = this.layer;
    if (Ne(e10) || qe(e10) || ke(e10)) {
      this.addHandles(l(() => e10.sublayers, () => this._constructLegendElementsForSublayers), "sublayers-watcher");
      try {
        this.legendElements = await this._generateLegendElementsForSublayers(e10.sublayers, this.opacity), this.notifyChange("ready");
      } catch (t5) {
        i.getLogger(this).warn("Request to server for legend has failed!", t5);
      }
    }
  }
  async _generateLegendElementsForSublayers(e10, t5, s8) {
    const i7 = this.layer;
    let l9 = [];
    this.addHandles(e10.on("change", () => this._constructLegendElementsForSublayers()), "sublayers-watcher");
    let n9 = e10.toArray();
    !s8 && this.sublayerIds && this.sublayerIds.length && (n9 = ke(i7) ? this.sublayerIds.map((e11) => i7.findSublayerForSubtypeCode(e11)).filter(L) : this.sublayerIds.map((e11) => i7.findSublayerById(e11)).filter(L));
    for (const r8 of n9) {
      const e11 = l(() => [r8.renderer, r8.opacity, r8.title, r8.visible, r8.legendEnabled], () => this._constructLegendElementsForSublayers());
      if (this.addHandles(e11, "sublayers-watcher"), !this.respectLayerVisibility || r8.visible && r8.legendEnabled && this._isSublayerInScale(r8)) {
        const e12 = null != r8?.opacity ? r8.opacity : null, i8 = null != e12 ? e12 * t5 : t5, n10 = !Ze(r8) || r8.originIdOf("renderer") > e.SERVICE && !r8.sublayers;
        if (r8.renderer && n10) {
          await r8.load();
          l9 = [...await this._getRendererLegendElements(r8.renderer, { title: r8.title, opacity: i8, sublayer: r8 }), ...l9];
        } else if (Ze(r8)) {
          const e13 = await this._generateSymbolTableElementForSublayer(r8, i8, s8);
          e13 && l9.unshift(e13);
        }
      }
    }
    return l9.filter((e11) => !!e11 && (!("infos" in e11) || !e11.infos || e11.infos.length > 0));
  }
  async _generateSymbolTableElementForSublayer(e10, t5, s8) {
    if (!s8) {
      s8 = /* @__PURE__ */ new Map();
      const t6 = this.layer, i8 = e10.source;
      let l9 = null;
      if (!(!i8 || "map-layer" === i8.type && i8.mapLayerId === e10.id && (!i8.gdbVersion || i8.gdbVersion === ("gdbVersion" in t6 && t6.gdbVersion))) || e10.originIdOf("renderer") > e.SERVICE || e10.originIdOf("labelingInfo") > e.SERVICE || e10.originIdOf("labelsVisible") > e.SERVICE) {
        const e11 = new y({ layer: this.layer });
        l9 = e11.hasDynamicLayers ? e11.dynamicLayers : null, e11.destroy();
      }
      const r8 = l9 || `${t6.uid}-default`;
      (await this._getLegendLayers(r8, l9)).forEach((e11) => s8.set(e11.layerId, e11));
    }
    const i7 = s8.get(e10.id);
    if ((!i7 || i7?.subLayerIds && i7.defaultVisibility) && e10.sublayers) {
      const i8 = await this._generateLegendElementsForSublayers(e10.sublayers, t5, s8);
      return { type: "symbol-table", title: e10.title, infos: i8 };
    }
    return this._generateSymbolTableElementForLegendLayer(i7, e10, t5);
  }
  _generateSymbolTableElementForLegendLayer(e10, t5, s8) {
    if (!e10?.legend || this.respectLayerVisibility && !this._isLegendLayerInScale(e10, t5)) return null;
    const i7 = t5?.renderer;
    let l9 = t5?.title || e10.layerName;
    if (i7 && (!t5 || t5?.originIdOf("renderer") > e.SERVICE)) {
      const e11 = t5?.title || this._getRendererTitle(i7, t5);
      e11 && (l9 && "string" != typeof e11 && "title" in e11 && (e11.title = l9), l9 = e11);
    }
    const r8 = { type: "symbol-table", title: l9, legendType: e10.legendType || null, infos: [] }, n9 = t5 ? this._sanitizeLegendForSublayer(e10.legend.slice(), t5) : e10.legend;
    return e10.legendGroups && e10.legendGroups.length > 0 ? e10.legendGroups.forEach((t6) => {
      const i8 = { type: "symbol-table", title: t6.heading, legendType: e10.legendType || null, infos: this._generateSymbolTableElementInfosForLegendLayer(n9.filter((e11) => e11.groupId === t6.id), e10.layerId, s8) };
      i8.infos?.length > 0 && r8.infos.push(i8);
    }) : r8.infos = this._generateSymbolTableElementInfosForLegendLayer(n9, e10.layerId, s8), r8.infos.length > 0 ? r8 : null;
  }
  _generateSymbolTableElementInfosForLegendLayer(e10, t5, i7) {
    return e10.map((e11) => {
      let l9 = e11.url;
      if (e11.imageData && e11.imageData.length > 0) l9 = `data:image/png;base64,${e11.imageData}`;
      else {
        if (0 === l9.indexOf("http")) return null;
        l9 = t(`${this.layer.url}/${t5}/images/${l9}`);
      }
      return { label: e11.label, src: l9, opacity: i7 ?? this.opacity, width: e11.width, height: e11.height };
    }).filter(L);
  }
  _isSublayerInScale(e10) {
    const t5 = e10.minScale || 0, s8 = e10.maxScale || 0;
    return !(t5 > 0 && t5 < this.scale || s8 > this.scale);
  }
  _isLegendLayerInScale(e10, t5) {
    const s8 = t5 || this.layer;
    let i7 = null, l9 = null, r8 = true;
    return !s8.minScale && 0 !== s8.minScale || !s8.maxScale && 0 !== s8.maxScale ? (0 === e10.minScale && s8.tileInfo && (i7 = s8.tileInfo.lods[0].scale), 0 === e10.maxScale && s8.tileInfo && (l9 = s8.tileInfo.lods[s8.tileInfo.lods.length - 1].scale)) : (i7 = Math.min(s8.minScale, e10.minScale) || s8.minScale || e10.minScale, l9 = Math.max(s8.maxScale, e10.maxScale)), (i7 > 0 && i7 < this.scale || l9 > this.scale) && (r8 = false), r8;
  }
  _sanitizeLegendForSublayer(e10, t5) {
    if ("version" in this.layer && +this.layer.version < 10.1 || 0 === e10.length) return e10;
    const s8 = t5.renderer, i7 = e10.some((e11) => e11.values);
    let l9 = 0, r8 = null;
    return i7 && e10.some((e11, t6) => (e11.values || (l9 = t6, r8 = e11, r8.label || (r8.label = "others")), null != r8)), s8 ? "unique-value" === s8.type ? r8 && (e10.splice(l9, 1), e10.push(r8)) : "class-breaks" === s8.type && (r8 && e10.splice(l9, 1), s8.legendOptions?.order || e10.reverse(), r8 && e10.push(r8)) : r8 && (e10.splice(l9, 1), e10.push(r8)), e10;
  }
  async _getRendererLegendElements(e10, t5 = {}) {
    if (!Pe(e10, this.view)) return i.getLogger(this).warn(`Renderer of type '${e10.type}' not supported!`), [];
    if (Ve(e10)) return this._constructPointCloudRendererLegendElements(e10, t5);
    if (je(e10)) return this._constructDotDensityRendererLegendElements(e10);
    const s8 = await this._loadRenderer(e10);
    return Oe(s8) ? this._constructPieChartRendererLegendElements(s8) : this._constructRendererLegendElements(s8, t5);
  }
  async _getLegendElementsForFeatureReduction(e10) {
    let t5 = null;
    return "binning" === e10.type ? t5 = e10.renderer : "cluster" === e10.type && (t5 = this._getClusterRenderer(e10)), t5 ? this._getRendererLegendElements(t5) : [];
  }
  _getPointCloudRendererTitle(e10) {
    return (e10.legendOptions?.title || e10.field) ?? "";
  }
  async _constructPointCloudRendererLegendElements(e10, t5 = {}) {
    const s8 = t5.title, i7 = [];
    let l9 = null, r8 = null;
    if (xe(e10)) l9 = { type: "symbol-table", title: s8 || this._getPointCloudRendererTitle(e10), infos: [] }, e10.colorClassBreakInfos.forEach((e11) => {
      l9.infos.unshift({ label: e11.label || e11.minValue + " - " + e11.maxValue, value: [e11.minValue, e11.maxValue], symbol: this._getAppliedCloneSymbol(be, e11.color) });
    });
    else if (ze(e10)) {
      const t6 = e10.stops;
      let i8 = null;
      if (t6?.length && (1 === t6.length && (i8 = t6[0].color), !i8)) {
        const e11 = t6[0].value, s9 = t6[t6.length - 1].value;
        if (null != e11 && null != s9) {
          i8 = s4(e11 + (s9 - e11) / 2, t6);
        }
      }
      l9 = { type: "symbol-table", title: null, infos: [{ label: null, value: null, symbol: this._getAppliedCloneSymbol(be, i8 || be.color) }] };
      const n9 = u7(e10.stops ?? []) ?? [];
      r8 = { type: "color-ramp", title: s8 || this._getPointCloudRendererTitle(e10), infos: n9, preview: v2(n9.map((e11) => e11.color), { ariaLabel: await Xe("previewColorRampAriaLabel") }) };
    } else Te(e10) && (l9 = { type: "symbol-table", title: s8 || this._getPointCloudRendererTitle(e10), infos: [] }, e10.colorUniqueValueInfos?.forEach((e11) => {
      l9.infos.push({ label: e11.label || e11.values.join(", "), value: e11.values.join(", "), symbol: this._getAppliedCloneSymbol(be, e11.color) });
    }));
    return l9?.infos.length && i7.push(l9), r8?.infos.length && i7.push(r8), await this._generatePreviewsForLegendElements(i7, { opacity: this.opacity, symbolConfig: { applyColorModulation: !!e10.colorModulation } }), i7;
  }
  async _getElementInfoForDotDensity(e10, t5) {
    const { color: s8, label: i7, valueExpressionTitle: l9 } = t5, { backgroundColor: r8, outline: n9, dotSize: a11 } = e10, o7 = this.effectList, u13 = o7?.effects.map((e11) => e11.toJSON()), c9 = i3(u13), d10 = await Xe("previewTemplateAriaLabel", i7 || l9), y5 = a11 + "-" + s8 + "-" + r8 + "-" + (n9 && JSON.stringify(n9.toJSON())) + "-" + c9, h5 = this._dotDensityUrlCache, m8 = h5.has(y5) ? h5.get(y5) : g(e10, s8, { ariaLabel: d10 });
    h5.set(y5, m8);
    const p8 = { shape: { type: "image", x: 0, y: 0, width: m8.width, height: m8.height, src: m8.src }, fill: null, stroke: null, offset: [0, 0] }, f9 = l4([[p8]], [m8.width, m8.height], { effectView: this.effectList, ariaLabel: d10 });
    return { opacity: 1, src: m8.src, preview: f9, width: m8.width, height: m8.height };
  }
  async _constructDotDensityRendererLegendElements(e10) {
    const t5 = e10.calculateDotValue(this.view.scale), s8 = e10.legendOptions?.unit, i7 = { type: "symbol-table", title: { value: t5 && Math.round(t5), unit: s8 || "" }, infos: [] };
    for (const l9 of e10.attributes) {
      const t6 = await this._getElementInfoForDotDensity(e10, l9);
      t6.label = l9.label || l9.valueExpressionTitle || l9.field, i7.infos.push(t6);
    }
    return [i7];
  }
  async _constructPieChartRendererLegendElements(e10) {
    const t5 = [];
    let s8 = null;
    const i7 = e10.outline;
    e10.attributes.forEach((e11) => {
      const s9 = new u3({ color: e11.color, outline: i7 }), l10 = e11.label || e11.valueExpressionTitle || e11.field;
      t5.push({ label: l10, symbol: s9 });
    });
    const l9 = t5.length ? [...t5] : [];
    if (e10.othersCategory?.color && 0 !== e10.othersCategory?.threshold) {
      const l10 = new u3({ color: e10.othersCategory.color, outline: i7 });
      s8 = e10.othersCategory.label || "Other", t5.push({ label: s8, symbol: l10 });
    }
    if (e10.defaultColor?.a) {
      const s9 = new u3({ color: e10.defaultColor, outline: i7 });
      t5.push({ label: e10.defaultLabel, symbol: s9 });
    }
    const r8 = await this._getVisualVariableLegendElements(e10, this.layer) || [];
    if (t5.length) {
      r8.unshift({ type: "symbol-table", title: null, infos: t5 });
      const n9 = l9.filter((e11) => e11.label !== s8).map((e11) => e11.symbol.color).filter(Boolean), a11 = w2(n9, { holePercentage: e10.holePercentage, backgroundColor: e10.backgroundFillSymbol?.color, effectList: this.effectList, outline: i7, ariaLabel: await Xe("previewPieChartAriaLabel") });
      r8.unshift({ type: "pie-chart-ramp", title: this._getRendererTitle(e10, this.layer), infos: t5, preview: a11 });
    }
    return await this._generatePreviewsForLegendElements(r8, { opacity: this.layer.opacity, effectView: this.effectList }), r8;
  }
  async _getWhereClause(e10, t5, s8) {
    const i7 = await e4(e10, s8), l9 = /* @__PURE__ */ new Set(), { field: r8, field2: n9, field3: a11 } = t5;
    T(l9, s8, [r8, n9, a11]), E(l9, s8, t5.valueExpression);
    const o7 = new Set(Array.from(l9, (e11) => e11.toLowerCase())), u13 = i7?.fieldNames.map((e11) => e11.toLowerCase());
    return u13?.some((e11) => !o7.has(e11)) ? null : i7;
  }
  async _processDefinitionExpression(e10, t5) {
    if (!("definitionExpression" in e10)) return;
    const s8 = e10.definitionExpression;
    s8 && this.respectLayerDefinitionExpression ? this._layerDefinitionExpression !== s8 && (this._layerDefinitionExpressionClause = await this._getWhereClause(s8, t5, e10.fieldsIndex)) : this._layerDefinitionExpressionClause = null, this._layerDefinitionExpression = s8;
  }
  async _processDisplayFilter(e10, t5) {
    if (!("displayFilterInfo" in e10)) return;
    const s8 = e10.displayFilterInfo ? u4(e10.displayFilterInfo, this.view) : null;
    return s8?.where ? this._layerDisplayFilterId !== s8?.id && (this._layerDisplayFilterClause = await this._getWhereClause(s8.where, t5, e10.fieldsIndex)) : this._layerDisplayFilterClause = null, this._layerDisplayFilterId = s8?.id, s8;
  }
  async _constructRendererLegendElements(e10, t5 = {}) {
    const { title: s8, sublayer: i7 } = t5, l9 = i7 || this.layer, r8 = c3(e10, "reference-size"), n9 = c3(e10, "spike");
    let a11 = null;
    Fe(e10) && (await this._processDefinitionExpression(l9, e10), a11 = await this._processDisplayFilter(l9, e10)), this._hasColorRamp = false, this._hasOpacityRamp = false, this._hasSizeRamp = false, this._scaleDrivenSizeVariable = null;
    const o7 = await this._getVisualVariableLegendElements(e10, l9) || [], u13 = { type: "symbol-table", title: s8 || this._getRendererTitle(e10, l9), infos: [] };
    let c9 = null, d10 = false;
    const y5 = /* @__PURE__ */ new Set();
    if (_e(e10) && !this._hasSizeRamp) {
      const t6 = await p2(e10);
      u13.infos.push({ label: null, symbol: t6 });
    } else if (Je(e10)) {
      let t6 = s8;
      const i8 = Qe(e10) ? "univariate-above-and-below-ramp" : "univariate-color-size-ramp", l10 = o7.findIndex((e11) => "color-ramp" === e11.type), r9 = -1 !== l10 ? o7.splice(l10, 1)[0] : null, n10 = o7.findIndex((e11) => "size-ramp" === e11.type), a12 = -1 !== n10 ? o7.splice(n10, 1)[0] : null, u14 = [];
      r9 && (t6 = r9.title, u14.push(r9)), a12 && (t6 = a12.title, u14.push(a12)), u14.length > 0 && o7.push({ type: i8, title: t6, infos: u14 });
    } else if (Re(e10)) {
      const t6 = r3(e10);
      o7.push({ type: "heatmap-ramp", title: s8 || this._getRendererTitle(e10, l9), infos: t6, preview: v2(t6.map((e11) => e11.color), { effectList: this.effectList, ariaLabel: await Xe("previewColorRampAriaLabel") }) });
    } else if (Fe(e10)) {
      const t6 = e10.authoringInfo;
      if (t6 && "relationship" === t6.type) {
        const { numClasses: s9, field1: i8, field2: r9 } = t6, n10 = t6.focus;
        if (s9 && i8 && r9) {
          const t7 = [i8, r9];
          let a12 = u8(n10) || 0;
          for (const e11 of t7) {
            const { field: t8, normalizationField: s10, label: i9 } = e11, r10 = i9 || { field: this._getFieldAlias(t8, l9), normField: s10 && this._getFieldAlias(s10, l9) }, n11 = et.clone();
            n11.angle = a12, u13.infos.push({ label: r10, symbol: n11 }), y5.add(n11), a12 += 90;
          }
          const c10 = i4({ focus: n10, numClasses: s9, infos: e10.uniqueValueInfos ?? [] });
          o7.unshift(c10);
        }
      } else if ($e(this.layer) || He(this.layer)) e10.uniqueValueInfos?.forEach((t7) => {
        t7.symbol && this._checkClausesForUVR(e10, t7.value) && u13.infos.push({ label: t7.label || t7.value, value: t7.value, symbol: t7.symbol });
      });
      else {
        const { field: t7, field2: i8, field3: n10, fieldDelimiter: o8, valueExpression: c10, defaultSymbol: y6 } = e10, h6 = !(!t7 && !c10 || !i8 && !n10), m9 = this._layerDisplayFilterClause ? a11?.title : null, p9 = [];
        if (e10.uniqueValueGroups?.forEach((s9) => {
          const a12 = { type: "symbol-table", title: m9 || s9.heading, infos: [] };
          s9.classes?.forEach((s10) => {
            const { symbol: u14, values: d11 } = s10;
            if (u14) {
              const y7 = [], m10 = [];
              for (const e11 of d11 ?? []) {
                const { value: s11, value2: r9, value3: a13 } = e11, u15 = [], d12 = [];
                (t7 || c10) && (u15.push(s11), d12.push(this._getDomainName(t7, s11, l9))), i8 && (u15.push(r9), d12.push(this._getDomainName(i8, r9, l9))), n10 && (u15.push(a13), d12.push(this._getDomainName(n10, a13, l9))), y7.push(h6 ? u15.join(o8 || "") : u15[0]), m10.push(d12.join(" - "));
              }
              const p10 = y7.join(", ");
              let f10 = s10.label;
              if (!f10) {
                const e11 = m10.filter(Boolean);
                f10 = e11.length ? e11.join(", ") : p10;
              }
              const g5 = u14.clone();
              "cim" === g5.type && r8 && v(g5, { innerDotSize: 0.5 * de, outerRingSize: de }), y7.some((t8) => this._checkClausesForUVR(e10, t8)) && a12.infos.push({ label: f10, value: p10, symbol: g5 });
            }
          }), a12.infos.length && p9.push(a12);
        }), p9.length) {
          const t8 = p9[0];
          if (1 === p9.length && "title" in t8 && !t8.title) {
            const e11 = t8.infos?.filter(Ke) ?? [];
            u13.infos.push(...e11);
          } else y6 && (p9.push({ type: "symbol-table", infos: [{ label: e10.defaultLabel || "others", symbol: y6 }] }), d10 = true), u13.infos.push(...p9);
          s8 || e10.legendOptions?.title || e10.valueExpressionTitle || (u13.title = null);
        }
      }
      e10.defaultSymbol && !d10 && (u13.infos.push({ label: e10.defaultLabel || "others", symbol: e10.defaultSymbol }), d10 = true);
    } else if (Ie(e10)) {
      if (!r8 && !n9) {
        c9 = this._isUnclassedRenderer(e10);
        if (!c9 || !this._hasSizeRamp) {
          const t6 = e10.classBreakInfos.filter(({ symbol: e11 }) => e11), s9 = "ascending-values" === e10.legendOptions?.order;
          for (const { label: e11, minValue: i8, maxValue: l10, symbol: r9 } of t6) {
            const t7 = { label: e11 || (c9 ? null : `${i8} - ${l10}`), value: [i8, l10], symbol: r9 };
            s9 ? u13.infos.push(t7) : u13.infos.unshift(t7);
          }
          c9 && (u13.title = null), this._updateInfosForClassedSizeRenderer(e10, u13.infos);
        }
        e10.defaultSymbol && !c9 && (u13.infos.push({ label: e10.defaultLabel || "others", symbol: e10.defaultSymbol }), d10 = true);
      }
    } else if (Le(e10)) if (He(this.layer) || We(this.layer)) {
      const t6 = await this._constructTileImageryStretchRendererElements(e10);
      Ge(t6) ? o7.push(t6) : u13.infos = t6;
    } else {
      const t6 = this.layer;
      let s9, i8;
      e10.customStatistics?.length && ({ min: s9, max: i8 } = e10.customStatistics[0]);
      let l10 = [], r9 = t6.serviceRasterInfo;
      if (t6.rasterFunction) try {
        r9 = await t6.generateRasterInfo(t6.rasterFunction);
      } catch {
      }
      const n10 = u5(r9.pixelType);
      if (1 === r9.bandCount) {
        const l11 = t6.bandIds?.[0] || 0;
        s9 = null != s9 ? s9 : r9.statistics ? r9.statistics[l11].min : n10[0], i8 = null != i8 ? i8 : r9.statistics ? r9.statistics[l11].max : n10[1], s9 || i8 ? o7.push(await this._getStretchLegendElements(e10, { min: s9, max: i8 })) : this._getServerSideLegend();
      } else if (t6.bandIds && 1 === t6.bandIds.length) s9 = null != s9 ? s9 : r9.statistics ? r9.statistics[t6.bandIds[0]].min : n10[0], i8 = null != i8 ? i8 : r9.statistics ? r9.statistics[t6.bandIds[0]].max : n10[1], s9 || i8 ? o7.push(await this._getStretchLegendElements(e10, { min: s9, max: i8 })) : this._getServerSideLegend();
      else if (r9.bandCount >= 3) {
        const { bandInfos: e11 } = r9, { bandIds: s10 } = t6;
        e11.length >= r9.bandCount ? 3 === s10?.length ? (l10 = s10.map((t7) => e11[t7].name), u13.infos = this._createSymbolTableElementMultiBand(l10)) : "lerc" === t6.format ? (l10 = [0, 1, 2].map((t7) => e11[t7].name), u13.infos = this._createSymbolTableElementMultiBand(l10)) : this._getServerSideLegend() : "lerc" === t6.format ? (l10 = ["band1", "band2", "band3"], u13.infos = this._createSymbolTableElementMultiBand(l10)) : this._getServerSideLegend();
      } else this._getServerSideLegend();
    }
    else if (ve(e10)) e10.colormapInfos.forEach((e11) => {
      u13.infos.push({ label: e11.label, value: e11.value, symbol: this._getAppliedCloneSymbol(Se, e11.color) });
    });
    else if (Ce(e10)) {
      let s9 = e10.symbol;
      switch (t5.geometryType) {
        case "point":
          s9 = "pointSymbol" in l9 ? l9.pointSymbol : null;
          break;
        case "polyline":
          s9 = "lineSymbol" in l9 ? l9.lineSymbol : null;
          break;
        case "polygon":
          s9 = "polygonSymbol" in l9 ? l9.polygonSymbol : null;
      }
      const i8 = this._hasClusterSizeVariable && this._getClusterSymbol() || !this._hasSizeRamp;
      e10.symbol && i8 && u13.infos.push({ label: e10.label, symbol: s9 });
    } else if (we(e10)) {
      e10.outputUnit && (this.title = "(" + e10.toJSON().outputUnit + ")"), u13.title = e10.attributeField;
      const t6 = e10.getClassBreakInfos();
      t6?.length ? t6.forEach((e11) => {
        u13.infos.push({ label: e11.minValue + " - " + e11.maxValue, symbol: e11.symbol });
      }) : u13.infos.push({ label: e10.attributeField, symbol: e10.getDefaultSymbol() });
    } else Ee(e10) && o7.push(await this._getStretchLegendElements(e10, { min: 0, max: 255 }));
    const h5 = e10.defaultSymbol;
    !h5 || d10 || Ce(e10) || c9 && !this._hasColorRamp && !this._hasSizeRamp && !this._hasOpacityRamp || o7.push({ type: "symbol-table", infos: [{ label: e10.defaultLabel || "others", symbol: h5 }] }), u13.infos.length && o7.unshift(u13);
    const m8 = null == t5.opacity ? this.opacity : t5.opacity, p8 = this._isTallSymbol("visualVariables" in e10 ? e10.visualVariables : null), f9 = $e(this.layer) || He(this.layer);
    return await this._generatePreviewsForLegendElements(o7, { opacity: m8, symbolConfig: { isTall: p8, isSquareFill: f9 }, effectView: this.effectList }, { defaultSymbol: h5, arrowMarkerSymbols: y5 }), e10 = null, o7;
  }
  _checkClausesForUVR(e10, t5) {
    const s8 = Ye(e10, t5);
    return !s8 || (!this._layerDefinitionExpressionClause || this._layerDefinitionExpressionClause.testFeature(s8)) && (!this._layerDisplayFilterClause || this._layerDisplayFilterClause.testFeature(s8));
  }
  _getServerSideLegend() {
    setTimeout(() => this.buildLegendElementsForTools(), 0);
  }
  _getAllInfos(e10) {
    const t5 = e10?.infos;
    return t5 ? t5.reduce((e11, t6) => e11.concat(this._getAllInfos(t6)), []) : [e10];
  }
  async _constructTileImageryStretchRendererElements(e10) {
    const t5 = this.layer, s8 = t5.symbolizer.rasterInfo ?? t5.raster.rasterInfo;
    let i7, l9;
    const r8 = e10?.customStatistics?.length ? e10.customStatistics : s8?.statistics;
    if (r8) ({ min: i7, max: l9 } = r8[0]);
    else {
      const e11 = u5(s8.pixelType);
      i7 = e11[0], l9 = e11[1];
    }
    if (t5.hasStandardTime() && (i7 = t5.getStandardTimeValue(i7), l9 = t5.getStandardTimeValue(l9)), 1 === s8.bandCount || 1 === t5.bandIds?.length) return this._getStretchLegendElements(e10, { min: i7, max: l9 });
    const n9 = (t5?.bandIds?.length ? t5.bandIds : Array.from(Array(Math.min(s8.bandCount, 3)).keys())).map((e11) => s8.bandInfos[e11].name);
    return n9.length < 3 ? n9.push(n9[1]) : n9.length > 3 && n9.splice(3), this._createSymbolTableElementMultiBand(n9);
  }
  async _getStretchLegendElements(e10, t5) {
    const s8 = e10.colorRamp, i7 = c4(s8, t5);
    return { type: "stretch-ramp", title: "", infos: i7, preview: v2(i7.map((e11) => e11.color), { ariaLabel: await Xe("previewColorRampAriaLabel") }) };
  }
  _getClusterSymbol() {
    const e10 = this.layer, t5 = "featureReduction" in e10 && e10.featureReduction, s8 = t5 && "symbol" in t5 && t5.renderer;
    return s8 && true !== s8?.authoringInfo?.isAutoGenerated ? null : t5 && "symbol" in t5 ? t5.symbol : null;
  }
  async _getSizeLegendElement(e10, t5, s8, i7) {
    return { type: "size-ramp", title: this._hasClusterSizeVariable ? this._getClusterTitle(t5) : e10, infos: await L3(s8, t5, await u6(s8), this.scale, this.view, i7, this._hasClusterSizeVariable ? this._getClusterSymbol() : null) };
  }
  _createSymbolTableElementMultiBand(e10) {
    const t5 = [], s8 = ["red", "green", "blue"];
    return e10.forEach((e11, i7) => {
      t5.push({ label: { colorName: s8[i7], bandName: e11 }, src: s3[i7], opacity: this.opacity ?? 1 });
    }), t5;
  }
  _updateInfosForClassedSizeRenderer(e10, t5) {
    const s8 = e10.authoringInfo && "class-breaks-size" === e10.authoringInfo.type, i7 = e10.classBreakInfos.some((e11) => h2(e11.symbol));
    if (s8 && i7) {
      const s9 = w, i8 = S, l9 = e10.classBreakInfos.length, r8 = (s9 - i8) / (l9 > 1 ? l9 - 1 : l9);
      t5.forEach((e11, t6) => {
        e11.size = s9 - r8 * t6;
      });
    }
  }
  _isTallSymbol(e10) {
    let t5 = false, s8 = false;
    if (e10) for (let i7 = 0; i7 < e10.length && (!t5 || !s8); i7++) {
      const l9 = e10[i7];
      "size" === l9.type && ("height" === l9.axis && (t5 = true), "width-and-depth" === l9.axis && (s8 = true));
    }
    return t5 && s8;
  }
  async _generatePreviewsForLegendElements(e10, t5, s8) {
    const i7 = [];
    for (const l9 of e10) for (const e11 of l9.infos ?? []) if ("infos" in e11 && e11.infos && i7.push(this._generatePreviewsForLegendElements([e11], t5, s8)), Ke(e11) && e11.symbol && !e11.preview) {
      let r8 = true;
      if ("cim" === e11.symbol.type) {
        const { minScale: t6, maxScale: s9 } = e11.symbol.data;
        (t6 && t6 < this.scale || s9 && s9 > this.scale) && (r8 = false);
      }
      r8 && i7.push(this._generateSymbolPreviewForInfo(e11, { ...t5, clipBloomEffect: "theme" in l9 && "spike" === l9.theme, effectView: s8?.arrowMarkerSymbols?.has(e11.symbol) ? null : t5.effectView }, s8 ? { isDefault: e11.symbol === s8.defaultSymbol, applyScaleDrivenSize: !s8.arrowMarkerSymbols?.has(e11.symbol) } : void 0));
    }
    await Promise.all(i7);
  }
  async _generateSymbolPreviewForInfo(e10, t5, s8) {
    try {
      let i7 = !s8?.isDefault && null == e10.size && this._hasSizeRamp ? e3(t4.size) : e10.size;
      if (this._scaleDrivenSizeVariable && s8?.applyScaleDrivenSize) {
        const { getSize: t6 } = await import("./visualVariableUtils-GDSTYDYW.js");
        i7 = t6(this._scaleDrivenSizeVariable, null, { view: this.view.type, scale: this.scale, shape: "simple-marker" === e10.symbol.type ? e10.symbol.style : null });
      }
      const l9 = "cim" === e10.symbol.type ? { style: "legend", cimOptions: { allowScalingUp: !s8?.isDefault && this._hasSizeRamp || !(!this._scaleDrivenSizeVariable || !s8?.applyScaleDrivenSize), viewParams: this.isScaleDriven ? { viewingMode: "2d" === this.view?.type ? "map" : this.view?.viewingMode, scale: this.view?.scale } : null } } : {}, r8 = e10.label && "string" != typeof e10.label ? null : await Xe("previewTemplateAriaLabel", e10.label);
      e10.preview = await k4(e10.symbol, { size: i7, scale: false, ariaLabel: r8, ...t5, ...l9 });
    } catch {
      e10.preview = null, i.getLogger(this).warn(`Generating symbol preview failed for symbol type: ${e10.symbol?.type}`);
    }
  }
  _getClusterRenderer(e10) {
    this._hasClusterSizeVariable = false;
    const t5 = "renderer" in this.layer ? this.layer.renderer : null, s8 = e10.renderer?.clone() || t5?.clone(), i7 = l5(e10, this.layerView, this.view);
    if (i7 && null != s8 && "visualVariables" in s8) {
      const t6 = s8.visualVariables?.some((e11) => "size" === e11.type && "outline" !== e11.target && !fe.test(e11.valueExpression));
      if (!t6) {
        if ("clusterMinSize" in e10 && "clusterMaxSize" in e10) {
          const { clusterMinSize: t8, clusterMaxSize: s9 } = e10;
          i7.legendOptions = new p({ showLegend: t8 !== s9 });
        }
        const t7 = s8.visualVariables || [];
        s8.visualVariables = t7.concat([i7]), this._hasClusterSizeVariable = true;
      }
    }
    return s8;
  }
  async _loadRenderer(e10) {
    const t5 = [], s8 = e10.clone(), i7 = await u6(s8);
    if (Ie(s8) || Fe(s8)) {
      const e11 = (s8.classBreakInfos || s8.uniqueValueInfos).map((e12) => this._fetchSymbol(e12.symbol, i7).then((t6) => {
        e12.symbol = t6;
      }).catch(() => {
        e12.symbol = null;
      }));
      Array.prototype.push.apply(t5, e11);
    }
    return t5.push(this._fetchSymbol(s8.symbol || s8.defaultSymbol, s8.defaultSymbol ? null : i7).then((e11) => {
      this._applySymbolToRenderer(s8, e11, Ce(s8));
    }).catch(() => {
      this._applySymbolToRenderer(s8, null, Ce(s8));
    })), await Promise.allSettled(t5), s8;
  }
  _applySymbolToRenderer(e10, t5, s8) {
    s8 ? e10.symbol = t5 : e10.defaultSymbol = t5;
  }
  async _fetchSymbol(e10, t5) {
    if (!e10) throw new Error();
    if ("web-style" === e10.type) {
      const s8 = this._webStyleSymbolCache;
      try {
        const i7 = await e10.fetchSymbol({ cache: s8 });
        return this._getAppliedCloneSymbol(i7, t5);
      } catch {
        throw i.getLogger(this).warn("Fetching web-style failed!"), new Error();
      }
    }
    return this._getAppliedCloneSymbol(e10, t5);
  }
  _getAppliedCloneSymbol(e10, s8) {
    if (!e10 || !s8) return e10;
    const i7 = e10.clone(), l9 = s8 && s8.toRgba();
    return i7.type.includes("3d") ? this._applyColorTo3dSymbol(i7, l9) : "cim" === i7.type ? k2(i7, s8) : i7.color && (i7.color = new l2(l9 || i7.color)), i7;
  }
  _applyColorTo3dSymbol(e10, s8) {
    s8 && e10.symbolLayers.forEach((e11) => {
      e11 && (e11.material || (e11.material = {}), e11.material.color = new l2(s8));
    });
  }
  async _getVisualVariableLegendElements(e10, t5) {
    if (!("visualVariables" in e10) || "vector-field" === e10.type) return null;
    const s8 = e10.visualVariables ?? [], i7 = [], l9 = [], n9 = [], a11 = c3(e10, "reference-size") ?? c3(e10, "spike");
    let o7;
    if (2 === a11?.sizeStops?.length && (Ie(e10) || Fe(e10))) {
      const [e11, t6] = a11.sizeStops;
      o7 = new f3({ field: a11.field ?? void 0, normalizationField: a11.normalizationField, minSize: r2(e11.size, 10, 100), maxSize: r2(t6.size, 50, 150), minDataValue: e11.value, maxDataValue: t6.value }), l9.push(o7);
    }
    for (const r8 of s8) "color" === r8.type ? i7.push(r8) : "size" === r8.type ? l9.push(r8) : "opacity" === r8.type && n9.push(r8);
    const c9 = [...i7, ...l9, ...n9];
    let d10, y5;
    if (0 === i7.length && Ie(e10) && e10.classBreakInfos && 1 === e10.classBreakInfos.length) {
      const t6 = e10.classBreakInfos[0];
      d10 = t6 && t6.symbol;
    }
    if (0 === i7.length && Ce(e10) && (d10 = e10.symbol), d10) if (d10.type.includes("3d")) {
      const e11 = d10.symbolLayers.at(0);
      "water" === e11.type ? null != e11.color && (y5 = e11.color) : null != e11.material?.color && (y5 = e11.material.color);
    } else d10.url || (y5 = d10.color);
    const h5 = this.effectList;
    return (await Promise.all(c9.map(async (s9) => {
      if (!s9.legendOptions || false !== s9.legendOptions.showLegend) {
        const i8 = _e(e10) ? s9.field : this._getRampTitle(s9, t5);
        let l10 = null;
        const r8 = d2(t5, s9, this.view.timeZone);
        if ("color" === s9.type) {
          const e11 = await t3(s9, null, r8) ?? [];
          l10 = { type: "color-ramp", title: i8, infos: e11, preview: v2(e11.map((e12) => e12.color), { effectList: h5, ariaLabel: await Xe("previewColorRampAriaLabel") }) }, this._hasColorRamp || (this._hasColorRamp = e11.length > 0);
        } else if ("size" === s9.type && "outline" !== s9.target) fe.test(s9.valueExpression) ? this._hasClusterSizeVariable || (this._scaleDrivenSizeVariable = s9) : (l10 = await this._getSizeLegendElement(i8, s9, e10, r8), o7 === s9 && "spike" === a11?.theme && (l10.theme = a11.theme), this._hasSizeRamp || (this._hasSizeRamp = !(null == l10.infos || !l10.infos.length)));
        else if ("opacity" === s9.type) {
          const e11 = await t3(s9, y5, r8) ?? [];
          l10 = { type: "opacity-ramp", title: i8, infos: e11, preview: v2(e11.map((e12) => e12.color), { effectList: h5, ariaLabel: await Xe("previewColorRampAriaLabel") }) }, this._hasOpacityRamp || (this._hasOpacityRamp = e11.length > 0);
        }
        return l10?.infos ? l10 : null;
      }
    }))).filter(L);
  }
  _getDomainName(e10, t5, s8) {
    if (e10 && "function" != typeof e10) {
      const i7 = "getField" in s8 && s8.getField?.(e10), l9 = i7 && "getFieldDomain" in s8 && s8.getFieldDomain ? s8.getFieldDomain(i7.name, { excludeImpliedDomains: has("esri-widget-legacy-field-domain-calculation") }) : null;
      return "coded-value" === l9?.type ? l9.getName(t5) : null;
    }
    return null;
  }
  _getClusterTitle(e10) {
    const t5 = this.layer, s8 = e10.field;
    if ("featureReduction" in t5 && t5.featureReduction && "cluster" === t5.featureReduction.type) {
      const e11 = t5.featureReduction, i7 = "popupTemplate" in e11 && e11.popupTemplate, l9 = i7 && i7.fieldInfos;
      if (l9) {
        for (const t6 of l9) if (t6.fieldName === s8) return "cluster_count" === s8 ? t6.label || { showCount: true } : t6.label;
      }
    }
    return { showCount: true };
  }
  _getRampTitle(e10, t5) {
    let s8 = e10.field, i7 = e10.normalizationField, l9 = false, r8 = false, n9 = false, a11 = null;
    s8 = "function" == typeof s8 ? null : s8, i7 = "function" == typeof i7 ? null : i7;
    const o7 = e10.legendOptions?.title;
    if (null != o7) a11 = o7;
    else if (e10.valueExpressionTitle) a11 = e10.valueExpressionTitle;
    else {
      if ("renderer" in t5 && t5.renderer && "authoringInfo" in t5.renderer && t5.renderer.authoringInfo?.visualVariables) {
        const e11 = t5.renderer.authoringInfo.visualVariables;
        for (let t6 = 0; t6 < e11.length; t6++) {
          const s9 = e11[t6];
          if ("color" === s9.type) {
            if ("ratio" === s9.style) {
              l9 = true;
              break;
            }
            if ("percent" === s9.style) {
              r8 = true;
              break;
            }
            if ("percent-of-total" === s9.style) {
              n9 = true;
              break;
            }
          }
        }
      }
      a11 = { field: s8 && this._getFieldAlias(s8, t5), normField: i7 && this._getFieldAlias(i7, t5), ratio: l9, ratioPercent: r8, ratioPercentTotal: n9 };
    }
    return a11;
  }
  _getRendererTitle(e10, t5) {
    const s8 = e10;
    if (s8.legendOptions?.title) return s8.legendOptions.title;
    if (s8.valueExpressionTitle) return s8.valueExpressionTitle;
    let i7 = s8.field, l9 = null, r8 = null;
    if (Ie(s8) && (l9 = s8.normalizationField, r8 = "percent-of-total" === s8.normalizationType), i7 = "function" == typeof i7 ? null : i7, l9 = "function" == typeof l9 ? null : l9, Fe(s8)) {
      const { field2: e11, field3: l10, fieldDelimiter: r9 } = s8;
      let n10 = i7 && this._getFieldAlias(i7, t5);
      return e11 && (n10 = `<${n10}>${r9}<${this._getFieldAlias(e11, t5)}>`, l10 && (n10 = `${n10}${r9}<${this._getFieldAlias(l10, t5)}>`)), n10;
    }
    let n9 = null;
    return (i7 || l9) && (n9 = { field: i7 && this._getFieldAlias(i7, t5), normField: l9 && this._getFieldAlias(l9, t5), normByPct: r8 }), n9;
  }
  _getFieldAlias(e10, t5) {
    const s8 = "popupTemplate" in t5 ? t5.popupTemplate : null, i7 = s8?.fieldInfos;
    let l9 = i7?.find((t6) => e10 === t6.fieldName), r8 = null;
    "getField" in t5 && t5.getField ? r8 = t5.getField(e10) : "fieldsIndex" in t5 && t5.fieldsIndex && (r8 = t5.fieldsIndex.get(e10));
    let n9 = null;
    const a11 = "featureReduction" in t5 && t5.featureReduction;
    a11 && (l9 ??= "popupTemplate" in a11 ? a11.popupTemplate?.fieldInfos?.find((t6) => e10?.toLowerCase() === t6.fieldName?.toLowerCase()) : void 0, "fields" in a11 && a11.fields && (n9 = a11.fields.find((t6) => t6.name?.toLowerCase() === e10?.toLowerCase())));
    const o7 = l9 || r8 || n9;
    let u13 = null;
    return o7 && (u13 = l9?.label || r8?.alias || n9?.alias || "name" in o7 && o7.name || "fieldName" in o7 && o7.fieldName || null), u13;
  }
  _isUnclassedRenderer(e10) {
    const t5 = e10.visualVariables;
    let s8 = false;
    return Ie(e10) && e10.classBreakInfos && 1 === e10.classBreakInfos.length && t5 && (s8 = e10.field ? t5.some((t6) => !(!t6 || e10.field !== t6.field || (e10.normalizationField || t6.normalizationField) && e10.normalizationField !== t6.normalizationField)) : !!t5.length), s8;
  }
};
r([m()], st.prototype, "children", void 0), r([m({ readOnly: true })], st.prototype, "effectList", null), r([m()], st.prototype, "layerView", void 0), r([m()], st.prototype, "layer", void 0), r([m()], st.prototype, "legendElements", void 0), r([m({ readOnly: true })], st.prototype, "opacity", null), r([m()], st.prototype, "parent", void 0), r([m({ readOnly: true, dependsOn: [] })], st.prototype, "ready", null), r([m()], st.prototype, "hideLayersNotInCurrentView", void 0), r([m()], st.prototype, "keepCacheOnDestroy", void 0), r([m()], st.prototype, "respectLayerDefinitionExpression", void 0), r([m()], st.prototype, "respectLayerVisibility", void 0), r([m({ readOnly: true })], st.prototype, "scale", null), r([m()], st.prototype, "sublayerIds", void 0), r([m({ readOnly: true })], st.prototype, "isScaleDriven", null), r([m()], st.prototype, "title", void 0), r([m({ readOnly: true, dependsOn: ["ready"], value: 0 })], st.prototype, "version", null), r([m()], st.prototype, "view", void 0), st = r([a("esri.widgets.Legend.support.ActiveLayerInfo")], st);

// node_modules/@arcgis/core/widgets/Legend/LegendViewModel.js
var c5 = { state: "state", view: "view", allLayerViews: "all-layer-views", legendProperties: "legend-properties" };
var L4 = V.ofType(st);
var p3 = /* @__PURE__ */ new Set(["esri.layers.BuildingSceneLayer", "esri.layers.CatalogLayer", "esri.layers.CSVLayer", "esri.layers.FeatureLayer", "esri.layers.GeoJSONLayer", "esri.layers.GeoRSSLayer", "esri.layers.GroupLayer", "esri.layers.HeatmapLayer", "esri.layers.ImageryLayer", "esri.layers.ImageryTileLayer", "esri.layers.MapImageLayer", "esri.layers.OGCFeatureLayer", "esri.layers.OrientedImageryLayer", "esri.layers.ParquetLayer", "esri.layers.PointCloudLayer", "esri.layers.StreamLayer", "esri.layers.SceneLayer", "esri.layers.SubtypeGroupLayer", "esri.layers.TileLayer", "esri.layers.VoxelLayer", "esri.layers.WFSLayer", "esri.layers.WMSLayer", "esri.layers.WMTSLayer", "esri.layers.WCSLayer", "esri.layers.LinkChartLayer", "esri.layers.catalog.CatalogFootprintLayer", "esri.layers.catalog.CatalogDynamicGroupLayer", "esri.layers.knowledgeGraph.KnowledgeGraphSublayer", "esri.layers.KnowledgeGraphLayer"]);
var u9 = "view.basemapView.baseLayerViews";
var f4 = "view.groundView.layerViews";
var v4 = "view.basemapView.referenceLayerViews";
var _ = [u9, f4, "view.layerViews", v4];
var w3 = class extends b {
  constructor(e10) {
    super(e10), this._layerViewByLayerId = {}, this._layerInfosByLayerViewId = {}, this._activeLayerInfosByLayerViewId = {}, this._activeLayerInfosWithNoParent = new V(), this.activeLayerInfos = new L4(), this.basemapLegendVisible = false, this.groundLegendVisible = false, this.hideLayersNotInCurrentView = false, this.keepCacheOnDestroy = false, this.respectLayerDefinitionExpression = false, this.respectLayerVisibility = true, this.layerInfos = [], this.view = null;
  }
  initialize() {
    this.addHandles(l(() => this.view, () => this._viewHandles(), h), c5.view), this.addHandles(d(() => this._refresh()));
  }
  destroy() {
    this._destroyViewActiveLayerInfos(), this.view = null;
  }
  get state() {
    return this.view?.ready ? "ready" : "disabled";
  }
  _viewHandles() {
    this.removeHandles(c5.state), this.view && this.addHandles(l(() => this.state, () => this._stateHandles(), h), c5.state);
  }
  _stateHandles() {
    this._resetAll(), "ready" === this.state && this._watchPropertiesAndAllLayerViews();
  }
  _resetAll() {
    this.removeHandles([c5.allLayerViews, c5.legendProperties]), this._destroyViewActiveLayerInfos(), this.activeLayerInfos.removeAll();
  }
  _destroyViewActiveLayerInfos() {
    Object.keys(this._activeLayerInfosByLayerViewId).forEach(this._destroyViewActiveLayerInfo, this);
  }
  _destroyViewActiveLayerInfo(e10) {
    this.removeHandles(e10);
    const i7 = this._activeLayerInfosByLayerViewId[e10];
    delete this._activeLayerInfosByLayerViewId[e10], i7?.parent && i7.parent.children.remove(i7);
  }
  _watchPropertiesAndAllLayerViews() {
    const { view: e10 } = this;
    if (!e10) return;
    const { allLayerViews: i7 } = e10;
    i7.length && this._refresh(), this.addHandles(i7.on("change", (e11) => this._allLayerViewsChangeHandle(e11)), c5.allLayerViews), this.addHandles(l(() => [this.layerInfos, this.basemapLegendVisible, this.groundLegendVisible], () => this._propertiesChangeHandle()), c5.legendProperties);
  }
  _allLayerViewsChangeHandle(e10) {
    e10.moved.length ? this._propertiesChangeHandle() : (e10.removed.forEach((e11) => this._destroyViewActiveLayerInfo(e11.uid)), this._refresh());
  }
  _propertiesChangeHandle() {
    this._destroyViewActiveLayerInfos(), this._refresh();
  }
  _refresh() {
    this._layerInfosByLayerViewId = {}, this.activeLayerInfos.removeAll(), this._generateLayerViews().filter(this._filterLayerViewsByLayerInfos, this).filter(this._isLayerViewSupported, this).forEach(this._generateActiveLayerInfo, this), this._sortActiveLayerInfos(this.activeLayerInfos);
  }
  _sortActiveLayerInfos(e10) {
    const i7 = this.view;
    if (e10.length < 2 || !i7) return;
    const r8 = [];
    e10.forEach((i8) => {
      if (!i8.parent) {
        const t6 = i8.layer.parent, s8 = t6 && "uid" in t6 && this._layerViewByLayerId[t6.uid], a11 = s8 && this._activeLayerInfosByLayerViewId[s8.uid];
        a11 && e10.includes(a11) && (r8.push(i8), i8.parent = a11, a11.children.add(i8), this._sortActiveLayerInfos(a11.children));
      }
    }), e10.removeMany(r8);
    const t5 = {};
    i7.allLayerViews.forEach((e11, i8) => t5[e11.layer.uid] = i8), e10.sort((e11, i8) => {
      const r9 = t5[e11.layer.uid] || 0;
      return (t5[i8.layer.uid] || 0) - r9;
    });
  }
  _generateLayerViews() {
    const e10 = [];
    return _.filter(this._filterLayerViews, this).map((e11) => o(this, e11)).filter((e11) => null != e11).forEach(this._collectLayerViews("layerViews", e10)), e10;
  }
  _filterLayerViews(e10) {
    const i7 = !this.basemapLegendVisible && (e10 === u9 || e10 === v4), r8 = !this.groundLegendVisible && e10 === f4;
    return !i7 && !r8;
  }
  _collectLayerViews(e10, i7) {
    const r8 = (t5) => (t5 && t5.forEach((t6) => {
      i7.push(t6), r8(t6[e10]);
    }), i7);
    return r8;
  }
  _filterLayerViewsByLayerInfos(e10) {
    const i7 = this.layerInfos;
    return !i7 || !i7.length || i7.some((i8) => this._hasLayerInfo(i8, e10));
  }
  _hasLayerInfo(e10, i7) {
    const r8 = this._isLayerUIDMatching(e10.layer, i7.layer.uid);
    return r8 && (this._layerInfosByLayerViewId[i7.uid] = e10), r8;
  }
  _isLayerUIDMatching(e10, i7) {
    return e10 && (e10.uid === i7 || this._hasLayerUID(e10.layers, i7));
  }
  _hasLayerUID(e10, i7) {
    return e10 && e10.some((e11) => this._isLayerUIDMatching(e11, i7));
  }
  _isLayerViewSupported(e10) {
    return !!p3.has(e10.layer.declaredClass) && (this._layerViewByLayerId[e10.layer.uid] = e10, true);
  }
  _generateActiveLayerInfo(e10) {
    this._isLayerActive(e10) ? this._buildActiveLayerInfo(e10) : (this.removeHandles(e10.uid), this.addHandles(l(() => [e10.legendEnabled, e10.layer?.legendEnabled], () => this._layerActiveHandle(e10)), e10.uid));
  }
  _layerActiveHandle(e10) {
    this._isLayerActive(e10) && (this.removeHandles(e10.uid), this._buildActiveLayerInfo(e10));
  }
  _isLayerActive(e10) {
    return !this.respectLayerVisibility || e10.legendEnabled && e10.layer?.legendEnabled;
  }
  _buildActiveLayerInfo(e10) {
    const i7 = e10.layer, r8 = e10.uid, n9 = this._layerInfosByLayerViewId[r8];
    let o7 = this._activeLayerInfosByLayerViewId[r8];
    if (!o7) {
      const t5 = void 0 !== n9?.title && n9.layer.uid === i7.uid;
      o7 = new st({ layer: i7, layerView: e10, title: t5 ? n9.title : i7.title, view: this.view ?? void 0, respectLayerDefinitionExpression: this.respectLayerDefinitionExpression, respectLayerVisibility: this.respectLayerVisibility, hideLayersNotInCurrentView: this.hideLayersNotInCurrentView, keepCacheOnDestroy: this.keepCacheOnDestroy, sublayerIds: n9?.sublayerIds || [] }), this._activeLayerInfosByLayerViewId[r8] = o7;
    }
    const l9 = i7.parent && "uid" in i7.parent ? this._layerViewByLayerId[i7.parent?.uid] : null;
    if (o7.parent = this._activeLayerInfosByLayerViewId[l9?.uid], !this.hasHandles(r8)) {
      const n10 = [l(() => i7.title, (e11) => this._titleHandle(e11, o7)), l(() => [i7.opacity, "renderer" in i7 && i7.renderer, "pointSymbol" in i7 && i7.pointSymbol, "lineSymbol" in i7 && i7.lineSymbol, "polygonSymbol" in i7 && i7.polygonSymbol], () => this._constructLegendElements(o7)), f2(() => true === this.view?.stationary, () => this._scaleHandle(o7), h), l(() => e10.layer ? e7(e10.layer, e10.view) : null, () => this._constructLegendElements(o7)), l(() => e10.updating, () => {
        if (null == e10.layer) return;
        null != e7(e10.layer, e10.view) && this._constructLegendElements(o7);
      }), l(() => "effect" in i7 && i7.effect, () => this._constructLegendElements(o7)), f2(() => this.view?.timeZone, () => this._constructLegendElements(o7), h)];
      if (this.respectLayerVisibility) {
        const r9 = l(() => e10.legendEnabled, (e11) => this._legendEnabledHandle(e11, o7)), s8 = l(() => i7.legendEnabled, (e11) => this._legendEnabledHandle(e11, o7));
        n10.push(r9, s8);
      }
      if (this.respectLayerDefinitionExpression && "definitionExpression" in i7) {
        const e11 = l(() => [i7.definitionExpression, this.respectLayerDefinitionExpression], () => {
          o7.respectLayerDefinitionExpression = this.respectLayerDefinitionExpression, this._constructLegendElements(o7);
        });
        n10.push(e11);
      }
      this.addHandles(n10, r8);
    }
    o7.isScaleDriven || this._constructLegendElements(o7), this._addActiveLayerInfo(o7);
  }
  _titleHandle(e10, i7) {
    i7.title = e10, this._constructLegendElements(i7);
  }
  _legendEnabledHandle(e10, i7) {
    e10 ? this._addActiveLayerInfo(i7) : this._removeActiveLayerInfo(i7);
  }
  _scaleHandle(e10) {
    (e10.isScaleDriven || e10.hideLayersNotInCurrentView) && this._constructLegendElements(e10);
  }
  _addActiveLayerInfo(e10) {
    const { layerView: i7, layer: r8 } = e10;
    if (this._isLayerActive(i7) && !this.activeLayerInfos.includes(e10)) {
      const i8 = e10.parent;
      if (i8) i8.children.includes(e10) || i8.children.push(e10), this._sortActiveLayerInfos(i8.children);
      else {
        const i9 = this.layerInfos?.some((e11) => e11.layer.uid === r8.uid), t5 = r8.parent;
        (t5 && "uid" in t5 ? this._layerViewByLayerId[t5.uid] : null) && !i9 ? this._activeLayerInfosWithNoParent.add(e10) : (this.activeLayerInfos.add(e10), this._sortActiveLayerInfos(this.activeLayerInfos));
      }
      if (this._activeLayerInfosWithNoParent.length) {
        const e11 = [];
        this._activeLayerInfosWithNoParent.forEach((i9) => {
          const r9 = i9.layer.parent, t5 = r9 && "uid" in r9 ? this._layerViewByLayerId[r9?.uid] : null, s8 = this._activeLayerInfosByLayerViewId[t5?.uid];
          s8 && (e11.push(i9), i9.parent = s8);
        }), e11.length && (this._activeLayerInfosWithNoParent.removeMany(e11), e11.forEach((e12) => this._addActiveLayerInfo(e12)));
      }
    }
  }
  _removeActiveLayerInfo(e10) {
    const i7 = e10.parent;
    i7 ? i7.children.remove(e10) : this.activeLayerInfos.remove(e10);
  }
  _constructLegendElements(e10) {
    const i7 = e10.layer;
    "featureCollections" in i7 && i7.featureCollections ? e10.buildLegendElementsForFeatureCollections(i7.featureCollections) : "featureReduction" in i7 && i7.featureReduction && "renderer" in i7.featureReduction && ("binning" === i7.featureReduction.type || "cluster" === i7.featureReduction.type) && (!this.view || i7.featureReduction.maxScale <= this.view.scale) ? e10.buildLegendElementsForFeatureReduction(i7.featureReduction) : "renderer" in i7 && i7.renderer && !("sublayers" in i7) ? e10.buildLegendElementsForRenderer(i7.renderer) : "url" in i7 && i7.url && "catalog" !== i7.type && "knowledge-graph" !== i7.type ? e10.buildLegendElementsForTools() : e10.children.forEach((e11) => this._constructLegendElements(e11));
  }
};
r([m({ type: L4 })], w3.prototype, "activeLayerInfos", void 0), r([m()], w3.prototype, "basemapLegendVisible", void 0), r([m()], w3.prototype, "groundLegendVisible", void 0), r([m()], w3.prototype, "hideLayersNotInCurrentView", void 0), r([m()], w3.prototype, "keepCacheOnDestroy", void 0), r([m()], w3.prototype, "respectLayerDefinitionExpression", void 0), r([m()], w3.prototype, "respectLayerVisibility", void 0), r([m()], w3.prototype, "layerInfos", void 0), r([m({ readOnly: true })], w3.prototype, "state", null), r([m()], w3.prototype, "view", void 0), w3 = r([a("esri.widgets.Legend.LegendViewModel")], w3);

// node_modules/@arcgis/core/widgets/Legend/styles/card/css.js
var e8 = "esri-legend--card";
var a4 = "esri-legend";
var r4 = { activated: `${e8}__carousel-indicator--activated`, base: e8, stacked: `${a4}--stacked`, carouselTitle: `${e8}__carousel-title`, indicator: `${e8}__carousel-indicator`, intervalSeparator: `${e8}__interval-separator`, imageryLayerStretchedImage: `${e8}__imagery-layer-image--stretched`, imageLabel: `${e8}__image-label`, layerCaption: `${e8}__layer-caption`, labelElement: `${e8}__label-element`, layerRow: `${e8}__layer-row`, labelCell: `${e8}__label-cell`, message: `${e8}__message`, rampLabel: `${e8}__ramp-label`, section: `${e8}__section`, relationshipSection: `${e8}__relationship-section`, serviceCaptionText: `${e8}__service-caption-text`, serviceContent: `${e8}__service-content`, service: `${e8}__service`, groupLayer: `${e8}__group-layer`, groupLayerChild: `${e8}__group-layer-child`, symbol: `${e8}__symbol`, sizeRampRow: `${e8}__size-ramp-row`, symbolRow: `${e8}__symbol-row`, symbolCell: `${e8}__symbol-cell`, carousel: `${e8}__carousel`, carouselItem: `${e8}__carousel-item`, indicatorContainer: `${e8}__carousel-indicator-container`, intervalSeparatorsContainer: `${e8}__interval-separators-container`, relationshipLabelContainer: `${e8}__relationship-label-container`, labelContainer: `${e8}__label-container`, serviceCaptionContainer: `${e8}__service-caption-container`, symbolContainer: `${e8}__symbol-container`, colorRampContainer: `${e8}__color-ramp-container`, sizeRampContainer: `${e8}__size-ramp-container`, sizeRampPreview: `${e8}__size-ramp-preview`, pieChartRampPreview: `${e8}__pie-chart-ramp-preview`, rampContainer: `${a4}__ramps`, sizeRampHorizontal: `${a4}__size-ramp--horizontal`, rampLabelsContainer: `${a4}__ramp-labels`, layerInfo: `${a4}__layer-cell ${a4}__layer-cell--info`, univariateAboveAndBelowColorRamp: "esri-univariate-above-and-below-ramp__color--card" };

// node_modules/@arcgis/core/widgets/Legend/support/styleUtils.js
function r5(e10, t5) {
  return t5;
}
function i5(e10) {
  const t5 = this;
  e10.appendChild(t5);
}
function o5(n9, i7, o7) {
  if (!i7) return;
  if ("number" == typeof i7) return i7;
  if ("string" == typeof i7) return c(i7);
  if ("value" in i7 || "unit" in i7) return s2(n9.dotValue, i7);
  if ("colorName" in i7 && "bandName" in i7) return n9[i7.colorName] + ": " + (n9[i7.bandName] || i7.bandName);
  if ("showCount" in i7) return i7.showCount ? n9.clusterCountTitle : void 0;
  let u13 = null;
  return r5(i7, o7) ? u13 = i7.ratioPercentTotal ? "showRatioPercentTotal" : i7.ratioPercent ? "showRatioPercent" : i7.ratio ? "showRatio" : i7.normField ? "showNormField" : i7.field ? "showField" : null : l6(i7, o7) && (u13 = i7.normField ? "showNormField" : i7.normByPct ? "showNormPct" : i7.field ? "showField" : null), u13 ? s2("showField" === u13 ? "{field}" : n9[u13], { field: i7.field, normField: i7.normField }) : void 0;
}
function l6(e10, t5) {
  return !t5;
}
function u10(e10, t5) {
  return !!(t5 && "Stretched" === t5 && "version" in e10 && "number" == typeof e10.version && e10.version >= 10.3 && "esri.layers.ImageryLayer" === e10.declaredClass);
}
function a5(e10, t5) {
  return e10.label ? t5[e10.label] + ": " + ("string" == typeof e10.value ? e10.value : o3(e10.value ?? 0, { style: "decimal", notation: e10.value?.toString().toLowerCase().includes("e") ? "scientific" : "standard" })) : "";
}

// node_modules/@arcgis/core/widgets/Legend/styles/support/utils.js
function l7(t5, e10, l9) {
  switch (e10) {
    case "heatmap-ramp":
      return l9[t5.label] || t5.label;
    case "stretch-ramp":
      return a5(t5, l9);
    default:
      return t5.label;
  }
}
function i6(r8, l9) {
  if (!r8.title || "string" == typeof r8.title) return r8.title;
  const i7 = "color-ramp" === r8.type || "opacity-ramp" === r8.type, n9 = r8.title, o7 = o5(l9, n9, i7);
  return l6(n9, i7) && n9.title ? `${n9.title} (${o7})` : o7;
}
function n4(t5) {
  return !(!t5 || "object" != typeof t5);
}

// node_modules/@arcgis/core/widgets/Legend/styles/card/ColorRamp.js
var n5 = 25;
var m3 = 25;
var c6 = 100;
var d3 = class extends O {
  constructor(e10, t5) {
    super(e10, t5), this.effectList = null, this.legendElement = null, this.opacity = 1;
  }
  render() {
    const e10 = this.legendElement.infos.slice().reverse();
    return n("div", { class: this.classes(r4.layerRow, r4.colorRampContainer) }, this._renderRampLabel(e10[0]), n("div", { class: r4.symbolContainer }, this._renderPreview(e10), this._renderMiddleStopRampLabel(e10)), this._renderRampLabel(e10.at(-1)));
  }
  _renderPreview(e10) {
    const { opacity: t5 } = this, r8 = "heatmap-ramp" === this.legendElement.type, i7 = e10.length - 1, l9 = m3, p8 = i7 > 2 && !r8 ? n5 * i7 : c6, d10 = p8 + 20, h5 = 10, y5 = [[{ shape: { type: "path", path: `M0 ${l9 / 2} L${h5} 0 L${h5} ${l9} Z` }, fill: e10[0].color, stroke: { width: 0 } }, { shape: { type: "rect", x: h5, y: 0, width: p8, height: l9 }, fill: { type: "linear", x1: h5, y1: 0, x2: p8 + h5, y2: 0, colors: e10.map((e11, t6) => ({ color: e11.color, offset: r8 && "ratio" in e11 ? e11.ratio : t6 / i7 })) }, stroke: { width: 0 } }, { shape: { type: "path", path: `M${p8 + h5} 0 L${d10} ${l9 / 2} L${p8 + h5} ${l9} Z` }, fill: e10[e10.length - 1].color, stroke: { width: 0 } }]], f9 = V2(y5, d10, l9), u13 = { filter: q(this.effectList) ?? void 0, opacity: null == t5 ? void 0 : `${t5}` };
    return n("div", { styles: u13 }, f9);
  }
  _renderMiddleStopRampLabel(e10) {
    const t5 = e10.length % 2 != 0 ? e10[e10.length / 2 | 0] : null;
    return t5 ? n("div", { class: r4.intervalSeparatorsContainer }, n("div", { class: r4.intervalSeparator }, "|"), this._renderRampLabel(t5)) : null;
  }
  _renderRampLabel(e10) {
    return n("div", { class: r4.rampLabel }, l7(e10, this.legendElement.type, this.messages));
  }
};
r([m()], d3.prototype, "effectList", void 0), r([m()], d3.prototype, "legendElement", void 0), r([m()], d3.prototype, "messages", void 0), r([m()], d3.prototype, "opacity", void 0), d3 = r([a("esri.widgets.Legend.styles.card.ColorRamp")], d3);

// node_modules/@arcgis/core/widgets/Legend/styles/support/sizeRampUtils.js
var n6 = "#ddd";
var o6 = window.devicePixelRatio;
var a6 = "esri-spike-ramp";
var p4 = { spikeRampContainer: `${a6}__container`, spikeRampPreviewContainer: `${a6}__preview-container`, spikeRampPreview: `${a6}__preview`, spikeRampSymbolPreview: `${a6}__symbol-preview`, spikeRampLines: `${a6}__lines`, spikeRampLabelsContainer: `${a6}__labels-container`, spikeRampLabel: `${a6}__label` };
function r6(e10) {
  return 5 !== e10.infos.length ? null : n("div", { class: p4.spikeRampContainer }, n("div", { class: p4.spikeRampPreviewContainer }, l8(e10), m4(e10)), d4(e10));
}
function l8(e10) {
  const [i7, n9, o7] = h3(e10).map(({ preview: e11 }) => {
    if (!e11) return null;
    const i8 = e11.cloneNode(true);
    return i8.classList.add(p4.spikeRampSymbolPreview), i8;
  });
  return i7 && n9 && o7 ? n("div", { class: p4.spikeRampPreview }, n("div", { afterCreate: i5, bind: o7 }), n("div", { afterCreate: i5, bind: n9 }), n("div", { afterCreate: i5, bind: i7 })) : null;
}
function m4(a11) {
  const [{ width: r8, height: l9 }, { width: m8 }, { width: d10, height: c9 }] = h3(a11).map(({ size: t5 }) => n4(t5) ? { width: u(t5.width), height: u(t5.height) } : { width: 0, height: 0 }), v7 = 10, b4 = 8, u13 = r8 + m8 + d10 + 3 * v7, w5 = l9, k5 = document.createElement("canvas");
  k5.width = (u13 + v7) * o6, k5.height = w5 * o6, k5.style.width = k5.width / o6 + "px", k5.style.height = k5.height / o6 + "px";
  const f9 = k5.getContext("2d");
  f9.beginPath();
  const R = u13 - (r8 / 2 + v7), g5 = 0, _2 = u13 + b4, y5 = 0;
  f9.moveTo(R * o6, g5 * o6), f9.lineTo(_2 * o6, y5 * o6);
  const C2 = (u13 - b4) / 2, L6 = (l9 - c9) / 2, x2 = u13 + b4, P = (l9 - c9) / 2;
  f9.moveTo(C2 * o6, L6 * o6), f9.lineTo(x2 * o6, P * o6);
  const $ = d10 / 2, j2 = w5 - c9, T2 = u13 + b4, S2 = w5 - c9;
  return f9.moveTo($ * o6, j2 * o6), f9.lineTo(T2 * o6, S2 * o6), f9.strokeStyle = n6, f9.lineWidth = 0.5 * o6, f9.stroke(), n("div", { afterCreate: i5, bind: k5, class: p4.spikeRampLines });
}
function d4(t5) {
  const [{ label: n9, height: o7 }, { label: a11 }, { label: r8, height: l9 }] = h3(t5).map(({ label: t6, size: s8 }) => ({ label: t6, height: n4(s8) ? u(s8.height) : 0 })), m8 = o7 - l9, d10 = { position: "absolute", top: "0" }, c9 = { position: "absolute", top: m8 / 2 + "px" }, v7 = { position: "absolute", top: `${m8}px` };
  return n("div", { class: p4.spikeRampLabelsContainer }, n("div", { class: p4.spikeRampLabel, styles: d10 }, n9), n("div", { class: p4.spikeRampLabel, styles: c9 }, a11), n("div", { class: p4.spikeRampLabel, styles: v7 }, r8));
}
function h3(e10) {
  return e10.infos.filter((e11, i7) => i7 % 2 == 0);
}

// node_modules/@arcgis/core/widgets/Legend/styles/card/SizeRamp.js
var c7 = "#ddd";
var p5 = window.devicePixelRatio;
function d5(e10) {
  if (!e10) return;
  if (e10.type.includes("3d")) {
    if (!e10.symbolLayers?.length) return;
    const t6 = e10.symbolLayers.at(-1), s8 = t6.resource?.primitive;
    return "circle" === s8 || "cross" === s8 || "kite" === s8 || "sphere" === s8 || "cube" === s8 || "diamond" === s8;
  }
  const t5 = e10.style;
  return "circle" === t5 || "diamond" === t5 || "cross" === t5;
}
function m5(e10) {
  if (e10) {
    if (e10.type.includes("3d")) {
      if (!e10.symbolLayers?.length) return;
      const t5 = e10.symbolLayers.at(-1), s8 = t5?.resource?.primitive;
      return "triangle" === s8 || "cone" === s8 || "tetrahedron" === s8;
    }
    return "triangle" === e10.style;
  }
}
var y2 = class extends O {
  constructor(e10, t5) {
    super(e10, t5), this.hasIndicators = false, this.legendElement = null, this.opacity = 1;
  }
  render() {
    if ("spike" === this.legendElement.theme) return n("div", { styles: { display: "flex", flex: "1", justifyContent: "center" } }, r6(this.legendElement));
    const { legendElement: e10, hasIndicators: t5, opacity: s8 } = this, i7 = e10.infos, r8 = i7.at(0), c9 = i7.at(-1);
    if (!r8 || !c9) return null;
    const { label: p8, ...d10 } = r8, { label: m8, ...y5 } = c9;
    let u13 = d10.preview, f9 = y5.preview;
    const h5 = { "flex-direction": t5 ? "column" : "row-reverse" };
    if (!u13 || !f9) return null;
    u13 = u13.cloneNode(true), u13.style.display = "flex", f9 = f9.cloneNode(true), f9.style.display = "flex";
    const g5 = { opacity: `${s8 ?? ""}` };
    return n("div", { class: this.classes(r4.layerRow, { [r4.sizeRampRow]: t5 }) }, n("div", { class: r4.rampLabel }, t5 ? p8 : m8), n("div", { class: r4.sizeRampContainer, styles: h5 }, n("div", { afterCreate: i5, bind: u13, class: r4.sizeRampPreview, styles: g5 }), this._renderSizeRampLines(e10), n("div", { afterCreate: i5, bind: f9, class: r4.sizeRampPreview, styles: g5 })), n("div", { class: r4.rampLabel }, t5 ? m8 : p8));
  }
  _renderSizeRampLines(e10) {
    const s8 = e10.infos, i7 = s8.at(0), r8 = s8.at(-1);
    if (!i7 || !r8) return null;
    const o7 = i7.symbol, n9 = this.hasIndicators, y5 = i7.size && "number" == typeof i7.size ? i7.size : 0, u13 = r8.size && "number" == typeof r8.size ? r8.size : 0, f9 = i7.outlineSize || 0, h5 = r8.outlineSize || 0, g5 = u(y5 + f9) * p5, v7 = u(u13 + h5) * p5, b4 = n9 ? g5 : g5 + 50 * p5, x2 = n9 ? g5 / 2 + 50 * p5 : g5, z2 = m5(o7), j2 = d5(o7), w5 = document.createElement("canvas");
    w5.width = b4, w5.height = x2, w5.style.width = w5.width / p5 + "px", w5.style.height = w5.height / p5 + "px";
    const R = w5.getContext("2d");
    if (n9) {
      R.beginPath();
      const e11 = 0, t5 = 0, s9 = b4 / 2 - v7 / 2, i8 = x2;
      R.moveTo(e11, t5), R.lineTo(s9, i8);
      const r9 = b4, o8 = 0, n10 = b4 / 2 + v7 / 2, l9 = x2;
      R.moveTo(r9, o8), R.lineTo(n10, l9);
    } else {
      R.beginPath();
      const e11 = 0, t5 = x2 / 2 - v7 / 2, s9 = b4, i8 = 0;
      R.moveTo(e11, t5), R.lineTo(s9, i8);
      const r9 = 0, o8 = x2 / 2 + v7 / 2, n10 = b4, l9 = x2;
      R.moveTo(r9, o8), R.lineTo(n10, l9);
    }
    return R.strokeStyle = c7, R.stroke(), n("div", { afterCreate: i5, bind: w5, styles: n9 ? { display: "flex", marginTop: `-${z2 ? 0 : j2 ? g5 / 2 : 0}px`, marginBottom: `-${z2 ? v7 : j2 ? v7 / 2 : 0}px` } : { display: "flex", marginRight: `-${z2 ? 0 : j2 ? g5 / 2 : 0}px`, marginLeft: `-${z2 ? 0 : j2 ? v7 / 2 : 0}px` } });
  }
};
r([m()], y2.prototype, "hasIndicators", void 0), r([m()], y2.prototype, "legendElement", void 0), r([m()], y2.prototype, "messages", void 0), r([m()], y2.prototype, "opacity", void 0), y2 = r([a("esri.widgets.Legend.styles.card.SizeRamp")], y2);

// node_modules/@arcgis/core/widgets/Legend/styles/support/univariateUtils.js
var n7 = i2();
var r7 = 10;
var s7 = 20;
var a7 = 10;
var c8 = 20;
var f5 = { univariateAboveAndBelowSymbol: "esri-univariate-above-and-below-ramp__symbol", colorRamp: "esri-legend__color-ramp" };
function p6(e10 = "vertical") {
  const t5 = "stroke:rgb(200, 200, 200);stroke-width:1";
  return "vertical" === e10 ? n("svg", { height: "4", width: "10" }, n("line", { style: t5, x1: "0", x2: "10", y1: "2", y2: "2" })) : n("svg", { height: "10", width: "10" }, n("line", { style: t5, x1: "5", x2: "5", y1: "0", y2: "10" }));
}
function m6(e10, t5 = "vertical") {
  const i7 = document.createElement("div");
  return i7.style.height = `${s7}px`, i7.className = f5.univariateAboveAndBelowSymbol, null != e10 && (i7.style.opacity = e10.toString()), n7.append(i7, p6.bind(null, t5)), i7;
}
function u11(t5, o7, l9 = "vertical", n9) {
  t5.infos.forEach((t6, r8) => {
    if (n9 && 2 === r8) t6.preview = m6(o7, l9);
    else {
      const o8 = (n2(t6.size) ? u(t6.size) : 0) + ("horizontal" === l9 ? c8 : a7), n10 = t6.preview, r9 = "div" === n10?.tagName.toLowerCase(), s8 = r9 ? n10 : document.createElement("div");
      s8.className = f5.univariateAboveAndBelowSymbol, "horizontal" === l9 ? s8.style.width = `${o8}px` : s8.style.height = `${o8}px`, !r9 && n10 && s8.appendChild(n10), t6.preview = s8;
    }
  });
}
function v5(t5, o7 = "classic") {
  const l9 = t5.infos, n9 = l9.at(0), r8 = l9.at(-1), s8 = n2(n9.size) ? u(n9.size) : 0, c9 = n2(r8.size) ? u(r8.size) : 0;
  return "classic" === o7 ? (s8 + a7) / 2 : (s8 - c9) / 2;
}
function h4(e10, t5) {
  if (!e10) return null;
  const i7 = e10.infos.map((e11) => e11.color), l9 = v2("full" === t5.type ? i7 : "above" === t5.type ? i7.slice(0, 3) : i7.slice(2, 5), { width: t5.width, height: t5.height, align: t5.rampAlignment, effectList: t5.effectList, ariaLabel: t5.ariaLabel });
  return l9.className = f5.colorRamp, null != t5.opacity && (l9.style.opacity = t5.opacity.toString()), l9;
}
function d6(t5, o7, l9, n9 = "vertical") {
  let f9 = 0;
  const p8 = t5.infos, m8 = Math.floor(p8.length / 2), u13 = "full" === o7 || "above" === o7 ? 0 : m8, v7 = "full" === o7 || "below" === o7 ? p8.length - 1 : m8;
  for (let h5 = u13; h5 <= v7; h5++) if (l9 && h5 === m8) f9 += "horizontal" === n9 ? r7 : s7;
  else {
    const t6 = p8[h5].size;
    f9 += (n2(t6) ? u(t6) : 0) + ("horizontal" === n9 ? c8 : a7);
  }
  return Math.round(f9);
}
function y3(t5, o7, l9, n9 = "vertical") {
  const f9 = d6(t5, o7, l9, n9), p8 = t5.infos, m8 = Math.floor(p8.length / 2), u13 = "full" === o7 || "above" === o7 ? 0 : m8, v7 = "full" === o7 || "below" === o7 ? p8.length - 1 : m8, h5 = n2(p8[u13].size) ? p8[u13].size : 0, y5 = n2(p8[v7].size) ? p8[v7].size : 0, b4 = "full" === o7 ? h5 + y5 : "above" === o7 ? h5 : y5, g5 = l9 ? "vertical" === n9 ? s7 : r7 : 0, z2 = "vertical" === n9 ? a7 * ("full" === o7 ? 2 : 1) : c8 * ("full" === o7 ? 2 : 1);
  return Math.round(f9 - (u(b4) / 2 + g5 / 2 + z2 / 2));
}
function b2(e10, t5, i7 = "vertical") {
  const o7 = e10.infos;
  let l9 = o7.find(({ type: e11 }) => "size-ramp" === e11), n9 = o7.find(({ type: e11 }) => "color-ramp" === e11);
  return l9 && (l9 = { ...l9 }, l9.infos = [...l9.infos], u11(l9, t5, i7, true)), n9 && (n9 = { ...n9 }, n9.infos = [...n9.infos]), "horizontal" === i7 && (l9?.infos.reverse(), n9?.infos.reverse()), { sizeRampElement: l9, colorRampElement: n9 };
}
function g2(e10, t5 = "vertical") {
  const i7 = e10.infos;
  let o7 = i7.find(({ type: e11 }) => "size-ramp" === e11), l9 = i7.find(({ type: e11 }) => "color-ramp" === e11);
  return o7 && (o7 = { ...o7 }, o7.infos = [...o7.infos], u11(o7, null, t5, false)), l9 && (l9 = { ...l9 }, l9.infos = [...l9.infos]), "horizontal" === t5 && (o7?.infos.reverse(), l9?.infos.reverse()), { sizeRampElement: o7, colorRampElement: l9 };
}
var z = { marginLeft: "3px" };
var w4 = { display: "table-cell", verticalAlign: "middle" };
var x = { display: "flex", alignItems: "flex-start" };

// node_modules/@arcgis/core/widgets/Legend/styles/card/UnivariateAboveAndBelowRamp.js
var f6 = class extends O {
  constructor(e10, t5) {
    super(e10, t5), this.effectList = null, this.legendElement = null, this.opacity = 1;
  }
  render() {
    const { legendElement: e10, opacity: t5, effectList: o7, key: s8 } = this, { sizeRampElement: f9, colorRampElement: y5 } = b2(e10, t5, "horizontal");
    if (!f9) return null;
    const h5 = d6(f9, "full", true, "horizontal"), u13 = y3(f9, "above", true, "horizontal"), v7 = y3(f9, "below", true, "horizontal"), g5 = 12, b4 = this.messages?.previewColorRampAriaLabel, w5 = h4(y5, { width: u13, height: g5, rampAlignment: "horizontal", opacity: t5, type: "above", effectList: o7, ariaLabel: b4 }), j2 = h4(y5, { width: v7, height: g5, rampAlignment: "horizontal", opacity: t5, type: "below", effectList: o7, ariaLabel: b4 }), x2 = v5(f9, "card"), L6 = f9.infos.map((e11) => e11.label), z2 = L6.length - 1, C2 = L6.map((e11, t6) => 0 === t6 || t6 === z2 ? n("div", { key: t6 }, e11) : null), R = { display: "flex", flexDirection: "column" }, A = { display: "flex", flexDirection: "row" }, k5 = { marginTop: "3px", display: "flex" };
    L2(this.container) ? k5.marginRight = `${x2}px` : k5.marginLeft = `${x2}px`;
    const E2 = { width: `${h5}px`, display: "flex", flexDirection: "row", justifyContent: "space-between" };
    return n("div", { class: r4.layerRow, key: `${s8}-container`, styles: R }, n("div", { class: this.classes(r4.symbolContainer, r4.sizeRampHorizontal), styles: A }, f9.infos.map((e11, t6) => n("div", { afterCreate: i5, bind: e11.preview, class: r4.symbol, key: t6 }))), w5 ? n("div", { class: r4.univariateAboveAndBelowColorRamp, key: "color-ramp-preview", styles: k5 }, n("div", { afterCreate: i5, bind: w5 }), n("div", { afterCreate: i5, bind: j2 })) : null, n("div", { class: r4.layerInfo }, n("div", { class: r4.rampLabelsContainer, styles: E2 }, C2)));
  }
};
r([m()], f6.prototype, "effectList", void 0), r([m()], f6.prototype, "legendElement", void 0), r([m()], f6.prototype, "messages", void 0), r([m()], f6.prototype, "opacity", void 0), f6 = r([a("esri.widgets.Legend.styles.card.UnivariateAboveAndBelowRamp")], f6);

// node_modules/@arcgis/core/widgets/Legend/styles/card/UnivariateColorSizeRamp.js
var d7 = class extends O {
  constructor(e10, t5) {
    super(e10, t5), this.effectList = null, this.legendElement = null, this.opacity = 1;
  }
  render() {
    const { legendElement: e10, opacity: t5, effectList: o7, key: s8 } = this, { sizeRampElement: d10, colorRampElement: y5 } = g2(e10, "horizontal");
    if (!d10) return null;
    const u13 = d6(d10, "full", false, "horizontal"), h5 = y3(d10, "full", false, "horizontal"), v7 = h4(y5, { width: h5, height: 12, rampAlignment: "horizontal", opacity: t5, type: "full", effectList: o7, ariaLabel: this.messages?.previewColorRampAriaLabel }), g5 = v5(d10, "card"), j2 = d10.infos.length - 1, x2 = d10.infos.map((e11, t6) => 0 === t6 || t6 === j2 ? n("div", { key: t6 }, e11.label) : null), b4 = { display: "flex", flexDirection: "column" }, w5 = { display: "flex", flexDirection: "row" }, L6 = { marginTop: "3px", display: "flex" };
    L2(this.container) ? L6.marginRight = `${g5}px` : L6.marginLeft = `${g5}px`;
    const C2 = { width: `${u13}px`, display: "flex", flexDirection: "row", justifyContent: "space-between" };
    return n("div", { class: r4.layerRow, key: `${s8}-container`, styles: b4 }, n("div", { class: this.classes(r4.symbolContainer, r4.sizeRampHorizontal), styles: w5 }, d10.infos.map((e11, t6) => n("div", { afterCreate: i5, bind: e11.preview, class: r4.symbol, key: t6 }))), n("div", { class: r4.univariateAboveAndBelowColorRamp, key: "color-ramp-preview", styles: L6 }, n("div", { afterCreate: i5, bind: v7 })), n("div", { class: r4.layerInfo }, n("div", { class: r4.rampLabelsContainer, styles: C2 }, x2)));
  }
};
r([m()], d7.prototype, "effectList", void 0), r([m()], d7.prototype, "legendElement", void 0), r([m()], d7.prototype, "messages", void 0), r([m()], d7.prototype, "opacity", void 0), d7 = r([a("esri.widgets.Legend.styles.card.UnivariateColorSizeRamp")], d7);

// node_modules/@arcgis/core/widgets/Legend/styles/card/LegendElement.js
var b3;
var L5 = b3 = class extends O {
  constructor(e10, s8) {
    super(e10, s8), this.effectList = null, this.hasIndicators = false, this.headingLevel = 3, this.isChild = false, this.legendElement = null;
  }
  render() {
    const e10 = this._renderLegendElement(), s8 = i6(this.legendElement, this.messages), t5 = this.hasIndicators && !this.isChild ? n("div", null, n(e6, { class: r4.carouselTitle, level: this.headingLevel }, this.activeLayerInfo.title), n(e6, { class: r4.layerCaption, level: n3(this.headingLevel) }, s8)) : s8 ? n(e6, { class: r4.layerCaption, level: this.headingLevel }, s8) : null;
    return n("section", { "aria-labelledby": this.key, class: r4.section, id: `${this.key}-panel`, key: this.key, role: "tabpanel", tabIndex: 0 }, t5, e10);
  }
  _renderLegendElement() {
    switch (this.legendElement.type) {
      case "symbol-table":
        return this._renderSymbolTable(this.legendElement);
      case "size-ramp":
        return n(y2, { hasIndicators: this.hasIndicators, key: this.key, legendElement: this.legendElement, messages: this.messages, opacity: this.layer.opacity });
      case "color-ramp":
      case "opacity-ramp":
      case "heatmap-ramp":
      case "stretch-ramp":
        return n(d3, { effectList: this.effectList, key: this.key, legendElement: this.legendElement, messages: this.messages, opacity: this.layer.opacity });
      case "relationship-ramp":
        return k3(this.legendElement, this.id, { opacity: this.layer.opacity, effectList: this.effectList, ariaLabel: this.messages.previewRelationshipRampAriaLabel, key: this.key });
      case "pie-chart-ramp":
        return n("div", { afterCreate: i5, bind: this.legendElement.preview, class: r4.pieChartRampPreview, key: `${this.key}-preview` });
      case "univariate-above-and-below-ramp":
        return n(f6, { effectList: this.effectList, key: this.key, legendElement: this.legendElement, messages: this.messages, opacity: this.layer.opacity });
      case "univariate-color-size-ramp":
        return n(d7, { effectList: this.effectList, key: this.key, legendElement: this.legendElement, messages: this.messages, opacity: this.layer.opacity });
      default:
        return null;
    }
  }
  _renderSymbolTable(e10) {
    const s8 = e10.infos.map((s9) => this._renderElementInfo(s9, e10.legendType)).filter(Boolean);
    if (!s8.length) return null;
    const t5 = this.activeLayerInfo.legendElements.some(({ type: e11 }) => "relationship-ramp" === e11), i7 = s8[0]?.properties?.classes?.[r4.symbolRow], r8 = { [r4.labelContainer]: !i7 && !t5, [r4.relationshipLabelContainer]: t5 };
    return n("div", { class: this.classes(r8) }, s8);
  }
  _renderElementInfo(e10, s8) {
    const { layer: t5 } = this, i7 = "label" in e10 ? e10.label : null, r8 = `${this.key}-${i7}`;
    if ("type" in e10 && e10.type) return n(b3, { activeLayerInfo: this.activeLayerInfo, effectList: this.effectList, hasIndicators: this.hasIndicators, headingLevel: this.headingLevel, isChild: true, key: r8, layer: t5, legendElement: e10, messages: this.messages });
    if (!("preview" in e10 && e10.preview || "src" in e10 && e10.src)) return null;
    const a11 = u10(t5, s8), l9 = o5(this.messages, i7, false) || "";
    if ("src" in e10 && e10.src) return n("div", { class: r4.layerRow, key: `${r8}-row` }, this._renderImage(e10, t5, a11), n("div", { class: r4.imageLabel }, l9));
    if ("symbol" in e10 && e10.preview) {
      if (!e10.symbol?.type.includes("simple-fill")) {
        if (!e10.label) return n("div", { afterCreate: i5, bind: e10.preview, key: `${r8}-row` });
        const s9 = { [r4.symbolCell]: this.hasIndicators };
        return n("div", { class: this.classes(r4.layerRow, { [r4.symbolRow]: this.hasIndicators }), key: `${r8}-row` }, n("div", { afterCreate: i5, bind: e10.preview, class: this.classes(s9) }), n("div", { class: this.classes(r4.imageLabel, { [r4.labelCell]: this.hasIndicators }) }, l9));
      }
      return n("div", { class: r4.layerRow, key: `${r8}-row` }, n("div", { class: r4.labelElement, styles: this._getBackgroundStyles(e10) }, l9));
    }
    return null;
  }
  _getBackgroundStyles(e10) {
    const t5 = e10.symbol, i7 = t5.color, a11 = !!i7?.a, l9 = "outline" in t5 ? t5.outline : null, o7 = !!l9?.color?.a, n9 = new l2(a11 && i7 ? [i7.r, i7.g, i7.b, i7.a * this.layer.opacity] : [255, 255, 255, 0]), c9 = o7 && l9.color ? new l2([l9.color.r, l9.color.g, l9.color.b, l9.color.a * this.layer.opacity]) : new l2([255, 255, 255, 0]), p8 = e10.symbol.color?.isBright ?? true, h5 = p8 ? "black" : "white", m8 = p8 ? "rgba(255, 255, 255, .6)" : "rgba(0, 0, 0, .6)";
    return { background: a11 ? n9.toCss(true) : "none", color: h5, textShadow: `-1px -1px 0 ${m8},
                  1px -1px 0 ${m8},
                  -1px 1px 0 ${m8},
                  1px 1px 0 ${m8}`, border: o7 ? `1px solid ${c9.toCss(true)}` : "none", filter: q(this.effectList) ?? void 0 };
  }
  _renderImage(e10, s8, t5) {
    const { label: i7, src: r8, opacity: a11 } = e10, l9 = { [r4.imageryLayerStretchedImage]: t5, [r4.symbol]: !t5 }, n9 = { opacity: `${a11 ?? s8.opacity}` }, c9 = o5(this.messages, i7, false);
    return n("img", { alt: c9, "aria-label": c9, border: 0, class: this.classes(l9), height: e10.height, src: r8, styles: n9, width: e10.width });
  }
};
r([m()], L5.prototype, "activeLayerInfo", void 0), r([m()], L5.prototype, "effectList", void 0), r([m()], L5.prototype, "hasIndicators", void 0), r([m()], L5.prototype, "headingLevel", void 0), r([m()], L5.prototype, "isChild", void 0), r([m()], L5.prototype, "layer", void 0), r([m()], L5.prototype, "legendElement", void 0), r([m()], L5.prototype, "messages", void 0), L5 = b3 = r([a("esri.widgets.Legend.styles.card.LegendElement")], L5);

// node_modules/@arcgis/core/widgets/Legend/styles/card/CardView.js
var d8 = 768;
var p7 = class extends O {
  constructor(e10, s8) {
    super(e10, s8), this._hasIndicators = false, this.activeLayerInfos = null, this.headingLevel = 3, this.layout = "stack", this.messages = null, this.messagesCommon = null, this.type = "card", this.view = null;
  }
  loadDependencies() {
    return c2({ carousel: () => import("./calcite-carousel-B6CPBQZB.js"), "carousel-item": () => import("./calcite-carousel-item-7F44D2KT.js") });
  }
  render() {
    this._hasIndicators = "auto" === this.layout && this.view && this.view.container.clientWidth <= d8 || "stack" === this.layout;
    const e10 = this._hasIndicators ? this._renderCarousel() : this._renderLayers(), s8 = { [r4.stacked]: this._hasIndicators };
    return n("div", { class: this.classes(r4.base, s8) }, e10 || n("div", { class: r4.message }, this.messages.noLegend));
  }
  _renderCarousel() {
    const e10 = [], s8 = this.activeLayerInfos;
    if (s8) for (const t5 of s8) this._renderSections(t5, e10);
    return e10?.length ? n("calcite-carousel", { class: r4.carousel, label: this.messages.carousel }, e10.map((s9, t5) => n("calcite-carousel-item", { class: r4.carouselItem, key: t5, label: s2(this.messagesCommon.pagination.pageText, { index: t5 + 1, total: e10.length }) }, s9))) : null;
  }
  _renderLayers() {
    const e10 = this.activeLayerInfos, s8 = e10?.toArray()?.map((e11) => this._renderLegendForLayer(e11)).filter(Boolean);
    return s8?.length ? s8 : null;
  }
  _renderLegendForLayer(e10) {
    if (!e10.ready) return null;
    if (e10.children.length) {
      const s8 = e10.children.toArray().map(this._renderLegendForLayer, this);
      return n("section", { class: this.classes(r4.service, r4.groupLayer), key: e10.layer.uid }, n("div", { class: r4.serviceCaptionContainer }, e10.title), s8);
    }
    return this._renderLegendElementsForLayer(e10);
  }
  _renderLegendElementsForLayer(e10) {
    const s8 = e10.legendElements?.filter(Boolean);
    if (!s8?.length) return null;
    const t5 = s8.map((s9) => n(L5, { activeLayerInfo: e10, effectList: e10.effectList, hasIndicators: this._hasIndicators, headingLevel: this.headingLevel, isChild: false, key: `${e10.layer.uid}-${s9.type}`, layer: e10.layer, legendElement: s9, messages: this.messages })), r8 = { [r4.groupLayerChild]: !!e10.parent };
    return n("section", { class: this.classes(r4.service, r8), key: e10.layer.uid }, n("div", { class: r4.serviceCaptionContainer }, n("div", { class: r4.serviceCaptionText }, e10.title)), n("div", { class: r4.serviceContent }, t5));
  }
  _renderSections(e10, s8) {
    if (!e10.ready) return;
    if (e10.children.length) for (const r8 of e10.children) this._renderSections(r8, s8);
    const t5 = e10.legendElements;
    if (t5?.length) for (const r8 of t5) {
      const t6 = n(L5, { activeLayerInfo: e10, effectList: e10.effectList, hasIndicators: this._hasIndicators, headingLevel: this.headingLevel, isChild: false, key: `${e10.layer.uid}-${r8.type}`, layer: e10.layer, legendElement: r8, messages: this.messages });
      t6 && s8.push(t6);
    }
  }
};
r([m()], p7.prototype, "activeLayerInfos", void 0), r([m()], p7.prototype, "headingLevel", void 0), r([m()], p7.prototype, "layout", void 0), r([m(), e2("esri/widgets/Legend/t9n/Legend")], p7.prototype, "messages", void 0), r([m(), e2("esri/t9n/common")], p7.prototype, "messagesCommon", void 0), r([m({ readOnly: true })], p7.prototype, "type", void 0), r([m()], p7.prototype, "view", void 0), p7 = r([a("esri.widgets.Legend.styles.card.CardView")], p7);

// node_modules/@arcgis/core/widgets/Legend/styles/classic/css.js
var e9 = "esri-legend";
var a8 = { service: `${e9}__service`, label: `${e9}__service-label`, layer: `${e9}__layer`, groupLayer: `${e9}__group-layer`, groupLayerChild: `${e9}__group-layer-child`, layerTable: `${e9}__layer-table`, layerTableSizeRamp: `${e9}__layer-table--size-ramp`, layerChildTable: `${e9}__layer-child-table`, layerCaption: `${e9}__layer-caption`, layerBody: `${e9}__layer-body`, layerRow: `${e9}__layer-row`, layerCell: `${e9}__layer-cell`, layerInfo: `${e9}__layer-cell ${e9}__layer-cell--info`, imageryLayerStretchedImage: `${e9}__imagery-layer-image--stretched`, imageryLayerCellStretched: `${e9}__imagery-layer-cell--stretched`, imageryLayerInfoStretched: `${e9}__imagery-layer-info--stretched`, symbolContainer: `${e9}__layer-cell ${e9}__layer-cell--symbols`, symbol: `${e9}__symbol`, rampContainer: `${e9}__ramps`, sizeRamp: `${e9}__size-ramp`, colorRamp: `${e9}__color-ramp`, opacityRamp: `${e9}__opacity-ramp`, borderlessRamp: `${e9}__borderless-ramp`, rampTick: `${e9}__ramp-tick`, rampFirstTick: `${e9}__ramp-tick-first`, rampLastTick: `${e9}__ramp-tick-last`, rampLabelsContainer: `${e9}__ramp-labels`, rampLabel: `${e9}__ramp-label`, message: `${e9}__message`, univariateAboveAndBelowLabel: "esri-univariate-above-and-below-ramp__label" };

// node_modules/@arcgis/core/widgets/Legend/styles/classic/ColorRamp.js
var a9 = 24;
var n8 = class extends O {
  constructor(e10, t5) {
    super(e10, t5), this.legendElement = null, this.opacity = 1;
  }
  get _preview() {
    const e10 = this.legendElement.preview;
    if (!e10) return null;
    const t5 = "opacity-ramp" === this.legendElement.type ? a8.opacityRamp : "";
    return e10.className = `${a8.colorRamp} ${t5}`, null != this.opacity && (e10.style.opacity = this.opacity.toString()), e10;
  }
  render() {
    const { legendElement: e10, _preview: t5 } = this;
    if (!t5) return null;
    const s8 = { width: `${a9}px` }, r8 = { height: t5.style.height };
    return n("div", { class: a8.layerRow, key: `${this.key}-row` }, n("div", { class: a8.symbolContainer, styles: s8 }, n("div", { afterCreate: i5, bind: t5, class: a8.rampContainer })), n("div", { class: a8.layerInfo }, n("div", { class: a8.rampLabelsContainer, styles: r8 }, e10.infos.map((t6, s9) => this._renderRampLabel(t6, s9, e10.type)))));
  }
  _renderRampLabel(e10, t5, s8) {
    return n("div", { class: e10.label ? a8.rampLabel : void 0, key: `${this.key}-stop-${e10.label ?? t5}-label` }, l7(e10, s8, this.messages));
  }
};
r([m()], n8.prototype, "_preview", null), r([m()], n8.prototype, "legendElement", void 0), r([m()], n8.prototype, "messages", void 0), r([m()], n8.prototype, "opacity", void 0), n8 = r([a("esri.widgets.Legend.styles.classic.ColorRamp")], n8);

// node_modules/@arcgis/core/widgets/Legend/styles/classic/SizeRamp.js
var a10 = class extends O {
  constructor(e10, s8) {
    super(e10, s8), this.legendElement = null;
  }
  render() {
    const e10 = this.legendElement.infos.map((e11) => this._renderRow(e11)).filter(Boolean);
    return e10.length ? "spike" === this.legendElement.theme ? r6(this.legendElement) : n("div", { class: a8.layerBody }, e10) : null;
  }
  _renderRow(e10) {
    return e10.preview ? n("div", { class: a8.layerRow, key: `${this.key}-${e10.label}-row` }, n("div", { class: this.classes(a8.symbolContainer, a8.sizeRamp) }, n("div", { afterCreate: i5, bind: e10.preview, class: a8.symbol })), n("div", { class: a8.layerInfo }, o5(this.messages, e10.label, false) || "")) : null;
  }
};
r([m()], a10.prototype, "legendElement", void 0), r([m()], a10.prototype, "messages", void 0), a10 = r([a("esri.widgets.Legend.styles.classic.SizeRamp")], a10);

// node_modules/@arcgis/core/widgets/Legend/styles/classic/UnivariateAboveAndBelowRamp.js
var y4 = class extends O {
  constructor(e10, s8) {
    super(e10, s8), this.effectList = null, this.legendElement = null, this.opacity = 1;
  }
  render() {
    const { legendElement: e10, opacity: s8, effectList: t5, key: i7 } = this, { sizeRampElement: y5, colorRampElement: b4 } = b2(e10, s8);
    if (!y5) return null;
    const f9 = this.messages.previewColorRampAriaLabel, u13 = y3(y5, "above", true), g5 = y3(y5, "below", true), h5 = 12, L6 = h4(b4, { width: h5, height: u13, rampAlignment: "vertical", opacity: s8, type: "above", effectList: t5, ariaLabel: f9 }), w5 = h4(b4, { width: h5, height: g5, rampAlignment: "vertical", opacity: s8, type: "below", effectList: t5, ariaLabel: f9 }), j2 = v5(y5), A = y5.infos.map((e11) => e11.label), $ = A.map((e11, s9) => {
      const t6 = 2 === s9;
      return 0 === s9 ? n("div", { class: e11 ? L6 ? a8.univariateAboveAndBelowLabel : a8.rampLabel : void 0, key: `${i7}-color-ramp-above-label-${e11 ?? s9}` }, e11) : t6 ? n("div", null) : null;
    }), C2 = A.length - 1, R = Math.floor(A.length / 2), k5 = A.map((e11, s9) => s9 === R || s9 === C2 ? n("div", { class: e11 ? L6 ? a8.univariateAboveAndBelowLabel : a8.rampLabel : void 0, key: `${i7}-color-ramp-below-label-${e11 ?? s9}` }, e11) : null), x2 = { display: "table-cell", verticalAlign: "middle" }, E2 = { marginTop: `${j2}px` }, B = { height: `${u13}px` }, U = { height: `${g5}px` };
    return n("div", { key: `${i7}-container`, styles: x }, n("div", { class: a8.layerBody }, y5.infos.map((e11, s9) => n("div", { class: this.classes(a8.layerRow, a8.sizeRamp), key: `${i7}-row-${s9}` }, n("div", { afterCreate: i5, bind: e11.preview, class: a8.symbol, styles: x2 }), L6 || s9 % 2 != 0 ? null : n("div", { class: a8.layerInfo }, A[s9])))), L6 ? n("div", { styles: E2 }, n("div", { styles: z }, n("div", { styles: w4 }, n("div", { afterCreate: i5, bind: L6, class: a8.rampContainer })), n("div", { styles: w4 }, n("div", { class: a8.rampLabelsContainer, styles: B }, $))), n("div", { styles: z }, n("div", { styles: w4 }, n("div", { afterCreate: i5, bind: w5, class: a8.rampContainer })), n("div", { styles: w4 }, n("div", { class: a8.rampLabelsContainer, styles: U }, k5)))) : null);
  }
};
r([m()], y4.prototype, "effectList", void 0), r([m()], y4.prototype, "legendElement", void 0), r([m()], y4.prototype, "messages", void 0), r([m()], y4.prototype, "opacity", void 0), y4 = r([a("esri.widgets.Legend.styles.classic.UnivariateAboveAndBelowRamp")], y4);

// node_modules/@arcgis/core/widgets/Legend/styles/classic/UnivariateColorSizeRamp.js
var f7 = class extends O {
  constructor(e10, s8) {
    super(e10, s8), this.effectList = null, this.legendElement = null, this.opacity = 1;
  }
  render() {
    const { legendElement: e10, opacity: s8, effectList: t5, key: r8 } = this, { sizeRampElement: f9, colorRampElement: v7 } = g2(e10);
    if (!f9) return null;
    const u13 = v5(f9), g5 = 12, b4 = y3(f9, "full", false), h5 = h4(v7, { width: g5, height: b4, rampAlignment: "vertical", opacity: s8, type: "full", effectList: t5, ariaLabel: this.messages?.previewColorRampAriaLabel }), j2 = f9.infos.length - 1, L6 = f9.infos.map((e11, s9) => 0 === s9 || s9 === j2 ? n("div", { class: e11.label ? v7 ? a8.univariateAboveAndBelowLabel : a8.rampLabel : void 0, key: `${r8}-color-ramp-label-${e11.label ?? s9}` }, e11.label) : null), w5 = { display: "table-cell", verticalAlign: "middle" }, C2 = { marginTop: `${u13}px` }, R = { height: `${b4}px` };
    return n("div", { key: `${r8}-container`, styles: x }, n("div", { class: a8.layerBody }, f9.infos.map((e11, s9) => n("div", { class: this.classes(a8.layerRow, a8.sizeRamp), key: `${r8}-row-${s9}` }, n("div", { afterCreate: i5, bind: e11.preview, class: a8.symbol, styles: w5 })))), n("div", { styles: C2 }, n("div", { styles: z }, n("div", { styles: w4 }, n("div", { afterCreate: i5, bind: h5, class: a8.rampContainer })), n("div", { styles: w4 }, n("div", { class: a8.rampLabelsContainer, styles: R }, L6)))));
  }
};
r([m()], f7.prototype, "effectList", void 0), r([m()], f7.prototype, "legendElement", void 0), r([m()], f7.prototype, "messages", void 0), r([m()], f7.prototype, "opacity", void 0), f7 = r([a("esri.widgets.Legend.styles.classic.UnivariateColorSizeRamp")], f7);

// node_modules/@arcgis/core/widgets/Legend/styles/classic/LegendElement.js
var g3;
var f8 = g3 = class extends O {
  constructor(e10, s8) {
    super(e10, s8), this.effectList = null, this.isChild = false, this.legendElement = null;
  }
  render() {
    const e10 = this._renderLegendElement(), s8 = i6(this.legendElement, this.messages), t5 = this.isChild ? a8.layerChildTable : a8.layerTable, r8 = s8 ? n("div", { class: a8.layerCaption }, s8) : null, i7 = { [a8.layerTableSizeRamp]: "size-ramp" === this.legendElement.type || !this.isChild };
    return n("section", { class: this.classes(t5, i7), key: `${this.key}-table` }, r8, e10);
  }
  _renderLegendElement() {
    switch (this.legendElement.type) {
      case "symbol-table":
        return this._renderSymbolTable(this.legendElement);
      case "size-ramp":
        return n(a10, { key: this.key, legendElement: this.legendElement, messages: this.messages });
      case "color-ramp":
      case "opacity-ramp":
      case "heatmap-ramp":
      case "stretch-ramp":
        return n(n8, { key: this.key, legendElement: this.legendElement, messages: this.messages, opacity: this.layer.opacity });
      case "relationship-ramp":
        return k3(this.legendElement, this.id, { opacity: this.layer.opacity, effectList: this.effectList, ariaLabel: this.messages.previewRelationshipRampAriaLabel, key: this.key });
      case "pie-chart-ramp":
        return n("div", { afterCreate: i5, bind: this.legendElement.preview, key: `${this.key}-preview` });
      case "univariate-above-and-below-ramp":
        return n(y4, { effectList: this.effectList, key: this.key, legendElement: this.legendElement, messages: this.messages, opacity: this.layer.opacity });
      case "univariate-color-size-ramp":
        return n(f7, { effectList: this.effectList, key: this.key, legendElement: this.legendElement, messages: this.messages, opacity: this.layer.opacity });
      default:
        return null;
    }
  }
  _renderSymbolTable(e10) {
    const s8 = e10.infos.map((s9) => this._renderElementInfo(s9, e10.legendType)).filter(Boolean);
    return s8.length ? n("div", { class: a8.layerBody }, s8) : null;
  }
  _renderElementInfo(e10, s8) {
    const { layer: t5 } = this, r8 = "label" in e10 ? e10.label : null, i7 = `${this.key}-${r8}`;
    if ("type" in e10 && e10.type) return n(g3, { effectList: this.effectList, isChild: true, key: i7, layer: t5, legendElement: e10, messages: this.messages });
    if (!("preview" in e10 && e10.preview || "src" in e10 && e10.src)) return null;
    const l9 = u10(t5, s8), o7 = { [a8.imageryLayerInfoStretched]: l9 }, n9 = { [a8.imageryLayerInfoStretched]: l9 };
    return n("div", { class: a8.layerRow, key: `${i7}-row` }, n("div", { class: this.classes(a8.symbolContainer, n9) }, this._renderPreview(e10, l9)), n("div", { class: this.classes(a8.layerInfo, o7) }, o5(this.messages, r8, false) || ""));
  }
  _renderPreview(e10, s8) {
    const { layer: t5 } = this;
    return "preview" in e10 && e10.preview ? n("div", { afterCreate: i5, bind: e10.preview, class: a8.symbol }) : "src" in e10 && e10.src ? this._renderImage(e10, t5, s8) : null;
  }
  _renderImage(e10, s8, t5) {
    const { label: r8, src: i7, opacity: l9 } = e10, o7 = { [a8.imageryLayerStretchedImage]: t5, [a8.symbol]: !t5 }, n9 = { opacity: `${l9 ?? s8.opacity}` }, m8 = o5(this.messages, r8, false);
    return n("img", { alt: m8, "aria-label": m8, border: 0, class: this.classes(o7), height: e10.height, src: i7, styles: n9, width: e10.width });
  }
};
r([m()], f8.prototype, "effectList", void 0), r([m()], f8.prototype, "isChild", void 0), r([m()], f8.prototype, "layer", void 0), r([m()], f8.prototype, "legendElement", void 0), r([m()], f8.prototype, "messages", void 0), f8 = g3 = r([a("esri.widgets.Legend.styles.classic.LegendElement")], f8);

// node_modules/@arcgis/core/widgets/Legend/styles/classic/ClassicView.js
var d9 = `${e9}__`;
var m7 = class extends O {
  constructor(e10, s8) {
    super(e10, s8), this.activeLayerInfos = null, this.headingLevel = 3, this.messages = null, this.type = "classic";
  }
  render() {
    const e10 = this.activeLayerInfos, s8 = e10?.toArray().map((e11) => this._renderLegendForLayer(e11)).filter(Boolean);
    return s8?.length ? n("section", null, s8) : n("div", { class: a8.message, key: "no-legend" }, this.messages.noLegend);
  }
  _renderLegendForLayer(e10, s8) {
    if (!e10.ready) return null;
    const r8 = `${e10.layer.uid}-version-${e10.version}`, t5 = `${d9}${s8 ? `${s8}-` : ""}${r8}`, i7 = e10.title ? e6({ level: this.headingLevel, class: this.classes(e5.heading, a8.label) }, e10.title) : null;
    if (e10.children.length) {
      const s9 = e10.children.toArray().map((e11) => this._renderLegendForLayer(e11, r8));
      return n("section", { class: this.classes(a8.service, a8.groupLayer), key: t5 }, i7, s9);
    }
    return this._renderLegendElementsForLayer(e10, i7, t5);
  }
  _renderLegendElementsForLayer(e10, s8, r8) {
    const t5 = e10.legendElements?.filter(Boolean);
    if (!t5?.length) return null;
    const i7 = t5.map((s9) => n(f8, { effectList: e10.effectList, isChild: false, key: `${r8}-${s9.type}`, layer: e10.layer, legendElement: s9, messages: this.messages })), l9 = { [a8.groupLayerChild]: !!e10.parent };
    return n("section", { class: this.classes(a8.service, l9), key: r8 }, s8, n("div", { class: a8.layer }, i7));
  }
};
r([m()], m7.prototype, "activeLayerInfos", void 0), r([m()], m7.prototype, "headingLevel", void 0), r([m(), e2("esri/widgets/Legend/t9n/Legend")], m7.prototype, "messages", void 0), r([m({ readOnly: true })], m7.prototype, "type", void 0), m7 = r([a("esri.widgets.Legend.styles.classic.ClassicView")], m7);

// node_modules/@arcgis/core/widgets/Legend.js
var g4 = { base: "esri-legend" };
var v6 = class extends O {
  constructor(e10, t5) {
    super(e10, t5), this.headingLevel = 3, this.messages = null, this.viewModel = new w3(), this.style = new m7();
  }
  initialize() {
    this.addHandles([a2(() => this.view, "resize", () => this.scheduleRender()), a2(() => this.activeLayerInfos, "change", () => this._refreshActiveLayerInfos(this.activeLayerInfos)), l(() => this.headingLevel, (e10) => {
      const { style: t5 } = this;
      t5 && (t5.headingLevel = e10);
    }), l(() => this.style, (e10, t5) => {
      t5 && e10 !== t5 && t5.destroy(), e10 && (e10.activeLayerInfos = this.activeLayerInfos, "card" === e10.type && (e10.view = this.view), e10.headingLevel = this.headingLevel);
    }, h)]);
  }
  destroy() {
    this.style?.destroy();
  }
  get activeLayerInfos() {
    return this.viewModel.activeLayerInfos;
  }
  set activeLayerInfos(e10) {
    this.viewModel.activeLayerInfos = e10;
  }
  get basemapLegendVisible() {
    return this.viewModel.basemapLegendVisible;
  }
  set basemapLegendVisible(e10) {
    this.viewModel.basemapLegendVisible = e10;
  }
  get groundLegendVisible() {
    return this.viewModel.groundLegendVisible;
  }
  set groundLegendVisible(e10) {
    this.viewModel.groundLegendVisible = e10;
  }
  get hideLayersNotInCurrentView() {
    return this.viewModel.hideLayersNotInCurrentView;
  }
  set hideLayersNotInCurrentView(e10) {
    this.viewModel.hideLayersNotInCurrentView = e10;
  }
  get keepCacheOnDestroy() {
    return this.viewModel.keepCacheOnDestroy;
  }
  set keepCacheOnDestroy(e10) {
    this.viewModel.keepCacheOnDestroy = e10;
  }
  get respectLayerDefinitionExpression() {
    return this.viewModel.respectLayerDefinitionExpression;
  }
  set respectLayerDefinitionExpression(e10) {
    this.viewModel.respectLayerDefinitionExpression = e10;
  }
  get respectLayerVisibility() {
    return this.viewModel.respectLayerVisibility;
  }
  set respectLayerVisibility(e10) {
    this.viewModel.respectLayerVisibility = e10;
  }
  get icon() {
    return "legend";
  }
  set icon(e10) {
    this._overrideIfSome("icon", e10);
  }
  get label() {
    return this.messages?.widgetLabel ?? "";
  }
  set label(e10) {
    this._overrideIfSome("label", e10);
  }
  get layerInfos() {
    return this.viewModel.layerInfos;
  }
  set layerInfos(e10) {
    this.viewModel.layerInfos = e10;
  }
  set style(e10) {
    const t5 = this._get("style");
    e10 !== t5 && t5?.destroy(), this._set("style", e10);
  }
  castStyle(e10) {
    if (e10 instanceof p7 || e10 instanceof m7) return e10;
    if ("string" == typeof e10) return "card" === e10 ? new p7() : new m7();
    if (e10 && "string" == typeof e10.type) {
      const t5 = { ...e10 };
      return delete t5.type, "card" === e10.type ? new p7(t5) : new m7(t5);
    }
    return new m7();
  }
  get view() {
    return this.viewModel.view;
  }
  set view(e10) {
    this.viewModel.view = e10;
  }
  render() {
    return n("div", { class: this.classes(g4.base, e5.widget, this.style instanceof m7 ? e5.panel : null) }, this.style.render());
  }
  _refreshActiveLayerInfos(e10) {
    e10.forEach((e11) => {
      this.removeHandles(`version_${e11.layer.uid}`), this._renderOnActiveLayerInfoChange(e11);
    }), this.scheduleRender();
  }
  _renderOnActiveLayerInfoChange(e10) {
    const r8 = l(() => e10.version, () => this.scheduleRender());
    this.addHandles(r8, `version_${e10.layer.uid}`);
    const o7 = a2(() => e10.children, "change", () => e10.children.forEach((e11) => this._renderOnActiveLayerInfoChange(e11)), h);
    this.addHandles(o7, `version_${e10.layer.uid}`), e10.children.forEach((e11) => this._renderOnActiveLayerInfoChange(e11));
  }
};
r([m()], v6.prototype, "activeLayerInfos", null), r([m()], v6.prototype, "basemapLegendVisible", null), r([m()], v6.prototype, "groundLegendVisible", null), r([m()], v6.prototype, "headingLevel", void 0), r([m()], v6.prototype, "hideLayersNotInCurrentView", null), r([m()], v6.prototype, "keepCacheOnDestroy", null), r([m()], v6.prototype, "respectLayerDefinitionExpression", null), r([m()], v6.prototype, "respectLayerVisibility", null), r([m()], v6.prototype, "icon", null), r([m()], v6.prototype, "label", null), r([m()], v6.prototype, "layerInfos", null), r([m(), e2("esri/widgets/Legend/t9n/Legend")], v6.prototype, "messages", void 0), r([m()], v6.prototype, "style", null), r([s("style")], v6.prototype, "castStyle", null), r([m()], v6.prototype, "view", null), r([m()], v6.prototype, "viewModel", void 0), v6 = r([a("esri.widgets.Legend")], v6);
var u12 = v6;
export {
  u12 as default
};
//# sourceMappingURL=@arcgis_core_widgets_Legend.js.map
