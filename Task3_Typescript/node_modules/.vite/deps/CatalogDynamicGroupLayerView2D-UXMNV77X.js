import {
  S
} from "./chunk-YR4BEFGH.js";
import {
  u
} from "./chunk-EEB2RHCK.js";
import "./chunk-QARUBZM2.js";
import "./chunk-IAKXH7PU.js";
import "./chunk-KB5I2WHB.js";
import "./chunk-P3YYANTX.js";
import "./chunk-GKCEBA6Q.js";
import "./chunk-IGBV77N3.js";
import "./chunk-5Y3EUPZN.js";
import "./chunk-3PPDORWL.js";
import "./chunk-YIXK32VF.js";
import "./chunk-H6F6O2KE.js";
import "./chunk-AF3FX2UV.js";
import "./chunk-BZYXFNL4.js";
import "./chunk-NO2XQDLB.js";
import "./chunk-RP7FUW55.js";
import "./chunk-RGFH75DR.js";
import "./chunk-KE3WBZYL.js";
import {
  r as r2
} from "./chunk-BDLVUYG2.js";
import "./chunk-HWKQJUGY.js";
import "./chunk-XDCUZFJX.js";
import "./chunk-DNZK6PPI.js";
import "./chunk-7BWCD63N.js";
import "./chunk-65K4DQAH.js";
import "./chunk-MUKDJQWB.js";
import "./chunk-6KFXWKZZ.js";
import {
  V
} from "./chunk-X3R5OB6L.js";
import "./chunk-RACDQ3AL.js";
import "./chunk-TEXTBDH7.js";
import "./chunk-N3A2BVTW.js";
import "./chunk-52HWRRRQ.js";
import "./chunk-VNTEV3V4.js";
import "./chunk-OGOQOMMV.js";
import "./chunk-7Z3AF3B2.js";
import "./chunk-6GWORUT3.js";
import "./chunk-YIV2QKTZ.js";
import "./chunk-A3VAC24F.js";
import "./chunk-FPSA4NFH.js";
import "./chunk-FIRNXFAH.js";
import "./chunk-O5TPFXRT.js";
import "./chunk-Q6XRAGMA.js";
import "./chunk-JUAPMINU.js";
import "./chunk-PK2ZR2SJ.js";
import "./chunk-YFPGM5UE.js";
import "./chunk-OXSERRAR.js";
import "./chunk-7HI4VRVW.js";
import "./chunk-ZX46THLM.js";
import "./chunk-KTUX3OKX.js";
import "./chunk-E3KEUGUG.js";
import {
  m
} from "./chunk-N3XLUQJI.js";
import {
  a2 as a
} from "./chunk-JUAD7TJ6.js";
import "./chunk-VHLUKPRH.js";
import {
  r
} from "./chunk-5TPMG26T.js";
import "./chunk-3NBBZ43U.js";
import "./chunk-VOLWOTEG.js";
import "./chunk-XTNIDRTB.js";
import "./chunk-FGWIXJQY.js";
import "./chunk-TKYAZCMB.js";
import "./chunk-3TBMFSPB.js";
import "./chunk-PSZLDJJA.js";
import "./chunk-ZWFY3WY5.js";
import "./chunk-LQFTAGIV.js";
import "./chunk-S7IJH524.js";
import {
  d,
  e,
  k,
  t
} from "./chunk-GZ2P4SCJ.js";
import {
  i2 as i
} from "./chunk-XWG6QGFK.js";
import "./chunk-GWNLQRNM.js";
import "./chunk-FXKORAMT.js";
import "./chunk-GNMFMITH.js";

// node_modules/@arcgis/core/views/layers/CatalogDynamicGroupLayerView.js
var l = Symbol();
var u2 = (u3) => {
  let y = class extends u3 {
    constructor() {
      super(...arguments), this.layerViews = new V(), this._debouncedUpdate = k(async () => {
        const { layer: e2, parent: r3 } = this, t2 = r3?.footprintLayerView;
        let s = [];
        const i3 = this._createQuery();
        if (i3 && t2) {
          const { features: r4 } = await t2.queryFeatures(i3);
          this.suspended || (s = r4.map((r5) => e2.acquireLayer(r5)));
        }
        this.removeHandles(l), this.addHandles(s, l);
      });
    }
    get creatingLayerViews() {
      return this.view?.layerViewManager.isCreatingLayerViewsForLayer(this.layer) ?? false;
    }
    isUpdating() {
      return this.creatingLayerViews || this.layer.updating || this.layerViews.some((e2) => e2.updating);
    }
    enableLayerUpdates() {
      return t([this._updatingHandles.addWhen(() => false === this.parent?.footprintLayerView?.dataUpdating, () => this.updateLayers()), this._updatingHandles.add(() => [this.layer.maximumVisibleSublayers, this.layer.parent?.orderBy, this.parent?.footprintLayerView?.filter, this.parent?.footprintLayerView?.timeExtent, this.suspended], () => this.updateLayers()), e(() => this.removeHandles(l))]);
    }
    updateLayers() {
      this.suspended ? this.removeHandles(l) : this._updatingHandles.addPromise(d(this._debouncedUpdate()).catch((e2) => {
        i.getLogger(this).error(e2);
      }));
    }
    _createQuery() {
      const e2 = this.parent?.footprintLayerView, r3 = this.layer?.parent;
      if (!e2 || !r3 || r3.destroyed) return null;
      const { layer: { maximumVisibleSublayers: t2 }, view: { scale: s } } = this;
      if (!t2) return null;
      const { itemTypeField: i3, itemSourceField: a2, itemNameField: o, minScaleField: d2, maxScaleField: p, objectIdField: l2, orderBy: u4 } = r3, y2 = r2(`${d2} IS NULL OR ${s} <= ${d2} OR ${d2} = 0`, `${p} IS NULL OR ${s} >= ${p}`), c2 = u4?.find((e3) => e3.field && !e3.valueExpression), m2 = e2.createQuery();
      if (m2.returnGeometry = false, m2.num = t2, m2.outFields = [l2, a2, o], m2.where = r2(m2.where, y2), null != this.unsupportedItemTypes) {
        const e3 = `${i3} NOT IN (${this.unsupportedItemTypes.map((e4) => `'${e4}'`)})`;
        m2.where = r2(m2.where, e3);
      }
      return c2?.field && (m2.orderByFields = [`${c2.field} ${"descending" === c2.order ? "DESC" : "ASC"}`], m2.outFields.push(c2.field)), m2;
    }
  };
  return r([m({ readOnly: true })], y.prototype, "creatingLayerViews", null), r([m()], y.prototype, "layer", void 0), r([m()], y.prototype, "layerViews", void 0), r([m({ readOnly: true })], y.prototype, "unsupportedItemTypes", void 0), r([m()], y.prototype, "parent", void 0), r([m({ readOnly: true })], y.prototype, "isUpdating", null), y = r([a("esri.views.layers.CatalogDynamicGroupLayerView")], y), y;
};

// node_modules/@arcgis/core/views/2d/layers/CatalogDynamicGroupLayerView2D.js
var i2 = class extends u2(S(u)) {
  constructor() {
    super(...arguments), this.unsupportedItemTypes = ["Scene Service"], this.layerViews = new V();
  }
  attach() {
    this.addAttachHandles([this.layerViews.on("after-changes", () => this._updateStageChildren()), this.enableLayerUpdates()]);
  }
  detach() {
    this.container.removeAllChildren();
  }
  update(e2) {
    this.updateLayers();
  }
  viewChange() {
  }
  moveEnd() {
    this.requestUpdate();
  }
  _updateStageChildren() {
    this.container.removeAllChildren(), this.layerViews.forEach((e2, r3) => this.container.addChildAt(e2.container, r3));
  }
};
i2 = r([a("esri.views.2d.layers.CatalogDynamicGroupLayerView2D")], i2);
var c = i2;
export {
  c as default
};
//# sourceMappingURL=CatalogDynamicGroupLayerView2D-UXMNV77X.js.map
