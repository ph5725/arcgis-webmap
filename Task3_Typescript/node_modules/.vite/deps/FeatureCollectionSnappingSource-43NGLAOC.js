import {
  i as i2,
  o
} from "./chunk-MGOMMN56.js";
import "./chunk-AT62KISP.js";
import "./chunk-24K5NVHX.js";
import "./chunk-KCZYWZT4.js";
import "./chunk-EOS5YLWS.js";
import {
  t
} from "./chunk-P5XPQUDN.js";
import "./chunk-WYLBCBQH.js";
import {
  y as y2
} from "./chunk-LYH5EAFA.js";
import "./chunk-ENM5QFON.js";
import "./chunk-2H2JCT45.js";
import {
  i,
  n,
  r as r3
} from "./chunk-ALW6457W.js";
import "./chunk-RVXIJHL6.js";
import {
  y
} from "./chunk-2JAL6FAS.js";
import "./chunk-BGR5EVZD.js";
import "./chunk-RTDWTAVK.js";
import "./chunk-QLJ6JQFC.js";
import "./chunk-3LL6ALVC.js";
import "./chunk-NZPABYQQ.js";
import "./chunk-CCHJ3WNU.js";
import "./chunk-BUA5NESM.js";
import "./chunk-SHYE33QH.js";
import "./chunk-LTMF2W73.js";
import "./chunk-DRAQJS2F.js";
import "./chunk-VNTS5E5O.js";
import "./chunk-TMFB3DKM.js";
import "./chunk-LBC3MAJX.js";
import "./chunk-TNW4TPNP.js";
import "./chunk-UG6RJXJ2.js";
import "./chunk-7FAVUXK2.js";
import "./chunk-IVNFIIVI.js";
import "./chunk-FEGY3M6U.js";
import "./chunk-RWRC6JKB.js";
import "./chunk-M6AESODI.js";
import "./chunk-6WL2SHX6.js";
import "./chunk-7ZMGKXLG.js";
import "./chunk-JMXPE5PE.js";
import "./chunk-LL73CCBG.js";
import "./chunk-6TS2ZJL4.js";
import "./chunk-IBGTNH54.js";
import "./chunk-6QTMK7BB.js";
import "./chunk-BNO7HCVD.js";
import "./chunk-3MHRDLQO.js";
import "./chunk-KHRHKYU2.js";
import "./chunk-EOMIFMDH.js";
import "./chunk-QFU5COFB.js";
import {
  r as r2
} from "./chunk-BDLVUYG2.js";
import "./chunk-DNZK6PPI.js";
import "./chunk-7BWCD63N.js";
import "./chunk-RACDQ3AL.js";
import "./chunk-TEXTBDH7.js";
import "./chunk-N3A2BVTW.js";
import "./chunk-IGYEHOTB.js";
import "./chunk-TVM3SZJR.js";
import "./chunk-52HWRRRQ.js";
import "./chunk-VNTEV3V4.js";
import "./chunk-OGOQOMMV.js";
import "./chunk-7Z3AF3B2.js";
import "./chunk-6GWORUT3.js";
import "./chunk-KJSBBQ22.js";
import "./chunk-LMEOPAGQ.js";
import {
  a as a2,
  h as h2,
  l
} from "./chunk-A3VAC24F.js";
import "./chunk-FPSA4NFH.js";
import "./chunk-UY6B6IVT.js";
import "./chunk-O5TPFXRT.js";
import "./chunk-Q6XRAGMA.js";
import "./chunk-JUAPMINU.js";
import "./chunk-PK2ZR2SJ.js";
import "./chunk-YFPGM5UE.js";
import "./chunk-OXSERRAR.js";
import "./chunk-7HI4VRVW.js";
import "./chunk-ZX46THLM.js";
import "./chunk-Y2ZIOB7Y.js";
import "./chunk-KTUX3OKX.js";
import "./chunk-E3KEUGUG.js";
import {
  b,
  m
} from "./chunk-N3XLUQJI.js";
import {
  a2 as a
} from "./chunk-JUAD7TJ6.js";
import "./chunk-VHLUKPRH.js";
import {
  r
} from "./chunk-5TPMG26T.js";
import "./chunk-3NBBZ43U.js";
import "./chunk-VOLWOTEG.js";
import "./chunk-XTNIDRTB.js";
import "./chunk-FGWIXJQY.js";
import "./chunk-TKYAZCMB.js";
import "./chunk-3TBMFSPB.js";
import "./chunk-PSZLDJJA.js";
import "./chunk-ZWFY3WY5.js";
import "./chunk-LQFTAGIV.js";
import "./chunk-S7IJH524.js";
import {
  h,
  s
} from "./chunk-GZ2P4SCJ.js";
import "./chunk-XWG6QGFK.js";
import "./chunk-GWNLQRNM.js";
import "./chunk-FXKORAMT.js";
import "./chunk-GNMFMITH.js";

// node_modules/@arcgis/core/views/interactive/snapping/featureSources/FeatureCollectionSnappingSource.js
var f = class extends b {
  get availability() {
    return 1;
  }
  get _snappingElevationAligner() {
    const { view: e } = this, { layer: t2 } = this.layerSource, i3 = null != e && "3d" === e.type;
    if (!i3 || "subtype-group" === t2.type) return i();
    const r4 = async (i4, r5) => (await h(e.whenLayerView(t2), r5)).elevationAlignPointsInFeatures(i4, r5);
    return i(i3, { elevationInfo: t2.elevationInfo, alignPointsInFeatures: r4 });
  }
  get _snappingElevationFilter() {
    const { view: e } = this, t2 = null != e && "3d" === e.type && "subtype-group" !== this.layerSource.layer.type;
    return r3(t2);
  }
  get _symbologySnappingFetcher() {
    const { view: e } = this, { layer: t2 } = this.layerSource;
    return null != e && "3d" === e.type && "subtype-group" !== t2.type ? n(this._symbologySnappingSupported, async (i3, n2) => {
      const o2 = await e.whenLayerView(t2);
      return s(n2), o2.queryForSymbologySnapping({ candidates: i3, spatialReference: e.spatialReference }, n2);
    }) : n();
  }
  get _layerView() {
    const { view: e } = this;
    if (null == e) return null;
    const { layer: t2 } = this.layerSource;
    return e.allLayerViews.find((e2) => e2.layer === t2);
  }
  get _layerView3D() {
    const { view: e } = this;
    return null == e || "2d" === e.type ? null : this._layerView;
  }
  get _symbologySnappingSupported() {
    return null != this._layerView3D && this._layerView3D.symbologySnappingSupported;
  }
  initialize() {
    const { view: e } = this, { layer: t2 } = this.layerSource;
    null != e && "3d" === e.type && "subtype-group" !== t2.type && this.addHandles([e.elevationProvider.on("elevation-change", ({ context: e2 }) => {
      const { elevationInfo: i3 } = t2;
      y(e2, i3) && this._snappingElevationAligner.notifyElevationSourceChange();
    }), l(() => t2.elevationInfo, () => this._snappingElevationAligner.notifyElevationSourceChange(), h2), l(() => null != this._layerView3D ? this._layerView3D.layer?.renderer : null, () => this._symbologySnappingFetcher.notifySymbologyChange(), h2), a2(() => this._layerView3D?.layer, ["edits", "apply-edits", "graphic-update"], () => this._symbologySnappingFetcher.notifySymbologyChange())]);
  }
  constructor(e) {
    super(e), this.view = null, this.updating = false, this._memoizedMakeGetGroundElevation = t(i2);
  }
  refresh() {
  }
  async fetchCandidates(e, t2) {
    const { layer: i3 } = this.layerSource, { source: n2 } = i3;
    if (!n2?.querySnapping) return [];
    const o2 = i3.createQuery();
    this._layerView && "effectiveDisplayFilter" in this._layerView && (o2.where = r2(o2.where, this._layerView.effectiveDisplayFilter?.where));
    const a3 = "returnZ" in i3 ? i3.returnZ : void 0, s2 = y2({ parameters: e, mode: this.view?.type ?? "2d", returnZ: a3, filter: o2 }), p = await n2.querySnapping(s2, { signal: t2 });
    s(t2);
    const y3 = e.coordinateHelper.spatialReference, c = await this._snappingElevationAligner.alignCandidates(p.candidates, y3, t2);
    s(t2);
    const h3 = await this._symbologySnappingFetcher.fetch(c, t2);
    s(t2);
    const m2 = 0 === h3.length ? c : [...c, ...h3], d = this._snappingElevationFilter.filter(s2, m2), v = this._memoizedMakeGetGroundElevation(this.view, y3);
    return d.map((e2) => o(e2, v));
  }
};
r([m({ constructOnly: true })], f.prototype, "layerSource", void 0), r([m({ constructOnly: true })], f.prototype, "view", void 0), r([m()], f.prototype, "_snappingElevationAligner", null), r([m()], f.prototype, "_snappingElevationFilter", null), r([m()], f.prototype, "_symbologySnappingFetcher", null), r([m()], f.prototype, "_layerView", null), r([m()], f.prototype, "_layerView3D", null), r([m()], f.prototype, "_symbologySnappingSupported", null), f = r([a("esri.views.interactive.snapping.featureSources.FeatureCollectionSnappingSource")], f);
export {
  f as FeatureCollectionSnappingSource
};
//# sourceMappingURL=FeatureCollectionSnappingSource-43NGLAOC.js.map
