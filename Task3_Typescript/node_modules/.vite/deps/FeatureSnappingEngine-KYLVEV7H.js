import {
  n as n3,
  o as o2,
  s as s4
} from "./chunk-PQSYYE6U.js";
import "./chunk-EQXUGRYF.js";
import {
  r as r4
} from "./chunk-24K5NVHX.js";
import {
  n as n2,
  r as r5
} from "./chunk-KCZYWZT4.js";
import "./chunk-EOS5YLWS.js";
import "./chunk-HPOHIVBI.js";
import {
  E as E2,
  Et,
  b as b3,
  f
} from "./chunk-LYH5EAFA.js";
import {
  E2 as E,
  N,
  p as p2,
  s as s3
} from "./chunk-ENM5QFON.js";
import "./chunk-2H2JCT45.js";
import {
  r as r3
} from "./chunk-IAKXH7PU.js";
import "./chunk-RVXIJHL6.js";
import {
  j
} from "./chunk-2JAL6FAS.js";
import "./chunk-BGR5EVZD.js";
import "./chunk-RTDWTAVK.js";
import "./chunk-QLJ6JQFC.js";
import "./chunk-3LL6ALVC.js";
import "./chunk-NZPABYQQ.js";
import "./chunk-CCHJ3WNU.js";
import {
  o
} from "./chunk-VM7TVSSO.js";
import "./chunk-BUA5NESM.js";
import "./chunk-SHYE33QH.js";
import "./chunk-LTMF2W73.js";
import {
  h
} from "./chunk-YIXK32VF.js";
import "./chunk-DRAQJS2F.js";
import "./chunk-VNTS5E5O.js";
import {
  s as s2,
  v
} from "./chunk-TMFB3DKM.js";
import "./chunk-LBC3MAJX.js";
import {
  b as b2
} from "./chunk-TNW4TPNP.js";
import {
  d as d3
} from "./chunk-AC7GOP3F.js";
import "./chunk-UG6RJXJ2.js";
import "./chunk-7FAVUXK2.js";
import "./chunk-IVNFIIVI.js";
import "./chunk-FEGY3M6U.js";
import "./chunk-6WL2SHX6.js";
import "./chunk-7ZMGKXLG.js";
import "./chunk-JMXPE5PE.js";
import "./chunk-LL73CCBG.js";
import "./chunk-6TS2ZJL4.js";
import "./chunk-IBGTNH54.js";
import "./chunk-6QTMK7BB.js";
import "./chunk-BNO7HCVD.js";
import "./chunk-3MHRDLQO.js";
import "./chunk-KHRHKYU2.js";
import "./chunk-EOMIFMDH.js";
import "./chunk-QFU5COFB.js";
import {
  r as r2
} from "./chunk-BDLVUYG2.js";
import "./chunk-DNZK6PPI.js";
import {
  e
} from "./chunk-7BWCD63N.js";
import "./chunk-MUKDJQWB.js";
import {
  d as d2
} from "./chunk-HPGYEHVI.js";
import {
  p,
  u as u2
} from "./chunk-YBJ5GVXQ.js";
import {
  V as V2
} from "./chunk-X3R5OB6L.js";
import {
  n
} from "./chunk-RACDQ3AL.js";
import "./chunk-TEXTBDH7.js";
import "./chunk-N3A2BVTW.js";
import "./chunk-IGYEHOTB.js";
import "./chunk-TVM3SZJR.js";
import "./chunk-52HWRRRQ.js";
import "./chunk-VNTEV3V4.js";
import "./chunk-OGOQOMMV.js";
import "./chunk-7Z3AF3B2.js";
import "./chunk-6GWORUT3.js";
import "./chunk-KJSBBQ22.js";
import "./chunk-LMEOPAGQ.js";
import "./chunk-YIV2QKTZ.js";
import {
  U,
  a as a2,
  l as l2,
  w
} from "./chunk-A3VAC24F.js";
import "./chunk-FPSA4NFH.js";
import "./chunk-UY6B6IVT.js";
import "./chunk-O5TPFXRT.js";
import "./chunk-Q6XRAGMA.js";
import "./chunk-JUAPMINU.js";
import "./chunk-PK2ZR2SJ.js";
import "./chunk-YFPGM5UE.js";
import {
  V,
  Z
} from "./chunk-OXSERRAR.js";
import "./chunk-7HI4VRVW.js";
import "./chunk-ZX46THLM.js";
import "./chunk-Y2ZIOB7Y.js";
import "./chunk-KTUX3OKX.js";
import "./chunk-E3KEUGUG.js";
import {
  b,
  m
} from "./chunk-N3XLUQJI.js";
import {
  a2 as a
} from "./chunk-JUAD7TJ6.js";
import "./chunk-VHLUKPRH.js";
import {
  r
} from "./chunk-5TPMG26T.js";
import "./chunk-3NBBZ43U.js";
import "./chunk-VOLWOTEG.js";
import "./chunk-XTNIDRTB.js";
import "./chunk-FGWIXJQY.js";
import "./chunk-TKYAZCMB.js";
import "./chunk-3TBMFSPB.js";
import "./chunk-PSZLDJJA.js";
import "./chunk-ZWFY3WY5.js";
import "./chunk-LQFTAGIV.js";
import "./chunk-S7IJH524.js";
import {
  c,
  c3 as c2,
  d,
  g,
  l,
  s,
  u3 as u
} from "./chunk-GZ2P4SCJ.js";
import {
  i2 as i
} from "./chunk-XWG6QGFK.js";
import "./chunk-GWNLQRNM.js";
import {
  L,
  has
} from "./chunk-FXKORAMT.js";
import "./chunk-GNMFMITH.js";

// node_modules/@arcgis/core/core/mapCollectionUtils.js
function c3(e2, o3, s5) {
  const r6 = s5?.createCollection?.() ?? new V2(), n4 = !!s5?.recycleItems ? new d4() : null, i2 = (e3, t = 0) => {
    if (!e3?.length) return;
    const o4 = r6.splice(t, e3.length);
    n4 ? n4.processRemoved(e3) : o4.forEach(m2);
  }, c4 = (e3, t = 0) => {
    if (!e3?.length) return;
    const s6 = [];
    for (const r7 of e3) {
      const e4 = n4?.use(r7);
      if (e4) s6.push(e4);
      else {
        const e5 = o3(r7);
        n4?.register(r7, e5), s6.push(e5);
      }
    }
    r6.addMany(s6, t);
  }, l4 = a2(e2, "after-splice", ({ added: e3, start: t, removed: o4 }) => {
    i2(o4, t), c4(e3, t);
  }, { sync: true, onListenerRemove: (e3) => i2(e3.items), onListenerAdd: (e3) => c4(e3.items) });
  return r6.addHandles(l4), r6;
}
var d4 = class {
  constructor() {
    this._originalToMapped = /* @__PURE__ */ new Map(), this._removedItemCandidates = /* @__PURE__ */ new Set(), this._garbageCollectionQueued = false;
  }
  processRemoved(e2) {
    if (!e2?.length) return;
    const { _removedItemCandidates: t } = this;
    for (const o3 of e2) this._getItem(o3)?.markRemoved() && (t.add(o3), this._queueGarbageCollection());
  }
  use(e2) {
    const t = this._getItem(e2);
    return t && (t.removed = false), t?.item;
  }
  register(e2, t) {
    this._originalToMapped.set(e2, new l3(t));
  }
  _getItem(e2) {
    return this._originalToMapped.get(e2);
  }
  _queueGarbageCollection() {
    this._garbageCollectionQueued || (this._garbageCollectionQueued = true, queueMicrotask(() => this._garbageCollectCandidates()));
  }
  _garbageCollectCandidates() {
    this._garbageCollectionQueued = false;
    const { _removedItemCandidates: e2 } = this, t = Array.from(e2);
    e2.clear(), t.forEach((e3) => this._garbageCollectIfRemoved(e3));
  }
  _garbageCollectIfRemoved(e2) {
    const { _originalToMapped: t } = this, o3 = this._getItem(e2);
    o3?.removed && (m2(o3.item), t.delete(e2));
  }
};
var l3 = class {
  constructor(e2) {
    this.item = e2, this.removed = false;
  }
  markRemoved() {
    return this.removed = true, true;
  }
};
function m2(e2) {
  "object" == typeof e2 && e2 && ("destroy" in e2 && "function" == typeof e2.destroy ? e2.destroy() : l(e2));
}
function u3(s5, a3, d5) {
  const l4 = new V2(), u4 = c3(s5, (t) => d2(async (e2) => {
    const o3 = await a3(t, e2);
    if (c2(e2)) throw m2(o3), u();
    return o3;
  }), d5), f3 = () => null, g2 = async (e2) => {
    const t = await e2.promise, o3 = u4.indexOf(e2);
    o3 < 0 || l4.splice(o3, 1, t);
  };
  l4.addMany(u4.items.map(f3));
  for (const e2 of u4) d(g2(e2));
  const h3 = u4.on("after-splice", ({ added: e2, start: t, deleteCount: o3 }) => {
    const s6 = l4.splice(t, o3);
    for (const r6 of s6) m2(r6);
    if (e2?.length) {
      l4.addMany(e2.map(f3), t);
      for (const t2 of e2) d(g2(t2));
    }
  });
  return l4.addHandles([c(u4), h3]), l4;
}

// node_modules/@arcgis/core/views/interactive/snapping/FeatureSnappingSourceInfo.js
var f2 = class extends b {
  set attributeRulesEnabled(e2) {
    this._set("attributeRulesEnabled", e2), e2 && this.loadRules();
  }
  get layerView() {
    return this.view?.allLayerViews?.find((e2) => e2.layer === this.layer);
  }
  get valid() {
    const { _valid: e2, snappingSource: t, layer: r6 } = this;
    return !(!t || !r6) && e2;
  }
  get subtypeFilter() {
    const { layer: e2, snappingSource: t } = this;
    if (!p(e2) || !e2.subtypes?.length || !t) return { mode: "not-in-use", filter: null };
    const r6 = t.layerSource.sublayerSources.filter((e3) => e3.enabled && e3.layer.visible && r3(this.view?.scale, e3.layer.effectiveScaleRange.minScale, e3.layer.effectiveScaleRange.maxScale)).map((e3) => e3.layer.subtypeCode);
    if (!r6.length) return { mode: "none-visible", filter: null };
    if (r6.length === e2.subtypes.length) return { mode: "all-visible", filter: null };
    const i2 = e2.fieldsIndex.get(e2.subtypeField)?.name ?? e2.subtypeField;
    return 1 === r6.length ? { mode: "in-use", filter: `${i2} = ${r6.getItemAt(0)}` } : { mode: "in-use", filter: `${i2} IN (${r6.join(", ")})` };
  }
  get floorFilter() {
    const { view: e2, layer: t } = this;
    return e2 && t ? o({ view: e2, layer: t }) : null;
  }
  constructor(e2) {
    super(e2), this.layer = null, this.snappingSource = null, this.rulesTable = null, this._valid = null;
  }
  initialize() {
    if (!this.snappingSource || !this.layer) return void (this._valid = false);
    const { layer: e2, snappingSource: t } = this;
    if ("refresh" in e2) {
      const r6 = e2;
      this.addHandles(r6.on("refresh", () => t.refresh()));
    }
    this.loadRules(), this.addHandles([l2(() => t.updating, (e3) => t.layerSource.updating = e3, w), l2(() => t.availability, (e3) => t.layerSource.availability = e3, w)]);
  }
  getFetchCandidatesParameters(e2, t, r6) {
    if (!this.valid) return [];
    const { layer: i2, layerView: l4, floorFilter: o3, rulesTable: a3, subtypeFilter: u4 } = this, y = { distance: r6, mode: this.view?.type ?? "2d", point: e2, coordinateHelper: t.coordinateHelper, ...h2(), filter: l4 && "filter" in l4 ? l4.filter : null };
    if (o3 && (y.filter = m3(y.filter, o3)), "not-in-use" !== u4.mode && "all-visible" !== u4.mode) {
      if ("none-visible" === u4.mode) return [];
      y.filter ? y.filter.where = r2(y.filter.where, u4.mode) : y.filter = new d3({ where: u4.filter });
    }
    if (!this.attributeRulesEnabled) return [y];
    const f3 = t.feature, v2 = "subtype-sublayer" === f3?.sourceLayer?.type ? f3.sourceLayer.parent : f3?.sourceLayer;
    if (a3 && f3 && b3(this.view?.map) && (u2(i2) || p(i2)) && (u2(v2) || p(v2)) && this.view.map.utilityNetworks?.find((e3) => e3.isUtilityLayer(v2))) {
      if ("loaded" !== a3.loadStatus) return [];
      const e3 = [], t2 = i2.layerId, r7 = a3.getFeatureSQL(v2, f3)?.[t2];
      if (!r7) return [];
      const l5 = r7.anyVertex;
      let s5 = r7.endVertex;
      return s5 && l5 && s5 === l5 && (s5 = ""), s5 && e3.push({ ...y, returnEdge: false, vertexMode: "ends", filter: m3(y.filter, s5) }), l5 && e3.push({ ...y, returnEdge: has("snapping-include-edges-when-applying-any-vertex-rule") ?? false, vertexMode: "all", filter: m3(y.filter, l5) }), e3;
    }
    return [y];
  }
  async loadRules() {
    this._valid = null;
    const { layer: e2, view: t, attributeRulesEnabled: i2 } = this;
    if (i2 && e2 && t && b3(t?.map) && (u2(e2) || p(e2))) try {
      await Promise.allSettled(t.map.utilityNetworks?.map((e3) => e3.load()) ?? []);
      const r6 = t.map.utilityNetworks?.find((t2) => t2.isUtilityLayer(e2));
      r6 && (this.rulesTable = await r6.getRulesTable(), await this.rulesTable?.load());
    } catch (l4) {
      return this._valid = false, void i.getLogger("esri.views.interactive.snapping.FeatureSnappingSourceInfo").error("Failed to load rules table for snapping source", e2.title);
    }
    this._valid = true;
  }
  remove() {
    this.destroy();
  }
  destroy() {
    this.snappingSource?.destroy();
  }
};
function h2() {
  return { returnEdge: true, vertexMode: "all" };
}
function m3(e2, t) {
  return null == e2 ? new d3({ where: t }) : e2.where ? new d3({ where: r2(e2.where, t) }) : new d3({ where: t });
}
r([m({ constructOnly: true })], f2.prototype, "layer", void 0), r([m({ constructOnly: true })], f2.prototype, "snappingSource", void 0), r([m({ constructOnly: true })], f2.prototype, "view", void 0), r([m({ value: false })], f2.prototype, "attributeRulesEnabled", null), r([m()], f2.prototype, "layerView", null), r([m()], f2.prototype, "rulesTable", void 0), r([m()], f2.prototype, "valid", null), r([m()], f2.prototype, "subtypeFilter", null), r([m()], f2.prototype, "floorFilter", null), r([m()], f2.prototype, "_valid", void 0), f2 = r([a("esri.views.interactive.snapping.FeatureSnappingSourceInfo")], f2);

// node_modules/@arcgis/core/views/interactive/snapping/FeatureSnappingEngine.js
var P = class extends b {
  get updating() {
    return this._snappingSources.some((e2) => null == e2?.valid || true === e2.valid && true === e2.snappingSource?.updating) || this._updatingHandles.updating;
  }
  constructor(e2) {
    super(e2), this.options = null, this._domain = E.FEATURE, this._updatingHandles = new h(), this._sourceModules = { featureService: { module: null, loader: null }, featureCollection: { module: null, loader: null }, graphics: { module: null, loader: null }, notes: { module: null, loader: null }, scene: { module: null, loader: null } };
  }
  initialize() {
    const e2 = u3(() => this.options?._effectiveFeatureSources, (e3, t) => this._createSourceInfo(e3, t));
    this._snappingSources = e2, this.addHandles([c(e2), l2(() => ({ rulesEnabled: !!this.options?.attributeRulesEnabled, sources: this._snappingSources.filter(L) }), ({ rulesEnabled: e3, sources: t }) => {
      for (const r6 of t) r6.attributeRulesEnabled = e3;
    }, U)]);
  }
  destroy() {
    this._set("options", null), this._updatingHandles.destroy();
  }
  async fetchCandidates(e2, t, r6, a3) {
    if (!(t & this._domain && null != this.options && this.options.effectiveFeatureEnabled)) return [];
    const n4 = [], i2 = this._computeScreenSizeDistanceParameters(e2, r6);
    for (const s5 of this._snappingSources) {
      if (!s5?.valid || !s5.snappingSource?.layerSource?.enabled || s5.layerView?.suspended) continue;
      const t2 = s5.getFetchCandidatesParameters(e2, r6, i2);
      for (const e3 of t2) n4.push(s5.snappingSource.fetchCandidates(e3, a3).then((e4) => e4.filter((e5) => !this._candidateIsExcluded(s5.snappingSource, e5, r6.excludeFeature))));
    }
    const c4 = (await g(n4)).flat();
    return this._addRightAngleCandidates(c4, e2, i2, r6), s(a3), E2(e2, c4), c4;
  }
  _addRightAngleCandidates(e2, t, r6, a3) {
    const n4 = null != a3.vertexHandle ? a3.vertexHandle.rightEdge?.rightVertex?.pos : null != a3.editGeometryOperations && "polygon" === a3.editGeometryOperations.data.type ? a3.editGeometryOperations.data.components[0]?.getFirstVertex()?.pos : null, s5 = null != a3.vertexHandle ? a3.vertexHandle.leftEdge?.leftVertex?.pos : null != a3.editGeometryOperations ? a3.editGeometryOperations.data.components[0]?.getLastVertex()?.pos : null, { view: o3 } = this, i2 = N(n4, o3, a3), c4 = N(s5, o3, a3), u4 = e2.length;
    for (let l4 = 0; l4 < u4; l4++) this._addRightAngleCandidate(e2[l4], c4, t, r6, e2), this._addRightAngleCandidate(e2[l4], i2, t, r6, e2);
  }
  _addRightAngleCandidate(e2, t, r6, a3, n4) {
    if (null == t || !U2(e2)) return;
    const s5 = e2.constraint.closestTo(t), o3 = (s5[0] - r6[0]) / a3.x, i2 = (s5[1] - r6[1]) / a3.y, { start: c4, end: u4 } = e2.constraint;
    if (o3 * o3 + i2 * i2 <= 1) {
      const r7 = b2(s3(s5), s3(c4)) > b2(s3(s5), s3(u4)) ? c4 : u4, a4 = new n3({ targetPoint: p2(s5), otherVertex: t, otherVertexType: o2.NEXT, previousVertex: r7, constraint: new Et(t, s5), objectId: e2.objectId, isDraped: e2.isDraped, domain: E.FEATURE });
      n4.push(a4);
    }
  }
  _computeScreenSizeDistanceParameters(e2, t) {
    let r6 = null != this.options ? this.options.distance * ("touch" === t.pointer ? this.options.touchSensitivityMultiplier : 1) : 0;
    return null == this.view ? { x: r6, y: r6, z: r6, distance: r6 } : "2d" === this.view.type ? (r6 *= this.view.resolution, { x: r6, y: r6, z: r6, distance: r6 }) : this._computeScreenSizeDistanceParameters3D(e2, r6, this.view, t);
  }
  _computeScreenSizeDistanceParameters3D(e2, t, r6, a3) {
    const { spatialReference: n4 } = a3;
    r6.renderCoordsHelper.toRenderCoords(e2, n4, D);
    const s5 = r6.state.camera.computeScreenPixelSizeAt(D), o3 = s5 * r6.renderCoordsHelper.unitInMeters, i2 = o3 / Z(n4), c4 = o3 / V(n4), p3 = t * i2, d5 = t * c4, m4 = s4(e2, n4, j, r6), g2 = m4 ? z(m4, e2, i2, 0, 0, r6, a3) : 0, h3 = m4 ? z(m4, e2, 0, i2, 0, r6, a3) : 0, S = m4 ? z(m4, e2, 0, 0, c4, r6, a3) : 0;
    return { x: 0 === g2 ? 0 : p3 / g2, y: 0 === h3 ? 0 : p3 / h3, z: 0 === S ? 0 : d5 / S, distance: s5 * t };
  }
  _candidateIsExcluded(e2, t, r6) {
    if (null == r6) return false;
    const a3 = this._getCandidateObjectId(t);
    if (null == a3) return false;
    const n4 = e2.layerSource.layer;
    return "graphics" === n4.type ? r6.uid === a3 : r6.sourceLayer === n4 && (!(!r6.attributes || !("objectIdField" in n4)) && r6.attributes[n4.objectIdField] === a3);
  }
  _getCandidateObjectId(e2) {
    return e2 instanceof n2 ? e2.objectId : null;
  }
  async _createSourceInfo(e2, t) {
    const r6 = e2.layer;
    r6.loaded || (await r6.load(), s(t));
    const { view: a3 } = this, n4 = await this._createFeatureSnappingSourceType(e2);
    return s(t), new f2(null == n4 ? {} : { snappingSource: n4, view: a3, layer: r6 });
  }
  async _createFeatureSnappingSourceType(e2) {
    switch (e2.layer.type) {
      case "feature":
      case "geojson":
      case "csv":
      case "oriented-imagery":
      case "subtype-group":
      case "wfs":
        return this._createFeatureSnappingSourceFeatureLayer(e2);
      case "graphics":
        return this._createFeatureSnappingSourceGraphicsLayer(e2);
      case "map-notes":
        return this._createFeatureSnappingSourceMapNotesLayer(e2);
      case "scene":
      case "building-scene":
        return this._createFeatureSnappingSourceSceneLayer(e2);
    }
    return null;
  }
  async _createFeatureSnappingSourceSceneLayer(e2) {
    const { view: t } = this;
    if (null == t || "3d" !== t.type) return null;
    return new (await this._getSourceModule("scene")).SceneLayerSnappingSource({ layerSource: e2, view: t });
  }
  async _createFeatureSnappingSourceFeatureLayer(e2) {
    switch (e2.layer.source?.type) {
      case "feature-layer":
      case "oriented-imagery":
        return new (await this._getSourceModule("featureService")).FeatureServiceSnappingSource({ spatialReference: this.spatialReference, view: this.view, layerSource: e2 });
      case "memory":
      case "csv":
      case "geojson":
      case "wfs":
        if ("mesh" === e2.layer.geometryType) return null;
        return new (await this._getSourceModule("featureCollection")).FeatureCollectionSnappingSource({ layerSource: e2, view: this.view });
    }
    return null;
  }
  async _createFeatureSnappingSourceGraphicsLayer(e2) {
    return new (await this._getSourceModule("graphics")).GraphicsSnappingSource({ getGraphicsLayers: () => [e2.layer], spatialReference: this.spatialReference, view: this.view, layerSource: e2 });
  }
  async _createFeatureSnappingSourceMapNotesLayer(e2) {
    return new (await this._getSourceModule("notes")).GraphicsSnappingSource({ getGraphicsLayers: () => e2.layer.sublayers?.toArray() ?? [], spatialReference: this.spatialReference, view: this.view, layerSource: e2 });
  }
  async _getSourceModule(e2) {
    const t = this._sourceModules[e2];
    if (null == t.loader) {
      const t2 = this._loadSourceModule(e2), r6 = { module: null, loader: t2 };
      this._sourceModules[e2] = r6;
      const a3 = await t2, n4 = { module: a3, loader: t2 };
      return this._sourceModules[e2] = n4, a3;
    }
    return null == t.module ? t.loader : t.module;
  }
  _loadSourceModule(e2) {
    const t = this._updatingHandles;
    switch (e2) {
      case "featureService":
        return t.addPromise(import("./FeatureServiceSnappingSource-FWYUZKPM.js"));
      case "featureCollection":
        return t.addPromise(import("./FeatureCollectionSnappingSource-43NGLAOC.js"));
      case "graphics":
      case "notes":
        return t.addPromise(import("./GraphicsSnappingSource-UTWFZ6DH.js"));
      case "scene":
        return t.addPromise(import("./SceneLayerSnappingSource-42FFSEPH.js"));
    }
  }
  get test() {
  }
};
function U2(e2) {
  return (e2 instanceof r5 || e2 instanceof r4) && !A(e2);
}
function A({ constraint: { start: e2, end: t } }) {
  const r6 = v(e2, t), a3 = b2(s3(e2), s3(t));
  return r6 < e() || a3 / r6 < T;
}
function z(e2, t, r6, a3, n4, s5, { spatialReference: o3 }) {
  const i2 = s2(O, t);
  i2[0] += r6, i2[1] += a3, i2[2] += n4;
  const c4 = s4(i2, o3, j, s5);
  return c4 ? f(c4, e2) : 1 / 0;
}
r([m({ constructOnly: true })], P.prototype, "spatialReference", void 0), r([m({ constructOnly: true })], P.prototype, "view", void 0), r([m()], P.prototype, "options", void 0), r([m({ readOnly: true })], P.prototype, "updating", null), r([m()], P.prototype, "_snappingSources", void 0), P = r([a("esri.views.interactive.snapping.FeatureSnappingEngine")], P);
var D = n();
var O = n();
var T = 1e-4;
export {
  P as FeatureSnappingEngine
};
//# sourceMappingURL=FeatureSnappingEngine-KYLVEV7H.js.map
