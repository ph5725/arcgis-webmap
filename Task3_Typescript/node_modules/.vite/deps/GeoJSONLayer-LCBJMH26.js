import {
  y as y3
} from "./chunk-7TPOIM4Y.js";
import "./chunk-LNFOAX5I.js";
import {
  e as e2
} from "./chunk-ZUTXZ2PO.js";
import {
  d as d2
} from "./chunk-FSVG2RRX.js";
import "./chunk-L3O6KWVI.js";
import {
  c
} from "./chunk-WIICHW3C.js";
import "./chunk-T4BWGCN6.js";
import "./chunk-AC7GOP3F.js";
import {
  a as a4
} from "./chunk-XPKVLOAO.js";
import {
  s as s3
} from "./chunk-GESOBEYT.js";
import {
  a as a5
} from "./chunk-3IU6SQCC.js";
import {
  p as p4
} from "./chunk-E7YVYF37.js";
import "./chunk-E76L26GR.js";
import {
  A,
  l as l2
} from "./chunk-GG4VLKUY.js";
import "./chunk-IL45XPTT.js";
import {
  c as c2
} from "./chunk-6MFKAT6L.js";
import "./chunk-NOWX6W7R.js";
import {
  p as p5
} from "./chunk-OQ76WPLD.js";
import {
  e
} from "./chunk-KSVHYEPS.js";
import {
  ae
} from "./chunk-UTU6N7VJ.js";
import "./chunk-RV3SBM2C.js";
import "./chunk-4GXVCEW4.js";
import {
  g
} from "./chunk-B6C7UPBZ.js";
import {
  f as f2
} from "./chunk-IUQBXXYO.js";
import "./chunk-7WKBQS4R.js";
import {
  j
} from "./chunk-VGIEH4HM.js";
import {
  p as p2
} from "./chunk-XLF2NMGX.js";
import {
  t
} from "./chunk-X5GD6LFD.js";
import {
  I as I2,
  b2 as b,
  d,
  l,
  m as m3,
  p as p3,
  s as s2,
  u,
  w,
  y as y2
} from "./chunk-G4PMFSAZ.js";
import "./chunk-MX5VW6PC.js";
import "./chunk-JJNHUYXK.js";
import "./chunk-UG6RJXJ2.js";
import {
  S
} from "./chunk-OTCYHWWG.js";
import "./chunk-UGXCZZ7N.js";
import "./chunk-OTSYE6UT.js";
import "./chunk-K5LVZUBF.js";
import "./chunk-J7LSFQNH.js";
import {
  m as m4,
  u as u2
} from "./chunk-AGDHKBKD.js";
import "./chunk-OC2XWDW2.js";
import "./chunk-C3JHRSMA.js";
import "./chunk-M2UZRY7C.js";
import "./chunk-HUVZEBBO.js";
import "./chunk-VLPG2W66.js";
import "./chunk-GH7GZNY6.js";
import "./chunk-G5DA3EEG.js";
import "./chunk-D443BZKU.js";
import "./chunk-7DFHXN7Z.js";
import "./chunk-NX54JGTL.js";
import "./chunk-I6IIPG56.js";
import "./chunk-JEYXDNAT.js";
import "./chunk-DJJNSAUR.js";
import "./chunk-PZBXBPVO.js";
import "./chunk-TMC6HYGQ.js";
import "./chunk-7FAVUXK2.js";
import "./chunk-IVNFIIVI.js";
import "./chunk-T4QXFCFF.js";
import "./chunk-BFUOEOXA.js";
import "./chunk-NOGWEW4X.js";
import "./chunk-ZCZERMS4.js";
import "./chunk-7CUBIFKN.js";
import "./chunk-GPMIOMDJ.js";
import "./chunk-RGFH75DR.js";
import "./chunk-FEGY3M6U.js";
import "./chunk-RWRC6JKB.js";
import "./chunk-M6AESODI.js";
import "./chunk-NY6S6EMV.js";
import "./chunk-AQGMTI4V.js";
import "./chunk-QG7JWSBW.js";
import "./chunk-YSCIEMYQ.js";
import {
  p as p6
} from "./chunk-ZXGBNDYM.js";
import "./chunk-GOWWJ2HE.js";
import {
  R
} from "./chunk-7ZMGKXLG.js";
import "./chunk-JMXPE5PE.js";
import "./chunk-LL73CCBG.js";
import {
  m as m2
} from "./chunk-6TS2ZJL4.js";
import "./chunk-IBGTNH54.js";
import {
  h
} from "./chunk-L7EN54WK.js";
import "./chunk-6QTMK7BB.js";
import "./chunk-BNO7HCVD.js";
import "./chunk-7NMH5MM5.js";
import "./chunk-TCIXF7MM.js";
import "./chunk-UGTICYU7.js";
import "./chunk-3MHRDLQO.js";
import "./chunk-F4KXGA4J.js";
import "./chunk-KHRHKYU2.js";
import "./chunk-2IMSGFJN.js";
import "./chunk-VHTQ5H2C.js";
import {
  q
} from "./chunk-YX2VTIZR.js";
import "./chunk-LYSDGL5S.js";
import "./chunk-SRJX4QLW.js";
import "./chunk-WPTJIN2M.js";
import "./chunk-KUP5BM5G.js";
import "./chunk-HNQNVI5C.js";
import "./chunk-G34OBNLT.js";
import "./chunk-WJUYGRZY.js";
import "./chunk-FKFXOPPT.js";
import "./chunk-KE3WBZYL.js";
import "./chunk-EOMIFMDH.js";
import "./chunk-QFU5COFB.js";
import "./chunk-45ILJ6ZH.js";
import {
  I as I3,
  g as g2
} from "./chunk-VCRP2PLV.js";
import "./chunk-BDLVUYG2.js";
import "./chunk-6QA2BVC5.js";
import "./chunk-HWKQJUGY.js";
import "./chunk-XDCUZFJX.js";
import "./chunk-DNZK6PPI.js";
import "./chunk-7BWCD63N.js";
import "./chunk-65K4DQAH.js";
import "./chunk-MUKDJQWB.js";
import "./chunk-6KFXWKZZ.js";
import "./chunk-HPGYEHVI.js";
import "./chunk-YBJ5GVXQ.js";
import "./chunk-X3R5OB6L.js";
import "./chunk-RACDQ3AL.js";
import "./chunk-TEXTBDH7.js";
import "./chunk-N3A2BVTW.js";
import {
  y
} from "./chunk-IGYEHOTB.js";
import "./chunk-TVM3SZJR.js";
import {
  P
} from "./chunk-52HWRRRQ.js";
import "./chunk-VNTEV3V4.js";
import "./chunk-OGOQOMMV.js";
import "./chunk-7Z3AF3B2.js";
import "./chunk-6GWORUT3.js";
import "./chunk-U57T7EQN.js";
import "./chunk-CMHHL5UO.js";
import "./chunk-XHYOFJ4U.js";
import "./chunk-HCYE6OE4.js";
import "./chunk-KJSBBQ22.js";
import {
  a as a3
} from "./chunk-LMEOPAGQ.js";
import "./chunk-YIV2QKTZ.js";
import "./chunk-A3VAC24F.js";
import "./chunk-FPSA4NFH.js";
import "./chunk-UY6B6IVT.js";
import "./chunk-6PV45IYU.js";
import {
  p
} from "./chunk-SRQCQD63.js";
import "./chunk-FIRNXFAH.js";
import {
  z
} from "./chunk-O5TPFXRT.js";
import "./chunk-Q6XRAGMA.js";
import "./chunk-JUAPMINU.js";
import {
  f
} from "./chunk-PK2ZR2SJ.js";
import "./chunk-YFPGM5UE.js";
import "./chunk-OXSERRAR.js";
import "./chunk-7HI4VRVW.js";
import "./chunk-ZX46THLM.js";
import "./chunk-Y2ZIOB7Y.js";
import "./chunk-KTUX3OKX.js";
import "./chunk-E3KEUGUG.js";
import {
  m
} from "./chunk-N3XLUQJI.js";
import {
  a2 as a
} from "./chunk-JUAD7TJ6.js";
import "./chunk-VHLUKPRH.js";
import {
  r
} from "./chunk-5TPMG26T.js";
import "./chunk-3NBBZ43U.js";
import "./chunk-VOLWOTEG.js";
import "./chunk-XTNIDRTB.js";
import "./chunk-FGWIXJQY.js";
import "./chunk-TKYAZCMB.js";
import "./chunk-3TBMFSPB.js";
import "./chunk-PSZLDJJA.js";
import "./chunk-ZWFY3WY5.js";
import {
  I
} from "./chunk-LQFTAGIV.js";
import "./chunk-S7IJH524.js";
import {
  a as a2,
  k
} from "./chunk-GZ2P4SCJ.js";
import {
  i2 as i,
  s
} from "./chunk-XWG6QGFK.js";
import "./chunk-GWNLQRNM.js";
import {
  has
} from "./chunk-FXKORAMT.js";
import "./chunk-GNMFMITH.js";

// node_modules/@arcgis/core/layers/graphics/sources/GeoJSONSource.js
var p7 = class extends p {
  constructor() {
    super(...arguments), this.type = "geojson", this.refresh = k(async (e3) => {
      await this.load();
      const { extent: t2, timeExtent: r2 } = await this._connection.invoke("refresh", e3);
      return this.sourceJSON.extent = t2, r2 && (this.sourceJSON.timeInfo.timeExtent = [r2.start, r2.end]), { dataChanged: true, updates: { extent: this.sourceJSON.extent, timeInfo: this.sourceJSON.timeInfo } };
    });
  }
  load(e3) {
    const t2 = null != e3 ? e3.signal : null;
    return this.addResolvingPromise(this._startWorker(t2)), Promise.resolve(this);
  }
  destroy() {
    this._connection?.close(), this._connection = null;
  }
  applyEdits(e3) {
    return this.load().then(() => this._applyEdits(e3));
  }
  openPorts() {
    return this.load().then(() => this._connection.openPorts());
  }
  queryFeatures(e3, t2 = {}) {
    return this.load(t2).then(() => this._connection.invoke("queryFeatures", e3 ? e3.toJSON() : null, t2)).then((e4) => g.fromJSON(e4));
  }
  queryFeaturesJSON(e3, t2 = {}) {
    return this.load(t2).then(() => this._connection.invoke("queryFeatures", e3 ? e3.toJSON() : null, t2));
  }
  queryFeatureCount(e3, t2 = {}) {
    return this.load(t2).then(() => this._connection.invoke("queryFeatureCount", e3 ? e3.toJSON() : null, t2));
  }
  queryObjectIds(e3, t2 = {}) {
    return this.load(t2).then(() => this._connection.invoke("queryObjectIds", e3 ? e3.toJSON() : null, t2));
  }
  queryExtent(e3, t2 = {}) {
    return this.load(t2).then(() => this._connection.invoke("queryExtent", e3 ? e3.toJSON() : null, t2)).then((e4) => ({ count: e4.count, extent: z.fromJSON(e4.extent) }));
  }
  querySnapping(e3, t2 = {}) {
    return this.load(t2).then(() => this._connection.invoke("querySnapping", e3, t2));
  }
  async queryAttributeBins(e3, t2 = {}) {
    return await this.load(), this._connection.invoke("queryAttributeBins", e3?.toJSON(), t2);
  }
  _applyEdits(e3) {
    if (!this._connection) throw new s("geojson-layer-source:edit-failure", "Memory source not loaded");
    const r2 = this.layer.objectIdField, o = [], s4 = [], i2 = [];
    if (e3.addFeatures) for (const t2 of e3.addFeatures) o.push(this._serializeFeature(t2));
    if (e3.deleteFeatures) for (const t2 of e3.deleteFeatures) "objectId" in t2 && null != t2.objectId ? s4.push(t2.objectId) : "attributes" in t2 && null != t2.attributes[r2] && s4.push(t2.attributes[r2]);
    if (e3.updateFeatures) for (const t2 of e3.updateFeatures) i2.push(this._serializeFeature(t2));
    return this._connection.invoke("applyEdits", { adds: o, updates: i2, deletes: s4 }).then(({ extent: e4, timeExtent: t2, featureEditResults: r3 }) => (this.sourceJSON.extent = e4, t2 && (this.sourceJSON.timeInfo.timeExtent = [t2.start, t2.end]), this._createEditsResult(r3)));
  }
  _createEditsResult(e3) {
    return { addFeatureResults: e3.addResults ? e3.addResults.map(this._createFeatureEditResult, this) : [], updateFeatureResults: e3.updateResults ? e3.updateResults.map(this._createFeatureEditResult, this) : [], deleteFeatureResults: e3.deleteResults ? e3.deleteResults.map(this._createFeatureEditResult, this) : [], addAttachmentResults: [], updateAttachmentResults: [], deleteAttachmentResults: [] };
  }
  _createFeatureEditResult(e3) {
    const r2 = true === e3.success ? null : e3.error || { code: void 0, description: "" };
    return { objectId: e3.objectId, globalId: e3.globalId, error: r2 ? new s("geojson-layer-source:edit-failure", r2.description, { code: r2.code }) : null };
  }
  _serializeFeature(e3) {
    const { attributes: t2 } = e3, r2 = this._geometryForSerialization(e3);
    return r2 ? { geometry: r2.toJSON(), attributes: t2 } : { attributes: t2 };
  }
  _geometryForSerialization(e3) {
    const { geometry: t2 } = e3;
    return null == t2 ? null : "mesh" === t2.type || "extent" === t2.type ? P.fromExtent(t2.extent) : t2;
  }
  async _startWorker(e3) {
    this._connection = await p6("GeoJSONSourceWorker", { strategy: has("feature-layers-workers") ? "dedicated" : "local", signal: e3, registryTarget: this });
    const { fields: t2, spatialReference: r2, hasZ: s4, geometryType: n, objectIdField: a6, url: u3, timeInfo: l3, customParameters: h2 } = this.layer, p8 = "defaults" === this.layer.originOf("spatialReference"), m5 = { url: u3, customParameters: h2, fields: t2 && t2.map((e4) => e4.toJSON()), geometryType: y.toJSON(n), hasZ: s4, objectIdField: a6, timeInfo: l3 ? l3.toJSON() : null, spatialReference: p8 ? null : r2 && r2.toJSON() }, y4 = await this._connection.invoke("load", m5, { signal: e3 });
    for (const i2 of y4.warnings) i.getLogger(this.layer).warn("#load()", `${i2.message} (title: '${this.layer.title || "no title"}', id: '${this.layer.id ?? "no id"}')`, { warning: i2 });
    y4.featureErrors.length && i.getLogger(this.layer).warn("#load()", `Encountered ${y4.featureErrors.length} validation errors while loading features. (title: '${this.layer.title || "no title"}', id: '${this.layer.id ?? "no id"}')`, { errors: y4.featureErrors }), this.sourceJSON = y4.layerDefinition, this.capabilities = y3(this.sourceJSON.hasZ, true);
  }
};
r([m()], p7.prototype, "capabilities", void 0), r([m()], p7.prototype, "type", void 0), r([m({ constructOnly: true })], p7.prototype, "layer", void 0), r([m()], p7.prototype, "sourceJSON", void 0), p7 = r([a("esri.layers.graphics.sources.GeoJSONSource")], p7);

// node_modules/@arcgis/core/layers/GeoJSONLayer.js
var k2 = s3();
var z2 = class extends p4(a4(e(d2(c(p2(c2(e2(t(f2(b(j(S(h))))))))))))) {
  constructor(e3) {
    super(e3), this.attributeTableTemplate = null, this.copyright = null, this.dateFieldsTimeZone = null, this.definitionExpression = null, this.displayField = null, this.editingEnabled = false, this.elevationInfo = null, this.fields = null, this.fieldsIndex = null, this.fullExtent = null, this.geometryType = null, this.hasZ = void 0, this.labelsVisible = true, this.labelingInfo = null, this.legendEnabled = true, this.objectIdField = null, this.operationalLayerType = "GeoJSON", this.outFields = null, this.popupEnabled = true, this.popupTemplate = null, this.screenSizePerspectiveEnabled = true, this.source = new p7({ layer: this }), this.spatialReference = f.WGS84, this.templates = null, this.title = "GeoJSON", this.type = "geojson";
  }
  destroy() {
    this.source?.destroy();
  }
  load(e3) {
    const t2 = this.loadFromPortal({ supportedTypes: ["GeoJson"], supportsData: false }, e3).catch(a2).then(() => this.source.load(e3)).then(() => {
      this.read(this.source.sourceJSON, { origin: "service", url: this.parsedUrl }), this.revert(["objectIdField", "fields", "timeInfo"], "service"), g2(this.renderer, this.fieldsIndex), I3(this.timeInfo, this.fieldsIndex);
    });
    return this.addResolvingPromise(t2), Promise.resolve(this);
  }
  get capabilities() {
    return this.source ? this.source.capabilities : null;
  }
  get createQueryVersion() {
    return this.commitProperty("definitionExpression"), this.commitProperty("timeExtent"), this.commitProperty("timeOffset"), this.commitProperty("geometryType"), this.commitProperty("capabilities"), (this._get("createQueryVersion") || 0) + 1;
  }
  get defaultPopupTemplate() {
    return this.createPopupTemplate();
  }
  get isTable() {
    return this.loaded && null == this.geometryType;
  }
  get parsedUrl() {
    return this.url ? I(this.url) : null;
  }
  set renderer(e3) {
    g2(e3, this.fieldsIndex), this._set("renderer", e3);
  }
  set url(e3) {
    if (!e3) return void this._set("url", e3);
    const t2 = I(e3);
    this._set("url", t2.path), t2.query && (this.customParameters = { ...this.customParameters, ...t2.query });
  }
  async applyEdits(e3, t2) {
    const { applyEdits: r2 } = await import("./editingSupport-PKXMF3HO.js");
    await this.load();
    const i2 = await r2(this, this.source, e3, t2);
    return this.read({ extent: this.source.sourceJSON.extent, timeInfo: this.source.sourceJSON.timeInfo }, { origin: "service", ignoreDefaults: true }), i2;
  }
  on(e3, t2) {
    return super.on(e3, t2);
  }
  createPopupTemplate(e3) {
    return p5(this, e3);
  }
  createQuery() {
    const e3 = new R(), t2 = this.capabilities?.data;
    e3.returnGeometry = true, t2 && t2.supportsZ && (e3.returnZ = true), e3.outFields = ["*"], e3.where = this.definitionExpression || "1=1";
    const { timeOffset: r2, timeExtent: i2 } = this;
    return e3.timeExtent = null != r2 && null != i2 ? i2.offset(-r2.value, r2.unit) : i2 || null, e3;
  }
  getFieldDomain(e3, t2) {
    return this.getField(e3)?.domain;
  }
  getField(e3) {
    return this.fieldsIndex.get(e3);
  }
  queryFeatures(e3, t2) {
    return this.load().then(() => this.source.queryFeatures(R.from(e3) || this.createQuery(), t2)).then((e4) => {
      if (e4?.features) for (const t3 of e4.features) t3.layer = t3.sourceLayer = this;
      return e4;
    });
  }
  queryObjectIds(e3, t2) {
    return this.load().then(() => this.source.queryObjectIds(R.from(e3) || this.createQuery(), t2));
  }
  queryFeatureCount(e3, t2) {
    return this.load().then(() => this.source.queryFeatureCount(R.from(e3) || this.createQuery(), t2));
  }
  queryExtent(e3, t2) {
    return this.load().then(() => this.source.queryExtent(R.from(e3) || this.createQuery(), t2));
  }
  async queryAttributeBins(e3, t2) {
    const { source: r2, capabilities: i2 } = await this.load();
    ae(e3, i2, "GeoJSONLayer");
    const o = await import("./AttributeBinsQuery-B7JIAQBA.js"), s4 = await r2.queryAttributeBins(o.default.from(e3), t2);
    if (s4.features) for (const p8 of s4.features) p8.layer = p8.sourceLayer = this;
    return s4;
  }
  async hasDataChanged() {
    try {
      const { dataChanged: e3, updates: t2 } = await this.source.refresh(this.customParameters);
      return null != t2 && this.read(t2, { origin: "service", url: this.parsedUrl, ignoreDefaults: true }), e3;
    } catch {
    }
    return false;
  }
};
r([m(I2)], z2.prototype, "attributeTableTemplate", void 0), r([m({ readOnly: true, json: { read: false, write: false } })], z2.prototype, "capabilities", null), r([m({ type: String })], z2.prototype, "copyright", void 0), r([m({ readOnly: true })], z2.prototype, "createQueryVersion", null), r([m(a3("dateFieldsTimeReference"))], z2.prototype, "dateFieldsTimeZone", void 0), r([m({ readOnly: true })], z2.prototype, "defaultPopupTemplate", null), r([m({ type: String, json: { name: "layerDefinition.definitionExpression", write: { enabled: true, allowNull: true } } })], z2.prototype, "definitionExpression", void 0), r([m({ type: String })], z2.prototype, "displayField", void 0), r([m({ type: Boolean })], z2.prototype, "editingEnabled", void 0), r([m(m3)], z2.prototype, "elevationInfo", void 0), r([m({ type: [m2], json: { name: "layerDefinition.fields", write: { ignoreOrigin: true, isRequired: true }, origins: { service: { name: "fields" } } } })], z2.prototype, "fields", void 0), r([m(k2.fieldsIndex)], z2.prototype, "fieldsIndex", void 0), r([m({ type: z, json: { name: "extent" } })], z2.prototype, "fullExtent", void 0), r([m({ type: ["point", "polygon", "polyline", "multipoint"], json: { read: { reader: y.read } } })], z2.prototype, "geometryType", void 0), r([m({ type: Boolean })], z2.prototype, "hasZ", void 0), r([m(u)], z2.prototype, "id", void 0), r([m({ type: Boolean, readOnly: true })], z2.prototype, "isTable", null), r([m(p3)], z2.prototype, "labelsVisible", void 0), r([m({ type: [A], json: { name: "layerDefinition.drawingInfo.labelingInfo", read: { reader: l2 }, write: true } })], z2.prototype, "labelingInfo", void 0), r([m(d)], z2.prototype, "legendEnabled", void 0), r([m({ type: ["show", "hide"] })], z2.prototype, "listMode", void 0), r([m({ type: String, json: { name: "layerDefinition.objectIdField", write: { ignoreOrigin: true, isRequired: true }, origins: { service: { name: "objectIdField" } } } })], z2.prototype, "objectIdField", void 0), r([m(w)], z2.prototype, "opacity", void 0), r([m({ type: ["GeoJSON"] })], z2.prototype, "operationalLayerType", void 0), r([m(k2.outFields)], z2.prototype, "outFields", void 0), r([m({ readOnly: true })], z2.prototype, "parsedUrl", null), r([m(l)], z2.prototype, "popupEnabled", void 0), r([m({ type: q, json: { name: "popupInfo", write: true } })], z2.prototype, "popupTemplate", void 0), r([m({ types: m4, json: { name: "layerDefinition.drawingInfo.renderer", write: true, origins: { service: { name: "drawingInfo.renderer" }, "web-scene": { types: u2 } } } })], z2.prototype, "renderer", null), r([m(s2)], z2.prototype, "screenSizePerspectiveEnabled", void 0), r([m({ readOnly: true })], z2.prototype, "source", void 0), r([m({ type: f })], z2.prototype, "spatialReference", void 0), r([m({ type: [a5] })], z2.prototype, "templates", void 0), r([m()], z2.prototype, "title", void 0), r([m({ json: { read: false }, readOnly: true })], z2.prototype, "type", void 0), r([m(y2)], z2.prototype, "url", null), z2 = r([a("esri.layers.GeoJSONLayer")], z2);
var W = z2;
export {
  W as default
};
//# sourceMappingURL=GeoJSONLayer-LCBJMH26.js.map
