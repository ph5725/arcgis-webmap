import {
  C as C6,
  I as I7,
  a as a23,
  a3 as a24,
  b as b10,
  c as c14,
  d2 as d6,
  e as e27,
  e2 as e28,
  e3 as e29,
  f as f13,
  l2 as l17,
  m2 as m13,
  m3 as m14,
  o as o24,
  p as p14,
  p2 as p15,
  p3 as p16,
  s as s20,
  t as t19,
  t2 as t20,
  t3 as t21,
  u as u21,
  w as w4,
  y as y7
} from "./chunk-IKRW63AG.js";
import {
  A as A9,
  E as E10,
  I as I5,
  I2 as I6,
  a as a22,
  b as b9,
  c as c12,
  f as f12,
  g as g9,
  l as l16,
  n as n19,
  p as p13,
  r as r16,
  r2 as r18,
  r3 as r19,
  t as t18,
  te as te3
} from "./chunk-LGKW5DH4.js";
import {
  A as A8,
  R as R3,
  b as b8,
  c as c13,
  d as d5,
  f as f11,
  g as g10,
  it,
  l as l14,
  l4 as l15,
  m as m12,
  n as n18,
  o as o23,
  q as q6,
  r as r17,
  u as u20
} from "./chunk-4KOJY6ZH.js";
import {
  k as k6
} from "./chunk-JCC26E5O.js";
import {
  p as p17
} from "./chunk-QSHBO5XH.js";
import {
  V as V5,
  d as d7
} from "./chunk-UL72MRRE.js";
import {
  T as T3,
  a as a25
} from "./chunk-CNTIXTJY.js";
import {
  S as S5
} from "./chunk-FLRNBMJ3.js";
import "./chunk-LZTYUE2M.js";
import "./chunk-6FVEDEHP.js";
import "./chunk-XFQJH5FF.js";
import {
  s as s19
} from "./chunk-M3GWMAOD.js";
import {
  a as a21,
  p as p12,
  s as s18
} from "./chunk-SLSJWTDB.js";
import "./chunk-PBOUSKLD.js";
import "./chunk-EI2IZ446.js";
import "./chunk-XGNIK5GN.js";
import "./chunk-NGK4G3ZA.js";
import "./chunk-YMLCITSE.js";
import "./chunk-BUMCVHOE.js";
import "./chunk-YSZ4SRX4.js";
import {
  E as E9
} from "./chunk-733XT7D4.js";
import {
  a as a18,
  e as e26,
  f as f9,
  h as h12,
  i as i13,
  m as m11,
  r as r15,
  s as s16,
  u as u18
} from "./chunk-NFOAHFB6.js";
import {
  S as S4,
  a as a20,
  f as f10,
  h as h13,
  l as l12,
  l2 as l13
} from "./chunk-CSNPKNAQ.js";
import {
  o as o22,
  ue
} from "./chunk-4PEDH45I.js";
import {
  B as B3,
  E as E8,
  I as I4,
  Mt,
  U as U4,
  Z as Z3,
  b as b7,
  k as k5,
  lt
} from "./chunk-JSKJKRHP.js";
import {
  a as a19,
  c as c10,
  o as o21,
  s as s17,
  u as u19
} from "./chunk-V4C53BKZ.js";
import "./chunk-67IMFEKD.js";
import "./chunk-PYKMDQYM.js";
import "./chunk-4TMVUEZQ.js";
import "./chunk-JOUWZB2W.js";
import {
  b as b6,
  j as j5
} from "./chunk-VBGMA7VY.js";
import {
  n as n17
} from "./chunk-GDP73BFK.js";
import {
  c as c8,
  e as e25,
  t as t17,
  u as u17
} from "./chunk-LRWR245D.js";
import {
  t as t16
} from "./chunk-5MPGCN36.js";
import "./chunk-5WTH3GBK.js";
import "./chunk-NKOCAN7K.js";
import {
  E as E7
} from "./chunk-VOIQQS36.js";
import {
  e as e24,
  t as t15
} from "./chunk-WUKLWX63.js";
import {
  Y as Y2,
  s as s14
} from "./chunk-ZXFTRGC2.js";
import "./chunk-IWFEA465.js";
import {
  W as W2,
  k as k4
} from "./chunk-RODRBIXX.js";
import {
  A as A7,
  C as C4,
  E as E6,
  F as F3,
  N as N2,
  O as O4,
  P as P5,
  e2 as e21,
  e3 as e23,
  f as f7,
  f2 as f8,
  h as h8,
  h2 as h9,
  h3 as h10,
  i2 as i11,
  k as k3,
  l as l11,
  m as m9,
  m2 as m10,
  n as n13,
  o2 as o18,
  p as p9,
  p2 as p11,
  s as s15,
  v as v3,
  x as x2
} from "./chunk-CWLDBABC.js";
import "./chunk-37WACOMS.js";
import {
  L as L5,
  r as r14
} from "./chunk-SHXYOAIC.js";
import "./chunk-5DVJFLIL.js";
import "./chunk-VRSDJVZH.js";
import {
  O as O3,
  e as e20,
  n as n12
} from "./chunk-B7AMZ4LC.js";
import "./chunk-VLNFWLNQ.js";
import "./chunk-LXEAJGDN.js";
import {
  i as i9
} from "./chunk-F6DB34F6.js";
import "./chunk-TEFCZNLX.js";
import "./chunk-DAJMNP5A.js";
import "./chunk-PJ7AE5BM.js";
import "./chunk-EMBDDCJP.js";
import {
  g as g7,
  h as h11,
  t as t12
} from "./chunk-SMESMUA5.js";
import "./chunk-MDCTPMKN.js";
import {
  n as n14,
  n2 as n15,
  o as o14,
  t as t11
} from "./chunk-KQMSRGRD.js";
import "./chunk-BQVMDMIB.js";
import "./chunk-XLYBLHTD.js";
import "./chunk-4TBDRMZ4.js";
import {
  e as e22,
  f as f5,
  o as o13
} from "./chunk-RS3I6DPK.js";
import "./chunk-756RU7RS.js";
import "./chunk-7UTSKTVG.js";
import {
  B as B2,
  c as c7,
  f as f6,
  g as g6,
  p as p10,
  u as u16
} from "./chunk-56ZY2WLU.js";
import "./chunk-KCTSIZOP.js";
import "./chunk-HSRD3P5Q.js";
import "./chunk-5JV4N5AU.js";
import {
  E as E5,
  J as J2,
  W,
  X,
  a as a17,
  d2 as d4,
  ie,
  n2 as n16,
  o as o16,
  o2 as o17,
  oe,
  t as t13,
  t2 as t14,
  te
} from "./chunk-4XEYVSQH.js";
import "./chunk-XSPND757.js";
import {
  o as o15
} from "./chunk-QY6CN52R.js";
import {
  o2 as o19
} from "./chunk-VT5VIQO4.js";
import "./chunk-4D63UIH5.js";
import "./chunk-ENL2JUSP.js";
import {
  i as i10
} from "./chunk-U3CE4V5Z.js";
import "./chunk-7KQYSRGY.js";
import "./chunk-SJV3HVGJ.js";
import "./chunk-SWINDW7X.js";
import "./chunk-R2HTWJLS.js";
import "./chunk-2ZADANKQ.js";
import "./chunk-MI6QXJMY.js";
import {
  B,
  M as M3,
  h as h7,
  v as v2
} from "./chunk-3GCFO25G.js";
import "./chunk-VEXXJH4E.js";
import "./chunk-4TMSLZIY.js";
import "./chunk-4NFGT2KA.js";
import "./chunk-QPAG77FN.js";
import "./chunk-6FK2OY3E.js";
import "./chunk-US6IOLIT.js";
import "./chunk-6LQLTORF.js";
import "./chunk-FFB32VN7.js";
import "./chunk-WUNNTEK6.js";
import "./chunk-R2Q57RB2.js";
import "./chunk-PEF2Q5HH.js";
import "./chunk-A4KKV2O6.js";
import {
  a as a15,
  c as c6
} from "./chunk-4B62IUNF.js";
import "./chunk-3MVOHROR.js";
import {
  e as e16
} from "./chunk-RVXIJHL6.js";
import "./chunk-QXKZRZ4D.js";
import "./chunk-ILO2YRRS.js";
import {
  s as s13,
  t as t10
} from "./chunk-ZN7Z7TAB.js";
import {
  a2 as a14,
  e as e18,
  r as r12
} from "./chunk-3ECQNGV5.js";
import "./chunk-Q77BGVST.js";
import {
  e as e19
} from "./chunk-TTPBKTNJ.js";
import {
  C as C3,
  S as S2,
  g as g5,
  h as h6,
  i as i8,
  l as l9,
  n as n11,
  o as o12,
  r as r13,
  u as u14,
  w as w3
} from "./chunk-ZPAWXU2P.js";
import "./chunk-KQOOCDUQ.js";
import "./chunk-PP3UNFGS.js";
import "./chunk-FYCLQ3SU.js";
import {
  E as E4,
  T as T2,
  U as U3,
  k as k2
} from "./chunk-BGR5EVZD.js";
import "./chunk-DQG3SJJO.js";
import "./chunk-LWV5GP6V.js";
import "./chunk-QNHQE3IL.js";
import "./chunk-6EOJZ6DP.js";
import "./chunk-DRLVYVHZ.js";
import {
  e as e17
} from "./chunk-UZRZVWLE.js";
import {
  a as a13,
  c as c5,
  p as p8
} from "./chunk-C4ANG4R2.js";
import {
  e as e12
} from "./chunk-GYAK76KG.js";
import "./chunk-KKAHMR7F.js";
import {
  A as A4,
  M as M2,
  O,
  V as V3,
  g as g3,
  l as l7,
  m as m6,
  p as p7,
  q2 as q4
} from "./chunk-RTDWTAVK.js";
import "./chunk-QLJ6JQFC.js";
import "./chunk-BHCIAS6L.js";
import "./chunk-V5G6BYVK.js";
import "./chunk-IMFGC5DS.js";
import {
  h as h5
} from "./chunk-OIO2MYQF.js";
import {
  A as A3,
  U,
  a as a11,
  e as e13,
  f as f3
} from "./chunk-LG4SF54U.js";
import "./chunk-NL6QZ27X.js";
import {
  p as p6,
  u3 as u11
} from "./chunk-6SLEP34Y.js";
import {
  C as C2,
  E as E3,
  L as L3,
  V as V4,
  _ as _4,
  b as b4,
  w as w2
} from "./chunk-DHCIRPC3.js";
import "./chunk-BF6IRMUG.js";
import {
  r as r11
} from "./chunk-24KTNAIE.js";
import {
  i as i6
} from "./chunk-TNKA4BMD.js";
import "./chunk-VKKELZ6R.js";
import {
  m as m7
} from "./chunk-DLD56RZZ.js";
import {
  o as o8,
  t as t5
} from "./chunk-3SJIVSAT.js";
import "./chunk-HXR4TQII.js";
import {
  n as n10
} from "./chunk-SO2VFJCA.js";
import {
  O as O2,
  e as e15,
  i as i7,
  t as t9
} from "./chunk-67CCONUO.js";
import {
  A as A5,
  F as F2,
  I as I3,
  T,
  U as U2,
  d as d3,
  g as g4,
  o as o11,
  t as t8,
  y as y6
} from "./chunk-6DBRCIDV.js";
import {
  m as m8,
  s as s12
} from "./chunk-YSRSL2SU.js";
import "./chunk-FQ4JUVCN.js";
import "./chunk-3LL6ALVC.js";
import {
  e as e10,
  r as r8,
  t as t6
} from "./chunk-NZPABYQQ.js";
import {
  e as e11
} from "./chunk-CCHJ3WNU.js";
import {
  te as te2
} from "./chunk-WKCCXG3E.js";
import "./chunk-ZWJOMK2U.js";
import "./chunk-Y2ZAHGIO.js";
import {
  c as c9,
  i as i12
} from "./chunk-ZCE5HP23.js";
import "./chunk-Y2QTREQA.js";
import "./chunk-OV7XVIQP.js";
import "./chunk-JQSXFLSD.js";
import {
  b2 as b5
} from "./chunk-OFHPFWHF.js";
import {
  f as f4
} from "./chunk-MZJEBIXX.js";
import "./chunk-H5K53FMS.js";
import "./chunk-VNLFNBKT.js";
import {
  a as a6,
  i as i2,
  n as n3,
  y as y3
} from "./chunk-KHEIHGIK.js";
import {
  g,
  j as j2
} from "./chunk-KQZAPZ6K.js";
import "./chunk-UVUJMAAB.js";
import "./chunk-TB5DDCF3.js";
import {
  c as c11
} from "./chunk-5Y3EUPZN.js";
import {
  C as C5,
  g as g8,
  o as o20
} from "./chunk-BDWOUZQR.js";
import "./chunk-H34ENSPL.js";
import {
  A as A6,
  S as S3,
  a as a16,
  u2 as u15
} from "./chunk-H6F6O2KE.js";
import "./chunk-AF3FX2UV.js";
import {
  j as j3,
  n as n9,
  s as s11,
  u as u12
} from "./chunk-DRAQJS2F.js";
import {
  L as L4,
  P as P4,
  R as R2,
  Y
} from "./chunk-BZYXFNL4.js";
import {
  a as a12,
  l as l6,
  n as n8,
  o as o9,
  r as r9,
  s as s10,
  t as t7
} from "./chunk-VNTS5E5O.js";
import {
  A as A2,
  E as E2,
  J,
  N,
  P as P2,
  R,
  _ as _3,
  c as c4,
  e as e9,
  g as g2,
  o as o7,
  p as p5,
  q as q3,
  r as r7,
  s as s9,
  u as u10,
  y as y5
} from "./chunk-TMFB3DKM.js";
import "./chunk-LBC3MAJX.js";
import {
  l as l10
} from "./chunk-H7XUEHGR.js";
import "./chunk-NMP7ZOVG.js";
import "./chunk-YHYQP7QX.js";
import "./chunk-RP7FUW55.js";
import "./chunk-MPV4X4LZ.js";
import "./chunk-2JRCX6DU.js";
import {
  P as P3,
  e as e14,
  j as j4,
  l as l8,
  o as o10,
  q as q5,
  r as r10,
  u as u13,
  v
} from "./chunk-TNW4TPNP.js";
import "./chunk-UG6RJXJ2.js";
import {
  h as h4
} from "./chunk-I6IIPG56.js";
import {
  Z as Z2
} from "./chunk-JEYXDNAT.js";
import {
  n as n6
} from "./chunk-DJJNSAUR.js";
import "./chunk-PZBXBPVO.js";
import "./chunk-TMC6HYGQ.js";
import {
  a as a10,
  i as i5,
  n as n7,
  r as r6,
  s as s8,
  t as t4,
  u as u9
} from "./chunk-7FAVUXK2.js";
import {
  E,
  a as a9,
  m as m5,
  s as s7
} from "./chunk-IVNFIIVI.js";
import {
  i as i4,
  y as y4
} from "./chunk-T4QXFCFF.js";
import "./chunk-BFUOEOXA.js";
import "./chunk-NOGWEW4X.js";
import "./chunk-ZCZERMS4.js";
import "./chunk-7CUBIFKN.js";
import "./chunk-GPMIOMDJ.js";
import "./chunk-RGFH75DR.js";
import "./chunk-FEGY3M6U.js";
import "./chunk-RWRC6JKB.js";
import "./chunk-M6AESODI.js";
import "./chunk-NY6S6EMV.js";
import "./chunk-AQGMTI4V.js";
import "./chunk-QG7JWSBW.js";
import {
  L as L2
} from "./chunk-7NMH5MM5.js";
import "./chunk-TCIXF7MM.js";
import {
  h as h2,
  o as o4
} from "./chunk-UGTICYU7.js";
import "./chunk-3MHRDLQO.js";
import "./chunk-KHRHKYU2.js";
import "./chunk-2IMSGFJN.js";
import "./chunk-VHTQ5H2C.js";
import "./chunk-YX2VTIZR.js";
import {
  d3 as d2,
  j,
  l2 as l5,
  o as o6,
  p as p4
} from "./chunk-LYSDGL5S.js";
import "./chunk-SRJX4QLW.js";
import {
  c as c3,
  t as t3
} from "./chunk-WPTJIN2M.js";
import "./chunk-KUP5BM5G.js";
import "./chunk-HNQNVI5C.js";
import "./chunk-G34OBNLT.js";
import {
  a as a8,
  p as p3
} from "./chunk-WJUYGRZY.js";
import {
  A,
  C,
  F,
  G,
  M,
  V as V2,
  a as a4,
  a2 as a5,
  b as b3,
  e as e5,
  k,
  l as l3,
  m as m4,
  o as o3,
  p,
  q,
  s as s6,
  t as t2,
  u as u6,
  w,
  x
} from "./chunk-FKFXOPPT.js";
import {
  l as l4
} from "./chunk-KE3WBZYL.js";
import "./chunk-EOMIFMDH.js";
import "./chunk-45ILJ6ZH.js";
import "./chunk-VCRP2PLV.js";
import "./chunk-BDLVUYG2.js";
import "./chunk-6QA2BVC5.js";
import "./chunk-HWKQJUGY.js";
import "./chunk-XDCUZFJX.js";
import {
  I as I2,
  c as c2,
  e as e8,
  f as f2,
  h as h3,
  i as i3,
  n as n5,
  o as o5,
  p as p2,
  q as q2
} from "./chunk-DNZK6PPI.js";
import {
  e as e7,
  u as u8
} from "./chunk-7BWCD63N.js";
import "./chunk-65K4DQAH.js";
import {
  e as e4,
  u as u5,
  y as y2
} from "./chunk-MUKDJQWB.js";
import "./chunk-6KFXWKZZ.js";
import {
  _,
  d
} from "./chunk-HPGYEHVI.js";
import "./chunk-YBJ5GVXQ.js";
import "./chunk-X3R5OB6L.js";
import {
  _ as _2,
  a as a7,
  e as e6,
  n as n4,
  r as r5,
  u as u7
} from "./chunk-RACDQ3AL.js";
import "./chunk-TEXTBDH7.js";
import "./chunk-N3A2BVTW.js";
import "./chunk-IGYEHOTB.js";
import "./chunk-TVM3SZJR.js";
import {
  P
} from "./chunk-52HWRRRQ.js";
import "./chunk-VNTEV3V4.js";
import "./chunk-OGOQOMMV.js";
import {
  n as n2
} from "./chunk-7Z3AF3B2.js";
import {
  I,
  m as m3,
  u as u4
} from "./chunk-6GWORUT3.js";
import "./chunk-KJSBBQ22.js";
import "./chunk-LMEOPAGQ.js";
import {
  o as o2
} from "./chunk-YIV2QKTZ.js";
import "./chunk-A3VAC24F.js";
import {
  b as b2,
  h,
  r as r4,
  s as s3
} from "./chunk-FPSA4NFH.js";
import "./chunk-UY6B6IVT.js";
import "./chunk-6PV45IYU.js";
import "./chunk-SRQCQD63.js";
import "./chunk-FIRNXFAH.js";
import {
  z
} from "./chunk-O5TPFXRT.js";
import "./chunk-Q6XRAGMA.js";
import "./chunk-JUAPMINU.js";
import "./chunk-PK2ZR2SJ.js";
import "./chunk-YFPGM5UE.js";
import {
  V,
  Z,
  f,
  s as s4,
  s2 as s5
} from "./chunk-OXSERRAR.js";
import "./chunk-7HI4VRVW.js";
import "./chunk-ZX46THLM.js";
import "./chunk-Y2ZIOB7Y.js";
import "./chunk-KTUX3OKX.js";
import "./chunk-E3KEUGUG.js";
import {
  b,
  e3,
  m as m2
} from "./chunk-N3XLUQJI.js";
import {
  a2
} from "./chunk-JUAD7TJ6.js";
import "./chunk-VHLUKPRH.js";
import {
  r
} from "./chunk-5TPMG26T.js";
import "./chunk-3NBBZ43U.js";
import "./chunk-VOLWOTEG.js";
import "./chunk-XTNIDRTB.js";
import "./chunk-FGWIXJQY.js";
import "./chunk-TKYAZCMB.js";
import "./chunk-3TBMFSPB.js";
import {
  u as u3
} from "./chunk-PSZLDJJA.js";
import "./chunk-ZWFY3WY5.js";
import {
  ot
} from "./chunk-LQFTAGIV.js";
import {
  n,
  u
} from "./chunk-S7IJH524.js";
import {
  S,
  a as a3,
  c3 as c,
  e2,
  l2,
  r2 as r3,
  s as s2,
  t2 as t,
  u2
} from "./chunk-GZ2P4SCJ.js";
import {
  i2 as i,
  l,
  s
} from "./chunk-XWG6QGFK.js";
import {
  a
} from "./chunk-GWNLQRNM.js";
import {
  L,
  e,
  has,
  m2 as m,
  o2 as o,
  r2,
  y2 as y
} from "./chunk-FXKORAMT.js";
import "./chunk-GNMFMITH.js";

// node_modules/@arcgis/core/views/3d/layers/graphics/polygonUtils.js
function l18(e37, r29, o28) {
  const a33 = (r29.length > 0 ? r29[0] : e37.length / 3) - 1, s26 = c5(e37, a33, o28);
  if (s26 !== n2.Z) {
    e37 = e37.slice();
    for (let t29 = 0; t29 < e37.length; t29 += 3) e37[t29 + s26] = e37[t29 + 2];
  }
  return e12(e37, r29, 3);
}
function m15(t29) {
  const e37 = [[e17.POSITION, new t10(t29.attributeData.position, t29.indices, 3, true)]], r29 = U(t29.indices.length);
  return null != t29.attributeData.colorFeature ? e37.push([e17.COLORFEATUREATTRIBUTE, new t10([t29.attributeData.colorFeature], r29, 1, true)]) : t29.attributeData.color && e37.push([e17.COLOR, new t10(t29.attributeData.color, r29, 4, true)]), t29.attributeData.uvMapSpace && e37.push([e17.UVMAPSPACE, new t10(t29.attributeData.uvMapSpace, t29.indices, 4, true)]), t29.attributeData.boundingRect && e37.push([e17.BOUNDINGRECT, new t10(t29.attributeData.boundingRect, t29.indices, 9, true)]), new p9(t29.material, e37, t29.mapPositions, n13.Mesh, t29.attributeData.objectAndLayerIdColor);
}
function p18(t29, e37 = null) {
  const r29 = [[e17.POSITION, new t10(t29.attributeData.position, t29.indices, 3, true)], [e17.UV0, new t10(t29.attributeData.uv0, t29.indices, 2, true)]];
  return new p9(t29.material, r29, t29.mapPositions, n13.Mesh, e37);
}
function b11(t29) {
  switch (t29.type) {
    case "extent":
      if (t29 instanceof z) return P.fromExtent(t29);
      break;
    case "polygon":
      return t29;
  }
  return null;
}
var g11 = class {
  constructor(t29, e37, r29) {
    this.renderData = t29, this.layerViewUid = e37, this.graphicUid = r29, this.outGeometries = new Array();
  }
};

// node_modules/@arcgis/core/views/3d/support/renderInfoUtils/polygon.js
function p19(o28, n29, r29, p23) {
  const c25 = a13(o28.rings, !!o28.hasZ && "on-the-ground" !== p23.mode, p8.CCW_IS_HOLE, o28.spatialReference), a33 = t2(c25.position.length), h23 = u20(c25.position, o28.spatialReference, 0, a33, 0, c25.position, 0, c25.position.length / 3, n29, r29, p23), m21 = null != h23;
  return new g12(c25.position, a33, u22(c25.polygons, c25.position, a33), l19(c25.outlines, c25.position, a33), m21, h23);
}
function c15(t29, n29) {
  const e37 = a13(t29.rings, false, p8.CCW_IS_HOLE), p23 = o4(e37.position, t29.spatialReference, 0, e37.position, n29, 0);
  for (let o28 = 2; o28 < e37.position.length; o28 += 3) e37.position[o28] = te3;
  return { position: e37.position, polygons: u22(e37.polygons, e37.position), outlines: l19(e37.outlines, e37.position), projectionSuccess: p23 };
}
function l19(o28, t29, s26 = null) {
  return o28.filter(({ count: o29 }) => o29 > 1).map(({ index: o29, count: i18 }) => {
    const e37 = 3 * o29, r29 = 3 * i18;
    return null != s26 ? new h14(o29, i18, a4(t29, e37, r29), a4(s26, e37, r29)) : new a26(o29, i18, a4(t29, e37, r29));
  });
}
function u22(o28, t29, s26 = null) {
  const i18 = new Array();
  for (const { index: e37, count: r29, holeIndices: p23, pathLengths: c25 } of o28) {
    if (r29 <= 1) continue;
    const o29 = 3 * e37, l28 = 3 * r29, u31 = p23.map((o30) => o30 - e37), a33 = null != s26 ? new m16(e37, r29, a4(t29, 3 * e37, 3 * r29), a4(s26, o29, l28), u31, c25) : new f14(e37, r29, a4(t29, 3 * e37, 3 * r29), u31, c25);
    i18.push(a33);
  }
  return i18;
}
var a26 = class {
  constructor(o28, t29, n29) {
    this.index = o28, this.count = t29, this.position = n29;
  }
};
var h14 = class extends a26 {
  constructor(o28, t29, n29, s26) {
    super(o28, t29, n29), this.mapPositions = s26;
  }
};
var m16 = class extends h14 {
  constructor(o28, t29, n29, s26, i18, e37) {
    super(o28, t29, n29, s26), this.holeIndices = i18, this.pathLengths = e37;
  }
};
var f14 = class extends a26 {
  constructor(o28, t29, n29, s26, i18) {
    super(o28, t29, n29), this.holeIndices = s26, this.pathLengths = i18;
  }
};
var g12 = class {
  constructor(o28, t29, n29, s26, i18, e37) {
    this.position = o28, this.mapPositions = t29, this.polygons = n29, this.outlines = s26, this.projectionSuccess = i18, this.sampledElevation = e37;
  }
};

// node_modules/@arcgis/core/views/3d/layers/graphics/Graphics3DExtrudeSymbolLayer.js
var ot2 = ["polygon", "extent"];
var st = class extends y7 {
  constructor(t29, e37, r29, o28) {
    super(t29, e37, r29, o28, xt(e37)), this.ensureDrapedStatus(false);
  }
  async doLoad() {
    if (!this._drivenProperties.size) {
      const t30 = I4(this._getSymbolSize());
      if (t30) throw new s("graphics3dextrudesymbollayer:invalid-size", t30);
    }
    const t29 = this.symbolLayer, r29 = t29?.material, o28 = r29?.color, s26 = this._getCombinedOpacityAndColor(o28), i18 = u7(s26), n29 = s26[3], a33 = this.needsDrivenTransparentPass, l28 = r29?.emissive, c25 = { usePBR: this._context.physicalBasedRenderingEnabled, isSchematic: true, diffuse: i18, ambient: i18, opacity: n29, drivenOpacity: a33, hasVertexColors: true, hasSlicePlane: this._context.slicePlaneEnabled, castShadows: t29.castShadows, emissiveStrength: l28?.strength ?? 0, emissiveSource: a8.Color, offsetTransparentBackfaces: true, normalType: a14.Compressed }, m21 = new W2(c25, this._context);
    m21.setParameters({ cullFace: m21.transparent ? e15.None : e15.Back });
    const p23 = new W2({ ...c25, cullFace: e15.Back }, this._context);
    this._materials[Mt2.Main] = m21, this._materials[Mt2.Bottom] = p23;
  }
  destroy() {
    super.destroy(), this._materials.length = 0;
  }
  createGraphics3DGraphic(t29) {
    const e37 = t29.graphic;
    if (!this._validateGeometry(e37.geometry, ot2, this.symbolLayer.type)) return null;
    const r29 = this._getVertexOpacityAndColor(t29.renderingInfo, this._getFallbackOpacityAndColor(), 255), o28 = this.setGraphicElevationContext(e37);
    return this._createAs3DShape(e37, t29.renderingInfo, r29, o28, e37.uid);
  }
  layerOpacityChanged(t29, e37) {
    const r29 = this.symbolLayer?.material?.color, o28 = this._getCombinedOpacity(r29);
    this._materials[Mt2.Main]?.setParameters({ opacity: o28 }), this._materials[Mt2.Bottom]?.setParameters({ opacity: o28 });
    const s26 = this._getLayerOpacity();
    t29?.forEach((t30) => e37(t30)?.layerOpacityChanged(s26, this._context.isAsync));
  }
  layerElevationInfoChanged(t29, e37) {
    return this.updateGraphics3DGraphicElevationInfo(t29, e37, g10);
  }
  slicePlaneEnabledChanged(t29, e37) {
    return this._materials[Mt2.Main]?.setParameters({ hasSlicePlane: this._context.slicePlaneEnabled }), this._materials[Mt2.Bottom]?.setParameters({ hasSlicePlane: this._context.slicePlaneEnabled }), t29?.forEach((t30) => {
      const r29 = e37(t30);
      null != r29 && r29.slicePlaneEnabledChanged(this._context.slicePlaneEnabled, this._context.isAsync);
    }), true;
  }
  physicalBasedRenderingChanged() {
    const t29 = { usePBR: this._context.physicalBasedRenderingEnabled, isSchematic: true };
    return this._materials[Mt2.Main]?.setParameters(t29), this._materials[Mt2.Bottom]?.setParameters(t29), true;
  }
  _getExtrusionSize(t29) {
    let e37;
    return e37 = t29.size && this._drivenProperties.size ? a23(t29.size, 2) ?? 0 : this._getSymbolSize(), e37 /= this._context.renderCoordsHelper.unitInMeters, e37;
  }
  applyRendererDiff(t29, e37) {
    return this._drivenPropertiesChanged(e37) ? e29.RecreateSymbol : e29.RecreateGraphics;
  }
  async queryForSnapping(t29, e37, s26, i18) {
    const n29 = this._getExtrusionSize(s26) * this._context.renderCoordsHelper.unitInMeters / V(e37), { objectId: a33, target: l28 } = t29, c25 = a(l28);
    switch (c25.z = (c25.z ?? 0) + n29, t29.type) {
      case "edge": {
        const { start: e38, end: o28 } = t29, s27 = a(e38), i19 = a(o28);
        return s27.z = (s27.z ?? 0) + n29, i19.z = (i19.z ?? 0) + n29, [e24(a33, c25, 1 / 0, s27, i19)];
      }
      case "vertex":
        return [t15(a33, c25, 1 / 0), e24(a33, l28, 1 / 0, l28, c25)];
      default:
        return [];
    }
  }
  _getSymbolSize() {
    return this.symbolLayer.size ?? 1;
  }
  _createAs3DShape(t29, e37, r29, o28, l28) {
    const m21 = b11(t29.geometry);
    if (null == m21) return null;
    if (0 === m21.rings.length || !m21.rings.some((t30) => t30.length > 0)) return this._logGeometryValidationWarnings(m21.rings, "rings", "ExtrudeSymbol3DLayer"), null;
    const p23 = p19(m21, this._context.elevationProvider, this._context.renderCoordsHelper, o28);
    this._logGeometryCreationWarnings(p23, m21.rings, "rings", "ExtrudeSymbol3DLayer");
    const h23 = b7(m21);
    if (null == h23) return null;
    const g17 = new Array(), d14 = new Array(), u31 = u6(), f22 = e10(), y15 = n4(), _10 = this._context.renderCoordsHelper.viewingMode === l10.Global;
    _10 || this._context.renderCoordsHelper.worldUpAtPosition(null, y15), m7(m21.spatialReference, [h23.x, h23.y, 0], f22, this._context.renderCoordsHelper.spatialReference);
    const C11 = e10();
    h3(C11, f22);
    const v7 = e11();
    j3(v7, C11);
    const { polygons: I15, mapPositions: A14, position: M7 } = p23, z6 = /* @__PURE__ */ new Map(), D6 = this._materials[Mt2.Main];
    for (const i18 of I15) {
      const t30 = i18.count;
      if (this._context.clippingExtent && (m4(i18.mapPositions, u31), !A(u31, this._context.clippingExtent))) continue;
      const o29 = e12(i18.mapPositions, i18.holeIndices, 3);
      if (0 === o29.length) continue;
      const n29 = o29.length, a33 = 6 * t30, c25 = f3(a33 + n29), m22 = f3(n29), p24 = t2(3 * a33), h24 = t2(3 * a33), b17 = t2(3 * a33), x8 = t2(a33);
      nt(M7, A14, o29, i18, p24, b17, h24, x8, c25, m22, this._getExtrusionSize(e37), y15, _10), r11(p24, p24, C11);
      const S12 = this._context.stage.renderView.getObjectAndLayerIdColor({ graphicUid: l28, layerViewUid: this._context.layerViewUid }), v8 = new Lt(p24, b17, c8(h24), x8), I16 = it2(D6, c25, c25.length - m22.length, v8, r29, S12), L10 = t30, B7 = t30, R10 = 2 * i18.count, U10 = new Bt(L10, B7, R10, n29 / 3);
      _t(I16, U10, f22), z6.set(I16, U10), g17.push(I16, it2(this._materials[Mt2.Bottom], m22, 0, v8, r29, S12)), d14.push(v8.heights);
    }
    if (0 === g17.length) return null;
    const G4 = new A8({ geometries: g17, layerViewUid: this._context.layerViewUid, graphicUid: l28, isElevationSource: true });
    G4.transformation = f22;
    const T9 = a15(this.symbolLayer, { opacity: this._getLayerOpacity() }), k13 = T9 ? new m13(this._materials[Mt2.Main], T9, this._context.slicePlaneEnabled) : null, H6 = new p15(this, G4, null, (t30, e38, r30, o29, s26) => bt(t30, e38, r30, o29, s26, d14, z6), o28, k13);
    return H6.alignedSampledElevation = p23.sampledElevation, H6.needsElevationUpdates = g10(o28.mode), H6;
  }
  _getFallbackOpacityAndColor() {
    const e37 = this.symbolLayer?.material?.color;
    return l4.toUnitRGBA(e37) ?? a10;
  }
};
function it2(t29, e37, r29, o28, s26, i18) {
  const n29 = U(e37.length), a33 = [[e17.POSITION, new t10(o28.positions, e37, 3, true)], [e17.NORMALCOMPRESSED, new t10(o28.normals, e37, 2, true)], [e17.COLOR, new t10(s26, n29, 4, true)]];
  return new p9(t29, a33, o28.elevation, n13.Mesh, i18, r29);
}
function nt(t29, e37, r29, o28, s26, i18, n29, a33, l28, c25, m21, p23, h23) {
  const g17 = r29.length / 3;
  let d14 = 2 * o28.count;
  at(t29, e37, o28.index, o28.count, r29, 0, g17, s26, i18, n29, a33, l28, c25, d14, m21, p23, h23);
  let u31 = 0, f22 = 2 * o28.count;
  d14 = 0;
  const y15 = o28.pathLengths[0];
  mt(s26, i18, a33, n29, u31, y15, o28.count, f22, l28, d14, m21), f22 += 4 * y15, d14 += 2 * y15, u31 += y15;
  for (let b17 = 1; b17 < o28.pathLengths.length; ++b17) {
    const t30 = o28.pathLengths[b17];
    mt(s26, i18, a33, n29, u31, t30, o28.count, f22, l28, d14, m21), f22 += 4 * t30, d14 += 2 * t30, u31 += t30;
  }
}
function at(t29, e37, r29, o28, s26, i18, n29, a33, l28, c25, m21, p23, h23, g17, f22, y15, b17) {
  s9(jt, y15), l28 ??= [], c25 ??= [], m21 ??= [];
  const _10 = f22 > 0 ? 1 : -1;
  let x8 = 3 * r29, S12 = 0, j10 = 3 * S12, P11 = o28, w11 = 3 * P11;
  for (let u31 = 0; u31 < o28; ++u31) {
    const r30 = t29[x8], o29 = t29[x8 + 1], s27 = t29[x8 + 2];
    b17 && (jt[0] = r30, jt[1] = o29, jt[2] = s27, A2(jt, jt)), a33[j10 + 0] = r30, a33[j10 + 1] = o29, a33[j10 + 2] = s27;
    const i19 = e37[x8 + 0], n30 = e37[x8 + 1], p24 = e37[x8 + 2];
    l28[j10 + 0] = i19, l28[j10 + 1] = n30, l28[j10 + 2] = p24, c25[j10 + 0] = -_10 * jt[0], c25[j10 + 1] = -_10 * jt[1], c25[j10 + 2] = -_10 * jt[2], m21[S12] = 0, a33[w11 + 0] = r30 + f22 * jt[0], a33[w11 + 1] = o29 + f22 * jt[1], a33[w11 + 2] = s27 + f22 * jt[2], l28[w11 + 0] = i19, l28[w11 + 1] = n30, l28[w11 + 2] = p24, m21[P11] = f22, j10 += 3, w11 += 3, x8 += 3, S12 += 1, P11 += 1;
  }
  x8 = 3 * i18, j10 = 0, w11 = 3 * g17;
  const O7 = f22 < 0 ? Ot : wt, C11 = f22 < 0 ? wt : Ot;
  for (let d14 = 0; d14 < n29; ++d14) h23[j10] = s26[x8 + O7[0]], h23[j10 + 1] = s26[x8 + O7[1]], h23[j10 + 2] = s26[x8 + O7[2]], p23[w11] = s26[x8 + C11[0]] + o28, p23[w11 + 1] = s26[x8 + C11[1]] + o28, p23[w11 + 2] = s26[x8 + C11[2]] + o28, j10 += 3, w11 += 3, x8 += 3;
}
function lt2(t29, e37, r29, o28, s26, i18, n29) {
  o28[i18] = o28[n29], n29 *= 3, t29[i18 *= 3] = t29[n29], t29[i18 + 1] = t29[n29 + 1], t29[i18 + 2] = t29[n29 + 2], e37[i18] = e37[n29], e37[i18 + 1] = e37[n29 + 1], e37[i18 + 2] = e37[n29 + 2], r29[i18] = s26[0], r29[i18 + 1] = s26[1], r29[i18 + 2] = s26[2];
}
var ct = n4();
function mt(t29, e37, r29, o28, s26, i18, n29, a33, l28, c25, m21) {
  e37 ??= [], r29 ??= [], o28 ??= [];
  let p23 = s26, h23 = s26 + 1, g17 = s26 + n29, d14 = s26 + n29 + 1, u31 = a33, f22 = a33 + 1, y15 = a33 + 2 * i18, b17 = a33 + 2 * i18 + 1;
  m21 < 0 && (p23 = s26 + n29 + 1, d14 = s26);
  let _10 = 3 * c25;
  for (let x8 = 0; x8 < i18; ++x8) x8 === i18 - 1 && (h23 = s26, m21 > 0 ? d14 = s26 + n29 : p23 = s26 + n29), ft(t29, p23, h23, g17, ct), lt2(t29, e37, o28, r29, ct, u31, p23), lt2(t29, e37, o28, r29, ct, f22, h23), lt2(t29, e37, o28, r29, ct, y15, g17), lt2(t29, e37, o28, r29, ct, b17, d14), l28[_10] = u31, l28[_10 + 1] = y15, l28[_10 + 2] = b17, l28[_10 + 3] = u31, l28[_10 + 4] = b17, l28[_10 + 5] = f22, _10 += 6, p23++, h23++, g17++, d14++, u31 += 2, f22 += 2, y15 += 2, b17 += 2;
}
var pt = n4();
var ht = n4();
var gt = n4();
var dt = n4();
var ut = n4();
function ft(t29, e37, r29, o28, s26) {
  e37 *= 3, r29 *= 3, o28 *= 3, o7(pt, t29[e37++], t29[e37++], t29[e37++]), o7(ht, t29[r29++], t29[r29++], t29[r29++]), o7(gt, t29[o28++], t29[o28++], t29[o28++]), c4(dt, ht, pt), c4(ut, gt, pt), _3(s26, ut, dt), A2(s26, s26);
}
var yt = n4();
function bt(t29, e37, r29, o28, s26, i18, n29) {
  const a33 = t29.stageObject, h23 = a33.geometries, g17 = h23.length, d14 = "absolute-height" !== e37.mode;
  let u31 = 0;
  const f22 = a33.transformation, y15 = e8(e10(), f22);
  for (let l28 = 0; l28 < g17; l28 += 2) {
    const t30 = h23[l28];
    if (!e28(t30)) continue;
    const e38 = t30.getMutableAttribute(e17.POSITION).data, c25 = i18[l28 / 2], g18 = new r17(t30.mapPositions), b17 = e38.length / 3;
    let _10 = false, x8 = 0;
    {
      let t31 = 0;
      for (let i19 = 0; i19 < b17; i19++) {
        yt[0] = e38[t31], yt[1] = e38[t31 + 1], yt[2] = e38[t31 + 2], o28(g18, Pt), d14 && (x8 += Pt.sampledElevation), t13.TESTS_DISABLE_OPTIMIZATIONS ? (o7(St, g18.array[g18.offset], g18.array[g18.offset + 1], Pt.z + c25[t31 / 3]), null != r29 && s26.toRenderCoords(St, r29, St), E2(St, St, y15)) : (o7(St, e38[t31], e38[t31 + 1], e38[t31 + 2]), E2(St, St, f22), s26.setAltitude(St, Pt.z + c25[t31 / 3]), E2(St, St, y15)), e38[t31] = St[0], e38[t31 + 1] = St[1], e38[t31 + 2] = St[2];
        const i20 = Ct / s26.unitInMeters;
        (Math.abs(yt[0] - e38[t31]) >= i20 || Math.abs(yt[1] - e38[t31 + 1]) >= i20 || Math.abs(yt[2] - e38[t31 + 2]) >= i20) && (_10 = true), g18.offset += 3, t31 += 3;
      }
    }
    if (_10) {
      const e39 = n29.get(t30);
      e39 && _t(t30, e39, f22), a33.geometryVertexAttributeUpdated(h23[l28], e17.NORMALCOMPRESSED), t30.invalidateBoundingInfo(), a33.geometryVertexAttributeUpdated(h23[l28], e17.POSITION), h23[l28 + 1].invalidateBoundingInfo(), a33.geometryVertexAttributeUpdated(h23[l28 + 1], e17.POSITION);
    }
    u31 += x8 / b17;
  }
  return u31 / g17;
}
function _t(t29, e37, r29) {
  const o28 = t29.getMutableAttribute(e17.POSITION), s26 = t29.getMutableAttribute(e17.NORMALCOMPRESSED).data, { topVertexStart: i18, topVertexCount: n29, topFaceStart: a33, topFaceCount: l28 } = e37, c25 = o28.data, u31 = n29, f22 = t29.attributes.get(e17.POSITION).indices, y15 = a33 + l28, b17 = i18 + n29, _10 = t2(3 * u31);
  for (let m21 = 0; m21 < u31; ++m21) {
    const t30 = 3 * m21;
    _10[t30 + 0] = 0, _10[t30 + 1] = 0, _10[t30 + 2] = 0;
  }
  const x8 = Et, S12 = vt, j10 = It, P11 = At, O7 = jt;
  for (let w11 = a33; w11 < y15; ++w11) {
    const t30 = 3 * w11;
    for (let e38 = 0; e38 < 3; ++e38) {
      const o29 = f22[t30 + e38];
      P11[e38] = o29;
      const s27 = 3 * o29;
      o7(St, c25[s27 + 0], c25[s27 + 1], c25[s27 + 2]), E2(x8[e38], St, r29);
    }
    R(S12, x8[1], x8[0]), R(j10, x8[2], x8[0]), _3(O7, S12, j10), A2(O7, O7);
    for (let e38 = 0; e38 < 3; ++e38) {
      const t31 = 3 * (P11[e38] - i18);
      _10[t31 + 0] += O7[0], _10[t31 + 1] += O7[1], _10[t31 + 2] += O7[2];
    }
  }
  for (let m21 = i18; m21 < b17; ++m21) {
    const t30 = 3 * (m21 - i18), e38 = _10[t30 + 0], r30 = _10[t30 + 1], o29 = _10[t30 + 2], n30 = Math.sqrt(e38 * e38 + r30 * r30 + o29 * o29);
    e25(s26, m21, e38 / n30, r30 / n30, o29 / n30);
  }
}
function xt(t29) {
  return 1 === (t29.material?.color?.a ?? 1);
}
var St = n4();
var jt = n4();
var Pt = new R3();
var wt = [0, 2, 1];
var Ot = [0, 1, 2];
var Ct = 0.01;
var Et = [n4(), n4(), n4()];
var vt = n4();
var It = n4();
var At = [0, 0, 0];
var Mt2;
!function(t29) {
  t29[t29.Main = 0] = "Main", t29[t29.Bottom = 1] = "Bottom";
}(Mt2 || (Mt2 = {}));
var Lt = class {
  constructor(t29, e37, r29, o28) {
    this.positions = t29, this.elevation = e37, this.normals = r29, this.heights = o28;
  }
};
var Bt = class {
  constructor(t29, e37, r29, o28) {
    this.topVertexStart = t29, this.topVertexCount = e37, this.topFaceStart = r29, this.topFaceCount = o28;
  }
};

// node_modules/@arcgis/core/views/3d/layers/graphics/focusAreaStyle.js
var t22 = 0.42;
var r20 = 0.32;
function c16(c25, n29) {
  if (c25) switch (n29) {
    case "bright": {
      const t29 = (c25[0] + c25[1] + c25[2]) / 3;
      return [t29 * r20 + (1 - r20), t29 * r20 + (1 - r20), t29 * r20 + (1 - r20), c25[3] * r20];
    }
    case "dark":
      return [c25[0] * t22, c25[1] * t22, c25[2] * t22, c25[3] * t22];
  }
}

// node_modules/@arcgis/core/views/3d/layers/graphics/Graphics3DDrapedGraphicLayer.js
var l20 = class {
  constructor(e37, t29, r29, i18) {
    this.graphics3DSymbolLayer = e37, this.renderGeometries = t29, this.boundingBox = r29, this._drapeSourceRenderer = i18, this.type = "draped", this._visible = false, this._addedToStage = false, this.isElevationSource = false;
  }
  initialize(e37) {
    this.stage = e37.stage;
  }
  get usedMemory() {
    return this.graphics3DSymbolLayer.usedMemory;
  }
  setVisibility(e37) {
    if (null != this.stage && this._visible !== e37) {
      if (this._visible = e37, e37 && !this._addedToStage) return this._addedToStage = true, void this._drapeSourceRenderer.addGeometries(this.renderGeometries, E10.ADD);
      if (e37 || this._addedToStage) {
        for (const e38 of this.renderGeometries) e38.visible = this._visible;
        this._drapeSourceRenderer.modifyGeometries(this.renderGeometries, I5.VISIBILITY);
      }
    }
  }
  destroy() {
    this.stage && this._addedToStage && this._drapeSourceRenderer.removeGeometries(this.renderGeometries, E10.REMOVE), this._addedToStage = false, this._visible = false, this.stage = null;
  }
  getCenterObjectSpace(r29 = n4()) {
    return o7(r29, 0, 0, 0);
  }
  getBoundingBoxObjectSpace(e37 = u6()) {
    return q(e37);
  }
  addObjectState(e37) {
    e37.stateType === t9.Highlight && (this.renderGeometries.forEach((t29) => {
      const r29 = t29.geometry.allocateIdAndHighlight(e37.highlightName);
      e37.addRenderGeometry(t29, r29, this);
    }), this._addedToStage && this._drapeSourceRenderer.modifyGeometries(this.renderGeometries, I5.HIGHLIGHT));
  }
  removeObjectState(e37) {
    this.renderGeometries.forEach((t29) => e37.removeByObject(t29));
  }
  updateHighlights(e37) {
  }
  removeRenderGeometryObjectState(e37, t29) {
    t29.channel === t9.Highlight && (e37.geometry.removeHighlight(t29), this._addedToStage && this._drapeSourceRenderer.modifyGeometries([e37], I5.HIGHLIGHT));
  }
  computeAttachmentOrigin(e37) {
    for (const t29 of this.renderGeometries) t29.geometry.computeAttachmentOrigin(y8) && (e37.draped.origin[0] += y8[0], e37.draped.origin[1] += y8[1], e37.draped.num++);
  }
  async getProjectedBoundingBox(e37, t29, r29, d14, n29) {
    q(n29);
    for (let i18 = 0; i18 < this.renderGeometries.length; i18++) {
      const t30 = this.renderGeometries[i18];
      this._getRenderGeometryProjectedBoundingRect(t30, e37, u23, r29), x(n29, u23);
    }
    if (t29) {
      let e38;
      b3(n29, y8);
      const r30 = E8(n29, t29.service.spatialReference, t29);
      try {
        e38 = await t29.service.queryElevation(y8[0], y8[1], d14, r30, "ground");
      } catch (a33) {
      }
      null != e38 && (n29[2] = Math.min(n29[2], e38), n29[5] = Math.max(n29[5], e38));
    }
    return n29;
  }
  _getRenderGeometryProjectedBoundingRect(e37, t29, r29, i18) {
    if (this.boundingBox) k(p20, this.boundingBox);
    else {
      const t30 = e37.boundingSphere, r30 = t30[3];
      p20[0] = t30[0] - r30, p20[1] = t30[1] - r30, p20[2] = t30[2] - r30, p20[3] = t30[0] + r30, p20[4] = t30[1] + r30, p20[5] = t30[2] + r30;
    }
    return t29(p20, 0, 2), this.calculateRelativeScreenBounds && i18.push({ location: b3(p20), screenSpaceBoundingRect: this.calculateRelativeScreenBounds() }), w(p20, r29);
  }
};
var u23 = u4();
var p20 = u6();
var y8 = n4();

// node_modules/@arcgis/core/views/3d/layers/graphics/Graphics3DIconSymbolLayer.js
var ne = r5(0, 0, 1);
var le = 16;
var ce = 1.5;
var he = [a19 * o21, a19 * o21];
var _ue = class _ue extends y7 {
  getCachedSize() {
    return { size: this._getIconSize() };
  }
  constructor(e37, t29, r29, i18) {
    super(e37, t29, r29, i18, ge(t29)), this._cimData = null, this._overrideHelperClass = null, this._arcadeInfo = null, this._cimSymbolMaterials = /* @__PURE__ */ new Map(), this._cimSymbolTextures = /* @__PURE__ */ new Map(), this._cimMaterialParametersInfo = null, this._cimScaleFactorOrFunction = null, this._size = null, this._symbolTextureRatio = 1, this._outlineSize = 0, this._textureHandle = null, this._patchTask = null, this._elevationOptions = { supportsOffsetAdjustment: true, supportsOnTheGround: true };
  }
  async doLoad(e37) {
    this._validateOrThrow();
    const t29 = this._prepareMaterialParameters(), r29 = this._getPrimitive();
    if (null != r29) this._prepareResourcesPrimitive(t29, r29);
    else {
      const r30 = b5(this.symbolLayer), i18 = pe(r30);
      null != i18 ? await this._prepareResourcesCIM(t29, JSON.parse(i18), e37) : await this._prepareResourcesHref(t29, r30, e37);
    }
  }
  _validateOrThrow() {
    if (this._drivenProperties.size) return;
    const e37 = I4(this._getIconSize());
    if (e37) throw new s("graphics3diconsymbollayer:invalid-size", e37);
  }
  _getIconSize() {
    const e37 = this.symbolLayer, t29 = Math.round(null != e37.size ? u5(e37.size) : le);
    return this._drivenProperties.size ? Math.max(t29, 64) : t29;
  }
  _generateTextureCIM(e37, t29) {
    const r29 = this._overrideHelperClass;
    let i18 = this._cimData;
    if (r29 && i18 && i18.symbol || this.logger.error("Can't create texture, CIM data is undefined"), i18.primitiveOverrides) {
      i18 = a(i18);
      const o29 = i18.primitiveOverrides;
      r29.evaluateOverrides(o29, e37, this._arcadeInfo.geometryType, null, null, t29.layer.fieldsIndex), r29.applyOverrides(i18.symbol, o29);
    }
    const o28 = l(JSON.stringify(i18));
    let a33 = this._cimSymbolTextures.get(o28);
    if (a33) return a33;
    const n29 = this._context.sharedResources.cimSymbolRasterizer, l28 = this._context.renderer && "dictionary" === this._context.renderer.type ? this._context.renderer.fieldMap : null;
    l28 && r29.applyDictionaryTextOverrides(i18.symbol, e37, l28, null);
    const c25 = null != this._cimScaleFactorOrFunction ? n6(this._cimScaleFactorOrFunction, e37) : 1;
    1 !== c25 && i18.symbol && f4(i18.symbol, c25, true);
    const h23 = te2.getEnvelope(i18, null, n29.resourceManager);
    if (h23?.width && h23.height) {
      const e38 = h23.x + h23.width / 2, t30 = h23.y + h23.height / 2, r30 = n29.rasterize({ type: "cim", data: i18 }, h23.width, h23.height, e38, t30, 1, "esriGeometryPoint", 0, null, this._context.graphicsCoreOwner.view.state.rasterPixelRatio), s26 = new p4({ x: -h23.x / h23.width - 0.5, y: (h23.height + h23.y) / h23.height - 0.5 });
      this._cimMaterialParametersInfo.anchorPosition = _e("relative", s26), a33 = new L5(r30, { width: r30?.width ?? 1, height: r30?.height ?? 1, reloadable: true });
    } else a33 = new L5(new ImageData(1, 1), { width: 1, height: 1, reloadable: true });
    return this._cimSymbolTextures.set(o28, a33), this._context.stage.addTexture(a33), a33;
  }
  _prepareMaterialParameters() {
    const e37 = { anchorPosition: _e(this.symbolLayer.anchor, this.symbolLayer.anchorPosition), rotation: this.symbolLayer.angle }, t29 = this.symbol;
    if (me(t29)) {
      const { screenLength: r30, minWorldLength: i18, maxWorldLength: s26 } = t29.verticalOffset;
      e37.verticalOffset = { screenLength: u5(r30), minWorldLength: i18 || 0, maxWorldLength: null != s26 ? s26 : 1 / 0 };
    }
    this._context.screenSizePerspectiveEnabled && (e37.screenSizePerspective = this._context.sharedResources.screenSizePerspectiveSettings), (0 !== e37.rotation || this._drivenProperties.rotation) && (e37.hasRotation = true);
    const r29 = !!has("enable-feature:non-occluded-hud");
    return e37.occlusionTest = !r29, e37.occludedFragmentFade = r29, e37.horizonCullingEnabled = r29 && this._context.spherical, e37.hasSlicePlane = this._context.slicePlaneEnabled, e37;
  }
  _prepareResourcesPrimitive(e37, t29) {
    const r29 = this._getOutlineSize();
    if (de(t29) && 0 === r29) throw new Error("Nothing to render");
    if (this._outlineSize = r29, e37.color = this._getFillColor(), e37.outlineColor = this._getOutlineColor(), e37.outlineSize = this._outlineSize, null != this._context.sharedResources.textures) {
      const r30 = this._context.sharedResources.textures.fromData(`${t29}-icon`, () => u19(t29));
      this._textureHandle = r30, e37.textureId = r30.texture.id;
    }
    e37.textureIsSignedDistanceField = true, e37.sampleSignedDistanceFieldTexelCenter = c10(t29), e37.distanceFieldBoundingBox = s17;
    const i18 = this._getIconSize();
    this._size = [i18, i18], this._symbolTextureRatio = 1 / o21, this._createMaterial(e37);
  }
  async _prepareResourcesHref(e37, r29, s26) {
    this._outlineSize = this._getOutlineSize(), e37.color = this._getFillColor(), e37.outlineColor = this._getOutlineColor(), e37.outlineSize = this._outlineSize, e37.textureIsSignedDistanceField = false;
    const o28 = this._getIconSize(), a33 = o28 * this._context.graphicsCoreOwner.view.state.rasterPixelRatio;
    if (null != this._context.sharedResources.textures) {
      const l28 = await _(this._context.sharedResources.textures.fromUrl(r29, a33, { signal: s26 }));
      if (false === l28.ok) {
        a3(l28.error);
        throw new s("graphics3diconsymbollayer:request-failed", `Failed to load (Request for icon resource failed: ${r29})`);
      }
      this._textureHandle = l28.value;
      const c25 = l28.value.texture;
      this._size = fe(c25, o28), e37.textureId = c25.id;
    }
    this._createMaterial(e37);
  }
  async _prepareResourcesCIM(e37, t29, r29) {
    const { OverrideHelper: i18 } = await import("./OverrideHelper-GP3G2IUV.js");
    if (this._overrideHelperClass = i18, this._cimData = t29, !this._context.sharedResources.cimSymbolRasterizer) {
      const e38 = (await import("./CIMSymbolRasterizer-YSGZ3BWO.js")).CIMSymbolRasterizer;
      s2(r29), this._context.sharedResources.cimSymbolRasterizer || (this._context.sharedResources.cimSymbolRasterizer = new e38(this._context.renderCoordsHelper.spatialReference));
    }
    const s26 = this._context.sharedResources.cimSymbolRasterizer, o28 = [], a33 = t29, n29 = a33?.symbol;
    te2.fetchResources(n29, s26.resourceManager, o28, r29), te2.fetchFonts(n29, s26.resourceManager, o28);
    const c25 = this._context.layer.fields ? this._context.layer.fields.map((e38) => e38.toJSON()) : [], h23 = this._context.renderCoordsHelper.spatialReference;
    if (this._arcadeInfo = { spatialReference: h23, fields: c25, geometryType: "esriGeometryPoint" }, a33?.primitiveOverrides && o28.push(i18.createRenderExpressions(a33.primitiveOverrides, this._arcadeInfo)), o28.length > 0 && (await Promise.all(o28), s2(r29)), this._context.renderer && "dictionary" === this._context.renderer.type && this._context.renderer.scaleExpression) {
      const e38 = this._context.renderer;
      if (e38.scaleExpression) {
        const t30 = e38.scaleExpression, r30 = await h4(t30, this._context.layer.spatialReference), { default: i19 } = await import("./callExpressionWithFeature-P4CFT3OL.js"), s27 = new Z2(c25);
        this._cimScaleFactorOrFunction = (e39, t31, o29) => {
          const a34 = i19(r30, e39, { $view: o29 }, "esriGeometryPoint", s27, t31);
          return null !== a34 ? a34 : 1;
        };
      }
    }
    s2(r29), this._cimMaterialParametersInfo = e37, this._cimMaterialParametersInfo.color = this._getFillColor(), this._cimMaterialParametersInfo.outlineColor = [0, 0, 0, 0], this._cimMaterialParametersInfo.outlineSize = 0, this._cimMaterialParametersInfo.textureIsSignedDistanceField = false;
  }
  _getPrimitive() {
    return ye(this.symbolLayer);
  }
  _getOutlineSize() {
    let e37 = 0;
    const t29 = this.symbolLayer;
    if (null != t29.outline?.size) return Math.max(u5(t29.outline.size), 0);
    return e37 = de(this._getPrimitive()) ? ce : 0, Math.max(e37, 0);
  }
  _getOutlineColor() {
    const t29 = this._getLayerOpacity(), r29 = this.symbolLayer, i18 = r29?.outline?.color;
    if (null != i18) {
      const r30 = l4.toUnitRGB(i18), s26 = i18.a * t29;
      return [r30[0], r30[1], r30[2], s26];
    }
    return [0, 0, 0, 0];
  }
  _getFillColor() {
    if (de(this._getPrimitive())) return t19;
    const e37 = null == this._getPrimitive(), t29 = this.symbolLayer?.material?.color;
    return this._getCombinedOpacityAndColor(t29, { hasIntrinsicColor: e37 });
  }
  _getFallbackOpacityAndColor() {
    const t29 = this.symbolLayer?.material?.color;
    if (null == t29) {
      return null == this._getPrimitive() ? s8 : a10;
    }
    return l4.toUnitRGBA(t29);
  }
  _getFallbackSize() {
    const e37 = this._getIconSize(), { symbolLayer: { size: t29 } } = this;
    return (null != t29 ? Math.round(u5(t29)) : le) / e37;
  }
  _createMaterial(e37) {
    const t29 = this._context.spherical;
    if (this._cimData) {
      this._fastUpdates = null;
      let r30 = e37.textureId ? this._cimSymbolMaterials.get(e37.textureId) : null;
      return r30 || (r30 = new ue(e37, t29), this._cimSymbolMaterials.set(e37.textureId ?? 0, r30)), r30;
    }
    this._fastUpdates = W(this._context.renderer, this._fastVisualVariableConvertOptions()), this._fastUpdates && (e37 = { ...e37, ...this._fastUpdates.materialParameters }), this._materials[0] = new ue(e37, t29), e37.isFocused = false;
    const r29 = this.view.map?.focusAreas.style;
    return e37.color = c16(e37.color, r29), e37.outlineColor = c16(e37.outlineColor, r29), this._materials[1] = new ue(e37, t29), this._materials[0];
  }
  _setDrapingDependentMaterialParameters() {
    this.draped && (this._forEachMaterial((e37) => {
      e37.setParameters({ verticalOffset: null, screenSizePerspective: null, occlusionTest: false, hasSlicePlane: false, shaderPolygonOffset: 0, draped: this.draped });
    }), this.layerOpacityChanged());
  }
  destroy() {
    super.destroy(), this._patchTask = e2(this._patchTask), this._materials.length = 0, this._cimSymbolMaterials.clear(), this._cimSymbolTextures.forEach((e37) => this._context.stage.removeTexture(e37)), this._cimSymbolTextures.clear(), this._textureHandle = t(this._textureHandle);
  }
  _getScaleFactor({ size: e37 }, t29) {
    if (!this._drivenProperties.size) return 1;
    if (null == e37) return this._getFallbackSize();
    const [r29, i18, s26] = e37;
    return "symbol-value" === r29 ? 1 : "number" == typeof r29 && isFinite(r29) ? u5(r29) / t29 : "number" == typeof s26 && isFinite(s26) ? u5(s26) / t29 : 1;
  }
  _getDrivenRotation(e37) {
    return this._drivenProperties.rotation ? e37.heading ?? 0 : 0;
  }
  createGraphics3DGraphic(e37) {
    const t29 = e37.graphic;
    if (!this._validateGeometry(t29.geometry)) return null;
    const r29 = f13(t29.geometry);
    if (null == r29) return this.logger.warn(`unsupported geometry type for text symbol: ${t29.geometry.type}`), null;
    let i18, s26 = [0, 0];
    const o28 = this.view.focusAreasView?.containsGeometry(r29) ?? true;
    if (this._cimData) {
      if (!this._cimData.symbol) return null;
      const r30 = this._generateTextureCIM(t29, e37), a34 = { textureId: r30.id, isFocused: o28, ...this._cimMaterialParametersInfo };
      i18 = this._createMaterial(a34);
      const n30 = this._context.graphicsCoreOwner.view.state.rasterPixelRatio;
      s26 = [r30.parameters.width / n30, r30.parameters.height / n30];
    } else s26 = this._size, i18 = o28 ? this._materials[0] : this._materials[1];
    if (null == r29) return this.logger.warn(`unsupported geometry type for icon symbol: ${t29.geometry.type}`), null;
    const a33 = e37.renderingInfo, n29 = this._getVertexOpacityAndColor(a33, this._getFallbackOpacityAndColor()), l28 = this._getDrivenRotation(a33);
    let c25 = 1;
    if (!this._fastUpdates?.visualVariables.size) {
      const e38 = s26[0] > s26[1] ? s26[0] : s26[1];
      c25 = this._getScaleFactor(a33, e38);
    }
    c25 *= this._symbolTextureRatio;
    const h23 = r9(s26[0] * c25, s26[1] * c25), u31 = this.setGraphicElevationContext(t29);
    return this.ensureDrapedStatus("on-the-ground" === u31.mode) && this._setDrapingDependentMaterialParameters(), this.draped ? this._createAsOverlay(t29, r29, i18, n29, l28, h23) : this._createAs3DShape(t29, r29, i18, n29, l28, h23, u31, t29.uid);
  }
  layerOpacityChanged() {
    const e37 = this._getFillColor(), t29 = this._getOutlineColor();
    this._forEachMaterial((r29) => {
      r29.setParameters({ color: e37 }), r29.setParameters({ outlineColor: t29 });
    });
  }
  updateGeometry(e37, t29) {
    if (this.draped || !this._validateGeometry(t29)) return false;
    const { elevationContext: r29, stageObject: i18 } = e37;
    if (r29.mode !== this.getGeometryElevationMode(t29)) return false;
    const s26 = f13(t29);
    if (!s26) return false;
    const o28 = p16(i18, this._context, s26, r29);
    if (null == o28) return false;
    const a33 = d6(this._context, s26);
    return i18.geometries[0].localOrigin === a33 && (e37.alignedSampledElevation = o28, m14(e37, s26, this._context.elevationProvider), true);
  }
  layerElevationInfoChanged(e37, t29, r29) {
    const i18 = this._elevationContext.mode, s26 = m12(_ue.elevationModeChangeTypes, r29, i18);
    if (s26 !== b8.UPDATE) return s26;
    const o28 = d5(i18) || "absolute-height" === i18;
    return this.updateGraphics3DGraphicElevationInfo(e37, t29, () => o28);
  }
  slicePlaneEnabledChanged() {
    return this.draped || this._forEachMaterial((e37) => {
      e37.setParameters({ hasSlicePlane: this._context.slicePlaneEnabled });
    }), true;
  }
  physicalBasedRenderingChanged() {
    return true;
  }
  get pixelRatioChanged() {
    return null != this._getPrimitive();
  }
  applyRendererDiff(e37, t29) {
    for (const r29 in e37.diff) {
      if ("visualVariables" !== r29) return e29.RecreateSymbol;
      if (!X(this._fastUpdates, t29, this._fastVisualVariableConvertOptions())) return e29.RecreateSymbol;
      this._materials[0]?.setParameters(this._fastUpdates.materialParameters);
    }
    return e29.FastUpdate;
  }
  updateFocus(e37, t29) {
    t29.forEach((t30) => {
      const r29 = f13(t30.graphic.geometry);
      if (null == r29) return void this.logger.warn(`unsupported geometry type for text symbol: ${t30.graphic.geometry.type}`);
      const i18 = this.view.focusAreasView?.containsGeometry(r29) ?? true;
      t30.layers.forEach((r30) => {
        if (r30?.graphics3DSymbolLayer === this && r30.stageObject) {
          r30.stageObject.geometries.some((e38) => e38.material.parameters.isFocused !== i18) && e37(t30);
        }
      });
    });
  }
  prepareSymbolLayerPatch(e37) {
    if (this._patchTask?.abort(), "partial" !== e37.diff.type) return;
    const t29 = e37.diff.diff;
    this._preparePatchResource(e37, t29), this._preparePatchRotation(e37, t29);
  }
  _preparePatchResource(e37, s26) {
    if (!s26.resource || "partial" !== s26.resource.type) return;
    const c25 = s26.resource.diff;
    if ("complete" !== c25?.href?.type) return;
    const h23 = c25.href.newValue, { textures: u31 } = this._context.sharedResources;
    if (null == h23 || null == u31 || null != pe(h23)) return;
    const m21 = this._getIconSize(), d14 = m21 * this._context.graphicsCoreOwner.view.state.pixelRatio;
    e37.symbolLayerStatePatches.push(() => {
      this._patchTask = e2(this._patchTask), this._patchTask = d((e38) => this._context.schedule(async (e39, r29) => {
        const s27 = await _(u31.fromUrl(h23, d14, { signal: r29 }));
        s2(r29);
        const o28 = !s27.ok;
        if (o28 && a3(s27.error), this._textureHandle = t(this._textureHandle), this._patchTask = null, o28) {
          this._forEachMaterial((e41) => {
            e41.visible = false, e41.setParameters({ textureId: null });
          });
          const e40 = `Failed to load (Request for icon resource failed: ${h23})`;
          return void this.logger.error(new s("graphics3diconsymbollayer:request-failed", e40));
        }
        this._textureHandle = s27.value;
        const c26 = s27.value.texture;
        this._size = fe(c26, m21), this._forEachMaterial((e40) => {
          e40.setParameters({ textureId: c26.id }), e40.visible = true;
        });
      }, e38));
    }), delete c25.href;
  }
  _preparePatchRotation(e37, t29) {
    if (!t29.angle || "complete" !== t29.angle.type) return;
    const r29 = t29.angle.newValue ?? 0, i18 = 0 !== r29 || this._drivenProperties.rotation;
    e37.symbolLayerStatePatches.push(() => {
      this._forEachMaterial((e38) => e38.setParameters({ rotation: r29, hasRotation: i18 }));
    }), delete t29.angle;
  }
  _defaultElevationInfoNoZ() {
    return xe;
  }
  _createAs3DShape(e37, t29, r29, i18, s26, o28, a33, n29) {
    const l28 = this.getFastUpdateAttrValues(e37), c25 = this._context.layerViewUid, h23 = this._context.stage.renderView.getObjectAndLayerIdColor({ graphicUid: n29, layerViewUid: c25 }), u31 = lt(r29, { normal: ne, color: i18, rotation: s26, size: o28, centerOffsetAndDistance: be, featureAttribute: l28, objectAndLayerIdColor: h23 }), m21 = a24(this._context, t29, u31, a33, n29);
    if (null == m21) return null;
    const d14 = new p15(this, m21.object, null, p14, a33);
    return d14.alignedSampledElevation = m21.sampledElevation, d14.needsElevationUpdates = d5(a33.mode) || "absolute-height" === a33.mode, d14.getScreenSize = this._createScreenSizeGetter(o28, l28), d14.calculateRelativeScreenBounds = (e38) => r29.calculateRelativeScreenBounds(d14.getScreenSize(), 1, e38), m14(d14, t29, this._context.elevationProvider), d14;
  }
  _createAsOverlay(e37, t29, r29, i18, s26, o28) {
    r29.renderPriority = this._renderPriority;
    const a33 = n4();
    i6(t29, a33, this._context.overlaySR), a33[2] = te3;
    const n29 = this._context.clippingExtent;
    if (null != n29 && !V2(n29, a33)) return null;
    const l28 = this.getFastUpdateAttrValues(e37), c25 = e37.uid, h23 = this._context.layerViewUid, u31 = this._context.stage.renderView.getObjectAndLayerIdColor({ graphicUid: c25, layerViewUid: h23 }), m21 = lt(r29, { normal: ne, position: a33, color: i18, rotation: s26, size: o28, featureAttribute: l28, objectAndLayerIdColor: u31 }), d14 = new g9(m21, { layerViewUid: h23, graphicUid: c25 }), p23 = new l20(this, [d14], null, this._context.drapeSourceRenderer);
    return p23.getScreenSize = this._createScreenSizeGetter(o28, l28), p23.calculateRelativeScreenBounds = (e38) => r29.calculateRelativeScreenBounds(p23.getScreenSize(), 1, e38), p23;
  }
  _createScreenSizeGetter(e37, t29) {
    const r29 = this._outlineSize + 2;
    if (this._fastUpdates && t29) {
      const i19 = e37[0] / this._symbolTextureRatio, s27 = e37[1] / this._symbolTextureRatio;
      return (e38 = n8()) => {
        const [o28, a33] = oe(ve, this._fastUpdates.materialParameters, t29);
        return e38[0] = o28 * i19 + r29, e38[1] = a33 * s27 + r29, e38;
      };
    }
    const i18 = e37[0] / this._symbolTextureRatio + r29, s26 = e37[1] / this._symbolTextureRatio + r29;
    return (e38 = n8()) => (e38[0] = i18, e38[1] = s26, e38);
  }
  _fastVisualVariableConvertOptions() {
    const e37 = Math.max(this._size[0], this._size[1]), t29 = r5(e37, e37, e37), r29 = e4(1), i18 = e37 * r29, s26 = r5(i18, i18, i18), o28 = this._getFallbackSize();
    return new J2({ supports: { size: true, color: true, rotation: true, opacity: false }, modelSize: t29, symbolSize: s26, unitInMeters: r29, fallbackColor: this._getFallbackOpacityAndColor(), fallbackSize: r5(o28, o28, o28) });
  }
  _forEachMaterial(e37) {
    this._materials.forEach(e37), this._cimSymbolMaterials.forEach(e37);
  }
  test() {
    return { ...super.test(), material: this._materials[0] };
  }
};
_ue.PRIMITIVE_SIZE = he;
_ue.elevationModeChangeTypes = { definedChanged: b8.UPDATE, staysOnTheGround: b8.NONE, onTheGroundChanged: b8.RECREATE };
var ue2 = _ue;
function me(e37) {
  return e37 && "point-3d" === e37.type && e37.hasVisibleVerticalOffset();
}
function de(e37) {
  return null != e37 && ("cross" === e37 || "x" === e37);
}
function pe(e37) {
  const t29 = ot(e37);
  return "application/json" === t29?.mediaType ? t29.data : void 0;
}
function _e(e37, t29) {
  return "relative" === e37 ? r9((t29.x || 0) + 0.5, 0.5 - (t29.y || 0)) : e37 in s16 ? s16[e37] : s16.center;
}
function fe({ parameters: e37 }, t29) {
  const r29 = (e37.width ?? 1) / (e37.height ?? 1);
  return r29 > 1 ? [t29, Math.round(t29 / r29)] : [Math.round(t29 * r29), t29];
}
function ye(e37) {
  return e37.resource?.href ? null : e37.resource?.primitive ?? j;
}
function ge(e37) {
  return 1 === (e37.material?.color?.a ?? 1) && null != ye(e37);
}
var xe = { mode: "relative-to-ground", offset: 0 };
var be = r6(0, 0, 0, 1);
var ve = n4();

// node_modules/@arcgis/core/views/3d/layers/graphics/lineUtils.js
function n20(n29) {
  switch (n29) {
    case "butt":
      return s19.BUTT;
    case "square":
      return s19.SQUARE;
    case "round":
      return s19.ROUND;
    default:
      return null;
  }
}
function r21(e37) {
  return "diamond" === e37 ? "kite" : e37;
}

// node_modules/@arcgis/core/views/3d/webgl-engine/shaders/LineMarkerTechnique.js
var S6 = class extends g7 {
  constructor(e37, t29) {
    super(e37, t29, new t12(k6, () => import("./LineMarker.glsl-3RCNCHNY.js")), W3);
  }
  _makePipelineState(i18, t29) {
    const { output: p23, oitPass: d14, space: T9, hasOccludees: h23 } = i18;
    return B2({ blending: u14(p23) ? p11(d14) : null, depthTest: T9 === s18.Draped ? null : { func: E6(d14) }, depthWrite: N2(i18), drawBuffers: h11(p23, F3(d14, p23)), colorWrite: g6, stencilWrite: h23 ? e23 : null, stencilTest: h23 ? t29 ? o18 : f8 : null, polygonOffset: { factor: 0, units: -10 } });
  }
  initializePipeline(e37) {
    return e37.occluder ? (this._occluderPipelineTransparent = B2({ blending: c7, depthTest: s15, depthWrite: null, colorWrite: g6, stencilWrite: null, stencilTest: m10 }), this._occluderPipelineOpaque = B2({ blending: c7, depthTest: s15, depthWrite: null, colorWrite: g6, stencilWrite: l11, stencilTest: P5 }), this._occluderPipelineMaskWrite = B2({ blending: null, depthTest: i11, depthWrite: null, colorWrite: null, stencilWrite: e23, stencilTest: o18 })) : this._occluderPipelineTransparent = this._occluderPipelineOpaque = this._occluderPipelineMaskWrite = null, this._occludeePipelineState = this._makePipelineState(e37, true), this._makePipelineState(e37, false);
  }
  getPipeline(e37, i18) {
    return e37 ? this._occludeePipelineState : i18 === A7.TRANSPARENT_OCCLUDER_MATERIAL ? this._occluderPipelineTransparent ?? super.getPipeline() : i18 === A7.OCCLUDER_MATERIAL ? this._occluderPipelineOpaque ?? super.getPipeline() : this._occluderPipelineMaskWrite ?? super.getPipeline();
  }
};
var W3 = /* @__PURE__ */ new Map([[e17.POSITION, 0], [e17.PREVIOUSDELTA, 1], [e17.UV0, 2], [e17.COLOR, 3], [e17.COLORFEATUREATTRIBUTE, 3], [e17.OPACITYFEATUREATTRIBUTE, 4], [e17.SIZE, 5], [e17.SIZEFEATUREATTRIBUTE, 5], [e17.NORMAL, 6]]);

// node_modules/@arcgis/core/views/3d/webgl-engine/materials/LineMarkerMaterial.js
var I8 = class extends n16 {
  constructor(e37) {
    super(e37, C7), this._configuration = new a21(), this.vertexAttributeLocations = W3, this.produces = /* @__PURE__ */ new Map([[A7.OPAQUE_MATERIAL, (e38) => e38 === n11.Highlight || h6(e38) && this.parameters.renderOccluded === o17.OccludeAndTransparentStencil], [A7.OPAQUE_MATERIAL_WITHOUT_NORMALS, (e38) => S2(e38)], [A7.OCCLUDER_MATERIAL, (e38) => l9(e38) && this.parameters.renderOccluded === o17.OccludeAndTransparentStencil], [A7.TRANSPARENT_OCCLUDER_MATERIAL, (e38) => l9(e38) && this.parameters.renderOccluded === o17.OccludeAndTransparentStencil], [A7.TRANSPARENT_MATERIAL, (e38) => h6(e38) && this.parameters.writeDepth], [A7.TRANSPARENT_MATERIAL_WITHOUT_DEPTH, (e38) => h6(e38) && !this.parameters.writeDepth], [A7.DRAPED_MATERIAL, (e38) => u14(e38) || e38 === n11.Highlight]]), this.intersectDraped = void 0, this._layout = this.createLayout();
  }
  getConfiguration(e37, t29) {
    return super.getConfiguration(e37, t29, this._configuration), this._configuration.space = t29.slot === A7.DRAPED_MATERIAL ? s18.Draped : this.parameters.worldSpace ? s18.World : s18.Screen, this._configuration.hideOnShortSegments = this.parameters.hideOnShortSegments, this._configuration.hasCap = this.parameters.cap !== s19.BUTT, this._configuration.anchor = this.parameters.anchor, this._configuration.hasTip = this.parameters.hasTip, this._configuration.hasSlicePlane = this.parameters.hasSlicePlane, this._configuration.hasOccludees = t29.hasOccludees, this._configuration.writeDepth = this.parameters.writeDepth, this._configuration.vvSize = !!this.parameters.vvSize, this._configuration.vvColor = !!this.parameters.vvColor, this._configuration.vvOpacity = !!this.parameters.vvOpacity, this._configuration.occluder = this.parameters.renderOccluded === o17.OccludeAndTransparentStencil, this._configuration.oitPass = t29.oitPass, this._configuration.terrainDepthTest = t29.terrainDepthTest && u14(e37), this._configuration.cullAboveTerrain = t29.cullAboveTerrain, this._configuration;
  }
  get visible() {
    return this.parameters.color[3] >= o19;
  }
  intersect() {
  }
  createLayout() {
    const e37 = O3().vec3f(e17.POSITION).vec4f16(e17.PREVIOUSDELTA).vec2f16(e17.UV0);
    return this.parameters.vvColor ? e37.f32(e17.COLORFEATUREATTRIBUTE) : e37.vec4u8(e17.COLOR, { glNormalized: true }), this.parameters.vvOpacity && e37.f32(e17.OPACITYFEATUREATTRIBUTE), this.parameters.vvSize ? e37.f32(e17.SIZEFEATUREATTRIBUTE) : e37.f16(e17.SIZE), this.parameters.worldSpace && e37.vec3f16(e17.NORMAL), e37;
  }
  createBufferWriter() {
    return new P6(this._layout, this.parameters);
  }
  createGLMaterial(e37) {
    return new L6(e37);
  }
};
var L6 = class extends e22 {
  dispose() {
    super.dispose(), this._markerTextures.release(this._markerPrimitive), this._markerPrimitive = null;
  }
  beginSlot(e37) {
    const t29 = this._material.parameters.markerPrimitive;
    return t29 !== this._markerPrimitive && (this._material.setParameters({ markerTexture: this._markerTextures.swap(t29, this._markerPrimitive) }), this._markerPrimitive = t29), this.getTechnique(S6, e37);
  }
};
var C7 = class extends t14 {
  constructor() {
    super(...arguments), this.width = 0, this.color = [1, 1, 1, 1], this.markerPrimitive = "arrow", this.placement = "end", this.cap = s19.BUTT, this.anchor = p12.Center, this.hasTip = false, this.worldSpace = false, this.hideOnShortSegments = false, this.writeDepth = true, this.hasSlicePlane = false, this.vvFastUpdate = false, this.markerTexture = null;
  }
};
var P6 = class {
  constructor(e37, t29) {
    this.vertexBufferLayout = e37, this._parameters = t29;
  }
  elementCount() {
    return "begin-end" === this._parameters.placement ? 12 : 6;
  }
  write(i18, s26, n29, o28, h23, c25) {
    const p23 = n29.get(e17.POSITION).data, l28 = p23.length / 3;
    let m21 = [1, 0, 0];
    const u31 = n29.get(e17.NORMAL);
    this._parameters.worldSpace && null != u31 && (m21 = u31.data);
    let T9 = 1, d14 = 0;
    this._parameters.vvSize ? d14 = n29.get(e17.SIZEFEATUREATTRIBUTE).data[0] : n29.has(e17.SIZE) && (T9 = n29.get(e17.SIZE).data[0]);
    let A14 = [1, 1, 1, 1], _10 = 0;
    this._parameters.vvColor ? _10 = n29.get(e17.COLORFEATUREATTRIBUTE).data[0] : n29.has(e17.COLOR) && (A14 = n29.get(e17.COLOR).data);
    let v7 = 0;
    this._parameters.vvOpacity && (v7 = n29.get(e17.OPACITYFEATUREATTRIBUTE).data[0]);
    const g17 = new Float32Array(h23.buffer), S12 = t8(h23.buffer), O7 = new Uint8Array(h23.buffer);
    let R10 = c25 * (this.vertexBufferLayout.stride / 4);
    const I15 = g17.BYTES_PER_ELEMENT / S12.BYTES_PER_ELEMENT, L10 = 4 / I15, C11 = (e37, t29, r29, i19) => {
      g17[R10++] = e37[0], g17[R10++] = e37[1], g17[R10++] = e37[2], v3(t29, e37, S12, R10 * I15), R10 += L10;
      let a33 = R10 * I15;
      if (S12[a33++] = r29[0], S12[a33++] = r29[1], R10 = Math.ceil(a33 / I15), this._parameters.vvColor) g17[R10++] = _10;
      else {
        const e38 = Math.min(4 * i19, A14.length - 4), t30 = 4 * R10++;
        O7[t30] = 255 * A14[e38], O7[t30 + 1] = 255 * A14[e38 + 1], O7[t30 + 2] = 255 * A14[e38 + 2], O7[t30 + 3] = 255 * A14[e38 + 3];
      }
      this._parameters.vvOpacity && (g17[R10++] = v7), a33 = R10 * I15, this._parameters.vvSize ? (g17[R10++] = d14, a33 += 2) : S12[a33++] = T9, this._parameters.worldSpace && (S12[a33++] = m21[0], S12[a33++] = m21[1], S12[a33++] = m21[2]), R10 = Math.ceil(a33 / I15);
    };
    let P11;
    !function(e37) {
      e37[e37.ASCENDING = 1] = "ASCENDING", e37[e37.DESCENDING = -1] = "DESCENDING";
    }(P11 || (P11 = {}));
    const b17 = (a33, s27) => {
      const n30 = o7(D, p23[3 * a33], p23[3 * a33 + 1], p23[3 * a33 + 2]), o29 = N3;
      let h24 = a33 + s27;
      do {
        o7(o29, p23[3 * h24], p23[3 * h24 + 1], p23[3 * h24 + 2]), h24 += s27;
      } while (J(n30, o29) && h24 >= 0 && h24 < l28);
      i18 && (E2(n30, n30, i18), E2(o29, o29, i18)), C11(n30, o29, [-1, -1], a33), C11(n30, o29, [1, -1], a33), C11(n30, o29, [1, 1], a33), C11(n30, o29, [-1, -1], a33), C11(n30, o29, [1, 1], a33), C11(n30, o29, [-1, 1], a33);
    }, U10 = this._parameters.placement;
    return "begin" !== U10 && "begin-end" !== U10 || b17(0, P11.ASCENDING), "end" !== U10 && "begin-end" !== U10 || b17(l28 - 1, P11.DESCENDING), null;
  }
};
var D = n4();
var N3 = n4();

// node_modules/@arcgis/core/views/3d/layers/graphics/Graphics3DLineSymbolLayer.js
var H = ["polyline", "polygon", "extent"];
var _B = class _B extends y7 {
  constructor(e37, t29, r29, i18) {
    super(e37, t29, r29, i18, J3(t29));
  }
  async doLoad() {
    this._fastUpdates = W(this._context.renderer, this._fastVisualVariableConvertOptions());
    const e37 = true;
    if (this._fastMarkerUpdates = W(this._context.renderer, this._fastVisualVariableConvertOptions(e37)), !this._drivenProperties.size) {
      if ((null != this.symbolLayer.size ? this.symbolLayer.size : e4(1)) < 0) throw new s("graphics3dlinesymbollayer:invalid-size", "Symbol sizes may not be negative values");
    }
  }
  _getMaterialParameters(e37, t29 = false) {
    const r29 = this._getCombinedOpacityAndColor(t29 && this._markerColor || this._materialColor);
    this._patternHidesLine && !t29 && (r29[3] = 0);
    const i18 = { width: this._computeMaterialWidth(this.symbolLayer?.size), color: r29, hasPolygonOffset: true, join: this.symbolLayer.join || "miter", cap: n20(this.symbolLayer.cap || "butt"), hasSlicePlane: this._context.slicePlaneEnabled, isClosed: e37, stipplePattern: n19(this.symbolLayer.pattern) };
    return t29 && this._fastMarkerUpdates?.visualVariables ? { ...i18, ...this._fastMarkerUpdates.materialParameters } : this._fastUpdates?.visualVariables ? { ...i18, ...this._fastUpdates.materialParameters } : i18;
  }
  get _materialColor() {
    return this.symbolLayer.material?.color;
  }
  get _markerColor() {
    return this.symbolLayer.marker?.color;
  }
  get _lineMaterial() {
    return null == this._materials[Q.Line] && (this._materials[Q.Line] = new q6(this._getMaterialParameters(false))), this._materials[Q.Line];
  }
  get _ringMaterial() {
    return null == this._materials[Q.Ring] && (this._materials[Q.Ring] = new q6(this._getMaterialParameters(true))), this._materials[Q.Ring];
  }
  get _wireframeLineMaterial() {
    return null == this._materials[Q.LineWireframe] && (this._materials[Q.LineWireframe] = new q6({ ...this._getMaterialParameters(false), wireframe: true })), this._materials[Q.LineWireframe];
  }
  get _wireframeRingMaterial() {
    return null == this._materials[Q.RingWireframe] && (this._materials[Q.RingWireframe] = new q6({ ...this._getMaterialParameters(true), wireframe: true })), this._materials[Q.RingWireframe];
  }
  get _markerMaterial() {
    return null == this._materials[Q.Marker] && null != this.symbolLayer.marker && (this._materials[Q.Marker] = new I8({ ...this._getMaterialParameters(false, true), placement: this.symbolLayer.marker.placement, markerPrimitive: r21(this.symbolLayer.marker.style) })), this._materials[Q.Marker];
  }
  _getDrivenSize(e37) {
    if (this._drivenProperties.size) {
      const t29 = e37.size;
      return null != t29 ? u5(s20(t29)) : this._getFallbackSize();
    }
    return 1;
  }
  _getDrivenColor({ color: e37, opacity: t29 }) {
    const r29 = r6(1, 1, 1, 1);
    return this._drivenProperties.color && a9(r29, e37 ?? this._getFallbackOpacityAndColor()), this._drivenProperties.opacity && (r29[3] = t29 ?? this._getFallbackOpacity()), r29;
  }
  _getDrivenMarkerColor({ color: e37, opacity: t29 }) {
    const r29 = i5();
    return this._drivenProperties.color && a9(r29, e37 ?? this._getFallbackMarkerOpacityAndColor()), this._drivenProperties.opacity && (r29[3] = t29 ?? this._getFallbackMarkerOpacity()), r29;
  }
  createGraphics3DGraphic(e37) {
    const t29 = e37.graphic;
    if (!this._validateGeometry(t29.geometry, H, this.symbolLayer.type)) return null;
    const r29 = this.setGraphicElevationContext(t29);
    return this.ensureDrapedStatus("on-the-ground" === r29.mode), this.draped ? this._createAsOverlay(e37) : this._createAs3DShape(e37, r29, t29.uid);
  }
  applyRendererDiff(e37, t29) {
    for (const r29 in e37.diff) {
      if ("visualVariables" !== r29) return e29.RecreateSymbol;
      {
        const e38 = this._fastUpdates;
        if (!X(e38, t29, this._fastVisualVariableConvertOptions())) return e29.RecreateSymbol;
        for (const t30 of this._materials) t30 instanceof q6 && t30.setParameters(e38.materialParameters);
        const r30 = this._fastMarkerUpdates, i18 = true;
        if (!X(r30, t29, this._fastVisualVariableConvertOptions(i18))) return e29.RecreateSymbol;
        for (const t30 of this._materials) t30 instanceof I8 && t30.setParameters(r30.materialParameters);
      }
    }
    return e29.FastUpdate;
  }
  prepareSymbolLayerPatch(e37) {
    if ("partial" !== e37.diff.type) return;
    const t29 = e37.diff.diff, r29 = {};
    "complete" === t29.size?.type && (r29.width = this._computeMaterialWidth(t29.size.newValue), delete t29.size), "complete" === t29.cap?.type && (r29.cap = n20(t29.cap.newValue ?? "butt"), delete t29.cap);
    const i18 = this._prepareMarkerPatch(e37, t29);
    this._prepareMaterialPatch(e37, t29, i18), e37.symbolLayerStatePatches.push(() => {
      for (const e38 of this._materials) e38?.setParameters(r29);
    });
  }
  layerOpacityChanged() {
    for (const e37 of this._materials) this._updateMaterialLayerOpacity(e37, e37 instanceof I8);
  }
  _updateMaterialLayerOpacity(e37, t29 = false) {
    if (null == e37) return;
    const r29 = e37.parameters.color, i18 = this.symbolLayer?.material?.color, a33 = this._patternHidesLine && !t29 ? 0 : this._getCombinedOpacity(i18), s26 = r6(r29[0], r29[1], r29[2], a33);
    e37.setParameters({ color: s26 });
  }
  layerElevationInfoChanged(e37, t29, r29) {
    const i18 = this._elevationContext.mode, a33 = m12(_B.elevationModeChangeTypes, r29, i18);
    if (a33 !== b8.UPDATE) return a33;
    const s26 = d5(i18);
    return this.updateGraphics3DGraphicElevationInfo(e37, t29, () => s26);
  }
  slicePlaneEnabledChanged() {
    const e37 = { hasSlicePlane: this._context.slicePlaneEnabled };
    for (const t29 of this._materials) t29?.setParameters(e37);
    return true;
  }
  physicalBasedRenderingChanged() {
    return true;
  }
  _createAs3DShape(e37, t29, r29) {
    const i18 = N4(e37.graphic.geometry), a33 = "polygon" === i18.type ? i18.rings : i18.paths, s26 = new Array(), o28 = u6(), n29 = p13(i18, this._context.elevationProvider, this._context.renderCoordsHelper, t29), l28 = "polygon" === i18.type ? "rings" : "paths";
    this._logGeometryCreationWarnings(n29, a33, l28, "LineSymbol3DLayer");
    for (let h23 = 0; h23 < n29.lines.length; h23++) {
      const t30 = n29.lines[h23], a34 = t30.position, l29 = t30.mapPositions;
      if (null != this._context.clippingExtent && (m4(l29, o28), !A(o28, this._context.clippingExtent))) continue;
      const c26 = this._createGeometry("polygon" === i18.type ? this._ringMaterial : this._lineMaterial, e37, a34, l29, i18.type, K.ELEVATED, r29);
      if (s26.push(c26), t13.LINE_WIREFRAMES && s26.push(c26.instantiate({ material: "polygon" === i18.type ? this._wireframeRingMaterial : this._wireframeLineMaterial })), null != this._markerMaterial) {
        const t31 = c26.instantiate({ material: this._markerMaterial });
        t31.setAttributeData(e17.COLOR, this._getDrivenMarkerColor(e37.renderingInfo)), s26.push(t31);
      }
    }
    if (0 === s26.length) return null;
    const c25 = this._context.layerViewUid, p23 = new A8({ geometries: s26, castShadow: false, layerViewUid: c25, graphicUid: r29 }), m21 = new p15(this, p23, null, I7, t29);
    return m21.alignedSampledElevation = n29.sampledElevation, m21.needsElevationUpdates = d5(t29.mode), m21;
  }
  _createGeometry(e37, t29, r29, i18, a33, s26, o28) {
    const n29 = s26 === K.DRAPED ? { spatialReference: this._context.overlaySR, renderCoordsHelper: this._context.renderCoordsHelper } : null, l28 = "polygon" === a33, c25 = this._fastUpdates?.visualVariables.color, p23 = this._fastUpdates?.visualVariables.size, m21 = this._fastUpdates?.visualVariables.opacity, h23 = this._context.layerViewUid, y15 = this._context.stage.renderView.getObjectAndLayerIdColor({ graphicUid: o28, layerViewUid: h23 }), u31 = { position: r29, size: p23 ? null : this._getDrivenSize(t29.renderingInfo), color: c25 ? null : this._getDrivenColor(t29.renderingInfo), sizeFeature: p23 ? ie(p23.field, t29.graphic) : null, colorFeature: c25 ? ie(c25.field, t29.graphic) : null, opacityFeature: m21 ? ie(m21.field, t29.graphic) : null };
    return b9(e37, { overlayInfo: n29, removeDuplicateStartEnd: l28, mapPositions: i18, attributeData: u31 }, y15);
  }
  _createAsOverlay(e37) {
    const t29 = e37.graphic, r29 = N4(t29.geometry), i18 = "polygon" === r29.type ? r29.rings : r29.paths, a33 = "polygon" === r29.type ? this._ringMaterial : this._lineMaterial;
    a33.renderPriority = this._renderPriority;
    const s26 = t13.LINE_WIREFRAMES ? "polygon" === r29.type ? this._wireframeRingMaterial : this._wireframeLineMaterial : null, o28 = this._markerMaterial;
    null != s26 && (s26.renderPriority = this._renderPriority - 1e-3), null != o28 && (o28.renderPriority = this._renderPriority - 2e-3);
    const n29 = new Array(), l28 = u6(), c25 = q(), p23 = l16(r29, this._context.overlaySR), m21 = "polygon" === r29.type ? "rings" : "paths";
    this._logGeometryCreationWarnings(p23, i18, m21, "LineSymbol3DLayer");
    for (const h23 of p23.lines) {
      if (m4(h23.position, l28), !A(l28, this._context.clippingExtent)) continue;
      M(c25, l28);
      const i19 = (i20) => {
        const a34 = this._createGeometry(i20, e37, h23.position, void 0, r29.type, K.DRAPED, t29.uid), s27 = this._context.layerViewUid, o29 = new g9(a34, { layerViewUid: s27, graphicUid: t29.uid });
        n29.push(o29);
      };
      if (null != o28) {
        i19(o28);
        const e38 = this.symbolLayer.marker.placement;
        "begin" !== e38 && "begin-end" !== e38 || s6(l28, h23.position, 0, 1), "end" !== e38 && "begin-end" !== e38 || s6(l28, h23.position, h23.position.length - 3, 1);
      }
      i19(a33), t13.LINE_WIREFRAMES && i19(s26);
    }
    return new l20(this, n29, c25, this._context.drapeSourceRenderer);
  }
  get _patternHidesLine() {
    const e37 = this.symbolLayer.pattern;
    return null != e37 && "style" === e37.type && "none" === e37.style;
  }
  _computeMaterialWidth(e37) {
    return e37 = e37 ?? e4(1), this._drivenProperties.size ? this._fastUpdates?.visualVariables.size ? u5(1) : 1 : u5(e37);
  }
  _prepareMaterialPatch(e37, t29, r29) {
    const i18 = t29.material;
    if (null == i18) return void (r29.changed && r29.useMaterialColor && q7(this._getCombinedOpacityAndColor(this._materialColor), this._materials[Q.Marker], e37));
    if ("collection" === i18.type) return;
    const a33 = "complete" === i18.type ? i18.newValue?.color : "complete" === i18.diff.color?.type ? i18.diff.color.newValue : null, s26 = this._getCombinedOpacityAndColor(a33);
    r29.useMaterialColor && q7(t4(s26), this._materials[Q.Marker], e37), this._patternHidesLine && (s26[3] = 0), q7(s26, this._materials[Q.Line], e37), delete t29.material;
  }
  _prepareMarkerPatch(e37, t29) {
    const r29 = t29.marker, i18 = this._markerMaterial;
    if (null == r29 || "partial" !== r29.type || null == r29.diff || null != r29.diff.placement || null != r29.diff.style && "complete" !== r29.diff.style.type || null != r29.diff.color && "complete" !== r29.diff.color.type || null == i18) return { changed: false, useMaterialColor: null == this._markerColor };
    const a33 = r29.diff.color, s26 = null != a33, o28 = s26 ? a33.newValue : null, n29 = null == o28 && null == this._markerColor;
    o28 && q7(this._getCombinedOpacityAndColor(o28), i18, e37);
    const l28 = r29.diff.style?.newValue;
    return l28 && e37.symbolLayerStatePatches.push(() => i18.setParameters({ markerPrimitive: r21(l28) })), delete t29.marker, { changed: s26, useMaterialColor: n29 };
  }
  _fastVisualVariableConvertOptions(e37 = false) {
    const t29 = this._getFallbackSize();
    return new J2({ supports: { size: true, color: true, rotation: false, opacity: true }, fallbackColor: e37 ? this._getFallbackMarkerOpacityAndColor() : this._getFallbackOpacityAndColor(), fallbackSize: r5(t29, t29, t29) });
  }
  _getFallbackOpacityAndColor() {
    const t29 = this.symbolLayer?.material?.color;
    return l4.toUnitRGBA(t29) ?? a10;
  }
  _getFallbackOpacity() {
    return this.symbolLayer?.material?.color?.a ?? 0;
  }
  _getFallbackMarkerOpacityAndColor() {
    const t29 = this.symbolLayer?.marker?.color;
    return l4.toUnitRGBA(t29) ?? a10;
  }
  _getFallbackMarkerOpacity() {
    return this.symbolLayer?.marker?.color?.a ?? 0;
  }
  _getFallbackSize() {
    const e37 = this.symbolLayer?.size;
    return null != e37 ? u5(e37) : 1;
  }
};
_B.elevationModeChangeTypes = { definedChanged: b8.RECREATE, staysOnTheGround: b8.NONE, onTheGroundChanged: b8.RECREATE };
var B4 = _B;
function N4(e37) {
  switch (e37.type) {
    case "extent":
      if (e37 instanceof z) return P.fromExtent(e37);
      break;
    case "polygon":
    case "polyline":
      return e37;
  }
  return null;
}
function q7(e37, t29, r29) {
  null != t29 && r29.symbolLayerStatePatches.push(() => t29.setParameters({ color: e37 }));
}
function J3(e37) {
  return 1 === (e37.material?.color?.a ?? 1) && 1 === (e37.marker?.color?.a ?? 1);
}
var K;
var Q;
!function(e37) {
  e37[e37.DRAPED = 0] = "DRAPED", e37[e37.ELEVATED = 1] = "ELEVATED";
}(K || (K = {})), function(e37) {
  e37[e37.Line = 0] = "Line", e37[e37.Ring = 1] = "Ring", e37[e37.LineWireframe = 2] = "LineWireframe", e37[e37.RingWireframe = 3] = "RingWireframe", e37[e37.Marker = 4] = "Marker";
}(Q || (Q = {}));

// node_modules/@arcgis/core/views/3d/layers/graphics/meshAutoFastUpdateConstants.js
var e30 = { disableDelayMs: 2e3 };

// node_modules/@arcgis/core/views/3d/layers/graphics/Graphics3DMeshObject3DGraphicLayer.js
var p21 = class extends p15 {
  constructor() {
    super(...arguments), this.fastTransformUpdatesAllowed = false, this._originalGeometries = [], this._fastTransformUpdatesEnabled = false, this._autoDisableFastUpdatesTimeoutId = 0;
  }
  get fastTransformUpdatesEnabled() {
    return this._fastTransformUpdatesEnabled;
  }
  destroy() {
    super.destroy(), this._cancelAutoDisableFastUpdates();
  }
  enableFastTransformUpdates(e37, a33) {
    if (!this.fastTransformUpdatesAllowed || this._fastTransformUpdatesEnabled) return;
    this._cancelAutoDisableFastUpdates(), this._fastTransformUpdatesEnabled = true;
    const { stageObject: s26 } = this, r29 = s26.geometries.slice();
    s26.removeAllGeometries();
    const i18 = I2(g13, s26.transformation), o28 = a33.getOrigin(i18);
    for (const t29 of r29) {
      const a34 = e37(t29.material), r30 = t29.instantiate({ material: a34 });
      r30.localOrigin = o28, s26.addGeometry(r30);
    }
    this._originalGeometries = r29;
  }
  autoDisableFastTransformUpdates(t29) {
    this._cancelAutoDisableFastUpdates(), this._autoDisableFastUpdatesTimeoutId = setTimeout(() => {
      this._autoDisableFastUpdatesTimeoutId = 0, t29();
    }, e30.disableDelayMs);
  }
  updateAutoDisableFastTransformUpdates(t29) {
    this._autoDisableFastUpdatesTimeoutId && this.autoDisableFastTransformUpdates(t29);
  }
  _cancelAutoDisableFastUpdates() {
    clearTimeout(this._autoDisableFastUpdatesTimeoutId), this._autoDisableFastUpdatesTimeoutId = 0;
  }
  disableFastTransformUpdates(t29) {
    if (!this._fastTransformUpdatesEnabled) return;
    this._cancelAutoDisableFastUpdates(), this._fastTransformUpdatesEnabled = false;
    const { stageObject: e37 } = this, a33 = e37.geometries.map((e38) => t29(e38.material));
    e37.removeAllGeometries();
    for (let s26 = 0; s26 < this._originalGeometries.length; s26++) {
      const t30 = this._originalGeometries[s26], r29 = a33[s26];
      r29.setParameters({ modelTransformation: null }), r29 === t30.material ? e37.addGeometry(t30) : e37.addGeometry(t30.instantiate({ material: r29 }));
    }
    this._originalGeometries.length = 0;
  }
  updateFastLocalOrigin(e37, a33, s26) {
    if (!this._fastTransformUpdatesEnabled) return;
    const { stageObject: r29 } = this;
    if (0 === r29.geometries.length) return;
    const o28 = r29.geometries[0].localOrigin, n29 = I2(g13, e37), m21 = s26.getOrigin(n29);
    if (m21 === o28) return;
    const l28 = a33?.localMatrix ?? r8;
    r29.shaderTransformation = null, r29.transformation = e37, r29.geometries.forEach((t29) => {
      t29.transformation = l28, t29.localOrigin = m21;
    });
  }
  updateTransform(t29, s26, r29) {
    const { stageObject: o28 } = this, n29 = s26?.localMatrix ?? r8;
    if (!this._fastTransformUpdatesEnabled) return o28.shaderTransformation = null, o28.transformation = t29, o28.geometries.forEach((t30) => t30.transformation = n29), void this._updateEdgeTransform(r29);
    const m21 = o28.transformation, l28 = o28.geometries[0].transformation, f22 = t29, d14 = n29, c25 = c2(u24, m21, l28), h23 = c2(T4, f22, d14), p23 = c2(_5, h23, h3(_5, l28));
    o28.shaderTransformation = p23, this._setFastMaterialTransformation({ matA: c25, matB: h23 }), this._updateEdgeTransform(r29);
  }
  alignWithElevation(t29, a33, r29, i18) {
    if (!this._fastTransformUpdatesEnabled) return void super.alignWithElevation(t29, a33, r29, i18);
    null != r29 && l15(this.elevationContext.featureExpressionInfoContext, r29);
    const o28 = (e37, s26) => c13(e37, t29, this.elevationContext, a33, s26), { stageObject: n29 } = this;
    if (!n29.geometries[0].material.parameters.modelTransformation) return;
    const m21 = n29.transformation, c25 = n29.geometries[0].transformation, h23 = c2(u24, m21, c25), p23 = n29.effectiveTransformation, g17 = n5(b12, p23);
    this.alignedSampledElevation = p14(this, this.elevationContext, t29.spatialReference, o28, a33, g17), n29.shaderTransformation = g17;
    const _10 = n29.geometries[0].transformation, U10 = c2(T4, g17, _10);
    this._setFastMaterialTransformation({ matA: h23, matB: U10 }), this._updateEdgeTransform(i18);
  }
  _setFastMaterialTransformation({ matA: t29, matB: s26 }) {
    const { stageObject: i18 } = this;
    if (0 === i18.geometries.length) return;
    const o28 = i18.geometries[0].localOrigin, m21 = q2(F4, g2(g13, o28.vec3, -1)), l28 = c2(U5, m21, t29), f22 = c2(E11, m21, s26), d14 = h3(U5, l28), c25 = c2(E11, f22, d14);
    for (const e37 of i18.geometries) e37.material.setParameters({ modelTransformation: c25 });
  }
  _updateEdgeTransform(t29) {
    const { stageObject: e37, _stageLayer: a33 } = this;
    a33.stage.renderer.withEdgeView((a34) => {
      a34.fastUpdateObject3DEdgesTransform(e37) || this.resetEdgeObject(t29);
    });
  }
};
var g13 = n4();
var u24 = e10();
var T4 = e10();
var b12 = e10();
var _5 = e10();
var U5 = e10();
var E11 = e10();
var F4 = e10();

// node_modules/@arcgis/core/views/3d/layers/graphics/MeshFastUpdateProcessor.js
var t23 = class {
  constructor() {
    this._fastTransformOriginalMaterials = /* @__PURE__ */ new Map(), this._fastTransformClonedMaterials = /* @__PURE__ */ new Map(), this._graphicReferenceCount = 0;
  }
  enable(t29, e37, r29) {
    t29.enableFastTransformUpdates((t30) => {
      if (this._graphicReferenceCount <= 1) {
        if (this._fastTransformOriginalMaterials.has(t30)) return t30;
        const a33 = e37.byMaterial(t30);
        return this._fastTransformOriginalMaterials.set(t30, a33), e37.delete(t30), t30;
      }
      const s26 = new W2(t30.parameters, r29);
      return this._fastTransformClonedMaterials.set(s26, t30), s26;
    }, r29.localOriginFactory);
  }
  disable(a33, t29) {
    const e37 = /* @__PURE__ */ new Set(), r29 = /* @__PURE__ */ new Set();
    a33.disableFastTransformUpdates((a34) => {
      if (!this._fastTransformClonedMaterials.has(a34)) {
        const s27 = a34, i19 = this._fastTransformOriginalMaterials.get(s27);
        return t29.has(i19.uid) ? (e37.add(s27), t29.byUid(i19.uid).material) : (r29.add(s27), i19.material);
      }
      const s26 = a34, i18 = this._fastTransformClonedMaterials.get(s26);
      return this._fastTransformClonedMaterials.delete(s26), i18;
    });
    for (const s26 of e37) this._fastTransformOriginalMaterials.delete(s26);
    for (const s26 of r29) {
      const a34 = this._fastTransformOriginalMaterials.get(s26);
      this._fastTransformOriginalMaterials.delete(s26), t29.set(a34.uid, a34);
    }
  }
  onAddGraphic() {
    this._graphicReferenceCount++;
  }
  onRemoveGraphic(a33, t29) {
    this._graphicReferenceCount--, this.disable(a33, t29);
  }
  forEachMaterialInfo(a33) {
    this._fastTransformOriginalMaterials.forEach(a33);
  }
  forEachClonedMaterial(a33) {
    this._fastTransformClonedMaterials.forEach(a33);
  }
  destroy() {
    this._fastTransformClonedMaterials.clear(), this._fastTransformOriginalMaterials.clear();
  }
};
var e31 = class {
  constructor() {
    this._byUid = /* @__PURE__ */ new Map(), this._byMaterial = /* @__PURE__ */ new Map();
  }
  get materials() {
    return Array.from(this._byUid.values(), (a33) => a33.material);
  }
  byUid(a33) {
    return this._byUid.get(a33);
  }
  byMaterial(a33) {
    return this._byMaterial.get(a33);
  }
  set(a33, t29) {
    this._byUid.set(a33, t29), this._byMaterial.set(t29.material, t29);
  }
  delete(a33) {
    const t29 = this._byMaterial.get(a33)?.uid;
    t29 && (this._byUid.delete(t29), this._byMaterial.delete(a33));
  }
  has(a33) {
    return this._byUid.has(a33);
  }
  forEachMaterialInfo(a33) {
    this._byUid.forEach(a33);
  }
  clear() {
    this._byUid.clear(), this._byMaterial.clear();
  }
};

// node_modules/@arcgis/core/views/3d/webgl-engine/shaders/NativeLineTechnique.js
var d8 = class extends g7 {
  constructor(e37, r29) {
    super(e37, r29, new t12(p17, () => import("./NativeLine.glsl-GP5J6US3.js"))), this.primitiveType = R2.LINES;
  }
  initializePipeline(i18) {
    const { hasOccludees: r29, output: o28, transparent: u31 } = i18, d14 = (e37, i19 = null, o29 = null) => B2({ blending: i19, depthTest: i11, depthWrite: o29, colorWrite: g6, stencilWrite: r29 ? e23 : null, stencilTest: r29 ? e37 ? o18 : f8 : null });
    return u14(o28) ? (this._occludeePipeline = d14(true, u31 ? c7 : null, p10), d14(false, u31 ? c7 : null, p10)) : d14(false);
  }
  getPipeline(e37) {
    return e37 ? this._occludeePipeline : super.getPipeline();
  }
};

// node_modules/@arcgis/core/views/3d/webgl-engine/shaders/NativeLineTechniqueConfiguration.js
var t24 = class extends a17 {
  constructor() {
    super(...arguments), this.hasVertexColors = false, this.transparent = false, this.hasOccludees = false, this.draped = false;
  }
};
r([i10()], t24.prototype, "hasVertexColors", void 0), r([i10()], t24.prototype, "transparent", void 0), r([i10()], t24.prototype, "hasOccludees", void 0);

// node_modules/@arcgis/core/views/3d/webgl-engine/materials/NativeLineMaterial.js
var U6 = class extends n16 {
  constructor(e37) {
    super(e37, q8), this._configuration = new t24(), this.produces = /* @__PURE__ */ new Map([[A7.OPAQUE_MATERIAL, (e38) => g5(e38)]]);
  }
  getConfiguration(e37, r29) {
    return super.getConfiguration(e37, r29, this._configuration), this._configuration.hasSlicePlane = this.parameters.hasSlicePlane, this._configuration.hasVertexColors = this.parameters.hasVertexColors, this._configuration.transparent = this.parameters.color[3] < 1 || this.parameters.width < 1, this._configuration.hasOccludees = r29.hasOccludees, this._configuration;
  }
  get visible() {
    return this.parameters.color[3] >= o19;
  }
  intersect(r29, t29, u31, p23, j10, S12) {
    const y15 = u31.camera;
    if (!u31.options.selectionMode || !r29.visible || !y15) return;
    if (!m8(t29)) return void i.getLogger("esri.views.3d.webgl-engine.materials.NativeLineMaterial").error("intersection assumes a translation-only matrix");
    const N8 = r29.attributes.get(e17.POSITION).data, R10 = H2;
    r10(R10, u31.point);
    const v7 = 2;
    o7(J4[0], R10[0] - v7, R10[1] + v7, 0), o7(J4[1], R10[0] + v7, R10[1] + v7, 0), o7(J4[2], R10[0] + v7, R10[1] - v7, 0), o7(J4[3], R10[0] - v7, R10[1] - v7, 0);
    for (let e37 = 0; e37 < 4; e37++) if (!y15.unprojectFromRenderScreen(J4[e37], K2[e37])) return;
    p7(y15.eye, K2[0], K2[1], Y3), p7(y15.eye, K2[1], K2[2], $), p7(y15.eye, K2[2], K2[3], ee), p7(y15.eye, K2[3], K2[0], re);
    let E17 = Number.MAX_VALUE, _10 = 0;
    for (let e37 = 0; e37 < N8.length - 5; e37 += 3) {
      if (B5[0] = N8[e37] + t29[12], B5[1] = N8[e37 + 1] + t29[13], B5[2] = N8[e37 + 2] + t29[14], D2[0] = N8[e37 + 3] + t29[12], D2[1] = N8[e37 + 4] + t29[13], D2[2] = N8[e37 + 5] + t29[14], V3(Y3, B5) < 0 && V3(Y3, D2) < 0 || V3($, B5) < 0 && V3($, D2) < 0 || V3(ee, B5) < 0 && V3(ee, D2) < 0 || V3(re, B5) < 0 && V3(re, D2) < 0) continue;
      if (y15.projectToRenderScreen(B5, G2), y15.projectToRenderScreen(D2, k7), G2[2] < 0 && k7[2] > 0) {
        c4(W4, B5, D2);
        const e38 = y15.frustum, r31 = -V3(e38[j5.NEAR], B5) / P2(W4, O(e38[j5.NEAR]));
        g2(W4, W4, r31), u10(B5, B5, W4), y15.projectToRenderScreen(B5, G2);
      } else if (G2[2] > 0 && k7[2] < 0) {
        c4(W4, D2, B5);
        const e38 = y15.frustum, r31 = -V3(e38[j5.NEAR], D2) / P2(W4, O(e38[j5.NEAR]));
        g2(W4, W4, r31), u10(D2, D2, W4), y15.projectToRenderScreen(D2, k7);
      } else if (G2[2] < 0 && k7[2] < 0) continue;
      G2[2] = 0, k7[2] = 0;
      const r30 = M3(h7(G2, k7, Z4), R10);
      r30 < E17 && (E17 = r30, s9(F5, B5), s9(Q2, D2), _10 = e37 / 3);
    }
    const w11 = u31.rayBegin, C11 = u31.rayEnd;
    if (E17 < v7 * v7) {
      let e37 = Number.MAX_VALUE;
      if (B(h7(F5, Q2, Z4), h7(w11, C11, z2), X2)) {
        c4(X2, X2, w11);
        const r30 = r7(X2);
        g2(X2, X2, 1 / r30), e37 = r30 / p5(w11, C11);
      }
      S12(e37, X2, _10);
    }
  }
  intersectDraped(e37, t29, o28, s26, i18) {
    if (!t29.options.selectionMode) return;
    const a33 = e37.attributes.get(e17.POSITION).data, n29 = e37.attributes.get(e17.SIZE), c25 = n29 ? n29.data[0] : 0, m21 = o28[0], l28 = o28[1], f22 = ((c25 + 1) / 2 + 4) * e37.screenToWorldRatio;
    let u31 = Number.MAX_VALUE, p23 = 0;
    for (let h23 = 0; h23 < a33.length - 5; h23 += 3) {
      const e38 = a33[h23], t30 = a33[h23 + 1], o29 = m21 - e38, s27 = l28 - t30, i19 = a33[h23 + 3] - e38, n30 = a33[h23 + 4] - t30, c26 = r4((i19 * o29 + n30 * s27) / (i19 * i19 + n30 * n30), 0, 1), f23 = i19 * c26 - o29, g17 = n30 * c26 - s27, d14 = f23 * f23 + g17 * g17;
      d14 < u31 && (u31 = d14, p23 = h23 / 3);
    }
    u31 < f22 * f22 && s26(i18.distance, i18.normal, p23);
  }
  createGLMaterial(e37) {
    return new I9(e37);
  }
  createBufferWriter() {
    const e37 = this.parameters.hasVertexColors ? f12 : I6;
    return new f7(e37);
  }
};
var I9 = class extends e22 {
  beginSlot(e37) {
    return this.getTechnique(d8, e37);
  }
};
var q8 = class extends d4 {
  constructor() {
    super(...arguments), this.color = s8, this.hasVertexColors = false, this.hasSlicePlane = false, this.width = 1;
  }
};
var B5 = n4();
var D2 = n4();
var W4 = n4();
var X2 = n4();
var G2 = y2();
var k7 = y2();
var F5 = n4();
var Q2 = n4();
var Z4 = v2();
var z2 = v2();
var H2 = n4();
var J4 = [y2(), y2(), y2(), y2()];
var K2 = [n4(), n4(), n4(), n4()];
var Y3 = M2();
var $ = M2();
var ee = M2();
var re = M2();

// node_modules/@arcgis/core/views/3d/layers/graphics/Graphics3DMeshFillSymbolLayer.js
var Fe = ["mesh"];
var Ve = class extends y7 {
  constructor(e37, t29, r29, o28) {
    super(e37, t29, r29, o28, rt(t29)), this._materialInfoCache = new e31(), this._fastUpdateProcessor = new t23(), this._textures = /* @__PURE__ */ new Map(), this.ensureDrapedStatus(false);
  }
  async doLoad() {
    t13.DRAW_MESH_GEOMETRY_NORMALS && (this._debugVertexNormalMaterial = new U6({ color: [1, 0, 1, 1] }), this._debugTangentNormalMaterial = new U6({ color: [1, 0.5, 0, 1] }), this._debugFaceNormalMaterial = new U6({ color: [0, 1, 1, 1] })), this.updateComplexity();
  }
  destroy() {
    super.destroy(), this._textures.forEach((e37) => e37.unload()), this._context.stage.removeTextures(Array.from(this._textures.values())), this._materialInfoCache.clear(), this._textures.clear(), this._fastUpdateProcessor.destroy();
  }
  get materials() {
    return this._materialInfoCache.materials;
  }
  createGraphics3DGraphic(e37) {
    const t29 = e37.graphic;
    if (!this._validateGeometry(t29.geometry, Fe, "fill on mesh-3d")) return null;
    const r29 = this.setGraphicElevationContext(t29), o28 = e37.renderingInfo;
    return this._createAs3DShape(t29, o28, r29, t29.uid);
  }
  onRemoveGraphic(e37) {
    this._fastUpdateProcessor.onRemoveGraphic(e37, this._materialInfoCache);
  }
  layerOpacityChanged(e37, t29) {
    const r29 = this._getLayerOpacity();
    this._updateMaterialParameters((e38) => {
      e38.material.setParameters({ layerOpacity: r29 });
      const t30 = e38.material.parameters;
      this._setMaterialTextureAlphaMode(t30, e38);
    }), e37?.forEach((e38) => t29(e38)?.layerOpacityChanged(r29, this._context.isAsync));
  }
  layerElevationInfoChanged(e37, t29) {
    return this.updateGraphics3DGraphicElevationInfo(e37, t29, g10);
  }
  slicePlaneEnabledChanged(e37, t29) {
    return this._updateMaterialParameters(({ material: e38 }) => {
      e38.setParameters({ hasSlicePlane: this._context.slicePlaneEnabled });
    }), e37?.forEach((e38) => t29(e38)?.slicePlaneEnabledChanged(this._context.slicePlaneEnabled, this._context.isAsync)), true;
  }
  physicalBasedRenderingChanged() {
    const e37 = this._usePBR();
    return this._updateMaterialParameters(({ material: t29 }) => t29.setParameters({ usePBR: e37 })), true;
  }
  updateTransform(e37, t29, r29, o28) {
    if (!e37.fastTransformUpdatesAllowed) return false;
    const a33 = e37.fastTransformUpdatesEnabled;
    switch (o28) {
      case a22.EnableFastUpdates:
        if (a33) return true;
        break;
      case a22.DisableFastUpdates:
        if (!a33) return true;
        break;
      default:
        if (!a33) return !!this.updateTransform(e37, t29, r29, a22.EnableFastUpdates) && (e37.autoDisableFastTransformUpdates(() => this.updateTransform(e37, t29, r29, a22.DisableFastUpdates)), true);
    }
    const s26 = this._context.renderCoordsHelper.spatialReference, n29 = ut2, { origin: i18, transform: l28 } = r29;
    if (!m7(t29, o7(st2, i18.x, i18.y, i18.z ?? 0), n29, s26)) return false;
    switch (o28) {
      case a22.EnableFastUpdates:
        this._fastUpdateProcessor.enable(e37, this._materialInfoCache, this._context);
        break;
      case a22.DisableFastUpdates:
        this._fastUpdateProcessor.disable(e37, this._materialInfoCache);
        break;
      case a22.UpdateFastLocalOrigin:
        e37.updateFastLocalOrigin(n29, l28, this._context.localOriginFactory);
    }
    const { elevationContext: c25 } = e37;
    c25.centerPointInElevationSR = this._getCenterPointInElevationSR(n29);
    const { elevationProvider: u31, renderCoordsHelper: m21 } = this._context, f22 = (e38, t30) => c13(e38, u31, c25, m21, t30);
    return e37.alignedSampledElevation = p14(e37, c25, u31.spatialReference, f22, m21, n29), e37.updateTransform(n29, l28, this._context.isAsync), e37.updateAutoDisableFastTransformUpdates(() => this.updateTransform(e37, t29, r29, a22.DisableFastUpdates)), true;
  }
  computeComplexity() {
    if (!this._textures || 0 === this._textures.size) return super.computeComplexity();
    let e37 = 0;
    for (const o28 of this._textures.values()) e37 += o28.usedMemory;
    const t29 = { ...C6(this.symbol, this.symbolLayer), resourceBytes: e37 }, r29 = c6(this.symbolLayer) ? 2 : 0;
    return new e27({ drawCallsPerFeature: r29, memory: t29 });
  }
  _requiresSymbolVertexColors() {
    return this._drivenProperties.color || this._drivenProperties.opacity;
  }
  _materialPropertiesDefault(e37, t29) {
    const r29 = this._requiresSymbolVertexColors(), o28 = !!e37.vertexAttributes.color, a33 = !!e37.vertexAttributes.tangent;
    return { hasSymbolVertexColors: r29, hasVertexColors: o28, hasVertexTangents: a33, uid: `vc:${o28},vt:${a33},vct${t29},svc:${r29}` };
  }
  _materialProperties(e37, t29, r29) {
    const o28 = this._materialPropertiesDefault(e37, r29);
    if (!t29.material) return o28;
    const { color: a33, colorTexture: s26, colorTextureTransform: n29, normalTexture: i18, normalTextureTransform: l28, doubleSided: c25, alphaCutoff: u31, alphaMode: m21 } = t29.material, f22 = Xe(a33), p23 = Xe(s26), h23 = et(n29), d14 = Xe(i18), g17 = et(l28);
    if (o28.color = a33, o28.colorTexture = s26, o28.normalTexture = i18, o28.uid = `${o28.uid},cmuid:${f22},ctmuid:${p23},cttuid:${h23},ntmuid:${d14},nttuid:${g17},ds:${c25},ac:${u31},am:${m21}`, t29.material instanceof u11) {
      const { metallic: e38, roughness: r30, metallicRoughnessTexture: a34, metallicRoughnessTextureTransform: s27, emissiveColor: i19, emissiveTexture: c26, emissiveTextureTransform: u32, occlusionTexture: m22, occlusionTextureTransform: f23 } = t29.material, p24 = Xe(a34), h24 = et(s27), d15 = Xe(i19), g18 = Xe(c26), x8 = et(u32), _10 = Xe(m22), y15 = et(f23);
      o28.metallic = e38, o28.roughness = r30, o28.metallicRoughnessTexture = a34, o28.emissiveColor = i19, o28.emissiveTexture = c26, o28.occlusionTexture = m22, o28.colorTextureTransform = We(n29), o28.normalTextureTransform = We(l28), o28.emissiveTextureTransform = We(u32), o28.occlusionTextureTransform = We(f23), o28.metallicRoughnessTextureTransform = We(s27), o28.uid = `${o28.uid},mrm:${e38},mrr:${r30},mrt:${p24},mrtt:${h24},emuid:${d15},etmuid:${g18},ett:${x8},otmuid:${_10},ott:${y15}`;
    }
    return o28;
  }
  _getInternalTexture(e37, t29 = false, a33 = i7.Opaque) {
    const s26 = Qe(e37);
    if (!s26) return null;
    const n29 = `${e37.contentHash}/${a33}`;
    let i18 = this._textures.get(n29);
    if (i18) {
      const e38 = this._context.stage.renderView.textures;
      let t30 = null;
      const a34 = e38.acquire(i18.id);
      return null == a34 || S(a34) || (i18.events.on("unloaded", () => t30 = t(t30)), t30 = a34), i18;
    }
    let l28 = null;
    const c25 = this._context.stage.renderView.renderingContext.parameters.maxMaxAnisotropy, u31 = { wrap: Ye(e37.wrap), noUnpackFlip: true, maxAnisotropy: c25, mipmap: c25 > 1 };
    return n10(s26) ? (l28 = s26.data, u31.preMultiplyAlpha = false, u31.encoding = s26.encoding) : (l28 = s26, u31.preMultiplyAlpha = a33 !== i7.Opaque, u31.compressionOptions = t29 ? { compressionTracker: this._context.compressionTracker, compressionCallback: () => this.updateComplexity() } : void 0), i18 = new L5(l28, u31), this._textures.set(n29, i18), i18.events.on("loaded", () => this.updateComplexity()), i18.load(this._context.stage.renderView.renderingContext), this._context.stage.addTexture(i18), i18.events.on("unloaded", () => {
      this._textures.delete(n29);
    }), i18;
  }
  _setInternalMaterialTextureParameters(t29, r29) {
    if (null != t29.colorTexture) {
      const e37 = r29.textureAlphaMode !== i7.Opaque, o28 = this._getInternalTexture(t29.colorTexture, e37, r29.textureAlphaMode);
      o28 ? (r29.textureId = o28.id, r29.textureAlphaPremultiplied = !!o28.parameters.preMultiplyAlpha) : r29.textureId = void 0;
    }
    t29.normalTexture && (r29.normalTextureId = this._getInternalTexture(t29.normalTexture)?.id), t29.emissiveColor && (r29.emissiveBaseColor = l4.toUnitRGB(t29.emissiveColor)), t29.emissiveTexture && (r29.emissiveTextureId = this._getInternalTexture(t29.emissiveTexture)?.id), t29.occlusionTexture && (r29.occlusionTextureId = this._getInternalTexture(t29.occlusionTexture, true)?.id), t29.metallicRoughnessTexture && (r29.metallicRoughnessTextureId = this._getInternalTexture(t29.metallicRoughnessTexture, true)?.id);
  }
  _setInternalMaterialParameters(e37, t29, r29) {
    null != e37.color && Ke(e37.color, t29, r29), this._setInternalMaterialTextureParameters(e37, t29), t29.colorTextureTransformMatrix = s14(e37.colorTextureTransform), t29.normalTextureTransformMatrix = s14(e37.normalTextureTransform);
    const o28 = null != e37.normalTextureTransform?.scale ? e37.normalTextureTransform?.scale : a12;
    t29.scale = [o28[0], o28[1]], t29.occlusionTextureTransformMatrix = s14(e37.occlusionTextureTransform), t29.emissiveTextureTransformMatrix = s14(e37.emissiveTextureTransform), t29.metallicRoughnessTextureTransformMatrix = s14(e37.metallicRoughnessTextureTransform);
  }
  _setExternalMaterialParameters(t29, r29 = this.symbolLayer?.material?.color) {
    const o28 = this._drivenProperties.color, a33 = this._drivenProperties.opacity;
    let s26 = this.symbolLayer.material?.colorMixMode ?? null;
    if (o28) t29.externalColor = s8;
    else {
      const o29 = r29 ?? null;
      if (o29) {
        const r30 = l4.toUnitRGBA(o29);
        a33 && (r30[3] = 1), t29.externalColor = r30;
      } else s26 = null, t29.externalColor = s8;
    }
    s26 && (t29.colorMixMode = s26), t29.castShadows = !!this.symbolLayer.castShadows, t29.emissiveStrength = this.symbolLayer?.material?.emissive?.strength ?? 1, t29.emissiveSource = p3(this.symbolLayer?.material?.emissive?.source ?? "emissive");
  }
  _getOrCreateMaterial(t29, r29) {
    const o28 = r29.material?.color, a33 = r29.material?.colorTexture, s26 = r29.material?.alphaMode, n29 = "blend" === s26, i18 = !("opaque" === s26) && (Je(t29) || null != o28 && o28.a < 1 || a33?.transparent || n29), l28 = this._materialProperties(t29, r29, i18), c25 = this._materialInfoCache.byUid(l28.uid);
    if (c25) return this._setInternalMaterialTextureParameters(l28, c25.material.parameters), c25.material;
    const u31 = { uid: l28.uid, material: null, isComponentTransparent: i18, alphaMode: r29.material ? r29.material.alphaMode : "opaque" }, m21 = n14({ normalTexture: l28.normalTexture, metallicRoughnessTexture: l28.metallicRoughnessTexture, metallicFactor: l28.metallic, roughnessFactor: l28.roughness, emissiveTexture: l28.emissiveTexture, emissiveFactor: l4.toUnitRGB(l28.emissiveColor), occlusionTexture: l28.occlusionTexture }), f22 = { usePBR: this._usePBR(), isSchematic: m21, hasVertexColors: l28.hasVertexColors, hasSymbolColors: l28.hasSymbolVertexColors, hasVertexTangents: l28.hasVertexTangents, ambient: a7, diffuse: _2, opacity: 1, doubleSided: true, doubleSidedType: "winding-order", cullFace: e15.None, layerOpacity: this._getLayerOpacity(), hasSlicePlane: this._context.slicePlaneEnabled, drivenOpacity: this.needsDrivenTransparentPass || u31.isComponentTransparent };
    f22.mrrFactors = m21 ? o14 : [l28.metallic, l28.roughness, t11[2]], r29.material && (f22.doubleSided = r29.material.doubleSided, f22.cullFace = r29.material.doubleSided ? e15.None : e15.Back, f22.textureAlphaCutoff = r29.material.alphaCutoff), this._setExternalMaterialParameters(f22), this._setMaterialTextureAlphaMode(f22, u31), this._setInternalMaterialParameters(l28, f22, u31);
    const p23 = new W2(f22, this._context);
    return u31.material = p23, this._materialInfoCache.set(l28.uid, u31), p23;
  }
  prepareSymbolLayerPatch(e37) {
    if ("partial" !== e37.diff.type) return;
    const t29 = e37.diff.diff;
    this._preparePatchColor(e37, t29);
  }
  _preparePatchColor(e37, t29) {
    if (!t29.material || "partial" !== t29.material.type) return;
    const r29 = t29.material.diff;
    if (!r29.color || "complete" !== r29.color.type || null == r29.color.newValue || null == r29.color.oldValue) return;
    const o28 = r29.color.newValue;
    delete r29.color, e37.symbolLayerStatePatches.push(() => {
      this._updateMaterialParameters((e38) => {
        const t30 = e38.material.parameters;
        this._setExternalMaterialParameters(t30, o28), this._setMaterialTextureAlphaMode(t30, e38), e38.material.setParameters({ externalColor: t30.externalColor });
      });
    });
  }
  _usePBR() {
    return this._context.physicalBasedRenderingEnabled;
  }
  _setMaterialTextureAlphaMode(e37, t29) {
    if ("auto" === t29.alphaMode) {
      const r29 = this.needsDrivenTransparentPass || t29.isComponentTransparent || (e37.layerOpacity ?? 1) < 1 || (e37.opacity ?? 1) < 1 || (e37.externalColor?.[3] ?? 1) < 1;
      e37.textureAlphaMode = r29 ? i7.MaskBlend : i7.Opaque;
    } else e37.textureAlphaMode = "opaque" === t29.alphaMode ? i7.Opaque : "mask" === t29.alphaMode ? i7.Mask : i7.Blend;
  }
  _createFaceDebugNormals(e37, t29) {
    const r29 = t29.length, o28 = e37.spatialReference.isGeographic ? 20015077 / 180 : 1, s26 = 0.1 * Math.max(e37.extent.width * o28, e37.extent.height * o28, e37.extent.zmax - e37.extent.zmin), i18 = [], l28 = [], c25 = t29[0].transformation, u31 = j3(e11(), c25);
    for (let a33 = 0; a33 < r29; a33++) {
      const e38 = t29[a33].attributes.get(e17.POSITION);
      if (!e38) continue;
      const r30 = e38.data, o29 = e38.indices;
      for (let t30 = 0; t30 < o29.length; t30 += 3) ze(r30, o29, t30, lt3), qe(r30, o29, t30, st2, nt2, it3), u10(st2, st2, nt2), u10(st2, st2, it3), g2(st2, st2, 1 / 3), E2(st2, st2, c25), i18.push(...st2), N(lt3, lt3, u31), A2(lt3, lt3), q3(st2, st2, lt3, s26), i18.push(...st2), l28.push(l28.length), l28.push(l28.length);
    }
    return i18.length ? new p9(this._debugFaceNormalMaterial, [[e17.POSITION, new t10(i18, l28, 3, true)]], null, n13.Line) : null;
  }
  _createPerVertexDebugVectors(e37, t29, r29, o28, i18) {
    const l28 = t29.length, c25 = e37.spatialReference.isGeographic ? 20015077 / 180 : 1, u31 = 0.1 * i18 * Math.max(e37.extent.width * c25, e37.extent.height * c25, e37.extent.zmax - e37.extent.zmin), m21 = [], f22 = [], p23 = t29[0].transformation, h23 = j3(e11(), p23);
    r29 === e17.TANGENT && n9(h23, p23);
    for (let a33 = 0; a33 < l28; a33++) {
      const e38 = t29[a33], o29 = e38.attributes.get(e17.POSITION), s26 = e38.attributes.get(r29);
      if (!o29 || !s26) continue;
      const n29 = o29.data, i19 = o29.indices, l29 = s26.data, c26 = s26.indices;
      for (let t30 = 0; t30 < i19.length; t30++) {
        const e39 = 3 * i19[t30], r30 = c26[t30] * s26.stride;
        o7(st2, n29[e39 + 0], n29[e39 + 1], n29[e39 + 2]), E2(st2, st2, p23), m21.push(...st2), o7(nt2, l29[r30 + 0], l29[r30 + 1], l29[r30 + 2]), N(nt2, nt2, h23), A2(nt2, nt2), q3(st2, st2, nt2, u31), m21.push(...st2), f22.push(f22.length), f22.push(f22.length);
      }
    }
    return m21.length ? new p9(o28, [[e17.POSITION, new t10(m21, f22, 3, true)]], null, n13.Line) : null;
  }
  _createAs3DShape(e37, t29, r29, o28) {
    const a33 = e37.geometry;
    if ("mesh" !== a33.type) return null;
    const s26 = this._createGeometryInfo(a33, t29, o28);
    if (null == s26) return null;
    const { geometries: n29, objectTransformation: i18 } = s26;
    if (t13.DRAW_MESH_GEOMETRY_NORMALS) {
      const e38 = this._createPerVertexDebugVectors(a33, n29, e17.NORMAL, this._debugVertexNormalMaterial, 1), t30 = this._createPerVertexDebugVectors(a33, n29, e17.TANGENT, this._debugTangentNormalMaterial, 0.5), r30 = this._createFaceDebugNormals(a33, n29);
      e38 && n29.push(e38), t30 && n29.push(t30), r30 && n29.push(r30);
    }
    const l28 = this._context.layerViewUid, c25 = new A8({ geometries: n29, layerViewUid: l28, graphicUid: o28, isElevationSource: true });
    c25.transformation = i18;
    const u31 = a15(this.symbolLayer, { opacity: this._getLayerOpacity() }), m21 = u31 ? new m13(n29[0].material, u31, this._context.slicePlaneEnabled) : null, f22 = new p21(this, c25, null, p14, r29, m21);
    this._fastUpdateProcessor.onAddGraphic(), f22.needsElevationUpdates = g10(r29.mode), f22.useObjectOriginAsAttachmentOrigin = true, f22.fastTransformUpdatesAllowed = this._fastTransformUpdatesAllowed(a33), r29.centerPointInElevationSR = this._getCenterPointInElevationSR(c25.transformation);
    const { elevationProvider: p23, renderCoordsHelper: h23 } = this._context, d14 = (e38, t30) => c13(e38, p23, r29, h23, t30);
    return f22.alignedSampledElevation = p14(f22, r29, p23.spatialReference, d14, h23), f22;
  }
  _fastTransformUpdatesAllowed(e37) {
    const { vertexSpace: t29, spatialReference: r29 } = e37;
    if (!t5(t29)) return false;
    const { type: o28 } = t29, { view: a33 } = this._context.graphicsCoreOwner, { viewingMode: s26 } = a33.state, n29 = a33.spatialReference;
    return s26 === l10.Global && "local" === o28 || s26 === l10.Local && s4(n29, r29) && "georeferenced" === o28 && !r29.isGeographic;
  }
  _getCenterPointInElevationSR(e37) {
    const t29 = e16(0, 0, 0, this._context.elevationProvider.spatialReference ?? null);
    return o22([e37[12], e37[13], e37[14]], this._context.renderCoordsHelper.spatialReference, t29), t29;
  }
  _passthroughReprojectionInfo(e37) {
    return e37.reprojection === pt2.NONE && !!e37.objectTransformation;
  }
  _createPositionBuffer(e37, t29) {
    const r29 = e37.vertexAttributes.position;
    let o28, a33 = r29;
    if (t29.reprojection === pt2.NONE) return { position: a33, georeferencedPositionBuffer: o28 };
    const s26 = t29.reprojection === pt2.RENDER ? t29.transformBeforeProject : null;
    s26 && (a33 = r11(new Float64Array(a33.length), a33, s26));
    const { normal: n29, tangent: i18 } = e37.vertexAttributes;
    this._passthroughReprojectionInfo(t29) || !n29 && !i18 || (o28 = a33);
    const l28 = a33 === r29 || a33 === o28 ? new Float64Array(a33.length) : a33;
    return o4(a33, e37.spatialReference, 0, l28, this._context.renderCoordsHelper.spatialReference, 0), { position: l28, georeferencedPositionBuffer: o28 };
  }
  _createNormalBuffer(e37, t29, r29, o28) {
    const a33 = e37.vertexAttributes.normal;
    if (null == a33) return null;
    let s26 = a33;
    const n29 = o28.reprojection === pt2.RENDER ? o28.transformBeforeProject : null;
    n29 && (s26 = _4(s26, new Float32Array(s26.length), n29));
    const i18 = this._context.graphicsCoreOwner.view.viewingMode;
    if (o28.reprojection === pt2.NONE) return s26;
    if ("local" === i18) {
      if (!f(this._context.renderCoordsHelper.spatialReference)) return s26;
      if (null == r29) return null;
      if (e37.spatialReference.isGeographic) {
        const e38 = s26 === a33 ? new Float32Array(s26.length) : s26;
        return b4(s26, V4.NORMAL, r29, e38);
      }
      if (e37.spatialReference.isWebMercator) {
        const e38 = s26 === a33 ? new Float32Array(s26.length) : s26;
        return L3(s26, V4.NORMAL, r29, e38);
      }
      return s26;
    }
    if (null == r29) return null;
    const l28 = s26 === a33 ? new Float32Array(s26.length) : s26, c25 = this._context.renderCoordsHelper.spatialReference;
    return E3(s26, r29, e37.spatialReference, t29, c25, l28);
  }
  _createTangentBuffer(e37, t29, r29, o28) {
    const a33 = e37.vertexAttributes.tangent;
    if (null == a33) return null;
    let s26 = a33;
    const n29 = o28.reprojection === pt2.RENDER ? o28.transformBeforeProject : null;
    n29 && (s26 = C2(s26, new Float32Array(s26.length), n29));
    const i18 = this._context.graphicsCoreOwner.view.viewingMode;
    if (o28.reprojection === pt2.NONE) return s26;
    if ("local" === i18) {
      if (!f(this._context.renderCoordsHelper.spatialReference)) return s26;
      if (null == r29) return null;
      if (e37.spatialReference.isGeographic) {
        const e38 = s26 === a33 ? new Float32Array(s26.length) : s26;
        return b4(s26, V4.TANGENT, r29, e38);
      }
      if (e37.spatialReference.isWebMercator) {
        const e38 = s26 === a33 ? new Float32Array(s26.length) : s26;
        return L3(s26, V4.TANGENT, r29, e38);
      }
      return s26;
    }
    if (null == r29) return null;
    const l28 = s26 === a33 ? new Float32Array(s26.length) : s26, c25 = this._context.renderCoordsHelper.spatialReference;
    return w2(s26, r29, e37.spatialReference, t29, c25, l28);
  }
  _createSymbolColorBuffer(e37) {
    if (this._requiresSymbolVertexColors()) {
      const t29 = this._getVertexOpacityAndColor(e37, this._getFallbackOpacityAndColor()), r29 = e18(this.symbolLayer?.material?.colorMixMode), o28 = new Uint8Array(4);
      return r12(t29, r29, o28), o28;
    }
    return null;
  }
  _createBuffers(e37, t29) {
    const r29 = e37.vertexAttributes && e37.vertexAttributes.position;
    if (!r29) return this.logger.warn("Mesh geometry must contain position vertex attributes"), null;
    const o28 = e37.vertexAttributes.normal, a33 = e37.vertexAttributes.uv, s26 = e37.vertexAttributes.tangent;
    if (o28 && o28.length !== r29.length) return this.logger.warn("Mesh normal vertex buffer must contain the same number of elements as the position buffer"), null;
    if (s26 && s26.length / 4 != r29.length / 3) return this.logger.warn("Mesh tangent vertex buffer must contain the same number of elements as the position buffer"), null;
    if (a33 && a33.length / 2 != r29.length / 3) return this.logger.warn("Mesh uv vertex buffer must contain the same number of elements as the position buffer"), null;
    const n29 = this._computeReprojectionInfo(e37), { position: i18, georeferencedPositionBuffer: l28 } = this._createPositionBuffer(e37, n29), c25 = tt(e37), u31 = this._createSymbolColorBuffer(t29), f22 = this._createNormalBuffer(e37, i18, l28, n29), p23 = this._createTangentBuffer(e37, i18, l28, n29), h23 = a33, { transformation: d14, position: g17, normal: x8, tangent: _10 } = this._passthroughReprojectionInfo(n29) ? { transformation: n29.objectTransformation, position: i18, normal: f22, tangent: p23 } : this._transformOriginLocal(e37, i18, f22, p23);
    return { positionBuffer: g17, normalBuffer: x8, tangentBuffer: _10, uvBuffer: h23, colorBuffer: c25, symbolColorBuffer: u31, objectTransformation: d14, geometryTransformation: n29.reprojection === pt2.NONE && n29.geometryTransformation ? n29.geometryTransformation : e10() };
  }
  _computeReprojectionInfo(e37) {
    const { vertexSpace: t29 } = e37, r29 = "georeferenced" === t29.type ? s4(this._context.renderCoordsHelper.spatialReference, e37.spatialReference) ? pt2.NONE : pt2.RENDER : pt2.NONE;
    if (o8(t29)) return { reprojection: r29 };
    const o28 = t29.origin, a33 = e10(), s26 = e37.transform?.localMatrix ?? r8;
    if (r29 === pt2.NONE) {
      m7(e37.spatialReference, o28, a33, this._context.renderCoordsHelper.spatialReference);
      return { reprojection: r29, objectTransformation: a33, geometryTransformation: t6(s26) };
    }
    const n29 = q2(e10(), o28);
    return c2(n29, n29, s26), { reprojection: r29, transformBeforeProject: n29 };
  }
  _transformOriginLocal(e37, t29, r29, o28) {
    const a33 = this._context.renderCoordsHelper.spatialReference, s26 = e37.origin;
    at2[0] = s26.x, at2[1] = s26.y, at2[2] = s26.z ?? 0;
    const n29 = e10();
    m7(e37.spatialReference, at2, n29, a33), h3(ct2, n29);
    const { position: i18, normal: l28, tangent: u31 } = e37.vertexAttributes, f22 = t29 === i18 ? new Float64Array(t29.length) : t29;
    r11(f22, t29, ct2);
    const p23 = r29 ? r29 === l28 ? new Float32Array(r29.length) : r29 : null, h23 = o28 ? o28 === u31 ? new Float32Array(o28.length) : o28 : null;
    return r29 && p23 && _4(r29, p23, ct2), o28 && h23 && C2(o28, h23, ct2), { transformation: n29, position: f22, normal: p23, tangent: h23 };
  }
  _validateFaces(e37, t29) {
    const r29 = e37.vertexAttributes.position.length / 3, o28 = t29.faces;
    if (o28) {
      let e38 = -1;
      for (let t30 = 0; t30 < o28.length; t30++) {
        const r30 = o28[t30];
        r30 > e38 && (e38 = r30);
      }
      if (r29 <= e38) return this.logger.warn(`Vertex index ${e38} is out of bounds of the mesh position buffer`), false;
    } else if (r29 % 3 != 0) return this.logger.warn("Mesh position buffer length must be a multiple of 9 if no component faces are defined (3 values per vertex * 3 vertices per triangle)"), false;
    return true;
  }
  _isOutsideClippingArea(e37) {
    if (!this._context.clippingExtent) return false;
    const t29 = e37.vertexAttributes?.position;
    if (!t29) return false;
    const r29 = this._context.elevationProvider.spatialReference, o28 = n17(e37, r29 ?? e37.spatialReference);
    return !!o28 && (m4(o28, mt2), !A(mt2, this._context.clippingExtent));
  }
  _createGeometryInfo(e37, t29, r29) {
    if (!L2(e37.spatialReference, this._context.renderCoordsHelper.spatialReference)) return this.logger.warn("Geometry spatial reference is not compatible with the view"), null;
    if (!this._validateVertexSpace(e37)) return null;
    if (this._isOutsideClippingArea(e37)) return null;
    const o28 = this._createBuffers(e37, t29);
    if (null == o28) return null;
    const { positionBuffer: a33, uvBuffer: s26, colorBuffer: n29, symbolColorBuffer: i18, normalBuffer: l28, tangentBuffer: c25, objectTransformation: m21, geometryTransformation: f22 } = o28, p23 = e37.components ?? ft2, h23 = new Array();
    let d14 = false;
    const g17 = I2(st2, m21), x8 = this._context.localOriginFactory.getOrigin(g17);
    for (const u31 of p23) {
      if (!this._validateFaces(e37, u31)) return null;
      const t30 = De(e37, u31);
      if (0 === t30.length) continue;
      const o29 = Ge(a33, l28, u31, t30);
      o29.didFlipNormals && (d14 = true);
      const m22 = [[e17.POSITION, new t10(a33, t30, 3, true)], [e17.NORMAL, new t10(o29.normals, o29.indices, 3, true)]];
      n29 && m22.push([e17.COLOR, new t10(n29, t30, 4, true)]), i18 && m22.push([e17.SYMBOLCOLOR, new t10(i18, U(t30.length), 4, true)]), s26 && m22.push([e17.UV0, new t10(s26, t30, 2, true)]), c25 && m22.push([e17.TANGENT, new t10(c25, t30, 4, true)]);
      const p24 = this._context.stage.renderView.getObjectAndLayerIdColor({ graphicUid: r29, layerViewUid: this._context.layerViewUid }), g18 = this._getOrCreateMaterial(e37, u31), _10 = new p9(g18, m22, null, n13.Mesh, p24);
      _10.transformation = f22, _10.localOrigin = x8, h23.push(_10);
    }
    return d14 && this.logger.warn("Normals have been automatically flipped to be consistent with the counter clock wise face winding order. It is better to generate mesh geometries that have consistent normals."), { geometries: h23, objectTransformation: m21 };
  }
  _updateMaterialParameters(e37) {
    this._materialInfoCache.forEachMaterialInfo(e37), this._fastUpdateProcessor.forEachMaterialInfo(e37), this._fastUpdateProcessor.forEachClonedMaterial((e38, t29) => {
      t29.setParameters(e38.parameters);
    });
  }
  _validateVertexSpace(e37) {
    const { _context: { graphicsCoreOwner: { view: { state: { viewingMode: t29 } } } } } = this, { vertexSpace: r29 } = e37;
    return t29 !== l10.Local || "local" !== r29.type || (this.logger.warn("Displaying a mesh with a local vertex space in a view in local viewing mode is not supported."), false);
  }
  test() {
    return { ...super.test(), materials: this._materialInfoCache.materials };
  }
  _getFallbackOpacityAndColor() {
    const t29 = this.symbolLayer?.material?.color;
    return l4.toUnitRGBA(t29) ?? a10;
  }
};
var Le = class {
  constructor(e37, t29, r29) {
    this.normals = e37, this.indices = t29, this.didFlipNormals = r29;
  }
};
function De(e37, t29) {
  return t29.faces ?? A3(e37.vertexAttributes.position.length / 3);
}
function Ge(e37, t29, r29, o28) {
  switch (r29.shading || "flat") {
    default:
    case "source":
      return He(e37, t29, r29, o28);
    case "flat":
      return $e(e37, o28);
    case "smooth":
      return ke(e37, o28);
  }
}
function $e(e37, t29) {
  const r29 = n12(t29.length), o28 = new Array(3 * t29.length);
  for (let a33 = 0; a33 < t29.length; a33 += 3) {
    const s26 = ze(e37, t29, a33, lt3);
    for (let e38 = 0; e38 < 3; e38++) r29[a33 + e38] = s26[e38], o28[a33 + e38] = a33 / 3;
  }
  return new Le(r29, o28, false);
}
function He(e37, t29, r29, o28) {
  if (null == t29) return $e(e37, o28);
  let a33 = false;
  if (!r29.trustSourceNormals) for (let s26 = 0; s26 < o28.length; s26 += 3) {
    ze(e37, o28, s26, lt3);
    for (let e38 = 0; e38 < 3; e38++) {
      const r30 = 3 * o28[s26 + e38];
      st2[0] = t29[r30], st2[1] = t29[r30 + 1], st2[2] = t29[r30 + 2], P2(lt3, st2) < 0 && (t29[r30] = -t29[r30], t29[r30 + 1] = -t29[r30 + 1], t29[r30 + 2] = -t29[r30 + 2], a33 = true);
    }
  }
  return new Le(t29, o28, a33);
}
function ke(e37, t29) {
  const r29 = {};
  for (let s26 = 0; s26 < t29.length; s26 += 3) {
    const o29 = ze(e37, t29, s26, lt3);
    for (let e38 = 0; e38 < 3; e38++) {
      const a34 = t29[s26 + e38];
      let n29 = r29[a34];
      n29 || (n29 = { normal: n4(), count: 0 }, r29[a34] = n29), u10(n29.normal, n29.normal, o29), n29.count++;
    }
  }
  const o28 = n12(3 * t29.length), a33 = new Array(3 * t29.length);
  for (let s26 = 0; s26 < t29.length; s26++) {
    const e38 = r29[t29[s26]];
    1 !== e38.count && (A2(e38.normal, e38.normal), e38.count = 1);
    for (let t30 = 0; t30 < 3; t30++) o28[3 * s26 + t30] = e38.normal[t30];
    a33[s26] = s26;
  }
  return new Le(o28, a33, false);
}
function qe(e37, t29, r29, o28, a33, s26) {
  const n29 = 3 * t29[r29], i18 = 3 * t29[r29 + 1], l28 = 3 * t29[r29 + 2];
  o28[0] = e37[n29], o28[1] = e37[n29 + 1], o28[2] = e37[n29 + 2], a33[0] = e37[i18], a33[1] = e37[i18 + 1], a33[2] = e37[i18 + 2], s26[0] = e37[l28], s26[1] = e37[l28 + 1], s26[2] = e37[l28 + 2];
}
function ze(e37, t29, r29, o28) {
  return qe(e37, t29, r29, st2, nt2, it3), c4(nt2, nt2, st2), c4(it3, it3, st2), _3(st2, nt2, it3), A2(o28, st2), o28;
}
function We(e37) {
  if (!e37) return null;
  const { scale: r29, offset: o28, rotation: a33 } = e37;
  return { scale: r29, offset: o28, rotation: s3(a33) };
}
function Ye(e37 = "repeat") {
  if ("string" == typeof e37) {
    const t29 = Ze(e37);
    return { s: t29, t: t29 };
  }
  return { s: Ze(e37.horizontal), t: Ze(e37.vertical) };
}
function Ze(e37) {
  switch (e37) {
    case "clamp":
      return P4.CLAMP_TO_EDGE;
    case "mirror":
      return P4.MIRRORED_REPEAT;
    default:
      return P4.REPEAT;
  }
}
function Je(e37) {
  const t29 = e37.vertexAttributes.color;
  if (null == t29) return false;
  for (let r29 = 3; r29 < t29.length; r29 += 4) if (255 !== t29[r29]) return true;
  return false;
}
function Ke(t29, r29, o28) {
  r29.diffuse = l4.toUnitRGB(t29), r29.opacity = "opaque" === o28.alphaMode ? 1 : t29.a;
}
function Qe(e37) {
  return e37.data ?? e37.url;
}
function Xe(t29) {
  return null == t29 ? "-" : t29 instanceof l4 ? t29.toHex() : t29.contentHash;
}
function et(e37) {
  const { offset: t29, scale: r29, rotation: o28 } = e37 ?? ot3;
  return `${t29[0]},${t29[1]},${o28},${r29[0]},${r29[1]}`;
}
function tt(e37) {
  return e37.vertexAttributes.color;
}
function rt(e37) {
  return 1 === (e37.material?.color?.a ?? 1);
}
var ot3 = new p6();
var at2 = n4();
var st2 = n4();
var nt2 = n4();
var it3 = n4();
var lt3 = n4();
var ct2 = e10();
var ut2 = e10();
var mt2 = u6();
var ft2 = [new h5()];
var pt2;
!function(e37) {
  e37[e37.NONE = 0] = "NONE", e37[e37.RENDER = 1] = "RENDER";
}(pt2 || (pt2 = {}));

// node_modules/@arcgis/core/views/3d/layers/graphics/Graphics3DLodInstanceGraphicLayer.js
var u25 = class {
  constructor(t29, e37, i18, n29, s26) {
    this.graphics3DSymbolLayer = t29, this.instanceIndex = e37, this.elevationAligner = i18, this.elevationContext = n29, this._highlightOrderMap = s26, this.type = "lod-instance", this._highlights = /* @__PURE__ */ new Set(), this.alignedSampledElevation = 0, this.isElevationSource = false, this.needsElevationUpdates = false, this._highlightName = null;
  }
  initialize() {
  }
  setVisibility(t29) {
    const { instanceData: e37 } = this;
    t29 !== e37.getVisible(this.instanceIndex) && e37.setVisible(this.instanceIndex, t29);
  }
  destroy() {
    null != this.instanceIndex && (this.instanceData.removeInstance(this.instanceIndex), this.graphics3DSymbolLayer.notifyDestroyGraphicLayer(this));
  }
  get usedMemory() {
    return this.graphics3DSymbolLayer.usedMemory;
  }
  alignWithElevation(t29, e37, i18) {
    if (this.elevationAligner) {
      l15(this.elevationContext.featureExpressionInfoContext, i18);
      const n29 = (i19, n30) => c13(i19, t29, this.elevationContext, e37, n30), s26 = this.elevationAligner(this, this.elevationContext, t29.spatialReference, n29, e37);
      null != s26 && (this.alignedSampledElevation = s26);
    }
  }
  getCenterObjectSpace(t29 = n4()) {
    return this.instanceData.getCombinedLocalTransform(this.instanceIndex, _6), E2(t29, this._lodRenderer.baseBoundingSphere.center, _6);
  }
  getBoundingBoxObjectSpace(t29 = u6()) {
    this.instanceData.getCombinedLocalTransform(this.instanceIndex, _6);
    const n29 = this._lodRenderer.baseBoundingBox;
    q(t29);
    for (let s26 = 0; s26 < 8; ++s26) o7(b13, 1 & s26 ? n29[3] : n29[0], 2 & s26 ? n29[4] : n29[1], 4 & s26 ? n29[5] : n29[2]), E2(b13, b13, _6), l3(t29, b13);
    return t29;
  }
  computeAttachmentOrigin(t29) {
    this.instanceData.getGlobalTransform(this.instanceIndex, _6), t29.render.origin[0] += _6[12], t29.render.origin[1] += _6[13], t29.render.origin[2] += _6[14], t29.render.num++;
  }
  async getProjectedBoundingBox(t29, i18, n29, s26, h23) {
    const g17 = this.getBoundingBoxObjectSpace(h23), c25 = x3, m21 = C(g17) ? 1 : c25.length;
    this.instanceData.getGlobalTransform(this.instanceIndex, _6);
    for (let a33 = 0; a33 < m21; a33++) {
      const t30 = c25[a33];
      b13[0] = g17[t30[0]], b13[1] = g17[t30[1]], b13[2] = g17[t30[2]], E2(b13, b13, _6), f15[3 * a33] = b13[0], f15[3 * a33 + 1] = b13[1], f15[3 * a33 + 2] = b13[2];
    }
    if (!t29(f15, 0, m21)) return null;
    q(g17);
    let p23 = null;
    this.calculateRelativeScreenBounds && (p23 = this.calculateRelativeScreenBounds());
    for (let e37 = 0; e37 < 3 * m21; e37 += 3) {
      for (let t30 = 0; t30 < 3; t30++) g17[t30] = Math.min(g17[t30], f15[e37 + t30]), g17[t30 + 3] = Math.max(g17[t30 + 3], f15[e37 + t30]);
      p23 && n29.push({ location: f15.slice(e37, e37 + 3), screenSpaceBoundingRect: p23 });
    }
    if (i18 && (b3(g17, v4), "absolute-height" !== this.elevationContext.mode)) {
      let t30;
      const e37 = E8(g17, i18.service.spatialReference, i18);
      try {
        t30 = await i18.service.queryElevation(v4[0], v4[1], s26, e37, "ground");
      } catch (u31) {
      }
      null != t30 && G(g17, 0, 0, -this.alignedSampledElevation + t30);
    }
    return g17;
  }
  addObjectState(t29) {
    t29.stateType === t9.Highlight && this.addObjectHighlightState(t29);
  }
  addObjectHighlightState(t29) {
    const e37 = new e21(t29.highlightName);
    this._addHighlightId(e37), t29.addExternal((t30) => {
      this._removeHighlightId(t30);
    }, e37);
  }
  removeObjectState(t29) {
    this._highlights.forEach((e37) => t29.remove(e37));
  }
  updateHighlights(t29) {
    this._highlightOrderMap = t29, this._updateHighlightOptions();
  }
  _calculateHighlightOptions() {
    let t29 = -1, e37 = null;
    return this._highlights.forEach(({ highlightName: i18 }) => {
      const n29 = this._highlightOrderMap.get(i18);
      void 0 !== n29 && n29 > t29 && (t29 = n29, e37 = i18);
    }), e37;
  }
  _addHighlightId(t29) {
    this._highlights.add(t29), this._updateHighlightOptions();
  }
  _removeHighlightId(t29) {
    this._highlights.delete(t29), this._updateHighlightOptions();
  }
  _updateHighlightOptions() {
    const t29 = this._calculateHighlightOptions();
    t29 !== this._highlightName && (this._highlightName = t29, this.instanceData.setHighlight(this.instanceIndex, t29));
  }
  get _lodRenderer() {
    return this.graphics3DSymbolLayer.lodRenderer;
  }
  get instanceData() {
    return this._lodRenderer.instanceData;
  }
};
var f15 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
var b13 = n4();
var v4 = n4();
var x3 = [[0, 1, 2], [3, 1, 2], [0, 4, 2], [3, 4, 2], [0, 1, 5], [3, 1, 5], [0, 4, 5], [3, 4, 5]];
var _6 = e10();

// node_modules/@arcgis/core/views/3d/layers/graphics/lodResourceUtils.js
function t25(e37, t29) {
  const s26 = e37.stageResources.geometries.map((r29) => new l12(new a20(r29), e37.stageResources.textures)), l28 = null == e37.lodThreshold || 0 === e37.lodThreshold && t29 > 0 ? u26(s26) : e37.lodThreshold;
  return new f10(s26, l28, e37.pivotOffset);
}
function s21(n29) {
  return new h13(n29.map((e37, n30) => t25(e37, n30)));
}
function u26(e37) {
  const n29 = e37.reduce((e38, n30) => e38 + n30.numTriangles, 0);
  return Math.sqrt(n29 * l21 / Math.PI);
}
var l21 = 20;

// node_modules/@arcgis/core/views/3d/layers/graphics/webStyleUtils.js
async function r22(r29) {
  if (null == r29 || null == r29.styleName && null == r29.styleUrl) return null;
  const o28 = r29.name;
  if (null == o28) throw new s("symbolstyleutils:style-symbol-reference-name-missing", "Missing name in style symbol reference");
  const u31 = { portal: r29.portal }, i18 = await i4(r29, u31).catch(() => null);
  if (null === i18) return null;
  const m21 = g(o28, i18.data);
  if (m21 && !m21.formatInfos?.some((l28) => "gltf_basisu" === l28.type)) return null;
  const a33 = await j2(i18, o28, u31, y4, { acceptedFormats: ["web-gltf-basisu", "web-gltf", "web"] }).catch(() => null);
  if (null === a33 || "point-3d" !== a33.type) return null;
  const y15 = a33.symbolLayers.items[0];
  return "object" === y15.type ? y15.resource : null;
}

// node_modules/@arcgis/core/views/3d/webgl-engine/lib/DepthRange.js
var _t2 = class _t2 {
  constructor(t29 = 1 / 0, r29 = -1 / 0) {
    this.near = t29, this.far = r29;
  }
  set(t29, r29) {
    this.near = t29, this.far = r29;
  }
  union(t29) {
    null != t29 && (this.near = Math.min(this.near, t29.near), this.far = Math.max(this.far, t29.far));
  }
  within(t29) {
    return this.near <= t29 && t29 <= this.far;
  }
  equals(t29) {
    return this.near === t29.near && this.far === t29.far;
  }
};
_t2.zero = new _t2(0, 0);
_t2.infinite = new _t2();
var t26 = _t2;

// node_modules/@arcgis/core/views/3d/webgl-engine/lib/lodRendering/BackedBufferObject.js
var r23 = class {
  constructor(r29, i18, s26) {
    this._elementSize = i18, this._buffer = E9.createVertex(r29, Y.STATIC_DRAW), this.resize(s26);
  }
  destroy() {
    this._buffer.dispose();
  }
  get elementSize() {
    return this._elementSize;
  }
  get capacity() {
    return this._capacity;
  }
  get array() {
    return this._array;
  }
  get buffer() {
    return this._buffer;
  }
  get usedMemory() {
    return this._array.byteLength + this._buffer.usedMemory;
  }
  copyRange(e37, t29, r29, i18 = 0) {
    const s26 = new Uint8Array(this.array, e37 * this.elementSize, (t29 - e37) * this.elementSize);
    new Uint8Array(r29.array, i18 * this.elementSize).set(s26);
  }
  transferAll() {
    this._buffer.setData(this._array);
  }
  transferRange(e37, t29) {
    const r29 = e37 * this._elementSize, i18 = t29 * this._elementSize;
    this._buffer.setSubData(new Uint8Array(this._array), r29, r29, i18);
  }
  resize(e37) {
    const t29 = e37 * this._elementSize, r29 = new ArrayBuffer(t29);
    this._array && (e37 >= this._capacity ? new Uint8Array(r29).set(new Uint8Array(this._array)) : new Uint8Array(r29).set(new Uint8Array(this._array).subarray(0, e37 * this._elementSize))), this._array = r29, this._buffer.setSize(t29), this._capacity = e37;
  }
};

// node_modules/@arcgis/core/views/3d/webgl-engine/lib/lodRendering/RenderInstanceData.js
var c17 = class {
  constructor(t29) {
    this.modelOriginHi = t29.getField(e17.INSTANCEMODELORIGINHI, o11), this.modelOriginLo = t29.getField(e17.INSTANCEMODELORIGINLO, o11), this.model = t29.getField(e17.INSTANCEMODEL, d3), this.modelNormal = t29.getField(e17.INSTANCEMODELNORMAL, d3), this.featureAttribute = t29.getField(e17.INSTANCEFEATUREATTRIBUTE, T), this.color = t29.getField(e17.INSTANCECOLOR, g4), this.objectAndLayerIdColor = t29.getField(e17.INSTANCEOBJECTANDLAYERIDCOLOR, g4);
  }
};
var f16 = class {
  constructor(t29, i18) {
    this._rctx = t29, this._instanceBufferLayout = i18, this._headIndex = 0, this._tailIndex = 0, this._firstIndex = null, this._captureFirstIndex = true, this._updating = false, this._prevHeadIndex = 0, this._resized = false, this._capacity = 1;
  }
  destroy() {
    this._buffer && this._buffer.destroy();
  }
  get buffer() {
    return this._buffer.buffer;
  }
  get view() {
    return this._view;
  }
  get capacity() {
    return this._capacity;
  }
  get size() {
    const t29 = this._headIndex, i18 = this._tailIndex;
    return t29 >= i18 ? t29 - i18 : t29 + this._capacity - i18;
  }
  get isEmpty() {
    return this._headIndex === this._tailIndex;
  }
  get isFull() {
    return this._tailIndex === (this._headIndex + 1) % this._capacity;
  }
  get headIndex() {
    return this._headIndex;
  }
  get tailIndex() {
    return this._tailIndex;
  }
  get firstIndex() {
    return this._firstIndex;
  }
  get usedMemory() {
    return this._buffer?.usedMemory ?? 0;
  }
  reset() {
    this._headIndex = 0, this._tailIndex = 0, this._firstIndex = null;
  }
  startUpdateCycle() {
    this._captureFirstIndex = true;
  }
  beginUpdate() {
    s12(!this._updating, "already updating"), this._updating = true, this._prevHeadIndex = this._headIndex;
  }
  endUpdate() {
    s12(this._updating, "not updating"), this.size < o * this.capacity && this._shrink(), this._resized ? (this._buffer.transferAll(), this._resized = false) : this._transferRange(this._prevHeadIndex, this._headIndex), this._updating = false;
  }
  allocateHead() {
    s12(this._updating, "not updating"), this.isFull && this._grow();
    const t29 = this.headIndex;
    return this._captureFirstIndex && (this._firstIndex = t29, this._captureFirstIndex = false), this._incrementHead(), s12(this._headIndex !== this._tailIndex, "invalid pointers"), t29;
  }
  freeTail() {
    s12(this._updating, "not updating"), s12(this.size > 0, "invalid size");
    const t29 = this._tailIndex === this._firstIndex;
    this._incrementTail(), t29 && (this._firstIndex = this._tailIndex);
  }
  _grow() {
    const t29 = Math.max(u27, Math.floor(this._capacity * e));
    this._resize(t29);
  }
  _shrink() {
    const t29 = Math.max(u27, Math.floor(this._capacity * r2));
    this._resize(t29);
  }
  _resize(t29) {
    if (s12(this._updating, "not updating"), t29 === this._capacity) return;
    const i18 = new r23(this._rctx, this._instanceBufferLayout.stride, t29);
    if (this._buffer) {
      this._firstIndex && (this._firstIndex = (this._firstIndex + this._capacity - this._tailIndex) % this._capacity);
      const t30 = this.size, e37 = this._compactInstances(i18);
      s12(e37 === t30, "invalid compaction"), this._buffer.destroy(), this._tailIndex = 0, this._headIndex = e37, this._prevHeadIndex = 0;
    }
    this._resized = true, this._capacity = t29, this._buffer = i18, this._view = new c17(this._instanceBufferLayout.createView(this._buffer.array));
  }
  _compactInstances(t29) {
    const i18 = this._headIndex, e37 = this._tailIndex;
    return e37 < i18 ? (this._buffer.copyRange(e37, i18, t29), i18 - e37) : e37 > i18 ? (this._buffer.copyRange(e37, this._capacity, t29), i18 > 0 && this._buffer.copyRange(0, i18, t29, this._capacity - e37), i18 + (this._capacity - e37)) : 0;
  }
  _incrementHead(t29 = 1) {
    this._headIndex = (this._headIndex + t29) % this._capacity;
  }
  _incrementTail(t29 = 1) {
    this._tailIndex = (this._tailIndex + t29) % this._capacity;
  }
  _transferRange(t29, i18) {
    t29 < i18 ? this._buffer.transferRange(t29, i18) : t29 > i18 && (i18 > 0 && this._buffer.transferRange(0, i18), this._buffer.transferRange(t29, this._capacity));
  }
};
var u27 = 64;

// node_modules/@arcgis/core/views/3d/webgl-engine/lib/lodRendering/InstanceData.js
var S7;
function b14(t29) {
  let e37 = O3().mat4f64(e17.LOCALTRANSFORM).mat4f64(e17.GLOBALTRANSFORM).vec4f64(e17.BOUNDINGSPHERE).vec3f64(e17.MODELORIGIN).mat3f(e17.INSTANCEMODEL).mat3f(e17.INSTANCEMODELNORMAL).vec2f(e17.MODELSCALEFACTORS);
  return t29.includes(e17.FEATUREATTRIBUTE) && (e37 = e37.vec4f(e17.FEATUREATTRIBUTE)), t29.includes(e17.COLOR) && (e37 = e37.vec4u8(e17.COLOR)), t29.includes(e17.OLIDCOLOR) && (e37 = e37.vec4u8(e17.OLIDCOLOR)), e37 = e37.u8(e17.STATE).u8(e17.LODLEVEL), e37;
}
!function(t29) {
  t29[t29.ALLOCATED = 1] = "ALLOCATED", t29[t29.DEFAULT_ACTIVE = 2] = "DEFAULT_ACTIVE", t29[t29.VISIBLE = 4] = "VISIBLE", t29[t29.HIGHLIGHT = 8] = "HIGHLIGHT", t29[t29.HIGHLIGHT_ACTIVE = 16] = "HIGHLIGHT_ACTIVE", t29[t29.REMOVE = 32] = "REMOVE", t29[t29.TRANSFORM_CHANGED = 64] = "TRANSFORM_CHANGED", t29[t29.ACTIVE = 18] = "ACTIVE";
}(S7 || (S7 = {}));
var C8 = class {
  constructor(t29) {
    this.localTransform = t29.getField(e17.LOCALTRANSFORM, A5), this.globalTransform = t29.getField(e17.GLOBALTRANSFORM, A5), this.modelOrigin = t29.getField(e17.MODELORIGIN, U2), this.model = t29.getField(e17.INSTANCEMODEL, d3), this.modelNormal = t29.getField(e17.INSTANCEMODELNORMAL, d3), this.modelScaleFactors = t29.getField(e17.MODELSCALEFACTORS, y6), this.boundingSphere = t29.getField(e17.BOUNDINGSPHERE, F2), this.featureAttribute = t29.getField(e17.FEATUREATTRIBUTE, T), this.color = t29.getField(e17.COLOR, g4), this.objectAndLayerIdColor = t29.getField(e17.OLIDCOLOR, g4), this.state = t29.getField(e17.STATE, I3), this.lodLevel = t29.getField(e17.LODLEVEL, I3);
  }
};
var R4 = class extends b {
  constructor(t29, e37) {
    super(t29), this.events = new o2(), this._capacity = 0, this._size = 0, this._next = 0, this._highlightOptionsMap = /* @__PURE__ */ new Map(), this._highlightOptionsMapPrev = /* @__PURE__ */ new Map(), this._layout = b14(e37), this._capacity = u27, this._buffer = this._layout.createBuffer(this._capacity), this._view = new C8(this._buffer);
  }
  get capacity() {
    return this._capacity;
  }
  get size() {
    return this._size;
  }
  get view() {
    return this._view;
  }
  addInstance() {
    this._size + 1 > this._capacity && this._grow();
    const t29 = this._findSlot();
    return this._view.state.set(t29, S7.ALLOCATED), this._size++, this.events.emit("instances-changed"), t29;
  }
  removeInstance(t29) {
    const e37 = this._view.state;
    s12(t29 >= 0 && t29 < this._capacity && 0 !== (e37.get(t29) & S7.ALLOCATED), "invalid instance handle"), this._getStateFlag(t29, S7.ACTIVE) ? this._setStateFlags(t29, S7.REMOVE) : this.freeInstance(t29), this.events.emit("instances-changed");
  }
  freeInstance(t29) {
    const e37 = this._view.state;
    s12(t29 >= 0 && t29 < this._capacity && 0 !== (e37.get(t29) & S7.ALLOCATED), "invalid instance handle"), e37.set(t29, 0), this._size--;
  }
  setLocalTransform(t29, e37, s26 = true) {
    this._view.localTransform.setMat(t29, e37), s26 && this.updateModelTransform(t29);
  }
  getLocalTransform(t29, e37) {
    this._view.localTransform.getMat(t29, e37);
  }
  setGlobalTransform(t29, e37, s26 = true) {
    this._view.globalTransform.setMat(t29, e37), s26 && this.updateModelTransform(t29);
  }
  getGlobalTransform(t29, e37) {
    this._view.globalTransform.getMat(t29, e37);
  }
  updateModelTransform(t29) {
    const e37 = this._view, s26 = y9, i18 = H3;
    e37.localTransform.getMat(t29, N5), e37.globalTransform.getMat(t29, D3);
    const a33 = c2(D3, D3, N5);
    o7(s26, a33[12], a33[13], a33[14]), e37.modelOrigin.setVec(t29, s26), n9(i18, a33), e37.model.setMat(t29, i18);
    const r29 = g3(y9, a33);
    r29.sort(), e37.modelScaleFactors.set(t29, 0, r29[1]), e37.modelScaleFactors.set(t29, 1, r29[2]), s11(i18, i18), u12(i18, i18), e37.modelNormal.setMat(t29, i18), this._setStateFlags(t29, S7.TRANSFORM_CHANGED), this.events.emit("instance-transform-changed", { index: t29 });
  }
  getModelTransform(t29, e37) {
    const s26 = this._view;
    s26.model.getMat(t29, H3), s26.modelOrigin.getVec(t29, y9), e37[0] = H3[0], e37[1] = H3[1], e37[2] = H3[2], e37[3] = 0, e37[4] = H3[3], e37[5] = H3[4], e37[6] = H3[5], e37[7] = 0, e37[8] = H3[6], e37[9] = H3[7], e37[10] = H3[8], e37[11] = 0, e37[12] = y9[0], e37[13] = y9[1], e37[14] = y9[2], e37[15] = 1;
  }
  applyShaderTransformation(t29, e37) {
    null != this.shaderTransformation && this.shaderTransformation.applyTransform(this, t29, e37);
  }
  getCombinedModelTransform(t29, e37) {
    return this.getModelTransform(t29, e37), null != this.shaderTransformation && this.shaderTransformation.applyTransform(this, t29, e37), e37;
  }
  getCombinedLocalTransform(t29, e37) {
    this._view.localTransform.getMat(t29, e37), null != this.shaderTransformation && this.shaderTransformation.applyTransform(this, t29, e37);
  }
  getCombinedMaxScaleFactor(t29) {
    let e37 = this._view.modelScaleFactors.get(t29, 1);
    return null != this.shaderTransformation && (this.shaderTransformation.scaleFactor(y9, this, t29), e37 *= Math.max(y9[0], y9[1], y9[2])), e37;
  }
  getCombinedMedianScaleFactor(t29) {
    let e37 = this._view.modelScaleFactors.get(t29, 0);
    return null != this.shaderTransformation && (this.shaderTransformation.scaleFactor(y9, this, t29), e37 *= w5(y9[0], y9[1], y9[2])), e37;
  }
  getModel(t29, e37) {
    this._view.model.getMat(t29, e37);
  }
  setFeatureAttribute(t29, e37) {
    this._view.featureAttribute.setVec(t29, e37);
  }
  getFeatureAttribute(t29, e37) {
    this._view.featureAttribute.getVec(t29, e37);
  }
  setColor(t29, e37) {
    this._view.color.setVec(t29, e37);
  }
  setObjectAndLayerIdColor(t29, e37) {
    this._view.objectAndLayerIdColor.setVec(t29, e37);
  }
  setVisible(t29, e37) {
    e37 !== this.getVisible(t29) && (this._setStateFlag(t29, S7.VISIBLE, e37), this.events.emit("instance-visibility-changed", { index: t29 }));
  }
  getVisible(t29) {
    return this._getStateFlag(t29, S7.VISIBLE);
  }
  setHighlight(t29, e37) {
    const { _highlightOptionsMap: s26 } = this, i18 = s26.get(t29);
    e37 ? e37 !== i18 && (s26.set(t29, e37), this._setStateFlag(t29, S7.HIGHLIGHT, true), this.events.emit("instance-highlight-changed")) : i18 && (s26.delete(t29), this._setStateFlag(t29, S7.HIGHLIGHT, false), this.events.emit("instance-highlight-changed"));
  }
  get highlightOptionsMap() {
    return this._highlightOptionsMap;
  }
  getHighlightStateFlag(t29) {
    return this._getStateFlag(t29, S7.HIGHLIGHT);
  }
  geHighlightOptionsPrev(t29) {
    const e37 = this._highlightOptionsMapPrev.get(t29) ?? null;
    return this._highlightOptionsMapPrev.delete(t29), e37;
  }
  getHighlightName(t29) {
    const e37 = this.highlightOptionsMap.get(t29) ?? null;
    return e37 ? this._highlightOptionsMapPrev.set(t29, e37) : this._highlightOptionsMapPrev.delete(t29), e37;
  }
  getState(t29) {
    return this._view.state.get(t29);
  }
  getLodLevel(t29) {
    return this._view.lodLevel.get(t29);
  }
  countFlags(t29) {
    let e37 = 0;
    for (let s26 = 0; s26 < this._capacity; ++s26) {
      this.getState(s26) & t29 && ++e37;
    }
    return e37;
  }
  _setStateFlags(t29, e37) {
    const s26 = this._view.state;
    e37 = s26.get(t29) | e37, s26.set(t29, e37);
  }
  _clearStateFlags(t29, e37) {
    const s26 = this._view.state;
    e37 = s26.get(t29) & ~e37, s26.set(t29, e37);
  }
  _setStateFlag(t29, e37, s26) {
    s26 ? this._setStateFlags(t29, e37) : this._clearStateFlags(t29, e37);
  }
  _getStateFlag(t29, e37) {
    return !!(this._view.state.get(t29) & e37);
  }
  _grow() {
    this._capacity = Math.max(u27, Math.floor(this._capacity * e)), this._buffer = this._layout.createBuffer(this._capacity).copyFrom(this._buffer), this._view = new C8(this._buffer);
  }
  _findSlot() {
    const t29 = this._view.state;
    let e37 = this._next;
    for (; t29.get(e37) & S7.ALLOCATED; ) e37 = e37 + 1 === this._capacity ? 0 : e37 + 1;
    return this._next = e37 + 1 === this._capacity ? 0 : e37 + 1, e37;
  }
};
function w5(t29, e37, s26) {
  return Math.max(Math.min(t29, e37), Math.min(Math.max(t29, e37), s26));
}
r([m2({ constructOnly: true })], R4.prototype, "shaderTransformation", void 0), r([m2()], R4.prototype, "_size", void 0), r([m2({ readOnly: true })], R4.prototype, "size", null), R4 = r([a2("esri.views.3d.webgl-engine.lib.lodRendering.InstanceData")], R4);
var y9 = n4();
var H3 = e11();
var N5 = e10();
var D3 = e10();

// node_modules/@arcgis/core/views/3d/webgl-engine/lib/lodRendering/InstanceOctree.js
var n21 = class extends b6 {
  constructor(e37, r29) {
    super((t29) => T2(this._instanceData.view.boundingSphere.getVec(t29, this._tmpSphere)), { maximumDepth: 25 }), this._instanceData = e37, this._boundingSphere = r29, this._tmpSphere = E4(), this._tmpMat4 = e10();
  }
  addInstance(t29) {
    const s26 = this._instanceData.view.boundingSphere, i18 = this._instanceData.getCombinedModelTransform(t29, this._tmpMat4);
    E2(U3(this._tmpSphere), this._boundingSphere.center, i18), this._tmpSphere[3] = this._boundingSphere.radius * m6(i18), s26.setVec(t29, this._tmpSphere), this.add([t29]);
  }
  removeInstance(t29) {
    this.remove([t29]);
  }
};

// node_modules/@arcgis/core/views/3d/webgl-engine/lib/lodRendering/LevelSelector.js
var e32 = class {
  constructor(e37, i18) {
    this._worldSpaceRadius = e37, this._minScreenSpaceRadii = i18;
  }
  selectLevel(e37, i18, t29) {
    const c25 = t29.computeScreenPixelSizeAt(e37), r29 = this._worldSpaceRadius * i18 / c25;
    let s26 = 0;
    for (let a33 = 1; a33 < this._minScreenSpaceRadii.length; ++a33) r29 >= this._minScreenSpaceRadii[a33] && (s26 = a33);
    return s26;
  }
};

// node_modules/@arcgis/core/views/3d/webgl-engine/lib/GLMaterials.js
var t27 = class {
  constructor(s26, t29) {
    this._material = s26, this._repository = t29, this._map = /* @__PURE__ */ new Map();
  }
  dispose() {
    this._map.forEach((s26, t29) => {
      null != s26 && this._repository.release(this._material, t29);
    });
  }
  load(t29, e37, r29) {
    const i18 = this._material.produces.get(e37);
    if (!i18?.(r29)) return null;
    this._map.has(r29) || this._map.set(r29, this._repository.acquire(this._material, e37, r29));
    const a33 = this._map.get(r29);
    if (a33) {
      if (a33.ensureResources(t29) === O2.LOADED) return a33;
      this._repository.requestRender();
    }
    return null;
  }
};

// node_modules/@arcgis/core/views/3d/webgl-engine/lib/lodRendering/LodComponentData.js
var a27 = class {
  constructor(a33, n29) {
    const m21 = a33.renderContext.rctx, u31 = n29.geometry, f22 = n29.geometry.getRenderGeometry(), g17 = f22.material;
    this._materials = a33.materials, g17.setParameters({ instancedDoublePrecision: true }), this.geometry = u31, this.material = g17, this.glMaterials = new t27(g17, this._materials), this.vertexBufferLayout = f22.vertexBufferLayout, this.vbo = E9.createVertex(m21, Y.STATIC_DRAW, f22.buffer), this.vao = new r16(m21, E5, /* @__PURE__ */ new Map([["geometry", t16(f22.vertexBufferLayout)]]), /* @__PURE__ */ new Map([["geometry", this.vbo]])), this.vertexCount = f22.elementCount;
  }
  destroy() {
    this.glMaterials.dispose(), this.vbo.dispose(), this.vao.dispose();
  }
  get boundingInfo() {
    return this.geometry.boundingInfo;
  }
  get triangleCount() {
    return this.vertexCount / 3;
  }
  get usedMemory() {
    return 128 + this.vbo.usedMemory + this.vao.usedMemory;
  }
  intersect(e37, t29, r29, o28, s26, i18, a33, n29) {
    return this.geometry.intersect(e37, t29, r29, o28, s26, i18, a33, n29);
  }
};

// node_modules/@arcgis/core/views/3d/webgl-engine/lib/lodRendering/LodLevel.js
var a28 = class _a {
  static async create(e37, r29, i18) {
    const s26 = await Promise.allSettled(r29.components.map((o28) => e37.controller.schedule(() => new a27(e37, o28), i18))), c25 = s26.map((o28) => "fulfilled" === o28.status ? o28.value : null).filter(L);
    if (c(i18) || c25.length !== s26.length) {
      c25.forEach((o28) => o28.destroy()), s2(i18);
      for (const o28 of s26) if ("rejected" === o28.status) throw o28.reason;
    }
    return new _a(r29.minScreenSpaceRadius, c25);
  }
  constructor(o28, n29) {
    this.minScreenSpaceRadius = o28, this.components = n29;
  }
  destroy() {
    this.components.forEach((o28) => o28.destroy());
  }
  intersect(o28, n29, t29, e37, r29, i18, s26) {
    this.components.forEach((c25) => c25.intersect(o28, n29, t29, e37, r29, i18, this.boundingSphere, s26));
  }
  get boundingBox() {
    if (null == this._boundingBox) {
      const o28 = q();
      this.components.forEach((n29) => {
        null != n29.boundingInfo && (l3(o28, n29.boundingInfo.bbMin), l3(o28, n29.boundingInfo.bbMax));
      }), this._boundingBox = o28;
    }
    return this._boundingBox;
  }
  get boundingSphere() {
    if (null == this._boundingSphere) {
      const o28 = this.boundingBox, n29 = n4();
      b3(o28, n29), this._boundingSphere = { center: n29, radius: 0.5 * F(o28) };
    }
    return this._boundingSphere;
  }
  get triangleCount() {
    return this.components.reduce((o28, n29) => o28 + n29.triangleCount, 0);
  }
};

// node_modules/@arcgis/core/views/3d/webgl-engine/lib/lodRendering/LodRenderer.js
var z3 = (e37) => {
  const t29 = e37.baseBoundingSphere.radius, r29 = e37.levels.map((e38) => e38.minScreenSpaceRadius);
  return new e32(t29, r29);
};
var k8 = class extends c12 {
  constructor(e37, t29) {
    super(e37), this.type = E7.LOD, this.isGround = false, this._levels = [], this._defaultRenderInstanceData = new Array(), this._highlightRenderInstanceDataMap = /* @__PURE__ */ new Map(), this._instanceIndex = 0, this._cycleStartIndex = 0, this._slicePlane = false, this._camera = new it(), this._updateCyclesWithStaticCamera = -1, this._needFullCycle = false, this.produces = /* @__PURE__ */ new Map([[A7.OPAQUE_MATERIAL, (e38) => this._produces(e38)], [A7.TRANSPARENT_MATERIAL, (e38) => !!this._hasTransparentLevels() && this._produces(e38)]]), this._instanceData = new R4({ shaderTransformation: e37.shaderTransformation }, e37.optionalFields), this.addHandles(t29.registerTask(g8.LOD_RENDERER, this));
  }
  initialize() {
    this._instanceBufferLayout = Y4(this.optionalFields), this._glInstanceBufferLayout = t16(this._instanceBufferLayout, 1), this.addHandles([this._instanceData.events.on("instances-changed", () => this._requestUpdateCycle()), this._instanceData.events.on("instance-transform-changed", ({ index: e37 }) => {
      this._requestUpdateCycle(), this.metadata.notifyGraphicGeometryChanged(e37);
    }), this._instanceData.events.on("instance-visibility-changed", ({ index: e37 }) => {
      this._requestUpdateCycle(true), this.metadata.notifyGraphicVisibilityChanged(e37);
    }), this._instanceData.events.on("instance-highlight-changed", () => this._requestUpdateCycle(true))]);
  }
  get _allRenderInstanceData() {
    return [this._defaultRenderInstanceData, ...this._highlightRenderInstanceDataMap.values()];
  }
  get _allRenderInstanceDataExceptHighlightShadow() {
    const e37 = [this._defaultRenderInstanceData];
    for (const t29 of this._highlightRenderInstanceDataMap) t29[0] !== c11 && e37.push(t29[1]);
    return e37;
  }
  hasHighlight(e37) {
    return this._highlightRenderInstanceDataMap.has(e37);
  }
  get _enableLevelSelection() {
    return this.symbol.levels.length > 1;
  }
  get levels() {
    return this._levels;
  }
  get baseBoundingBox() {
    return this._levels[this._levels.length - 1].boundingBox;
  }
  get baseBoundingSphere() {
    return this._levels[this._levels.length - 1].boundingSphere;
  }
  get baseMaterial() {
    return this._levels[this._levels.length - 1].components[0].material;
  }
  get slicePlaneEnabled() {
    return this._slicePlane;
  }
  set slicePlaneEnabled(e37) {
    this._slicePlane = e37;
  }
  get layerViewUid() {
    return this.metadata.layerViewUid;
  }
  get instanceData() {
    return this._instanceData;
  }
  get hasEmissions() {
    return this._levels.some((e37) => e37.components.some((e38) => e38.material.hasEmissions));
  }
  get usedMemory() {
    return this._allRenderInstanceData.reduce((e37, t29) => t29.reduce((e38, t30) => e38 + t30.usedMemory, e37), this._levels.reduce((e37, t29) => e37 + t29.components.reduce((e38, t30) => e38 + t30.usedMemory, 0), 0));
  }
  get renderStats() {
    const e37 = this._instanceData.size, t29 = [];
    return this._levels.forEach((e38, r29) => {
      const n29 = this._allRenderInstanceData[0][r29].size + this._allRenderInstanceData[1][r29].size, s26 = e38.triangleCount;
      t29.push({ renderedInstances: n29, renderedTriangles: n29 * s26, trianglesPerInstance: s26 });
    }), { totalInstances: e37, renderedInstances: t29.reduce((e38, t30) => e38 + t30.renderedInstances, 0), renderedTriangles: t29.reduce((e38, t30) => e38 + t30.renderedTriangles, 0), levels: t29 };
  }
  _createRenderInstanceDataArray(e37 = []) {
    const { rctx: t29 } = this._context.renderContext;
    return this.symbol.levels.map((r29) => {
      e37.push(new f16(t29, this._instanceBufferLayout));
    }), e37;
  }
  async initializeRenderContext(e37, r29) {
    this._context = e37, this._createRenderInstanceDataArray(this._defaultRenderInstanceData);
    const n29 = await Promise.allSettled(this.symbol.levels.map((t29) => a28.create(e37, t29, r29))), s26 = n29.map((e38) => "fulfilled" === e38.status ? e38.value : null).filter(L);
    if (c(r29) || s26.length !== n29.length) {
      s26.forEach((e38) => e38.destroy()), s2(r29);
      for (const e38 of n29) if ("rejected" === e38.status) throw e38.reason;
    }
    this._levels = s26, this._levelSelector = z3(this);
  }
  uninitializeRenderContext() {
    this._invalidateOctree(), this._levels.forEach((e37) => e37.destroy()), this._defaultRenderInstanceData.forEach((e37) => e37.destroy()), this._highlightRenderInstanceDataMap.forEach((e37) => e37.forEach((e38) => e38.destroy()));
  }
  _hasTransparentLevels() {
    return this._levels.some((e37) => e37.components.some((e38) => {
      const t29 = e38.material.produces.get(A7.TRANSPARENT_MATERIAL);
      return t29?.(n11.Color);
    }));
  }
  hasHighlights() {
    return n(this._highlightRenderInstanceDataMap, (e37) => e37.some((e38) => e38.size > 0));
  }
  _produces(e37) {
    return (e37 !== n11.Highlight || this.hasHighlights()) && (e37 !== n11.ShadowHighlight || this.hasHighlight(c11));
  }
  prepareRender(e37) {
    if (!t13.LOD_INSTANCE_RENDERER_DISABLE_UPDATES) {
      if (this._enableLevelSelection) {
        const t29 = e37.bind.contentCamera.equals(this._camera);
        this._camera.copyFrom(e37.bind.contentCamera), t29 || this._requestUpdateCycle();
      }
      this._needFullCycle && (this.runTask(C5), this._needFullCycle = false);
    }
  }
  acquireTechniques(e37) {
    if (!this.baseMaterial.visible || !this.baseMaterial.isVisibleForOutput(e37.output)) return null;
    const t29 = this._getInstanceDatas(e37);
    if (!t29) return null;
    const r29 = new Array(), n29 = this.levels;
    return t29.forEach((t30) => n29.forEach(({ components: n30 }, s26) => n30.forEach((n31) => r29.push(this._beginComponent(e37, t30[s26], n31))))), r29;
  }
  render(e37, t29) {
    const r29 = this._getInstanceDatas(e37);
    if (!r29 || null == t29) return;
    let n29 = 0;
    e37.rctx.bindVAO();
    const s26 = this.levels;
    r29.forEach((r30) => s26.forEach(({ components: s27 }, a33) => s27.forEach((s28) => this._renderComponent(e37, t29[n29++], r30[a33], s28, a33))));
  }
  _getInstanceDatas(e37) {
    const { output: t29, bind: r29 } = e37, n29 = t29 === n11.Highlight, s26 = t29 === n11.ShadowHighlight, a33 = !n29 && !s26, i18 = t29 !== n11.ShadowExcludeHighlight;
    if (a33) return i18 ? this._allRenderInstanceData : this._allRenderInstanceDataExceptHighlightShadow;
    const { _highlightRenderInstanceDataMap: o28 } = this;
    if (i18) {
      if (n29) {
        const e39 = r29.highlight?.name;
        if (!e39) return null;
        const t30 = o28.get(e39);
        return t30 ? [t30] : null;
      }
      const e38 = o28.get(c11);
      return s26 ? e38 ? [e38] : null : Array.from(o28.values());
    }
    return null;
  }
  intersect(e37, t29, r29, n29) {
    if (!this.baseMaterial.visible || null == this._octree) return;
    const s26 = n4();
    c4(s26, n29, r29);
    const a33 = (s27) => {
      this._instanceData.getCombinedModelTransform(s27, Z5), e37.transform.set(Z5), E2($2, r29, e37.transform.inverse), E2(X3, n29, e37.transform.inverse);
      const a34 = this._instanceData.getState(s27), i18 = this._instanceData.getLodLevel(s27), o28 = this._levels.length;
      s12(0 !== (a34 & S7.ACTIVE), "invalid instance state"), s12(i18 >= 0 && i18 < o28, "invaid lod level"), this._levels[i18].intersect(e37, t29, $2, X3, s27, this.metadata, o28);
    };
    this.baseMaterial.parameters.verticalOffset ? this._octree.forEach(a33) : this._octree.forEachAlongRay(r29, s26, a33);
  }
  notifyShaderTransformationChanged() {
    this._invalidateOctree(), this._requestUpdateCycle();
  }
  get _octree() {
    if (null == this._octreeCached) {
      const e37 = this._instanceData, t29 = e37.view?.state;
      if (!t29) return null;
      this._octreeCached = new n21(e37, this.baseBoundingSphere);
      for (let r29 = 0; r29 < e37.capacity; ++r29) t29.get(r29) & S7.ACTIVE && this._octreeCached.addInstance(r29);
    }
    return this._octreeCached;
  }
  _invalidateOctree() {
    this._octreeCached = u2(this._octreeCached);
  }
  queryDepthRange(e37) {
    if (null == this._octree) return new t26();
    const t29 = e37.viewForward, r29 = this._octree.findClosest(t29, b6.DepthOrder.FRONT_TO_BACK, e37.frustum), n29 = this._octree.findClosest(t29, b6.DepthOrder.BACK_TO_FRONT, e37.frustum);
    if (null == r29 || null == n29) return new t26();
    const s26 = e37.eye, a33 = this._instanceData.view;
    a33.boundingSphere.getVec(r29, Q3), c4(Q3, Q3, s26);
    const i18 = P2(Q3, t29) - Q3[3];
    a33.boundingSphere.getVec(n29, Q3), c4(Q3, Q3, s26);
    const o28 = P2(Q3, t29) + Q3[3];
    return new t26(i18, o28);
  }
  _requestUpdateCycle(e37 = false) {
    this._updateCyclesWithStaticCamera = -1, this._cycleStartIndex = this._instanceIndex, e37 && (this._needFullCycle = true, this._context.requestRender());
  }
  _startUpdateCycle() {
    this._updateCyclesWithStaticCamera++, this._allRenderInstanceData.forEach((e37) => e37.forEach((e38) => e38.startUpdateCycle()));
  }
  get running() {
    return this._instanceData.size > 0 && this._updateCyclesWithStaticCamera < 1;
  }
  runTask(e37) {
    const { _enableLevelSelection: t29, _camera: n29, _levelSelector: a33 } = this;
    this._allRenderInstanceData.forEach((e38) => e38.forEach((e39) => e39.beginUpdate()));
    const i18 = this._instanceData, o28 = i18.view;
    let l28 = i18.size;
    const c25 = i18.capacity;
    let h23 = this._instanceIndex;
    const d14 = Math.ceil(c25 / 500), { _highlightRenderInstanceDataMap: u31 } = this;
    for (let m21 = 0; m21 < l28 && !e37.done; ++m21) {
      h23 === this._cycleStartIndex && this._startUpdateCycle();
      const m22 = o28.state.get(h23);
      let p23 = 0;
      if (!(m22 & S7.ALLOCATED)) {
        h23 = h23 + 1 === c25 ? 0 : h23 + 1, l28++;
        continue;
      }
      const f22 = o28.lodLevel.get(h23);
      if (m22 & S7.DEFAULT_ACTIVE && this._defaultRenderInstanceData[f22].freeTail(), m22 & S7.HIGHLIGHT_ACTIVE) {
        const e38 = i18.geHighlightOptionsPrev(h23);
        if (e38) {
          const t30 = u31.get(e38);
          if (!t30) throw new s("internal:lod-renderer", "Internal error in lodRenderer");
          t30[f22].freeTail(), t30.every((e39) => e39.isEmpty) && (t30.forEach((e39) => e39.destroy()), u31.delete(e38));
        }
      }
      if (m22 & S7.REMOVE) i18.freeInstance(h23);
      else if (m22 & S7.VISIBLE) {
        let e38 = 0;
        if (t29 && (o28.modelOrigin.getVec(h23, J5), e38 = a33.selectLevel(J5, i18.getCombinedMedianScaleFactor(h23), n29)), p23 = m22 & ~(S7.ACTIVE | S7.TRANSFORM_CHANGED), e38 >= 0) if (m22 & S7.HIGHLIGHT) {
          const t30 = i18.getHighlightName(h23);
          if (t30) {
            const n30 = () => {
              const e39 = this._createRenderInstanceDataArray();
              return e39.forEach((e40) => e40.beginUpdate()), e39;
            }, a34 = u(u31, t30, n30);
            if (e38 >= a34.length) throw new s("internal:lod-renderer", `LodRenderer internal error - missing lodLevel ${e38}`);
            W5(a34[e38], o28, h23);
          }
          p23 |= S7.HIGHLIGHT_ACTIVE;
        } else W5(this._defaultRenderInstanceData[e38], o28, h23), p23 |= S7.DEFAULT_ACTIVE;
        o28.state.set(h23, p23), o28.lodLevel.set(h23, e38);
      } else p23 = m22 & ~(S7.ACTIVE | S7.TRANSFORM_CHANGED), o28.state.set(h23, p23);
      if (null != this._octreeCached) {
        const e38 = !!(m22 & S7.ACTIVE), t30 = !!(p23 & S7.ACTIVE);
        !e38 && t30 ? this._octreeCached.addInstance(h23) : e38 && !t30 ? this._octreeCached.removeInstance(h23) : e38 && t30 && m22 & S7.TRANSFORM_CHANGED && (this._octreeCached.removeInstance(h23), this._octreeCached.addInstance(h23));
      }
      h23 = h23 + 1 === c25 ? 0 : h23 + 1, h23 % d14 === 0 && e37.madeProgress();
    }
    this._instanceIndex = h23, this._allRenderInstanceData.forEach((e38) => e38.forEach((e39) => e39.endUpdate())), this._context.requestRender();
  }
  _beginComponent(e37, t29, r29) {
    if (0 === t29.size) return null;
    const n29 = r29.glMaterials.load(e37.rctx, e37.bind.slot, e37.output);
    return n29?.beginSlot(e37.bind);
  }
  _renderComponent(e37, t29, r29, n29, s26) {
    if (!t29) return;
    const { bind: a33, rctx: i18 } = e37;
    i18.runAppleAmdDriverHelper();
    const o28 = i18.bindTechnique(t29, a33, n29.material.parameters, te4);
    i18.bindVAO(n29.vao), t29.ensureAttributeLocations(n29.vao), t13.LOD_INSTANCE_RENDERER_COLORIZE_BY_LEVEL && e37.output === n11.Color && (o28.setUniform4fv("externalColor", ee2[Math.min(s26, ee2.length - 1)]), o28.setUniform1i("colorMixMode", o16.replace));
    const l28 = r29.capacity, c25 = r29.headIndex, h23 = r29.tailIndex, d14 = r29.firstIndex, u31 = this._glInstanceBufferLayout, m21 = (e38, s27) => {
      u15(i18, E5, r29.buffer, u31, e38), i18.drawArraysInstanced(t29.primitiveType, 0, n29.vertexCount, s27 - e38), A6(i18, E5, r29.buffer, u31);
    };
    n29.material.transparent && null != d14 ? c25 > h23 ? (s12(d14 >= h23 && d14 <= c25, "invalid firstIndex"), m21(d14, c25), m21(h23, d14)) : c25 < h23 && (d14 <= c25 ? (s12(d14 >= 0 && d14 <= c25, "invalid firstIndex"), m21(d14, c25), m21(h23, l28), m21(0, d14)) : (s12(d14 >= h23 && d14 <= l28, "invalid firstIndex"), m21(d14, l28), m21(0, c25), m21(h23, d14))) : c25 > h23 ? m21(h23, c25) : c25 < h23 && (m21(0, c25), m21(h23, l28)), i18.bindVAO(null);
  }
};
function W5(e37, t29, r29) {
  const n29 = e37.allocateHead();
  K3(t29, r29, e37.view, n29);
}
function K3(e37, t29, r29, n29) {
  l14(e37.modelOrigin, t29, r29.modelOriginHi, r29.modelOriginLo, n29), r29.model.copyFrom(n29, e37.model, t29), r29.modelNormal.copyFrom(n29, e37.modelNormal, t29), e37.color && r29.color && r29.color.copyFrom(n29, e37.color, t29), e37.objectAndLayerIdColor && r29.objectAndLayerIdColor && r29.objectAndLayerIdColor.copyFrom(n29, e37.objectAndLayerIdColor, t29), e37.featureAttribute && r29.featureAttribute && r29.featureAttribute.copyFrom(n29, e37.featureAttribute, t29);
}
function Y4(e37) {
  let t29 = O3().vec3f(e17.INSTANCEMODELORIGINHI).vec3f(e17.INSTANCEMODELORIGINLO).mat3f(e17.INSTANCEMODEL).mat3f(e17.INSTANCEMODELNORMAL);
  return null != e37 && e37.includes("featureAttribute") && (t29 = t29.vec4f(e17.INSTANCEFEATUREATTRIBUTE)), null != e37 && e37.includes("color") && (t29 = t29.vec4u8(e17.INSTANCECOLOR)), null != e37 && e37.includes("objectAndLayerIdColor") && (t29 = t29.vec4u8(e17.INSTANCEOBJECTANDLAYERIDCOLOR)), t29;
}
r([m2({ constructOnly: true })], k8.prototype, "symbol", void 0), r([m2({ constructOnly: true })], k8.prototype, "optionalFields", void 0), r([m2({ constructOnly: true })], k8.prototype, "metadata", void 0), r([m2({ constructOnly: true })], k8.prototype, "shaderTransformation", void 0), r([m2()], k8.prototype, "_instanceData", void 0), r([m2()], k8.prototype, "_cycleStartIndex", void 0), r([m2({ readOnly: true })], k8.prototype, "_enableLevelSelection", null), r([m2()], k8.prototype, "_updateCyclesWithStaticCamera", void 0), r([m2({ readOnly: true })], k8.prototype, "running", null), k8 = r([a2("esri.views.3d.webgl-engine.lib.lodRendering.LodRenderer")], k8);
var J5 = n4();
var Q3 = n7();
var Z5 = e10();
var $2 = n4();
var X3 = n4();
var ee2 = [r6(1, 0, 1, 1), r6(0, 0, 1, 1), r6(0, 1, 0, 1), r6(1, 1, 0, 1), r6(1, 0, 0, 1)];
var te4 = new k4();

// node_modules/@arcgis/core/views/3d/layers/graphics/Graphics3DObjectSymbolLayer.js
var me2 = class {
  constructor(e37, t29, s26, r29, i18, o28, a33, n29, l28, c25, h23 = null) {
    this.lodResources = e37, this.lodRenderer = t29, this.stageResources = s26, this.resourceSize = r29, this.isEsriSymbolResource = i18, this.isWosr = o28, this.resourceBoundingBox = a33, this.symbolSize = n29, this.extentPadding = l28, this.physicalBasedRenderingEnabled = c25, this.pivotOffset = h23;
  }
};
var pe2 = class extends y7 {
  getCachedSize() {
    const [e37, t29, s26] = null != this._resources ? this._resources.symbolSize : [1, 1, 1];
    return { width: e37, depth: t29, height: s26 };
  }
  constructor(e37, t29, s26, r29) {
    super(e37, t29, s26, r29, ye2(t29)), this._resources = null, this._optionalFields = new Array(), this._instanceIndexToGraphicUid = /* @__PURE__ */ new Map(), this._hasLoadedPBRTextures = false, this._disposeResourceHandles = new Array(), this.skipHighSymbolLodsChanged = false, this.ensureDrapedStatus(false), this._hasLoadedPBRTextures = s26.physicalBasedRenderingEnabled;
  }
  async doLoad(e37) {
    if (!this._drivenProperties.size) {
      const e38 = I4(this.symbolLayer);
      if (e38) throw new Error(e38);
    }
    if (this._isPrimitive) {
      const t29 = this.symbolLayer.resource, s26 = t29 && S4(t29?.primitive) ? t29.primitive : d2;
      this._resources = await this._createResourcesForPrimitive(s26, e37);
    } else {
      const t29 = await r22(this.symbol.styleOrigin), s26 = t29?.href ?? this.symbolLayer.resource?.href;
      this._resources = await this._createResourcesForUrl(s26, e37);
    }
    this.layerOpacityChanged(), this.slicePlaneEnabledChanged(), this.physicalBasedRenderingChanged(), this.updateComplexity();
  }
  get extentPadding() {
    return null != this._resources ? this._resources.extentPadding : 0;
  }
  get _isPrimitive() {
    return null != this._primitive;
  }
  get lodRenderer() {
    return this._resources?.lodRenderer;
  }
  get materials() {
    return this._resources?.stageResources.materials ?? [];
  }
  async _createResourcesForPrimitive(t29, r29) {
    const i18 = this.symbolLayer, o28 = u6(c3(t29)), a33 = u7(p(o28)), n29 = u7(t3(a33, i18)), c25 = r7(n29), h23 = false, d14 = false, m21 = i18?.material, p23 = { usePBR: this._context.physicalBasedRenderingEnabled, isSchematic: true, mrrFactors: o14, ambient: _2, diffuse: _2, opacity: 1, hasSlicePlane: this._context.slicePlaneEnabled, castShadows: i18.castShadows, emissiveStrength: m21?.emissive?.strength ?? 0, emissiveSource: a8.Color, offsetTransparentBackfaces: false, drivenOpacity: this.needsDrivenTransparentPass }, y15 = !!p23.usePBR, _10 = m21?.color, g17 = this.symbol;
    if ("point-3d" === g17.type && g17.verticalOffset) {
      const { screenLength: e37, minWorldLength: t30, maxWorldLength: r30 } = g17.verticalOffset;
      p23.verticalOffset = { screenLength: u5(e37), minWorldLength: t30 || 0, maxWorldLength: null != r30 ? r30 : 1 / 0 }, p23.castShadows = false;
    }
    if (this._context.screenSizePerspectiveEnabled && (p23.screenSizePerspective = this._context.sharedResources.screenSizePerspectiveSettings), this._drivenProperties.color) p23.externalColor = s8;
    else {
      const t30 = null != _10 ? this._drivenProperties.opacity ? u9([...l4.toUnitRGB(_10), 1]) : l4.toUnitRGBA(_10) : this._drivenProperties.opacity ? s8 : a10;
      p23.externalColor = t30;
    }
    this._fastUpdates = W(this._context.renderer, this._fastVisualVariableConvertOptions(o28, n29, a33, null)), p23.isInstanced = true, this._fastUpdates ? (Object.assign(p23, this._fastUpdates.materialParameters), this._optionalFields.push(e17.FEATUREATTRIBUTE)) : this._hasPerInstanceColor() && (p23.hasInstancedColor = true, this._optionalFields.push(e17.COLOR)), e19() && this._optionalFields.push(e17.OLIDCOLOR);
    const R10 = new W2(p23, this._context);
    R10.setParameters({ cullFace: _e2(R10.transparent) });
    const v7 = l13(t29, R10);
    if (!v7) throw new Error(`Unknown object symbol primitive: ${t29}`);
    const L10 = await this._createStageResources(v7, y15, r29), w11 = await this._createLodRenderer(v7, r29);
    return new me2(v7, w11, L10, a33, h23, d14, o28, n29, c25, y15);
  }
  async _createResourcesForUrl(e37, t29) {
    const r29 = { isInstanced: true, hasSlicePlane: this._context.slicePlaneEnabled, castShadows: this.symbolLayer.castShadows }, i18 = { spherical: this._context.spherical, materialParameters: r29, streamDataRequester: this._context.streamDataRequester, cache: this._context.sharedResources.objectResourceCache, compressionOptions: { compressionTracker: this._context.compressionTracker, compressionCallback: () => this.updateComplexity() } };
    this._fastUpdates = W(this._context.renderer, this._fastVisualVariableConvertOptions(null, null, null, null)), this._fastUpdates ? (Object.assign(i18.materialParameters, this._fastUpdates.materialParameters), this._optionalFields.push(e17.FEATUREATTRIBUTE)) : this._hasPerInstanceColor() && (i18.materialParameters.hasInstancedColor = true, this._optionalFields.push(e17.COLOR)), e19() && this._optionalFields.push(e17.OLIDCOLOR);
    const o28 = this.symbol;
    if ("point-3d" === o28.type && o28.verticalOffset) {
      const { screenLength: e38, minWorldLength: t30, maxWorldLength: r30 } = o28.verticalOffset;
      i18.materialParameters.verticalOffset = { screenLength: u5(e38), minWorldLength: t30 || 0, maxWorldLength: null != r30 ? r30 : 1 / 0 }, i18.materialParameters.castShadows = false;
    }
    const a33 = this._context.physicalBasedRenderingEnabled;
    i18.signal = t29, i18.usePBR = a33, i18.skipHighLods = this._context.skipHighSymbolLods;
    const n29 = await Y2(e37, i18), c25 = n29.isEsriSymbolResource, h23 = n29.isWosr, d14 = s21(n29.lods), m21 = this._context, p23 = this.symbolLayer.material, f22 = this._getExternalColorParameters(p23), y15 = this.needsDrivenTransparentPass, _10 = d14.getMaterials();
    _10.forEach((e38) => {
      e38.setParameters({ ...f22, drivenOpacity: y15 }), m21.screenSizePerspectiveEnabled && e38.setParameters({ screenSizePerspective: m21.sharedResources.screenSizePerspectiveSettings });
    });
    const g17 = n29.referenceBoundingBox, b17 = u7(p(g17)), x8 = u7(d14.levels[0].pivotOffset), P11 = u7(t3(b17, this.symbolLayer)), R10 = r7(P11), v7 = this._fastUpdates;
    X(v7, this._context.renderer, this._fastVisualVariableConvertOptions(g17, P11, b17, x8)) && _10.forEach((e38) => e38.setParameters(v7.materialParameters));
    const L10 = await this._createStageResources(d14, a33, t29), S12 = await this._createLodRenderer(d14, t29);
    return new me2(d14, S12, L10, b17, c25, h23, g17, P11, R10, a33, x8);
  }
  _addDisposeResource(e37) {
    this._disposeResourceHandles.push(e37);
  }
  async _createStageResources(e37, s26, r29) {
    const i18 = this._context.stage, o28 = e37.getMaterials();
    s26 !== this._context.physicalBasedRenderingEnabled && this.physicalBasedRenderingChanged();
    const a33 = e37.getTextures();
    i18.addTextures(a33), this._addDisposeResource(() => {
      a33.forEach((e38) => e38.unload()), i18.removeTextures(a33);
    }), await Promise.all(a33.map((e38) => this._context.stage.schedule(() => e38.load(i18.renderView.renderingContext), r29))), s2(r29);
    const n29 = e37.getEngineGeometries();
    return { materials: o28, textures: a33, geometries: n29 };
  }
  async _createLodRenderer(e37, t29) {
    const s26 = this._context.stage, r29 = { layerViewUid: this._context.layerViewUid, graphicUid: (e38) => this._instanceIndexToGraphicUid.get(e38), notifyGraphicGeometryChanged: (e38) => this._context.notifyGraphicGeometryChanged(this._instanceIndexToGraphicUid.get(e38)), notifyGraphicVisibilityChanged: (e38) => this._context.notifyGraphicVisibilityChanged(this._instanceIndexToGraphicUid.get(e38)) }, i18 = this._fastUpdates, o28 = i18 ? { applyTransform: (e38, t30, s27) => {
      e38.getFeatureAttribute(t30, Pe), n5(s27, te(i18.materialParameters, Pe, s27));
    }, scaleFactor: (e38, t30, s27) => {
      t30.getFeatureAttribute(s27, Pe), oe(e38, i18.materialParameters, Pe);
    } } : null, n29 = new k8({ symbol: e37, optionalFields: this._optionalFields, metadata: r29, shaderTransformation: o28 }, this._context.scheduler);
    return n29.slicePlaneEnabled = this._context.slicePlaneEnabled, this._addDisposeResource(() => {
      s26.removeRenderPlugin(n29), n29.destroy();
    }), await s26.addRenderPlugin(n29, t29), n29;
  }
  _getExternalColorParameters(t29) {
    const s26 = {};
    if (this._drivenProperties.color) s26.externalColor = s8;
    else if (null != t29?.color) {
      const r29 = l4.toUnitRGBA(t29.color);
      this._drivenProperties.opacity && (r29[3] = 1), s26.externalColor = r29;
    } else s26.externalColor = s8, s26.colorMixMode = "ignore";
    return s26.emissiveStrength = t29?.emissive?.strength ?? 1, s26.emissiveSource = p3(t29?.emissive?.source ?? "emissive"), s26;
  }
  destroy() {
    super.destroy(), this._cleanupResources();
  }
  _cleanupResources() {
    this._disposeResourceHandles.forEach((e37) => e37()), this._disposeResourceHandles.length = 0, this._resources = null;
  }
  createGraphics3DGraphic(e37) {
    const t29 = e37.graphic;
    if (!this._validateGeometry(t29.geometry)) return null;
    const s26 = f13(t29.geometry);
    if (null == s26) return this.logger.warn(`unsupported geometry type for object symbol: ${t29.geometry.type}`), null;
    const r29 = this.setGraphicElevationContext(t29), i18 = e37.renderingInfo;
    return this._createAs3DShape(t29, s26, i18, r29, t29.uid);
  }
  notifyDestroyGraphicLayer(e37) {
    this._instanceIndexToGraphicUid.delete(e37.instanceIndex);
  }
  graphicLayerToGraphicId() {
    return 0;
  }
  layerOpacityChanged() {
    if (null == this._resources) return;
    const e37 = this._getLayerOpacity(), t29 = this._resources.stageResources.materials;
    for (let s26 = 0; s26 < t29.length; s26++) {
      const r29 = t29[s26];
      r29.setParameters({ layerOpacity: e37 }), this._isPrimitive && r29.setParameters({ cullFace: _e2(r29.transparent) });
    }
  }
  layerElevationInfoChanged(e37, t29) {
    return this.updateGraphics3DGraphicElevationInfo(e37, t29, g10);
  }
  slicePlaneEnabledChanged() {
    if (null == this._resources) return true;
    this._resources.lodRenderer.slicePlaneEnabled = this._context.slicePlaneEnabled;
    for (const e37 of this._resources.stageResources.materials) e37.setParameters({ hasSlicePlane: this._context.slicePlaneEnabled });
    return true;
  }
  physicalBasedRenderingChanged() {
    if (null == this._resources) return true;
    const { stageResources: e37, isWosr: t29 } = this._resources;
    for (const s26 of e37.materials) this._isPrimitive ? s26.setParameters({ usePBR: this._context.physicalBasedRenderingEnabled, isSchematic: true }) : t29 || s26.setParameters({ usePBR: this._context.physicalBasedRenderingEnabled, isSchematic: false });
    return false !== this._hasLoadedPBRTextures || true !== this._context.physicalBasedRenderingEnabled || (this._hasLoadedPBRTextures = true, false);
  }
  applyRendererDiff(e37, t29) {
    if (null == this._resources) return e29.RecreateSymbol;
    const { stageResources: { materials: s26 }, lodRenderer: r29, resourceBoundingBox: i18, symbolSize: o28, resourceSize: a33, pivotOffset: n29 } = this._resources;
    for (const l28 in e37.diff) {
      if ("visualVariables" !== l28) return e29.RecreateSymbol;
      if (!X(this._fastUpdates, t29, this._fastVisualVariableConvertOptions(i18, o28, a33, n29))) return e29.RecreateSymbol;
      for (const e38 of s26) e38.setParameters(this._fastUpdates.materialParameters);
      r29.notifyShaderTransformationChanged();
    }
    return e29.FastUpdate;
  }
  computeComplexity() {
    if (null == this._resources) return super.computeComplexity();
    const e37 = this._resources.lodResources, t29 = w4(e37.levels), s26 = e37.computeUsedMemory(), r29 = { ...C6(this.symbol, this.symbolLayer), resourceBytes: s26 };
    return new e27({ verticesPerFeature: t29, memory: r29 });
  }
  _hasLodRenderer() {
    return null != this._resources;
  }
  _createAs3DShape(e37, t29, s26, r29, i18) {
    if (!this._hasLodRenderer() || null == this._resources) return null;
    const o28 = this.getFastUpdateAttrValues(e37), a33 = this._context.clippingExtent;
    if (i6(t29, ge2, this._context.elevationProvider.spatialReference), null != a33 && !V2(a33, ge2)) return null;
    const n29 = fe2(r29), l28 = this._computeGlobalTransform(t29, r29, xe2, Re), c25 = this._computeLocalTransform(this._resources, this.symbolLayer, s26, be2), h23 = this._resources.lodRenderer.instanceData, d14 = h23.addInstance();
    if (this._instanceIndexToGraphicUid.set(d14, i18), h23.setLocalTransform(d14, c25, false), h23.setGlobalTransform(d14, l28), o28 && h23.setFeatureAttribute(d14, o28), null == this._fastUpdates && this._hasPerInstanceColor()) {
      const e38 = this._getVertexOpacityAndColor(s26, this._getFallbackOpacityAndColor(), 255);
      h23.setColor(d14, e38);
    }
    const m21 = this._context.stage.renderView.olidRenderHelper;
    if (m21) {
      const e38 = m21.getObjectAndLayerIdColor({ graphicUid: i18, layerViewUid: this._context.layerViewUid });
      h23.setObjectAndLayerIdColor(d14, e38);
    }
    const p23 = new u25(this, d14, b10, r29, this._context.stage.view.state.highlightOrderMap);
    return n29 && (p23.alignedSampledElevation = Re.sampledElevation), p23.needsElevationUpdates = g10(r29.mode), m14(p23, t29, this._context.elevationProvider), p23;
  }
  _computeGlobalTransform(e37, t29, s26, r29) {
    return c13(e37, this._context.elevationProvider, t29, this._context.renderCoordsHelper, r29), ge2[0] = e37.x, ge2[1] = e37.y, ge2[2] = r29.z, m7(e37.spatialReference, ge2, s26, this._context.renderCoordsHelper.spatialReference), s26;
  }
  _computeLocalTransform(e37, t29, s26, i18) {
    return o5(i18), this._applyObjectRotation(s26, false, i18), this._applyObjectRotation(t29, true, i18), this._applyObjectScale(e37, s26, i18), this._applyAnchor(e37, t29, i18), i18;
  }
  _applyObjectScale(e37, t29, s26) {
    if (this._fastUpdates?.requiresShaderTransformation) return;
    const r29 = this._drivenProperties.size && t29.size ? t29.size : e37.symbolSize, o28 = B3(r29, e37.symbolSize, e37.resourceSize, this._context.renderCoordsHelper.unitInMeters);
    1 === o28[0] && 1 === o28[1] && 1 === o28[2] || f2(s26, s26, o28);
  }
  prepareSymbolLayerPatch(e37) {
    if ("partial" !== e37.diff.type) return;
    const t29 = e37.diff.diff;
    this._preparePatchTransform(e37, t29), this._preparePatchColor(e37, t29);
  }
  updateGeometry(e37, t29) {
    if (null == this._resources) return true;
    const s26 = t29 && f13(t29);
    if (null == s26) return false;
    const r29 = this.getGeometryElevationMode(t29);
    return e37.elevationContext.mode === r29 && (this._computeGlobalTransform(s26, e37.elevationContext, xe2, Re), fe2(e37.elevationContext) && (e37.alignedSampledElevation = Re.sampledElevation), this._resources.lodRenderer.instanceData.setGlobalTransform(e37.instanceIndex, xe2, true), m14(e37, s26, this._context.elevationProvider), true);
  }
  _preparePatchTransform(e37, t29) {
    if (!(t29.heading || t29.tilt || t29.roll || t29.width || t29.height || t29.depth || t29.anchor || t29.anchorPosition)) return;
    if (null == this._resources) return;
    const s26 = (e38, t30, s27) => (null != e38 && "complete" === e38.type ? e38.newValue : t30) ?? s27, r29 = s26(t29.heading, this.symbolLayer.heading, 0), i18 = s26(t29.tilt, this.symbolLayer.tilt, 0), o28 = s26(t29.roll, this.symbolLayer.roll, 0), a33 = s26(t29.width, this.symbolLayer.width, void 0), n29 = s26(t29.height, this.symbolLayer.height, void 0), l28 = s26(t29.depth, this.symbolLayer.depth, void 0), c25 = s26(t29.anchor, this.symbolLayer.anchor, void 0), h23 = s26(t29.anchorPosition, this.symbolLayer.anchorPosition, void 0);
    delete t29.heading, delete t29.tilt, delete t29.roll, delete t29.width, delete t29.height, delete t29.depth, delete t29.anchor, delete t29.anchorPosition;
    const d14 = { heading: r29, tilt: i18, roll: o28, anchor: c25, anchorPosition: h23 }, m21 = this._resources;
    this.loadStatus === l17.LOADED && e37.symbolLayerStatePatches.push(() => {
      m21.symbolSize = u7(t3(m21.resourceSize, { width: a33, height: n29, depth: l28, isPrimitive: this._isPrimitive }));
    }), e37.graphics3DGraphicPatches.push(({ instanceIndex: e38 }, t30) => {
      const s27 = this._computeLocalTransform(m21, d14, t30, be2);
      m21.lodRenderer.instanceData.setLocalTransform(e38, s27, true);
    });
  }
  _preparePatchColor(t29, s26) {
    if (!s26.material || "partial" !== s26.material.type) return;
    const r29 = s26.material.diff;
    if (!r29.color || "complete" !== r29.color.type || null == r29.color.newValue || null == r29.color.oldValue) return;
    const i18 = r29.color.newValue, o28 = null != i18 ? l4.toUnitRGBA(i18) : s8;
    delete r29.color;
    const a33 = this._resources;
    if (null == a33) return;
    const n29 = this._isPrimitive;
    t29.graphics3DGraphicPatches.push(({ instanceIndex: e37 }) => {
      if (this._hasPerInstanceColor()) a33.lodRenderer.instanceData.setColor(e37, o28);
      else {
        const e38 = { externalColor: o28 };
        for (const t30 of a33.stageResources.materials) t30.setParameters(e38), n29 && t30.setParameters({ cullFace: _e2(t30.transparent) });
      }
    });
  }
  _applyObjectRotation(e37, t29, s26) {
    if (!this._fastUpdates?.requiresShaderTransformation || !t29) return k5(e37.heading, e37.tilt, e37.roll, s26);
  }
  _applyAnchor(e37, t29, s26) {
    if (this._fastUpdates?.requiresShaderTransformation) return;
    const r29 = ue3(e37.resourceBoundingBox, e37.pivotOffset, t29);
    r29 && i3(s26, s26, r29);
  }
  _hasPerInstanceColor() {
    return this._drivenProperties.color || this._drivenProperties.opacity;
  }
  _fastVisualVariableConvertOptions(e37, t29, s26, r29) {
    const i18 = null != e37 ? u7(p(e37)) : _2, o28 = null != e37 ? ue3(e37, r29, this.symbolLayer) : a7, a33 = this._context.renderCoordsHelper.unitInMeters, n29 = B3(null != t29 ? t29 : void 0, t29, s26, a33), l28 = r5(this.symbolLayer.tilt || 0, this.symbolLayer.roll || 0, this.symbolLayer.heading || 0);
    return new J2({ supports: { size: true, color: true, rotation: true, opacity: false }, modelSize: i18, symbolSize: t29 ?? _2, unitInMeters: a33, anchor: o28, scale: n29, rotation: l28, fallbackColor: this._getFallbackOpacityAndColor(), fallbackSize: n29 });
  }
  get _primitive() {
    const { resource: e37 } = this.symbolLayer;
    return null != e37?.href ? null : e37?.primitive ?? d2;
  }
  _getFallbackOpacityAndColor() {
    const t29 = this.symbolLayer.material?.color;
    if (null == t29) {
      return null == this._primitive ? s8 : a10;
    }
    return l4.toUnitRGBA(t29);
  }
};
function ue3(e37, t29, s26) {
  const r29 = n4();
  switch (s26.anchor) {
    case "center":
      s9(r29, b3(e37)), y5(r29, r29);
      break;
    case "top": {
      const t30 = b3(e37);
      o7(r29, -t30[0], -t30[1], -e37[5]);
      break;
    }
    case "bottom": {
      const t30 = b3(e37);
      o7(r29, -t30[0], -t30[1], -e37[2]);
      break;
    }
    case "relative": {
      const t30 = b3(e37), i18 = p(e37), o28 = s26.anchorPosition, a33 = o28 ? r5(o28.x, o28.y, o28.z) : a7;
      e9(r29, i18, a33), u10(r29, r29, t30), y5(r29, r29);
      break;
    }
    default:
      null != t29 ? y5(r29, t29) : s9(r29, a7);
  }
  return r29;
}
function fe2(e37) {
  return "absolute-height" !== e37.mode;
}
function ye2(e37) {
  return 1 === (e37.material?.color?.a ?? 1) && null == e37.resource?.href;
}
function _e2(e37) {
  return e37 ? e15.None : e15.Back;
}
var ge2 = n4();
var be2 = e10();
var xe2 = e10();
var Pe = n7();
var Re = new R3();

// node_modules/@arcgis/core/views/3d/webgl-engine/lib/Path.js
var f17 = class {
  constructor(t29, i18, e37, s26, o28) {
    this.vertices = t29, this.positionsES = i18, this.offset = s26, this.positions = o28;
    const h23 = t29.length, r29 = Math.floor(h23 / 2), f22 = this.offset + 3 * r29, g17 = e37[f22], v7 = e37[f22 + 1], c25 = e37[f22 + 2];
    this.origin = r5(g17, v7, c25);
    const l28 = this.offset + 3 * h23;
    for (let n29 = this.offset; n29 < l28; n29 += 3) o28[n29] = e37[n29] - g17, o28[n29 + 1] = e37[n29 + 1] - v7, o28[n29 + 2] = e37[n29 + 2] - c25;
    this.updatePathVertexInformation();
  }
  get usedMemory() {
    return this._getSharedBufferSliceMemory(this.positions);
  }
  _getSharedBufferSliceMemory(o28) {
    return m(o28) ? (0 === this.offset ? y3 : 0) + 3 * this.vertices.length * o28.BYTES_PER_ELEMENT : (0 === this.offset ? a6 : 0) + 3 * this.vertices.length * n3;
  }
  updatePathVertexInformation() {
    const t29 = this.vertices.length, i18 = this.vertices[0];
    let e37 = this.offset;
    const s26 = this.positions;
    i18.vRight[0] = s26[e37 + 3] - s26[e37], i18.vRight[1] = s26[e37 + 4] - s26[e37 + 1], i18.vRight[2] = s26[e37 + 5] - s26[e37 + 2], e37 += 3;
    let n29 = r7(i18.vRight);
    i18.vMinSiblingLength = n29, A2(i18.vRight, i18.vRight);
    let f22 = i18;
    for (let g17 = 1; g17 < t29; ++g17) {
      const i19 = this.vertices[g17];
      if (i19.vLeft = f22.vRight, g17 < t29 - 1) {
        i19.vRight[0] = s26[e37 + 3] - s26[e37], i19.vRight[1] = s26[e37 + 4] - s26[e37 + 1], i19.vRight[2] = s26[e37 + 5] - s26[e37 + 2];
        const t30 = r7(i19.vRight);
        i19.vMinSiblingLength = Math.min(n29, t30), n29 = t30, A2(i19.vRight, i19.vRight);
      } else s9(i19.vRight, i19.vLeft), i19.vMinSiblingLength = n29;
      f22 = i19, e37 += 3;
    }
  }
};

// node_modules/@arcgis/core/geometry/support/HalfFloatArray.js
function n22(n29, a33 = false) {
  return n29 <= y ? a33 ? new Array(n29).fill(0) : new Array(n29) : t8(n29);
}

// node_modules/@arcgis/core/views/3d/webgl-engine/lib/PathBuilder.js
var h15 = class {
  constructor(s26, o28, h23, n29, a33, p23 = {}) {
    this.path = s26, this.profile = o28, this.extruder = h23, this.startCap = n29, this.endCap = a33, this.options = p23, this._extrusionVertexCount = 0;
    const l28 = this.path.vertices.length - 2;
    this.numExtrusionProfiles = h23.numProfilesPerJoin() * l28 + 2, this.numVerticesTotal = o28.vertices.length * this.numExtrusionProfiles, this.startCap.vertexBufferStart = this.numVerticesTotal;
    const u31 = this.startCap.numVertices;
    this.numVerticesTotal += u31, this.endCap.vertexBufferStart = this.numVerticesTotal;
    const x8 = this.endCap.numVertices;
    this.numVerticesTotal += x8, this.pathVertexData = a11(1 * this.numVerticesTotal), this.profileRightAxes = t17(2 * this.numVerticesTotal), this.profileUpAxes = t17(2 * this.numVerticesTotal), this.profileVertexAndNormals = n22(4 * this.numVerticesTotal), this.profileAuxData = n22(3 * this.numVerticesTotal), this.positions = e20(s26.positions, s26.offset, 3 * s26.vertices.length), this._rebuildGeometry(), this._buildTopology();
  }
  emitVertex(t29, e37, i18, s26, r29) {
    let h23 = 4 * this._extrusionVertexCount;
    if (this.profileVertexAndNormals[h23] = i18[0], this.profileVertexAndNormals[h23 + 1] = i18[1], this.profileVertexAndNormals[h23 + 2] = s26[0], this.profileVertexAndNormals[h23 + 3] = s26[1], this.pathVertexData[this._extrusionVertexCount] = t29, h23 = 3 * this._extrusionVertexCount, r29) {
      const e38 = this.path.vertices[t29], i19 = e38.maxStretchDistance;
      this.profileAuxData[h23] = e38.rotationRight[0] * i19, this.profileAuxData[h23 + 1] = e38.rotationRight[1] * i19;
    } else this.profileAuxData[h23] = this.profileAuxData[h23 + 1] = 0;
    this.profileAuxData[h23 + 2] = 0, e25(this.profileRightAxes, this._extrusionVertexCount, e37.right[0], e37.right[1], e37.right[2]), e25(this.profileUpAxes, this._extrusionVertexCount, e37.up[0], e37.up[1], e37.up[2]), ++this._extrusionVertexCount;
  }
  emitCapVertex(t29, e37, i18, s26, r29, h23) {
    let n29 = 4 * this._extrusionVertexCount;
    this.profileVertexAndNormals[n29] = i18[0], this.profileVertexAndNormals[n29 + 1] = i18[1], this.profileVertexAndNormals[n29 + 2] = s26[0], this.profileVertexAndNormals[n29 + 3] = s26[1], n29 = 3 * this._extrusionVertexCount, this.profileAuxData[n29] = r29, this.profileAuxData[n29 + 1] = h23, this.profileAuxData[n29 + 2] = 1, e25(this.profileRightAxes, this._extrusionVertexCount, e37.right[0], e37.right[1], e37.right[2]), e25(this.profileUpAxes, this._extrusionVertexCount, e37.up[0], e37.up[1], e37.up[2]), this.pathVertexData[this._extrusionVertexCount] = t29, ++this._extrusionVertexCount;
  }
  _rebuildGeometry() {
    this._extrusionVertexCount = 0;
    const { positions: e37, offset: i18, vertices: s26 } = this.path;
    this.positions = e20(e37, i18, 3 * s26.length);
    let r29 = 0;
    const o28 = (t29, e38, i19, s27, o29) => this.emitCapVertex(r29, t29, e38, i19, s27, o29), h23 = (t29, e38, i19, s27) => this.emitVertex(r29, t29, e38, i19, s27);
    for (this.startCap.rebuildConnectingProfileGeometry(s26[r29], this.profile, o28), r29 = 1; r29 < s26.length - 1; ++r29) this.extruder.extrude(s26[r29], this.profile, h23);
    this.endCap.rebuildConnectingProfileGeometry(s26[r29], this.profile, o28), r29 = 0, this.startCap.rebuildCapGeometry(s26[r29], o28), r29 = s26.length - 1, this.endCap.rebuildCapGeometry(s26[r29], o28);
  }
  _buildTopology() {
    const t29 = this.profile.vertices.length, e37 = this.profile.numSegments, i18 = this.numExtrusionProfiles - 1;
    let r29 = 3 * (2 * (e37 * i18));
    this.startCap.indexBufferStart = r29, this.startCap.firstProfileVertexIndex = 0, r29 += this.startCap.numIndices, this.endCap.indexBufferStart = r29, this.endCap.firstProfileVertexIndex = t29 * (this.numExtrusionProfiles - 1);
    const o28 = new Array(), h23 = new Array(), n29 = (t30, e38, i19) => {
      o28.push(t30), o28.push(e38), o28.push(i19), h23.push(this.pathVertexData[t30]), h23.push(this.pathVertexData[e38]), h23.push(this.pathVertexData[i19]);
    };
    for (let s26 = 0; s26 < e37; ++s26) {
      const e38 = this.profile.indices[2 * s26], r30 = this.profile.indices[2 * s26 + 1];
      for (let s27 = 0; s27 < i18; ++s27) {
        const i19 = s27 * t29 + e38, o29 = (s27 + 1) * t29 + r30, h24 = s27 * t29 + r30;
        n29(i19, (s27 + 1) * t29 + e38, o29), n29(i19, o29, h24);
      }
    }
    this.startCap.buildTopology(this.path.vertices[0], n29), this.endCap.buildTopology(this.path.vertices[this.path.vertices.length - 1], n29), this.vertexIndices = e13(o28), this.pathVertexIndices = e13(h23);
  }
  onPathChanged() {
    this._rebuildGeometry();
  }
};

// node_modules/@arcgis/core/views/3d/webgl-engine/lib/PathCapBuilder.js
var o25 = class {
  rebuildConnectingProfileGeometry(e37, t29, s26) {
    for (let i18 = 0; i18 < t29.vertices.length; ++i18) s26(e37.frame, t29.vertices[i18], t29.normals[i18], 0, 0);
  }
};
var l22 = class extends o25 {
  constructor() {
    super(), this.numVertices = 0, this.numIndices = 0;
  }
  rebuildCapGeometry() {
  }
  buildTopology() {
  }
};
var f18 = class extends o25 {
  constructor(e37, t29 = 0, s26 = false) {
    super(), this.profile = e37, this.profilePlaneOffset = t29, this.flip = s26;
  }
  get numVertices() {
    return this.profile.vertices.length;
  }
  get numIndices() {
    return 3 * this.profile.numSegments;
  }
  rebuildConnectingProfileGeometry(e37, t29, s26) {
    const i18 = this.profilePlaneOffset;
    for (let r29 = 0; r29 < t29.vertices.length; ++r29) s26(e37.frame, t29.vertices[r29], t29.normals[r29], i18, 0);
  }
  rebuildCapGeometry(t29, s26) {
    const i18 = this.profile, r29 = this.flip ? 1 : -1, n29 = this.profilePlaneOffset, o28 = m17;
    o10(o28, 0, 0);
    for (let e37 = 0; e37 < i18.vertices.length; ++e37) s26(t29.frame, i18.vertices[e37], o28, n29, r29);
  }
  buildTopology(e37, t29) {
    const s26 = this.profile, i18 = this.vertexBufferStart + s26.indices[0];
    for (let r29 = 1; r29 < s26.numSegments; ++r29) {
      const e38 = s26.indices[2 * r29], n29 = s26.indices[2 * r29 + 1], o28 = this.vertexBufferStart + e38, l28 = this.vertexBufferStart + n29;
      this.flip ? t29(l28, o28, i18) : t29(i18, o28, l28);
    }
  }
};
var h16 = class extends o25 {
  constructor(e37) {
    super(), this.flip = false, this.sign = 0, this.breakNormals = false, this.numSegments = 3, this.profile = e37.profile, this.flip = e37.flip, this.sign = this.flip ? 1 : -1, this.breakNormals = e37.breakNormals, this.numSegments = e37.subdivisions;
  }
  get numVertices() {
    let e37 = this.profile.vertices.length * (this.numSegments - 1) + this.profile.poles.length;
    return this.breakNormals && (e37 += this.profile.vertices.length), e37;
  }
  get numIndices() {
    let e37 = 0;
    const t29 = this.profile;
    e37 += 2 * t29.numSegments * (this.numSegments - 1);
    for (let s26 = 0; s26 < t29.numSegments; ++s26) {
      const i18 = t29.indices[2 * s26], r29 = t29.indices[2 * s26 + 1];
      t29.poleIndices[i18] === t29.poleIndices[r29] ? e37 += 1 : e37 += 2;
    }
    return 3 * e37;
  }
  rebuildCapGeometry(n29, o28) {
    const l28 = this.profile, f22 = n29.frame, h23 = 0.5 * this.sign, p23 = c18, a33 = m17;
    o10(a33, 0, 0);
    for (const e37 of l28.poles) e37.normal ? o28(f22, e37.position, e37.normal, h23, 0) : o28(f22, e37.position, a33, h23, this.sign);
    if (this.breakNormals) for (let e37 = 0; e37 < l28.vertices.length; ++e37) o28(f22, l28.vertices[e37], l28.normals[e37], 0, 0);
    for (let e37 = 0; e37 < this.numSegments - 1; ++e37) {
      const n30 = (1 - (e37 + 1) / this.numSegments) * Math.PI * 0.5, c25 = Math.sin(n30), m21 = Math.cos(n30);
      for (let e38 = 0; e38 < l28.vertices.length; ++e38) {
        const n31 = l28.poles[l28.poleIndices[e38]];
        e14(p23, l28.vertices[e38], n31.position), l8(p23, p23, c25), n31.normal ? (u13(p23, p23, n31.position), o28(f22, p23, n31.normal, h23 * m21, 0)) : (v(a33, p23), l8(a33, a33, c25), u13(p23, p23, n31.position), o28(f22, p23, a33, h23 * m21, this.sign * m21));
      }
    }
  }
  buildTopology(e37, t29) {
    const s26 = this.profile, i18 = this.breakNormals ? this.vertexBufferStart + s26.poles.length : this.firstProfileVertexIndex, r29 = this.breakNormals ? this.vertexBufferStart + s26.poles.length + s26.vertices.length : this.vertexBufferStart + s26.poles.length;
    for (let n29 = 0; n29 < s26.numSegments; ++n29) {
      const e38 = s26.indices[2 * n29], o28 = s26.indices[2 * n29 + 1], l28 = this.vertexBufferStart + s26.poleIndices[e38], f22 = this.vertexBufferStart + s26.poleIndices[o28];
      let h23 = i18 + e38, c25 = i18 + o28;
      for (let i19 = 0; i19 < this.numSegments - 1; ++i19) {
        const n30 = r29 + i19 * s26.vertices.length + e38, l29 = r29 + i19 * s26.vertices.length + o28;
        this.flip ? (t29(n30, c25, h23), t29(c25, n30, l29)) : (t29(h23, c25, n30), t29(l29, n30, c25)), h23 = n30, c25 = l29;
      }
      this.flip ? (t29(l28, c25, h23), l28 !== f22 && t29(l28, f22, c25)) : (t29(h23, c25, l28), l28 !== f22 && t29(c25, f22, l28));
    }
  }
};
var c18 = n8();
var m17 = n8();

// node_modules/@arcgis/core/views/3d/webgl-engine/lib/PathExtruder.js
var c19 = class {
  numProfilesPerJoin() {
    return 1;
  }
  extrude(t29, e37, r29) {
    for (let s26 = 0; s26 < e37.vertices.length; ++s26) r29(t29.frame, e37.vertices[s26], e37.normals[s26], false);
  }
};
var a29 = class {
  constructor(t29, e37) {
    this.cutoffAngle = t29, this.numBendSubdivisions = e37;
  }
  numProfilesPerJoin() {
    return this.numBendSubdivisions + 1;
  }
  extrude(e37, s26, i18) {
    const o28 = h17, { rotationAngle: n29, rotationRight: c25, frame: a33 } = e37;
    if (Math.abs(n29) >= this.cutoffAngle) {
      const l28 = e37.rotationFrameUp;
      for (let h23 = 0; h23 < this.numBendSubdivisions + 1; ++h23) {
        p2(u28, 0.5 * -n29 + h23 * n29 / this.numBendSubdivisions, l28), m18(o28, a33, u28);
        for (let t29 = 0; t29 < s26.vertices.length; ++t29) {
          if (j4(s26.vertices[t29], c25) * n29 >= 0) i18(o28, s26.vertices[t29], s26.normals[t29], false);
          else {
            i18(a33, e37.applyMiterStretch(f19, s26.vertices[t29]), s26.normals[t29], true);
          }
        }
      }
    } else for (let t29 = 0; t29 < this.numBendSubdivisions + 1; ++t29) for (let o29 = 0; o29 < s26.vertices.length; ++o29) {
      const t30 = j4(s26.vertices[o29], c25) * n29 >= 0;
      i18(a33, e37.applyMiterStretch(f19, s26.vertices[o29]), s26.normals[o29], !t30);
    }
  }
};
var l23 = class {
  constructor() {
    this.up = n4(), this.right = n4();
  }
};
function m18(t29, e37, r29) {
  E2(t29.up, e37.up, r29), E2(t29.right, e37.right, r29);
}
var f19 = n8();
var u28 = e10();
var h17 = new l23();

// node_modules/@arcgis/core/views/3d/webgl-engine/lib/PathGeometry.js
var e33 = class extends p9 {
  constructor(t29, e37, o28, s26, n29, i18) {
    super(t29, e37, null, n13.Mesh, i18), this.path = o28, this.geometrySR = s26, this.stencilWidth = n29;
  }
};
var o26;
function s22(t29) {
  return "path" in t29;
}
!function(t29) {
  t29[t29.World = 0] = "World", t29[t29.Path = 1] = "Path";
}(o26 || (o26 = {}));

// node_modules/@arcgis/core/views/3d/webgl-engine/lib/PathGeometryData.js
var x4 = class {
  constructor(t29) {
    this.builder = t29;
  }
  onPathChanged(t29) {
    this.builder.onPathChanged();
  }
};
var T5 = class extends x4 {
  constructor(t29) {
    super(t29), this.color = r6(255, 255, 255, 255), this._size = n8(), this.positions = n12(3 * this.builder.numVerticesTotal), this.normals = new Int16Array(2 * this.builder.numVerticesTotal);
  }
  bakeVertexColors(t29) {
    this.color[0] = 255 * t29[0], this.color[1] = 255 * t29[1], this.color[2] = 255 * t29[2], this.color[3] = 255 * (t29.length > 3 ? t29[3] : 1);
  }
  bake(a33) {
    r10(this._size, a33);
    const { numVerticesTotal: c25, pathVertexData: p23, positions: m21, profileRightAxes: u31, profileUpAxes: f22, profileVertexAndNormals: d14, profileAuxData: A14 } = this.builder;
    for (let t29 = 0; t29 < c25; ++t29) {
      let c26 = p23[t29];
      c26 *= 3;
      const v7 = w6;
      let I15 = 0, x8 = 0;
      const T9 = u17(C9, u31, t29), O7 = u17(V6, f22, t29), j10 = 4 * t29, y15 = o10(R5, d14[j10] * a33[0], d14[j10 + 1] * a33[1]), U10 = 3 * t29;
      if (1 === A14[U10 + 2]) _3(v7, O7, T9), I15 = A14[U10] * a33[0], x8 = A14[U10 + 1];
      else {
        const t30 = E12, a34 = P7;
        o10(t30, A14[U10], A14[U10 + 1]);
        const l28 = q5(t30);
        v(t30, t30);
        const c27 = j4(y15, t30);
        if (Math.abs(c27) > l28) {
          o10(a34, -t30[1], t30[0]);
          const s26 = j4(y15, a34);
          l8(t30, t30, l28 * Math.sign(c27)), l8(a34, a34, s26), u13(y15, t30, a34);
        }
        o7(v7, 0, 0, 0);
      }
      const F9 = T9[0] * y15[0] + O7[0] * y15[1], N8 = T9[1] * y15[0] + O7[1] * y15[1], _10 = T9[2] * y15[0] + O7[2] * y15[1];
      this.positions[U10] = m21[c26] + F9 + v7[0] * I15, this.positions[U10 + 1] = m21[c26 + 1] + N8 + v7[1] * I15, this.positions[U10 + 2] = m21[c26 + 2] + _10 + v7[2] * I15;
      const z6 = d14[j10 + 2], D6 = d14[j10 + 3];
      e25(this.normals, t29, T9[0] * z6 + O7[0] * D6 + v7[0] * x8, T9[1] * z6 + O7[1] * D6 + v7[1] * x8, T9[2] * z6 + O7[2] * D6 + v7[2] * x8);
    }
  }
  createGeometryData() {
    const t29 = this.builder.vertexIndices;
    return [[e17.POSITION, new t10(this.positions, t29, 3, true)], [e17.NORMALCOMPRESSED, new t10(this.normals, t29, 2, true)], [e17.COLOR, new t10(this.color, U(t29.length), 4, true)]];
  }
  onPathChanged(t29) {
    super.onPathChanged(t29), this.bake(this.size);
  }
  intersect(t29, e37, s26, i18) {
    const r29 = this.builder.vertexIndices, o28 = new s13(this.positions, 3), n29 = r29.length / 3;
    x2(t29, e37, 0, n29, r29, o28, void 0, s26, (t30, e38, s27) => i18(t30, s27, e38));
  }
  get size() {
    return this._size;
  }
};
var O5 = class extends x4 {
  constructor(t29, e37, s26, i18) {
    super(t29), this.sizeAttributeValue = e37, this.colorAttributeValue = s26, this.opacityAttributeValue = i18, this.baked = new T5(t29), this._vvSize = n12(this.builder.path.vertices.length).fill(e37), this._vvColor = n22(this.builder.path.vertices.length).fill(s26), this._vvOpacity = n22(this.builder.path.vertices.length).fill(i18);
  }
  createGeometryData() {
    const t29 = this.builder, { pathVertexIndices: e37, vertexIndices: s26 } = t29;
    return [[e17.POSITION, new t10(t29.positions, e37, 3, true)], [e17.PROFILEVERTEXANDNORMAL, new t10(t29.profileVertexAndNormals, s26, 4, true)], [e17.PROFILEAUXDATA, new t10(t29.profileAuxData, s26, 3, true)], [e17.PROFILERIGHT, new t10(t29.profileRightAxes, s26, 2, true)], [e17.PROFILEUP, new t10(t29.profileUpAxes, s26, 2, true)], [e17.SIZEFEATUREATTRIBUTE, new t10(this._vvSize, e37, 1, true)], [e17.COLORFEATUREATTRIBUTE, new t10(this._vvColor, e37, 1, true)], [e17.OPACITYFEATUREATTRIBUTE, new t10(this._vvOpacity, e37, 1, true)]];
  }
  onPathChanged(t29) {
    super.onPathChanged(t29);
    const e37 = t29.getMutableAttribute(e17.POSITION);
    e37 && (e37.data = this.builder.positions);
  }
};
var R5 = n8();
var E12 = n8();
var P7 = n8();
var w6 = n4();
var C9 = n4();
var V6 = n4();

// node_modules/@arcgis/core/views/3d/webgl-engine/lib/pathGeometryUtils.js
function g14(g17, n29) {
  let v7 = null;
  const u31 = g17.vertices.length, j10 = 0.99619469809, R10 = n4(), y15 = n4(), x8 = n4(), L10 = n4(), b17 = n4(), k13 = n4(), q12 = M2();
  let G4 = g17.vertices[0];
  s9(y15, n29), o7(R10, 0, 1, 0), Mt(G4.vRight, y15, R10, R10, x8, y15, j10), s9(G4.frame.up, y15), s9(G4.frame.right, x8);
  const M7 = g17.positions;
  let U10 = g17.offset;
  v7 = G4;
  for (let f22 = 1; f22 < u31; ++f22) {
    G4 = g17.vertices[f22], u10(b17, G4.vLeft, G4.vRight);
    let m21 = r7(b17);
    m21 > 0 ? (m21 = 1 / Math.sqrt(m21), b17[0] = b17[0] * m21, b17[1] = b17[1] * m21, b17[2] = b17[2] * m21) : (b17[0] = G4.vRight[0], b17[1] = G4.vRight[1], b17[2] = G4.vRight[2]), k13[0] = M7[U10] + v7.frame.up[0], k13[1] = M7[U10 + 1] + v7.frame.up[1], k13[2] = M7[U10 + 2] + v7.frame.up[2], U10 += 3;
    const n30 = o7(h18, M7[U10], M7[U10 + 1], M7[U10 + 2]);
    l7(n30, b17, q12);
    q4(q12, k2(k13, G4.vLeft), L10) ? (L10[0] -= M7[U10], L10[1] -= M7[U10 + 1], L10[2] -= M7[U10 + 2], A2(y15, L10), _3(x8, b17, y15), A2(x8, x8)) : Mt(b17, v7.frame.up, v7.frame.right, R10, x8, y15, j10), s9(G4.frame.up, y15), s9(G4.frame.right, x8), v7 = G4;
  }
}
var h18 = n4();

// node_modules/@arcgis/core/views/3d/webgl-engine/lib/PathProfile.js
var r24 = class {
  constructor() {
    this.vertices = new Array(), this.normals = new Array(), this.indices = new Array(), this.poles = new Array(), this.poleIndices = new Array();
  }
  addVertex(t29, e37) {
    return this.vertices.push(t7(t29)), this.normals.push(t7(e37)), this.vertices.length - 1;
  }
  addPole(t29, e37 = null) {
    return this.poles.push({ position: t7(t29), normal: e37 ? t7(e37) : null }), this.poles.length - 1;
  }
  addSegment(t29, e37 = null) {
    this.indices.push(t29.v0), this.indices.push(t29.v1), e37 && (this.poleIndices.push(e37.v0), this.poleIndices.push(e37.v1));
  }
  get numSegments() {
    return this.indices.length / 2;
  }
  translate(t29, e37) {
    for (const s26 of this.vertices) s26[0] += t29, s26[1] += e37;
    for (const s26 of this.poles) s26.position[0] += t29, s26.position[1] += e37;
  }
  get usedMemory() {
    return this.vertices.length * i2(this.vertices[0]) * 2 + i2(this.indices);
  }
};
var n23 = { top: [0, -0.5], bottom: [0, 0.5] };
function i14(t29) {
  const s26 = 0.5, i18 = c14, d14 = new r24(), a33 = { v0: 0, v1: 0 };
  d14.addPole(r9(0, 0));
  for (let o28 = 0; o28 < i18; ++o28) {
    const t30 = 2 * o28 * Math.PI / i18, r29 = Math.cos(t30), n29 = Math.sin(t30), a34 = r9(r29 * s26, n29 * s26), c26 = r9(r29, n29);
    d14.addVertex(a34, c26);
  }
  for (let e37 = 0; e37 < i18 - 1; ++e37) {
    const t30 = { v0: e37, v1: e37 + 1 };
    d14.addSegment(t30, a33);
  }
  const c25 = { v0: i18 - 1, v1: 0 };
  if (d14.addSegment(c25, a33), "center" !== t29) {
    const e37 = n23[t29];
    d14.translate(e37[0], e37[1]);
  }
  return d14;
}
var d9 = { center: i14("center"), top: i14("top"), bottom: i14("bottom") };
var a30 = { center: c20("center"), top: c20("top"), bottom: c20("bottom") };
function c20(t29) {
  const s26 = 1, o28 = 1, i18 = new r24(), d14 = r9(-0.5, -0.5), a33 = r9(0.5 * s26, -0.5), c25 = r9(0.5 * s26, 0.5 * o28), h23 = r9(-0.5, 0.5 * o28), l28 = r9(0, -1), v7 = r9(1, 0), m21 = r9(0, 1), p23 = r9(-1, 0);
  if (i18.addPole(r9(0, 0.5 * o28), m21), i18.addPole(r9(0, 0.5 * o28)), i18.addPole(r9(0, -0.5)), i18.addPole(r9(0, -0.5), l28), i18.addVertex(d14, l28), i18.addVertex(a33, l28), i18.addSegment({ v0: 0, v1: 1 }, { v0: 3, v1: 3 }), i18.addVertex(a33, v7), i18.addVertex(c25, v7), i18.addSegment({ v0: 2, v1: 3 }, { v0: 2, v1: 1 }), i18.addVertex(c25, m21), i18.addVertex(h23, m21), i18.addSegment({ v0: 4, v1: 5 }, { v0: 0, v1: 0 }), i18.addVertex(h23, p23), i18.addVertex(d14, p23), i18.addSegment({ v0: 6, v1: 7 }, { v0: 1, v1: 2 }), "center" !== t29) {
    const e37 = n23[t29];
    i18.translate(e37[0], e37[1]);
  }
  return i18;
}

// node_modules/@arcgis/core/core/libs/gl-matrix-2/math/mat2.js
function n24(t29, n29) {
  return t29[0] = n29[0], t29[1] = n29[1], t29[2] = n29[2], t29[3] = n29[3], t29;
}
function r25(t29) {
  return t29[0] = 1, t29[1] = 0, t29[2] = 0, t29[3] = 1, t29;
}
function a31(t29, n29, r29, a33, u31) {
  return t29[0] = n29, t29[1] = r29, t29[2] = a33, t29[3] = u31, t29;
}
function u29(t29, n29) {
  if (t29 === n29) {
    const r29 = n29[1];
    t29[1] = n29[2], t29[2] = r29;
  } else t29[0] = n29[0], t29[1] = n29[2], t29[2] = n29[1], t29[3] = n29[3];
  return t29;
}
function o27(t29, n29) {
  const r29 = n29[0], a33 = n29[1], u31 = n29[2], o28 = n29[3];
  let e37 = r29 * o28 - u31 * a33;
  return e37 ? (e37 = 1 / e37, t29[0] = o28 * e37, t29[1] = -a33 * e37, t29[2] = -u31 * e37, t29[3] = r29 * e37, t29) : null;
}
function e34(t29, n29) {
  const r29 = n29[0];
  return t29[0] = n29[3], t29[1] = -n29[1], t29[2] = -n29[2], t29[3] = r29, t29;
}
function c21(t29) {
  return t29[0] * t29[3] - t29[2] * t29[1];
}
function s23(t29, n29, r29) {
  const a33 = n29[0], u31 = n29[1], o28 = n29[2], e37 = n29[3], c25 = r29[0], s26 = r29[1], i18 = r29[2], f22 = r29[3];
  return t29[0] = a33 * c25 + o28 * s26, t29[1] = u31 * c25 + e37 * s26, t29[2] = a33 * i18 + o28 * f22, t29[3] = u31 * i18 + e37 * f22, t29;
}
function i15(t29, n29, r29) {
  const a33 = n29[0], u31 = n29[1], o28 = n29[2], e37 = n29[3], c25 = Math.sin(r29), s26 = Math.cos(r29);
  return t29[0] = a33 * s26 + o28 * c25, t29[1] = u31 * s26 + e37 * c25, t29[2] = a33 * -c25 + o28 * s26, t29[3] = u31 * -c25 + e37 * s26, t29;
}
function f20(t29, n29, r29) {
  const a33 = n29[0], u31 = n29[1], o28 = n29[2], e37 = n29[3], c25 = r29[0], s26 = r29[1];
  return t29[0] = a33 * c25, t29[1] = u31 * c25, t29[2] = o28 * s26, t29[3] = e37 * s26, t29;
}
function l24(t29, n29) {
  const r29 = Math.sin(n29), a33 = Math.cos(n29);
  return t29[0] = a33, t29[1] = r29, t29[2] = -r29, t29[3] = a33, t29;
}
function M4(t29, n29) {
  return t29[0] = n29[0], t29[1] = 0, t29[2] = 0, t29[3] = n29[1], t29;
}
function h19(t29) {
  return "mat2(" + t29[0] + ", " + t29[1] + ", " + t29[2] + ", " + t29[3] + ")";
}
function b15(t29) {
  return Math.sqrt(t29[0] ** 2 + t29[1] ** 2 + t29[2] ** 2 + t29[3] ** 2);
}
function m19(t29, n29, r29, a33) {
  return t29[2] = a33[2] / a33[0], r29[0] = a33[0], r29[1] = a33[1], r29[3] = a33[3] - t29[2] * r29[1], [t29, n29, r29];
}
function d10(t29, n29, r29) {
  return t29[0] = n29[0] + r29[0], t29[1] = n29[1] + r29[1], t29[2] = n29[2] + r29[2], t29[3] = n29[3] + r29[3], t29;
}
function p22(t29, n29, r29) {
  return t29[0] = n29[0] - r29[0], t29[1] = n29[1] - r29[1], t29[2] = n29[2] - r29[2], t29[3] = n29[3] - r29[3], t29;
}
function y10(t29, n29) {
  return t29[0] === n29[0] && t29[1] === n29[1] && t29[2] === n29[2] && t29[3] === n29[3];
}
function x5(n29, r29) {
  const a33 = n29[0], u31 = n29[1], o28 = n29[2], e37 = n29[3], c25 = r29[0], s26 = r29[1], i18 = r29[2], f22 = r29[3], l28 = e7();
  return Math.abs(a33 - c25) <= l28 * Math.max(1, Math.abs(a33), Math.abs(c25)) && Math.abs(u31 - s26) <= l28 * Math.max(1, Math.abs(u31), Math.abs(s26)) && Math.abs(o28 - i18) <= l28 * Math.max(1, Math.abs(o28), Math.abs(i18)) && Math.abs(e37 - f22) <= l28 * Math.max(1, Math.abs(e37), Math.abs(f22));
}
function S8(t29, n29, r29) {
  return t29[0] = n29[0] * r29, t29[1] = n29[1] * r29, t29[2] = n29[2] * r29, t29[3] = n29[3] * r29, t29;
}
function j6(t29, n29, r29, a33) {
  return t29[0] = n29[0] + r29[0] * a33, t29[1] = n29[1] + r29[1] * a33, t29[2] = n29[2] + r29[2] * a33, t29[3] = n29[3] + r29[3] * a33, t29;
}
var _7 = s23;
var g15 = p22;
var q9 = Object.freeze(Object.defineProperty({ __proto__: null, LDU: m19, add: d10, adjoint: e34, copy: n24, determinant: c21, equals: x5, exactEquals: y10, frob: b15, fromRotation: l24, fromScaling: M4, identity: r25, invert: o27, mul: _7, multiply: s23, multiplyScalar: S8, multiplyScalarAndAdd: j6, rotate: i15, scale: f20, set: a31, str: h19, sub: g15, subtract: p22, transpose: u29 }, Symbol.toStringTag, { value: "Module" }));

// node_modules/@arcgis/core/core/libs/gl-matrix-2/factories/mat2f64.js
function e35() {
  return [1, 0, 0, 1];
}
function t28(e37) {
  return [e37[0], e37[1], e37[2], e37[3]];
}
function n25(e37, t29, n29, r29) {
  return [e37, t29, n29, r29];
}
var r26 = Object.freeze(Object.defineProperty({ __proto__: null, clone: t28, create: e35, fromValues: n25 }, Symbol.toStringTag, { value: "Module" }));

// node_modules/@arcgis/core/views/3d/webgl-engine/lib/PathVertex.js
var R6 = class {
  constructor() {
    this.vLeft = n4(), this.vRight = n4(), this.vMinSiblingLength = 0, this.frame = new l23();
  }
  setFrameFromUpVector(t29) {
    s9(this.frame.up, t29), u10(D4, this.vLeft, this.vRight), A2(D4, D4), g2(I10, this.frame.up, P2(D4, this.frame.up)), c4(k9, D4, I10), A2(k9, k9), _3(this.frame.right, k9, this.frame.up);
  }
  get foldingAngle() {
    return Math.PI - this.rotationAngle;
  }
};
var x6 = class extends R6 {
  get rotationFrameUp() {
    return this.frame.up;
  }
  get rotationRight() {
    return s10;
  }
  get rotationAngle() {
    g2(w7, this.frame.up, P2(this.frame.up, this.vLeft)), c4(w7, this.vLeft, w7), y5(w7, w7), A2(w7, w7), g2(y11, this.frame.up, P2(this.frame.up, this.vRight)), c4(y11, this.vRight, y11), A2(y11, y11), _3(U7, this.rotationFrameUp, this.vLeft);
    return Math.sign(P2(U7, this.vRight)) * (Math.PI - b2(P2(w7, y11)));
  }
  get maxStretchDistance() {
    return Math.abs(this.vMinSiblingLength / Math.cos(0.5 * this.foldingAngle));
  }
  applyMiterStretch(t29, r29) {
    const s26 = this.rotationAngle;
    if (Math.abs(s26) <= 0) return r29;
    const e37 = h(Math.cos(0.5 * s26));
    return o10(t29, (e37 - 1 + 1) * r29[0], r29[1]);
  }
};
var L7 = class extends R6 {
  get rotationFrameUp() {
    const t29 = Math.sign(P2(this.frame.right, this.vRight));
    return _3(A10, this.vRight, this.vLeft), g2(A10, A10, t29), A2(A10, A10);
  }
  get rotationRight() {
    const t29 = this.rotationFrameUp, i18 = P2(t29, this.frame.up), r29 = P2(t29, this.frame.right);
    return g2(F6, this.frame.up, -r29), g2(P8, this.frame.right, i18), u10(F6, F6, P8), A2(F6, F6), j7(S9, this.frame, F6), S9;
  }
  get rotationAngle() {
    const i18 = Math.sign(P2(this.frame.right, this.vRight));
    return y5(U7, this.vLeft), -i18 * (Math.PI - b2(P2(U7, this.vRight)));
  }
  get maxStretchDistance() {
    return Math.abs(this.vMinSiblingLength * h(Math.cos(0.5 * this.foldingAngle)));
  }
  applyMiterStretch(t29, s26) {
    const a33 = this.rotationAngle;
    if (0 === Math.abs(a33)) return s26;
    const h23 = h(Math.cos(0.5 * a33)), o28 = this.rotationRight, n29 = a31(E13, 1 + (h23 - 1) * o28[0] * o28[0], (h23 - 1) * o28[0] * o28[1], (h23 - 1) * o28[0] * o28[1], 1 + (h23 - 1) * o28[1] * o28[1]);
    return P3(t29, s26, n29);
  }
};
function j7(t29, i18, r29) {
  o10(t29, P2(r29, i18.right), P2(r29, i18.up));
}
function d11(t29) {
  switch (t29) {
    case o26.World:
      return new x6();
    case o26.Path:
      return new L7();
  }
}
var A10 = n4();
var S9 = n8();
var F6 = n4();
var P8 = n4();
var U7 = n4();
var w7 = n4();
var y11 = n4();
var I10 = n4();
var D4 = n4();
var k9 = n4();
var E13 = e35();

// node_modules/@arcgis/core/views/3d/webgl-engine/materials/PathTechnique.js
var A11 = class extends d7 {
  constructor() {
    super(...arguments), this.ambient = e6(0.2, 0.2, 0.2), this.diffuse = e6(0.8, 0.8, 0.8), this.opacity = 1, this.origin = n4(), this.modelTransformation = null, this.mrrFactors = t11, this.emissiveStrength = 0, this.emissiveSource = a8.Color, this.emissiveBaseColor = a7;
  }
};
var g16 = class extends g7 {
  constructor(r29, e37) {
    super(r29, e37, new t12(V5, () => import("./Path.glsl-YD7AUGBH.js")), L8);
  }
  initializePipeline(r29) {
    const { output: e37, transparent: s26, hasSlicePlane: t29, doubleSidedMode: o28, hasOccludees: n29, oitPass: a33 } = r29, O7 = a33 === o15.NONE, b17 = a33 === o15.FrontFace;
    return B2({ blending: u14(e37) && s26 ? p11(a33) : null, culling: t29 && !s26 && o28 !== i9.None ? u16 : null, depthTest: { func: E6(a33) }, depthWrite: O7 || b17 ? p10 : null, drawBuffers: h11(e37, F3(a33, e37)), colorWrite: g6, stencilWrite: n29 ? e23 : null, stencilTest: n29 ? f8 : null, polygonOffset: O7 || b17 ? null : h8 });
  }
};
var L8 = /* @__PURE__ */ new Map([[e17.POSITION, 0], [e17.PROFILEVERTEXANDNORMAL, 1], [e17.PROFILERIGHT, 2], [e17.PROFILEUP, 3], [e17.SIZEFEATUREATTRIBUTE, 4], [e17.COLORFEATUREATTRIBUTE, 5], [e17.OPACITYFEATUREATTRIBUTE, 6], [e17.OLIDCOLOR, 7], [e17.PROFILEAUXDATA, 8]]);

// node_modules/@arcgis/core/views/3d/webgl-engine/materials/PathTechniqueConfiguration.js
var h20 = class extends a17 {
  constructor(e37) {
    super(), this.spherical = e37, this.pbrMode = n15.Disabled, this.doubleSidedMode = i9.None, this.emissionSource = f5.None, this.receiveShadows = false, this.receiveAmbientOcclusion = false, this.vvSize = false, this.vvColor = false, this.vvOpacity = false, this.transparent = false, this.hasOccludees = false, this.terrainDepthTest = false, this.cullAboveTerrain = false, this.hasBloom = false, this.snowCover = false, this.textureCoordinateType = o13.None, this.occlusionPass = false, this.hasVvInstancing = true, this.useCustomDTRExponentForWater = false, this.useFillLights = false, this.hasColorTexture = false, this.objectAndLayerIdColorInstanced = false, this.hasMetallicRoughnessTexture = false, this.hasOcclusionTexture = false, this.hasNormalTexture = false, this.draped = false, this.overlayEnabled = false;
  }
  get discardInvisibleFragments() {
    return this.transparent;
  }
};
r([i10({ count: n15.COUNT })], h20.prototype, "pbrMode", void 0), r([i10({ count: i9.COUNT })], h20.prototype, "doubleSidedMode", void 0), r([i10({ count: f5.COUNT })], h20.prototype, "emissionSource", void 0), r([i10()], h20.prototype, "receiveShadows", void 0), r([i10()], h20.prototype, "receiveAmbientOcclusion", void 0), r([i10()], h20.prototype, "vvSize", void 0), r([i10()], h20.prototype, "vvColor", void 0), r([i10()], h20.prototype, "vvOpacity", void 0), r([i10()], h20.prototype, "transparent", void 0), r([i10()], h20.prototype, "hasOccludees", void 0), r([i10()], h20.prototype, "terrainDepthTest", void 0), r([i10()], h20.prototype, "cullAboveTerrain", void 0), r([i10()], h20.prototype, "hasBloom", void 0), r([i10()], h20.prototype, "snowCover", void 0);

// node_modules/@arcgis/core/views/3d/webgl-engine/materials/PathMaterial.js
var P9 = class extends n16 {
  constructor(t29, e37) {
    super(t29, I11), this.vertexAttributeLocations = L8, this.supportsEdges = true, this._pp0 = r5(0, 0, 1), this._pp1 = r5(0, 0, 0), this.produces = /* @__PURE__ */ new Map([[A7.OPAQUE_MATERIAL, (t30) => (this.parameters.castShadows && o12(t30) || r13(t30)) && !this.transparent], [A7.TRANSPARENT_MATERIAL, (t30) => (this.parameters.castShadows && o12(t30) || r13(t30)) && this.transparent]]), this._configuration = new h20(e37.spherical);
  }
  get hasEmissions() {
    return this.parameters.emissiveStrength > 0;
  }
  getConfiguration(t29, e37) {
    return super.getConfiguration(t29, e37, this._configuration), this._configuration.vvSize = !!this.parameters.vvSize, this._configuration.vvColor = !!this.parameters.vvColor, this._configuration.vvOpacity = !!this.parameters.vvOpacity, this._configuration.hasSlicePlane = this.parameters.hasSlicePlane, this._configuration.transparent = this.transparent, this._configuration.hasOccludees = e37.hasOccludees, u14(t29) ? (this._configuration.doubleSidedMode = this.parameters.doubleSided && "normal" === this.parameters.doubleSidedType ? i9.View : this.parameters.doubleSided && "winding-order" === this.parameters.doubleSidedType ? i9.WindingOrder : i9.None, this._configuration.receiveShadows = e37.shadowMap.enabled, this._configuration.receiveAmbientOcclusion = null != e37.ssao) : this._configuration.receiveShadows = this._configuration.receiveAmbientOcclusion = false, this._configuration.pbrMode = this.parameters.usePBR ? n15.Schematic : n15.Disabled, this._configuration.emissionSource = this.parameters.usePBR ? f5.SymbolColor : f5.None, this._configuration.hasBloom = C3(t29), this._configuration.oitPass = e37.oitPass, this._configuration.terrainDepthTest = e37.terrainDepthTest, this._configuration.cullAboveTerrain = e37.cullAboveTerrain, this._configuration.snowCover = e37.snowCover, this._configuration;
  }
  isVisibleForOutput(t29) {
    return t29 !== n11.Shadow && t29 !== n11.ShadowExcludeHighlight && t29 !== n11.ShadowHighlight || this.parameters.castShadows;
  }
  get visible() {
    return this.parameters.opacity >= o19;
  }
  intersect(t29, e37, i18, r29, s26, o28) {
    this._intersect(t29, i18, r29, s26, o28);
  }
  intersectDraped(t29, e37, i18, r29) {
    return this._pp0[0] = this._pp1[0] = i18[0], this._pp0[1] = this._pp1[1] = i18[1], this._intersect(t29, e37, this._pp0, this._pp1, r29);
  }
  _intersect(i18, s26, o28, a33, n29) {
    const h23 = i18;
    if (!s22(h23)) return;
    const c25 = h23.path, p23 = t7(this.parameters.size);
    if (this.parameters.vvSize) {
      const { offset: e37, factor: i19, minSize: r29, maxSize: s27, fallback: o29 } = this.parameters.vvSize, a34 = c25.sizeAttributeValue;
      Number.isNaN(a34) ? (p23[0] *= o29[0], p23[1] *= o29[2]) : (p23[0] *= r4(e37[0] + a34 * i19[0], r29[0], s27[0]), p23[1] *= r4(e37[2] + a34 * i19[2], r29[2], s27[2]));
    }
    const u31 = new h9(false, s26.options.normalRequired), m21 = Math.max(p23[0], p23[1]), l28 = i18.boundingInfo;
    if (null == l28) return void w8(c25, p23, o28, a33, u31, n29);
    const f22 = a5(l28.bbMin[0] - m21, l28.bbMin[1] - m21, l28.bbMin[2] - m21, l28.bbMax[0] + m21, l28.bbMax[1] + m21, l28.bbMax[2] + m21), d14 = [a33[0] - o28[0], a33[1] - o28[1], a33[2] - o28[2]], S12 = Math.sqrt(d14[0] * d14[0] + d14[1] * d14[1] + d14[2] * d14[2]), _10 = [S12 / d14[0], S12 / d14[1], S12 / d14[2]];
    C4(f22, o28, _10, s26.tolerance) && w8(c25, p23, o28, a33, u31, n29);
  }
  createBufferWriter() {
    return new f7(this._layout);
  }
  get _layout() {
    const t29 = O3().vec3f(e17.POSITION).vec4f16(e17.PROFILEVERTEXANDNORMAL).vec2i16(e17.PROFILERIGHT, { glNormalized: true }).vec2i16(e17.PROFILEUP, { glNormalized: true });
    return this.parameters.vvSize && t29.f32(e17.SIZEFEATUREATTRIBUTE), this.parameters.vvColor && t29.f32(e17.COLORFEATUREATTRIBUTE), this.parameters.vvOpacity && t29.f32(e17.OPACITYFEATUREATTRIBUTE), e19() && t29.vec4u8(e17.OLIDCOLOR), t29.vec3f16(e17.PROFILEAUXDATA), t29;
  }
  createGLMaterial(t29) {
    return new j8(t29);
  }
  get transparent() {
    const { parameters: t29 } = this;
    return t29.drivenOpacity || t29.opacity < 1;
  }
};
var j8 = class extends e22 {
  beginSlot(t29) {
    return this.getTechnique(g16, t29);
  }
};
function w8(t29, e37, i18, r29, s26, o28) {
  t29.baked.size && t29.baked.size[0] === e37[0] && t29.baked.size[1] === e37[1] || t29.baked.bake(e37), t29.baked.intersect(i18, r29, s26, o28);
}
var I11 = class extends A11 {
  constructor() {
    super(...arguments), this.doubleSided = false, this.doubleSidedType = "normal", this.castShadows = true, this.hasSlicePlane = false, this.drivenOpacity = false, this.usePBR = false;
  }
};

// node_modules/@arcgis/core/views/3d/layers/graphics/Graphics3DPathSymbolLayer.js
var se = ["polyline"];
var ae = class extends y7 {
  constructor(e37, t29, r29, i18) {
    super(e37, t29, r29, i18, he2(t29)), this._intrinsicSize = r9(1, 1), this._upVectorAlignment = o26.Path, this._stencilWidth = 0.1, this.ensureDrapedStatus(false);
  }
  async doLoad() {
    const e37 = this.symbolLayer, r29 = null != e37.width ? e37.width : e37.height, i18 = null != e37.height ? e37.height : r29;
    this._vvConvertOptions = new J2({ supports: { size: true, color: true, rotation: false, opacity: true }, modelSize: [1, 1, 1], symbolSize: [r29, 1, i18], unitInMeters: this._context.renderCoordsHelper.unitInMeters, fallbackColor: this._getFallbackOpacityAndColor(), fallbackSize: [r29, 1, i18] });
    const s26 = this._context.renderer?.visualVariables;
    this._fastUpdates = s26?.length ? W(this._context.renderer, this._vvConvertOptions) : null;
    const n29 = e37.anchor || "center";
    this._upVectorAlignment = "heading" === e37.profileRotation ? o26.World : o26.Path;
    const c25 = e37.profile || "circle";
    switch (c25) {
      default:
      case "circle":
        this._profile = d9[n29];
        break;
      case "quad":
        this._profile = a30[n29];
    }
    switch (e37.join) {
      case "round":
        this._extruder = new a29(0, o24);
        break;
      case "bevel":
        this._extruder = new a29(0, 1);
        break;
      case "miter":
        this._extruder = new a29(0.8 * Math.PI, 1);
        break;
      default:
        this._extruder = new c19();
    }
    const h23 = e37.cap || "butt";
    switch (h23) {
      case "none":
        this._startCap = new l22(), this._endCap = new l22();
        break;
      case "butt":
      default:
        this._startCap = new f18(this._profile, 0), this._endCap = new f18(this._profile, 0, true);
        break;
      case "square":
        this._startCap = new f18(this._profile, -0.5), this._endCap = new f18(this._profile, 0.5, true);
        break;
      case "round": {
        const e38 = "quad" === c25;
        this._startCap = new h16({ profile: this._profile, flip: false, breakNormals: e38, subdivisions: t20 }), this._endCap = new h16({ profile: this._profile, flip: true, breakNormals: e38, subdivisions: t20 });
        break;
      }
    }
    const m21 = this.symbolLayer?.material?.color, f22 = this._getCombinedOpacityAndColor(m21), d14 = u7(f22), u31 = f22[3], g17 = this.needsDrivenTransparentPass, b17 = e37.material?.emissive, y15 = { diffuse: d14, ambient: d14, emissiveStrength: b17?.strength ?? 0, emissiveSource: a8.Color, opacity: u31, drivenOpacity: g17, hasVertexColors: false, hasSlicePlane: this._context.slicePlaneEnabled, castShadows: this.symbolLayer.castShadows, offsetTransparentBackfaces: true };
    if (!this._drivenProperties.size && (o10(this._intrinsicSize, r29, i18), !Z3(this._intrinsicSize[0]) || !Z3(this._intrinsicSize[1]))) throw new s("graphics3dpathsymbollayer:invalid-size", "Symbol sizes may not be negative values");
    let _10;
    this._fastUpdates?.visualVariables.size || l8(this._intrinsicSize, this._intrinsicSize, 1 / this._context.renderCoordsHelper.unitInMeters), this._fastUpdates ? _10 = new P9({ ...y15, ...this._fastUpdates.materialParameters, size: o9(this._intrinsicSize) }, this._context) : (y15.hasVertexColors = this._drivenProperties.color || this._drivenProperties.opacity, y15.normalType = a14.Compressed, _10 = new W2(y15, this._context)), _10.setParameters({ usePBR: this._context.physicalBasedRenderingEnabled, isSchematic: true, cullFace: _10.transparent || "none" === h23 ? e15.None : e15.Back }), this._materials[0] = _10;
  }
  createGraphics3DGraphic(e37) {
    const t29 = e37.graphic;
    if (!this._validateGeometry(t29.geometry, se, this.symbolLayer.type)) return null;
    const r29 = this.setGraphicElevationContext(t29);
    return this._createAs3DShape(e37, r29);
  }
  layerOpacityChanged() {
    const e37 = this.symbolLayer?.material?.color, t29 = this._getCombinedOpacity(e37);
    this._materials[0]?.setParameters({ opacity: t29 });
  }
  layerElevationInfoChanged(e37, t29) {
    return this.updateGraphics3DGraphicElevationInfo(e37, t29, g10);
  }
  slicePlaneEnabledChanged() {
    return this._materials[0]?.setParameters({ hasSlicePlane: this._context.slicePlaneEnabled }), true;
  }
  physicalBasedRenderingChanged() {
    return this._materials[0]?.setParameters({ usePBR: this._context.physicalBasedRenderingEnabled, isSchematic: true }), true;
  }
  applyRendererDiff(e37, t29) {
    for (const r29 in e37.diff) {
      if ("visualVariables" !== r29) return e29.RecreateSymbol;
      if (!X(this._fastUpdates, t29, this._vvConvertOptions)) return e29.RecreateSymbol;
      this._materials[0]?.setParameters(this._fastUpdates.materialParameters);
    }
    return e29.FastUpdate;
  }
  _getVertexData(e37) {
    let t29 = 0;
    const r29 = e37.paths, i18 = [], s26 = e37.spatialReference, a33 = this._context.elevationProvider.spatialReference, o28 = this._context.renderCoordsHelper.spatialReference;
    for (const h23 of r29) t29 += h23.length;
    const n29 = t2(3 * t29);
    let l28, c25 = 0;
    for (const h23 of r29) {
      i18.push({ offset: c25, numVertices: h23.length });
      for (const t30 of h23) n29[c25++] = t30[0], n29[c25++] = t30[1], n29[c25++] = e37.hasZ ? t30[2] : 0;
    }
    return null == a33 || s26.equals(a33) || o4(n29, s26, 0, n29, a33, 0, t29) ? (null == a33 || a33.equals(o28) ? l28 = e5(n29) : (l28 = t2(3 * t29), o4(n29, a33, 0, l28, o28, 0, t29)), { pathVertexDataInfos: i18, vertexDataES: n29, vertexDataRS: l28 }) : null;
  }
  _createAs3DShape(e37, t29) {
    const { graphic: a33, renderingInfo: o28 } = e37, n29 = a33.geometry, l28 = this._getVertexData(n29);
    if (null == l28) return this.logger.warn("PathSymbol3DLayer geometry failed to be created (failed to project geometry to view spatial reference)"), null;
    if (0 === l28.pathVertexDataInfos.length) return 0 !== n29.paths.length && n29.paths.some((e38) => e38.length > 0) || this.logger.warn("PathSymbol3DLayer geometry failed to be created (no paths were defined)"), null;
    const p23 = new Array(), m21 = n29.spatialReference, f22 = u6(), d14 = this._context.renderCoordsHelper, y15 = new r17(l28.vertexDataES), _10 = a33.uid, w11 = n12(l28.vertexDataRS.length);
    for (const u31 of l28.pathVertexDataInfos) {
      const e38 = u31.numVertices;
      if (e38 < 2) continue;
      const n30 = u31.offset;
      if (null != this._context.clippingExtent && (o3(l28.vertexDataES, n30, e38, f22), !A(f22, this._context.clippingExtent))) continue;
      const v7 = new Array(), x8 = n30 + 3 * e38;
      for (let r29 = n30; r29 < x8; r29 += 3) {
        y15.offset = r29;
        const e39 = f11(y15, this._context.elevationProvider, t29, d14);
        o7(pe3, l28.vertexDataRS[r29], l28.vertexDataRS[r29 + 1], l28.vertexDataRS[r29 + 2]), d14.setAltitude(pe3, e39), l28.vertexDataRS[r29] = pe3[0], l28.vertexDataRS[r29 + 1] = pe3[1], l28.vertexDataRS[r29 + 2] = pe3[2], v7.push(d11(this._upVectorAlignment));
      }
      const P12 = new f17(v7, l28.vertexDataES, l28.vertexDataRS, n30, w11);
      oe2(P12, this._upVectorAlignment, this._context.renderCoordsHelper);
      const S12 = new h15(P12, this._profile, this._extruder, this._startCap, this._endCap);
      let C12 = null;
      if (this._fastUpdates) {
        const e39 = this._fastUpdates.visualVariables, t30 = ie(e39.size?.field, a33) ?? 0, r29 = ie(e39.color?.field, a33) ?? 0, i18 = ie(e39.opacity?.field, a33) ?? 0;
        C12 = new O5(S12, t30, r29, i18);
      } else {
        const e39 = t7(this._intrinsicSize);
        if (this._drivenProperties.size) {
          const t31 = o28.size ?? ["symbol-value", "symbol-value", "symbol-value"];
          e39[0] *= ne2(t31[0], "symbol-value" === t31[2] ? this.symbolLayer.height || 0 : t31[2], this.symbolLayer.width || 0), e39[1] *= ne2(t31[2], "symbol-value" === t31[0] ? this.symbolLayer.width || 0 : t31[0], this.symbolLayer.height || 0);
        }
        let t30;
        if (this._drivenProperties.color && (t30 = o28.color ?? this._getFallbackOpacityAndColor()), this._drivenProperties.opacity) {
          const e40 = o28.opacity ?? this._getFallbackOpacityAndColor()[3];
          t30 = t30 ? [t30[0], t30[1], t30[2], e40] : [1, 1, 1, e40];
        }
        const r29 = new T5(S12);
        r29.bake(e39), t30 && r29.bakeVertexColors(t30), C12 = r29;
      }
      const D6 = C12.createGeometryData(), V10 = this._context.stage.renderView.getObjectAndLayerIdColor({ graphicUid: _10, layerViewUid: this._context.layerViewUid }), A14 = new e33(this._materials[0], D6, C12, m21, this._stencilWidth, V10);
      A14.transformation = i3(e10(), r8, S12.path.origin), p23.push(A14);
    }
    if (0 === p23.length) return null;
    const P11 = new A8({ geometries: p23, layerViewUid: this._context.layerViewUid, graphicUid: _10 }), C11 = new p15(this, P11, null, (e38, t30, r29, i18, s26) => ce2(e38, t30, i18, s26, this._upVectorAlignment), t29, null);
    return C11.alignedSampledElevation = 0, C11.needsElevationUpdates = g10(t29.mode), C11;
  }
  _getFallbackOpacityAndColor() {
    const t29 = this.symbolLayer?.material?.color;
    return l4.toUnitRGBA(t29) ?? a10;
  }
};
function oe2(e37, t29, r29) {
  const { origin: i18, positions: s26 } = e37;
  let a33 = e37.offset;
  switch (t29) {
    default:
    case o26.World:
      for (const t30 of e37.vertices) pe3[0] = s26[a33++] + i18[0], pe3[1] = s26[a33++] + i18[1], pe3[2] = s26[a33++] + i18[2], r29.worldUpAtPosition(pe3, pe3), t30.setFrameFromUpVector(pe3);
      break;
    case o26.Path:
      pe3[0] = s26[a33] + i18[0], pe3[1] = s26[a33 + 1] + i18[1], pe3[2] = s26[a33 + 2] + i18[2], r29.worldUpAtPosition(pe3, pe3), g14(e37, pe3);
  }
}
function ne2(e37, t29, r29) {
  switch (e37) {
    case "symbol-value":
      return r29;
    case "proportional":
      return t29;
    default:
      return e37;
  }
}
function le2(e37, t29, r29, i18) {
  let s26 = 0;
  const { origin: a33, vertices: o28, positions: n29, positionsES: l28 } = e37, c25 = e37.offset + 3 * o28.length;
  for (let p23 = e37.offset; p23 < c25; p23 += 3) o7(pe3, l28[p23], l28[p23 + 1], l28[p23 + 2]), r29(pe3, me3), s26 += me3.sampledElevation, pe3[0] = n29[p23] + a33[0], pe3[1] = n29[p23 + 1] + a33[1], pe3[2] = n29[p23 + 2] + a33[2], i18.setAltitude(pe3, me3.z), n29[p23] = pe3[0] - a33[0], n29[p23 + 1] = pe3[1] - a33[1], n29[p23 + 2] = pe3[2] - a33[2];
  return e37.updatePathVertexInformation(), s26 / o28.length;
}
function ce2(e37, t29, r29, i18, s26) {
  const a33 = e37.stageObject, o28 = a33.geometries;
  let n29 = 0;
  for (const l28 of o28) {
    if (!s22(l28)) continue;
    const e38 = l28.path, o29 = e38.builder.path;
    n29 += le2(o29, t29, r29, i18), s26 !== o26.World && oe2(o29, s26, i18), e38.onPathChanged(l28), l28.invalidateBoundingInfo(), a33.geometryVertexAttributeUpdated(l28, e17.POSITION);
  }
  return n29 / o28.length;
}
function he2(e37) {
  return 1 === (e37.material?.color?.a ?? 1);
}
var pe3 = n4();
var me3 = new R3();

// node_modules/@arcgis/core/views/3d/layers/support/uvUtils.js
function T6(t29, r29, e37, s26, i18 = 1) {
  if (e37.isGeographic && s26 === l10.Global) {
    const t30 = t2(r29.length), o28 = r29.length, s27 = s5(e37);
    for (let e38 = 0; e38 < o28; e38 += 3) h2(r29, e38, t30, e38, s27);
    r29 = t30;
  }
  o10(y12, Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY);
  for (let o28 = 0; o28 < r29.length; o28 += 3) y12[0] = Math.min(y12[0], r29[o28]), y12[1] = Math.min(y12[1], r29[o28 + 1]);
  const a33 = y12[0] % i18, m21 = y12[1] % i18, n29 = y12[0] - a33, c25 = y12[1] - m21;
  for (let o28 = 0; o28 < r29.length; o28 += 3) {
    const e38 = o28 / 3 * 4;
    t29[e38] = (r29[o28] - n29) / i18, t29[e38 + 1] = (r29[o28 + 1] - c25) / i18, t29[e38 + 2] = n29 / i18, t29[e38 + 3] = c25 / i18;
  }
}
function M5(t29, r29, n29, c25, l28 = 1) {
  o7(F7, 1, 0, 0), o7(Y5, 0, 1, 0), o7(_8, 0, 0, 1), D5(x7, n29), A4(V7, n29) && O6(V7, F7, Y5, _8, c25, x7), o10(y12, Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY), o10(P10, Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY);
  for (let o28 = 0; o28 < n29.length; o28 += 3) {
    o7(E14, n29[o28], n29[o28 + 1], n29[o28 + 2]);
    const t30 = P2(F7, E14), r30 = P2(Y5, E14);
    y12[0] = Math.min(y12[0], t30), y12[1] = Math.min(y12[1], r30), P10[0] = Math.max(P10[0], t30), P10[1] = Math.max(P10[1], r30);
  }
  const f22 = P2(_8, x7);
  q10(v5, y12[0], y12[1], f22, F7, Y5, _8), q10(A12, P10[0], y12[1], f22, F7, Y5, _8), q10(G3, y12[0], P10[1], f22, F7, Y5, _8), c4(A12, A12, v5), g2(A12, A12, 0.5), c4(G3, G3, v5), g2(G3, G3, 0.5), u10(v5, v5, A12), u10(v5, v5, G3);
  const I15 = y12[0] % l28, h23 = y12[1] % l28, p23 = y12[0] - I15, N8 = y12[1] - h23;
  for (let o28 = 0; o28 < n29.length; o28 += 3) {
    o7(E14, n29[o28], n29[o28 + 1], n29[o28 + 2]);
    const i18 = o28 / 3, a33 = 4 * i18;
    t29[a33] = (P2(F7, E14) - p23) / l28, t29[a33 + 1] = (P2(Y5, E14) - N8) / l28, t29[a33 + 2] = p23 / l28, t29[a33 + 3] = N8 / l28;
    const m21 = 9 * i18;
    for (let t30 = 0; t30 < 3; t30++) r29[m21 + t30] = v5[t30], r29[m21 + t30 + 3] = A12[t30], r29[m21 + t30 + 6] = G3[t30];
  }
}
var x7 = n4();
var E14 = n4();
var V7 = M2();
var F7 = n4();
var Y5 = n4();
var _8 = n4();
var y12 = n8();
var P10 = n8();
var v5 = n4();
var A12 = n4();
var G3 = n4();
function O6(t29, o28, r29, i18, m21, I15) {
  null != m21 ? (m21.basisMatrixAtPosition(I15, S10), o7(d12, S10[0], S10[1], S10[2]), o7(k10, S10[4], S10[5], S10[6]), o7(w9, S10[8], S10[9], S10[10])) : (o7(d12, 1, 0, 0), o7(k10, 0, 1, 0), o7(w9, 0, 0, 1));
  const h23 = O(t29);
  P2(h23, w9) < 0 && g2(h23, h23, -1), s9(i18, h23);
  const p23 = P2(h23, k10), N8 = P2(h23, d12);
  Math.abs(p23) > Math.abs(N8) ? (q3(o28, d12, h23, -N8), A2(o28, o28), _3(r29, o28, h23), A2(r29, r29), g2(r29, r29, -1)) : (q3(r29, k10, h23, -p23), A2(r29, r29), _3(o28, r29, h23), A2(o28, o28));
}
var S10 = e10();
var d12 = n4();
var k10 = n4();
var w9 = n4();
function D5(t29, o28) {
  o7(U8, 0, 0, 0);
  for (let r29 = 0; r29 < o28.length - 3; r29 += 3) U8[0] += o28[r29], U8[1] += o28[r29 + 1], U8[2] += o28[r29 + 2];
  g2(t29, U8, 1 / (o28.length / 3 - 1));
}
var U8 = n4();
function q10(t29, o28, r29, s26, i18, a33, m21) {
  o7(t29, o28 * i18[0] + r29 * a33[0] + s26 * m21[0], o28 * i18[1] + r29 * a33[1] + s26 * m21[1], o28 * i18[2] + r29 * a33[2] + s26 * m21[2]);
}

// node_modules/@arcgis/core/views/3d/webgl-engine/shaders/PatternTechnique.js
var S11 = class extends g7 {
  constructor(e37, r29) {
    super(e37, r29, new t12(T3, () => import("./Pattern.glsl-A7XFMZ53.js")), e19() ? E15 : j9);
  }
  _setPipelineState(t29, r29) {
    const { oitPass: s26, output: m21, cullFace: f22, draped: S12, hasOccludees: j10, polygonOffset: E17 } = t29, I15 = s26 === o15.NONE;
    return B2({ blending: u14(m21) ? p11(s26) : null, culling: f6(f22), depthTest: S12 ? null : { func: E6(s26) }, depthWrite: N2(t29), drawBuffers: h11(m21, F3(s26, m21)), colorWrite: g6, stencilWrite: j10 ? e23 : null, stencilTest: j10 ? r29 ? o18 : f8 : null, polygonOffset: I15 ? E17 ? R7 : null : m9(t29) });
  }
  initializePipeline(e37) {
    return this._occludeePipelineState = this._setPipelineState(e37, true), this._setPipelineState(e37, false);
  }
  getPipeline(e37) {
    return e37 ? this._occludeePipelineState : super.getPipeline();
  }
};
var R7 = { factor: 1, units: 1 };
var j9 = /* @__PURE__ */ new Map([[e17.POSITION, 0], [e17.COLOR, 3], [e17.UVMAPSPACE, 4], [e17.COLORFEATUREATTRIBUTE, 5], [e17.BOUNDINGRECT, 6]]);
var E15 = /* @__PURE__ */ new Map([[e17.POSITION, 0], [e17.COLOR, 3], [e17.UVMAPSPACE, 4], [e17.COLORFEATUREATTRIBUTE, 5], [e17.BOUNDINGRECT, 6], [e17.OLIDCOLOR, 9]]);

// node_modules/@arcgis/core/views/3d/webgl-engine/shaders/PatternTechniqueConfiguration.js
var n26 = class extends a17 {
  constructor() {
    super(...arguments), this.cullFace = e15.None, this.style = a25.Horizontal, this.hasVertexColors = false, this.polygonOffset = false, this.hasOccludees = false, this.enableOffset = true, this.terrainDepthTest = false, this.cullAboveTerrain = false, this.vvColor = false, this.draped = false, this.textureCoordinateType = o13.None, this.emissionSource = f5.None, this.discardInvisibleFragments = true, this.writeDepth = true, this.occlusionPass = false, this.hasVvInstancing = false, this.vvSize = false, this.vvOpacity = false, this.objectAndLayerIdColorInstanced = false, this.overlayEnabled = false, this.snowCover = false;
  }
};
r([i10({ count: e15.COUNT })], n26.prototype, "cullFace", void 0), r([i10({ count: a25.COUNT })], n26.prototype, "style", void 0), r([i10()], n26.prototype, "hasVertexColors", void 0), r([i10()], n26.prototype, "polygonOffset", void 0), r([i10()], n26.prototype, "hasOccludees", void 0), r([i10()], n26.prototype, "enableOffset", void 0), r([i10()], n26.prototype, "terrainDepthTest", void 0), r([i10()], n26.prototype, "cullAboveTerrain", void 0), r([i10()], n26.prototype, "vvColor", void 0), r([i10()], n26.prototype, "draped", void 0);

// node_modules/@arcgis/core/views/3d/webgl-engine/materials/PatternMaterial.js
var R8 = class extends r18 {
  constructor(e37) {
    super(e37, I12), this._configuration = new n26(), this.vertexAttributeLocations = e19() ? E15 : j9, this.supportsEdges = true, this.produces = /* @__PURE__ */ new Map([[A7.OPAQUE_MATERIAL, (e38) => i8(e38)], [A7.TRANSPARENT_MATERIAL, (e38) => u14(e38)], [A7.TRANSPARENT_MATERIAL_WITHOUT_NORMALS, (e38) => S2(e38)], [A7.DRAPED_MATERIAL, (e38) => this.parameters.draped && w3(e38)]]);
  }
  getConfiguration(e37, t29) {
    return super.getConfiguration(e37, t29, this._configuration), this._configuration.cullFace = this.parameters.cullFace, this._configuration.hasVertexColors = this.parameters.hasVertexColors && !this.parameters.vvColor, this._configuration.hasSlicePlane = this.parameters.hasSlicePlane, this._configuration.polygonOffset = this.parameters.polygonOffset, this._configuration.style = this.parameters.style, this._configuration.draped = this.parameters.draped, this._configuration.oitPass = t29.oitPass, this._configuration.enableOffset = t29.camera.relativeElevation < O4, this._configuration.terrainDepthTest = t29.terrainDepthTest && u14(e37), this._configuration.cullAboveTerrain = t29.cullAboveTerrain, this._configuration.vvColor = !!this.parameters.vvColor, this._configuration;
  }
  get visible() {
    return this.parameters.color[3] >= o19;
  }
  createGLMaterial(e37) {
    return new y13(e37);
  }
  createBufferWriter() {
    const e37 = O3().vec3f(e17.POSITION).vec4f(e17.UVMAPSPACE);
    return this.parameters.draped || e37.mat3f(e17.BOUNDINGRECT), this.parameters.vvColor ? e37.f32(e17.COLORFEATUREATTRIBUTE) : e37.vec4u8(e17.COLOR), e19() && e37.vec4u8(e17.OLIDCOLOR), new E16(e37);
  }
};
var y13 = class extends e22 {
  beginSlot(e37) {
    return this.getTechnique(S11, e37);
  }
};
var E16 = class extends f7 {
  write(e37, s26, i18, o28, a33, n29) {
    const f22 = k3(i18, o28, this.vertexBufferLayout, e37, s26, a33, n29);
    for (const c25 of this.vertexBufferLayout.fields.keys()) {
      const s27 = i18.get(c25), o29 = s27?.indices;
      if (s27 && o29) switch (c25) {
        case e17.UVMAPSPACE: {
          s12(4 === s27.size);
          const e38 = a33.getField(c25, T);
          e38 && h10(s27, e38, n29);
          break;
        }
        case e17.BOUNDINGRECT: {
          s12(9 === s27.size);
          const r29 = a33.getField(c25, d3);
          r29 && L9(s27, e37, r29, n29);
          break;
        }
      }
    }
    return f22;
  }
};
function L9(e37, t29, r29, s26) {
  const { data: i18, indices: o28 } = e37, a33 = t29, n29 = r29.typedBuffer, f22 = r29.typedBufferStride, c25 = o28.length;
  s26 *= f22;
  for (let l28 = 0; l28 < c25; ++l28) {
    const e38 = 9 * o28[l28], t30 = i18[e38], r30 = i18[e38 + 1], c26 = i18[e38 + 2];
    n29[s26] = a33[0] * t30 + a33[4] * r30 + a33[8] * c26 + a33[12], n29[s26 + 1] = a33[1] * t30 + a33[5] * r30 + a33[9] * c26 + a33[13], n29[s26 + 2] = a33[2] * t30 + a33[6] * r30 + a33[10] * c26 + a33[14];
    for (let o29 = 3; o29 < 9; ++o29) n29[s26 + o29] = i18[e38 + o29];
    s26 += f22;
  }
}
var I12 = class extends t14 {
  constructor() {
    super(...arguments), this.color = r6(1, 1, 1, 1), this.hasVertexColors = false, this.polygonOffset = false, this.hasSlicePlane = false, this.cullFace = e15.None, this.hasOccludees = false, this.style = a25.Cross, this.draped = true;
  }
};

// node_modules/@arcgis/core/views/3d/layers/support/patternUtils.js
function s24(e37, r29) {
  const a33 = e37?.pattern;
  return null == a33 ? new A9(r29) : "none" === a33.style || "solid" === a33.style ? ("none" === a33.style && (r29.color = r6(0, 0, 0, 0), r29.forceTransparentMode = true), new A9(r29)) : (r29.style = l25(a33.style), new R8(r29));
}
function l25(t29) {
  switch (t29) {
    case "horizontal":
      return a25.Horizontal;
    case "vertical":
      return a25.Vertical;
    case "cross":
      return a25.Cross;
    case "forward-diagonal":
      return a25.ForwardDiagonal;
    case "backward-diagonal":
      return a25.BackwardDiagonal;
    case "diagonal-cross":
      return a25.DiagonalCross;
    default:
      return;
  }
}
function c22(t29) {
  return t29.material instanceof R8 && !t29.material.parameters.draped;
}
function u30(t29, e37) {
  if (c22(t29)) {
    const o28 = t29.attributes.get(e17.POSITION).data, n29 = t29.getMutableAttribute(e17.UVMAPSPACE).data, i18 = t29.getMutableAttribute(e17.BOUNDINGRECT).data;
    M5(n29, i18, o28, e37);
  }
}
function m20(t29, r29, a33, o28, n29) {
  const i18 = u21(t29, r29, a33, o28, n29), s26 = t29.stageObject.geometries;
  for (const e37 of s26) u30(e37, n29);
  return i18;
}

// node_modules/@arcgis/core/views/3d/layers/graphics/Graphics3DPolygonFillSymbolLayer.js
var z4 = ["polyline", "polygon", "extent"];
var _H = class _H extends y7 {
  constructor(e37, t29, i18, r29) {
    super(e37, t29, i18, r29, Q4(t29)), this._needsUV = false, this._materials = [];
  }
  async doLoad() {
    this._fastUpdates = W(this._context.renderer, this._vvConvertOptions);
  }
  _createMaterials() {
    if (this._materials.length > 0) return;
    const e37 = this.symbolLayer?.material?.color, i18 = this._getCombinedOpacityAndColor(e37);
    this._materials[J6.Fill] = s24(this.symbolLayer, { color: i18, forceTransparentMode: this.needsDrivenTransparentPass, discardInvisibleFragments: true, polygonOffset: false, hasVertexColors: true, draped: this.draped, hasSlicePlane: this._context.slicePlaneEnabled, ...this._fastUpdates?.materialParameters }), this._needsUV = this._materials[J6.Fill] instanceof R8;
    const r29 = this.symbolLayer.outline;
    if (K4(r29)) {
      const e38 = n19(r29.pattern);
      this._materials[J6.Outline] = new q6({ width: u5(r29.size), color: this._getOutlineColor(), hasPolygonOffset: true, hasSlicePlane: this._context.slicePlaneEnabled, isClosed: true, stipplePattern: e38, cap: n20(r29.patternCap || "butt") });
    }
  }
  createGraphics3DGraphic(e37) {
    const t29 = e37.graphic;
    if (!this._validateGeometry(t29.geometry, z4, this.symbolLayer.type)) return null;
    const i18 = this._getVertexOpacityAndColor(e37.renderingInfo, this._getFallbackOpacityAndColor(), 255), r29 = this.setGraphicElevationContext(t29);
    return this.ensureDrapedStatus("on-the-ground" === r29.mode), this._createMaterials(), this.draped ? this._createAsOverlay(t29, i18) : this._createAs3DShape(t29, i18, r29);
  }
  applyRendererDiff(e37, t29) {
    for (const i18 in e37.diff) {
      if ("visualVariables" !== i18) return e29.RecreateSymbol;
      if (!X(this._fastUpdates, t29, this._vvConvertOptions)) return e29.RecreateSymbol;
      this._materials[J6.Fill]?.setParameters(this._fastUpdates.materialParameters);
    }
    return e29.FastUpdate;
  }
  layerOpacityChanged() {
    if (null != this._materials[J6.Fill]) {
      const e37 = this._materials[J6.Fill].parameters.color, t29 = this.symbolLayer?.material?.color, i18 = this._getCombinedOpacity(t29);
      this._materials[J6.Fill].setParameters({ color: [e37[0], e37[1], e37[2], i18], forceTransparentMode: this.needsDrivenTransparentPass });
    }
    if (null != this._materials[J6.Outline]) {
      const e37 = this._materials[J6.Outline].parameters.color;
      this._materials[J6.Outline].setParameters({ color: [e37[0], e37[1], e37[2], this._getOutlineOpacity()] });
    }
  }
  layerElevationInfoChanged(e37, t29, i18) {
    const r29 = this._elevationContext.mode, o28 = m12(_H.elevationModeChangeTypes, i18, r29);
    if (o28 !== b8.UPDATE) return o28;
    const n29 = d5(r29);
    return this.updateGraphics3DGraphicElevationInfo(e37, t29, () => n29);
  }
  slicePlaneEnabledChanged() {
    if (this._materials[J6.Fill]?.setParameters({ hasSlicePlane: this._context.slicePlaneEnabled }), this._materials[J6.Outline]) {
      const e37 = { hasSlicePlane: this._context.slicePlaneEnabled };
      this._materials[J6.Outline].setParameters(e37);
    }
    return true;
  }
  physicalBasedRenderingChanged() {
    return true;
  }
  _createAs3DShape(e37, t29, i18) {
    const r29 = b11(e37.geometry);
    if (!r29) return null;
    const o28 = p19(r29, this._context.elevationProvider, this._context.renderCoordsHelper, i18), n29 = new W6(o28, t29, this._context.layerViewUid, e37.uid), s26 = n29.renderData.position.length / 3;
    if (this._needsUV && (n29.uvMapSpace = n12(4 * s26, true), n29.boundingRect = t2(9 * s26, true), M5(n29.uvMapSpace, n29.boundingRect, n29.renderData.position, this._context.renderCoordsHelper)), n29.objectAndLayerIdColor = this._context.stage.renderView?.getObjectAndLayerIdColor(n29), this._createAs3DShapeFill(e37, n29), this._materials[J6.Outline] && this._createAs3DShapeOutline(n29), this._logGeometryCreationWarnings(n29.renderData, r29.rings, "rings", "FillSymbol3DLayer"), 0 === n29.outGeometries.length) return null;
    const a33 = new A8({ geometries: n29.outGeometries, castShadow: false, layerViewUid: this._context.layerViewUid, graphicUid: e37.uid }), l28 = new p15(this, a33, null, m20, i18);
    return l28.alignedSampledElevation = n29.renderData.sampledElevation, l28.needsElevationUpdates = d5(i18.mode), l28;
  }
  _createAs3DShapeFill(e37, t29) {
    const i18 = t29.renderData.polygons;
    for (const { position: r29, mapPositions: n29, holeIndices: a33, index: l28, count: c25 } of i18) {
      if (null != this._context.clippingExtent && (m4(n29, N6), !A(N6, this._context.clippingExtent))) continue;
      const i19 = l18(n29, a33, this._context.elevationProvider.spatialReference);
      if (0 === i19.length) continue;
      const h23 = this._fastUpdates?.visualVariables.color, d14 = m15({ material: this._materials[J6.Fill], indices: i19, mapPositions: n29, attributeData: { position: r29, color: h23 ? null : t29.color, colorFeature: h23 ? ie(h23.field, e37) : null, uvMapSpace: this._needsUV ? e20(t29.uvMapSpace, 4 * l28, 4 * c25) : null, boundingRect: this._needsUV ? a4(t29.boundingRect, 9 * l28, 9 * c25) : null, objectAndLayerIdColor: t29.objectAndLayerIdColor } });
      t29.outGeometries.push(d14);
    }
  }
  _createAs3DShapeOutline(e37) {
    if (null == this._materials[J6.Outline]) return;
    const t29 = e37.renderData.outlines;
    for (const { mapPositions: i18, position: r29 } of t29) {
      if (null != this._context.clippingExtent && (m4(i18, N6), !A(N6, this._context.clippingExtent))) continue;
      const t30 = b9(this._materials[J6.Outline], { overlayInfo: null, removeDuplicateStartEnd: true, mapPositions: i18, attributeData: { position: r29 } }, e37.objectAndLayerIdColor);
      e37.outGeometries.push(t30);
    }
  }
  _createAsOverlay(e37, t29) {
    const i18 = b11(e37.geometry);
    if (null == i18) return null;
    this._materials[J6.Fill].renderPriority = this._renderPriority + this._renderPriorityStep / 2, null != this._materials[J6.Outline] && (this._materials[J6.Outline].renderPriority = this._renderPriority);
    const r29 = c15(i18, this._context.overlaySR), o28 = new q11(r29, t29, this._context.layerViewUid, e37.uid), n29 = o28.renderData.position.length / 3;
    return this._needsUV && (o28.uvMapSpace = n12(4 * n29, true), T6(o28.uvMapSpace, o28.renderData.position, this._context.overlaySR, this._context.graphicsCoreOwner.view.state.viewingMode)), o28.outBoundingBox = q(), o28.objectAndLayerIdColor = this._context.stage.renderView?.getObjectAndLayerIdColor(o28), this._createAsOverlayFill(e37, o28), this._materials[J6.Outline] && this._createAsOverlayOutline(o28), this._logGeometryCreationWarnings(o28.renderData, i18.rings, "rings", "FillSymbol3DLayer"), 0 === o28.outGeometries.length ? null : new l20(this, o28.outGeometries, o28.outBoundingBox, this._context.drapeSourceRenderer);
  }
  _createAsOverlayFill(e37, t29) {
    const r29 = t29.renderData.polygons;
    for (const { position: n29, holeIndices: a33, index: c25, count: p23 } of r29) {
      const r30 = m4(n29, N6);
      if (!A(r30, this._context.clippingExtent)) continue;
      const h23 = e12(n29, a33, 3);
      if (0 === h23.length) continue;
      M(t29.outBoundingBox, r30);
      const d14 = this._fastUpdates?.visualVariables.color, m21 = m15({ material: this._materials[J6.Fill], indices: h23, attributeData: { position: n29, color: d14 ? null : t29.color, colorFeature: d14 ? ie(d14.field, e37) : null, uvMapSpace: this._needsUV ? e20(t29.uvMapSpace, 4 * c25, 4 * p23) : null, objectAndLayerIdColor: t29.objectAndLayerIdColor } });
      t29.outGeometries.push(new g9(m21, t29));
    }
  }
  _createAsOverlayOutline(e37) {
    if (null == this._materials[J6.Outline]) return;
    const t29 = e37.renderData.outlines;
    for (let i18 = 0; i18 < t29.length; ++i18) {
      const { position: r29 } = t29[i18];
      if (m4(r29, N6), !A(N6, this._context.clippingExtent)) continue;
      M(e37.outBoundingBox, N6);
      const n29 = b9(this._materials[J6.Outline], { overlayInfo: { spatialReference: this._context.overlaySR, renderCoordsHelper: this._context.renderCoordsHelper }, removeDuplicateStartEnd: true, attributeData: { position: r29 } }, e37.objectAndLayerIdColor);
      e37.outGeometries.push(new g9(n29, e37));
    }
  }
  _getOutlineOpacity() {
    const e37 = this.symbolLayer?.outline?.color;
    return (this.draped ? 1 : this._getLayerOpacity()) * (null != e37 ? e37.a : 0);
  }
  _getOutlineColor() {
    const t29 = this.symbolLayer?.outline?.color, i18 = this._getOutlineOpacity();
    return U4(null != t29 ? l4.toUnitRGB(t29) : null, i18);
  }
  test() {
    return { ...super.test(), createAsOverlay: (e37, t29) => this._createAsOverlay(e37, t29), createAs3DShape: (e37, t29, i18) => this._createAs3DShape(e37, t29, i18) };
  }
  _getFallbackOpacityAndColor() {
    const t29 = this.symbolLayer?.material?.color;
    return l4.toUnitRGBA(t29) ?? a10;
  }
  get _vvConvertOptions() {
    return new J2({ supports: { size: false, color: true, rotation: false, opacity: false }, fallbackColor: this._getFallbackOpacityAndColor() });
  }
};
_H.elevationModeChangeTypes = { definedChanged: b8.RECREATE, staysOnTheGround: b8.NONE, onTheGroundChanged: b8.RECREATE };
var H4 = _H;
var N6 = u6();
var W6 = class extends g11 {
  constructor(e37, t29, i18, r29) {
    super(e37, i18, r29), this.color = t29;
  }
};
var q11 = class extends g11 {
  constructor(e37, t29, i18, r29) {
    super(e37, i18, r29), this.color = t29;
  }
};
var J6;
function K4(e37) {
  return null != e37?.size && e37.size > 0 && null != e37.color && (null == e37.pattern || "style" !== e37.pattern.type || "none" !== e37.pattern.style);
}
function Q4(e37) {
  return 1 === (e37.material?.color?.a ?? 1);
}
!function(e37) {
  e37[e37.Fill = 0] = "Fill", e37[e37.Outline = 1] = "Outline";
}(J6 || (J6 = {}));

// node_modules/@arcgis/core/views/3d/layers/graphics/LabelParameters.js
var i16 = class {
  constructor(i18, r29 = "center", c25 = false, a33 = n8(), o28 = r6(0, 0, 0, -1), l28 = "world", f22 = n4(), n29 = 0) {
    this.verticalOffset = i18, this.anchor = r29, this.hasLabelVerticalOffset = c25, this.screenOffset = a33, this.centerOffset = o28, this.centerOffsetUnits = l28, this.translation = f22, this.elevationOffset = n29;
  }
};
var r27 = class {
  constructor(e37, s26 = "center", i18 = "center", r29 = null, c25 = n8(), a33 = true) {
    this.placement = e37, this.horizontalPlacement = s26, this.verticalPlacement = i18, this.text = r29, this.displaySize = c25, this.isFocused = a33;
  }
};

// node_modules/@arcgis/core/views/3d/webgl-engine/lib/TextRenderParameters.js
var s25 = class _s {
  constructor(o28) {
    this.definition = o28, this.key = JSON.stringify(o28), this.haloSize = Math.round(o28.halo.size), this.textStyle = a32(o28.color), this.haloStyle = l26(o28.halo.color), this.backgroundStyle = 0 !== o28.background.color[3] ? a32(o28.background.color) : null;
  }
  fontString(o28) {
    const t29 = this.definition.font, e37 = "sans-serif, Apple Color Emoji, Segoe UI Emoji, Segoe UI Symbol, Noto Color Emoji";
    return `${t29.style} ${t29.weight} ${o28}px ${t29.family}, ${e37}`;
  }
  setFontProperties(o28, t29) {
    o28.font = this.fontString(t29), o28.textAlign = "left", o28.textBaseline = "alphabetic";
  }
  static async fromSymbol(l28, a33) {
    const f22 = l28?.material?.color, m21 = l4.toUnitRGBA(f22) ?? a10, g17 = null != l28.size ? u5(l28.size) : 12, u31 = l28.lineHeight, d14 = null != l28.background ? l4.toUnitRGBA(l28.background.color) : a10, h23 = { family: l28.font?.family ?? "sans-serif", decoration: l28.font?.decoration ?? "none", weight: l28.font?.weight ?? "normal", style: l28.font?.style ?? "normal" }, y15 = l28.halo, b17 = null != y15?.color && y15.size > 0 ? { size: u5(y15.size), color: l4.toUnitRGBA(y15.color) } : { size: 0, color: a10 }, p23 = new _s({ color: m21, size: g17, background: { color: d14, padding: null != l28.background ? [0.65 * g17, 0.5 * g17] : [0, 0], borderRadius: null != l28.background ? g17 * (6 / 16) : 0 }, lineSpacingFactor: u31, font: h23, halo: b17, pixelRatio: a33 });
    if (l28.font) {
      let o28 = false;
      const r29 = p23.fontString(g17);
      try {
        o28 = (await document.fonts.load(r29)).some((o29) => !i12(o29));
      } catch (S12) {
        i.getLogger("esri.views.3d.webgl-engine.lib.TextRenderParameters").warnOnce(`Failed to preload font '${r29}'. Some text symbology may be rendered using the default browser font.`);
      }
      if (!o28 && !c23.has(l28.font.family)) try {
        await c9(l28.font);
      } catch (S12) {
      }
    }
    return p23;
  }
};
function l26(o28) {
  return `rgb(${o28.slice(0, 3).map((o29) => Math.floor(255 * o29)).toString()})`;
}
function a32(o28) {
  return `rgba(${o28.slice(0, 3).map((o29) => Math.floor(255 * o29)).toString()},${o28[3]})`;
}
var c23 = /* @__PURE__ */ new Set(["Arial", "Times New Roman", "Courier New", "serif", "sans-serif", "monospace", "cursive", "fantasy", "system-ui", "ui-serif", "ui-sans-serif", "ui-monospace", "ui-rounded", "math", "emoji", "fangsong"]);

// node_modules/@arcgis/core/views/3d/webgl-engine/lib/TextTextureAtlas.js
var w10 = 4096;
var T7 = class extends b {
  constructor(e37) {
    super(e37), this.id = e3(), this.events = new o2(), this._glTexture = null, this._atlas = new b16(256, 256), this._needsRepack = false, this._canRepack = true, this._elementsToRender = /* @__PURE__ */ new Map(), this._elements = /* @__PURE__ */ new Map(), this._uvCallbacks = /* @__PURE__ */ new Map(), this.updating = false;
  }
  initialize() {
    this._canvas = document.createElement("canvas"), this._canvas.setAttribute("id", "textAtlasCanvas"), this._canvas.setAttribute("style", "display:none"), this._ctx = this._canvas.getContext("2d"), this._stage = this.view.stage, this._stage.addTexture(this), this._updateCanvasElementSize(this._atlas), this._reset();
  }
  unload() {
    this._glTexture = r3(this._glTexture), this._frameWorker = l2(this._frameWorker), this.updating = false, this.events.emit("unloaded");
  }
  get loaded() {
    return null != this._glTexture;
  }
  get glTexture() {
    return this._glTexture;
  }
  static get maxSize() {
    return C10 = n18.stableRendering ? k11 : 0, [w10 - k11 - C10, w10 - k11 - C10 - R9];
  }
  load(e37) {
    if (this._glTexture) return this._glTexture;
    const t29 = new a16();
    return t29.wrapMode = P4.CLAMP_TO_EDGE, t29.samplingMode = L4.LINEAR_MIPMAP_LINEAR, t29.hasMipmap = true, t29.preMultiplyAlpha = true, t29.maxAnisotropy = e37.parameters.maxMaxAnisotropy, this._glTexture = new S3(e37, t29, this._canvas), this._frameWorker = this.view.resourceController.scheduler.registerTask(g8.TEXT_TEXTURE_ATLAS, this), this.setDirty(), this._glTexture;
  }
  dispose() {
    this._elements.clear(), this._elementsToRender.clear(), this._frameWorker = l2(this._frameWorker), this._glTexture && (this._stage.removeTexture(this), this._glTexture = r3(this._glTexture)), this._canvas.width = 0, this._canvas.height = 0, this._canvas = null, this._ctx = null;
  }
  _updateCanvasElementSize(e37) {
    this._canvas.width = e37.width, this._canvas.height = e37.height;
  }
  _resizeAtlas(e37, t29) {
    const { width: s26, height: i18 } = this._atlas;
    s26 === e37 && i18 === t29 || (this._atlas.width = e37, this._atlas.height = t29, this._glTexture?.resize(e37, t29), this._glTexture?.updateData(0, 0, 0, s26, i18, this._canvas), this._updateCanvasElementSize(this._atlas), this._elements.forEach((e38) => this._uvCallbacks.get(e38.textRenderer.key)?.forEach((t30) => t30(e38.uv))), this._reset());
  }
  _reset() {
    this._elementsToRender.clear(), this._atlas.reset(), this._needsRepack = true, this.setDirty();
  }
  _addAtlasElement(e37, t29, s26, i18) {
    const r29 = this._atlas;
    if (r29.width < s26 || r29.height < i18) return false;
    let n29 = r29.cursors.get(i18);
    if (!n29) {
      if (r29.height < r29.nextY + i18) return false;
      n29 = [new A13(r29.nextY)], r29.cursors.set(i18, n29), r29.nextY += i18;
    }
    let h23 = n29.find((e38) => r29.width >= e38.x + s26);
    if (null == h23) {
      if (r29.height < r29.nextY + i18) return false;
      h23 = new A13(r29.nextY), r29.nextY += i18, n29.push(h23);
    }
    return e37.setNewPosition(h23), this._elements.set(t29, e37), this._elementsToRender.set(t29, e37), h23.x += s26, true;
  }
  _ensureCallbacks(e37) {
    const t29 = this._uvCallbacks.get(e37);
    if (t29) return t29;
    const s26 = /* @__PURE__ */ new Set();
    return this._uvCallbacks.set(e37, s26), s26;
  }
  _addCallback(e37, t29) {
    this._ensureCallbacks(e37).add(t29);
  }
  _removeCallback(e37, t29) {
    const s26 = this._uvCallbacks.get(e37);
    return !(!s26?.delete(t29) || 0 !== s26.size) && (this._uvCallbacks.delete(e37), true);
  }
  _processAddition(e37) {
    const t29 = e37.textRenderer.key;
    if (this._needsRepack) return void this._elements.set(t29, e37);
    const s26 = this._atlas, i18 = e37.textRenderer.renderedWidth, r29 = e37.textRenderer.renderedHeight, n29 = i18 + k11, h23 = r29 + k11 + R9;
    if (!this._addAtlasElement(e37, t29, n29, h23)) {
      if (this._canRepack) this._reset();
      else if (s26.width < n29) {
        const e38 = r14(Math.max(n29, 1.5 * s26.width), w10);
        this._resizeAtlas(e38, s26.height);
      } else {
        const e38 = s26.nextY + h23, t30 = r14(Math.max(e38, 1.5 * s26.height), w10);
        if (t30 > s26.height) this._resizeAtlas(s26.width, t30);
        else if (s26.width < w10) {
          const e39 = r14(1.5 * s26.width, w10);
          this._resizeAtlas(e39, s26.height);
        }
      }
      this._elements.set(t29, e37);
    }
  }
  _renderElement(e37) {
    const t29 = e37.commitNewPosition(), s26 = e37.textRenderer;
    this._ctx.clearRect(t29[0] - k11, t29[1] - k11, s26.renderedWidth + 2 * k11, s26.renderedHeight + 2 * k11), s26.render(this._ctx, t29[0], t29[1]), this._uvCallbacks.get(s26.key)?.forEach((t30) => t30(e37.uv));
  }
  get running() {
    return this.updating;
  }
  runTask(e37) {
    if (null == this._glTexture) return o20;
    for (; this._needsRepack && (this._canRepack || this._atlas.height < w10 && this._atlas.height < w10); ) {
      this._canRepack = this._needsRepack = false;
      const t29 = this._elements;
      this._elements = /* @__PURE__ */ new Map(), t29.forEach((e38) => this._processAddition(e38)), e37.madeProgress();
    }
    if (this._elementsToRender.size > 0) {
      for (const [t29, s26] of this._elementsToRender) {
        if (e37.done) break;
        this._renderElement(s26), this._elementsToRender.delete(t29), e37.madeProgress();
      }
      this._glTexture.setData(this._canvas);
    }
    this.updating = this._elementsToRender.size > 0;
  }
  addText(e37, t29) {
    const s26 = e37.key;
    this._addCallback(s26, t29);
    let i18 = this._elements.get(s26);
    return i18 ? E(i18.uv, a10) || t29(i18.uv) : (i18 = new y14(e37), this._processAddition(i18), this.setDirty()), { remove: () => this._removeText(e37, t29) };
  }
  _removeText(e37, t29) {
    const s26 = e37.key;
    this._elements.get(s26) && this._removeCallback(s26, t29) && (this._elements.delete(s26), this._elementsToRender.delete(s26), this._canRepack = true);
  }
  setDirty() {
    this._glTexture && (this.updating = true);
  }
  get test() {
  }
};
r([m2({ constructOnly: true })], T7.prototype, "view", void 0), r([m2({ type: Boolean })], T7.prototype, "updating", void 0), T7 = r([a2("esri.views.3d.webgl-engine.lib.TextTextureAtlas")], T7);
var k11 = 2;
var R9 = 2;
var y14 = class {
  constructor(e37) {
    this.textRenderer = e37, this._uv = n7(), this._newPosition = [0, 0];
  }
  get uv() {
    if (null == this._xOffset || null == this._yOffset) return a10;
    const { renderedWidth: e37, renderedHeight: t29 } = this.textRenderer;
    return s7(this._uv, this._xOffset, this._yOffset + t29, this._xOffset + e37, this._yOffset);
  }
  setNewPosition(e37) {
    this._newPosition[0] = e37.x, this._newPosition[1] = e37.y;
  }
  commitNewPosition() {
    return this._xOffset = this._newPosition[0], this._yOffset = this._newPosition[1], this._newPosition;
  }
  get xOffset() {
    return this._xOffset;
  }
  get yOffset() {
    return this._yOffset;
  }
};
var b16 = class {
  constructor(e37, t29) {
    this.width = e37, this.height = t29, this.cursors = /* @__PURE__ */ new Map(), this.nextY = 0;
  }
  reset() {
    this.cursors.clear(), this.nextY = C10;
  }
};
var A13 = class {
  constructor(e37) {
    this.y = e37, this.x = C10;
  }
};
var C10 = 0;

// node_modules/@arcgis/core/views/3d/webgl-engine/lib/TextTextureFactory.js
var i17 = class {
  constructor(e37, n29, s26) {
    this._renderer = new r15(e37, n29, s26, T7.maxSize);
  }
  get key() {
    return this._renderer.key;
  }
  get baselineAnchorY() {
    return 1 - this._renderer.firstRenderedBaselinePosition / this._renderer.renderedHeight;
  }
  get displayWidth() {
    return this._renderer.displayWidth;
  }
  get displayHeight() {
    return this._renderer.displayHeight;
  }
  create() {
    const r29 = a18(d13, this._renderer.renderedWidth, this._renderer.renderedHeight), t29 = r29.getContext("2d");
    return t29.save(), this._renderer.render(t29, 0, 0), t29.restore(), new L5(r29, { wrap: { s: P4.CLAMP_TO_EDGE, t: P4.CLAMP_TO_EDGE }, noUnpackFlip: false, mipmap: true, preMultiplyAlpha: true });
  }
};
var d13 = { canvas: null };

// node_modules/@arcgis/core/views/3d/layers/graphics/Graphics3DTextSymbolLayer.js
var V8 = e6(0, 0, 1);
var H5 = class extends y7 {
  constructor(e37, t29, s26, r29) {
    super(e37, t29, s26, r29), this._elevationOptions = { supportsOffsetAdjustment: true, supportsOnTheGround: false }, this.ensureDrapedStatus(false);
  }
  async doLoad() {
    if (!this._drivenProperties.size) {
      const t29 = I4(this.symbolLayer.size);
      if (t29) throw new s("graphics3dtextsymbollayer:invalid-size", t29);
    }
    await this._createTextRenderParameters();
  }
  async _createTextRenderParameters() {
    const e37 = this._context.graphicsCoreOwner.view.state.rasterPixelRatio;
    this._textRenderParameters = await s25.fromSymbol(this.symbolLayer, e37);
  }
  destroy() {
    super.destroy();
  }
  createGraphics3DGraphic(e37) {
    const t29 = e37.graphic, s26 = f13(t29.geometry);
    if (null == s26) return this.logger.warn(`unsupported geometry type for text symbol: ${t29.geometry.type}`), null;
    const r29 = this.view.focusAreasView?.containsGeometry(s26) ?? true, o28 = this.symbolLayer.text;
    if (null == o28 || "" === o28) return null;
    const n29 = o6(this.symbol) && this.symbol.hasVisibleVerticalOffset() ? this.symbol.verticalOffset : null;
    if (null != n29 && !l5(this.symbolLayer)) return this.logger.errorOncePerTick(`Callouts and vertical offset on text symbols are currently only supported with 'center' horizontal alignment (not with '${this.symbolLayer.horizontalAlignment}' alignment)`), null;
    const { verticalAlignment: i18 } = this.symbolLayer, a33 = new i16(n29);
    h12(i18, a33.screenOffset);
    const l28 = new r27(a33, this.symbolLayer.horizontalAlignment, u18(i18));
    return l28.isFocused = r29 ?? l28.isFocused, this._createAs3DShape(t29, s26, o28, l28);
  }
  updateFocus(e37, t29) {
    t29.forEach((t30) => {
      const s26 = f13(t30.graphic.geometry);
      if (null == s26) return void this.logger.warn(`unsupported geometry type for text symbol: ${t30.graphic.geometry.type}`);
      const r29 = this.view.focusAreasView?.containsGeometry(s26) ?? true;
      t30.layers.forEach((s27) => {
        if (s27?.graphics3DSymbolLayer === this && s27.stageObject) {
          s27.stageObject.geometries.some((e38) => e38.material.parameters.isFocused !== r29) && e37(t30);
        }
      });
    });
  }
  createLabel(e37, t29, s26, r29, o28) {
    const n29 = e37.graphic, i18 = f13(n29.geometry);
    if (null == i18) return this.logger.warn(`unsupported geometry type for label: ${n29.geometry.type}`), null;
    const a33 = this.view.focusAreasView?.containsGeometry(i18) ?? true, l28 = t29.text;
    return !l28 || /^\s+$/.test(l28) ? null : (t29.isFocused = a33 ?? t29.isFocused, this._createAs3DShape(n29, i18, l28, t29, s26, r29, o28));
  }
  setGraphicElevationContext(e37, t29 = new o23(), s26 = 0) {
    return super.setGraphicElevationContext(e37, t29), t29.addOffsetRenderUnits(s26), t29;
  }
  layerOpacityChanged() {
    return this.logger.warn("layer opacity change not yet implemented in Graphics3DTextSymbolLayer"), false;
  }
  layerElevationInfoChanged(e37, t29) {
    return W7(e37, t29, (e38, t30) => {
      this.updateGraphicElevationContext(t30, e38);
    }), b8.UPDATE;
  }
  slicePlaneEnabledChanged(e37, t29) {
    return W7(e37, t29, (e38) => {
      for (const t30 of e38.stageObject.geometries) t30.material.setParameters({ hasSlicePlane: this._context.slicePlaneEnabled });
    }), true;
  }
  physicalBasedRenderingChanged() {
    return true;
  }
  get pixelRatioChanged() {
    return false;
  }
  updateGraphicElevationContext(e37, t29) {
    const { elevationContext: s26, metadata: r29 } = t29;
    this.setGraphicElevationContext(e37, s26, r29?.elevationOffset ?? 0), t29.needsElevationUpdates = d5(s26.mode) || "absolute-height" === s26.mode;
  }
  updateGeometry(e37, t29) {
    if (this.draped || !this._validateGeometry(t29)) return false;
    const { elevationContext: s26, stageObject: r29 } = e37;
    if (s26.mode !== this.getGeometryElevationMode(t29)) return false;
    const o28 = f13(t29);
    if (!o28) return false;
    const n29 = p16(r29, this._context, o28, s26);
    if (null == n29) return false;
    const i18 = d6(this._context, o28);
    return r29.geometries[0].localOrigin === i18 && (e37.alignedSampledElevation = n29, m14(e37, o28, this._context.elevationProvider), true);
  }
  _defaultElevationInfoNoZ() {
    return I13;
  }
  _createAs3DShape(e37, a33, c25, m21, h23, v7 = null, x8 = () => m21.placement.elevationOffset) {
    const b17 = this.setGraphicElevationContext(e37, new o23(), m21.placement.elevationOffset), O7 = "polyline" === e37.geometry?.type, w11 = e37.uid;
    let P11 = null, E17 = null;
    if (null == v7) {
      const e38 = f9(m21.horizontalPlacement);
      P11 = new i17(c25, e38, this._textRenderParameters);
      let r29 = null;
      if (null != this._context.sharedResources.textures) {
        E17 = this._context.sharedResources.textures.fromData(P11.key, () => P11.create()), E17.texture.events.on("unloaded", () => r29 = t(r29));
        const e39 = this._context.stage.renderView.textures.acquire(E17.texture.id);
        if (null == e39 || S(e39)) return E17.release(), null;
        r29 = e39;
      }
    }
    const _10 = !!has("enable-feature:non-occluded-hud"), S12 = $3(P11, m21), L10 = { occlusionTest: !_10, occludedFragmentFade: _10, horizonCullingEnabled: _10 && this._context.spherical, screenOffset: m21.placement.screenOffset, anchorPosition: S12, polygonOffset: true, color: [1, 1, 1, 1], centerOffsetUnits: m21.placement.centerOffsetUnits, depthEnabled: false, drawAsLabel: true, isLabel: true, isFocused: m21.isFocused };
    if (O7 && (L10.shaderPolygonOffset = 1e-4), v7 ? L10.textureId = v7.id : E17 && (L10.textureId = E17.texture.id), null != m21.placement.verticalOffset) {
      const { screenLength: e38, minWorldLength: t29, maxWorldLength: s26 } = m21.placement.verticalOffset;
      L10.verticalOffset = { screenLength: u5(e38), minWorldLength: t29 || 0, maxWorldLength: null != s26 ? s26 : 1 / 0 };
    }
    const G4 = this._context.graphicsCoreOwner.view.focusAreasView?.polygons.length, A14 = { screenOffset: L10.screenOffset, anchorPosition: S12, centerOffsetUnits: L10.centerOffsetUnits, verticalOffset: L10.verticalOffset, shaderPolygonOffset: L10.shaderPolygonOffset, occlusionTest: L10.occlusionTest, isFocused: m21.isFocused, focusStyle: this.view.map?.focusAreas.style ?? "none" };
    if (this._context.screenSizePerspectiveEnabled) {
      const { screenSizePerspectiveSettings: e38, screenSizePerspectiveSettingsLabels: t29 } = this._context.sharedResources, s26 = e26(this._textRenderParameters);
      L10.screenSizePerspective = t29.overrideFontHeight(s26.maxHeight), L10.screenSizePerspectiveAlignment = e38, A14.fontHeight = s26.maxHeight;
    }
    L10.hasSlicePlane = this._context.slicePlaneEnabled;
    const D6 = this._context.spherical, H6 = h23 ? JSON.stringify(A14) : "";
    let W9 = h23?.get(H6);
    if (null == W9) {
      if (!m21.isFocused && G4) {
        const e38 = this.view.map?.focusAreas.style;
        L10.color = c16(L10.color, e38), L10.outlineColor = c16(L10.outlineColor, e38);
      }
      W9 = new ue(L10, D6), h23?.set(H6, W9);
    }
    const I15 = m21.placement.translation, M7 = P11 ? r9(P11.displayWidth, P11.displayHeight) : l6, k13 = m21.placement.centerOffset, N8 = V8, q12 = v7 ? r6(0, 0, 0, 0) : null, B7 = lt(W9, { normal: N8, position: I15, size: M7, centerOffsetAndDistance: k13, uvi: q12 }), J7 = a24(this._context, a33, B7, b17, w11);
    if (null == J7) return null;
    const Y6 = (t29, s26, r29, o28, n29, i18) => {
      const a34 = x8() || m21.placement.elevationOffset, l28 = this.setGraphicElevationContext(e37, s26, a34);
      return p14(t29, l28, r29, o28, n29, i18);
    }, Z6 = new p15(this, J7.object, E17, Y6, b17);
    Z6.alignedSampledElevation = J7.sampledElevation, Z6.needsElevationUpdates = d5(b17.mode) || "absolute-height" === b17.mode, Z6.getScreenSize = (e38 = n8()) => (e38[0] = P11 ? P11.displayWidth : m21.displaySize[0], e38[1] = P11 ? P11.displayHeight : m21.displaySize[1], e38);
    const K5 = new t21(m21.placement.elevationOffset, c25);
    return Z6.metadata = K5, m14(Z6, a33, this._context.elevationProvider), Z6;
  }
};
function W7(e37, t29, s26) {
  e37?.forEach((e38) => {
    const r29 = t29(e38);
    null != r29 && s26(r29, e38.graphic);
  });
}
function $3(e37, t29) {
  if ("baseline" === t29.verticalPlacement) {
    const s27 = i13[t29.horizontalPlacement], r29 = null != e37 ? e37.baselineAnchorY : 0;
    return r9(s27, r29);
  }
  const s26 = m11(t29.horizontalPlacement, t29.verticalPlacement);
  return s16[s26];
}
var I13 = { mode: "relative-to-ground", offset: 0 };

// node_modules/@arcgis/core/views/3d/webgl-engine/materials/WaterTechnique.js
var h21 = class extends g7 {
  constructor(r29, e37) {
    super(r29, e37, new t12(S5, () => import("./WaterSurface.glsl-MK5AJJPL.js")));
  }
  initializePipeline(e37) {
    const { oitPass: t29, output: s26, transparent: l28, draped: u31 } = e37;
    return B2({ blending: s26 !== n11.Normal && s26 !== n11.Highlight && s26 !== n11.ObjectAndLayerIdColor && l28 ? p11(t29) : null, depthTest: u31 ? null : { func: E6(t29) }, depthWrite: N2(e37), drawBuffers: F3(t29, s26), colorWrite: g6, polygonOffset: m9(e37) });
  }
};

// node_modules/@arcgis/core/views/3d/webgl-engine/materials/WaterGLMaterial.js
var r28 = class extends e22 {
  ensureResources(e37) {
    return this._techniques.context.waterTextures.ensureResources(e37);
  }
  beginSlot(e37) {
    const r29 = this._techniques.context.waterTextures.passParameters;
    return this._material.setParameters({ wavePerturbation: r29.wavePerturbation, waveNormal: r29.waveNormal }), this.getTechnique(h21, e37);
  }
};

// node_modules/@arcgis/core/views/3d/webgl-engine/materials/WaterTechniqueConfiguration.js
var n27 = class extends a17 {
  constructor(e37) {
    super(), this.spherical = e37, this.receiveShadows = false, this.transparent = false, this.enableOffset = true, this.writeDepth = false, this.screenSpaceReflections = false, this.cloudReflections = false, this.objectAndLayerIdColorInstanced = false, this.draped = false, this.terrainDepthTest = false, this.cullAboveTerrain = false, this.textureCoordinateType = o13.None, this.emissionSource = f5.None, this.pbrMode = n15.Water, this.occlusionPass = false, this.useCustomDTRExponentForWater = true, this.highStepCount = true, this.useFillLights = false, this.overlayEnabled = false, this.snowCover = false;
  }
  get discardInvisibleFragments() {
    return this.transparent && this.writeDepth;
  }
};
r([i10()], n27.prototype, "receiveShadows", void 0), r([i10()], n27.prototype, "transparent", void 0), r([i10()], n27.prototype, "enableOffset", void 0), r([i10()], n27.prototype, "writeDepth", void 0), r([i10()], n27.prototype, "screenSpaceReflections", void 0), r([i10()], n27.prototype, "cloudReflections", void 0), r([i10()], n27.prototype, "objectAndLayerIdColorInstanced", void 0), r([i10()], n27.prototype, "draped", void 0), r([i10()], n27.prototype, "terrainDepthTest", void 0), r([i10()], n27.prototype, "cullAboveTerrain", void 0);

// node_modules/@arcgis/core/views/3d/webgl-engine/materials/WaterMaterial.js
var _9 = class extends r18 {
  constructor(t29, e37) {
    super(t29, v6), this.produces = /* @__PURE__ */ new Map([[A7.OPAQUE_MATERIAL, (t30) => u14(t30) && !this.parameters.transparent || i8(t30)], [A7.TRANSPARENT_MATERIAL, (t30) => u14(t30) && this.parameters.transparent || i8(t30)], [A7.DRAPED_MATERIAL, (t30) => this.parameters.draped && u14(t30) || t30 === n11.Normal || i8(t30)], [A7.DRAPED_WATER, (t30) => t30 === n11.Normal]]), this._configuration = new n27(e37.spherical);
  }
  getConfiguration(t29, e37) {
    return super.getConfiguration(t29, e37, this._configuration), this._configuration.writeDepth = true, this._configuration.receiveShadows = e37.shadowMap.enabled, this._configuration.hasSlicePlane = this.parameters.hasSlicePlane, this._configuration.transparent = this.parameters.transparent, this._configuration.screenSpaceReflections = null != e37.ssr.lastFrameColor, this._configuration.cloudReflections = null != e37.clouds.data, this._configuration.draped = this.parameters.draped, this._configuration.oitPass = e37.oitPass, this._configuration.enableOffset = e37.camera.relativeElevation < O4, this._configuration.terrainDepthTest = e37.terrainDepthTest && u14(t29), this._configuration.cullAboveTerrain = e37.cullAboveTerrain, this._configuration;
  }
  get visible() {
    return true;
  }
  update(e37) {
    return this.setParameters({ timeElapsed: u3(e37.time) * this.parameters.animationSpeed }, false), this._animationEnabled(e37.camera) && e37.dt > 0;
  }
  _animationEnabled(t29) {
    const e37 = Math.min(t29.relativeElevation, t29.distance);
    return Math.sqrt(this.parameters.waveTextureRepeat / this.parameters.waveStrength) * e37 < T8;
  }
  createGLMaterial(t29) {
    return new r28(t29);
  }
  createBufferWriter() {
    return new f7(e19() ? r19 : t18);
  }
  get test() {
  }
};
var v6 = class extends d4 {
  constructor() {
    super(...arguments), this.waveStrength = 0.06, this.waveTextureRepeat = 32, this.waveDirection = r9(1, 0), this.waveVelocity = 0.05, this.flowStrength = 0.015, this.flowOffset = -0.5, this.animationSpeed = 0.35, this.timeElapsed = 0, this.color = r6(0, 0, 0, 0), this.transparent = true, this.hasSlicePlane = false, this.draped = false, this.origin = n4(), this.modelTransformation = null;
  }
};
var T8 = 35e3;

// node_modules/@arcgis/core/views/3d/webgl-engine/materials/internal/waterMaterialUtils.js
var e36 = { "calm-small": { waveStrength: 5e-3, perturbationStrength: 0.02, textureRepeat: 12, waveVelocity: 0.01 }, "rippled-small": { waveStrength: 0.02, perturbationStrength: 0.09, textureRepeat: 32, waveVelocity: 0.07 }, "slight-small": { waveStrength: 0.05, perturbationStrength: 0.07, textureRepeat: 28, waveVelocity: 0.1 }, "moderate-small": { waveStrength: 0.075, perturbationStrength: 0.07, textureRepeat: 24, waveVelocity: 0.1 }, "calm-medium": { waveStrength: 3125e-6, perturbationStrength: 0.01, textureRepeat: 8, waveVelocity: 0.02 }, "rippled-medium": { waveStrength: 0.035, perturbationStrength: 0.015, textureRepeat: 12, waveVelocity: 0.07 }, "slight-medium": { waveStrength: 0.06, perturbationStrength: 0.015, textureRepeat: 8, waveVelocity: 0.12 }, "moderate-medium": { waveStrength: 0.09, perturbationStrength: 0.03, textureRepeat: 4, waveVelocity: 0.12 }, "calm-large": { waveStrength: 0.01, perturbationStrength: 0, textureRepeat: 4, waveVelocity: 0.05 }, "rippled-large": { waveStrength: 0.025, perturbationStrength: 0.01, textureRepeat: 8, waveVelocity: 0.11 }, "slight-large": { waveStrength: 0.06, perturbationStrength: 0.02, textureRepeat: 3, waveVelocity: 0.13 }, "moderate-large": { waveStrength: 0.14, perturbationStrength: 0.03, textureRepeat: 2, waveVelocity: 0.15 } };

// node_modules/@arcgis/core/views/3d/layers/graphics/Graphics3DWaterSymbolLayer.js
var U9 = ["polyline", "polygon", "extent"];
var _I = class _I extends y7 {
  constructor(e37, t29, r29, o28) {
    super(e37, t29, r29, o28);
  }
  async doLoad() {
  }
  createGraphics3DGraphic(e37) {
    const t29 = e37.graphic;
    if (!this._validateGeometry(t29.geometry, U9, this.symbolLayer.type)) return null;
    const r29 = this.setGraphicElevationContext(t29);
    return this.ensureDrapedStatus("on-the-ground" === r29.mode), this.ensureMaterial(), this.draped ? this._createAsOverlay(t29) : this._createAs3DShape(t29, r29, t29.uid);
  }
  ensureMaterial() {
    if (this._materials[0]) return;
    const t29 = new v6(), r29 = this.symbolLayer.color;
    null != r29 && (t29.color = l4.toUnitRGBA(r29));
    const o28 = this._getCombinedOpacity(r29, { hasIntrinsicColor: true });
    t29.color = [t29.color[0], t29.color[1], t29.color[2], o28], t29.transparent = o28 < 1 || this.needsDrivenTransparentPass, t29.waveDirection = null != this.symbolLayer.waveDirection ? B6(this.symbolLayer.waveDirection) : r9(0, 0);
    const n29 = this.symbolLayer.waveStrength + "-" + this.symbolLayer.waterbodySize, s26 = e36[n29];
    t29.waveStrength = s26.waveStrength, t29.waveTextureRepeat = s26.textureRepeat, t29.waveVelocity = s26.waveVelocity, t29.flowStrength = s26.perturbationStrength, t29.hasSlicePlane = this._context.slicePlaneEnabled, t29.draped = this.draped, this._materials[0] = new _9(t29, this._context);
  }
  layerOpacityChanged() {
    if (null == this._materials[0]) return;
    const e37 = this._materials[0].parameters.color, t29 = this._getCombinedOpacity(this.symbolLayer.color, { hasIntrinsicColor: true }), r29 = t29 < 1 || this.needsDrivenTransparentPass;
    this._materials[0].setParameters({ color: [e37[0], e37[1], e37[2], t29], transparent: r29 });
  }
  layerElevationInfoChanged(e37, t29, r29) {
    const o28 = this._elevationContext.mode, i18 = m12(_I.elevationModeChangeTypes, r29, o28);
    if (i18 !== b8.UPDATE) return i18;
    const n29 = d5(o28);
    return this.updateGraphics3DGraphicElevationInfo(e37, t29, () => n29);
  }
  slicePlaneEnabledChanged() {
    return this._materials[0]?.setParameters({ hasSlicePlane: this._context.slicePlaneEnabled }), true;
  }
  physicalBasedRenderingChanged() {
    return true;
  }
  _createAs3DShape(e37, t29, r29) {
    const o28 = b11(e37.geometry);
    if (null == o28) return null;
    const i18 = p19(o28, this._context.elevationProvider, this._context.renderCoordsHelper, t29), n29 = i18.position.length / 3, s26 = n12(2 * n29);
    M6(s26, i18.mapPositions, n29, this._context.elevationProvider.spatialReference);
    const a33 = new N7(i18, s26, this._context.layerViewUid, e37.uid);
    if (a33.objectAndLayerIdColor = this._context.stage.renderView?.getObjectAndLayerIdColor(a33), this._create3DShapeGeometries(a33), this._logGeometryCreationWarnings(a33.renderData, o28.rings, "rings", "WaterSymbol3DLayer"), 0 === a33.outGeometries.length) return null;
    const l28 = new A8({ geometries: a33.outGeometries, castShadow: false, layerViewUid: this._context.layerViewUid, graphicUid: r29 }), c25 = new p15(this, l28, null, u21, t29);
    return c25.alignedSampledElevation = a33.renderData.sampledElevation, c25.needsElevationUpdates = d5(t29.mode), c25;
  }
  _create3DShapeGeometries(e37) {
    const t29 = e37.renderData.polygons, o28 = e37.uvCoords;
    for (const { count: i18, index: n29, position: s26, mapPositions: a33, holeIndices: c25 } of t29) {
      if (null != this._context.clippingExtent && (m4(a33, k12), !A(k12, this._context.clippingExtent))) continue;
      const t30 = e12(a33, c25, 3);
      if (0 === t30.length) continue;
      const m21 = e20(o28, 2 * n29, 2 * i18), p23 = p18({ material: this._materials[0], indices: t30, mapPositions: a33, attributeData: { position: s26, uv0: m21 } }, e37.objectAndLayerIdColor);
      e37.outGeometries.push(p23);
    }
  }
  _createAsOverlay(e37) {
    const t29 = b11(e37.geometry);
    if (null == t29) return null;
    this._materials[0].renderPriority = this._renderPriority;
    const r29 = c15(t29, this._context.overlaySR), o28 = r29.position.length / 3, i18 = n12(2 * o28);
    M6(i18, r29.position, o28, this._context.overlaySR);
    const n29 = new F8(r29, i18, this._context.layerViewUid, e37.uid);
    return n29.objectAndLayerIdColor = this._context.stage.renderView?.getObjectAndLayerIdColor(n29), n29.outBoundingBox = q(), this._createAsOverlayWater(n29), this._logGeometryCreationWarnings(n29.renderData, t29.rings, "rings", "WaterSymbol3DLayer"), 0 === n29.outGeometries.length ? null : new l20(this, n29.outGeometries, n29.outBoundingBox, this._context.drapeSourceRenderer);
  }
  _createAsOverlayWater(e37) {
    const t29 = e37.uvCoords, o28 = e37.renderData.polygons;
    for (const { position: i18, holeIndices: n29, index: s26, count: a33 } of o28) {
      if (m4(i18, k12), !A(k12, this._context.clippingExtent)) continue;
      M(e37.outBoundingBox, k12);
      const o29 = e12(i18, n29, 3);
      if (0 === o29.length) continue;
      const c25 = e20(t29, 2 * s26, 2 * a33), m21 = p18({ material: this._materials[0], indices: o29, attributeData: { position: i18, uv0: c25 } }, e37.objectAndLayerIdColor);
      e37.outGeometries.push(new g9(m21, e37));
    }
  }
  test() {
    return { ...super.test(), create3DShape: (e37) => this._createAs3DShape(e37.graphic, e37.elevationContext, e37.graphicUid), ensureMaterial: () => this.ensureMaterial() };
  }
};
_I.unitSizeOfTexture = 100;
_I.elevationModeChangeTypes = { definedChanged: b8.RECREATE, staysOnTheGround: b8.NONE, onTheGroundChanged: b8.RECREATE };
var I14 = _I;
function B6(e37) {
  const t29 = n8(), r29 = u8(e37);
  return t29[0] = Math.sin(r29), t29[1] = Math.cos(r29), t29;
}
function M6(e37, r29, i18, n29) {
  const a33 = Z(n29);
  I(W8);
  for (let t29 = 0; t29 < i18; t29++) o10(z5, r29[3 * t29], r29[3 * t29 + 1]), m3(W8, z5);
  m5(W8, W8, a33);
  const l28 = W8[0] % I14.unitSizeOfTexture, c25 = W8[1] % I14.unitSizeOfTexture;
  V9[0] = W8[0] - l28, V9[1] = W8[1] - c25;
  for (let t29 = 0; t29 < i18; t29++) e37[2 * t29] = (r29[3 * t29] * a33 - V9[0]) / I14.unitSizeOfTexture, e37[2 * t29 + 1] = (r29[3 * t29 + 1] * a33 - V9[1]) / I14.unitSizeOfTexture;
}
var V9 = n8();
var W8 = u4();
var z5 = n8();
var k12 = u6();
var N7 = class extends g11 {
  constructor(e37, t29, r29, o28) {
    super(e37, r29, o28), this.uvCoords = t29;
  }
};
var F8 = class extends g11 {
  constructor(e37, t29, r29, o28) {
    super(e37, r29, o28), this.uvCoords = t29;
  }
};

// node_modules/@arcgis/core/views/3d/layers/graphics/Graphics3DSymbolLayerFactory.js
function c24(o28, e37, t29, i18) {
  const m21 = h22[o28.type]?.[e37.type] || l27[e37.type];
  return m21 ? new m21(o28, e37, t29, i18) : (i.getLogger("esri.views.3d.layers.graphics.Graphics3DSymbolLayerFactory").error("GraphicsLayerFactory#make", `unknown symbol type ${e37.type}`), null);
}
var l27 = { icon: ue2, object: pe2, line: B4, path: ae, fill: H4, extrude: st, text: H5, water: I14 };
function n28(r29, o28) {
  l27[r29] = o28;
}
var h22 = { "mesh-3d": { fill: Ve } };
export {
  c24 as make,
  n28 as setSymbolClass
};
//# sourceMappingURL=Graphics3DSymbolLayerFactory-VVCCDI6E.js.map
