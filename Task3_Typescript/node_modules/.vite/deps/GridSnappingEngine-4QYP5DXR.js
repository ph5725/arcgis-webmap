import {
  r as r2
} from "./chunk-7VEHC2ZL.js";
import {
  r as r3
} from "./chunk-QK2WX3FC.js";
import "./chunk-EOS5YLWS.js";
import "./chunk-5TKMN7TZ.js";
import {
  d
} from "./chunk-LYH5EAFA.js";
import {
  c,
  f
} from "./chunk-ENM5QFON.js";
import {
  l,
  t,
  u as u2
} from "./chunk-P377W366.js";
import "./chunk-2H2JCT45.js";
import "./chunk-RVXIJHL6.js";
import "./chunk-2JAL6FAS.js";
import "./chunk-BGR5EVZD.js";
import "./chunk-RTDWTAVK.js";
import "./chunk-QLJ6JQFC.js";
import "./chunk-3LL6ALVC.js";
import "./chunk-NZPABYQQ.js";
import "./chunk-CCHJ3WNU.js";
import "./chunk-BUA5NESM.js";
import "./chunk-SHYE33QH.js";
import "./chunk-LTMF2W73.js";
import "./chunk-DRAQJS2F.js";
import "./chunk-VNTS5E5O.js";
import {
  w
} from "./chunk-TMFB3DKM.js";
import {
  P
} from "./chunk-X3UT6DT7.js";
import "./chunk-JD3UVEVP.js";
import "./chunk-LBC3MAJX.js";
import "./chunk-TNW4TPNP.js";
import "./chunk-UG6RJXJ2.js";
import {
  u
} from "./chunk-J7LSFQNH.js";
import "./chunk-7FAVUXK2.js";
import "./chunk-IVNFIIVI.js";
import "./chunk-FEGY3M6U.js";
import "./chunk-6WL2SHX6.js";
import "./chunk-7ZMGKXLG.js";
import "./chunk-JMXPE5PE.js";
import "./chunk-LL73CCBG.js";
import "./chunk-6TS2ZJL4.js";
import "./chunk-IBGTNH54.js";
import "./chunk-ROVRMLYN.js";
import "./chunk-SYPTUUSZ.js";
import "./chunk-6QTMK7BB.js";
import "./chunk-BNO7HCVD.js";
import {
  O,
  U
} from "./chunk-7NMH5MM5.js";
import "./chunk-TCIXF7MM.js";
import "./chunk-UGTICYU7.js";
import "./chunk-3MHRDLQO.js";
import "./chunk-KHRHKYU2.js";
import "./chunk-EOMIFMDH.js";
import "./chunk-QFU5COFB.js";
import "./chunk-BDLVUYG2.js";
import "./chunk-DNZK6PPI.js";
import "./chunk-7BWCD63N.js";
import "./chunk-RACDQ3AL.js";
import "./chunk-TEXTBDH7.js";
import "./chunk-N3A2BVTW.js";
import "./chunk-IGYEHOTB.js";
import "./chunk-TVM3SZJR.js";
import "./chunk-52HWRRRQ.js";
import "./chunk-VNTEV3V4.js";
import "./chunk-OGOQOMMV.js";
import "./chunk-7Z3AF3B2.js";
import "./chunk-6GWORUT3.js";
import "./chunk-KJSBBQ22.js";
import "./chunk-LMEOPAGQ.js";
import "./chunk-A3VAC24F.js";
import {
  s
} from "./chunk-FPSA4NFH.js";
import "./chunk-UY6B6IVT.js";
import "./chunk-O5TPFXRT.js";
import "./chunk-Q6XRAGMA.js";
import "./chunk-JUAPMINU.js";
import "./chunk-PK2ZR2SJ.js";
import "./chunk-YFPGM5UE.js";
import {
  j
} from "./chunk-OXSERRAR.js";
import "./chunk-7HI4VRVW.js";
import "./chunk-ZX46THLM.js";
import "./chunk-Y2ZIOB7Y.js";
import "./chunk-KTUX3OKX.js";
import "./chunk-E3KEUGUG.js";
import {
  b,
  m
} from "./chunk-N3XLUQJI.js";
import {
  a2 as a
} from "./chunk-JUAD7TJ6.js";
import "./chunk-VHLUKPRH.js";
import {
  r
} from "./chunk-5TPMG26T.js";
import "./chunk-3NBBZ43U.js";
import "./chunk-VOLWOTEG.js";
import "./chunk-XTNIDRTB.js";
import "./chunk-FGWIXJQY.js";
import "./chunk-TKYAZCMB.js";
import "./chunk-3TBMFSPB.js";
import "./chunk-PSZLDJJA.js";
import "./chunk-ZWFY3WY5.js";
import "./chunk-LQFTAGIV.js";
import "./chunk-S7IJH524.js";
import "./chunk-GZ2P4SCJ.js";
import {
  i2 as i
} from "./chunk-XWG6QGFK.js";
import "./chunk-GWNLQRNM.js";
import "./chunk-FXKORAMT.js";
import "./chunk-GNMFMITH.js";

// node_modules/@arcgis/core/views/interactive/snapping/GridSnappingEngine.js
var w2 = class extends b {
  constructor(t2) {
    super(t2), this.options = null;
  }
  destroy() {
    this._set("options", null);
  }
  get grid() {
    return this.view.grid;
  }
  get effectiveViewRotation() {
    return this.grid?.rotateWithMap ? 0 : s(this.view.rotation ?? 0);
  }
  get gridRotation() {
    return s(this.grid?.rotation ?? 0);
  }
  get gridCenter() {
    const { spatialReference: t2, grid: e } = this;
    if (!e || !t2 || !U(e.center.spatialReference, t2)) return null;
    try {
      const r4 = O(e.center, t2), i2 = t2.isWrappable && null != this.view?.center ? P(r4.x, this.view.center.x, t2) : r4.x;
      return f(i2, r4.y, r4.z);
    } catch (i2) {
      return i.getLogger(this).errorOnce("Grid Snapping - Failed to project grid center.", i2), null;
    }
  }
  get offsetScaleFactor() {
    const { pixelsPerStride: t2, grid: e } = this;
    if (!e || !t2) return 1;
    const { majorLineInterval: r4, dynamicScaling: i2 } = e;
    return r4 < 1 ? null : l(r4, t2, i2);
  }
  get spatialReference() {
    return this.view.spatialReference;
  }
  get gridMetersPerStride() {
    const { grid: t2 } = this;
    return t2 ? j(t2.spacing, t2.units, "meters") : null;
  }
  get viewMetersPerPixel() {
    const { viewMetersPerSRUnit: t2 } = this;
    return null == t2 ? null : t2 * u(this.view.scale, this.view.spatialReference);
  }
  get viewMetersPerSRUnit() {
    const { spatialReference: t2 } = this.view;
    return this.gridCenter ? u2(this.gridCenter[0], this.gridCenter[1], t2) : null;
  }
  get pixelsPerStride() {
    const { gridMetersPerStride: t2, viewMetersPerPixel: e } = this;
    return e && t2 ? t2 / e : null;
  }
  get updating() {
    return null != this.grid && null != this.spatialReference && null == this.viewMetersPerSRUnit;
  }
  async fetchCandidates(t2, e, r4) {
    const { options: i2, view: n } = this;
    if (!i2?.effectiveGridEnabled || !n.grid || r4.feature?.attributes && d in r4.feature.attributes) return [];
    const o = r4.coordinateHelper.arrayToPoint(t2), s2 = i2.distance * ("touch" === r4.pointer ? i2.touchSensitivityMultiplier : 1);
    return this.fetchCandidatesSync(o, s2);
  }
  fetchCandidatesSync(t2, e) {
    const r4 = [], { grid: i2, effectiveViewRotation: n, gridRotation: o, gridCenter: s2, viewMetersPerPixel: a2, viewMetersPerSRUnit: c2, offsetScaleFactor: u3, spatialReference: g, gridMetersPerStride: f2, pixelsPerStride: m2 } = this;
    if (!(i2 && a2 && c2 && s2 && g && u3 && f2 && m2)) return r4;
    if (!i2.dynamicScaling && m2 < t) return r4;
    if (!U(t2.spatialReference, g)) return r4;
    const S = O(t2, g), w3 = f(S.x, S.y, S.z), x = P2(w3, -o, s2, -n), C = f2 / c2 * u3, U2 = j2(x, C, s2), { shouldSnapX: b2, shouldSnapY: L } = R(U2, x, e, a2, c2);
    if (!b2 && !L) return [];
    const z = f((b2 ? U2 : x)[0], (L ? U2 : x)[1]), E = P2(z, o, s2, n), F = P2(U2, o, s2, n);
    if (L) {
      const t3 = M(U2, x, C, "y"), e2 = P2(t3, o, s2, n);
      r4.push(new r3({ lineStart: F, lineEnd: e2, targetPoint: E, isDraped: false }));
    }
    if (b2) {
      const t3 = M(U2, x, C, "x"), e2 = P2(t3, o, s2, n);
      r4.push(new r3({ lineStart: F, lineEnd: e2, targetPoint: E, isDraped: false }));
    }
    return b2 && L && r4.push(new r2(E, r4[0], r4[1], false)), r4;
  }
};
r([m({ constructOnly: true })], w2.prototype, "view", void 0), r([m()], w2.prototype, "options", void 0), r([m()], w2.prototype, "grid", null), r([m()], w2.prototype, "effectiveViewRotation", null), r([m()], w2.prototype, "gridRotation", null), r([m()], w2.prototype, "gridCenter", null), r([m()], w2.prototype, "offsetScaleFactor", null), r([m()], w2.prototype, "spatialReference", null), r([m()], w2.prototype, "gridMetersPerStride", null), r([m()], w2.prototype, "viewMetersPerPixel", null), r([m()], w2.prototype, "viewMetersPerSRUnit", null), r([m()], w2.prototype, "pixelsPerStride", null), r([m()], w2.prototype, "updating", null), w2 = r([a("esri.views.interactive.snapping.GridSnappingEngine")], w2);
var P2 = (t2, e, r4, i2) => {
  const n = c(t2[0], t2[1], t2[2]);
  return w(n, w(n, n, r4, e), r4, i2);
};
var j2 = (t2, e, r4) => {
  const i2 = (t2[0] - r4[0]) / e, n = (t2[1] - r4[1]) / e, o = Math.trunc(i2), s2 = Math.trunc(n), a2 = Math.round(i2 % 1), p = Math.round(n % 1), l2 = r4[0] + (o + a2) * e, c2 = r4[1] + (s2 + p) * e;
  return f(l2, c2);
};
var R = (t2, e, r4, i2, n) => {
  if (i2 <= 0) return { shouldSnapX: false, shouldSnapY: false };
  const o = (t2[0] - e[0]) / i2, s2 = (t2[1] - e[1]) / i2;
  return { shouldSnapX: Math.abs(o * n) < r4, shouldSnapY: Math.abs(s2 * n) < r4 };
};
var M = (t2, e, r4, i2) => {
  if ("y" === i2) {
    const i3 = e[0] > t2[0] ? 1 : -1;
    return f(t2[0] + r4 * i3, t2[1]);
  }
  const n = e[1] > t2[1] ? 1 : -1;
  return f(t2[0], t2[1] + r4 * n);
};
export {
  w2 as GridSnappingEngine
};
//# sourceMappingURL=GridSnappingEngine-4QYP5DXR.js.map
