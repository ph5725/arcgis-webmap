import {
  d as d2,
  f,
  h
} from "./chunk-XJ2T6IH5.js";
import {
  a as a2
} from "./chunk-TYEOKHW6.js";
import {
  M
} from "./chunk-5JLD4TOP.js";
import {
  r as r2
} from "./chunk-HQQ3TIHZ.js";
import {
  l as l2
} from "./chunk-IEBPGCZ4.js";
import {
  i as i3
} from "./chunk-5FFOLNHT.js";
import {
  i as i2
} from "./chunk-CEMHA5WX.js";
import {
  S
} from "./chunk-YR4BEFGH.js";
import {
  u
} from "./chunk-EEB2RHCK.js";
import "./chunk-KYHAK7RN.js";
import {
  O as O2
} from "./chunk-4PAILKIT.js";
import "./chunk-QYCJPZF2.js";
import "./chunk-G3V62EXP.js";
import "./chunk-MGE3DVJJ.js";
import "./chunk-A4YQJHJZ.js";
import "./chunk-JSDQVIZI.js";
import {
  n4 as n2
} from "./chunk-GEY3MNEN.js";
import {
  n
} from "./chunk-QARUBZM2.js";
import "./chunk-YEQJ7SMN.js";
import "./chunk-F6HYAIOQ.js";
import "./chunk-733XT7D4.js";
import "./chunk-O3AUTEBE.js";
import "./chunk-TUPNUSND.js";
import "./chunk-VZRBHAHT.js";
import "./chunk-73JRZP7E.js";
import "./chunk-I7SMTGBD.js";
import "./chunk-TAPCW5Z5.js";
import "./chunk-JOUWZB2W.js";
import "./chunk-ZQPAEH56.js";
import "./chunk-SEPZOYEZ.js";
import "./chunk-L5FOMWCW.js";
import "./chunk-CF5GNPLI.js";
import "./chunk-5WTH3GBK.js";
import "./chunk-N6WKHIKW.js";
import "./chunk-LHJOMFWG.js";
import {
  O,
  Q,
  v
} from "./chunk-Z5EDZREM.js";
import {
  U as U2,
  m2
} from "./chunk-NXHGFG67.js";
import "./chunk-A4KKV2O6.js";
import {
  p
} from "./chunk-WEJSS4SJ.js";
import "./chunk-IAKXH7PU.js";
import "./chunk-DRLVYVHZ.js";
import "./chunk-DKS7UUDR.js";
import "./chunk-KDQWOWXR.js";
import "./chunk-JOVQBCRD.js";
import "./chunk-2B6XECE5.js";
import "./chunk-GYAK76KG.js";
import "./chunk-QB5ST4HW.js";
import "./chunk-CCHJ3WNU.js";
import "./chunk-NHBIV3BK.js";
import "./chunk-RD652CDC.js";
import "./chunk-KB5I2WHB.js";
import "./chunk-P3YYANTX.js";
import "./chunk-WKCCXG3E.js";
import "./chunk-ZWJOMK2U.js";
import "./chunk-Y2ZAHGIO.js";
import "./chunk-ZCE5HP23.js";
import "./chunk-Y2QTREQA.js";
import "./chunk-OV7XVIQP.js";
import "./chunk-JQSXFLSD.js";
import "./chunk-PVI3IOCA.js";
import "./chunk-H5K53FMS.js";
import "./chunk-VNLFNBKT.js";
import "./chunk-KHEIHGIK.js";
import "./chunk-XGWAEOLO.js";
import "./chunk-76QJRCNC.js";
import "./chunk-YL4WUSSA.js";
import "./chunk-AAC6XSCN.js";
import "./chunk-GKCEBA6Q.js";
import "./chunk-VWMPQK5V.js";
import "./chunk-IGBV77N3.js";
import {
  c as c3
} from "./chunk-5Y3EUPZN.js";
import "./chunk-NFDUQVJM.js";
import "./chunk-2W7OT7Z4.js";
import {
  E
} from "./chunk-3PPDORWL.js";
import "./chunk-YIXK32VF.js";
import "./chunk-CHTPXQAG.js";
import "./chunk-2NTKYBCL.js";
import "./chunk-4ADC6HZF.js";
import {
  c as c2
} from "./chunk-XFKS4JQP.js";
import "./chunk-H6F6O2KE.js";
import "./chunk-AF3FX2UV.js";
import "./chunk-DRAQJS2F.js";
import "./chunk-BZYXFNL4.js";
import "./chunk-VNTS5E5O.js";
import "./chunk-TMFB3DKM.js";
import "./chunk-X3UT6DT7.js";
import "./chunk-JD3UVEVP.js";
import "./chunk-NO2XQDLB.js";
import "./chunk-LBC3MAJX.js";
import "./chunk-3ZORAHSR.js";
import "./chunk-SZN55B2M.js";
import "./chunk-NMP7ZOVG.js";
import "./chunk-YHYQP7QX.js";
import "./chunk-RP7FUW55.js";
import "./chunk-MPV4X4LZ.js";
import "./chunk-TNW4TPNP.js";
import "./chunk-IL45XPTT.js";
import "./chunk-G5DA3EEG.js";
import "./chunk-I6IIPG56.js";
import "./chunk-JEYXDNAT.js";
import "./chunk-DJJNSAUR.js";
import "./chunk-PZBXBPVO.js";
import "./chunk-TMC6HYGQ.js";
import "./chunk-7FAVUXK2.js";
import "./chunk-IVNFIIVI.js";
import "./chunk-NOGWEW4X.js";
import "./chunk-ZCZERMS4.js";
import "./chunk-RGFH75DR.js";
import "./chunk-FEGY3M6U.js";
import "./chunk-NY6S6EMV.js";
import "./chunk-AQGMTI4V.js";
import "./chunk-QG7JWSBW.js";
import "./chunk-6WL2SHX6.js";
import {
  R
} from "./chunk-7ZMGKXLG.js";
import "./chunk-JMXPE5PE.js";
import "./chunk-LL73CCBG.js";
import "./chunk-6TS2ZJL4.js";
import "./chunk-IBGTNH54.js";
import "./chunk-ROVRMLYN.js";
import "./chunk-SYPTUUSZ.js";
import "./chunk-6QTMK7BB.js";
import "./chunk-BNO7HCVD.js";
import "./chunk-7NMH5MM5.js";
import "./chunk-TCIXF7MM.js";
import "./chunk-UGTICYU7.js";
import "./chunk-3MHRDLQO.js";
import "./chunk-KHRHKYU2.js";
import {
  d
} from "./chunk-2IMSGFJN.js";
import "./chunk-VHTQ5H2C.js";
import "./chunk-YX2VTIZR.js";
import "./chunk-LYSDGL5S.js";
import "./chunk-SRJX4QLW.js";
import "./chunk-WPTJIN2M.js";
import "./chunk-KUP5BM5G.js";
import "./chunk-HNQNVI5C.js";
import "./chunk-G34OBNLT.js";
import "./chunk-WJUYGRZY.js";
import "./chunk-FKFXOPPT.js";
import "./chunk-KE3WBZYL.js";
import "./chunk-EOMIFMDH.js";
import "./chunk-QFU5COFB.js";
import "./chunk-45ILJ6ZH.js";
import "./chunk-VCRP2PLV.js";
import "./chunk-BDLVUYG2.js";
import "./chunk-6QA2BVC5.js";
import "./chunk-HWKQJUGY.js";
import "./chunk-XDCUZFJX.js";
import "./chunk-DNZK6PPI.js";
import "./chunk-7BWCD63N.js";
import "./chunk-65K4DQAH.js";
import "./chunk-MUKDJQWB.js";
import "./chunk-6KFXWKZZ.js";
import {
  V
} from "./chunk-X3R5OB6L.js";
import "./chunk-RACDQ3AL.js";
import "./chunk-TEXTBDH7.js";
import "./chunk-N3A2BVTW.js";
import "./chunk-IGYEHOTB.js";
import "./chunk-TVM3SZJR.js";
import "./chunk-52HWRRRQ.js";
import "./chunk-VNTEV3V4.js";
import "./chunk-OGOQOMMV.js";
import "./chunk-7Z3AF3B2.js";
import "./chunk-6GWORUT3.js";
import "./chunk-CMHHL5UO.js";
import "./chunk-KJSBBQ22.js";
import "./chunk-LMEOPAGQ.js";
import "./chunk-YIV2QKTZ.js";
import {
  U,
  l,
  w
} from "./chunk-A3VAC24F.js";
import "./chunk-FPSA4NFH.js";
import "./chunk-UY6B6IVT.js";
import "./chunk-6PV45IYU.js";
import "./chunk-SRQCQD63.js";
import "./chunk-FIRNXFAH.js";
import {
  z
} from "./chunk-O5TPFXRT.js";
import {
  _
} from "./chunk-Q6XRAGMA.js";
import "./chunk-JUAPMINU.js";
import "./chunk-PK2ZR2SJ.js";
import "./chunk-YFPGM5UE.js";
import {
  c
} from "./chunk-OXSERRAR.js";
import "./chunk-7HI4VRVW.js";
import "./chunk-ZX46THLM.js";
import "./chunk-Y2ZIOB7Y.js";
import "./chunk-KTUX3OKX.js";
import "./chunk-E3KEUGUG.js";
import {
  b as b2,
  m
} from "./chunk-N3XLUQJI.js";
import {
  a2 as a
} from "./chunk-JUAD7TJ6.js";
import "./chunk-VHLUKPRH.js";
import {
  r
} from "./chunk-5TPMG26T.js";
import "./chunk-3NBBZ43U.js";
import "./chunk-VOLWOTEG.js";
import "./chunk-XTNIDRTB.js";
import "./chunk-FGWIXJQY.js";
import "./chunk-TKYAZCMB.js";
import "./chunk-3TBMFSPB.js";
import "./chunk-PSZLDJJA.js";
import {
  H
} from "./chunk-ZWFY3WY5.js";
import "./chunk-LQFTAGIV.js";
import "./chunk-S7IJH524.js";
import {
  b,
  e,
  k,
  s as s2
} from "./chunk-GZ2P4SCJ.js";
import {
  i2 as i,
  s
} from "./chunk-XWG6QGFK.js";
import "./chunk-GWNLQRNM.js";
import {
  L,
  has
} from "./chunk-FXKORAMT.js";
import "./chunk-GNMFMITH.js";

// node_modules/@arcgis/core/views/2d/layers/imagery/ImageryView2D.js
var m3 = class extends b2 {
  constructor() {
    super(...arguments), this.attached = false, this.container = new n(), this.updateRequested = false, this.type = "imagery", this._bitmapView = new r2();
  }
  destroy() {
    this.attached && (this.detach(), this.attached = false), this.updateRequested = false;
  }
  get updating() {
    return !this.attached || this.isUpdating();
  }
  update(t2) {
    this.strategy.update(t2).catch((t3) => {
      b(t3) || i.getLogger(this).error(t3);
    });
  }
  hitTest(t2) {
    return new d({ attributes: {}, geometry: t2.clone(), layer: this.layer });
  }
  attach() {
    this.container.addChild(this._bitmapView);
    const t2 = this.layer.version >= 10, e2 = this.layer.version >= 10.1 ? this.layer.imageMaxHeight : 2048, i4 = this.layer.version >= 10.1 ? this.layer.imageMaxWidth : 2048;
    this.strategy = new M({ container: this._bitmapView, imageNormalizationSupported: t2, imageMaxHeight: e2, imageMaxWidth: i4, fetchSource: this._fetchImage.bind(this), requestUpdate: () => this.requestUpdate() });
  }
  detach() {
    this.strategy.destroy(), this._bitmapView.removeAllChildren(), this.container.removeAllChildren(), this.updateRequested = false;
  }
  redraw() {
    this.strategy.updateExports(async (t2) => {
      const { source: e2 } = t2;
      if (!e2 || e2 instanceof ImageBitmap) return;
      const i4 = await this.layer.applyRenderer({ extent: e2.extent, pixelBlock: e2.originalPixelBlock ?? e2.pixelBlock });
      e2.filter = (t3) => this.layer.pixelFilter ? this.layer.applyFilter(t3) : { ...i4, extent: e2.extent };
    }).catch((t2) => {
      b(t2) || i.getLogger(this).error(t2);
    });
  }
  requestUpdate() {
    this.updateRequested || (this.updateRequested = true, this.view.requestUpdate());
  }
  isUpdating() {
    return this.strategy.updating || this.updateRequested;
  }
  getPixelData() {
    if (this.updating) return null;
    const t2 = this.strategy.bitmaps;
    if (1 === t2.length && t2[0].source) return { extent: t2[0].source.extent, pixelBlock: t2[0].source.originalPixelBlock };
    if (t2.length > 1) {
      const e2 = this.view.extent, i4 = t2.map((t3) => t3.source).filter((t3) => t3.extent && t3.extent.intersects(e2)).map((t3) => ({ extent: t3.extent, pixelBlock: t3.originalPixelBlock })), r3 = U2(i4, e2);
      return null != r3 ? { extent: r3.extent, pixelBlock: r3.pixelBlock } : null;
    }
    return null;
  }
  async _fetchImage(t2, e2, i4, r3) {
    (r3 = r3 || {}).timeExtent = this.timeExtent, r3.requestAsImageElement = true, r3.returnImageBitmap = true;
    const a3 = await this.layer.internalFetchImage(t2, e2, i4, r3);
    if (a3.imageBitmap) return a3.imageBitmap;
    const s3 = await this.layer.applyRenderer(a3.pixelData, { signal: r3.signal }), o = new l2(s3.pixelBlock, s3.extent?.clone(), a3.pixelData.pixelBlock);
    return o.filter = (t3) => this.layer.applyFilter(t3), o;
  }
};
r([m()], m3.prototype, "attached", void 0), r([m()], m3.prototype, "container", void 0), r([m()], m3.prototype, "layer", void 0), r([m()], m3.prototype, "strategy", void 0), r([m()], m3.prototype, "timeExtent", void 0), r([m()], m3.prototype, "view", void 0), r([m()], m3.prototype, "updateRequested", void 0), r([m()], m3.prototype, "updating", null), r([m()], m3.prototype, "type", void 0), m3 = r([a("esri.views.2d.layers.imagery.ImageryView2D")], m3);

// node_modules/@arcgis/core/views/2d/engine/imagery/RasterVFContainer.js
var t = class extends n2 {
  constructor() {
    super(...arguments), this.symbolTypes = ["triangle"];
  }
  prepareRenderPasses(s3) {
    const t2 = s3.registerRenderPass({ name: "imagery (vf)", brushes: [d2], target: () => this.children, drawPhase: E.MAP });
    return [...super.prepareRenderPasses(s3), t2];
  }
  doRender(e2) {
    this.visible && e2.drawPhase === E.MAP && this.symbolTypes.forEach((r3) => {
      e2.renderPass = r3, super.doRender(e2);
    });
  }
};

// node_modules/@arcgis/core/views/2d/layers/imagery/ImageryVFStrategy.js
var c4 = class extends b2 {
  constructor(e2) {
    super(e2), this._loading = null, this.update = k((e3, t2) => this._update(e3, t2).catch((e4) => {
      b(e4) || i.getLogger(this).error(e4);
    }));
  }
  get updating() {
    return !!this._loading;
  }
  redraw(e2) {
    if (!this.container.children.length) return;
    const t2 = this.container.children[0];
    t2.symbolizerParameters = e2, t2.invalidateVAO(), this.container.symbolTypes = "wind_speed" === e2.style ? ["scalar", "triangle"] : "simple_scalar" === e2.style ? ["scalar"] : ["triangle"], this.container.requestRender();
  }
  async _update(e2, t2, i4) {
    if (!e2.stationary) return;
    const { extent: r3, spatialReference: o } = e2.state, s3 = new z({ xmin: r3.xmin, ymin: r3.ymin, xmax: r3.xmax, ymax: r3.ymax, spatialReference: o }), [a3, l3] = e2.state.size;
    this._loading = this.fetchPixels(s3, a3, l3, i4);
    const c5 = await this._loading;
    this._addToDisplay(c5, t2, e2.state), this._loading = null;
  }
  _addToDisplay(e2, t2, i4) {
    if (null == e2.pixelBlock) return this.container.children.forEach((e3) => e3.destroy()), void this.container.removeAllChildren();
    const { extent: r3, pixelBlock: o } = e2, s3 = new f(o);
    s3.offset = [0, 0], s3.symbolizerParameters = t2, s3.rawPixelData = e2, s3.invalidateVAO(), s3.x = r3.xmin, s3.y = r3.ymax, s3.pixelRatio = i4.pixelRatio, s3.rotation = i4.rotation, s3.resolution = i4.resolution, s3.width = o.width * t2.symbolTileSize, s3.height = o.height * t2.symbolTileSize, this.container.children.forEach((e3) => e3.destroy()), this.container.removeAllChildren(), this.container.symbolTypes = "wind_speed" === t2.style ? ["scalar", "triangle"] : "simple_scalar" === t2.style ? ["scalar"] : ["triangle"], this.container.addChild(s3);
  }
};
r([m()], c4.prototype, "fetchPixels", void 0), r([m()], c4.prototype, "container", void 0), r([m()], c4.prototype, "_loading", void 0), r([m()], c4.prototype, "updating", null), c4 = r([a("esri.views.2d.layers.imagery.ImageryVFStrategy")], c4);

// node_modules/@arcgis/core/views/2d/layers/imagery/VectorFieldView2D.js
var x = class extends b2 {
  constructor() {
    super(...arguments), this.attached = false, this.container = new t(), this.type = "imageryVF", this._dataParameters = { exportParametersVersion: 0, bbox: "", symbolTileSize: 0, time: "" }, this._fetchpixels = async (t2, e2, r3, i4) => {
      const s3 = await this._projectFullExtentPromise, { layer: o } = this, { symbolTileSize: a3 } = o.renderer, { extent: n3, width: l3, height: c5 } = m2(t2, e2, r3, a3, s3);
      if (null != s3 && !s3.intersects(t2)) return { extent: n3, pixelBlock: null };
      const m5 = { bbox: `${n3.xmin}, ${n3.ymin}, ${n3.xmax}, ${n3.ymax}`, exportParametersVersion: o.exportImageServiceParameters.version, symbolTileSize: a3, time: JSON.stringify(this.timeExtent || "") };
      if (this._canReuseVectorFieldData(m5)) {
        const t3 = this.getPixelData();
        if (null != t3) {
          if (`${t3.extent.xmin}, ${t3.extent.ymin}, ${t3.extent.xmax}, ${t3.extent.ymax}` === m5.bbox) return t3;
        }
      }
      const { pixelBlock: p2 } = await o.fetchPixels(n3, l3, c5, { timeExtent: this.timeExtent, interpolation: o.interpolation, signal: i4 });
      if (this._dataParameters = m5, null == p2) return { extent: n3, pixelBlock: null };
      const { dataType: h2 } = o.rasterInfo;
      return { extent: n3, pixelBlock: "vector-uv" === h2 && p2 ? await o.convertVectorFieldData(p2, "vector-uv", { signal: i4 }) : p2 };
    };
  }
  get updating() {
    return !this.attached || this._strategy.updating;
  }
  attach() {
    this._projectFullExtentPromise = this._getProjectedFullExtent(this.view.spatialReference), this._strategy = new c4({ container: this.container, fetchPixels: this._fetchpixels }), this.addHandles(l(() => this.layer.renderer, (t2) => this._updateSymbolizerParams(t2), w), "attach");
  }
  detach() {
    this._strategy.destroy(), this.container.children.forEach((t2) => t2.destroy()), this.container.removeAllChildren(), this.removeHandles("attach"), this._strategy = this.container = this._projectFullExtentPromise = null;
  }
  getPixelData() {
    const t2 = this.container.children[0]?.rawPixelData;
    if (this.updating || !t2) return null;
    const { extent: e2, pixelBlock: r3 } = t2;
    return { extent: e2, pixelBlock: r3 };
  }
  hitTest(t2) {
    return new d({ attributes: {}, geometry: t2.clone(), layer: this.layer });
  }
  update(t2) {
    this._strategy.update(t2, this._symbolizerParams).catch((t3) => {
      b(t3) || i.getLogger(this).error(t3);
    });
  }
  redraw() {
    const { renderer: t2 } = this.layer;
    t2 && (this._updateSymbolizerParams(t2), this._strategy.redraw(this._symbolizerParams));
  }
  _canReuseVectorFieldData(t2) {
    const e2 = this._dataParameters.exportParametersVersion === t2.exportParametersVersion, r3 = this._dataParameters.time === t2.time, i4 = this._dataParameters.symbolTileSize === t2.symbolTileSize, s3 = this._dataParameters.bbox === t2.bbox;
    return e2 && r3 && i4 && s3;
  }
  async _getProjectedFullExtent(t2) {
    try {
      return Q(this.layer.fullExtent, t2);
    } catch (e2) {
      try {
        const e3 = (await H(this.layer.url, { query: { option: "footprints", outSR: c(t2), f: "json" } })).data.featureCollection.layers[0].layerDefinition.extent;
        return e3 ? z.fromJSON(e3) : null;
      } catch {
        return null;
      }
    }
  }
  _updateSymbolizerParams(t2) {
    "vector-field" === t2?.type && (this._symbolizerParams = this.layer.symbolizer.generateWebGLParameters({ pixelBlock: null }));
  }
};
r([m()], x.prototype, "attached", void 0), r([m()], x.prototype, "container", void 0), r([m()], x.prototype, "layer", void 0), r([m()], x.prototype, "timeExtent", void 0), r([m()], x.prototype, "type", void 0), r([m()], x.prototype, "view", void 0), r([m()], x.prototype, "updating", null), x = r([a("esri.views.2d.layers.imagery.VectorFieldView2D")], x);

// node_modules/@arcgis/core/views/layers/ImageryLayerView.js
var m4 = (m5) => {
  let l3 = class extends m5 {
    constructor() {
      super(...arguments), this.view = null;
    }
    get timeExtent() {
      return i3(this.layer, this.view?.timeExtent, this._get("timeExtent"));
    }
    async fetchPopupFeaturesAtLocation(e2, o) {
      const { layer: s3 } = this;
      if (!e2) throw new s("imagerylayerview:fetchPopupFeatures", "Nothing to fetch without area", { layer: s3 });
      const { popupEnabled: a3 } = s3, p2 = p(s3, o);
      if (!a3 || null == p2) return [];
      const n3 = await p2.getRequiredFields();
      s2(o);
      const m6 = new R();
      m6.timeExtent = this.timeExtent, m6.geometry = e2, m6.outFields = n3, m6.outSpatialReference = e2.spatialReference;
      const { resolution: l4, spatialReference: y } = this.view, h2 = "2d" === this.view.type ? new _(l4, l4, y) : new _(0.5 * l4, 0.5 * l4, y), { returnTopmostRaster: f2, showNoDataRecords: w2 } = p2.layerOptions || { returnTopmostRaster: true, showNoDataRecords: false }, d3 = { returnDomainValues: true, returnTopmostRaster: f2, pixelSize: h2, showNoDataRecords: w2, signal: o?.signal };
      return s3.queryVisibleRasters(m6, d3).then((e3) => e3);
    }
    async getSourceScale() {
      return await v(), await this.layer.load(), O(this.layer.serviceRasterInfo, this.view.spatialReference);
    }
    canResume() {
      return !!super.canResume() && !this.timeExtent?.isEmpty;
    }
  };
  return r([m()], l3.prototype, "layer", void 0), r([m()], l3.prototype, "suspended", void 0), r([m({ readOnly: true })], l3.prototype, "timeExtent", null), r([m()], l3.prototype, "view", void 0), l3 = r([a("esri.views.layers.ImageryLayerView")], l3), l3;
};

// node_modules/@arcgis/core/views/2d/layers/ImageryLayerView2D.js
var b3 = class extends m4(i2(S(u))) {
  constructor() {
    super(...arguments), this._exportImageVersion = -1, this._highlightGraphics = new c2(), this._highlightView = void 0, this.layer = null, this.subview = null;
  }
  get pixelData() {
    const { subview: e2 } = this;
    return this.updating || !e2 ? null : "getPixelData" in e2 ? e2.getPixelData() : null;
  }
  update(e2) {
    this.subview?.update(e2);
  }
  attach() {
    this.layer.increaseRasterJobHandlerUsage(), this._setSubView(), this.view && (this._highlightView = new O2({ view: this.view, graphics: this._highlightGraphics, requestUpdateCallback: () => this.requestUpdate(), container: new a2(this.view.featuresTilingScheme) }), this.container.addChild(this._highlightView.container)), this.addAttachHandles([l(() => this.layer.exportImageServiceParameters.version, (e2) => {
      e2 && this._exportImageVersion !== e2 && (this._exportImageVersion = e2, this.requestUpdate());
    }, U), l(() => this.timeExtent, (e2) => {
      const { subview: i4 } = this;
      i4 && (i4.timeExtent = e2, "redraw" in i4 ? this.requestUpdate() : i4.redrawOrRefetch());
    }, U), this.layer.on("redraw", () => {
      const { subview: e2 } = this;
      e2 && ("redraw" in e2 ? e2.redraw() : e2.redrawOrRefetch());
    }), l(() => this.layer.renderer, () => this._setSubView())]);
  }
  detach() {
    this.layer.decreaseRasterJobHandlerUsage(), this.container.removeAllChildren(), this._detachSubview(this.subview), this.subview?.destroy(), this.subview = null, this._highlightView?.destroy(), this._exportImageVersion = -1;
  }
  viewChange() {
  }
  moveEnd() {
    this.requestUpdate();
  }
  highlight(e2, h2) {
    if (!((Array.isArray(e2) ? e2[0] : V.isCollection(e2) ? e2.at(0) : e2) instanceof d)) return e();
    let a3 = [];
    Array.isArray(e2) || V.isCollection(e2) ? a3 = e2.map((e3) => e3.clone()) : e2 instanceof d && (a3 = [e2.clone()]);
    const o = a3?.filter(L);
    if (!o?.length) return e();
    const l3 = h2?.name ?? c3;
    return this._addHighlightGraphics(a3, l3), e(() => !this.destroyed && this._removeHighlightGraphics(a3, l3));
  }
  _addHighlightGraphics(e2, i4) {
    this._highlightGraphics.addMany(e2), this._addHighlights(e2.map((e3) => e3.uid), i4);
  }
  _removeHighlightGraphics(e2, i4) {
    this._highlightGraphics.removeMany(e2), this._removeHighlights(e2.map((e3) => e3.uid), i4);
  }
  async doRefresh() {
    this.requestUpdate();
  }
  isUpdating() {
    const e2 = !this.subview || this.subview.updating || !!this._highlightView?.updating;
    return has("esri-2d-log-updating") && console.log(`Updating ImageryLayerView2D (${this.layer.id}): ${e2}
-> subview ${!this.subview || this.subview.updating}
-> higlightView ${this._highlightView?.updating}
`), e2;
  }
  _processHighlight() {
    const e2 = this._getHighlights();
    this._highlightView?.setHighlight(e2);
  }
  _setSubView() {
    if (!this.view) return;
    const e2 = this.layer.renderer?.type;
    let i4 = "imagery";
    if ("vector-field" === e2 ? i4 = "imageryVF" : "flow" === e2 && (i4 = "flow"), this.subview) {
      const { type: e3 } = this.subview;
      if (e3 === i4) return this._attachSubview(this.subview), void ("flow" === e3 ? this.subview.redrawOrRefetch() : "imagery" === e3 && "lerc" === this.layer.format ? this.subview.redraw() : this.requestUpdate());
      this._detachSubview(this.subview), this.subview?.destroy();
    }
    this.subview = "imagery" === i4 ? new m3({ layer: this.layer, view: this.view, timeExtent: this.timeExtent }) : "imageryVF" === i4 ? new x({ layer: this.layer, view: this.view, timeExtent: this.timeExtent }) : new h({ layer: this.layer, layerView: this }), this._attachSubview(this.subview), this.requestUpdate();
  }
  _attachSubview(e2) {
    e2 && !e2.attached && (e2.attach(), e2.attached = true, this.container.addChildAt(e2.container, 0));
  }
  _detachSubview(e2) {
    e2?.attached && (this.container.removeChild(e2.container), e2.detach(), e2.attached = false);
  }
};
r([m()], b3.prototype, "pixelData", null), r([m()], b3.prototype, "subview", void 0), b3 = r([a("esri.views.2d.layers.ImageryLayerView2D")], b3);
var _2 = b3;
export {
  _2 as default
};
//# sourceMappingURL=ImageryLayerView2D-SDMZTG2F.js.map
