import {
  E,
  Ie,
  h as h2,
  i2,
  m as m3
} from "./chunk-6SUT35DV.js";
import "./chunk-WGTPS6U6.js";
import "./chunk-524UHFSB.js";
import "./chunk-H5N2AXWG.js";
import "./chunk-P4YXQBLK.js";
import "./chunk-WUKLWX63.js";
import "./chunk-LHJOMFWG.js";
import "./chunk-YN3U6WZN.js";
import "./chunk-APGIAJ3M.js";
import "./chunk-ES5H7VGK.js";
import "./chunk-JV7SG7ZY.js";
import "./chunk-2XBUTZI3.js";
import {
  ue
} from "./chunk-VFUR4QXG.js";
import "./chunk-O75YZHXO.js";
import "./chunk-IY3QUJDS.js";
import "./chunk-LW7J7Z4M.js";
import "./chunk-NLQ5JBZ3.js";
import "./chunk-WQVEQTKW.js";
import "./chunk-DKS7UUDR.js";
import "./chunk-KDQWOWXR.js";
import "./chunk-JOVQBCRD.js";
import "./chunk-7TPOIM4Y.js";
import "./chunk-LNFOAX5I.js";
import "./chunk-U3MD377S.js";
import "./chunk-2B6XECE5.js";
import "./chunk-QB5ST4HW.js";
import "./chunk-OIO6NR6X.js";
import "./chunk-F5BDMX7A.js";
import "./chunk-OFHPFWHF.js";
import "./chunk-MZJEBIXX.js";
import "./chunk-VNLFNBKT.js";
import "./chunk-KHEIHGIK.js";
import "./chunk-AAC6XSCN.js";
import "./chunk-Z7VYTTYM.js";
import "./chunk-BDWOUZQR.js";
import "./chunk-H34ENSPL.js";
import "./chunk-4ADC6HZF.js";
import "./chunk-XFKS4JQP.js";
import "./chunk-X3UT6DT7.js";
import "./chunk-JD3UVEVP.js";
import "./chunk-LBC3MAJX.js";
import "./chunk-FSVG2RRX.js";
import "./chunk-L3O6KWVI.js";
import {
  l as l2
} from "./chunk-H7SHPX7W.js";
import "./chunk-WIICHW3C.js";
import "./chunk-T4BWGCN6.js";
import "./chunk-AC7GOP3F.js";
import "./chunk-XPKVLOAO.js";
import "./chunk-GESOBEYT.js";
import "./chunk-E7YVYF37.js";
import "./chunk-E76L26GR.js";
import "./chunk-GG4VLKUY.js";
import "./chunk-IL45XPTT.js";
import "./chunk-6MFKAT6L.js";
import "./chunk-NOWX6W7R.js";
import "./chunk-OQ76WPLD.js";
import {
  e as e2
} from "./chunk-KSVHYEPS.js";
import "./chunk-UTU6N7VJ.js";
import "./chunk-RV3SBM2C.js";
import "./chunk-4GXVCEW4.js";
import "./chunk-B6C7UPBZ.js";
import {
  f
} from "./chunk-IUQBXXYO.js";
import "./chunk-7WKBQS4R.js";
import {
  j
} from "./chunk-VGIEH4HM.js";
import {
  p as p2
} from "./chunk-XLF2NMGX.js";
import {
  t as t2
} from "./chunk-X5GD6LFD.js";
import {
  b2 as b,
  y
} from "./chunk-G4PMFSAZ.js";
import "./chunk-MX5VW6PC.js";
import "./chunk-JJNHUYXK.js";
import "./chunk-UG6RJXJ2.js";
import {
  S
} from "./chunk-OTCYHWWG.js";
import "./chunk-UGXCZZ7N.js";
import "./chunk-OTSYE6UT.js";
import "./chunk-K5LVZUBF.js";
import "./chunk-J7LSFQNH.js";
import "./chunk-AGDHKBKD.js";
import "./chunk-OC2XWDW2.js";
import "./chunk-C3JHRSMA.js";
import "./chunk-M2UZRY7C.js";
import "./chunk-HUVZEBBO.js";
import "./chunk-VLPG2W66.js";
import "./chunk-GH7GZNY6.js";
import "./chunk-G5DA3EEG.js";
import "./chunk-D443BZKU.js";
import "./chunk-7DFHXN7Z.js";
import "./chunk-NX54JGTL.js";
import "./chunk-I6IIPG56.js";
import "./chunk-JEYXDNAT.js";
import "./chunk-DJJNSAUR.js";
import "./chunk-PZBXBPVO.js";
import "./chunk-TMC6HYGQ.js";
import "./chunk-7FAVUXK2.js";
import "./chunk-IVNFIIVI.js";
import "./chunk-T4QXFCFF.js";
import "./chunk-BFUOEOXA.js";
import "./chunk-NOGWEW4X.js";
import "./chunk-ZCZERMS4.js";
import "./chunk-7CUBIFKN.js";
import "./chunk-GPMIOMDJ.js";
import "./chunk-RGFH75DR.js";
import "./chunk-FEGY3M6U.js";
import "./chunk-RWRC6JKB.js";
import "./chunk-M6AESODI.js";
import "./chunk-NY6S6EMV.js";
import "./chunk-AQGMTI4V.js";
import "./chunk-QG7JWSBW.js";
import "./chunk-YSCIEMYQ.js";
import "./chunk-ZXGBNDYM.js";
import "./chunk-GOWWJ2HE.js";
import "./chunk-7ZMGKXLG.js";
import "./chunk-JMXPE5PE.js";
import "./chunk-LL73CCBG.js";
import "./chunk-6TS2ZJL4.js";
import "./chunk-IBGTNH54.js";
import "./chunk-ROVRMLYN.js";
import "./chunk-SYPTUUSZ.js";
import {
  h
} from "./chunk-L7EN54WK.js";
import "./chunk-6QTMK7BB.js";
import "./chunk-BNO7HCVD.js";
import "./chunk-7NMH5MM5.js";
import "./chunk-TCIXF7MM.js";
import "./chunk-UGTICYU7.js";
import "./chunk-3MHRDLQO.js";
import "./chunk-F4KXGA4J.js";
import "./chunk-KHRHKYU2.js";
import "./chunk-2IMSGFJN.js";
import "./chunk-VHTQ5H2C.js";
import "./chunk-YX2VTIZR.js";
import "./chunk-LYSDGL5S.js";
import "./chunk-SRJX4QLW.js";
import "./chunk-WPTJIN2M.js";
import "./chunk-KUP5BM5G.js";
import "./chunk-HNQNVI5C.js";
import "./chunk-G34OBNLT.js";
import "./chunk-WJUYGRZY.js";
import "./chunk-FKFXOPPT.js";
import "./chunk-KE3WBZYL.js";
import "./chunk-EOMIFMDH.js";
import "./chunk-QFU5COFB.js";
import "./chunk-45ILJ6ZH.js";
import "./chunk-VCRP2PLV.js";
import "./chunk-BDLVUYG2.js";
import "./chunk-6QA2BVC5.js";
import "./chunk-HWKQJUGY.js";
import "./chunk-QVKLS4LH.js";
import "./chunk-2KVNXQA7.js";
import "./chunk-XDCUZFJX.js";
import "./chunk-DNZK6PPI.js";
import "./chunk-7BWCD63N.js";
import "./chunk-65K4DQAH.js";
import "./chunk-MUKDJQWB.js";
import "./chunk-6KFXWKZZ.js";
import "./chunk-HPGYEHVI.js";
import "./chunk-YBJ5GVXQ.js";
import {
  V as V2
} from "./chunk-X3R5OB6L.js";
import "./chunk-RACDQ3AL.js";
import "./chunk-TEXTBDH7.js";
import "./chunk-N3A2BVTW.js";
import "./chunk-IGYEHOTB.js";
import "./chunk-TVM3SZJR.js";
import "./chunk-52HWRRRQ.js";
import "./chunk-VNTEV3V4.js";
import "./chunk-OGOQOMMV.js";
import "./chunk-7Z3AF3B2.js";
import "./chunk-6GWORUT3.js";
import "./chunk-U57T7EQN.js";
import "./chunk-CMHHL5UO.js";
import "./chunk-XHYOFJ4U.js";
import {
  n as n2
} from "./chunk-HCYE6OE4.js";
import "./chunk-KJSBBQ22.js";
import "./chunk-LMEOPAGQ.js";
import "./chunk-YIV2QKTZ.js";
import {
  U,
  l
} from "./chunk-A3VAC24F.js";
import "./chunk-FPSA4NFH.js";
import "./chunk-UY6B6IVT.js";
import "./chunk-6PV45IYU.js";
import "./chunk-SRQCQD63.js";
import "./chunk-FIRNXFAH.js";
import "./chunk-O5TPFXRT.js";
import "./chunk-Q6XRAGMA.js";
import {
  o
} from "./chunk-JUAPMINU.js";
import "./chunk-PK2ZR2SJ.js";
import {
  r as r2
} from "./chunk-YFPGM5UE.js";
import "./chunk-OXSERRAR.js";
import "./chunk-7HI4VRVW.js";
import "./chunk-ZX46THLM.js";
import "./chunk-Y2ZIOB7Y.js";
import "./chunk-KTUX3OKX.js";
import "./chunk-E3KEUGUG.js";
import {
  e,
  m,
  n2 as n,
  t2 as t
} from "./chunk-N3XLUQJI.js";
import {
  a2 as a
} from "./chunk-JUAD7TJ6.js";
import "./chunk-VHLUKPRH.js";
import {
  r
} from "./chunk-5TPMG26T.js";
import "./chunk-3NBBZ43U.js";
import "./chunk-VOLWOTEG.js";
import "./chunk-XTNIDRTB.js";
import "./chunk-FGWIXJQY.js";
import "./chunk-TKYAZCMB.js";
import "./chunk-3TBMFSPB.js";
import "./chunk-PSZLDJJA.js";
import {
  m as m2,
  p
} from "./chunk-ZWFY3WY5.js";
import {
  V,
  Y
} from "./chunk-LQFTAGIV.js";
import {
  u
} from "./chunk-S7IJH524.js";
import {
  a as a2
} from "./chunk-GZ2P4SCJ.js";
import {
  i2 as i,
  s
} from "./chunk-XWG6QGFK.js";
import "./chunk-GWNLQRNM.js";
import "./chunk-FXKORAMT.js";
import "./chunk-GNMFMITH.js";

// node_modules/@arcgis/core/layers/KnowledgeGraphLayer.js
var R = class extends p2(t2(f(l2(b(j(S(e2(h)))))))) {
  constructor(e3) {
    super(e3), this._graphTypeLookup = /* @__PURE__ */ new Map(), this._namedTypesModified = false, this.dataManager = null, this.definitionSetMap = null, this.knowledgeGraph = null, this.layers = new (V2.ofType(Ie))(), this.memberEntityTypes = null, this.memberRelationshipTypes = null, this.operationalLayerType = "KnowledgeGraphLayer", this.sublayerIdsCache = /* @__PURE__ */ new Map(), this.tables = new (V2.ofType(Ie))(), this.type = "knowledge-graph", this.url = null, this.addHandles(l(() => this.layers.concat(this.tables), (e4, i3) => this._handleSublayersChange(e4, i3), U));
  }
  load(e3) {
    return this.addResolvingPromise(this._doLoad(e3)), Promise.resolve(this);
  }
  async _doLoad(e3) {
    try {
      await this.loadFromPortal({ supportedTypes: ["Knowledge Graph Layer"] }, e3);
    } catch (i3) {
      a2(i3);
    }
    await this._fetchMetadata(), await this._initializeLayerProperties(), this.loadLayerAssumingLocalCache(), this._layersLoadedFromAuthoritativeItem() || await i2(this);
  }
  async _fetchMetadata() {
    if (!this.url) throw new s("knowledge-graph:missing-url", "KnowledgeGraphLayer must be created with a url");
    const e3 = await ue(this.url);
    this.knowledgeGraph = e3, this._forEachGraphType((e4) => {
      e4.name && this._graphTypeLookup.set(e4.name, e4);
    });
  }
  async _initializeLayerProperties() {
    this.originIdOf("inclusionModeDefinition") === e.USER ? this._validateInclusionModeDefinition() : await this._initializeInclusionModeDefinition(), this._setMemberTypes(), this.dataManager = new E({ knowledgeGraph: this.knowledgeGraph, inclusionModeDefinition: this.inclusionModeDefinition });
  }
  async _initializeInclusionModeDefinition() {
    const e3 = this.definitionSetMap ? await m3(this.definitionSetMap, true) : { generateAllSublayers: true, namedTypeDefinitions: /* @__PURE__ */ new Map() };
    [...this.layers.toArray(), ...this.tables.toArray()].forEach((i3) => {
      const t3 = this._graphTypeLookup.get(i3.graphTypeName);
      t3 && !e3.namedTypeDefinitions.has(t3.name) && e3.namedTypeDefinitions.set(t3.name, { useAllData: true });
    }), this.setAtOrigin("inclusionModeDefinition", e3, t(this.originIdOf("definitionSetMap")));
  }
  _validateInclusionModeDefinition() {
    const { inclusionModeDefinition: e3 } = this;
    if (!e3) return;
    const { namedTypeDefinitions: i3 } = e3;
    if (i3?.size > 0) i3.forEach((e4, t3) => {
      const a3 = this._graphTypeLookup.get(t3);
      if (!a3) return i.getLogger(this).warn(`A named type, ${t3}, was in the inclusion list that wasn't in the data model and will be removed`), void i3.delete(t3);
      "relationship" !== a3.type && "entity" !== a3.type && (i.getLogger(this).warn(`A named type, ${t3}, was in the inclusion list that wasn't properly modeled and will be removed`), i3.delete(t3));
    });
    else if (!e3.generateAllSublayers) throw new s("knowledge-graph:composite-layer-constructor", "If an explicit inclusion definition is defined, at least one namedTypeDefinition must also be defined");
  }
  _setMemberTypes() {
    let e3 = [], i3 = [];
    const { inclusionModeDefinition: t3 } = this, a3 = t3?.namedTypeDefinitions;
    !t3 || t3.generateAllSublayers ? (e3 = this.knowledgeGraph.dataModel?.entityTypes ?? [], i3 = this.knowledgeGraph.dataModel?.relationshipTypes ?? []) : a3 && a3.size > 0 && a3.forEach((t4, a4) => {
      const s2 = this._graphTypeLookup.get(a4);
      switch (s2?.type) {
        case "relationship":
          i3.push(s2);
          break;
        case "entity":
          e3.push(s2);
      }
    }), this.memberEntityTypes = e3, this.memberRelationshipTypes = i3;
  }
  _forEachGraphType(e3) {
    [...this.knowledgeGraph.dataModel?.entityTypes ?? [], ...this.knowledgeGraph.dataModel?.relationshipTypes ?? []].forEach((i3) => {
      e3(i3);
    });
  }
  _refreshNamedTypes() {
    this._namedTypesModified = true;
    for (const e3 of this.layers) e3.emit("refresh", { dataChanged: true });
    for (const e3 of this.tables) e3.emit("refresh", { dataChanged: true });
  }
  async _handleNewRecords(e3) {
    const i3 = /* @__PURE__ */ new Set(), t3 = [];
    for (const a3 of e3) {
      if (!this._graphTypeLookup.has(a3.typeName)) continue;
      false === this.layers.concat(this.tables).some((e4) => e4.objectType.name === a3.typeName) && (this.dataManager.sublayerCaches.set(a3.typeName, /* @__PURE__ */ new Map()), i3.add(a3.typeName));
      u(this.sublayerIdsCache, a3.typeName, () => /* @__PURE__ */ new Set()).add(a3.id), t3.push(a3);
    }
    this.dataManager.addToLayer(t3);
    for (const a3 of i3) {
      const e4 = this._graphTypeLookup.get(a3);
      e4 && (this._addSublayer(e4), "entity" === e4.type ? this.dataManager.entityTypeNames.add(a3) : this.dataManager.relationshipTypeNames.add(a3));
    }
    await i2(this, Array.from(i3)), this._refreshNamedTypes();
  }
  _createSublayers(e3, i3, t3) {
    e3.forEach((e4) => {
      const a3 = this._createSublayer(e4);
      t3(a3) && i3.push(a3), this._updateSublayerCaches(e4);
    });
  }
  _addSublayer(e3) {
    const i3 = this._createSublayer(e3);
    return i3.geometryType ? this.layers.push(i3) : this.tables.push(i3), i3;
  }
  _createSublayer(e3) {
    return new Ie({ objectType: e3, parentCompositeLayer: this, graphType: e3.type });
  }
  _updateSublayers(e3, i3) {
    i3.forEach((i4) => {
      i4.parentCompositeLayer = this;
      const t3 = e3.find((e4) => e4.type === i4.graphType && e4.name === i4.graphTypeName);
      t3 && (i4.objectType = t3, this._updateSublayerCaches(t3));
    });
  }
  _updateSublayerCaches({ name: e3 }) {
    if (!e3) return;
    const i3 = this.dataManager.sublayerCaches;
    i3.has(e3) || i3.set(e3, /* @__PURE__ */ new Map());
  }
  _saveUrlAsNewResource(e3, i3, t3, a3) {
    e3[i3] = "<pending>", t3.pendingOperations.push(O(this.inclusionModeDefinition).then((s2) => {
      const o2 = K(a3);
      e3[i3] = o2.itemRelativeUrl, t3.toAdd.push({ resource: o2, content: { type: "blob", blob: s2 }, compress: false, finish: (e4) => {
        this.definitionSetMap = e4.url;
      } });
    }));
  }
  _displaysAllRecords(e3) {
    for (const [, { useAllData: i3 }] of e3.namedTypeDefinitions) if (!i3) return false;
    return true;
  }
  _handleSublayersChange(e3, i3) {
    i3 && (i3.forEach((e4) => {
      e4.parent = null;
    }), this.removeHandles("sublayers-owner")), e3 && (e3.forEach((e4) => {
      e4.parent = this;
    }), this.addHandles([e3.on("after-add", ({ item: e4 }) => {
      e4.parent = this;
    }), e3.on("after-remove", ({ item: e4 }) => {
      e4.parent = null;
    })], "sublayers-owner"));
  }
  _layersLoadedFromAuthoritativeItem() {
    const e3 = this.originIdOf("layers");
    return e3 >= e.PORTAL_ITEM && e3 < e.USER;
  }
  readDefinitionSetMap(e3, i3, t3) {
    return p(e3, t3);
  }
  writeDefinitionSetMap(e3, i3, t3, a3) {
    const s2 = a3?.portalItem, o2 = a3?.resources, r3 = n(a3?.origin);
    if (!s2 || !o2 || null == r3) return void (e3 && (i3[t3] = m2(e3, a3)));
    const { inclusionModeDefinition: n3 } = this;
    if (!n3 || this._displaysAllRecords(n3)) return void (this.definitionSetMap = null);
    const l3 = this.originIdOf("inclusionModeDefinition");
    if (l3 === e.USER || this._namedTypesModified || r3 < l3) this._saveUrlAsNewResource(i3, t3, o2, s2);
    else if (r3 === l3 && e3) {
      const r4 = m2(e3, a3);
      Y(r4) ? this._saveUrlAsNewResource(i3, t3, o2, s2) : i3[t3] = r4;
    }
  }
  set inclusionModeDefinition(e3) {
    "loaded" !== this.loadStatus && "failed" !== this.loadStatus ? this._set("inclusionModeDefinition", e3) : i.getLogger(this).error("#inclusionModeDefinition", "inclusionModeDefinition cannot be changed after the layer is loaded.");
  }
  loadLayerAssumingLocalCache() {
    const e3 = [...this.memberEntityTypes, ...this.memberRelationshipTypes];
    this.layers.length || this.originIdOf("tables") === e.DEFAULTS ? this.originIdOf("layers") === e.DEFAULTS ? this._createSublayers(e3, this.layers, (e4) => !!e4.geometryType) : this._updateSublayers(e3, this.layers) : this.layers = new V2(), this.tables.length || this.originIdOf("layers") === e.DEFAULTS ? this.originIdOf("tables") === e.DEFAULTS ? this._createSublayers(e3, this.tables, (e4) => !e4.geometryType) : this._updateSublayers(e3, this.tables) : this.tables = new V2(), this.dataManager.inclusionModeDefinition?.namedTypeDefinitions?.forEach((e4, i3) => {
      const t3 = u(this.sublayerIdsCache, i3, () => /* @__PURE__ */ new Set());
      e4.members?.forEach((e5) => {
        t3.add(e5.id);
      });
    });
  }
  async addRecords(e3) {
    await this.load(), await this._handleNewRecords(e3);
  }
  async createSublayerForNamedType(e3) {
    await this.load();
    const i3 = this._graphTypeLookup.get(e3);
    if (!i3) throw new s("knowledge-graph:missing-type", "The specified type does not exist in the layer's graph data model.");
    if (this.dataManager.sublayerCaches.has(e3)) throw new s("knowledge-graph:duplicate-type", "The specified type already exists as a sublayer.");
    this.dataManager.sublayerCaches.set(e3, /* @__PURE__ */ new Map()), u(this.sublayerIdsCache, e3, () => /* @__PURE__ */ new Set());
    const t3 = this._addSublayer(i3);
    return "entity" === i3.type ? this.dataManager.entityTypeNames.add(e3) : this.dataManager.relationshipTypeNames.add(e3), this.dataManager.inclusionModeDefinition && this.dataManager.inclusionModeDefinition.namedTypeDefinitions.set(e3, { useAllData: true }), await i2(this, [e3]), this._refreshNamedTypes(), t3;
  }
  convertSublayerToDynamicData(e3) {
    if (!this.dataManager.inclusionModeDefinition) throw new s("knowledge-graph:fully-dynamic-membership", "This Knowledge Graph Layer already uses fully dynamic membership, individual sublayers cannot be converted");
    if (!this._graphTypeLookup.get(e3)) throw new s("knowledge-graph:missing-type", "The specified type does not exist in the layer's graph data model.");
    if (!this.dataManager.sublayerCaches.has(e3)) throw new s("knowledge-graph:duplicate-type", "The specified type does not exist as a sublayer.");
    const i3 = this.dataManager.inclusionModeDefinition.namedTypeDefinitions.get(e3);
    i3?.useAllData ? i.getLogger(this).warn("This Knowledge Graph Layer already uses dynamic membership for the sublayer - no conversion was made") : (this.dataManager.inclusionModeDefinition.namedTypeDefinitions.set(e3, { useAllData: true }), this.sublayerIdsCache.delete(e3), this._refreshNamedTypes());
  }
  convertSublayerToExplicitMembership(e3) {
    if (!this.dataManager.inclusionModeDefinition) throw new s("knowledge-graph:fully-dynamic-membership", "This Knowledge Graph Layer already uses fully dynamic membership, individual sublayers cannot be converted");
    if (!this._graphTypeLookup.get(e3)) throw new s("knowledge-graph:missing-type", "The specified type does not exist in the layer's graph data model.");
    const i3 = this.dataManager.inclusionModeDefinition.namedTypeDefinitions.get(e3);
    if (!i3 || i3.useAllData) {
      if (!this.dataManager.sublayerCaches.has(e3)) throw new s("knowledge-graph:duplicate-type", "The specified type does not exist as a sublayer.");
      this.sublayerIdsCache.set(e3, /* @__PURE__ */ new Set()), this.dataManager.inclusionModeDefinition.namedTypeDefinitions.set(e3, { useAllData: false, members: /* @__PURE__ */ new Map() }), this._refreshNamedTypes();
    } else i.getLogger(this).warn("This Knowledge Graph Layer already uses explicit membership for the sublayer - no conversion was made");
  }
  convertToFullyDynamicData() {
    this.dataManager.inclusionModeDefinition || i.getLogger(this).warn("This Knowledge Graph Layer already uses fully dynamic membership - no conversion was made"), this.sublayerIdsCache.clear(), this.dataManager.inclusionModeDefinition = null, this._refreshNamedTypes();
  }
  convertToExplicitMembership() {
    this.dataManager.inclusionModeDefinition && this.dataManager.inclusionModeDefinition.namedTypeDefinitions.size > 0 && i.getLogger(this).warn("This Knowledge Graph Layer already uses explicit membership - no conversion was made"), this.dataManager.inclusionModeDefinition = { generateAllSublayers: false, namedTypeDefinitions: /* @__PURE__ */ new Map() };
    for (const e3 of this.dataManager.sublayerCaches.keys()) u(this.sublayerIdsCache, e3, () => /* @__PURE__ */ new Set()), this.dataManager.inclusionModeDefinition.namedTypeDefinitions.set(e3, { useAllData: false, members: /* @__PURE__ */ new Map() });
    this._refreshNamedTypes();
  }
  async removeRecords(e3) {
    await this.load();
    const i3 = [];
    for (const t3 of e3) false === this.dataManager.inclusionModeDefinition?.namedTypeDefinitions?.get(t3.typeName)?.useAllData && this.dataManager.inclusionModeDefinition?.namedTypeDefinitions?.get(t3.typeName)?.members?.has(t3.id) && i3.push(t3);
    this.dataManager.removeFromLayer(i3);
    for (const t3 of i3) this.sublayerIdsCache.get(t3.typeName)?.delete(t3.id);
    return this._refreshNamedTypes(), i3;
  }
};
r([m()], R.prototype, "dataManager", void 0), r([m({ json: { write: { ignoreOrigin: true, writerEnsuresNonNull: true } } })], R.prototype, "definitionSetMap", void 0), r([o("definitionSetMap")], R.prototype, "readDefinitionSetMap", null), r([r2("definitionSetMap")], R.prototype, "writeDefinitionSetMap", null), r([m()], R.prototype, "inclusionModeDefinition", null), r([m()], R.prototype, "knowledgeGraph", void 0), r([m({ type: V2.ofType(Ie), json: { write: { ignoreOrigin: true } } })], R.prototype, "layers", void 0), r([m()], R.prototype, "memberEntityTypes", void 0), r([m()], R.prototype, "memberRelationshipTypes", void 0), r([m({ type: ["KnowledgeGraphLayer"] })], R.prototype, "operationalLayerType", void 0), r([m()], R.prototype, "sublayerIdsCache", void 0), r([m({ type: V2.ofType(Ie), json: { write: { ignoreOrigin: true } } })], R.prototype, "tables", void 0), r([m({ json: { read: false } })], R.prototype, "type", void 0), r([m(y)], R.prototype, "url", void 0), R = r([a("esri.layers.KnowledgeGraphLayer")], R);
var U2 = R;
async function O(e3) {
  const i3 = await h2(e3);
  return new Blob([i3], { type: "application/x-protobuf" });
}
function K(e3) {
  const i3 = `definitionSetMap-${n2()}.dat`, t3 = V("knowledgeGraphLayer", i3);
  return e3.resourceFromPath(t3);
}
export {
  U2 as default
};
//# sourceMappingURL=KnowledgeGraphLayer-P3TOIFBP.js.map
