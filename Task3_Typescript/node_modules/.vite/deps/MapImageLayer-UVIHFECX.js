import {
  ae,
  f as f2,
  m as m2
} from "./chunk-7DTNCUVI.js";
import "./chunk-ULQQXQG7.js";
import "./chunk-5HHZADOU.js";
import "./chunk-DKS7UUDR.js";
import "./chunk-F2RPYCFO.js";
import "./chunk-YB2E6SEN.js";
import "./chunk-KH55BE33.js";
import "./chunk-WEBPKGFM.js";
import "./chunk-6DARBDBU.js";
import "./chunk-KDQWOWXR.js";
import "./chunk-JOVQBCRD.js";
import "./chunk-ZAIOYQ5Z.js";
import {
  t as t3
} from "./chunk-TRH7YR3L.js";
import {
  y as y2
} from "./chunk-PQMTCR4X.js";
import "./chunk-VM7TVSSO.js";
import {
  e as e3
} from "./chunk-MXSL6LZA.js";
import "./chunk-VNLFNBKT.js";
import "./chunk-KHEIHGIK.js";
import "./chunk-X3UT6DT7.js";
import "./chunk-JD3UVEVP.js";
import "./chunk-RNXMAHSA.js";
import "./chunk-VD4HSDHE.js";
import "./chunk-WBSGKMRV.js";
import "./chunk-SBFMUXL3.js";
import {
  i
} from "./chunk-PZV6BOD6.js";
import {
  t as t4
} from "./chunk-DD7VYTDF.js";
import {
  l
} from "./chunk-H7SHPX7W.js";
import "./chunk-3IU6SQCC.js";
import "./chunk-E7YVYF37.js";
import "./chunk-E76L26GR.js";
import "./chunk-GG4VLKUY.js";
import "./chunk-IL45XPTT.js";
import {
  c as c3
} from "./chunk-6MFKAT6L.js";
import "./chunk-NOWX6W7R.js";
import "./chunk-OQ76WPLD.js";
import {
  e as e2
} from "./chunk-KSVHYEPS.js";
import "./chunk-UTU6N7VJ.js";
import "./chunk-RV3SBM2C.js";
import "./chunk-4GXVCEW4.js";
import "./chunk-KQINCOQL.js";
import "./chunk-B6C7UPBZ.js";
import {
  f
} from "./chunk-IUQBXXYO.js";
import "./chunk-7WKBQS4R.js";
import "./chunk-Z6OMEWWC.js";
import {
  A
} from "./chunk-MULCOUFY.js";
import {
  j
} from "./chunk-VGIEH4HM.js";
import {
  p
} from "./chunk-XLF2NMGX.js";
import {
  t as t2
} from "./chunk-X5GD6LFD.js";
import {
  b2,
  y
} from "./chunk-G4PMFSAZ.js";
import "./chunk-MX5VW6PC.js";
import {
  c as c2
} from "./chunk-JJNHUYXK.js";
import "./chunk-UG6RJXJ2.js";
import {
  S
} from "./chunk-OTCYHWWG.js";
import "./chunk-UGXCZZ7N.js";
import {
  i as i2
} from "./chunk-J7LSFQNH.js";
import "./chunk-AGDHKBKD.js";
import "./chunk-OC2XWDW2.js";
import "./chunk-C3JHRSMA.js";
import "./chunk-M2UZRY7C.js";
import "./chunk-HUVZEBBO.js";
import "./chunk-VLPG2W66.js";
import "./chunk-GH7GZNY6.js";
import "./chunk-G5DA3EEG.js";
import "./chunk-D443BZKU.js";
import "./chunk-7DFHXN7Z.js";
import "./chunk-NX54JGTL.js";
import "./chunk-I6IIPG56.js";
import "./chunk-JEYXDNAT.js";
import "./chunk-DJJNSAUR.js";
import "./chunk-PZBXBPVO.js";
import "./chunk-TMC6HYGQ.js";
import "./chunk-7FAVUXK2.js";
import "./chunk-IVNFIIVI.js";
import "./chunk-T4QXFCFF.js";
import "./chunk-BFUOEOXA.js";
import "./chunk-NOGWEW4X.js";
import "./chunk-ZCZERMS4.js";
import "./chunk-7CUBIFKN.js";
import "./chunk-GPMIOMDJ.js";
import "./chunk-RGFH75DR.js";
import "./chunk-FEGY3M6U.js";
import "./chunk-RWRC6JKB.js";
import "./chunk-M6AESODI.js";
import "./chunk-NY6S6EMV.js";
import "./chunk-AQGMTI4V.js";
import "./chunk-QG7JWSBW.js";
import "./chunk-7ZMGKXLG.js";
import "./chunk-JMXPE5PE.js";
import "./chunk-LL73CCBG.js";
import "./chunk-6TS2ZJL4.js";
import "./chunk-IBGTNH54.js";
import "./chunk-ROVRMLYN.js";
import "./chunk-SYPTUUSZ.js";
import "./chunk-4OESBQFK.js";
import {
  h
} from "./chunk-L7EN54WK.js";
import {
  u
} from "./chunk-6QTMK7BB.js";
import {
  t
} from "./chunk-5SRIFOTG.js";
import "./chunk-7NMH5MM5.js";
import "./chunk-TCIXF7MM.js";
import "./chunk-UGTICYU7.js";
import "./chunk-3MHRDLQO.js";
import "./chunk-F4KXGA4J.js";
import "./chunk-KHRHKYU2.js";
import "./chunk-2IMSGFJN.js";
import "./chunk-VHTQ5H2C.js";
import "./chunk-YX2VTIZR.js";
import "./chunk-LYSDGL5S.js";
import "./chunk-SRJX4QLW.js";
import "./chunk-WPTJIN2M.js";
import "./chunk-KUP5BM5G.js";
import "./chunk-HNQNVI5C.js";
import "./chunk-G34OBNLT.js";
import "./chunk-WJUYGRZY.js";
import "./chunk-FKFXOPPT.js";
import "./chunk-KE3WBZYL.js";
import "./chunk-EOMIFMDH.js";
import "./chunk-QFU5COFB.js";
import "./chunk-45ILJ6ZH.js";
import "./chunk-VCRP2PLV.js";
import "./chunk-BDLVUYG2.js";
import "./chunk-6QA2BVC5.js";
import "./chunk-HWKQJUGY.js";
import "./chunk-XDCUZFJX.js";
import "./chunk-DNZK6PPI.js";
import "./chunk-7BWCD63N.js";
import "./chunk-65K4DQAH.js";
import "./chunk-MUKDJQWB.js";
import "./chunk-6KFXWKZZ.js";
import "./chunk-HPGYEHVI.js";
import "./chunk-YBJ5GVXQ.js";
import "./chunk-X3R5OB6L.js";
import "./chunk-RACDQ3AL.js";
import "./chunk-TEXTBDH7.js";
import "./chunk-N3A2BVTW.js";
import "./chunk-IGYEHOTB.js";
import "./chunk-TVM3SZJR.js";
import "./chunk-52HWRRRQ.js";
import "./chunk-VNTEV3V4.js";
import "./chunk-OGOQOMMV.js";
import "./chunk-7Z3AF3B2.js";
import "./chunk-6GWORUT3.js";
import "./chunk-HCYE6OE4.js";
import "./chunk-KJSBBQ22.js";
import {
  a as a3
} from "./chunk-LMEOPAGQ.js";
import "./chunk-YIV2QKTZ.js";
import "./chunk-A3VAC24F.js";
import "./chunk-FPSA4NFH.js";
import "./chunk-UY6B6IVT.js";
import "./chunk-6PV45IYU.js";
import "./chunk-SRQCQD63.js";
import "./chunk-FIRNXFAH.js";
import {
  z
} from "./chunk-O5TPFXRT.js";
import "./chunk-Q6XRAGMA.js";
import {
  o
} from "./chunk-JUAPMINU.js";
import "./chunk-PK2ZR2SJ.js";
import {
  r as r2
} from "./chunk-YFPGM5UE.js";
import {
  c
} from "./chunk-OXSERRAR.js";
import "./chunk-7HI4VRVW.js";
import "./chunk-ZX46THLM.js";
import "./chunk-Y2ZIOB7Y.js";
import "./chunk-KTUX3OKX.js";
import "./chunk-E3KEUGUG.js";
import {
  e,
  m,
  n2 as n
} from "./chunk-N3XLUQJI.js";
import {
  a2 as a
} from "./chunk-JUAD7TJ6.js";
import {
  x
} from "./chunk-VHLUKPRH.js";
import {
  r
} from "./chunk-5TPMG26T.js";
import "./chunk-3NBBZ43U.js";
import "./chunk-VOLWOTEG.js";
import "./chunk-XTNIDRTB.js";
import "./chunk-FGWIXJQY.js";
import "./chunk-TKYAZCMB.js";
import "./chunk-3TBMFSPB.js";
import "./chunk-PSZLDJJA.js";
import {
  H
} from "./chunk-ZWFY3WY5.js";
import "./chunk-LQFTAGIV.js";
import "./chunk-S7IJH524.js";
import {
  a as a2,
  b,
  k
} from "./chunk-GZ2P4SCJ.js";
import {
  s
} from "./chunk-XWG6QGFK.js";
import "./chunk-GWNLQRNM.js";
import "./chunk-FXKORAMT.js";
import "./chunk-GNMFMITH.js";

// node_modules/@arcgis/core/layers/MapImageLayer.js
var k2 = class extends p(c3(t2(m2(f2(l(b2(j(S(f(i(e2(h)))))))))))) {
  constructor(...e4) {
    super(...e4), this._exportImageParameters = new y2({ layer: this }), this.dateFieldsTimeZone = null, this.datesInUnknownTimezone = false, this.dpi = 96, this.elevationInfo = new c2({ mode: "on-the-ground" }), this.gdbVersion = null, this.imageFormat = "png24", this.imageMaxHeight = 2048, this.imageMaxWidth = 2048, this.imageTransparency = true, this.isReference = null, this.labelsVisible = false, this.operationalLayerType = "ArcGISMapServiceLayer", this.preferredTimeZone = null, this.sourceJSON = null, this.sublayers = null, this.type = "map-image", this.url = null, this._debouncedSaveOperations = k(async (e5, r3, t5) => {
      const { save: s2, saveAs: i3 } = await import("./mapImageLayerUtils-VUKZGGWD.js");
      switch (e5) {
        case A.SAVE:
          return s2(this, r3);
        case A.SAVE_AS:
          return i3(this, t5, r3);
      }
    });
  }
  normalizeCtorArgs(e4, r3) {
    return "string" == typeof e4 ? { url: e4, ...r3 } : e4;
  }
  load(e4) {
    const r3 = null != e4 ? e4.signal : null;
    return this.addResolvingPromise(this.loadFromPortal({ supportedTypes: ["Map Service"] }, e4).catch(a2).then(() => this._fetchService(r3))), Promise.resolve(this);
  }
  destroy() {
    this._exportImageParameters.destroy();
  }
  readImageFormat(e4, r3) {
    const t5 = r3.supportedImageFormatTypes;
    return t5 && t5.includes("PNG32") ? "png32" : "png24";
  }
  writeSublayers(e4, r3, t5, s2) {
    if (!this.loaded || !e4) return;
    const i3 = e4.slice().reverse().flatten(({ sublayers: e5 }) => e5 && e5.toArray().reverse()).toArray();
    let o2 = false;
    const a4 = n(s2.origin);
    let n2;
    if (this.capabilities?.operations.supportsExportMap && this.capabilities?.exportMap?.supportsDynamicLayers) {
      if (a4 === e.PORTAL_ITEM) {
        const e5 = this.createSublayersForOrigin("service").sublayers;
        o2 = e3(i3, e5, e.SERVICE);
      } else if (a4 > e.PORTAL_ITEM) {
        const e5 = this.createSublayersForOrigin("portal-item");
        o2 = e3(i3, e5.sublayers, n(e5.origin)), n2 = e5.originWithPartialOverrides;
      }
    }
    const p2 = [], m3 = { writeSublayerStructure: o2, ...s2, minimumWritableOrigin: n2 };
    let l2 = o2 || this.hasVisibleLayersForOrigin(a4);
    i3.forEach((e5) => {
      const r4 = e5.write({}, m3);
      p2.push(r4), l2 = l2 || "user" === e5.originOf("visible");
    });
    p2.some((e5) => Object.keys(e5).length > 1) && (r3.layers = p2), l2 && (r3.visibleLayers = i3.filter((e5) => e5.visible).map((e5) => e5.id));
  }
  createExportImageParameters(e4, r3, t5, s2) {
    const i3 = s2?.pixelRatio || 1;
    e4 && this.version >= 10 && (e4 = e4.clone().shiftCentralMeridian()), this._exportImageParameters.floors = s2?.floors ?? null, this._exportImageParameters.scale = i2({ extent: e4, width: r3 }) * i3;
    const o2 = this._exportImageParameters.toJSON(), a4 = !s2?.rotation || this.version < 10.3 ? {} : { rotation: -s2.rotation }, n2 = e4?.spatialReference, p2 = c(n2);
    o2.dpi *= i3;
    const m3 = {};
    if (s2?.timeExtent) {
      const { start: e5, end: r4 } = s2.timeExtent.toJSON();
      m3.time = e5 && r4 && e5 === r4 ? "" + e5 : `${e5 ?? "null"},${r4 ?? "null"}`;
    } else this.timeInfo && !this.timeInfo.hasLiveData && (m3.time = "null,null");
    return { bbox: e4 ? e4.xmin + "," + e4.ymin + "," + e4.xmax + "," + e4.ymax : void 0, bboxSR: p2, imageSR: p2, size: r3 + "," + t5, ...o2, ...a4, ...m3 };
  }
  async fetchImage(e4, r3, t5, s2) {
    const { data: i3 } = await this._fetchImage("image", e4, r3, t5, s2);
    return i3;
  }
  async fetchImageBitmap(e4, r3, t5, s2) {
    const { data: i3, url: o2 } = await this._fetchImage("blob", e4, r3, t5, s2);
    return t3(i3, o2, s2?.signal);
  }
  async fetchRecomputedExtents(e4 = {}) {
    const t5 = { ...e4, query: { returnUpdates: true, f: "json", ...this.customParameters, token: this.apiKey } }, { data: s2 } = await H(this.url, t5), { extent: i3, fullExtent: o2, timeExtent: a4 } = s2, n2 = i3 || o2;
    return { fullExtent: n2 && z.fromJSON(n2), timeExtent: a4 && u.fromJSON({ start: a4[0], end: a4[1] }) };
  }
  loadAll() {
    return t(this, (e4) => {
      e4(this.allSublayers), e4(this.subtables);
    });
  }
  async save(e4) {
    return this._debouncedSaveOperations(A.SAVE, e4);
  }
  async saveAs(e4, r3) {
    return this._debouncedSaveOperations(A.SAVE_AS, r3, e4);
  }
  serviceSupportsSpatialReference(e4) {
    return t4(this, e4);
  }
  async _fetchImage(e4, s2, i3, o2, a4) {
    const p2 = { responseType: e4, signal: a4?.signal ?? null, query: { ...this.parsedUrl.query, ...this.createExportImageParameters(s2, i3, o2, a4), f: "image", ...this.refreshParameters, ...this.customParameters, token: this.apiKey } }, m3 = this.parsedUrl.path + "/export";
    if (null != p2.query?.dynamicLayers && !this.capabilities?.exportMap?.supportsDynamicLayers) throw new s("mapimagelayer:dynamiclayer-not-supported", `service ${this.url} doesn't support dynamic layers, which is required to be able to change the sublayer's order, rendering, labeling or source.`, { query: p2.query });
    try {
      const { data: e5 } = await H(m3, p2);
      return { data: e5, url: m3 };
    } catch (l2) {
      if (b(l2)) throw l2;
      throw new s("mapimagelayer:image-fetch-error", `Unable to load image: ${m3}`, { error: l2 });
    }
  }
  async _fetchService(e4) {
    if (this.sourceJSON) return void this.read(this.sourceJSON, { origin: "service", url: this.parsedUrl });
    const { data: t5, ssl: s2 } = await H(this.parsedUrl.path, { query: { f: "json", ...this.parsedUrl.query, ...this.customParameters, token: this.apiKey }, signal: e4 });
    s2 && (this.url = this.url.replace(/^http:/i, "https:")), this.sourceJSON = t5, this.read(t5, { origin: "service", url: this.parsedUrl });
  }
  hasVisibleLayersForOrigin(e4) {
    return !(null == e4 || !this.sublayersSourceJSON[e4]?.visibleLayers);
  }
};
r([m(a3("dateFieldsTimeReference"))], k2.prototype, "dateFieldsTimeZone", void 0), r([m({ type: Boolean })], k2.prototype, "datesInUnknownTimezone", void 0), r([m()], k2.prototype, "dpi", void 0), r([m()], k2.prototype, "elevationInfo", void 0), r([m()], k2.prototype, "gdbVersion", void 0), r([m()], k2.prototype, "imageFormat", void 0), r([o("imageFormat", ["supportedImageFormatTypes"])], k2.prototype, "readImageFormat", null), r([m({ json: { origins: { service: { read: { source: "maxImageHeight" } } } } })], k2.prototype, "imageMaxHeight", void 0), r([m({ json: { origins: { service: { read: { source: "maxImageWidth" } } } } })], k2.prototype, "imageMaxWidth", void 0), r([m()], k2.prototype, "imageTransparency", void 0), r([m({ type: Boolean, json: { read: false, write: { enabled: true, overridePolicy: () => ({ enabled: false }) } } })], k2.prototype, "isReference", void 0), r([m({ json: { read: false, write: false } })], k2.prototype, "labelsVisible", void 0), r([m({ type: ["ArcGISMapServiceLayer"] })], k2.prototype, "operationalLayerType", void 0), r([m({ json: { read: false, write: false } })], k2.prototype, "popupEnabled", void 0), r([m(a3("preferredTimeReference"))], k2.prototype, "preferredTimeZone", void 0), r([m()], k2.prototype, "sourceJSON", void 0), r([m({ json: { write: { ignoreOrigin: true } } })], k2.prototype, "sublayers", void 0), r([r2("sublayers", { layers: { type: [ae] }, visibleLayers: { type: [x] } })], k2.prototype, "writeSublayers", null), r([m({ type: ["show", "hide", "hide-children"], json: { origins: { "portal-item": { read: false, write: false } } } })], k2.prototype, "listMode", void 0), r([m({ json: { read: false }, readOnly: true, value: "map-image" })], k2.prototype, "type", void 0), r([m(y)], k2.prototype, "url", void 0), k2 = r([a("esri.layers.MapImageLayer")], k2);
var G = k2;
export {
  G as default
};
//# sourceMappingURL=MapImageLayer-UVIHFECX.js.map
