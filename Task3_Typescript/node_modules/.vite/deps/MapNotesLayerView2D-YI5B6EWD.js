import {
  S
} from "./chunk-YR4BEFGH.js";
import {
  u
} from "./chunk-EEB2RHCK.js";
import {
  t
} from "./chunk-ASO56N3T.js";
import "./chunk-KYHAK7RN.js";
import {
  O
} from "./chunk-4PAILKIT.js";
import "./chunk-QYCJPZF2.js";
import "./chunk-G3V62EXP.js";
import "./chunk-MGE3DVJJ.js";
import "./chunk-A4YQJHJZ.js";
import "./chunk-JSDQVIZI.js";
import "./chunk-GEY3MNEN.js";
import "./chunk-QARUBZM2.js";
import "./chunk-YEQJ7SMN.js";
import "./chunk-F6HYAIOQ.js";
import "./chunk-733XT7D4.js";
import "./chunk-O3AUTEBE.js";
import "./chunk-TUPNUSND.js";
import "./chunk-VZRBHAHT.js";
import "./chunk-73JRZP7E.js";
import "./chunk-I7SMTGBD.js";
import "./chunk-TAPCW5Z5.js";
import "./chunk-JOUWZB2W.js";
import "./chunk-ZQPAEH56.js";
import "./chunk-SEPZOYEZ.js";
import "./chunk-L5FOMWCW.js";
import "./chunk-CF5GNPLI.js";
import "./chunk-5WTH3GBK.js";
import "./chunk-N6WKHIKW.js";
import "./chunk-LHJOMFWG.js";
import "./chunk-A4KKV2O6.js";
import "./chunk-IAKXH7PU.js";
import "./chunk-DRLVYVHZ.js";
import "./chunk-DKS7UUDR.js";
import "./chunk-KDQWOWXR.js";
import "./chunk-JOVQBCRD.js";
import "./chunk-2B6XECE5.js";
import "./chunk-GYAK76KG.js";
import "./chunk-QB5ST4HW.js";
import "./chunk-CCHJ3WNU.js";
import "./chunk-RD652CDC.js";
import "./chunk-KB5I2WHB.js";
import "./chunk-P3YYANTX.js";
import "./chunk-WKCCXG3E.js";
import "./chunk-ZWJOMK2U.js";
import "./chunk-Y2ZAHGIO.js";
import "./chunk-ZCE5HP23.js";
import "./chunk-Y2QTREQA.js";
import "./chunk-OV7XVIQP.js";
import "./chunk-JQSXFLSD.js";
import "./chunk-H5K53FMS.js";
import "./chunk-VNLFNBKT.js";
import "./chunk-KHEIHGIK.js";
import "./chunk-XGWAEOLO.js";
import "./chunk-76QJRCNC.js";
import "./chunk-YL4WUSSA.js";
import "./chunk-AAC6XSCN.js";
import "./chunk-GKCEBA6Q.js";
import "./chunk-VWMPQK5V.js";
import "./chunk-IGBV77N3.js";
import "./chunk-5Y3EUPZN.js";
import "./chunk-2W7OT7Z4.js";
import "./chunk-3PPDORWL.js";
import "./chunk-YIXK32VF.js";
import "./chunk-CHTPXQAG.js";
import "./chunk-2NTKYBCL.js";
import "./chunk-4ADC6HZF.js";
import "./chunk-H6F6O2KE.js";
import "./chunk-AF3FX2UV.js";
import "./chunk-DRAQJS2F.js";
import "./chunk-BZYXFNL4.js";
import "./chunk-VNTS5E5O.js";
import "./chunk-TMFB3DKM.js";
import "./chunk-X3UT6DT7.js";
import "./chunk-JD3UVEVP.js";
import "./chunk-NO2XQDLB.js";
import "./chunk-LBC3MAJX.js";
import "./chunk-NMP7ZOVG.js";
import "./chunk-YHYQP7QX.js";
import "./chunk-RP7FUW55.js";
import "./chunk-MPV4X4LZ.js";
import "./chunk-TNW4TPNP.js";
import "./chunk-IL45XPTT.js";
import "./chunk-G5DA3EEG.js";
import "./chunk-I6IIPG56.js";
import "./chunk-JEYXDNAT.js";
import "./chunk-DJJNSAUR.js";
import "./chunk-PZBXBPVO.js";
import "./chunk-TMC6HYGQ.js";
import "./chunk-7FAVUXK2.js";
import "./chunk-IVNFIIVI.js";
import "./chunk-NOGWEW4X.js";
import "./chunk-ZCZERMS4.js";
import "./chunk-RGFH75DR.js";
import "./chunk-FEGY3M6U.js";
import "./chunk-NY6S6EMV.js";
import "./chunk-AQGMTI4V.js";
import "./chunk-QG7JWSBW.js";
import "./chunk-7ZMGKXLG.js";
import "./chunk-JMXPE5PE.js";
import "./chunk-LL73CCBG.js";
import "./chunk-6TS2ZJL4.js";
import "./chunk-IBGTNH54.js";
import "./chunk-ROVRMLYN.js";
import "./chunk-SYPTUUSZ.js";
import "./chunk-6QTMK7BB.js";
import "./chunk-BNO7HCVD.js";
import "./chunk-7NMH5MM5.js";
import "./chunk-TCIXF7MM.js";
import "./chunk-UGTICYU7.js";
import "./chunk-3MHRDLQO.js";
import {
  d
} from "./chunk-2IMSGFJN.js";
import "./chunk-VHTQ5H2C.js";
import "./chunk-YX2VTIZR.js";
import "./chunk-LYSDGL5S.js";
import "./chunk-SRJX4QLW.js";
import "./chunk-WPTJIN2M.js";
import "./chunk-KUP5BM5G.js";
import "./chunk-HNQNVI5C.js";
import "./chunk-G34OBNLT.js";
import "./chunk-WJUYGRZY.js";
import "./chunk-FKFXOPPT.js";
import "./chunk-KE3WBZYL.js";
import "./chunk-EOMIFMDH.js";
import "./chunk-QFU5COFB.js";
import "./chunk-45ILJ6ZH.js";
import "./chunk-VCRP2PLV.js";
import "./chunk-BDLVUYG2.js";
import "./chunk-6QA2BVC5.js";
import "./chunk-HWKQJUGY.js";
import "./chunk-XDCUZFJX.js";
import "./chunk-DNZK6PPI.js";
import "./chunk-7BWCD63N.js";
import "./chunk-65K4DQAH.js";
import "./chunk-MUKDJQWB.js";
import "./chunk-6KFXWKZZ.js";
import {
  V
} from "./chunk-X3R5OB6L.js";
import "./chunk-RACDQ3AL.js";
import "./chunk-TEXTBDH7.js";
import "./chunk-N3A2BVTW.js";
import "./chunk-IGYEHOTB.js";
import "./chunk-TVM3SZJR.js";
import "./chunk-52HWRRRQ.js";
import "./chunk-VNTEV3V4.js";
import "./chunk-OGOQOMMV.js";
import "./chunk-7Z3AF3B2.js";
import "./chunk-6GWORUT3.js";
import "./chunk-CMHHL5UO.js";
import "./chunk-KJSBBQ22.js";
import "./chunk-LMEOPAGQ.js";
import "./chunk-YIV2QKTZ.js";
import {
  a as a2,
  h,
  l
} from "./chunk-A3VAC24F.js";
import "./chunk-FPSA4NFH.js";
import "./chunk-UY6B6IVT.js";
import "./chunk-6PV45IYU.js";
import "./chunk-SRQCQD63.js";
import "./chunk-FIRNXFAH.js";
import "./chunk-O5TPFXRT.js";
import "./chunk-Q6XRAGMA.js";
import "./chunk-JUAPMINU.js";
import "./chunk-PK2ZR2SJ.js";
import "./chunk-YFPGM5UE.js";
import "./chunk-OXSERRAR.js";
import "./chunk-7HI4VRVW.js";
import "./chunk-ZX46THLM.js";
import "./chunk-Y2ZIOB7Y.js";
import "./chunk-KTUX3OKX.js";
import "./chunk-E3KEUGUG.js";
import "./chunk-N3XLUQJI.js";
import {
  a2 as a
} from "./chunk-JUAD7TJ6.js";
import "./chunk-VHLUKPRH.js";
import {
  r
} from "./chunk-5TPMG26T.js";
import "./chunk-3NBBZ43U.js";
import "./chunk-VOLWOTEG.js";
import "./chunk-XTNIDRTB.js";
import "./chunk-FGWIXJQY.js";
import "./chunk-TKYAZCMB.js";
import "./chunk-3TBMFSPB.js";
import "./chunk-PSZLDJJA.js";
import "./chunk-ZWFY3WY5.js";
import "./chunk-LQFTAGIV.js";
import "./chunk-S7IJH524.js";
import {
  e
} from "./chunk-GZ2P4SCJ.js";
import "./chunk-XWG6QGFK.js";
import "./chunk-GWNLQRNM.js";
import {
  L
} from "./chunk-FXKORAMT.js";
import "./chunk-GNMFMITH.js";

// node_modules/@arcgis/core/views/2d/layers/MapNotesLayerView2D.js
var d2 = "sublayers";
var u2 = "layerView";
var f = /* @__PURE__ */ new Set(["default"]);
var m = class extends S(u) {
  constructor() {
    super(...arguments), this._highlightIds = /* @__PURE__ */ new Map();
  }
  *graphicsViews() {
    null == this._graphicsViewsFeatureCollectionMap ? null == this._graphicsViews ? yield* [] : yield* this._graphicsViews : yield* this._graphicsViewsFeatureCollectionMap.keys();
  }
  async hitTest(i, e2) {
    return Array.from(this.graphicsViews(), (e3) => {
      const s = e3.hitTest(i);
      if (null != this._graphicsViewsFeatureCollectionMap) {
        const i2 = this._graphicsViewsFeatureCollectionMap.get(e3);
        for (const e4 of s) !e4.popupTemplate && i2.popupTemplate && (e4.popupTemplate = i2.popupTemplate), e4.sourceLayer = e4.layer = this.layer;
      }
      return s;
    }).flat().map((e3) => ({ type: "graphic", graphic: e3, layer: this.layer, mapPoint: i }));
  }
  highlight(i, h2 = "default") {
    let a3;
    "number" == typeof i ? a3 = [i] : i instanceof d ? a3 = [i.uid] : Array.isArray(i) && i.length > 0 ? a3 = "number" == typeof i[0] ? i : i.map((i2) => i2 && i2.uid) : V.isCollection(i) && (a3 = i.map((i2) => i2 && i2.uid).toArray());
    const o = a3?.filter(L);
    return o?.length ? (this._addHighlight(o), e(() => this._removeHighlight(o))) : e();
  }
  update(i) {
    for (const e2 of this.graphicsViews()) e2.processUpdate(i);
  }
  attach() {
    const i = this.view, e2 = () => this.requestUpdate(), s = this.layer.featureCollections;
    if (null != s && s.length) {
      this._graphicsViewsFeatureCollectionMap = /* @__PURE__ */ new Map();
      for (const t2 of s) {
        const s2 = new t(this.view.featuresTilingScheme), r2 = new O({ view: i, graphics: t2.source, renderer: t2.renderer, requestUpdateCallback: e2, container: s2 });
        this._graphicsViewsFeatureCollectionMap.set(r2, t2), this.container.addChild(r2.container), this.addHandles([l(() => t2.visible, (i2) => r2.container.visible = i2, h), l(() => r2.updating, () => this.notifyChange("updating"), h)], u2);
      }
      this._updateHighlight();
    } else null != this.layer.sublayers && this.addHandles(a2(() => this.layer.sublayers, "change", () => this._createGraphicsViews(), { onListenerAdd: () => this._createGraphicsViews(), onListenerRemove: () => this._destroyGraphicsViews() }), d2);
  }
  detach() {
    this._destroyGraphicsViews(), this.removeHandles(d2);
  }
  moveEnd() {
  }
  viewChange() {
    for (const i of this.graphicsViews()) i.viewChange();
  }
  isUpdating() {
    for (const i of this.graphicsViews()) if (i.updating) return true;
    return false;
  }
  _destroyGraphicsViews() {
    this.container.removeAllChildren(), this.removeHandles(u2);
    for (const i of this.graphicsViews()) i.destroy();
    this._graphicsViews = null, this._graphicsViewsFeatureCollectionMap = null;
  }
  _createGraphicsViews() {
    if (this._destroyGraphicsViews(), null == this.layer.sublayers) return;
    const i = [], e2 = this.view, s = () => this.requestUpdate();
    for (const t2 of this.layer.sublayers) {
      const r2 = new t(this.view.featuresTilingScheme);
      r2.fadeTransitionEnabled = true;
      const o = new O({ view: e2, graphics: t2.graphics, requestUpdateCallback: s, container: r2 });
      this.addHandles([t2.on("graphic-update", o.graphicUpdateHandler), l(() => t2.visible, (i2) => o.container.visible = i2, h), l(() => o.updating, () => this.notifyChange("updating"), h)], u2), this.container.addChild(o.container), i.push(o);
    }
    this._graphicsViews = i, this._updateHighlight();
  }
  _addHighlight(i) {
    for (const e2 of i) if (this._highlightIds.has(e2)) {
      const i2 = this._highlightIds.get(e2);
      this._highlightIds.set(e2, i2 + 1);
    } else this._highlightIds.set(e2, 1);
    this._updateHighlight();
  }
  _removeHighlight(i) {
    for (const e2 of i) if (this._highlightIds.has(e2)) {
      const i2 = this._highlightIds.get(e2) - 1;
      0 === i2 ? this._highlightIds.delete(e2) : this._highlightIds.set(e2, i2);
    }
    this._updateHighlight();
  }
  _updateHighlight() {
    const i = Array.from(this._highlightIds.keys()), e2 = this._getHighlightBits(f.values());
    for (const s of this.graphicsViews()) s.setHighlight(i.map((i2) => ({ objectId: i2, highlightFlags: e2 })));
  }
};
m = r([a("esri.views.2d.layers.MapNotesLayerView2D")], m);
var w = m;
export {
  w as default
};
//# sourceMappingURL=MapNotesLayerView2D-YI5B6EWD.js.map
