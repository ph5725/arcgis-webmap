import {
  _
} from "./chunk-SHYE33QH.js";
import "./chunk-LTMF2W73.js";
import {
  h as h2
} from "./chunk-YIXK32VF.js";
import "./chunk-LBC3MAJX.js";
import "./chunk-BNO7HCVD.js";
import "./chunk-TEXTBDH7.js";
import {
  h
} from "./chunk-A3VAC24F.js";
import {
  b,
  m
} from "./chunk-N3XLUQJI.js";
import {
  a2 as a
} from "./chunk-JUAD7TJ6.js";
import "./chunk-VHLUKPRH.js";
import {
  r
} from "./chunk-5TPMG26T.js";
import "./chunk-XTNIDRTB.js";
import "./chunk-FGWIXJQY.js";
import "./chunk-TKYAZCMB.js";
import "./chunk-3TBMFSPB.js";
import "./chunk-PSZLDJJA.js";
import "./chunk-S7IJH524.js";
import {
  c,
  e,
  i,
  k
} from "./chunk-GZ2P4SCJ.js";
import "./chunk-XWG6QGFK.js";
import "./chunk-GWNLQRNM.js";
import "./chunk-FXKORAMT.js";
import "./chunk-GNMFMITH.js";

// node_modules/@arcgis/core/views/2d/layers/support/MediaLayerInteraction.js
var h3 = { redo: "r", undo: "z" };
var p = Symbol();
var m2 = Symbol();
var u = Symbol();
var _2 = class extends b {
  constructor(e2) {
    super(e2), this._tool = null, this._updatingHandles = new h2(), this.enabled = false, this._onPointerMove = k(async (e3) => {
      const t = await this._updatingHandles.addPromise(this._findElementAtScreenPoint(e3));
      this.destroyed || (this.removeHandles(m2), t && t !== this.selectedElement && (this.view.cursor = "pointer", this.addHandles(e(() => this.view.cursor = null), m2)));
    });
  }
  initialize() {
    this.addHandles(c(this._updatingHandles)), this._updatingHandles.add(() => this.enabled, (e2) => this._setEnabled(e2), h), this._updatingHandles.add(() => this._preferredInteractionTool, () => this._preferredInteractionToolChanged());
  }
  get _validatedSelectedElement() {
    const e2 = this.selectedElement;
    if (!e2) return null;
    const { layer: { source: t } } = this;
    return t ? "hasElement" in t ? t.hasElement(e2) ? e2 : null : t === e2 ? e2 : null : null;
  }
  get _preferredInteractionTool() {
    return this.options?.tool ?? "transform";
  }
  get updating() {
    return this._updatingHandles.updating;
  }
  _setEnabled(e2) {
    if (this.removeHandles(p), !e2) return;
    const { view: t } = this;
    this.addHandles([t.on("immediate-click", (e3) => this._onClick(e3), _.TOOL), t.on("pointer-move", (e3) => this._onPointerMove(e3).catch(() => {
    }), _.TOOL), t.on("key-down", (e3) => {
      e3.key === h3.undo && this._tool?.canUndo() && (this._tool.undo(), e3.stopPropagation()), e3.key === h3.redo && this._tool?.canRedo() && (this._tool.redo(), e3.stopPropagation());
    }), this._updatingHandles.add(() => this._validatedSelectedElement, (e3) => this._selectedElementChanged(e3), h), e(() => {
      t.cursor = null, this._removeTool();
    })], p);
  }
  async _findElementAtScreenPoint(e2) {
    const t = (await this.view.hitTest(e2, { include: [this.layer] })).results[0];
    return "media" === t?.type ? t.element : null;
  }
  async _onClick(e2) {
    await this._updatingHandles.addPromise(e2.defer(async () => {
      const t = await this._findElementAtScreenPoint(e2);
      this.destroyed || (t && e2.stopPropagation(), this.selectedElement = t, this.selectedElement && (this.view.cursor = null));
    }));
  }
  _preferredInteractionToolChanged() {
    const { _tool: e2 } = this;
    e2 && (this._preferredInteractionTool === e2.type || this._updatingHandles.addPromise(this._recreateTool()));
  }
  async _recreateTool() {
    this.removeHandles(u), this._removeTool();
    const e2 = this._validatedSelectedElement;
    if (!e2) return;
    const t = new AbortController();
    this.addHandles(i(t), u);
    const { TransformTool: s, ControlPointsTransformTool: n } = await import("./editingTools-HYAJJMTG.js");
    if (t.signal.aborted) return;
    const { view: r2 } = this;
    switch (this._preferredInteractionTool) {
      case "transform":
        this._tool = new s({ target: e2, view: r2 });
        break;
      case "reshape":
        this._tool = new n({ mediaElement: e2, view: r2 });
    }
    this.addHandles(e(() => {
      this._tool && (r2.tools.remove(this._tool), this._tool = null);
    }), this._tool), r2.addAndActivateTool(this._tool);
  }
  _removeTool() {
    this._tool && this.removeHandles(this._tool);
  }
  async _selectedElementChanged(e2) {
    e2?.georeference ? await this._updatingHandles.addPromise(this._recreateTool()) : this._removeTool();
  }
};
r([m()], _2.prototype, "_validatedSelectedElement", null), r([m()], _2.prototype, "_preferredInteractionTool", null), r([m({ constructOnly: true })], _2.prototype, "view", void 0), r([m({ constructOnly: true })], _2.prototype, "layer", void 0), r([m()], _2.prototype, "selectedElement", void 0), r([m()], _2.prototype, "enabled", void 0), r([m()], _2.prototype, "options", void 0), r([m()], _2.prototype, "updating", null), _2 = r([a("esri.views.2d.layers.support.MediaLayerInteraction")], _2);
export {
  _2 as MediaLayerInteraction
};
//# sourceMappingURL=MediaLayerInteraction-AK7AYN4C.js.map
