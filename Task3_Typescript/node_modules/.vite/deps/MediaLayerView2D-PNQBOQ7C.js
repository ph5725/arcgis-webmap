import {
  u as u4
} from "./chunk-WHJKVDY7.js";
import {
  S as S2
} from "./chunk-YR4BEFGH.js";
import {
  u as u3
} from "./chunk-EEB2RHCK.js";
import {
  c
} from "./chunk-ER6UH4AN.js";
import "./chunk-OIYN2A3E.js";
import "./chunk-ZHRX45KN.js";
import "./chunk-625W4ZH5.js";
import "./chunk-OOBS22NY.js";
import "./chunk-4PAILKIT.js";
import "./chunk-G3V62EXP.js";
import "./chunk-A4YQJHJZ.js";
import "./chunk-JSDQVIZI.js";
import "./chunk-GEY3MNEN.js";
import {
  e as e2
} from "./chunk-QARUBZM2.js";
import "./chunk-YEQJ7SMN.js";
import "./chunk-F6HYAIOQ.js";
import "./chunk-733XT7D4.js";
import "./chunk-O3AUTEBE.js";
import "./chunk-EGNOBZZN.js";
import "./chunk-3JKD2XXM.js";
import "./chunk-TUPNUSND.js";
import "./chunk-VZRBHAHT.js";
import "./chunk-73JRZP7E.js";
import "./chunk-I7SMTGBD.js";
import "./chunk-TAPCW5Z5.js";
import "./chunk-ORKTLG2L.js";
import "./chunk-JOUWZB2W.js";
import "./chunk-ZQPAEH56.js";
import "./chunk-SEPZOYEZ.js";
import "./chunk-L5FOMWCW.js";
import "./chunk-S4X4QGA7.js";
import "./chunk-CF5GNPLI.js";
import "./chunk-5WTH3GBK.js";
import {
  i as i2,
  j,
  o as o3
} from "./chunk-GO5C7BOU.js";
import "./chunk-N6WKHIKW.js";
import "./chunk-LHJOMFWG.js";
import "./chunk-56ZY2WLU.js";
import "./chunk-A4KKV2O6.js";
import "./chunk-IAKXH7PU.js";
import "./chunk-6EOJZ6DP.js";
import "./chunk-DRLVYVHZ.js";
import "./chunk-DKS7UUDR.js";
import "./chunk-6DARBDBU.js";
import "./chunk-KDQWOWXR.js";
import "./chunk-JOVQBCRD.js";
import "./chunk-2B6XECE5.js";
import "./chunk-GYAK76KG.js";
import "./chunk-QB5ST4HW.js";
import "./chunk-67CCONUO.js";
import {
  e
} from "./chunk-CCHJ3WNU.js";
import "./chunk-RD652CDC.js";
import "./chunk-KB5I2WHB.js";
import "./chunk-P3YYANTX.js";
import "./chunk-WKCCXG3E.js";
import "./chunk-ZWJOMK2U.js";
import "./chunk-Y2ZAHGIO.js";
import "./chunk-ZCE5HP23.js";
import "./chunk-Y2QTREQA.js";
import "./chunk-OV7XVIQP.js";
import "./chunk-JQSXFLSD.js";
import "./chunk-H5K53FMS.js";
import "./chunk-VNLFNBKT.js";
import "./chunk-KHEIHGIK.js";
import "./chunk-XGWAEOLO.js";
import "./chunk-76QJRCNC.js";
import "./chunk-YL4WUSSA.js";
import "./chunk-AAC6XSCN.js";
import "./chunk-GKCEBA6Q.js";
import "./chunk-LYNZJBHM.js";
import "./chunk-SHYE33QH.js";
import "./chunk-LTMF2W73.js";
import "./chunk-VWMPQK5V.js";
import "./chunk-IGBV77N3.js";
import "./chunk-5Y3EUPZN.js";
import "./chunk-55AFRDJF.js";
import "./chunk-F5C72MOD.js";
import {
  p,
  r as r4
} from "./chunk-YBXGYFQH.js";
import "./chunk-NFDUQVJM.js";
import "./chunk-2W7OT7Z4.js";
import "./chunk-3PPDORWL.js";
import "./chunk-YIXK32VF.js";
import "./chunk-CHTPXQAG.js";
import "./chunk-2NTKYBCL.js";
import {
  g
} from "./chunk-BDWOUZQR.js";
import "./chunk-H34ENSPL.js";
import "./chunk-4ADC6HZF.js";
import {
  S,
  a as a3
} from "./chunk-H6F6O2KE.js";
import "./chunk-AF3FX2UV.js";
import "./chunk-DRAQJS2F.js";
import {
  P
} from "./chunk-BZYXFNL4.js";
import {
  n
} from "./chunk-VNTS5E5O.js";
import "./chunk-TMFB3DKM.js";
import "./chunk-X3UT6DT7.js";
import "./chunk-JD3UVEVP.js";
import "./chunk-NO2XQDLB.js";
import "./chunk-LBC3MAJX.js";
import "./chunk-NMP7ZOVG.js";
import "./chunk-YHYQP7QX.js";
import "./chunk-RP7FUW55.js";
import "./chunk-MPV4X4LZ.js";
import {
  o as o2
} from "./chunk-TNW4TPNP.js";
import "./chunk-IL45XPTT.js";
import "./chunk-HUVZEBBO.js";
import "./chunk-GH7GZNY6.js";
import "./chunk-G5DA3EEG.js";
import "./chunk-D443BZKU.js";
import "./chunk-NX54JGTL.js";
import "./chunk-I6IIPG56.js";
import "./chunk-JEYXDNAT.js";
import "./chunk-DJJNSAUR.js";
import "./chunk-PZBXBPVO.js";
import {
  d
} from "./chunk-TMC6HYGQ.js";
import "./chunk-7FAVUXK2.js";
import "./chunk-IVNFIIVI.js";
import "./chunk-BFUOEOXA.js";
import "./chunk-NOGWEW4X.js";
import "./chunk-ZCZERMS4.js";
import "./chunk-7CUBIFKN.js";
import "./chunk-RGFH75DR.js";
import "./chunk-FEGY3M6U.js";
import "./chunk-NY6S6EMV.js";
import "./chunk-AQGMTI4V.js";
import "./chunk-QG7JWSBW.js";
import "./chunk-7ZMGKXLG.js";
import "./chunk-JMXPE5PE.js";
import "./chunk-LL73CCBG.js";
import "./chunk-6TS2ZJL4.js";
import "./chunk-IBGTNH54.js";
import "./chunk-ROVRMLYN.js";
import "./chunk-SYPTUUSZ.js";
import "./chunk-6QTMK7BB.js";
import "./chunk-BNO7HCVD.js";
import "./chunk-7NMH5MM5.js";
import "./chunk-TCIXF7MM.js";
import "./chunk-UGTICYU7.js";
import "./chunk-3MHRDLQO.js";
import "./chunk-VUGQF5TL.js";
import "./chunk-ZAISHGSP.js";
import "./chunk-2IMSGFJN.js";
import "./chunk-VHTQ5H2C.js";
import "./chunk-YX2VTIZR.js";
import "./chunk-LYSDGL5S.js";
import "./chunk-SRJX4QLW.js";
import "./chunk-WPTJIN2M.js";
import "./chunk-KUP5BM5G.js";
import "./chunk-HNQNVI5C.js";
import "./chunk-G34OBNLT.js";
import "./chunk-WJUYGRZY.js";
import "./chunk-FKFXOPPT.js";
import "./chunk-KE3WBZYL.js";
import "./chunk-EOMIFMDH.js";
import "./chunk-QFU5COFB.js";
import "./chunk-45ILJ6ZH.js";
import "./chunk-VCRP2PLV.js";
import "./chunk-BDLVUYG2.js";
import "./chunk-6QA2BVC5.js";
import "./chunk-HWKQJUGY.js";
import "./chunk-XDCUZFJX.js";
import "./chunk-DNZK6PPI.js";
import "./chunk-7BWCD63N.js";
import "./chunk-65K4DQAH.js";
import "./chunk-MUKDJQWB.js";
import "./chunk-6KFXWKZZ.js";
import "./chunk-HPGYEHVI.js";
import "./chunk-YBJ5GVXQ.js";
import {
  V
} from "./chunk-X3R5OB6L.js";
import "./chunk-RACDQ3AL.js";
import "./chunk-TEXTBDH7.js";
import "./chunk-N3A2BVTW.js";
import "./chunk-IGYEHOTB.js";
import "./chunk-TVM3SZJR.js";
import "./chunk-52HWRRRQ.js";
import "./chunk-VNTEV3V4.js";
import "./chunk-OGOQOMMV.js";
import "./chunk-7Z3AF3B2.js";
import {
  u as u2
} from "./chunk-6GWORUT3.js";
import "./chunk-CMHHL5UO.js";
import "./chunk-KJSBBQ22.js";
import "./chunk-LMEOPAGQ.js";
import "./chunk-YIV2QKTZ.js";
import {
  a as a2,
  f,
  h,
  l,
  w
} from "./chunk-A3VAC24F.js";
import "./chunk-FPSA4NFH.js";
import "./chunk-UY6B6IVT.js";
import "./chunk-6PV45IYU.js";
import "./chunk-SRQCQD63.js";
import "./chunk-FIRNXFAH.js";
import {
  x,
  x2,
  z
} from "./chunk-O5TPFXRT.js";
import "./chunk-Q6XRAGMA.js";
import "./chunk-JUAPMINU.js";
import "./chunk-PK2ZR2SJ.js";
import "./chunk-YFPGM5UE.js";
import "./chunk-OXSERRAR.js";
import "./chunk-7HI4VRVW.js";
import "./chunk-ZX46THLM.js";
import "./chunk-Y2ZIOB7Y.js";
import "./chunk-KTUX3OKX.js";
import "./chunk-E3KEUGUG.js";
import {
  b as b2,
  m,
  r2
} from "./chunk-N3XLUQJI.js";
import {
  a2 as a
} from "./chunk-JUAD7TJ6.js";
import "./chunk-VHLUKPRH.js";
import {
  r
} from "./chunk-5TPMG26T.js";
import "./chunk-3NBBZ43U.js";
import "./chunk-VOLWOTEG.js";
import "./chunk-XTNIDRTB.js";
import "./chunk-FGWIXJQY.js";
import "./chunk-TKYAZCMB.js";
import "./chunk-3TBMFSPB.js";
import "./chunk-PSZLDJJA.js";
import "./chunk-ZWFY3WY5.js";
import "./chunk-LQFTAGIV.js";
import {
  u
} from "./chunk-S7IJH524.js";
import {
  b,
  o4 as o,
  r2 as r3
} from "./chunk-GZ2P4SCJ.js";
import {
  i2 as i,
  s
} from "./chunk-XWG6QGFK.js";
import "./chunk-GWNLQRNM.js";
import "./chunk-FXKORAMT.js";
import "./chunk-GNMFMITH.js";

// node_modules/@arcgis/core/views/2d/engine/webgl/Overlay.js
var v = [1, 1];
var g2 = e();
var R = { none: d.None, loop: d.Loop, oscillate: d.Oscillate };
function q(e3) {
  return e3 ? { type: "CIMAnimatedSymbolProperties", ...e3, playAnimation: e3.playing, repeatType: e3.repeatType ? R[e3.repeatType] : void 0 } : { type: "CIMAnimatedSymbolProperties" };
}
var _ = class extends e2 {
  constructor(n2) {
    super(), this.elementView = n2, this.isWrapAround = false, this.wrapAroundShift = 0, this.perspectiveTransform = n(), this._handles = new r2(), this._vertices = new Float32Array(8), this._indices = new Uint16Array([0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1]), this._handles.add([l(() => this.elementView.element.opacity, (e3) => this.opacity = e3, h), l(() => [this.elementView.coords], () => {
      this.requestRender();
    }, h), l(() => ["animationOptions" in this.elementView.element && this.elementView.element.animationOptions], () => {
      this._handles.remove("play"), this.texture = r3(this.texture), this.requestRender();
    }, h), f(() => this.elementView.element.loaded, () => {
      const e3 = this.elementView.element;
      this.ready(), o3(e3) && null != e3.content && (this._handles.add([o(e3.content, "play", () => this.requestRender()), o(e3.content, "loadeddata", () => this.requestRender()), o(e3.content, "loaded", () => this.requestRender())]), "requestVideoFrameCallback" in e3.content ? e3.content.requestVideoFrameCallback(() => this.requestRender()) : this._handles.add([o(e3.content, "seeked", () => this.requestRender())]), this.requestRender());
    }, h)]), n2.element.load().catch((t2) => {
      i.getLogger("esri.views.2d.layers.MediaLayerView2D").error(new s("element-load-error", "Element cannot be displayed", { element: n2, error: t2 }));
    });
  }
  getMesh(e3) {
    throw new Error("Method not implemented.");
  }
  destroy() {
    this._handles.destroy(), this.texture = r3(this.texture);
  }
  get textureSize() {
    return v;
  }
  get dvsMat3() {
    return this.parent.dvsMat3;
  }
  beforeRender(e3) {
    const { context: t2 } = e3, r5 = this.elementView.element.content;
    if (null != r5) {
      const e4 = r5 instanceof HTMLImageElement, s3 = r5 instanceof HTMLVideoElement, i3 = e4 ? r5.naturalWidth : s3 ? r5.videoWidth : r5.width, n2 = e4 ? r5.naturalHeight : s3 ? r5.videoHeight : r5.height;
      if (this._updatePerspectiveTransform(i3, n2), this.texture) {
        if (s3) if (r5.readyState >= r5.HAVE_CURRENT_DATA) this._updateTextureAndRequestRender(r5);
        else {
          const e5 = () => {
            this._updateTextureAndRequestRender(r5), r5.removeEventListener("canplay", e5), r5.removeEventListener("seeked", e5);
          };
          r5.addEventListener("canplay", e5), r5.addEventListener("seeked", e5);
        }
      } else {
        const e5 = new a3();
        if (e5.wrapMode = P.CLAMP_TO_EDGE, e5.preMultiplyAlpha = true, e5.width = i3, e5.height = n2, "getFrame" in r5) {
          const s4 = (r6) => {
            this.texture ? this.texture.setData(r6) : this.texture = new S(t2, e5, r6), this.requestRender();
          };
          "animationOptions" in this.elementView.element && this._handles.add(c(r5, q(this.elementView.element.animationOptions), null, s4), "play");
        } else this.texture = new S(t2, e5, r5);
        this.texture.generateMipmap(), s3 && ("requestVideoFrameCallback" in r5 ? r5.requestVideoFrameCallback(() => this.requestRender()) : r5.paused || this.requestRender());
      }
    }
    super.beforeRender(e3);
  }
  _updateTextureAndRequestRender(e3) {
    this.texture.setData(e3), this.texture.generateMipmap(), "requestVideoFrameCallback" in e3 ? e3.requestVideoFrameCallback(() => this.requestRender()) : e3.paused || this.requestRender();
  }
  _createTransforms() {
    return null;
  }
  draw(e3, t2) {
    this.isReady && null != this.texture ? t2.render(e3, { transform: { dvs: this.dvsMat3 }, config: { perspective: this.perspectiveTransform, texSize: v, wrapAroundShift: this.wrapAroundShift, isWrapAround: this.isWrapAround, opacity: this.opacity, texture: { texture: this.texture, unit: 0 } }, position: this._vertices, tex: this._indices }) : this.requestRender();
  }
  updateDrawCoords(e3, t2, r5, s3) {
    const { coords: i3, bounds: n2 } = this.elementView;
    if (null == i3 || null == n2) return;
    const [o4, a4, d2, l2] = i3.rings[0], m2 = this._vertices, { x: h2, y: p3 } = e3;
    m2.set([a4[0] - h2, a4[1] - p3, o4[0] - h2, o4[1] - p3, d2[0] - h2, d2[1] - p3, l2[0] - h2, l2[1] - p3]);
    let u5 = t2;
    if (s3) {
      const [e4, , t3] = n2, { worldWidth: r6, xBounds: i4 } = s3, [o5, a5] = i4;
      e4 < o5 && t3 > o5 ? u5 = r6 : t3 > a5 && e4 < a5 && (u5 = -r6);
    }
    this.wrapAroundShift = u5, this.isWrapAround = 0 !== u5;
  }
  _updatePerspectiveTransform(e3, t2) {
    const r5 = this._vertices;
    j(g2, [0, 0, e3, 0, 0, t2, e3, t2], [r5[0], r5[1], r5[4], r5[5], r5[2], r5[3], r5[6], r5[7]]), o2(this.perspectiveTransform, g2[6] / g2[8] * e3, g2[7] / g2[8] * t2);
  }
};

// node_modules/@arcgis/core/views/3d/layers/support/MediaLayerInteractionOptions.js
var t = class extends b2 {
  constructor(o4) {
    super(o4), this.editSourcePoints = false;
  }
};
r([m()], t.prototype, "editSourcePoints", void 0), t = r([a("esri.views.3d.layers.support.MediaLayerInteractionOptions.ReshapeOptions")], t);
var p2 = class extends b2 {
  constructor(o4) {
    super(o4), this.tool = "transform", this.reshapeOptions = new t();
  }
};
r([m()], p2.prototype, "tool", void 0), r([m({ type: t })], p2.prototype, "reshapeOptions", void 0), p2 = r([a("esri.views.3d.layers.support.MediaLayerInteractionOptions")], p2);

// node_modules/@arcgis/core/views/layers/MediaLayerView.js
var s2 = (s3) => {
  let i3 = class extends s3 {
    constructor(...e3) {
      super(...e3), this.layer = null, this.interactive = false, this.interactionOptions = new p2(), this.selectedElement = null;
    }
    highlight(e3, t2) {
      throw new Error("missing implementation");
    }
  };
  return r([m()], i3.prototype, "layer", void 0), r([m()], i3.prototype, "interactive", void 0), r([m({ type: p2 })], i3.prototype, "interactionOptions", void 0), r([m()], i3.prototype, "selectedElement", void 0), i3 = r([a("esri.views.layers.MediaLayerView")], i3), i3;
};

// node_modules/@arcgis/core/views/2d/layers/MediaLayerView2D.js
var G = class extends S2(s2(u3)) {
  constructor() {
    super(...arguments), this._overlayContainer = null, this._fetchQueue = null, this._tileStrategy = null, this._elementReferences = /* @__PURE__ */ new Map(), this._debugGraphicsView = null, this._interaction = null, this.layer = null, this.elements = new V();
  }
  initialize() {
    this.addHandles([l(() => [this.interactive, this.suspended], async () => {
      if (this.interactive && !this._interaction) {
        const { MediaLayerInteraction: e3 } = await import("./MediaLayerInteraction-AK7AYN4C.js");
        this._interaction = new e3({ view: this.view, layer: this.layer }), this.selectedElement !== this._interaction.selectedElement && (this._interaction.selectedElement = this.selectedElement), this.interactionOptions !== this._interaction.options && (this._interaction.options = this.interactionOptions);
      }
      this._interaction && (this._interaction.enabled = !this.suspended && this.interactive);
    }, w), l(() => this.interactionOptions, (e3) => {
      this._interaction && (this._interaction.options = e3);
    }, w), l(() => this.selectedElement, (e3) => {
      this._interaction && (this._interaction.selectedElement = e3);
    }, w)]);
  }
  attach() {
    this.addAttachHandles([a2(() => this.layer.effectiveSource, "refresh", () => {
      this._tileStrategy.refresh((e3) => this._updateTile(e3)), this.requestUpdate();
    }), a2(() => this.layer.effectiveSource, "change", ({ element: e3 }) => this._elementUpdateHandler(e3))]), this._overlayContainer = new u4(), this.container.addChild(this._overlayContainer), this._fetchQueue = new p({ tileInfoView: this.view.featuresTilingScheme, concurrency: 10, process: (e3, t2) => this._queryElements(e3, t2), scheduler: this.scheduler, priority: g.MAPVIEW_FETCH_QUEUE }), this._tileStrategy = new r4({ cachePolicy: "purge", resampling: true, acquireTile: (e3) => this._acquireTile(e3), releaseTile: (e3) => this._releaseTile(e3), tileInfoView: this.view.featuresTilingScheme }), this.requestUpdate();
  }
  detach() {
    this.elements.removeAll(), this._tileStrategy.destroy(), this._fetchQueue.destroy(), this._overlayContainer.removeAllChildren(), this.container.removeAllChildren(), this._elementReferences.clear(), this._debugGraphicsView?.destroy();
  }
  supportsSpatialReference(e3) {
    return true;
  }
  viewChange() {
    this.requestUpdate();
  }
  moveEnd() {
    this.requestUpdate();
  }
  update(e3) {
    this._tileStrategy.update(e3), this._debugGraphicsView?.update(e3);
  }
  async hitTest(e3, t2) {
    const i3 = [], s3 = e3.normalize(), r5 = [s3.x, s3.y];
    for (const { elementView: { normalizedCoords: o4, element: n2 } } of this._elementReferences.values()) null != o4 && x(o4.rings, r5) && i3.push({ type: "media", element: n2, layer: this.layer, mapPoint: e3, sourcePoint: n2.toSource(e3) });
    return i3.reverse();
  }
  canResume() {
    return null != this.layer.source && super.canResume();
  }
  async doRefresh() {
    this._fetchQueue.reset(), this._tileStrategy.refresh((e3) => this._updateTile(e3));
  }
  _acquireTile(e3) {
    const t2 = new M(e3.clone());
    return this._updateTile(t2), t2;
  }
  _updateTile(e3) {
    this._updatingHandles.addPromise(this._fetchQueue.push(e3.key).then((t2) => {
      const [i3, s3] = e3.setElements(t2);
      this._referenceElements(e3, i3), this._dereferenceElements(e3, s3), this.requestUpdate();
    }, (e4) => {
      b(e4) || i.getLogger(this).error(e4);
    }));
  }
  _releaseTile(e3) {
    this._fetchQueue.abort(e3.key.id), e3.elements && this._dereferenceElements(e3, e3.elements), this.requestUpdate();
  }
  async _queryElements(e3, t2) {
    const i3 = this.layer.effectiveSource;
    if (null == i3) return [];
    this.view.featuresTilingScheme.getTileBounds(S3, e3, true);
    const s3 = new z({ xmin: S3[0], ymin: S3[1], xmax: S3[2], ymax: S3[3], spatialReference: this.view.spatialReference });
    return i3.queryElements(s3, t2);
  }
  _referenceElements(e3, t2) {
    if (null != this.layer.source) for (const i3 of t2) this._referenceElement(e3, i3);
  }
  _referenceElement(e3, t2) {
    u(this._elementReferences, t2.uid, () => {
      const e4 = new i2({ element: t2, spatialReference: this.view.spatialReference }), r5 = new _(e4);
      return this._overlayContainer.addChild(r5), this.elements.add(t2), this._updatingHandles.addPromise(t2.load().catch((e5) => {
        i.getLogger("esri.views.2d.layers.MediaLayerView2D").error(new s("element-load-error", "Element cannot be displayed", { element: t2, error: e5 }));
      })), { debugGraphic: null, elementView: e4, overlay: r5, tiles: /* @__PURE__ */ new Set() };
    }).tiles.add(e3);
  }
  _dereferenceElements(e3, t2) {
    for (const i3 of t2) this._dereferenceElement(e3, i3);
  }
  _dereferenceElement(e3, t2) {
    const i3 = this._elementReferences.get(t2.uid);
    i3.tiles.delete(e3), i3.tiles.size || (this._overlayContainer.removeChild(i3.overlay), i3.overlay.destroy(), i3.elementView.destroy(), this._elementReferences.delete(t2.uid), this.elements.remove(t2), this._debugGraphicsView?.graphics.remove(i3.debugGraphic));
  }
  _elementUpdateHandler(e3) {
    let t2 = this._elementReferences.get(e3.uid);
    if (t2) {
      const i4 = t2.elementView.normalizedCoords;
      if (null == i4) return this._overlayContainer.removeChild(t2.overlay), t2.overlay.destroy(), t2.elementView.destroy(), this._elementReferences.delete(e3.uid), this.elements.remove(e3), void this._debugGraphicsView?.graphics.remove(t2.debugGraphic);
      const s3 = [], r5 = [];
      for (const e4 of this._tileStrategy.tiles) {
        const o4 = T(this.view.featuresTilingScheme, e4, i4);
        t2.tiles.has(e4) ? o4 || r5.push(e4) : o4 && s3.push(e4);
      }
      for (const t3 of s3) this._referenceElement(t3, e3);
      for (const t3 of r5) this._dereferenceElement(t3, e3);
      return t2 = this._elementReferences.get(e3.uid), void (t2?.debugGraphic && (t2.debugGraphic.geometry = t2.elementView.normalizedCoords, this._debugGraphicsView.graphicUpdateHandler({ graphic: t2.debugGraphic, property: "geometry" })));
    }
    const i3 = new i2({ element: e3, spatialReference: this.view.spatialReference }).normalizedCoords;
    if (null != i3) for (const s3 of this._tileStrategy.tiles) {
      T(this.view.featuresTilingScheme, s3, i3) && this._referenceElement(s3, e3);
    }
  }
};
r([m()], G.prototype, "layer", void 0), r([m({ readOnly: true })], G.prototype, "elements", void 0), G = r([a("esri.views.2d.layers.MediaLayerView2D")], G);
var S3 = u2();
var q2 = { xmin: 0, ymin: 0, xmax: 0, ymax: 0 };
function T(e3, t2, i3) {
  return e3.getTileBounds(S3, t2.key, true), q2.xmin = S3[0], q2.ymin = S3[1], q2.xmax = S3[2], q2.ymax = S3[3], x2(q2, i3);
}
var M = class {
  constructor(e3) {
    this.key = e3, this.elements = null, this.isReady = false, this.visible = true;
  }
  setElements(e3) {
    const t2 = [], i3 = new Set(this.elements);
    this.elements = e3;
    for (const s3 of e3) i3.has(s3) ? i3.delete(s3) : t2.push(s3);
    return this.isReady = true, [t2, Array.from(i3)];
  }
  destroy() {
  }
};
var C = G;
export {
  C as default
};
//# sourceMappingURL=MediaLayerView2D-PNQBOQ7C.js.map
