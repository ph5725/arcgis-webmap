import {
  u as u2
} from "./chunk-CVH52ZBN.js";
import {
  E,
  S,
  d,
  f as f2,
  h,
  p
} from "./chunk-7U7T3Q43.js";
import "./chunk-DBZ575A6.js";
import {
  f
} from "./chunk-524UHFSB.js";
import "./chunk-H5N2AXWG.js";
import {
  L
} from "./chunk-P4YXQBLK.js";
import "./chunk-WUKLWX63.js";
import "./chunk-LHJOMFWG.js";
import "./chunk-APGIAJ3M.js";
import "./chunk-ES5H7VGK.js";
import "./chunk-JV7SG7ZY.js";
import {
  n as n2,
  t
} from "./chunk-Z63VPZB2.js";
import "./chunk-NLQ5JBZ3.js";
import "./chunk-WQVEQTKW.js";
import {
  ot,
  rt,
  st
} from "./chunk-DKS7UUDR.js";
import "./chunk-KDQWOWXR.js";
import "./chunk-JOVQBCRD.js";
import {
  a,
  l as l2,
  u
} from "./chunk-7TPOIM4Y.js";
import "./chunk-LNFOAX5I.js";
import "./chunk-U3MD377S.js";
import {
  j,
  x
} from "./chunk-2B6XECE5.js";
import "./chunk-QB5ST4HW.js";
import "./chunk-OIO6NR6X.js";
import "./chunk-F5BDMX7A.js";
import "./chunk-VNLFNBKT.js";
import "./chunk-KHEIHGIK.js";
import "./chunk-AAC6XSCN.js";
import "./chunk-Z7VYTTYM.js";
import "./chunk-BDWOUZQR.js";
import "./chunk-H34ENSPL.js";
import "./chunk-4ADC6HZF.js";
import "./chunk-X3UT6DT7.js";
import "./chunk-JD3UVEVP.js";
import "./chunk-LBC3MAJX.js";
import "./chunk-4GXVCEW4.js";
import "./chunk-C3JHRSMA.js";
import {
  Z
} from "./chunk-JEYXDNAT.js";
import "./chunk-7FAVUXK2.js";
import "./chunk-IVNFIIVI.js";
import "./chunk-ZCZERMS4.js";
import "./chunk-RWRC6JKB.js";
import "./chunk-M6AESODI.js";
import "./chunk-NY6S6EMV.js";
import "./chunk-AQGMTI4V.js";
import "./chunk-QG7JWSBW.js";
import {
  i
} from "./chunk-IBGTNH54.js";
import "./chunk-ROVRMLYN.js";
import "./chunk-SYPTUUSZ.js";
import "./chunk-7NMH5MM5.js";
import "./chunk-TCIXF7MM.js";
import "./chunk-UGTICYU7.js";
import "./chunk-3MHRDLQO.js";
import "./chunk-VHTQ5H2C.js";
import "./chunk-FKFXOPPT.js";
import "./chunk-EOMIFMDH.js";
import "./chunk-QFU5COFB.js";
import {
  ee,
  ne
} from "./chunk-VCRP2PLV.js";
import "./chunk-BDLVUYG2.js";
import "./chunk-6QA2BVC5.js";
import "./chunk-QVKLS4LH.js";
import "./chunk-2KVNXQA7.js";
import "./chunk-XDCUZFJX.js";
import "./chunk-DNZK6PPI.js";
import "./chunk-7BWCD63N.js";
import "./chunk-MUKDJQWB.js";
import "./chunk-6KFXWKZZ.js";
import "./chunk-X3R5OB6L.js";
import "./chunk-RACDQ3AL.js";
import "./chunk-TEXTBDH7.js";
import {
  l,
  v
} from "./chunk-N3A2BVTW.js";
import "./chunk-TVM3SZJR.js";
import "./chunk-52HWRRRQ.js";
import "./chunk-VNTEV3V4.js";
import "./chunk-OGOQOMMV.js";
import "./chunk-7Z3AF3B2.js";
import "./chunk-6GWORUT3.js";
import "./chunk-XHYOFJ4U.js";
import "./chunk-KJSBBQ22.js";
import {
  n
} from "./chunk-LMEOPAGQ.js";
import "./chunk-YIV2QKTZ.js";
import "./chunk-A3VAC24F.js";
import "./chunk-FPSA4NFH.js";
import "./chunk-UY6B6IVT.js";
import "./chunk-O5TPFXRT.js";
import "./chunk-Q6XRAGMA.js";
import "./chunk-JUAPMINU.js";
import "./chunk-PK2ZR2SJ.js";
import "./chunk-YFPGM5UE.js";
import {
  U
} from "./chunk-OXSERRAR.js";
import "./chunk-7HI4VRVW.js";
import "./chunk-ZX46THLM.js";
import "./chunk-Y2ZIOB7Y.js";
import "./chunk-KTUX3OKX.js";
import "./chunk-E3KEUGUG.js";
import "./chunk-N3XLUQJI.js";
import "./chunk-JUAD7TJ6.js";
import "./chunk-VHLUKPRH.js";
import "./chunk-5TPMG26T.js";
import "./chunk-3NBBZ43U.js";
import "./chunk-VOLWOTEG.js";
import "./chunk-XTNIDRTB.js";
import "./chunk-FGWIXJQY.js";
import "./chunk-TKYAZCMB.js";
import "./chunk-3TBMFSPB.js";
import "./chunk-PSZLDJJA.js";
import "./chunk-ZWFY3WY5.js";
import "./chunk-LQFTAGIV.js";
import "./chunk-S7IJH524.js";
import "./chunk-GZ2P4SCJ.js";
import {
  s
} from "./chunk-XWG6QGFK.js";
import "./chunk-GWNLQRNM.js";
import "./chunk-FXKORAMT.js";
import "./chunk-GNMFMITH.js";

// node_modules/@arcgis/core/layers/graphics/sources/support/MemorySourceWorker.js
var O = U;
var D = { xmin: -180, ymin: -90, xmax: 180, ymax: 90, spatialReference: U };
var w = { hasAttachments: false, capabilities: "query, editing, create, delete, update", useStandardizedQueries: true, supportsCoordinatesQuantization: true, supportsReturningQueryGeometry: true, advancedQueryCapabilities: { supportsQueryAttachments: false, supportsQueryAttachmentOrderByFields: false, supportsQueryBins: true, supportsStatistics: true, supportsPercentileStatistics: true, supportsReturningGeometryCentroid: true, supportsQueryWithDistance: true, supportsDistinct: true, supportsReturningQueryExtent: true, supportsReturningGeometryProperties: false, supportsHavingClause: true, supportsOrderBy: true, supportsPagination: true, supportsQueryWithResultType: true, supportsSqlExpression: true, supportsDisjointSpatialRel: true, supportsQueryWithCacheHint: true }, queryBinsCapabilities: S };
function Q(e) {
  return l(e) ? null != e.z : !!e.hasZ;
}
function S2(e) {
  return l(e) ? null != e.m : !!e.hasM;
}
var v2 = class {
  constructor() {
    this._queryEngine = null, this._nextObjectId = null;
  }
  destroy() {
    this._queryEngine?.destroy(), this._queryEngine = this._createDefaultAttributes = null;
  }
  async load(t2) {
    const i2 = [], { features: s2 } = t2, r = this._inferLayerProperties(s2, t2.fields), n3 = t2.fields || [], a2 = null != t2.hasM ? t2.hasM : !!r.hasM, u3 = null != t2.hasZ ? t2.hasZ : !!r.hasZ, f3 = !t2.spatialReference && !r.spatialReference, g = f3 ? O : t2.spatialReference || r.spatialReference, I = f3 ? D : null, b = t2.geometryType || r.geometryType, F = !b;
    let j2 = t2.objectIdField || r.objectIdField, E2 = t2.timeInfo;
    const Q2 = new Z(n3);
    if (!F && (f3 && i2.push({ name: "feature-layer:spatial-reference-not-found", message: "Spatial reference not provided or found in features. Defaults to WGS84" }), !b)) throw new s("feature-layer:missing-property", "geometryType not set and couldn't be inferred from the provided features");
    if (!j2) throw new s("feature-layer:missing-property", "objectIdField not set and couldn't be found in the provided fields");
    if (r.objectIdField && j2 !== r.objectIdField && (i2.push({ name: "feature-layer:duplicated-oid-field", message: `Provided objectIdField "${j2}" doesn't match the field name "${r.objectIdField}", found in the provided fields` }), j2 = r.objectIdField), j2 && !r.objectIdField) {
      const e = Q2.get(j2);
      e ? (j2 = e.name, e.type = "esriFieldTypeOID", e.editable = false, e.nullable = false) : n3.unshift({ alias: j2, name: j2, type: "esriFieldTypeOID", editable: false, nullable: false });
    }
    for (const o of n3) {
      if (null == o.name && (o.name = o.alias), null == o.alias && (o.alias = o.name), !o.name) throw new s("feature-layer:invalid-field-name", "field name is missing", { field: o });
      if (o.name === j2 && (o.type = "esriFieldTypeOID"), !i.jsonValues.includes(o.type)) throw new s("feature-layer:invalid-field-type", `invalid type for field "${o.name}"`, { field: o });
      null == o.length && (o.length = ne(o));
    }
    const S3 = {};
    for (const e of n3) if ("esriFieldTypeOID" !== e.type && "esriFieldTypeGlobalID" !== e.type) {
      const t3 = ee(e);
      void 0 !== t3 && (S3[e.name] = t3);
    }
    if (E2) {
      if (E2.startTimeField) {
        const e = Q2.get(E2.startTimeField);
        e ? (E2.startTimeField = e.name, e.type = "esriFieldTypeDate") : E2.startTimeField = null;
      }
      if (E2.endTimeField) {
        const e = Q2.get(E2.endTimeField);
        e ? (E2.endTimeField = e.name, e.type = "esriFieldTypeDate") : E2.endTimeField = null;
      }
      if (E2.trackIdField) {
        const e = Q2.get(E2.trackIdField);
        e ? E2.trackIdField = e.name : (E2.trackIdField = null, i2.push({ name: "feature-layer:invalid-timeInfo-trackIdField", message: "trackIdField is missing", details: { timeInfo: E2 } }));
      }
      E2.startTimeField || E2.endTimeField || (i2.push({ name: "feature-layer:invalid-timeInfo", message: "startTimeField and endTimeField are missing or invalid", details: { timeInfo: E2 } }), E2 = null);
    }
    const v3 = Q2.dateFields.length ? { timeZoneIANA: t2.dateFieldsTimeZone ?? n } : null;
    this._createDefaultAttributes = a(S3, j2);
    const M = { warnings: i2, featureErrors: [], layerDefinition: { ...w, drawingInfo: u(b), templates: l2(S3), extent: I, geometryType: b, objectIdField: j2, fields: n3, hasZ: u3, hasM: a2, timeInfo: E2, dateFieldsTimeReference: v3 }, assignedObjectIds: {} }, A = { type: "object-id", fieldName: j2 };
    if (this._queryEngine = new L({ fieldsIndex: Z.fromLayerJSON({ fields: n3, timeInfo: E2, dateFieldsTimeReference: v3 }), geometryType: b, hasM: a2, hasZ: u3, featureIdInfo: A, spatialReference: g, featureStore: new f({ geometryType: b, hasM: a2, hasZ: u3 }), timeInfo: E2 }), !s2?.length) return this._nextObjectId = t, M;
    const Z2 = n2(j2, s2);
    return this._nextObjectId = Z2 + 1, await x(s2, g), this._loadInitialFeatures(M, s2);
  }
  async applyEdits(e) {
    const { spatialReference: t2, geometryType: i2 } = this._queryEngine;
    return await Promise.all([E(t2, i2), x(e.adds, t2), x(e.updates, t2)]), this._applyEdits(e);
  }
  queryFeatures(e, t2 = {}) {
    return this._queryEngine.executeQuery(e, t2.signal);
  }
  queryFeatureCount(e, t2 = {}) {
    return this._queryEngine.executeQueryForCount(e, t2.signal);
  }
  queryObjectIds(e, t2 = {}) {
    return this._queryEngine.executeQueryForIds(e, t2.signal);
  }
  queryExtent(e, t2 = {}) {
    return this._queryEngine.executeQueryForExtent(e, t2.signal);
  }
  querySnapping(e, t2 = {}) {
    return u2(this._queryEngine, e, t2.signal);
  }
  queryAttributeBins(e, t2 = {}) {
    return this._queryEngine.executeAttributeBinsQuery(e, t2.signal);
  }
  _inferLayerProperties(e, i2) {
    let s2, r, n3 = null, a2 = null, o = null;
    for (const l3 of e) {
      const e2 = l3.geometry;
      if (null != e2 && (n3 || (n3 = v(e2)), a2 || (a2 = e2.spatialReference), null == s2 && (s2 = Q(e2)), null == r && (r = S2(e2)), n3 && a2 && null != s2 && null != r)) break;
    }
    if (i2 && i2.length) {
      let e2 = null;
      i2.some((t2) => {
        const i3 = "esriFieldTypeOID" === t2.type, s3 = !t2.type && t2.name && "objectid" === t2.name.toLowerCase();
        return e2 = t2, i3 || s3;
      }) && (o = e2.name);
    }
    return { geometryType: n3, spatialReference: a2, objectIdField: o, hasM: r, hasZ: s2 };
  }
  async _loadInitialFeatures(e, i2) {
    const { geometryType: s2, hasM: n3, hasZ: a2, objectIdField: o, spatialReference: l3, featureStore: u3, fieldsIndex: d2 } = this._queryEngine, p2 = [], c = { type: "object-id", fieldName: o };
    for (const r of i2) {
      if (null != r.uid && (e.assignedObjectIds[r.uid] = -1), r.geometry && s2 !== v(r.geometry)) {
        e.featureErrors.push(p("Incorrect geometry type."));
        continue;
      }
      const i3 = this._createDefaultAttributes(), n4 = d(d2, i3, r.attributes, true);
      n4 ? e.featureErrors.push(n4) : (this._assignObjectId(i3, r.attributes, true), r.attributes = i3, null != r.uid && (e.assignedObjectIds[r.uid] = r.attributes[o]), null != r.geometry && (r.geometry = j(r.geometry, r.geometry.spatialReference, l3)), p2.push(r));
    }
    u3.addMany(rt([], p2, s2, a2, n3, c));
    const { fullExtent: y, timeExtent: m } = await this._queryEngine.fetchRecomputedExtents();
    if (e.layerDefinition.extent = y, m) {
      const { start: t2, end: i3 } = m;
      e.layerDefinition.timeInfo.timeExtent = [t2, i3];
    }
    return e;
  }
  async _applyEdits(e) {
    const { adds: t2, updates: i2, deletes: s2 } = e, r = { addResults: [], deleteResults: [], updateResults: [], uidToObjectId: {} };
    if (t2?.length && this._applyAddEdits(r, t2), i2?.length && this._applyUpdateEdits(r, i2), s2?.length) {
      for (const e2 of s2) r.deleteResults.push(f2(e2));
      this._queryEngine.featureStore.removeManyById(s2);
    }
    const { fullExtent: n3, timeExtent: a2 } = await this._queryEngine.fetchRecomputedExtents();
    return { extent: n3, timeExtent: a2, featureEditResults: r };
  }
  _applyAddEdits(e, i2) {
    const { addResults: s2 } = e, { geometryType: n3, hasM: a2, hasZ: o, objectIdField: l3, spatialReference: u3, featureStore: d2, featureIdInfo: p2, fieldsIndex: c } = this._queryEngine, y = [];
    for (const r of i2) {
      if (r.geometry && n3 !== v(r.geometry)) {
        s2.push(p("Incorrect geometry type."));
        continue;
      }
      const i3 = this._createDefaultAttributes(), a3 = d(c, i3, r.attributes);
      if (a3) s2.push(a3);
      else {
        if (this._assignObjectId(i3, r.attributes), r.attributes = i3, null != r.uid) {
          const t2 = r.attributes[l3];
          e.uidToObjectId[r.uid] = t2;
        }
        if (null != r.geometry) {
          const e2 = r.geometry.spatialReference ?? u3;
          r.geometry = j(h(r.geometry, e2), e2, u3);
        }
        y.push(r), s2.push(f2(r.attributes[l3]));
      }
    }
    d2.addMany(rt([], y, n3, o, a2, p2));
  }
  _applyUpdateEdits({ updateResults: e }, i2) {
    const { geometryType: s2, hasM: r, hasZ: o, objectIdField: l3, spatialReference: u3, featureStore: d2, fieldsIndex: p2, featureIdInfo: c } = this._queryEngine;
    for (const y of i2) {
      const { attributes: i3, geometry: m } = y, h2 = i3?.[l3];
      if (null == h2) {
        e.push(p(`Identifier field ${l3} missing`));
        continue;
      }
      if (!d2.has(h2)) {
        e.push(p(`Feature with object id ${h2} missing`));
        continue;
      }
      const g = st(d2.getFeature(h2), s2, o, r);
      if (null != m) {
        if (s2 !== v(m)) {
          e.push(p("Incorrect geometry type."));
          continue;
        }
        const i4 = m.spatialReference ?? u3;
        g.geometry = j(h(m, i4), i4, u3);
      }
      if (i3) {
        const t2 = d(p2, g.attributes, i3);
        if (t2) {
          e.push(t2);
          continue;
        }
      }
      d2.add(ot(g, s2, o, r, c)), e.push(f2(h2));
    }
  }
  _assignObjectId(e, t2, i2 = false) {
    const s2 = this._queryEngine.objectIdField;
    i2 && t2 && isFinite(t2[s2]) ? e[s2] = t2[s2] : e[s2] = this._nextObjectId++;
  }
};
export {
  v2 as default
};
//# sourceMappingURL=MemorySourceWorker-E4I5ZCFZ.js.map
