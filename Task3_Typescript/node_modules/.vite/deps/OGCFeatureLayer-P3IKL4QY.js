import {
  C,
  N,
  O,
  P,
  R as R2,
  k,
  q as q2,
  v,
  x
} from "./chunk-CEAX7R6A.js";
import "./chunk-7U7T3Q43.js";
import "./chunk-TQBLAIQG.js";
import "./chunk-DBZ575A6.js";
import {
  s as s4
} from "./chunk-ZC6JYTVG.js";
import "./chunk-DKS7UUDR.js";
import "./chunk-KDQWOWXR.js";
import "./chunk-JOVQBCRD.js";
import "./chunk-7TPOIM4Y.js";
import "./chunk-LNFOAX5I.js";
import "./chunk-VNLFNBKT.js";
import "./chunk-KHEIHGIK.js";
import {
  e as e2
} from "./chunk-ZUTXZ2PO.js";
import {
  d as d2
} from "./chunk-FSVG2RRX.js";
import "./chunk-L3O6KWVI.js";
import {
  n
} from "./chunk-SBFMUXL3.js";
import {
  i
} from "./chunk-PZV6BOD6.js";
import {
  c
} from "./chunk-WIICHW3C.js";
import "./chunk-T4BWGCN6.js";
import "./chunk-AC7GOP3F.js";
import {
  a as a2
} from "./chunk-XPKVLOAO.js";
import {
  s as s3
} from "./chunk-GESOBEYT.js";
import "./chunk-3IU6SQCC.js";
import {
  p as p4
} from "./chunk-E7YVYF37.js";
import "./chunk-E76L26GR.js";
import {
  A,
  l as l2
} from "./chunk-GG4VLKUY.js";
import "./chunk-IL45XPTT.js";
import {
  c as c2
} from "./chunk-6MFKAT6L.js";
import "./chunk-NOWX6W7R.js";
import {
  p as p5
} from "./chunk-OQ76WPLD.js";
import {
  e
} from "./chunk-KSVHYEPS.js";
import "./chunk-UTU6N7VJ.js";
import "./chunk-RV3SBM2C.js";
import "./chunk-4GXVCEW4.js";
import {
  g
} from "./chunk-B6C7UPBZ.js";
import {
  f as f2
} from "./chunk-IUQBXXYO.js";
import "./chunk-7WKBQS4R.js";
import {
  j
} from "./chunk-VGIEH4HM.js";
import {
  p as p2
} from "./chunk-XLF2NMGX.js";
import {
  t
} from "./chunk-X5GD6LFD.js";
import {
  b2 as b,
  d,
  l,
  m as m4,
  p as p3,
  s as s2,
  y as y2
} from "./chunk-G4PMFSAZ.js";
import "./chunk-MX5VW6PC.js";
import "./chunk-JJNHUYXK.js";
import "./chunk-UG6RJXJ2.js";
import {
  S
} from "./chunk-OTCYHWWG.js";
import "./chunk-UGXCZZ7N.js";
import "./chunk-OTSYE6UT.js";
import "./chunk-K5LVZUBF.js";
import "./chunk-J7LSFQNH.js";
import {
  m as m5,
  u
} from "./chunk-AGDHKBKD.js";
import "./chunk-OC2XWDW2.js";
import "./chunk-C3JHRSMA.js";
import "./chunk-M2UZRY7C.js";
import "./chunk-HUVZEBBO.js";
import "./chunk-VLPG2W66.js";
import "./chunk-GH7GZNY6.js";
import "./chunk-G5DA3EEG.js";
import "./chunk-D443BZKU.js";
import "./chunk-7DFHXN7Z.js";
import "./chunk-NX54JGTL.js";
import "./chunk-I6IIPG56.js";
import "./chunk-JEYXDNAT.js";
import "./chunk-DJJNSAUR.js";
import "./chunk-PZBXBPVO.js";
import "./chunk-TMC6HYGQ.js";
import "./chunk-7FAVUXK2.js";
import "./chunk-IVNFIIVI.js";
import "./chunk-T4QXFCFF.js";
import "./chunk-BFUOEOXA.js";
import "./chunk-NOGWEW4X.js";
import "./chunk-ZCZERMS4.js";
import "./chunk-7CUBIFKN.js";
import "./chunk-GPMIOMDJ.js";
import "./chunk-RGFH75DR.js";
import "./chunk-FEGY3M6U.js";
import "./chunk-RWRC6JKB.js";
import "./chunk-M6AESODI.js";
import "./chunk-NY6S6EMV.js";
import "./chunk-AQGMTI4V.js";
import "./chunk-QG7JWSBW.js";
import "./chunk-YSCIEMYQ.js";
import {
  R
} from "./chunk-7ZMGKXLG.js";
import "./chunk-JMXPE5PE.js";
import "./chunk-LL73CCBG.js";
import {
  m as m3
} from "./chunk-6TS2ZJL4.js";
import "./chunk-IBGTNH54.js";
import {
  h
} from "./chunk-L7EN54WK.js";
import "./chunk-6QTMK7BB.js";
import "./chunk-7NMH5MM5.js";
import "./chunk-TCIXF7MM.js";
import "./chunk-UGTICYU7.js";
import "./chunk-3MHRDLQO.js";
import "./chunk-F4KXGA4J.js";
import "./chunk-KHRHKYU2.js";
import "./chunk-2IMSGFJN.js";
import "./chunk-VHTQ5H2C.js";
import {
  q
} from "./chunk-YX2VTIZR.js";
import "./chunk-LYSDGL5S.js";
import "./chunk-SRJX4QLW.js";
import "./chunk-WPTJIN2M.js";
import "./chunk-KUP5BM5G.js";
import "./chunk-HNQNVI5C.js";
import "./chunk-G34OBNLT.js";
import "./chunk-WJUYGRZY.js";
import "./chunk-FKFXOPPT.js";
import "./chunk-KE3WBZYL.js";
import "./chunk-EOMIFMDH.js";
import "./chunk-QFU5COFB.js";
import "./chunk-45ILJ6ZH.js";
import {
  I,
  g as g2
} from "./chunk-VCRP2PLV.js";
import "./chunk-BDLVUYG2.js";
import "./chunk-6QA2BVC5.js";
import "./chunk-HWKQJUGY.js";
import "./chunk-XDCUZFJX.js";
import "./chunk-DNZK6PPI.js";
import "./chunk-7BWCD63N.js";
import "./chunk-65K4DQAH.js";
import "./chunk-MUKDJQWB.js";
import "./chunk-6KFXWKZZ.js";
import "./chunk-HPGYEHVI.js";
import "./chunk-YBJ5GVXQ.js";
import "./chunk-X3R5OB6L.js";
import "./chunk-RACDQ3AL.js";
import "./chunk-TEXTBDH7.js";
import "./chunk-N3A2BVTW.js";
import {
  m as m2,
  y
} from "./chunk-IGYEHOTB.js";
import "./chunk-TVM3SZJR.js";
import "./chunk-52HWRRRQ.js";
import "./chunk-VNTEV3V4.js";
import "./chunk-OGOQOMMV.js";
import "./chunk-7Z3AF3B2.js";
import "./chunk-6GWORUT3.js";
import "./chunk-HCYE6OE4.js";
import "./chunk-KJSBBQ22.js";
import "./chunk-LMEOPAGQ.js";
import "./chunk-YIV2QKTZ.js";
import "./chunk-A3VAC24F.js";
import "./chunk-FPSA4NFH.js";
import "./chunk-UY6B6IVT.js";
import "./chunk-6PV45IYU.js";
import {
  p
} from "./chunk-SRQCQD63.js";
import "./chunk-FIRNXFAH.js";
import {
  z
} from "./chunk-O5TPFXRT.js";
import "./chunk-Q6XRAGMA.js";
import "./chunk-JUAPMINU.js";
import {
  f
} from "./chunk-PK2ZR2SJ.js";
import "./chunk-YFPGM5UE.js";
import "./chunk-OXSERRAR.js";
import "./chunk-7HI4VRVW.js";
import "./chunk-ZX46THLM.js";
import "./chunk-Y2ZIOB7Y.js";
import "./chunk-KTUX3OKX.js";
import "./chunk-E3KEUGUG.js";
import {
  m
} from "./chunk-N3XLUQJI.js";
import {
  a2 as a
} from "./chunk-JUAD7TJ6.js";
import "./chunk-VHLUKPRH.js";
import {
  r
} from "./chunk-5TPMG26T.js";
import "./chunk-3NBBZ43U.js";
import "./chunk-VOLWOTEG.js";
import "./chunk-XTNIDRTB.js";
import "./chunk-FGWIXJQY.js";
import "./chunk-TKYAZCMB.js";
import "./chunk-3TBMFSPB.js";
import "./chunk-PSZLDJJA.js";
import "./chunk-ZWFY3WY5.js";
import "./chunk-LQFTAGIV.js";
import "./chunk-S7IJH524.js";
import "./chunk-GZ2P4SCJ.js";
import {
  o,
  s
} from "./chunk-XWG6QGFK.js";
import "./chunk-GWNLQRNM.js";
import "./chunk-FXKORAMT.js";
import "./chunk-GNMFMITH.js";

// node_modules/@arcgis/core/layers/graphics/sources/OGCFeatureSource.js
var C2 = class extends p {
  constructor() {
    super(...arguments), this.featureDefinition = null, this.type = "ogc-feature";
  }
  load(t2) {
    return this.addResolvingPromise(this._loadOGCServices(this.layer, t2)), this.when();
  }
  getSource() {
    const { featureDefinition: { collection: t2, layerDefinition: e3, spatialReference: s5, supportedCrs: r2 }, layer: { apiKey: o2, customParameters: p6, effectiveMaxRecordCount: i2 } } = this;
    return { type: "ogc-source", collection: t2, layerDefinition: e3, maxRecordCount: i2, queryParameters: { apiKey: o2, customParameters: p6 }, spatialReference: s5, supportedCrs: r2 };
  }
  queryExtent(t2, e3 = {}) {
    return null;
  }
  queryFeatureCount(t2, e3 = {}) {
    return null;
  }
  queryFeatures(t2, e3 = {}) {
    return this.queryFeaturesJSON(t2, e3).then((t3) => g.fromJSON(t3));
  }
  queryFeaturesJSON(t2, e3 = {}) {
    const s5 = this.getSource();
    return this.load(e3).then(() => R2(s5, t2, e3));
  }
  queryObjectIds(t2, e3 = {}) {
    return null;
  }
  serviceSupportsSpatialReference(t2) {
    return !(!t2.isWGS84 && !t2.isWebMercator) || !!this.featureDefinition.supportedCrs[t2.wkid];
  }
  _conformsToType(t2, e3) {
    const s5 = new RegExp(`^${o(e3)}$`, "i");
    return t2.conformsTo.some((t3) => s5.test(t3)) ?? false;
  }
  _getCapabilities(t2, e3) {
    return { analytics: { supportsCacheHint: false }, attachment: null, data: { isVersioned: false, isBranchVersioned: false, supportsAttachment: false, supportsM: false, supportsZ: t2 }, metadata: { supportsAdvancedFieldProperties: false }, operations: { supportsCalculate: false, supportsTruncate: false, supportsValidateSql: false, supportsAdd: false, supportsDelete: false, supportsEditing: false, supportsChangeTracking: false, supportsQuery: false, supportsQueryBins: false, supportsQueryAnalytics: false, supportsQueryAttachments: false, supportsQueryTopFeatures: false, supportsResizeAttachments: false, supportsSync: false, supportsUpdate: false, supportsExceedsLimitStatistics: false, supportsAsyncConvert3D: false }, query: { maxRecordCount: e3, maxRecordCountFactor: void 0, maxUniqueIDCount: void 0, standardMaxRecordCount: void 0, supportsCacheHint: false, supportsCentroid: false, supportsCurrentUser: false, supportsDisjointSpatialRelationship: false, supportsDistance: false, supportsDistinct: false, supportsExtent: false, supportsFormatPBF: false, supportsGeometryProperties: false, supportsHavingClause: false, supportsHistoricMoment: false, supportsMaxRecordCountFactor: false, supportsOrderBy: false, supportsPagination: false, supportsPaginationOnAggregatedQueries: false, supportsPercentileStatistics: false, supportsQuantization: false, supportsQuantizationEditMode: false, supportsQueryByAnonymous: false, supportsQueryByOthers: false, supportsQueryGeometry: false, supportsResultType: false, supportsReturnMesh: false, supportsStandardizedQueriesOnly: false, supportsTopFeaturesQuery: false, supportsStatistics: false, supportsSpatialAggregationStatistics: false, supportedSpatialAggregationStatistics: { envelope: false, centroid: false, convexHull: false }, supportsDefaultSpatialReference: false, supportsFullTextSearch: false, supportsCompactGeometry: false, supportsSqlExpression: false, supportsTrueCurve: false, tileMaxRecordCount: void 0 }, queryRelated: { supportsCount: false, supportsOrderBy: false, supportsPagination: false, supportsCacheHint: false }, queryTopFeatures: { supportsCacheHint: false }, queryAttributeBins: s4, editing: { supportsDeleteByAnonymous: false, supportsDeleteByOthers: false, supportsGeometryUpdate: false, supportsGlobalId: false, supportsReturnServiceEditsInSourceSpatialReference: false, supportsRollbackOnFailure: false, supportsUpdateByAnonymous: false, supportsUpdateByOthers: false, supportsUploadWithItemId: false, supportsUpdateWithoutM: false, supportsAsyncApplyEdits: false, zDefault: void 0 } };
  }
  _getMaxRecordCount(t2) {
    const e3 = t2?.components?.parameters;
    return e3?.limit?.schema?.maximum ?? e3?.limitFeatures?.schema?.maximum;
  }
  _getStorageSpatialReference(t2) {
    const e3 = t2.storageCrs ?? x, s5 = C(e3);
    return null == s5 ? f.WGS84 : new f({ wkid: s5 });
  }
  _getSupportedSpatialReferences(t2, e3) {
    const s5 = "#/crs", r2 = t2.crs ?? [x], o2 = r2.includes(s5) ? r2.filter((t3) => t3 !== s5).concat(e3.crs ?? []) : r2, p6 = /^http:\/\/www\.opengis.net\/def\/crs\/epsg\/.*\/3785$/i;
    return o2.filter((t3) => !p6.test(t3));
  }
  async _loadOGCServices(t2, s5) {
    const o2 = null != s5 ? s5.signal : null, { apiKey: p6, collectionId: i2, customParameters: u2, fields: n2, geometryType: h2, hasZ: S2, objectIdField: C3, timeInfo: R3, url: w } = t2, v2 = { fields: n2?.map((t3) => t3.toJSON()), geometryType: m2.toJSON(h2), hasZ: S2 ?? false, objectIdField: C3, timeInfo: R3?.toJSON() }, x2 = { apiKey: p6, customParameters: u2, signal: o2 }, j2 = await q2(w, x2), [F, O2] = await Promise.all([P(j2, x2), O(j2, x2)]);
    if (!this._conformsToType(F, "http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/geojson")) throw new s("ogc-feature-layer:no-geojson-support", "Server does not support geojson");
    const D = O2.collections.find(({ id: t3 }) => t3 === i2);
    if (!D) throw new s("ogc-feature-layer:collection-not-found", "Server does not contain the named collection");
    const T = this._conformsToType(F, "http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/oas30") ? await N(j2, x2) : null, A2 = await v(D, v2, x2), b2 = this._getMaxRecordCount(T), q3 = this._getCapabilities(A2.hasZ, b2), P2 = this._getStorageSpatialReference(D).toJSON(), _ = this._getSupportedSpatialReferences(D, O2), Q2 = new RegExp(`^${o(k)}`, "i"), B = {};
    for (const e3 of _) {
      const t3 = C(e3);
      null != t3 && (B[t3] || (B[t3] = e3.replace(Q2, "")));
    }
    this.featureDefinition = { capabilities: q3, collection: D, layerDefinition: A2, spatialReference: P2, supportedCrs: B };
  }
};
r([m()], C2.prototype, "featureDefinition", void 0), r([m({ constructOnly: true })], C2.prototype, "layer", void 0), r([m()], C2.prototype, "type", void 0), C2 = r([a("esri.layers.graphics.sources.OGCFeatureSource")], C2);

// node_modules/@arcgis/core/layers/OGCFeatureLayer.js
var N2 = s3();
var Q = class extends a2(i(e(d2(c(p2(p4(c2(e2(t(b(j(f2(S(h)))))))))))))) {
  constructor(e3) {
    super(e3), this.capabilities = null, this.collectionId = null, this.copyright = null, this.description = null, this.displayField = null, this.elevationInfo = null, this.fields = null, this.fieldsIndex = null, this.fullExtent = null, this.geometryType = null, this.hasZ = void 0, this.labelingInfo = null, this.labelsVisible = true, this.legendEnabled = true, this.maxRecordCount = null, this.objectIdField = null, this.operationalLayerType = "OGCFeatureLayer", this.popupEnabled = true, this.popupTemplate = null, this.screenSizePerspectiveEnabled = true, this.source = new C2({ layer: this }), this.spatialReference = null, this.title = null, this.type = "ogc-feature", this.typeIdField = null, this.types = null, this.url = null;
  }
  destroy() {
    this.source?.destroy();
  }
  load(e3) {
    return this.addResolvingPromise(this.loadFromPortal({ supportedTypes: ["OGCFeatureServer"] }, e3).then(() => this._fetchService(e3))), this.when();
  }
  get defaultPopupTemplate() {
    return this.createPopupTemplate();
  }
  get effectiveMaxRecordCount() {
    return this.maxRecordCount ?? this.capabilities?.query.maxRecordCount ?? 5e3;
  }
  get isTable() {
    return this.loaded && null == this.geometryType;
  }
  set renderer(e3) {
    g2(e3, this.fieldsIndex), this._set("renderer", e3);
  }
  on(e3, r2) {
    return super.on(e3, r2);
  }
  createPopupTemplate(e3) {
    return p5(this, e3);
  }
  createQuery() {
    return new R();
  }
  getField(e3) {
    return this.fieldsIndex.get(e3);
  }
  getFieldDomain(e3, r2) {
    let t2, i2 = false;
    const o2 = r2?.feature?.attributes, s5 = this.typeIdField && o2?.[this.typeIdField];
    return null != s5 && this.types && (i2 = this.types.some((r3) => r3.id == s5 && (t2 = r3.domains?.[e3], "inherited" === t2?.type && (t2 = this._getLayerDomain(e3)), true))), i2 || t2 || (t2 = this._getLayerDomain(e3)), t2;
  }
  queryFeatures(e3, r2) {
    return this.load().then(() => this.source.queryFeatures(R.from(e3) || this.createQuery(), r2)).then((e4) => (e4?.features?.forEach((e5) => {
      e5.layer = e5.sourceLayer = this;
    }), e4));
  }
  async queryAttributeBins(e3, r2) {
    throw new s("OGCFeatureLayer", "Layer source does not support queryAttributeBins capability");
  }
  serviceSupportsSpatialReference(e3) {
    return this.source?.serviceSupportsSpatialReference(e3) ?? false;
  }
  async _fetchService(e3) {
    await this.source.load(e3), this.read(this.source.featureDefinition, { origin: "service" }), g2(this.renderer, this.fieldsIndex), I(this.timeInfo, this.fieldsIndex);
  }
  _getLayerDomain(e3) {
    if (!this.fields) return null;
    for (const r2 of this.fields) if (r2.name === e3 && r2.domain) return r2.domain;
    return null;
  }
};
r([m({ readOnly: true, json: { origins: { service: { read: true } } } })], Q.prototype, "capabilities", void 0), r([m({ type: String, json: { write: true } })], Q.prototype, "collectionId", void 0), r([m({ type: String })], Q.prototype, "copyright", void 0), r([m({ readOnly: true })], Q.prototype, "defaultPopupTemplate", null), r([m({ readOnly: true, type: String, json: { origins: { service: { name: "collection.description" } } } })], Q.prototype, "description", void 0), r([m({ type: String })], Q.prototype, "displayField", void 0), r([m({ type: Number })], Q.prototype, "effectiveMaxRecordCount", null), r([m(m4)], Q.prototype, "elevationInfo", void 0), r([m({ type: [m3], json: { origins: { service: { name: "layerDefinition.fields" } } } })], Q.prototype, "fields", void 0), r([m(N2.fieldsIndex)], Q.prototype, "fieldsIndex", void 0), r([m({ readOnly: true, type: z, json: { origins: { service: { name: "layerDefinition.extent" } } } })], Q.prototype, "fullExtent", void 0), r([m({ type: y.apiValues, json: { origins: { service: { name: "layerDefinition.geometryType", read: { reader: y.read } } } } })], Q.prototype, "geometryType", void 0), r([m({ type: Boolean, json: { origins: { service: { name: "layerDefinition.hasZ" } } } })], Q.prototype, "hasZ", void 0), r([m({ type: Boolean, readOnly: true })], Q.prototype, "isTable", null), r([m({ type: [A], json: { origins: { "web-document": { name: "layerDefinition.drawingInfo.labelingInfo", read: { reader: l2 }, write: true } } } })], Q.prototype, "labelingInfo", void 0), r([m(p3)], Q.prototype, "labelsVisible", void 0), r([m(d)], Q.prototype, "legendEnabled", void 0), r([m({ type: Number })], Q.prototype, "maxRecordCount", void 0), r([m({ type: String, json: { origins: { service: { name: "layerDefinition.objectIdField" } } } })], Q.prototype, "objectIdField", void 0), r([m({ type: ["OGCFeatureLayer"] })], Q.prototype, "operationalLayerType", void 0), r([m(l)], Q.prototype, "popupEnabled", void 0), r([m({ type: q, json: { name: "popupInfo", write: true } })], Q.prototype, "popupTemplate", void 0), r([m({ types: m5, json: { origins: { service: { name: "layerDefinition.drawingInfo.renderer", write: false }, "web-scene": { types: u, name: "layerDefinition.drawingInfo.renderer", write: true } }, name: "layerDefinition.drawingInfo.renderer", write: true } })], Q.prototype, "renderer", null), r([m(s2)], Q.prototype, "screenSizePerspectiveEnabled", void 0), r([m({ readOnly: true })], Q.prototype, "source", void 0), r([m({ readOnly: true, type: f, json: { origins: { service: { read: true } } } })], Q.prototype, "spatialReference", void 0), r([m({ type: String, json: { write: { enabled: true, ignoreOrigin: true, isRequired: true }, origins: { service: { name: "collection.title" } } } })], Q.prototype, "title", void 0), r([m({ readOnly: true, json: { read: false } })], Q.prototype, "type", void 0), r([m({ type: String, readOnly: true })], Q.prototype, "typeIdField", void 0), r([m({ type: [n] })], Q.prototype, "types", void 0), r([m(y2)], Q.prototype, "url", void 0), Q = r([a("esri.layers.OGCFeatureLayer")], Q);
var V = Q;
export {
  V as default
};
//# sourceMappingURL=OGCFeatureLayer-P3IKL4QY.js.map
