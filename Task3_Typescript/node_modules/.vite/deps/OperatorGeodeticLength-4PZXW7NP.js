import {
  w
} from "./chunk-HERLPXJR.js";
import {
  Al,
  Cc,
  Dc,
  Hu,
  Ks,
  Os,
  Tl,
  Zl,
  m,
  qh
} from "./chunk-XOCYWQ7P.js";
import "./chunk-2OTCLWRN.js";
import "./chunk-XZOH57EG.js";
import "./chunk-LSL2QL5U.js";
import {
  P,
  a,
  f,
  j,
  x2 as x
} from "./chunk-DDDUQRA2.js";
import "./chunk-XOMXNJJG.js";
import {
  n,
  s
} from "./chunk-5TPMG26T.js";
import "./chunk-GNMFMITH.js";

// node_modules/@arcgis/core/chunks/OperatorGeodeticLength.js
var P2 = class {
  getOperatorType() {
    return 10311;
  }
  supportsCurves() {
    return true;
  }
  accelerateGeometry(e, t, r) {
    return false;
  }
  canAccelerateGeometry(e) {
    return false;
  }
  execute(e, t, y, x2) {
    if (4 === y) return new w().execute(e, t, x2);
    if (0 === t.getCoordinateSystemType() && P(""), j(e), e.isEmpty() || e.getDimension() < 1) return 0;
    const P3 = t.getGCS(), S = Hu();
    P3.querySpheroidData(S);
    const d = S.majorSemiAxis, j2 = S.e2, E = P3.getUnit().getUnitToBaseFactor();
    let G;
    const v = e.getGeometryType();
    if (v === a.enumPolygon ? G = e.getBoundary() : v === a.enumEnvelope ? G = Ks(e) : f(v) ? (G = new Os({ vd: e.getDescription() }), G.addSegment(e, true)) : G = e, G.hasNonLinearSegments()) {
      G = new m().execute(G, 0, t.getTolerance(0), 0, x2);
    }
    if (P3 !== t) {
      const r = t.getSRToGCSTransform();
      if (t.isPannable()) {
        G = Al(G, t), v === a.enumPolyline && G === e && (G = e.clone());
        const r2 = new x();
        t.getPannableExtent().queryIntervalX(r2);
        for (let e2 = 0, t2 = G.getPointCount(); e2 < t2; e2++) {
          const t3 = G.getXY(e2);
          t3.x = Tl(t3.x, r2), G.setXY(e2, t3);
        }
      }
      const n2 = G.createInstance();
      G = Zl(r, G, n2, x2) ? n2 : new qh().execute(G, r, x2);
    }
    return this._ExecuteMultiPathGeodeticLength(G, y, d, j2, E);
  }
  _ExecuteMultiPathGeodeticLength(r, n2, o, s2, a2) {
    const i = { stack: [], error: void 0, hasError: false };
    try {
      const t = n(i, new Cc(), false);
      let c = 0;
      const m2 = r.querySegmentIterator();
      for (; m2.nextPath(); ) for (; m2.hasNextSegment(); ) {
        const e = m2.nextSegment(), r2 = e.getStartXY(), i2 = e.getEndXY();
        r2.scale(a2), i2.scale(a2), Dc.geodeticDistance(o, s2, r2.x, r2.y, i2.x, i2.y, t, null, null, n2), c += t.val;
      }
      return c;
    } catch (c) {
      i.error = c, i.hasError = true;
    } finally {
      s(i);
    }
  }
};
export {
  P2 as OperatorGeodeticLength
};
//# sourceMappingURL=OperatorGeodeticLength-4PZXW7NP.js.map
