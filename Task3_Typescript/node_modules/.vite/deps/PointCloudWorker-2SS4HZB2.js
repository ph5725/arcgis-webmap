import {
  n as n2,
  t
} from "./chunk-JOUWZB2W.js";
import {
  a,
  d,
  u
} from "./chunk-K4QKI25R.js";
import {
  D,
  U,
  c,
  w
} from "./chunk-KVDS5WGN.js";
import {
  I
} from "./chunk-ZN7Z7TAB.js";
import "./chunk-UZRZVWLE.js";
import "./chunk-RTDWTAVK.js";
import "./chunk-QLJ6JQFC.js";
import "./chunk-VKKELZ6R.js";
import "./chunk-DLD56RZZ.js";
import {
  O
} from "./chunk-FQ4JUVCN.js";
import {
  e
} from "./chunk-3LL6ALVC.js";
import "./chunk-NZPABYQQ.js";
import "./chunk-CCHJ3WNU.js";
import "./chunk-DRAQJS2F.js";
import "./chunk-VNTS5E5O.js";
import {
  Q
} from "./chunk-TMFB3DKM.js";
import "./chunk-H7XUEHGR.js";
import "./chunk-7DFHXN7Z.js";
import "./chunk-NX54JGTL.js";
import "./chunk-7FAVUXK2.js";
import "./chunk-IVNFIIVI.js";
import {
  o
} from "./chunk-UGTICYU7.js";
import "./chunk-3MHRDLQO.js";
import "./chunk-KE3WBZYL.js";
import "./chunk-EOMIFMDH.js";
import "./chunk-DNZK6PPI.js";
import "./chunk-7BWCD63N.js";
import "./chunk-6KFXWKZZ.js";
import "./chunk-RACDQ3AL.js";
import "./chunk-TVM3SZJR.js";
import "./chunk-FPSA4NFH.js";
import {
  f
} from "./chunk-PK2ZR2SJ.js";
import "./chunk-YFPGM5UE.js";
import "./chunk-OXSERRAR.js";
import "./chunk-7HI4VRVW.js";
import "./chunk-ZX46THLM.js";
import "./chunk-E3KEUGUG.js";
import "./chunk-N3XLUQJI.js";
import "./chunk-JUAD7TJ6.js";
import "./chunk-VHLUKPRH.js";
import "./chunk-5TPMG26T.js";
import "./chunk-3NBBZ43U.js";
import "./chunk-VOLWOTEG.js";
import "./chunk-XTNIDRTB.js";
import "./chunk-FGWIXJQY.js";
import "./chunk-TKYAZCMB.js";
import "./chunk-3TBMFSPB.js";
import "./chunk-PSZLDJJA.js";
import "./chunk-ZWFY3WY5.js";
import "./chunk-LQFTAGIV.js";
import "./chunk-S7IJH524.js";
import "./chunk-GZ2P4SCJ.js";
import "./chunk-XWG6QGFK.js";
import "./chunk-GWNLQRNM.js";
import {
  L,
  n2 as n
} from "./chunk-FXKORAMT.js";
import "./chunk-GNMFMITH.js";

// node_modules/@arcgis/core/views/3d/layers/i3s/PointCloudWorkerUtil.js
function i(t2, n3, l, s) {
  const { rendererJSON: i2, isRGBRenderer: u3 } = t2;
  let c4 = null, a3 = null;
  if (n3 && u3) c4 = n3;
  else if (n3 && "pointCloudUniqueValueRenderer" === i2?.type) {
    a3 = u.fromJSON(i2);
    const e2 = a3.colorUniqueValueInfos;
    c4 = new Uint8Array(3 * s);
    const r = d2(a3.fieldTransformType);
    for (let o2 = 0; o2 < s; o2++) {
      const t3 = (r ? r(n3[o2]) : n3[o2]) + "";
      for (let r2 = 0; r2 < e2.length; r2++) if (e2[r2].values.includes(t3)) {
        c4[3 * o2] = e2[r2].color.r, c4[3 * o2 + 1] = e2[r2].color.g, c4[3 * o2 + 2] = e2[r2].color.b;
        break;
      }
    }
  } else if (n3 && "pointCloudStretchRenderer" === i2?.type) {
    a3 = d.fromJSON(i2);
    const e2 = a3.stops;
    c4 = new Uint8Array(3 * s);
    const o2 = d2(a3.fieldTransformType);
    for (let r = 0; r < s; r++) {
      const t3 = o2 ? o2(n3[r]) : n3[r], l2 = e2.length - 1;
      if (t3 < e2[0].value) c4[3 * r] = e2[0].color.r, c4[3 * r + 1] = e2[0].color.g, c4[3 * r + 2] = e2[0].color.b;
      else if (t3 >= e2[l2].value) c4[3 * r] = e2[l2].color.r, c4[3 * r + 1] = e2[l2].color.g, c4[3 * r + 2] = e2[l2].color.b;
      else for (let o3 = 1; o3 < e2.length; o3++) if (t3 < e2[o3].value) {
        const n4 = (t3 - e2[o3 - 1].value) / (e2[o3].value - e2[o3 - 1].value);
        c4[3 * r] = e2[o3].color.r * n4 + e2[o3 - 1].color.r * (1 - n4), c4[3 * r + 1] = e2[o3].color.g * n4 + e2[o3 - 1].color.g * (1 - n4), c4[3 * r + 2] = e2[o3].color.b * n4 + e2[o3 - 1].color.b * (1 - n4);
        break;
      }
    }
  } else if (n3 && "pointCloudClassBreaksRenderer" === i2?.type) {
    a3 = a.fromJSON(i2);
    const r = a3.colorClassBreakInfos;
    c4 = new Uint8Array(3 * s);
    const o2 = d2(a3.fieldTransformType);
    for (let e2 = 0; e2 < s; e2++) {
      const t3 = o2 ? o2(n3[e2]) : n3[e2];
      for (let o3 = 0; o3 < r.length; o3++) if (t3 >= r[o3].minValue && t3 <= r[o3].maxValue) {
        c4[3 * e2] = r[o3].color.r, c4[3 * e2 + 1] = r[o3].color.g, c4[3 * e2 + 2] = r[o3].color.b;
        break;
      }
    }
  } else c4 = new Uint8Array(3 * s).fill(255);
  if (l && a3?.colorModulation) {
    const e2 = a3.colorModulation.minValue, r = a3.colorModulation.maxValue, o2 = 0.3;
    for (let t3 = 0; t3 < s; t3++) {
      const n4 = l[t3], s2 = n4 >= r ? 1 : n4 <= e2 ? o2 : o2 + (1 - o2) * (n4 - e2) / (r - e2);
      c4[3 * t3] = s2 * c4[3 * t3], c4[3 * t3 + 1] = s2 * c4[3 * t3 + 1], c4[3 * t3 + 2] = s2 * c4[3 * t3 + 2];
    }
  }
  return c4;
}
function u2(e2, r) {
  if (null == e2.encoding || "" === e2.encoding) {
    const o2 = U(r, e2);
    if (null == o2.vertexAttributes.position) return;
    const l = w(r, o2.vertexAttributes.position), s = o2.header.fields, i2 = [s.offsetX, s.offsetY, s.offsetZ], u3 = [s.scaleX, s.scaleY, s.scaleZ], c4 = l.length / 3, a3 = new Float64Array(3 * c4);
    for (let e3 = 0; e3 < c4; e3++) a3[3 * e3] = l[3 * e3] * u3[0] + i2[0], a3[3 * e3 + 1] = l[3 * e3 + 1] * u3[1] + i2[1], a3[3 * e3 + 2] = l[3 * e3 + 2] * u3[2] + i2[2];
    return a3;
  }
  if ("lepcc-xyz" === e2.encoding) return c(r).result;
}
function c2(e2, r, o2) {
  return e2?.attributeInfo.useElevation ? r ? a2(r, o2) : null : e2?.attributeInfo.storageInfo ? D(e2.attributeInfo.storageInfo, e2.buffer, o2, true) : null;
}
function a2(e2, r) {
  const o2 = new Float64Array(r);
  for (let t2 = 0; t2 < r; t2++) o2[t2] = e2[3 * t2 + 2];
  return o2;
}
function f2(e2, r, o2, t2, n3) {
  const l = e2.length / 3;
  let s = 0;
  for (let i2 = 0; i2 < l; i2++) {
    let l2 = true;
    for (let e3 = 0; e3 < t2.length && l2; e3++) {
      const { filterJSON: r2 } = t2[e3], o3 = n3[e3].values[i2];
      switch (r2.type) {
        case "pointCloudValueFilter": {
          const e4 = "exclude" === r2.mode;
          r2.values.includes(o3) === e4 && (l2 = false);
          break;
        }
        case "pointCloudBitfieldFilter": {
          const e4 = p(r2.requiredSetBits), t3 = p(r2.requiredClearBits);
          (o3 & e4) === e4 && 0 === (o3 & t3) || (l2 = false);
          break;
        }
        case "pointCloudReturnFilter": {
          const e4 = 15 & o3, t3 = o3 >>> 4 & 15, n4 = t3 > 1, s2 = 1 === e4, i3 = e4 === t3;
          let u3 = false;
          for (const o4 of r2.includedReturns) if ("last" === o4 && i3 || "firstOfMany" === o4 && s2 && n4 || "lastOfMany" === o4 && i3 && n4 || "single" === o4 && !n4) {
            u3 = true;
            break;
          }
          u3 || (l2 = false);
          break;
        }
      }
    }
    l2 && (o2[s] = i2, e2[3 * s] = e2[3 * i2], e2[3 * s + 1] = e2[3 * i2 + 1], e2[3 * s + 2] = e2[3 * i2 + 2], r[3 * s] = r[3 * i2], r[3 * s + 1] = r[3 * i2 + 1], r[3 * s + 2] = r[3 * i2 + 2], s++);
  }
  return s;
}
function d2(e2) {
  switch (e2) {
    default:
    case null:
    case "none":
      return (e3) => e3;
    case "low-four-bit":
      return (e3) => 15 & e3;
    case "high-four-bit":
      return (e3) => (240 & e3) >> 4;
    case "absolute-value":
      return (e3) => Math.abs(e3);
    case "modulo-ten":
      return (e3) => e3 % 10;
  }
}
function p(e2) {
  let r = 0;
  for (const o2 of e2 || []) r |= 1 << o2;
  return r;
}

// node_modules/@arcgis/core/views/3d/layers/PointCloudWorker.js
var c3 = class {
  transform(t2) {
    const e2 = this._transform(t2), o2 = [e2.points.buffer, e2.rgb.buffer];
    null != e2.pointIdFilterMap && o2.push(e2.pointIdFilterMap.buffer);
    for (const a3 of e2.attributes) "buffer" in a3.values && n(a3.values.buffer) && a3.values.buffer !== e2.rgb.buffer && o2.push(a3.values.buffer);
    return Promise.resolve({ result: e2, transferList: o2 });
  }
  _transform(r) {
    const e2 = u2(r.schema, r.geometryBuffer);
    let o2 = e2.length / 3, a3 = null;
    const i2 = new Array(), f3 = c2(r.primaryAttributeData, e2, o2);
    null != r.primaryAttributeData && f3 && i2.push({ attributeInfo: r.primaryAttributeData.attributeInfo, values: f3 });
    const s = c2(r.modulationAttributeData, e2, o2);
    null != r.modulationAttributeData && s && i2.push({ attributeInfo: r.modulationAttributeData.attributeInfo, values: s });
    let c4 = i(r.rendererInfo, f3, s, o2);
    if (r.filterInfo && r.filterInfo.length > 0 && null != r.filterAttributesData) {
      const f4 = r.filterAttributesData.filter(L).map((t2) => {
        const r2 = c2(t2, e2, o2), a4 = { attributeInfo: t2.attributeInfo, values: r2 };
        return i2.push(a4), a4;
      });
      a3 = new Uint32Array(o2), o2 = f2(e2, c4, a3, r.filterInfo, f4);
    }
    for (const t2 of r.userAttributesData) {
      const r2 = c2(t2, e2, o2);
      i2.push({ attributeInfo: t2.attributeInfo, values: r2 });
    }
    3 * o2 < c4.length && (c4 = new Uint8Array(c4.buffer.slice(0, 3 * o2))), I2(e2, o2, r.elevationOffset);
    const A2 = h(e2, o2, I.fromData(r.obbData), f.fromJSON(r.inSR), f.fromJSON(r.outSR));
    return { obbData: r.obbData, points: A2, rgb: c4, attributes: i2, pointIdFilterMap: a3 };
  }
};
function h(t2, r, o2, n3, u3) {
  if (!o(t2, n3, 0, t2, u3, 0, r)) throw new Error("Can't reproject");
  const l = t(o2.center), m = n2(), b = n2(), p2 = t(o2.halfSize);
  O(A, o2.quaternion);
  const c4 = new Float32Array(3 * r);
  for (let e2 = 0; e2 < r; e2++) {
    let r2 = 3 * e2;
    m[0] = t2[r2] - l[0], m[1] = t2[r2 + 1] - l[1], m[2] = t2[r2 + 2] - l[2], Q(b, m, A), p2[0] = Math.max(p2[0], Math.abs(b[0])), p2[1] = Math.max(p2[1], Math.abs(b[1])), p2[2] = Math.max(p2[2], Math.abs(b[2])), c4[r2++] = m[0], c4[r2++] = m[1], c4[r2] = m[2];
  }
  return o2.halfSize = p2, c4;
}
function I2(t2, r, e2) {
  if (0 !== e2) for (let o2 = 0; o2 < r; o2++) t2[3 * o2 + 2] += e2;
}
var A = e();
function g() {
  return new c3();
}
export {
  g as default
};
//# sourceMappingURL=PointCloudWorker-2SS4HZB2.js.map
