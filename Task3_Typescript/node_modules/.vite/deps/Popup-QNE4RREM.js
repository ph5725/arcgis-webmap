import {
  t as t2
} from "./chunk-3JLAYQHR.js";
import {
  F,
  e as e3,
  i as i3,
  n as n3,
  ne,
  t
} from "./chunk-GAXOORY3.js";
import "./chunk-NMV57LDC.js";
import "./chunk-NZUIJLHR.js";
import "./chunk-3U5EJ7ZC.js";
import "./chunk-EK343S5L.js";
import {
  n as n2
} from "./chunk-IAKXH7PU.js";
import "./chunk-TUSII7EA.js";
import "./chunk-YB2E6SEN.js";
import "./chunk-KH55BE33.js";
import "./chunk-WEBPKGFM.js";
import "./chunk-6DARBDBU.js";
import "./chunk-KDQWOWXR.js";
import "./chunk-JOVQBCRD.js";
import "./chunk-FZNL76F2.js";
import "./chunk-ZAIOYQ5Z.js";
import "./chunk-G72VEDU6.js";
import {
  e as e6
} from "./chunk-ZVLZMZFA.js";
import {
  x
} from "./chunk-23GI2JAZ.js";
import "./chunk-KW7LX4F6.js";
import "./chunk-7KOC3Z4A.js";
import "./chunk-QXLW5W5A.js";
import "./chunk-JP4WNKIX.js";
import "./chunk-VQ6WKTQP.js";
import "./chunk-GULEPNE6.js";
import "./chunk-OFHPFWHF.js";
import "./chunk-MZJEBIXX.js";
import "./chunk-VNLFNBKT.js";
import "./chunk-KHEIHGIK.js";
import "./chunk-76QJRCNC.js";
import "./chunk-Z7VYTTYM.js";
import "./chunk-KQZAPZ6K.js";
import "./chunk-UVUJMAAB.js";
import "./chunk-TB5DDCF3.js";
import {
  e as e5
} from "./chunk-T35H3KKO.js";
import "./chunk-XBU3UEEJ.js";
import "./chunk-X3UT6DT7.js";
import "./chunk-JD3UVEVP.js";
import "./chunk-NO2XQDLB.js";
import "./chunk-NBTAZUMP.js";
import {
  i as i4
} from "./chunk-Z53ZFYD2.js";
import "./chunk-NMP7ZOVG.js";
import "./chunk-YHYQP7QX.js";
import "./chunk-XAXNVZUO.js";
import {
  e as e4
} from "./chunk-XNTJ4ENZ.js";
import {
  O,
  c as c2,
  e as e2
} from "./chunk-DIR2YFTR.js";
import {
  L as L2,
  i2,
  j as j2,
  n2 as n
} from "./chunk-ZSRASSN6.js";
import "./chunk-N5GLJRXG.js";
import "./chunk-77M4J56U.js";
import "./chunk-NEBU5XJO.js";
import "./chunk-KXFCAOWK.js";
import "./chunk-VGXBH5PT.js";
import "./chunk-ZUTXZ2PO.js";
import "./chunk-FSVG2RRX.js";
import "./chunk-L3O6KWVI.js";
import "./chunk-2SK5ARBZ.js";
import "./chunk-RNXMAHSA.js";
import "./chunk-VD4HSDHE.js";
import "./chunk-WBSGKMRV.js";
import "./chunk-SBFMUXL3.js";
import "./chunk-PZV6BOD6.js";
import "./chunk-DD7VYTDF.js";
import "./chunk-H7SHPX7W.js";
import "./chunk-WIICHW3C.js";
import "./chunk-T4BWGCN6.js";
import "./chunk-AC7GOP3F.js";
import "./chunk-XPKVLOAO.js";
import "./chunk-GESOBEYT.js";
import "./chunk-3IU6SQCC.js";
import "./chunk-E7YVYF37.js";
import "./chunk-E76L26GR.js";
import "./chunk-GG4VLKUY.js";
import "./chunk-IL45XPTT.js";
import "./chunk-6MFKAT6L.js";
import "./chunk-NOWX6W7R.js";
import "./chunk-OQ76WPLD.js";
import "./chunk-KSVHYEPS.js";
import "./chunk-YOMN3PFE.js";
import "./chunk-UTU6N7VJ.js";
import "./chunk-RV3SBM2C.js";
import "./chunk-4GXVCEW4.js";
import "./chunk-KQINCOQL.js";
import "./chunk-B6C7UPBZ.js";
import "./chunk-IUQBXXYO.js";
import "./chunk-7WKBQS4R.js";
import "./chunk-SJHAGLIM.js";
import "./chunk-Z6OMEWWC.js";
import "./chunk-MULCOUFY.js";
import "./chunk-VGIEH4HM.js";
import "./chunk-XLF2NMGX.js";
import "./chunk-X5GD6LFD.js";
import "./chunk-G4PMFSAZ.js";
import "./chunk-MX5VW6PC.js";
import "./chunk-JJNHUYXK.js";
import "./chunk-UG6RJXJ2.js";
import "./chunk-OTCYHWWG.js";
import "./chunk-UDSZVLDS.js";
import "./chunk-UGXCZZ7N.js";
import "./chunk-OTSYE6UT.js";
import "./chunk-K5LVZUBF.js";
import "./chunk-J7LSFQNH.js";
import "./chunk-AGDHKBKD.js";
import "./chunk-OC2XWDW2.js";
import "./chunk-C3JHRSMA.js";
import "./chunk-M2UZRY7C.js";
import "./chunk-HUVZEBBO.js";
import "./chunk-VLPG2W66.js";
import "./chunk-GH7GZNY6.js";
import "./chunk-G5DA3EEG.js";
import "./chunk-D443BZKU.js";
import "./chunk-7DFHXN7Z.js";
import "./chunk-NX54JGTL.js";
import "./chunk-I6IIPG56.js";
import "./chunk-JEYXDNAT.js";
import "./chunk-DJJNSAUR.js";
import "./chunk-PZBXBPVO.js";
import "./chunk-TMC6HYGQ.js";
import "./chunk-7FAVUXK2.js";
import "./chunk-IVNFIIVI.js";
import "./chunk-T4QXFCFF.js";
import "./chunk-BFUOEOXA.js";
import "./chunk-NOGWEW4X.js";
import "./chunk-ZCZERMS4.js";
import "./chunk-7CUBIFKN.js";
import "./chunk-GPMIOMDJ.js";
import "./chunk-RGFH75DR.js";
import "./chunk-FEGY3M6U.js";
import "./chunk-RWRC6JKB.js";
import "./chunk-M6AESODI.js";
import "./chunk-NY6S6EMV.js";
import "./chunk-AQGMTI4V.js";
import "./chunk-QG7JWSBW.js";
import "./chunk-YSCIEMYQ.js";
import "./chunk-ZXGBNDYM.js";
import "./chunk-GOWWJ2HE.js";
import "./chunk-5GBXHGKW.js";
import "./chunk-7ZMGKXLG.js";
import "./chunk-JMXPE5PE.js";
import "./chunk-LL73CCBG.js";
import "./chunk-6TS2ZJL4.js";
import "./chunk-IBGTNH54.js";
import "./chunk-ROVRMLYN.js";
import "./chunk-SYPTUUSZ.js";
import "./chunk-L7EN54WK.js";
import "./chunk-6QTMK7BB.js";
import "./chunk-BNO7HCVD.js";
import {
  O as O2,
  Q,
  X
} from "./chunk-7NMH5MM5.js";
import "./chunk-TCIXF7MM.js";
import "./chunk-UGTICYU7.js";
import "./chunk-3MHRDLQO.js";
import "./chunk-F4KXGA4J.js";
import "./chunk-ZAISHGSP.js";
import "./chunk-KHRHKYU2.js";
import {
  d as d2
} from "./chunk-2IMSGFJN.js";
import "./chunk-VHTQ5H2C.js";
import {
  a as a3,
  c3,
  p2 as p
} from "./chunk-YX2VTIZR.js";
import "./chunk-LYSDGL5S.js";
import "./chunk-SRJX4QLW.js";
import "./chunk-WPTJIN2M.js";
import "./chunk-KUP5BM5G.js";
import {
  m as m2
} from "./chunk-HNQNVI5C.js";
import "./chunk-G34OBNLT.js";
import "./chunk-WJUYGRZY.js";
import "./chunk-FKFXOPPT.js";
import "./chunk-KE3WBZYL.js";
import "./chunk-EOMIFMDH.js";
import "./chunk-QFU5COFB.js";
import "./chunk-45ILJ6ZH.js";
import "./chunk-VCRP2PLV.js";
import "./chunk-BDLVUYG2.js";
import "./chunk-6QA2BVC5.js";
import "./chunk-HWKQJUGY.js";
import "./chunk-QVKLS4LH.js";
import "./chunk-2KVNXQA7.js";
import "./chunk-XDCUZFJX.js";
import "./chunk-DNZK6PPI.js";
import "./chunk-7BWCD63N.js";
import "./chunk-65K4DQAH.js";
import "./chunk-MUKDJQWB.js";
import "./chunk-6KFXWKZZ.js";
import "./chunk-HPGYEHVI.js";
import "./chunk-YBJ5GVXQ.js";
import {
  V
} from "./chunk-X3R5OB6L.js";
import "./chunk-RACDQ3AL.js";
import "./chunk-TEXTBDH7.js";
import "./chunk-N3A2BVTW.js";
import "./chunk-IGYEHOTB.js";
import "./chunk-TVM3SZJR.js";
import "./chunk-52HWRRRQ.js";
import "./chunk-VNTEV3V4.js";
import "./chunk-OGOQOMMV.js";
import "./chunk-7Z3AF3B2.js";
import "./chunk-6GWORUT3.js";
import {
  s as s2
} from "./chunk-U57T7EQN.js";
import {
  o as o2
} from "./chunk-CMHHL5UO.js";
import "./chunk-XHYOFJ4U.js";
import "./chunk-HCYE6OE4.js";
import "./chunk-KJSBBQ22.js";
import {
  e
} from "./chunk-LMEOPAGQ.js";
import {
  o
} from "./chunk-YIV2QKTZ.js";
import {
  U,
  a as a2,
  f as f2,
  h,
  j,
  l
} from "./chunk-A3VAC24F.js";
import "./chunk-FPSA4NFH.js";
import "./chunk-UY6B6IVT.js";
import "./chunk-6PV45IYU.js";
import "./chunk-SRQCQD63.js";
import "./chunk-FIRNXFAH.js";
import "./chunk-O5TPFXRT.js";
import {
  _,
  j as j3
} from "./chunk-Q6XRAGMA.js";
import "./chunk-JUAPMINU.js";
import {
  f as f3
} from "./chunk-PK2ZR2SJ.js";
import "./chunk-YFPGM5UE.js";
import "./chunk-OXSERRAR.js";
import "./chunk-7HI4VRVW.js";
import "./chunk-ZX46THLM.js";
import "./chunk-Y2ZIOB7Y.js";
import "./chunk-KTUX3OKX.js";
import "./chunk-E3KEUGUG.js";
import {
  b as b2,
  m
} from "./chunk-N3XLUQJI.js";
import {
  a2 as a
} from "./chunk-JUAD7TJ6.js";
import "./chunk-VHLUKPRH.js";
import {
  r
} from "./chunk-5TPMG26T.js";
import "./chunk-3NBBZ43U.js";
import "./chunk-VOLWOTEG.js";
import {
  R
} from "./chunk-XTNIDRTB.js";
import "./chunk-FGWIXJQY.js";
import "./chunk-TKYAZCMB.js";
import "./chunk-3TBMFSPB.js";
import "./chunk-PSZLDJJA.js";
import "./chunk-ZWFY3WY5.js";
import "./chunk-LQFTAGIV.js";
import "./chunk-S7IJH524.js";
import {
  A,
  b,
  d,
  f2 as f,
  k
} from "./chunk-GZ2P4SCJ.js";
import {
  c,
  i2 as i,
  s
} from "./chunk-XWG6QGFK.js";
import "./chunk-GWNLQRNM.js";
import {
  L
} from "./chunk-FXKORAMT.js";
import "./chunk-GNMFMITH.js";

// node_modules/@arcgis/core/geometry/support/geometryUtils.js
function n4(e11) {
  switch (e11?.type) {
    case "point":
      return e11;
    case "extent":
      return e11.center;
    case "polygon":
      return e11.centroid;
    case "multipoint":
    case "polyline":
      return e11.extent?.center;
    default:
      return null;
  }
}

// node_modules/@arcgis/core/support/actions/actionUtils.js
var e7 = () => c2({ action: () => import("./calcite-action-WHCNA6YX.js") });
function n5(t5, o5, e11) {
  const { title: n8, textEnabled: c8 } = o5, { type: s4, active: r3, uid: d4, disabled: l4, indicator: u2 } = t5;
  return t5.visible ? n("calcite-action", { ...o5, active: "toggle" === s4 && t5.value, appearance: "solid", "data-action-id": t5.id, "data-action-uid": d4, disabled: l4, icon: a4(t5), indicator: u2, loading: r3, scale: "s", text: n8 ?? "", title: c8 ? void 0 : n8 }, e11) : null;
}
function a4(t5) {
  return t5.icon ? t5.icon : "image" in t5 && t5.image || t5.className ? void 0 : "question";
}
function c4(t5) {
  return t5 ? { backgroundImage: `url(${t5})` } : {};
}
function s3({ action: t5, feature: i6 }) {
  const e11 = i6?.attributes, n8 = "image" in t5 ? t5.image : void 0;
  return n8 && e11 ? s2(n8, e11) : n8 ?? "";
}

// node_modules/@arcgis/core/widgets/support/AnchorElementViewModel.js
var c5 = class extends o.EventedAccessor {
  constructor(e11) {
    super(e11), this.location = null, this.screenLocationEnabled = false, this.view = null, this.addHandles([f2(() => {
      const e12 = this.screenLocationEnabled ? this.view : null;
      return e12 ? [e12.size, "3d" === e12.type ? e12.camera : e12.viewpoint] : null;
    }, () => this.notifyChange("screenLocation")), l(() => this.screenLocation, (e12, o5) => {
      null != e12 && null != o5 && this.emit("view-change");
    })]);
  }
  destroy() {
    this.view = null;
  }
  get screenLocation() {
    const { location: e11, view: o5, screenLocationEnabled: t5 } = this, r3 = o5?.spatialReference, s4 = r3 ? X(e11, r3).geometry : null;
    return t5 && s4 && o5?.ready ? o5.toScreen(s4) : null;
  }
};
r([m()], c5.prototype, "location", void 0), r([m()], c5.prototype, "screenLocation", null), r([m()], c5.prototype, "screenLocationEnabled", void 0), r([m()], c5.prototype, "view", void 0), c5 = r([a("esri.widgets.support.AnchorElementViewModel")], c5);

// node_modules/@arcgis/core/widgets/Spinner/SpinnerViewModel.js
var t3 = class extends c5 {
  constructor(o5) {
    super(o5), this.visible = false;
  }
};
r([m()], t3.prototype, "visible", void 0), t3 = r([a("esri.widgets.Spinner.SpinnerViewModel")], t3);

// node_modules/@arcgis/core/widgets/Spinner.js
var a5 = "esri-spinner";
var c6 = { base: a5, spinnerStart: `${a5}--start`, spinnerFinish: `${a5}--finish` };
var p2 = class extends O {
  constructor(i6, e11) {
    super(i6, e11), this._animationDelay = 500, this._animationPromise = null, this.viewModel = new t3();
  }
  initialize() {
    this.addHandles(l(() => this.visible, (i6) => this._visibleChange(i6)));
  }
  destroy() {
    this._animationPromise = null;
  }
  get location() {
    return this.viewModel.location;
  }
  set location(i6) {
    this.viewModel.location = i6;
  }
  get view() {
    return this.viewModel.view;
  }
  set view(i6) {
    this.viewModel.view = i6;
  }
  get visible() {
    return this.viewModel.visible;
  }
  set visible(i6) {
    this.viewModel.visible = i6;
  }
  show(i6) {
    const { location: e11, promise: t5 } = i6 ?? {};
    e11 && (this.viewModel.location = e11), this.visible = true;
    const s4 = () => this.hide();
    t5 && t5.catch(() => {
    }).then(s4);
  }
  hide() {
    this.visible = false;
  }
  render() {
    const { visible: i6 } = this, { screenLocation: e11 } = this.viewModel, t5 = !!e11, s4 = i6 && t5, o5 = !i6 && t5, r3 = { [c6.spinnerStart]: s4, [c6.spinnerFinish]: o5 }, n8 = this._getPositionStyles();
    return n("div", { class: this.classes(c6.base, r3), styles: n8 });
  }
  _visibleChange(i6) {
    if (i6) return void (this.viewModel.screenLocationEnabled = true);
    const t5 = A(this._animationDelay);
    this._animationPromise = t5, t5.catch(() => {
    }).then(() => {
      this._animationPromise === t5 && (this.viewModel.screenLocationEnabled = false, this._animationPromise = null);
    });
  }
  _getPositionStyles() {
    const { screenLocation: i6, view: e11 } = this.viewModel;
    if (null == e11 || null == i6) return {};
    const { padding: t5 } = e11;
    return { left: i6.x - t5.left + "px", top: i6.y - t5.top + "px" };
  }
};
r([m()], p2.prototype, "location", null), r([m()], p2.prototype, "view", null), r([m({ type: t3 })], p2.prototype, "viewModel", void 0), r([m()], p2.prototype, "visible", null), p2 = r([a("esri.widgets.Spinner")], p2);

// node_modules/@arcgis/core/widgets/Features/css.js
var e8 = "esri-features";
var n6 = { icon: `${e8}__icon`, actionImage: `${e8}__action-image`, base: e8, container: `${e8}__container`, contentContainer: `${e8}__content-container`, contentFeature: `${e8}__content-feature`, flowItemCollapsed: `${e8}__flow-item--collapsed`, header: `${e8}__header`, footer: `${e8}__footer`, featureMenuObserver: `${e8}__feature-menu-observer`, actionExit: `${e8}__action--exit`, loader: `${e8}__loader`, featuresHeading: `${e8}__heading`, paginationText: `${e8}__pagination-text`, paginationActionBar: `${e8}__pagination-action-bar`, paginationMenuButton: `${e8}__pagination-menu-button`, paginationPrevious: `${e8}__pagination-previous`, paginationNext: `${e8}__pagination-next` };

// node_modules/@arcgis/core/widgets/Popup/actions.js
var i5 = V.ofType({ key: "type", defaultKeyValue: "button", base: p, typeMap: { button: c3, toggle: a3 } });
var n7 = new c3({ icon: "magnifying-glass-plus", id: "zoom-to-feature", title: "{messages.zoom}", className: i3.zoomInMagnifyingGlass });
var r2 = new c3({ icon: "trash", id: "remove-selected-feature", title: "{messages.remove}", className: i3.trash });
var l2 = new c3({ icon: "magnifying-glass-plus", id: "zoom-to-clustered-features", title: "{messages.zoom}", className: i3.zoomInMagnifyingGlass });
var m3 = new a3({ icon: "table", id: "browse-clustered-features", title: "{messages.browseClusteredFeatures}", className: i3.table, value: false });

// node_modules/@arcgis/core/widgets/Features/FeaturesDrillIn.js
var h2 = n7.clone();
var f5 = class extends O {
  constructor(e11, t5) {
    super(e11, t5), this.flowItems = null, this.messages = null, this.closed = false, this.closable = true, this.selectLastFlowItem = true, this._handleOpenFeature = (e12) => {
      this.emit("open-feature", { feature: e12 });
    }, this._handleZoomToFeature = (e12) => {
      this.emit("zoom-to-feature", { featureWidget: e12 });
    };
  }
  loadDependencies() {
    return Promise.all([e7(), c2({ action: () => import("./calcite-action-WHCNA6YX.js"), "action-bar": () => import("./calcite-action-bar-FO2F7RZN.js"), "action-group": () => import("./calcite-action-group-3KY3ZKMQ.js"), "flow-item": () => import("./calcite-flow-item-WUKINKLM.js") })]);
  }
  render() {
    const { flowItems: e11 } = this, t5 = e11?.toArray();
    return n(i2, null, t5?.map((e12, o5) => this._renderFlowItem(e12, this.selectLastFlowItem && o5 === t5.length - 1)));
  }
  _handleCloseClick() {
    this.emit("close");
  }
  _handleExitClick() {
    this.emit("exit");
  }
  _handleDrillInBackClick() {
    const { flowItems: e11 } = this, t5 = e11?.pop();
    t5 && ("activeCategory" in t5.viewModel ? (t5.viewModel.activeCategory = null, e11?.length || (t5.viewModel.showAllEnabled = false)) : "showAllEnabled" in t5.viewModel && (t5.viewModel.showAllEnabled = false), t5 && (t5.viewModel = null, t5.destroy()));
  }
  _getExitMessage(e11) {
    switch (e11.flowType) {
      case "feature":
      case "feature-association":
        return "";
      case "feature-relationship":
        return this.messages.exitRelatedRecords;
      case "feature-utility-network-associations":
      case "feature-utility-network-association-type":
        return this.messages.exitAssociations;
    }
  }
  _renderFlowItem(e11, o5) {
    const { messages: i6, closable: s4, closed: r3 } = this, c8 = "graphic" in e11 && !e11.isTable, n8 = "feature-association" === e11.flowType, p4 = this._getExitMessage(e11), d4 = i6.selectFeature;
    return n("calcite-flow-item", { bind: this, closable: s4, closed: r3, description: c(this._getDrillInFlowItemDescription(e11) ?? ""), heading: c(e11.title ?? ""), key: `flow-item-${e11.viewModel.uid}`, selected: o5, onCalciteFlowItemBack: (e12) => {
      e12.preventDefault(), this._handleDrillInBackClick();
    }, onCalciteFlowItemClose: this._handleCloseClick }, n("calcite-action", { appearance: "transparent", bind: this, class: n6.actionExit, icon: "move-up", key: "exit-action", onclick: this._handleExitClick, slot: "header-actions-start", text: p4, title: p4 }), c8 ? n("calcite-action", { appearance: "transparent", bind: this, icon: "zoom-to-object", key: "open-feature-action", onclick: () => this._handleOpenFeature(e11), slot: "header-actions-end", text: d4, title: d4 }) : null, n8 ? n("calcite-action-bar", { expandDisabled: true, expanded: true, key: "header-action-bar", scale: "s", slot: "action-bar" }, n("calcite-action-group", { overlayPositioning: "fixed", scale: "s" }, n5(h2, { key: `action-${h2.uid}`, title: this._getActionTitle(h2), text: this._getActionTitle(h2), textEnabled: true, onclick: () => this._handleZoomToFeature(e11), bind: this }))) : null, n("div", { class: n6.container }, e11.render()));
  }
  _getActionTitle(e11) {
    const { messages: t5 } = this, o5 = e11.title ?? "";
    return "zoom-to-feature" === e11.id ? s2(o5, { messages: t5 }) : o5;
  }
  _getDrillInFlowItemDescription(e11) {
    switch (e11.flowType) {
      case "feature":
      case "feature-association":
      case "feature-utility-network-associations":
        return e11.viewModel.description ?? "";
      case "feature-relationship":
        return e11.allItemsDescription;
      case "feature-utility-network-association-type":
        return e11.description ?? "";
    }
  }
};
r([m()], f5.prototype, "flowItems", void 0), r([m(), e2("esri/widgets/Features/t9n/Features")], f5.prototype, "messages", void 0), r([m()], f5.prototype, "closed", void 0), r([m()], f5.prototype, "closable", void 0), r([m()], f5.prototype, "selectLastFlowItem", void 0), f5 = r([a("esri.widgets.Features.FeaturesDrillIn")], f5);

// node_modules/@arcgis/core/layers/LayerConstants.js
var o3 = "OBJECTID";

// node_modules/@arcgis/core/widgets/Popup/actionUtils.js
var c7 = "esri.widgets.Popup.PopupViewModel";
var u = () => i.getLogger(c7);
var l3 = (t5) => {
  const { event: r3, view: c8, viewModel: u2 } = t5, { action: l4 } = r3;
  if (!l4) return Promise.reject(new s("trigger-action:missing-arguments", "Event has no action"));
  const { disabled: d4, id: g2 } = l4;
  if (!g2) return Promise.reject(new s("trigger-action:invalid-action", "action.id is missing"));
  if (d4) return Promise.reject(new s("trigger-action:invalid-action", "Action is disabled"));
  if (g2 === n7.id) return f6(u2).catch(f);
  if (g2 === l2.id) return m4(u2);
  if (g2 === m3.id) return u2.browseClusterEnabled = !u2.browseClusterEnabled, u2.featureMenuOpen = u2.browseClusterEnabled, Promise.resolve();
  if (g2 === r2.id) {
    u2.visible = false;
    const { selectedFeature: t6 } = u2;
    if (!t6) return Promise.reject(new s(`trigger-action:${r2.id}`, "selectedFeature is required", { selectedFeature: t6 }));
    const { sourceLayer: r4 } = t6;
    return r4 ? r4.remove(t6) : c8?.graphics.remove(t6), Promise.resolve();
  }
  return Promise.resolve();
};
function d3(e11) {
  const { selectedFeature: t5, location: r3, view: o5 } = e11;
  return o5 ? t5 ?? r3 ?? null : null;
}
function g(e11) {
  return !!e11 && e11.isAggregate && "cluster" === e11.sourceLayer?.featureReduction?.type;
}
async function w(e11, t5) {
  if ("3d" !== t5?.type || !e11 || "esri.Graphic" !== e11.declaredClass) return true;
  const r3 = t5.getViewForGraphic(e11);
  if (r3 && "whenGraphicBounds" in r3) {
    let t6 = null;
    try {
      t6 = await r3.whenGraphicBounds(e11, { useViewElevation: true });
    } catch (o5) {
    }
    return !t6 || !t6.boundingBox || t6.boundingBox[0] === t6.boundingBox[3] && t6.boundingBox[1] === t6.boundingBox[4] && t6.boundingBox[2] === t6.boundingBox[5];
  }
  return true;
}
async function f6(t5, o5) {
  const { location: n8, selectedFeature: a8, view: s4, zoomFactor: c8 } = t5;
  await o5?.viewModel?.updateGeometry();
  const l4 = o5?.graphic, g2 = l4?.geometry ? l4 : d3(t5);
  if (!s4 || !g2) {
    const t6 = new s("zoom-to:invalid-target-or-view", "Cannot zoom to location without a target and view.", { target: g2, view: s4 });
    throw u().error(t6), t6;
  }
  const f7 = s4.scale / c8, m5 = l4?.geometry ?? t5.selectedFeature?.geometry ?? n8, v2 = null != m5 && "point" === m5.type && await w(l4 ?? a8, s4);
  n7.active = true, n7.disabled = true;
  try {
    await t5.zoomTo({ target: { target: g2, scale: v2 ? f7 : void 0 } });
  } catch (p4) {
    if (b(p4)) return;
    const t6 = new s("zoom-to:invalid-graphic", "Could not zoom to the location of the graphic.", { graphic: l4 ?? a8 });
    u().error(t6);
  } finally {
    n7.active = false, n7.disabled = false, t5.zoomToLocation = null, v2 && (t5.location = m5);
  }
}
async function m4(t5) {
  const { selectedFeature: r3, view: o5 } = t5;
  if ("2d" !== o5?.type) {
    const t6 = new s("zoomToCluster:invalid-view", "View must be 2d MapView.", { view: o5 });
    throw u().error(t6), t6;
  }
  if (!r3 || !g(r3)) {
    const t6 = new s("zoomToCluster:invalid-selectedFeature", "Selected feature must represent an aggregate/cluster graphic.", { selectedFeature: r3 });
    throw u().error(t6), t6;
  }
  const [i6, a8] = await y(o5, r3);
  l2.active = true, l2.disabled = true;
  const { extent: s4 } = await i6.queryExtent(a8);
  s4 && await t5.zoomTo({ target: s4 }), l2.active = false, l2.disabled = false;
}
async function v(e11) {
  const { view: t5, selectedFeature: r3 } = e11;
  if (!t5 || !r3) return;
  const [o5, i6] = await y(t5, r3), { extent: n8 } = await o5.queryExtent(i6);
  e11.selectedClusterBoundaryFeature.geometry = n8, t5.graphics.add(e11.selectedClusterBoundaryFeature);
}
async function p3(e11) {
  const { selectedFeature: t5, view: r3 } = e11;
  if (!r3 || !t5) return;
  const [o5, i6] = await y(r3, t5);
  m3.active = true, m3.disabled = true;
  const { features: n8 } = await o5.queryFeatures(i6);
  m3.active = false, m3.disabled = false, m3.value = true;
  const s4 = { features: [t5].concat(n8) };
  "feature" === e11?.initialDisplayMode && (s4.featureMenuOpen = true), e11?.open(s4);
}
async function y(e11, t5) {
  const r3 = await e11.whenLayerView(t5.sourceLayer), o5 = r3.createQuery(), i6 = t5.getObjectId();
  return o5.aggregateIds = null != i6 ? [i6] : [], [r3, o5];
}
function h3(e11) {
  m3.value = false;
  const t5 = e11.features.filter((e12) => g(e12));
  t5.length && (e11.features = t5);
}

// node_modules/@arcgis/core/widgets/Features/FeaturesViewModel.js
var B = "location-scale-handle";
var H = () => [n7.clone()];
var U2 = () => [l2.clone(), m3.clone()];
var G = null;
function Z(e11, t5) {
  return "building-scene" === e11 || "map-image" === e11 || "tile" === e11 || "imagery" === e11 || "2d" === t5 && "imagery-tile" === e11;
}
var z2 = class extends i4(c5) {
  constructor(e11) {
    super(e11), this._pendingPromises = new t2(), this._fetchFeaturesController = null, this._highlightPromises = { "highlight-active-feature": null, "highlight-selected-feature": null }, this._selectedClusterFeature = null, this.actions = new i5(), this.activeFeature = null, this.autoCloseEnabled = false, this.browseClusterEnabled = false, this.content = null, this.defaultPopupTemplateEnabled = false, this.featurePage = null, this.featuresPerPage = 20, this.featureMenuOpen = false, this.featureMenuTitle = null, this.featureViewModelAbilities = null, this.featureViewModels = [], this.highlightEnabled = true, this.includeDefaultActions = true, this.initialDisplayMode = "feature", this.selectedClusterBoundaryFeature = new d2({ symbol: new m2({ outline: { width: 1.5, color: "cyan" }, style: "none" }) }), this.title = null, this.updateLocationEnabled = false, this.view = null, this.visible = false, this.zoomFactor = 4, this.zoomToLocation = null, this._debouncedLocationUpdate = k(async (e12) => {
      const { spatialReference: t5 } = this, i6 = this.selectedFeature?.geometry?.type, s4 = this.location ?? e12;
      if (i6 && "mesh" !== i6 && t5 && s4 && this.selectedFeature) if ("point" !== i6) try {
        const e13 = this.selectedFeature;
        let i7 = e13.geometry;
        const r3 = this._getHighlightLayer(e13), o5 = e13.getObjectId();
        if (!r3 || !this.view) return;
        if (o5) {
          const e14 = this.view?.allLayerViews.find((e15) => e15.layer.uid === r3.uid);
          if (!e14 || !("queryFeatures" in e14)) return;
          const s5 = e14.createQuery();
          s5.outSpatialReference = t5, s5.objectIds = [o5], s5.returnGeometry = true;
          const { features: a9 } = await e14.queryFeatures(s5);
          i7 = a9[0]?.geometry;
        }
        if (!i7 || "mesh" === i7.type) return;
        i7 = O2(i7, t5), G || (G = await Promise.all([await import("./intersectsOperator-6R5EVC7G.js"), await import("./proximityOperator-DZ25Z7XA.js")]));
        const [a8, n8] = G;
        if (!a8.execute(i7, s4)) {
          const t6 = n8.getNearestCoordinate(i7, s4).coordinate ?? s4;
          this.selectedFeature === e13 && (this.location = t6);
        }
      } catch (o5) {
        b(o5) || i.getLogger(this).error(o5);
      }
      else this.location = n4(this.selectedFeature.geometry) ?? s4;
    });
  }
  initialize() {
    this.addHandles([this.on("view-change", () => this._autoClose()), l(() => [this.highlightEnabled, this.selectedFeature, this.visible, this.view], () => this._highlightSelectedFeature()), l(() => [this.highlightEnabled, this.activeFeature, this.visible, this.view], () => this._highlightActiveFeature()), l(() => this.view?.animation?.state, (e11) => this._animationStateChange(e11)), l(() => this.location, (e11) => this._locationChange(e11)), l(() => this.selectedFeature, (e11) => this._selectedFeatureChange(e11)), l(() => [this.selectedFeatureIndex, this.featureCount, this.featuresPerPage], () => this._selectedFeatureIndexChange()), l(() => [this.featurePage, this.selectedFeatureIndex, this.featureCount, this.featuresPerPage, this.featureViewModels], () => this._setGraphicOnFeatureViewModels()), l(() => this.featureViewModels, () => this._featureViewModelsChange()), this.on("trigger-action", (e11) => l3({ event: e11, viewModel: this, view: this.view })), f2(() => !this.waitingForResult, () => this._waitingForResultChange(), U), l(() => [this.features, this.map, this.spatialReference, this.timeZone], () => this._updateFeatureVMs()), l(() => this.view?.scale, () => this._viewScaleChange()), f2(() => !this.visible, () => this.browseClusterEnabled = false), l(() => this.browseClusterEnabled, (e11) => e11 ? this.enableClusterBrowsing() : this.disableClusterBrowsing())]);
  }
  destroy() {
    this._cancelFetchingFeatures(), this._pendingPromises.clear(), this.browseClusterEnabled = false, this.view = null, this.map = null, this.spatialReference = null, this.timeZone = null;
  }
  get active() {
    return !(!this.visible || this.waitingForResult);
  }
  get allActions() {
    const e11 = this._get("allActions") || new i5();
    e11.removeAll();
    const { actions: t5, defaultActions: i6, defaultPopupTemplateEnabled: s4, includeDefaultActions: r3, selectedFeature: o5 } = this, a8 = r3 ? i6.concat(t5) : t5, n8 = o5 && ("function" == typeof o5.getEffectivePopupTemplate && o5.getEffectivePopupTemplate(s4) || o5.popupTemplate), l4 = n8?.actions, u2 = n8?.overwriteActions ? l4 : l4?.concat(a8) ?? a8;
    return u2?.filter(Boolean).forEach((t6) => e11.add(t6)), e11;
  }
  get defaultActions() {
    const e11 = this._get("defaultActions") || new i5();
    return e11.removeAll(), e11.addMany(g(this.selectedFeature) ? U2() : H()), e11;
  }
  get featureCount() {
    return this.features.length;
  }
  set features(e11) {
    const t5 = e11 || [];
    this._set("features", t5);
    const { pendingPromisesCount: i6, promiseCount: s4, selectedFeatureIndex: r3 } = this, o5 = s4 && t5.length;
    "list" !== this.initialDisplayMode ? o5 && i6 && -1 === r3 ? this.selectedFeatureIndex = 0 : o5 && -1 !== r3 || (this.selectedFeatureIndex = t5.length ? 0 : -1) : (!o5 || o5 && i6 === s4) && (this.selectedFeatureIndex = -1);
  }
  set location(e11) {
    let t5 = e11;
    const i6 = this.spatialReference?.isWebMercator, s4 = e11?.spatialReference?.isWGS84;
    s4 && i6 && (t5 = j3(e11)), this._set("location", t5);
  }
  get map() {
    return this.view?.map ?? null;
  }
  set map(e11) {
    this._override("map", e11);
  }
  get pendingPromisesCount() {
    return this._pendingPromises.size;
  }
  get promiseCount() {
    return this.promises.length;
  }
  get promises() {
    return this._get("promises") || [];
  }
  set promises(e11) {
    this._pendingPromises.clear(), this.features = [], Array.isArray(e11) && e11.length ? (this._set("promises", e11), (e11 = e11.slice()).forEach((e12) => this._pendingPromises.add(e12)), e11.reduce((e12, t5) => e12.finally(() => t5.then((e13) => {
      this._pendingPromises.has(t5) && this._updateFeatures(e13);
    }).finally(() => this._pendingPromises.delete(t5)).catch(() => {
    })), Promise.resolve())) : this._set("promises", []);
  }
  get selectedFeature() {
    const { features: e11, selectedFeatureIndex: t5 } = this;
    if (-1 === t5) return null;
    return e11[t5] || null;
  }
  get selectedFeatureIndex() {
    const e11 = this._get("selectedFeatureIndex");
    return "number" == typeof e11 ? e11 : -1;
  }
  set selectedFeatureIndex(e11) {
    const { featureCount: t5 } = this;
    (isNaN(e11) || e11 < 0 || !t5) && (e11 = -1), this.activeFeature = null, this._set("selectedFeatureIndex", e11);
  }
  get selectedFeatureViewModel() {
    return this.featureViewModels[this.selectedFeatureIndex] || null;
  }
  get spatialReference() {
    return this.view?.spatialReference ?? null;
  }
  set spatialReference(e11) {
    this._override("spatialReference", e11);
  }
  get state() {
    const { view: e11, map: t5 } = this;
    return e11 ? e11.ready ? "ready" : "disabled" : t5 ? "ready" : "disabled";
  }
  get timeZone() {
    return this.view?.timeZone ?? e;
  }
  set timeZone(e11) {
    this._overrideIfSome("timeZone", e11);
  }
  get waitingForContents() {
    return this.featureViewModels.some((e11) => e11.waitingForContent);
  }
  get waitingForResult() {
    return !(!(!!this._fetchFeaturesController || this.pendingPromisesCount > 0) || 0 !== this.featureCount);
  }
  centerAtLocation() {
    const { view: e11 } = this, t5 = d3(this);
    return t5 && e11 ? this.callGoTo({ target: { target: t5, scale: e11.scale } }) : Promise.reject(new s("center-at-location:invalid-target-or-view", "Cannot center at a location without a target and view.", { target: t5, view: e11 }));
  }
  zoomTo(e11) {
    return this.callGoTo(e11);
  }
  clear() {
    this.set({ promises: [], features: [], content: null, title: null, location: null, activeFeature: null });
  }
  fetchFeatures(e11, t5) {
    const { view: i6 } = this;
    if (!i6 || !e11) throw new s("fetch-features:invalid-screenpoint-or-view", "Cannot fetch features without a screenPoint and view.", { screenPoint: e11, view: i6 });
    return i6.fetchPopupFeatures(e11, { pointerType: t5?.event?.pointerType, defaultPopupTemplateEnabled: this.defaultPopupTemplateEnabled, signal: t5?.signal });
  }
  open(e11) {
    const t5 = { updateLocationEnabled: false, promises: [], fetchFeatures: false, ...e11, visible: true }, { fetchFeatures: i6 } = t5;
    delete t5.fetchFeatures, i6 && this._setFetchFeaturesPromises(t5.location);
    const s4 = ["actionsMenuOpen", "collapsed"];
    for (const r3 of s4) delete t5[r3];
    this.set(t5);
  }
  triggerAction(e11) {
    const t5 = this.allActions.at(e11);
    t5 && !t5.disabled && this.emit("trigger-action", { action: t5 });
  }
  next() {
    return this.selectedFeatureIndex = this._getRoundRobinIndex(this.selectedFeatureIndex + 1, this.featureCount), this;
  }
  previous() {
    return this.selectedFeatureIndex = this._getRoundRobinIndex(this.selectedFeatureIndex - 1, this.featureCount), this;
  }
  disableClusterBrowsing() {
    h3(this), this._clearBrowsedClusterGraphics();
  }
  async enableClusterBrowsing() {
    const { view: e11, selectedFeature: t5 } = this;
    "2d" === e11?.type ? g(t5) ? (await v(this), await p3(this)) : i.getLogger(this).warn("enableClusterBrowsing:invalid-selectedFeature: Selected feature must represent an aggregate/cluster graphic.", t5) : i.getLogger(this).warn("enableClusterBrowsing:invalid-view: View must be 2d MapView.", t5);
  }
  handleViewClick(e11) {
    this._fetchFeaturesAndOpen(e11);
  }
  _getRoundRobinIndex(e11, t5) {
    return (e11 + t5) % t5;
  }
  _animationStateChange(e11) {
    this.zoomToLocation || (n7.disabled = "waiting-for-target" === e11);
  }
  _clearBrowsedClusterGraphics() {
    const e11 = [this.selectedClusterBoundaryFeature, this._selectedClusterFeature].filter(L);
    this.view?.graphics?.removeMany(e11), this._selectedClusterFeature = null, this.selectedClusterBoundaryFeature.geometry = null;
  }
  _viewScaleChange() {
    if (g(this.selectedFeature)) return this.browseClusterEnabled = false, this.visible = false, void this.clear();
    this.browseClusterEnabled && (this.features = this.selectedFeature ? [this.selectedFeature] : []);
  }
  _locationChange(e11) {
    const { selectedFeature: t5, updateLocationEnabled: i6, view: s4 } = this;
    s4 && i6 && e11 && (!t5 || t5.geometry) && this.centerAtLocation();
  }
  _selectedFeatureIndexChange() {
    this.featurePage = this.featureCount > 0 ? Math.floor(this.selectedFeatureIndex / this.featuresPerPage) + 1 : null;
  }
  _featureViewModelsChange() {
    this.featurePage = this.featureCount > 0 ? 1 : null;
  }
  _setGraphicOnFeatureViewModels() {
    const { features: e11, featureCount: t5, featurePage: i6, featuresPerPage: s4, featureViewModels: r3 } = this;
    if (null == i6) return;
    const o5 = ((i6 - 1) * s4 + t5) % t5, a8 = o5 + s4;
    r3.slice(o5, a8).forEach((t6, i7) => {
      t6 && (t6.graphic ??= e11[o5 + i7]);
    });
  }
  async _selectedFeatureChange(e11) {
    const { location: t5, updateLocationEnabled: i6, view: s4 } = this;
    if (!e11 || !s4) return;
    if (this.browseClusterEnabled) {
      if (this._selectedClusterFeature && (s4.graphics.remove(this._selectedClusterFeature), this._selectedClusterFeature = null), g(e11)) return;
      return e11.symbol = await x(e11), this._selectedClusterFeature = e11, void s4.graphics.add(this._selectedClusterFeature);
    }
    const r3 = e11.sourceLayer?.type;
    if ("map-image" !== r3 && "imagery" !== r3 && "imagery-tile" !== r3 || (e11.symbol = await x(e11)), !i6 && t5 || !e11.geometry) {
      if (i6 && !e11.geometry) {
        await this.centerAtLocation();
        const e12 = s4.center?.clone();
        e12 && (this.location = e12);
      }
    } else this.location = n4(e11.geometry);
  }
  _waitingForResultChange() {
    !this.featureCount && this.promises && (this.visible = false);
  }
  async _setFetchFeaturesPromises(e11) {
    const { pendingFeatures: t5 } = await this._fetchFeaturesWithController({ mapPoint: e11 });
    this.promises = t5;
  }
  _destroyFeatureVMs() {
    this.featureViewModels.forEach((e11) => e11 && !e11.destroyed && e11.destroy()), this._set("featureViewModels", []);
  }
  _updateFeatureVMs() {
    const { selectedFeature: e11, features: t5, featureViewModels: i6, view: s4, spatialReference: r3, map: o5, timeZone: a8, location: n8 } = this;
    if (g(t5[0]) || (this.browseClusterEnabled = false), this._destroyFeatureVMs(), !t5?.length) return;
    const l4 = i6.slice(), u2 = [];
    t5.forEach((t6, i7) => {
      if (!t6) return;
      let h4 = null;
      if (l4.some((e12, i8) => (e12 && e12.graphic === t6 && (h4 = e12, l4.splice(i8, 1)), !!h4)), h4) u2[i7] = h4;
      else {
        const l5 = new ne({ abilities: this.featureViewModelAbilities, defaultPopupTemplateEnabled: this.defaultPopupTemplateEnabled, spatialReference: r3, graphic: t6 === e11 ? t6 : null, location: n8, map: o5, view: s4, timeZone: a8 });
        u2[i7] = l5;
      }
    }), l4.forEach((e12) => e12 && !e12.destroyed && e12.destroy()), this._set("featureViewModels", u2);
  }
  async _getScreenPoint(e11, t5) {
    const { spatialReference: i6, view: s4 } = this;
    if (!s4) return null;
    await s4?.when();
    const r3 = e11?.spatialReference;
    return r3 && i6 ? (await Q(r3, i6, null, t5), s4.toScreen(e11)) : null;
  }
  _cancelFetchingFeatures() {
    const e11 = this._fetchFeaturesController;
    e11 && e11.abort(), this._fetchFeaturesController = null;
  }
  async _projectScreenPointAndFetchFeatures({ mapPoint: e11, screenPoint: t5, event: i6, signal: s4 }) {
    return this.fetchFeatures(t5 ?? await this._getScreenPoint(e11 ?? this.location, { signal: s4 }), { signal: s4, event: i6 });
  }
  _fetchFeaturesWithController({ mapPoint: e11, screenPoint: t5, event: i6 }) {
    this._cancelFetchingFeatures();
    const s4 = new AbortController(), { signal: r3 } = s4;
    this._fetchFeaturesController = s4;
    const o5 = this._projectScreenPointAndFetchFeatures({ mapPoint: e11, screenPoint: t5, signal: r3, event: i6 });
    return o5.catch(() => {
    }).then(() => {
      this._fetchFeaturesController = null;
    }), o5;
  }
  async _fetchFeaturesAndOpen(e11) {
    const { mapPoint: t5, screenPoint: i6 } = e11, { view: s4 } = this;
    this.removeHandles(B), this.addHandles([l(() => this.view?.scale, () => this._debouncedLocationUpdate(t5).catch((e12) => {
      b(e12) || i.getLogger(this).error(e12);
    })), f2(() => !this.visible, () => {
      this.removeHandles(B);
    }, { once: true })], B);
    const { pendingFeatures: o5 } = await this._fetchFeaturesWithController({ mapPoint: t5, screenPoint: i6, event: e11 });
    s4?.popup && "open" in s4.popup && s4.popup.open({ location: t5 ?? void 0, promises: o5 });
  }
  _autoClose() {
    this.autoCloseEnabled && (this.visible = false);
  }
  async _getLayerView(e11, t5) {
    return await e11.when(), e11.whenLayerView(t5);
  }
  _getHighlightLayer(e11) {
    const { layer: t5, sourceLayer: i6 } = e11;
    return i6 && "layer" in i6 && i6.layer ? i6.layer : "map-notes" === i6?.type || "subtype-group" === i6?.type ? i6 : t5 ?? i6;
  }
  _getHighlightLayerView(e11, t5) {
    return "subtype-sublayer" === t5.type && t5.parent && this._mapIncludesLayer(t5.parent) ? this._getLayerView(e11, t5.parent) : t5 && this._mapIncludesLayer(t5) ? this._getLayerView(e11, t5) : null;
  }
  _getHighlightTarget(e11, t5, i6) {
    if (Z(t5.type, i6)) return e11;
    const s4 = e11.getObjectId();
    if (null != s4) return s4;
    const r3 = "imagery" === t5.type ? void 0 : "objectIdField" in t5 ? t5.objectIdField || o3 : null, o5 = e11.attributes;
    return o5 && r3 && o5[r3] || e11;
  }
  _mapIncludesLayer(e11) {
    return !!this.map?.allLayers?.includes(e11);
  }
  async _highlightFeature(e11, t5) {
    this.removeHandles(e11);
    const i6 = this[t5];
    if (!i6) return;
    const { highlightEnabled: s4, view: r3, visible: o5 } = this;
    if (!r3 || !s4 || !o5) return;
    const a8 = this._getHighlightLayer(i6);
    if (!a8) return;
    const n8 = this._getHighlightLayerView(r3, a8);
    if (!n8) return;
    this._highlightPromises[e11] = n8;
    const l4 = await n8;
    if (!(l4 && n2(l4) && this._highlightPromises[e11] === n8 && this[t5] && this.highlightEnabled)) return;
    const u2 = l4.highlight(this._getHighlightTarget(i6, a8, r3.type));
    this.addHandles(u2, e11);
  }
  async _highlightActiveFeature() {
    return this._highlightFeature("highlight-active-feature", "activeFeature");
  }
  async _highlightSelectedFeature() {
    return this._highlightFeature("highlight-selected-feature", "selectedFeature");
  }
  _updateFeatures(e11) {
    const { features: t5 } = this, i6 = e11.filter((e12) => !t5.includes(e12));
    i6?.length && (this.features = t5.concat(i6));
  }
};
r([m()], z2.prototype, "_fetchFeaturesController", void 0), r([m({ type: i5 })], z2.prototype, "actions", void 0), r([m({ readOnly: true })], z2.prototype, "active", null), r([m()], z2.prototype, "activeFeature", void 0), r([m({ readOnly: true })], z2.prototype, "allActions", null), r([m()], z2.prototype, "autoCloseEnabled", void 0), r([m()], z2.prototype, "browseClusterEnabled", void 0), r([m()], z2.prototype, "content", void 0), r([m({ type: i5, readOnly: true })], z2.prototype, "defaultActions", null), r([m({ type: Boolean })], z2.prototype, "defaultPopupTemplateEnabled", void 0), r([m({ readOnly: true })], z2.prototype, "featureCount", null), r([m()], z2.prototype, "featurePage", void 0), r([m({ value: [] })], z2.prototype, "features", null), r([m()], z2.prototype, "featuresPerPage", void 0), r([m()], z2.prototype, "featureMenuOpen", void 0), r([m()], z2.prototype, "featureMenuTitle", void 0), r([m()], z2.prototype, "featureViewModelAbilities", void 0), r([m({ readOnly: true })], z2.prototype, "featureViewModels", void 0), r([m()], z2.prototype, "highlightEnabled", void 0), r([m()], z2.prototype, "includeDefaultActions", void 0), r([m()], z2.prototype, "initialDisplayMode", void 0), r([m({ type: _ })], z2.prototype, "location", null), r([m()], z2.prototype, "map", null), r([m({ readOnly: true })], z2.prototype, "pendingPromisesCount", null), r([m({ readOnly: true })], z2.prototype, "promiseCount", null), r([m()], z2.prototype, "promises", null), r([m({ readOnly: true })], z2.prototype, "selectedClusterBoundaryFeature", void 0), r([m({ value: null, readOnly: true })], z2.prototype, "selectedFeature", null), r([m({ value: -1 })], z2.prototype, "selectedFeatureIndex", null), r([m({ readOnly: true })], z2.prototype, "selectedFeatureViewModel", null), r([m({ type: f3 })], z2.prototype, "spatialReference", null), r([m({ readOnly: true })], z2.prototype, "state", null), r([m()], z2.prototype, "timeZone", null), r([m()], z2.prototype, "title", void 0), r([m()], z2.prototype, "updateLocationEnabled", void 0), r([m()], z2.prototype, "view", void 0), r([m()], z2.prototype, "visible", void 0), r([m({ readOnly: true })], z2.prototype, "waitingForContents", null), r([m({ readOnly: true })], z2.prototype, "waitingForResult", null), r([m()], z2.prototype, "zoomFactor", void 0), r([m()], z2.prototype, "zoomToLocation", void 0), r([m()], z2.prototype, "centerAtLocation", null), z2 = r([a("esri.widgets.Features.FeaturesViewModel")], z2);

// node_modules/@arcgis/core/widgets/Features/FeaturesVisibleElements.js
var a6 = class extends b2 {
  constructor() {
    super(...arguments), this.actionBar = true, this.closeButton = true, this.collapseButton = false, this.featureMenuHeading = true, this.featureNavigation = true, this.featureListLayerTitle = true, this.flow = true, this.heading = true, this.spinner = true;
  }
};
r([m({ type: Boolean, nonNullable: true })], a6.prototype, "actionBar", void 0), r([m({ type: Boolean, nonNullable: true })], a6.prototype, "closeButton", void 0), r([m({ type: Boolean, nonNullable: true })], a6.prototype, "collapseButton", void 0), r([m({ type: Boolean, nonNullable: true })], a6.prototype, "featureMenuHeading", void 0), r([m({ type: Boolean, nonNullable: true })], a6.prototype, "featureNavigation", void 0), r([m({ type: Boolean, nonNullable: true })], a6.prototype, "featureListLayerTitle", void 0), r([m({ type: Boolean, nonNullable: true })], a6.prototype, "flow", void 0), r([m({ type: Boolean, nonNullable: true })], a6.prototype, "heading", void 0), r([m({ type: Boolean, nonNullable: true })], a6.prototype, "spinner", void 0), a6 = r([a("esri.widgets.Features.FeaturesVisibleElements")], a6);

// node_modules/@arcgis/core/widgets/Features.js
var D = "selected-index";
var B2 = 0;
var S = "features-spinner";
function R2(e11) {
  return e11?.declaredClass.startsWith("esri.layers.") ?? false;
}
var H2 = class extends n3(O) {
  constructor(e11, i6) {
    super(e11, i6), this._featureMenuIntersectionObserverCallback = ([e12]) => {
      e12?.isIntersecting && null != this.viewModel.featurePage && this.viewModel.featurePage++;
    }, this._featureMenuIntersectionObserver = new IntersectionObserver(this._featureMenuIntersectionObserverCallback, { root: window.document }), this._featureMenuIntersectionObserverNode = null, this._spinner = null, this._feature = null, this._focusAbortController = null, this._drillInFlowItems = new V(), this._drillInWidget = new f5({ flowItems: this._drillInFlowItems }), this._rootNode = null, this._rootFlowItemNode = null, this._featureMenuViewportNode = null, this._actionBarMenuNode = null, this.collapsed = false, this.featureNavigationTop = false, this.headerActions = new i5(), this.headingLevel = 2, this.messages = null, this.messagesCommon = null, this.responsiveActionsEnabled = false, this.viewModel = new z2(), this.visibleElements = new a6(), this._previousFeature = () => {
      this.viewModel.previous();
    }, this._nextFeature = () => {
      this.viewModel.next();
    }, this._handleFeatureBack = () => {
      "list" === this.initialDisplayMode ? (this.selectedFeatureIndex = -1, this._focusFlowItemNode()) : this._openFeatureMenu();
    }, this._handleFeatureMenuBack = () => {
      "list" === this.initialDisplayMode ? (this.selectedFeatureIndex = -1, this._focusFlowItemNode()) : this.featureMenuOpen && this._closeFeatureMenu();
    }, this._storeRootNode = (e12) => {
      this._rootNode = e12;
    }, this._displaySpinnerThrottled = e3(() => this._displaySpinner(), B2), this._addSelectedFeatureIndexHandle(), this.addHandles([this._displaySpinnerThrottled, l(() => this.viewModel?.active, () => this._toggleScreenLocationEnabled()), l(() => this.viewModel?.active, (e12) => this._drillInWidget.closed = !e12), l(() => this.visibleElements?.closeButton, (e12) => this._drillInWidget.closable = e12), l(() => this.visibleElements?.spinner, (e12) => this._spinnerEnabledChange(e12)), l(() => this.viewModel?.view, (e12, t5) => this._viewChange(e12, t5)), l(() => this.viewModel?.view?.ready, (e12, t5) => this._viewReadyChange(e12 ?? false, t5 ?? false)), l(() => [this.viewModel?.waitingForResult, this.viewModel?.location], () => {
      this._hideSpinner(), this._displaySpinnerThrottled();
    }), l(() => this.viewModel?.screenLocation, () => this._closeOpenActionMenu()), l(() => this.selectedFeatureWidget?.viewModel, () => this._destroyDrillInFlowItemWidgets()), l(() => this.featureMenuOpen, () => this._drillInWidget.selectLastFlowItem = "list" === this.initialDisplayMode || !this.featureMenuOpen, h), l(() => {
      const e12 = this.selectedFeatureWidget?.viewModel;
      return [e12?.title, e12?.state];
    }, () => this._setTitleFromFeatureWidget()), l(() => {
      const e12 = this.selectedFeatureWidget?.viewModel;
      return [e12?.content, e12?.state];
    }, () => this._setContentFromFeatureWidget()), l(() => this.viewModel?.featureViewModels, () => this._featureMenuViewportScrollTop()), l(() => this._drillInFlowItems.length, () => this._focusFlowItemNode()), this._drillInWidget.on("close", () => this.close()), this._drillInWidget.on("exit", () => this._destroyDrillInFlowItemWidgets()), this._drillInWidget.on("open-feature", ({ feature: e12 }) => this._openRelatedFeature(e12)), this._drillInWidget.on("zoom-to-feature", ({ featureWidget: e12 }) => f6(this.viewModel, e12))]);
  }
  loadDependencies() {
    return Promise.all([e7(), c2({ action: () => import("./calcite-action-WHCNA6YX.js"), "action-bar": () => import("./calcite-action-bar-FO2F7RZN.js"), "action-group": () => import("./calcite-action-group-3KY3ZKMQ.js"), button: () => import("./calcite-button-YXGWMUBG.js"), icon: () => import("./calcite-icon-5R57LYRD.js"), flow: () => import("./calcite-flow-YF3KJ5SO.js"), "flow-item": () => import("./calcite-flow-item-WUKINKLM.js"), list: () => import("./calcite-list-MQ3JC2MC.js"), "list-item": () => import("./calcite-list-item-MPXXGGGF.js"), "list-item-group": () => import("./calcite-list-item-group-KS7CKVJ6.js"), loader: () => import("./calcite-loader-QHY6QNRQ.js") })]);
  }
  destroy() {
    this._destroyDrillInFlowItemWidgets(), this._destroySelectedFeatureWidget(), this._destroySpinner(), this._unobserveFeatureMenuObserver(), this._featureMenuIntersectionObserver?.disconnect(), this._drillInWidget?.destroy(), this._focusAbortController?.abort();
  }
  get _hideActionText() {
    if (!this.responsiveActionsEnabled) return false;
    const e11 = this.view?.widthBreakpoint;
    return "xsmall" === e11 || "small" === e11 || "medium" === e11;
  }
  get _featureNavigationVisible() {
    return this.viewModel.active && this.viewModel.featureCount > 1 && !!this.viewModel.selectedFeature && this.visibleElements.featureNavigation;
  }
  get _isCollapsed() {
    return this._collapseEnabled && this.collapsed;
  }
  get _collapseEnabled() {
    return this.visibleElements.collapseButton && ("list" === this.initialDisplayMode || !!this.title && !!this.content);
  }
  get active() {
    return this.viewModel.active;
  }
  get content() {
    return this.viewModel.content;
  }
  set content(e11) {
    this.viewModel.content = e11;
  }
  get icon() {
    return null;
  }
  get featureMenuOpen() {
    return this.viewModel.featureMenuOpen;
  }
  set featureMenuOpen(e11) {
    this.viewModel.featureMenuOpen = e11;
  }
  get featureMenuTitle() {
    return this.viewModel.featureMenuTitle;
  }
  set featureMenuTitle(e11) {
    this.viewModel.featureMenuTitle = e11;
  }
  get features() {
    return this.viewModel.features;
  }
  set features(e11) {
    this.viewModel.features = e11;
  }
  get goToOverride() {
    return this.viewModel.goToOverride;
  }
  set goToOverride(e11) {
    this.viewModel.goToOverride = e11;
  }
  get initialDisplayMode() {
    return this.viewModel.initialDisplayMode;
  }
  set initialDisplayMode(e11) {
    this.viewModel.initialDisplayMode = e11;
  }
  get location() {
    return this.viewModel.location;
  }
  set location(e11) {
    this.viewModel.location = e11;
  }
  get label() {
    return this.messages?.widgetLabel ?? "";
  }
  set label(e11) {
    this._overrideIfSome("label", e11);
  }
  get map() {
    return this.viewModel.map;
  }
  set map(e11) {
    this.viewModel.map = e11;
  }
  get promises() {
    return this.viewModel.promises;
  }
  set promises(e11) {
    this.viewModel.promises = e11;
  }
  get selectedFeature() {
    return this.viewModel.selectedFeature;
  }
  get selectedDrillInFeature() {
    const e11 = Array.from(this._drillInFlowItems).at(-1);
    if (!e11) return null;
    const { flowType: t5 } = e11;
    return "feature-association" === t5 || "feature-relationship" === t5 ? e11.graphic ?? null : null;
  }
  get selectedFeatureIndex() {
    return this.viewModel.selectedFeatureIndex;
  }
  set selectedFeatureIndex(e11) {
    this.viewModel.selectedFeatureIndex = e11;
  }
  get selectedFeatureWidget() {
    const { _feature: e11, headingLevel: t5, _drillInFlowItems: i6, timeZone: o5, spatialReference: s4, map: n8 } = this, { selectedFeatureViewModel: r3 } = this.viewModel, l4 = { title: false };
    return r3 ? (e11 ? (e11.viewModel = r3, e11.visibleElements = l4) : this._feature = new F({ flowItems: i6, headingLevel: t5 + 1, timeZone: o5, spatialReference: s4, map: n8, viewModel: r3, visibleElements: l4 }), this._feature) : null;
  }
  get spatialReference() {
    return this.viewModel.spatialReference;
  }
  set spatialReference(e11) {
    this.viewModel.spatialReference = e11;
  }
  get title() {
    return this.viewModel.title;
  }
  set title(e11) {
    this.viewModel.title = e11;
  }
  get timeZone() {
    return this.viewModel.timeZone;
  }
  set timeZone(e11) {
    this.viewModel.timeZone = e11;
  }
  get updateLocationEnabled() {
    return this.viewModel.updateLocationEnabled;
  }
  set updateLocationEnabled(e11) {
    this.viewModel.updateLocationEnabled = e11;
  }
  get view() {
    return this.viewModel.view;
  }
  set view(e11) {
    this.viewModel.view = e11;
  }
  get visible() {
    return this.viewModel.visible;
  }
  set visible(e11) {
    this.viewModel.visible = e11;
  }
  blur() {
    const { active: e11 } = this.viewModel;
    e11 ? this._rootFlowItemNode?.blur() : i.getLogger(this).warn("Features can only be blurred when currently active.");
  }
  clear() {
    return this.viewModel.clear();
  }
  close() {
    this.viewModel.visible = false;
  }
  fetchFeatures(e11, t5) {
    return this.viewModel.fetchFeatures(e11, t5);
  }
  focus() {
    const { active: e11 } = this.viewModel;
    e11 ? this._focusFlowItemNode() : i.getLogger(this).warn("Features can only be focused when currently active.");
  }
  next() {
    return this.viewModel.next();
  }
  open(e11) {
    this.removeHandles(D);
    const t5 = { collapsed: e11?.collapsed ?? false };
    this.set(t5), this.viewModel.open(e11), this.addHandles(f2(() => !this.viewModel.waitingForResult, () => this._addSelectedFeatureIndexHandle(), { once: true }));
  }
  previous() {
    return this.viewModel.previous();
  }
  triggerAction(e11) {
    return this.viewModel.triggerAction(e11);
  }
  render() {
    return n("div", { afterCreate: this._storeRootNode, bind: this, class: this.classes(n6.base, e4.widget, e4.panel), onkeydown: this._onMainKeydown }, this._renderHeader(), this._renderContentContainer());
  }
  _renderFeatureNavigation() {
    return [this._renderPagination(), "list" === this.initialDisplayMode ? this._renderFeaturePaginationText() : this._renderFeatureMenuButton()];
  }
  _renderHeader() {
    return this.featureNavigationTop && this._featureNavigationVisible ? n("div", { class: n6.header, key: "header-actions" }, this._renderFeatureNavigation()) : null;
  }
  _renderFooter() {
    return !this.featureNavigationTop && this._featureNavigationVisible ? n("div", { class: n6.footer, key: "footer-actions", slot: "footer" }, this._renderFeatureNavigation()) : null;
  }
  _renderFeaturePaginationText() {
    const { messages: e11, viewModel: t5 } = this, { featureCount: i6, selectedFeatureIndex: o5 } = t5;
    return n("div", { class: n6.paginationText, key: "feature-pagination-text" }, s2(e11.pageText, { index: o2(o5 + 1), total: o2(i6) }));
  }
  _renderFeatureMenuButton() {
    const { messages: e11, viewModel: t5 } = this, { featureCount: i6, selectedFeatureIndex: o5, pendingPromisesCount: s4 } = t5;
    return n("calcite-action", { appearance: "solid", bind: this, class: n6.paginationMenuButton, icon: "list", key: "feature-menu-button", label: e11.selectFeature, loading: s4 > 0, onclick: this._handlePaginationMenuButton, scale: "s", text: s2(e11.pageText, { index: o2(o5 + 1), total: o2(i6) }), textEnabled: true, title: e11.selectFeature });
  }
  _renderPagination() {
    const { previous: e11, next: t5 } = this.messagesCommon.pagination;
    return n("calcite-action-bar", { class: n6.paginationActionBar, expandDisabled: true, key: "pagination-action-bar", layout: "horizontal", overflowActionsDisabled: true, scale: "s" }, n("calcite-action-group", { scale: "s" }, n("calcite-action", { appearance: "solid", class: n6.paginationPrevious, icon: "chevron-left", iconFlipRtl: true, label: e11, onclick: this._previousFeature, scale: "s", text: e11, title: e11 }), n("calcite-action", { appearance: "solid", icon: "chevron-right", iconFlipRtl: true, label: t5, onclick: this._nextFeature, scale: "s", text: t5, title: t5 })));
  }
  _renderFeatureMenuItem(e11) {
    const { initialDisplayMode: t5 } = this, { selectedFeatureViewModel: i6, featureViewModels: o5 } = this.viewModel, s4 = e11 === i6, n8 = o5.indexOf(e11);
    return n("calcite-list-item", { bind: this, "data-feature-index": n8, key: `feature-menu-item-${e11.uid}`, onblur: this._removeActiveFeature, onfocus: this._setActiveFeature, onmouseleave: this._removeActiveFeature, onmouseover: this._setActiveFeature, selected: s4, onCalciteListItemSelect: this._selectFeature }, n("span", { innerHTML: e11.title || this.messagesCommon.untitled, slot: "content" }), "list" === t5 ? n("calcite-icon", { flipRtl: true, icon: "chevron-right", scale: "s", slot: "content-end" }) : null);
  }
  _groupResultsByLayer() {
    const { featureViewModels: e11 } = this.viewModel, t5 = /* @__PURE__ */ new Map();
    return e11.forEach((e12) => {
      const i6 = e12?.graphic;
      if (!i6) return;
      const { layer: o5, sourceLayer: s4 } = i6, n8 = (R2(o5) ? o5 : null) || (R2(s4) ? s4 : null), r3 = t5.get(n8) ?? [];
      t5.set(n8, [...r3, e12]);
    }), t5;
  }
  _renderFeatureMenu() {
    const { messages: e11, viewModel: t5 } = this, i6 = this._groupResultsByLayer(), o5 = "list" === this.initialDisplayMode ? "none" : "single";
    return t5.featureViewModels.length ? n("calcite-list", { displayMode: "flat", label: e11?.featuresList, selectionAppearance: "icon", selectionMode: o5 }, Array.from(i6.keys(), (e12) => {
      const t6 = i6.get(e12)?.map((e13) => this._renderFeatureMenuItem(e13)), o6 = e12 ? e12.title ?? this.messagesCommon.untitled : null;
      return this.visibleElements.featureListLayerTitle && null !== o6 ? n("calcite-list-item-group", { heading: o6, key: e12?.uid || "map-graphics" }, t6) : t6;
    })) : null;
  }
  _renderHeaderAction(e11, t5) {
    const i6 = e11.title || "";
    return e11.visible ? n("calcite-action", { active: "toggle" === e11.type && e11.value, appearance: "solid", bind: this, "data-action-id": e11.id, "data-action-uid": e11.uid, disabled: e11.disabled, icon: e11.icon ?? void 0, indicator: e11.indicator, key: `header-action-${t5}`, loading: e11.active, onclick: this._triggerHeaderAction, slot: "header-actions-end", text: i6, title: i6 }) : null;
  }
  _renderHeaderActions() {
    return this.headerActions.map((e11, t5) => this._renderHeaderAction(e11, t5)).toArray();
  }
  _renderContentFeature() {
    const { headingLevel: e11, visibleElements: t5, _isCollapsed: i6, _collapseEnabled: o5, featureNavigationTop: s4, _drillInFlowItems: n8, initialDisplayMode: r3, selectedFeature: l4, featureMenuOpen: a8 } = this, { title: d4, active: c8 } = this.viewModel, u2 = t5.heading && d4 ? d4 : "";
    if ("list" === r3 && !l4) return null;
    const h4 = 0 === n8.length && ("list" === r3 ? !!l4 : !a8);
    return n("calcite-flow-item", { afterCreate: this._storeRootFlowItemNode, bind: this, class: this.classes({ [n6.contentFeature]: true, [n6.flowItemCollapsed]: i6 }), closable: t5.closeButton, closed: !c8, collapsed: i6, collapseDirection: s4 ? "down" : "up", collapsible: o5, headingLevel: e11, key: "root-flow-item", selected: h4, onCalciteFlowItemBack: this._handleFeatureBack, onCalciteFlowItemClose: this.close, onCalciteFlowItemToggle: this._handleCollapseToggle }, u2 ? n(e5, { class: this.classes(n6.featuresHeading, e4.heading), innerHTML: u2, key: "header-content", level: this.headingLevel, slot: "header-content" }) : null, this._renderHeaderActions(), this._renderActionBar(), n("div", { class: this.classes(n6.container, n6.contentContainer) }, this._renderContent()), this._renderFooter());
  }
  _renderFeatureMenuContainer() {
    const { viewModel: e11, visibleElements: t5, featureMenuTitle: i6, messages: o5, messagesCommon: s4, initialDisplayMode: n8, featureMenuOpen: r3, selectedFeature: l4, _collapseEnabled: a8, _isCollapsed: d4, featureNavigationTop: c8, headingLevel: u2 } = this, { active: h4, featureViewModels: p4, pendingPromisesCount: m5 } = e11, { featureMenuHeading: v2 } = t5, g2 = i6 ?? o5.selectFeature;
    if ("feature" === n8 && !r3) return null;
    const w2 = "list" === n8 ? !l4 : r3;
    return n("calcite-flow-item", { afterCreate: this._storeFeatureMenuFlowItemNode, bind: this, class: this.classes({ [n6.flowItemCollapsed]: d4 }), closable: "list" === n8 && t5.closeButton, closed: !h4, collapsed: "list" === n8 && d4, collapseDirection: c8 ? "down" : "up", collapsible: "list" === n8 && a8, description: v2 ? s2(o5.total, { total: p4.length }) : void 0, heading: v2 ? g2 : void 0, headingLevel: u2, key: "feature-menu", loading: e11.waitingForContents, selected: w2, onCalciteFlowItemBack: (e12) => {
      e12.preventDefault(), this._handleFeatureMenuBack();
    }, onCalciteFlowItemClose: this.close, onCalciteFlowItemToggle: this._handleCollapseToggle }, "list" === n8 ? this._renderHeaderActions() : null, m5 > 0 ? n("calcite-loader", { class: n6.loader, inline: true, key: "feature-menu-loader", label: s4.loading, slot: "header-actions-end" }) : null, n("div", { class: n6.container }, this._renderFeatureMenu()), n("div", { afterCreate: this._featureMenuIntersectionObserverCreated, bind: this, class: n6.featureMenuObserver }), "feature" === n8 ? n("calcite-button", { appearance: "transparent", onclick: this._handleFeatureMenuBack, slot: "footer-actions", width: "full" }, s4.back) : null);
  }
  _renderContentContainer() {
    const e11 = "list" === this.initialDisplayMode ? [this._renderFeatureMenuContainer(), this._renderContentFeature(), this._drillInWidget.render()] : [this._renderContentFeature(), this._drillInWidget.render(), this._renderFeatureMenuContainer()];
    return this.visibleElements.flow ? n("calcite-flow", { key: "content-container" }, e11) : e11;
  }
  _getFallbackIcon(e11) {
    const { className: t5, icon: i6 } = e11;
    if (i6) return null;
    const o5 = s3({ action: e11, feature: this.selectedFeature }), s4 = { [n6.icon]: !!t5, [n6.actionImage]: !!o5 };
    return t5 && (s4[t5] = true), o5 || t5 ? n("span", { "aria-hidden": "true", class: this.classes(n6.icon, s4), key: "icon", styles: c4(o5) }) : null;
  }
  _renderActionBar() {
    return !this._isCollapsed && this.visibleElements.actionBar && this.viewModel.allActions?.length ? n("calcite-action-bar", { expandDisabled: true, expanded: !this._hideActionText, key: "header-action-bar", scale: "s", slot: "action-bar" }, n("calcite-action-group", { afterCreate: (e11) => this._actionBarMenuNode = e11, overlayPositioning: "fixed", scale: "s" }, this._renderActions())) : null;
  }
  _renderActions() {
    return this.viewModel.allActions.toArray().map((e11, t5) => {
      const i6 = this._getActionTitle(e11);
      return n5(e11, { key: `action-${t5}`, title: i6, text: i6, textEnabled: !this._hideActionText, onclick: this._triggerAction, bind: this }, this._getFallbackIcon(e11));
    });
  }
  _renderContent() {
    const e11 = this.viewModel?.content;
    return e11 ? "string" == typeof e11 ? n("div", { class: t.contentNode, innerHTML: e11, key: e11 }) : this.renderNodeContent(e11) : null;
  }
  _handleCollapseToggle() {
    this.collapsed = !this.collapsed;
  }
  async _openRelatedFeature(e11) {
    await e11.viewModel.updateGeometry();
    const t5 = e11.graphic, i6 = t5?.geometry;
    if (null == i6 || null == t5) return;
    this._destroyDrillInFlowItemWidgets(), await this.viewModel.zoomTo({ target: i6 });
    const o5 = n4(i6);
    this.open({ features: [t5], location: null != o5 ? o5 : void 0 }), this._focusFlowItemNode();
  }
  _handlePaginationMenuButton() {
    this._updateFeatureMenu();
  }
  _openFeatureMenu() {
    this._updateFeatureMenu(true);
  }
  _closeFeatureMenu() {
    this._updateFeatureMenu(false);
  }
  _updateFeatureMenu(e11 = !this.featureMenuOpen) {
    this.featureMenuOpen = e11, this._focusFlowItemNode();
  }
  async _focusFlowItemNode() {
    this._focusAbortController?.abort(), this._focusAbortController = new AbortController();
    const e11 = this._focusAbortController.signal;
    await d(R(e11));
    const t5 = this._rootNode?.querySelector("calcite-flow-item[selected]");
    j2(t5);
  }
  _storeRootFlowItemNode(e11) {
    this._rootFlowItemNode = e11;
  }
  _storeFeatureMenuFlowItemNode(e11) {
    this._featureMenuViewportNode = e11;
  }
  _setActiveFeature(e11) {
    const { viewModel: t5 } = this, i6 = e11.currentTarget["data-feature-index"];
    t5.activeFeature = t5.features?.[i6] || null;
  }
  _removeActiveFeature() {
    this.viewModel.activeFeature = null;
  }
  _selectFeature(e11) {
    const t5 = e11.currentTarget["data-feature-index"];
    isNaN(t5) || (this.viewModel.selectedFeatureIndex = t5), "feature" === this.initialDisplayMode ? this._handleFeatureMenuBack() : this._focusFlowItemNode();
  }
  _unobserveFeatureMenuObserver() {
    this._featureMenuIntersectionObserverNode && this._featureMenuIntersectionObserver.unobserve(this._featureMenuIntersectionObserverNode);
  }
  _featureMenuIntersectionObserverCreated(e11) {
    this._unobserveFeatureMenuObserver(), this._featureMenuIntersectionObserver.observe(e11), this._featureMenuIntersectionObserverNode = e11;
  }
  _getActionTitle(e11) {
    const { messages: t5, selectedFeature: i6, messagesCommon: o5 } = this, { id: s4 } = e11, n8 = i6?.attributes, r3 = e11.title ?? "", l4 = "zoom-to-feature" === s4 ? s2(r3, { messages: t5 }) : "remove-selected-feature" === s4 ? s2(r3, { messages: o5 }) : "zoom-to-clustered-features" === s4 || "browse-clustered-features" === s4 ? s2(r3, { messages: t5 }) : e11.title;
    return l4 && n8 ? s2(l4, n8) : l4 ?? "";
  }
  _onMainKeydown(e11) {
    const { key: t5 } = e11;
    "ArrowLeft" === t5 && (e11.stopPropagation(), this._handleFeatureMenuBack(), this.previous()), "ArrowRight" === t5 && (e11.stopPropagation(), this._handleFeatureMenuBack(), this.next());
  }
  _featureMenuViewportScrollTop() {
    this._featureMenuViewportNode && this._featureMenuViewportNode.scrollContentTo({ top: 0 });
  }
  _setContentFromFeatureWidget() {
    const { selectedFeatureWidget: e11 } = this;
    e11 && (this.viewModel.content = e11);
  }
  _setTitleFromFeatureWidget() {
    const { selectedFeatureWidget: e11, messagesCommon: t5 } = this, i6 = e11?.viewModel;
    e11 && (this.viewModel.title = "error" === i6?.state ? t5?.errorMessage : i6?.title || "");
  }
  _addSelectedFeatureIndexHandle() {
    const e11 = l(() => this.viewModel?.selectedFeatureIndex, (e12, t5) => this._selectedFeatureIndexUpdated(e12, t5));
    this.addHandles(e11, D);
  }
  _selectedFeatureIndexUpdated(e11, t5) {
    const { featureCount: i6 } = this.viewModel;
    i6 && e11 !== t5 && -1 !== e11 && (this._destroyDrillInFlowItemWidgets(), this._rootFlowItemNode && this._rootFlowItemNode.scrollContentTo({ top: 0 }));
  }
  _triggerHeaderAction(e11) {
    const t5 = e11.currentTarget;
    if (t5.disabled) return;
    const i6 = t5.dataset.actionUid, o5 = this.headerActions.find(({ uid: e12 }) => e12 === i6);
    o5 && !o5.disabled && ("toggle" === o5?.type && (o5.value = !o5.value), this.emit("trigger-header-action", { action: o5 }));
  }
  _triggerAction(e11) {
    const t5 = e11.currentTarget;
    if (t5.disabled) return;
    const i6 = t5.dataset.actionUid, { allActions: o5 } = this.viewModel, s4 = o5.findIndex((e12) => e12.uid === i6), n8 = o5.at(s4);
    n8 && "toggle" === n8.type && (n8.value = !n8.value), this.viewModel.triggerAction(s4);
  }
  _createSpinner(e11) {
    e11 && (this._spinner = new p2({ view: e11 }), e11.ui.add(this._spinner, { key: S, position: "manual", internal: true }));
  }
  _wireUpView(e11) {
    this._destroySpinner(), e11 && this.visibleElements?.spinner && this._createSpinner(e11);
  }
  _hideSpinner() {
    const { _spinner: e11 } = this;
    e11 && (e11.location = null, e11.hide());
  }
  _viewReadyChange(e11, t5) {
    e11 ? this._wireUpView(this.viewModel?.view) : t5 && this.viewModel.clear();
  }
  _viewChange(e11, t5) {
    e11 && t5 && this.viewModel.clear();
  }
  _destroySelectedFeatureWidget() {
    const { _feature: e11 } = this;
    e11 && (e11.viewModel = null, !e11.destroyed && e11.destroy()), this._feature = null;
  }
  _closeOpenActionMenu() {
    const { _actionBarMenuNode: e11 } = this;
    e11 && (e11.menuOpen = false);
  }
  _destroyDrillInFlowItemWidgets() {
    this._drillInFlowItems.drain((e11) => {
      "showAllEnabled" in e11.viewModel && (e11.viewModel.showAllEnabled = false), "activeCategory" in e11.viewModel && (e11.viewModel.activeCategory = null), e11.viewModel = null, e11.destroy();
    });
  }
  _toggleScreenLocationEnabled() {
    const { viewModel: e11 } = this;
    e11 && (e11.screenLocationEnabled = e11.active);
  }
  _displaySpinner() {
    const { _spinner: e11 } = this;
    if (!e11) return;
    const { location: t5, waitingForResult: i6 } = this.viewModel;
    i6 && t5 ? e11.show({ location: t5 }) : e11.hide();
  }
  _destroySpinner() {
    const { _spinner: e11 } = this;
    e11 && (e11.view?.ui?.remove(e11, S), e11.destroy(), this._spinner = null);
  }
  _spinnerEnabledChange(e11) {
    this._destroySpinner(), e11 && this._createSpinner(this.viewModel?.view);
  }
};
r([m()], H2.prototype, "_drillInFlowItems", void 0), r([m()], H2.prototype, "_hideActionText", null), r([m()], H2.prototype, "_featureNavigationVisible", null), r([m()], H2.prototype, "_isCollapsed", null), r([m()], H2.prototype, "_collapseEnabled", null), r([m({ readOnly: true })], H2.prototype, "active", null), r([m()], H2.prototype, "collapsed", void 0), r([m()], H2.prototype, "content", null), r([m()], H2.prototype, "icon", null), r([m()], H2.prototype, "featureMenuOpen", null), r([m()], H2.prototype, "featureMenuTitle", null), r([m()], H2.prototype, "featureNavigationTop", void 0), r([m()], H2.prototype, "features", null), r([m()], H2.prototype, "goToOverride", null), r([m({ type: i5 })], H2.prototype, "headerActions", void 0), r([m()], H2.prototype, "headingLevel", void 0), r([m()], H2.prototype, "initialDisplayMode", null), r([m()], H2.prototype, "location", null), r([m()], H2.prototype, "label", null), r([m()], H2.prototype, "map", null), r([m(), e2("esri/widgets/Features/t9n/Features")], H2.prototype, "messages", void 0), r([m(), e2("esri/t9n/common")], H2.prototype, "messagesCommon", void 0), r([m()], H2.prototype, "promises", null), r([m()], H2.prototype, "responsiveActionsEnabled", void 0), r([m({ readOnly: true })], H2.prototype, "selectedFeature", null), r([m({ readOnly: true })], H2.prototype, "selectedDrillInFeature", null), r([m()], H2.prototype, "selectedFeatureIndex", null), r([m({ readOnly: true })], H2.prototype, "selectedFeatureWidget", null), r([m()], H2.prototype, "spatialReference", null), r([m()], H2.prototype, "title", null), r([m()], H2.prototype, "timeZone", null), r([m()], H2.prototype, "updateLocationEnabled", null), r([m()], H2.prototype, "view", null), r([m({ type: z2 }), e6(["triggerAction", "trigger-action"])], H2.prototype, "viewModel", void 0), r([m({ type: a6, nonNullable: true })], H2.prototype, "visibleElements", void 0), r([m()], H2.prototype, "visible", null), H2 = r([a("esri.widgets.Features")], H2);

// node_modules/@arcgis/core/widgets/Popup/css.js
var t4 = "esri-popup";
var o4 = `${t4}--is-docked`;
var e9 = { base: t4, baseHidden: `${t4}--hidden`, main: `${t4}__main-container`, shadow: `${t4}--shadow`, isDocked: o4, isDockedTopLeft: `${o4}-top-left`, isDockedTopCenter: `${o4}-top-center`, isDockedTopRight: `${o4}-top-right`, isDockedBottomLeft: `${o4}-bottom-left`, isDockedBottomCenter: `${o4}-bottom-center`, isDockedBottomRight: `${o4}-bottom-right`, alignTopCenter: `${t4}--aligned-top-center`, alignBottomCenter: `${t4}--aligned-bottom-center`, alignTopLeft: `${t4}--aligned-top-left`, alignBottomLeft: `${t4}--aligned-bottom-left`, alignTopRight: `${t4}--aligned-top-right`, alignBottomRight: `${t4}--aligned-bottom-right`, pointer: `${t4}__pointer`, pointerDirection: `${t4}__pointer-direction` };

// node_modules/@arcgis/core/widgets/Popup/PopupViewModel.js
var e10 = class extends z2 {
  constructor(r3) {
    super(r3);
  }
};
e10 = r([a("esri.widgets.Popup.PopupViewModel")], e10);

// node_modules/@arcgis/core/widgets/Popup/PopupVisibleElements.js
var a7 = class extends b2 {
  constructor() {
    super(...arguments), this.actionBar = true, this.closeButton = true, this.collapseButton = true, this.featureMenuHeading = true, this.featureNavigation = true, this.featureListLayerTitle = true, this.heading = true, this.spinner = true;
  }
};
r([m({ type: Boolean, nonNullable: true })], a7.prototype, "actionBar", void 0), r([m({ type: Boolean, nonNullable: true })], a7.prototype, "closeButton", void 0), r([m({ type: Boolean, nonNullable: true })], a7.prototype, "collapseButton", void 0), r([m({ type: Boolean, nonNullable: true })], a7.prototype, "featureMenuHeading", void 0), r([m({ type: Boolean, nonNullable: true })], a7.prototype, "featureNavigation", void 0), r([m({ type: Boolean, nonNullable: true })], a7.prototype, "featureListLayerTitle", void 0), r([m({ type: Boolean, nonNullable: true })], a7.prototype, "heading", void 0), r([m({ type: Boolean, nonNullable: true })], a7.prototype, "spinner", void 0), a7 = r([a("esri.widgets.Popup.PopupVisibleElements")], a7);

// node_modules/@arcgis/core/widgets/Popup.js
var E = 200;
var C = { buttonEnabled: true, position: "auto", breakpoint: { width: 544 } };
var D2 = class extends O {
  constructor(e11, t5) {
    super(e11, t5), this._dockAction = new c3({ id: "popup-dock-action" }), this._featuresWidget = new H2({ responsiveActionsEnabled: true }), this._containerNode = null, this._mainContainerNode = null, this._pointerOffsetInPx = 16, this._focusAbortController = null, this.alignment = "auto", this.dockEnabled = false, this.headingLevel = 2, this.messages = null, this.viewModel = new e10(), this.visibleElements = new a7();
  }
  initialize() {
    this.addHandles([l(() => [this.viewModel?.view?.widthBreakpoint, this.dockEnabled], () => this._handleDockIcon(), h), l(() => [this.dockEnabled, this.messages?.undock, this.messages?.dock], () => this._handleDockEnabled(), h), l(() => this.dockOptions, (e11) => {
      const { _dockAction: t5 } = this, i6 = this._featuresWidget.headerActions;
      i6.remove(t5), e11.buttonEnabled && i6.add(t5);
    }, h), l(() => this.viewModel?.screenLocation, () => this._positionContainer()), l(() => [this.viewModel?.active, this.dockEnabled], () => this._toggleScreenLocationEnabled()), l(() => [this.viewModel?.screenLocation, this.viewModel?.view?.padding, this.viewModel?.view?.size, this.viewModel?.active, this.viewModel?.location, this.alignment], () => this.reposition()), l(() => this.viewModel?.view?.size, (e11, t5) => this._updateDockEnabledForViewSize(e11, t5)), l(() => this.viewModel?.view, (e11, t5) => this._viewChange(e11, t5)), l(() => this.viewModel?.view?.ready, (e11, t5) => this._viewReadyChange(e11 ?? false, t5 ?? false)), l(() => this.viewModel, () => this._featuresWidget.viewModel = this.viewModel, h), l(() => this._featureNavigationTop, (e11) => this._featuresWidget.featureNavigationTop = e11, h), l(() => this.headingLevel, (e11) => this._featuresWidget.headingLevel = e11, h), l(() => this.visibleElements.actionBar, (e11) => this._featuresWidget.visibleElements.actionBar = !!e11, h), l(() => this.visibleElements.closeButton, (e11) => this._featuresWidget.visibleElements.closeButton = !!e11, h), l(() => this.visibleElements.collapseButton, (e11) => this._featuresWidget.visibleElements.collapseButton = !!e11, h), l(() => this.visibleElements.heading, (e11) => this._featuresWidget.visibleElements.heading = !!e11, h), l(() => this.visibleElements.spinner, (e11) => this._featuresWidget.visibleElements.spinner = !!e11, h), l(() => this.visibleElements.featureNavigation, (e11) => this._featuresWidget.visibleElements.featureNavigation = !!e11, h), l(() => this.visibleElements.featureMenuHeading, (e11) => this._featuresWidget.visibleElements.featureMenuHeading = !!e11, h), l(() => this.visibleElements.featureListLayerTitle, (e11) => this._featuresWidget.visibleElements.featureListLayerTitle = !!e11, h), a2(() => this._featuresWidget, "trigger-header-action", (e11) => {
      e11.action === this._dockAction && (this.dockEnabled = !this.dockEnabled);
    })]);
  }
  destroy() {
    this._dockAction.destroy(), this._featuresWidget && (this._featuresWidget.viewModel = new z2(), this._featuresWidget.destroy()), this._focusAbortController?.abort();
  }
  get _featureNavigationTop() {
    const { currentAlignment: e11, currentDockPosition: t5 } = this;
    return "bottom-left" === e11 || "bottom-center" === e11 || "bottom-right" === e11 || "top-left" === t5 || "top-center" === t5 || "top-right" === t5;
  }
  get actions() {
    return this.viewModel.actions;
  }
  set actions(e11) {
    this.viewModel.actions = e11;
  }
  get active() {
    return this.viewModel.active;
  }
  get autoCloseEnabled() {
    return this.viewModel.autoCloseEnabled;
  }
  set autoCloseEnabled(e11) {
    this.viewModel.autoCloseEnabled = e11;
  }
  get defaultPopupTemplateEnabled() {
    return this.viewModel.defaultPopupTemplateEnabled;
  }
  set defaultPopupTemplateEnabled(e11) {
    this.viewModel.defaultPopupTemplateEnabled = e11;
  }
  get content() {
    return this.viewModel.content;
  }
  set content(e11) {
    this.viewModel.content = e11;
  }
  get collapsed() {
    return this._featuresWidget.collapsed;
  }
  set collapsed(e11) {
    this._featuresWidget.collapsed = e11;
  }
  get currentAlignment() {
    return this._getCurrentAlignment();
  }
  get currentDockPosition() {
    return this._getCurrentDockPosition();
  }
  get dockOptions() {
    return this._get("dockOptions") || C;
  }
  set dockOptions(e11) {
    const t5 = { ...C }, i6 = this.viewModel?.view?.breakpoints, o5 = {};
    i6 && (o5.width = i6.xsmall, o5.height = i6.xsmall);
    const n8 = { ...t5, ...e11 }, s4 = { ...t5.breakpoint, ...o5 }, { breakpoint: r3 } = n8;
    "object" == typeof r3 ? n8.breakpoint = { ...s4, ...r3 } : r3 && (n8.breakpoint = s4), this._set("dockOptions", n8), this._setCurrentDockPosition(), this.reposition();
  }
  get featureCount() {
    return this.viewModel.featureCount;
  }
  get featureMenuOpen() {
    return this.viewModel.featureMenuOpen;
  }
  set featureMenuOpen(e11) {
    this.viewModel.featureMenuOpen = e11;
  }
  get features() {
    return this.viewModel.features;
  }
  set features(e11) {
    this.viewModel.features = e11;
  }
  get goToOverride() {
    return this.viewModel.goToOverride;
  }
  set goToOverride(e11) {
    this.viewModel.goToOverride = e11;
  }
  get highlightEnabled() {
    return this.viewModel.highlightEnabled;
  }
  set highlightEnabled(e11) {
    this.viewModel.highlightEnabled = e11;
  }
  get icon() {
    return "popup";
  }
  set icon(e11) {
    this._overrideIfSome("icon", e11);
  }
  get initialDisplayMode() {
    return this.viewModel.initialDisplayMode;
  }
  set initialDisplayMode(e11) {
    this.viewModel.initialDisplayMode = e11;
  }
  get location() {
    return this.viewModel.location;
  }
  set location(e11) {
    this.viewModel.location = e11;
  }
  get label() {
    return this.messages?.widgetLabel ?? "";
  }
  set label(e11) {
    this._overrideIfSome("label", e11);
  }
  get promises() {
    return this.viewModel.promises;
  }
  set promises(e11) {
    this.viewModel.promises = e11;
  }
  get selectedFeature() {
    return this.viewModel.selectedFeature;
  }
  get selectedDrillInFeature() {
    return this._featuresWidget.selectedDrillInFeature ?? null;
  }
  get selectedFeatureIndex() {
    return this.viewModel.selectedFeatureIndex;
  }
  set selectedFeatureIndex(e11) {
    this.viewModel.selectedFeatureIndex = e11;
  }
  get selectedFeatureWidget() {
    return this._featuresWidget.selectedFeatureWidget;
  }
  get title() {
    return this.viewModel.title;
  }
  set title(e11) {
    this.viewModel.title = e11;
  }
  get updateLocationEnabled() {
    return this.viewModel.updateLocationEnabled;
  }
  set updateLocationEnabled(e11) {
    this.viewModel.updateLocationEnabled = e11;
  }
  get view() {
    return this.viewModel.view;
  }
  set view(e11) {
    this.viewModel.view = e11;
  }
  get visible() {
    return this.viewModel.visible;
  }
  set visible(e11) {
    this.viewModel.visible = e11;
  }
  blur() {
    const { active: e11 } = this.viewModel;
    e11 || i.getLogger(this).warn("Popup can only be blurred when currently active."), this._featuresWidget.blur();
  }
  clear() {
    return this.viewModel.clear();
  }
  close() {
    this.visible = false;
  }
  fetchFeatures(e11, t5) {
    return this.viewModel.fetchFeatures(e11, t5);
  }
  focus() {
    const { active: e11 } = this.viewModel;
    e11 || i.getLogger(this).warn("Popup can only be focused when currently active."), this._handleFocus();
  }
  next() {
    return this.viewModel.next();
  }
  open(e11) {
    const t5 = !!e11 && !!e11.featureMenuOpen, i6 = { collapsed: !!e11 && !!e11.collapsed, featureMenuOpen: t5 };
    this.set(i6), this.viewModel.open(e11), e11?.shouldFocus && this._handleFocus(true);
  }
  previous() {
    return this.viewModel.previous();
  }
  reposition() {
    this.renderNow(), this._positionContainer(), this._setCurrentAlignment();
  }
  triggerAction(e11) {
    return this.viewModel.triggerAction(e11);
  }
  render() {
    const { dockEnabled: e11, currentAlignment: t5, currentDockPosition: i6 } = this, { active: o5, screenLocation: n8 } = this.viewModel, s4 = o5 && e11, r3 = o5 && !e11, l4 = this.selectedFeature?.layer?.title, a8 = this.selectedFeature?.layer?.id, c8 = { [e9.alignTopCenter]: "top-center" === t5, [e9.alignBottomCenter]: "bottom-center" === t5, [e9.alignTopLeft]: "top-left" === t5, [e9.alignBottomLeft]: "bottom-left" === t5, [e9.alignTopRight]: "top-right" === t5, [e9.alignBottomRight]: "bottom-right" === t5, [e9.isDocked]: s4, [e9.shadow]: r3, [e9.isDockedTopLeft]: "top-left" === i6, [e9.isDockedTopCenter]: "top-center" === i6, [e9.isDockedTopRight]: "top-right" === i6, [e9.isDockedBottomLeft]: "bottom-left" === i6, [e9.isDockedBottomCenter]: "bottom-center" === i6, [e9.isDockedBottomRight]: "bottom-right" === i6 };
    return n("div", { afterCreate: this._positionContainer, afterUpdate: this._positionContainer, "aria-hidden": (!o5).toString(), "aria-label": c(this.title ?? ""), "aria-modal": "false", bind: this, class: this.classes(e9.base, c8, { [e9.baseHidden]: !n8 && !e11 }), "data-layer-id": a8, "data-layer-title": l4, role: "dialog" }, o5 ? [this._renderMainContainer(), this._renderPointer()] : null);
  }
  _renderPointer() {
    return this.dockEnabled ? null : n("div", { class: e9.pointer, key: "popup-pointer", role: "presentation" }, n("div", { class: this.classes(e9.pointerDirection, e9.shadow) }));
  }
  _renderMainContainer() {
    const { dockEnabled: e11 } = this, t5 = { [e9.shadow]: e11 };
    return n("div", { afterCreate: this._setMainContainerNode, afterUpdate: this._setMainContainerNode, bind: this, class: this.classes(e9.main, e4.widget, t5) }, this._featuresWidget.render());
  }
  _getAnimationDurationMS() {
    const { _containerNode: e11 } = this;
    return e11 ? 1e3 * parseFloat(window.getComputedStyle(e11).animationDuration) : E;
  }
  async _handleFocus(e11 = false) {
    this._focusAbortController?.abort(), this._focusAbortController = new AbortController();
    const t5 = this._focusAbortController.signal;
    e11 && await j(() => true === this.viewModel?.active, { signal: t5 }), await d(R(t5)), await d(A(this._getAnimationDurationMS(), t5)), this._featuresWidget.focus();
  }
  _isOutsideView(e11) {
    const { popupHeight: t5, popupWidth: i6, screenLocation: o5, side: n8, view: s4 } = e11;
    if (isNaN(i6) || isNaN(t5) || !s4 || !o5) return false;
    const r3 = s4.padding;
    return "right" === n8 && o5.x + i6 / 2 > s4.width - r3.right || ("left" === n8 && o5.x - i6 / 2 < r3.left || ("top" === n8 && o5.y - t5 < r3.top || "bottom" === n8 && o5.y + t5 > s4.height - r3.bottom));
  }
  _calculateAutoAlignment(e11) {
    if ("auto" !== e11) return e11;
    const { _pointerOffsetInPx: t5, _containerNode: i6, _mainContainerNode: o5, viewModel: n8 } = this, { screenLocation: s4, view: r3 } = n8;
    if (null == s4 || !r3 || !i6) return "top-center";
    function l4(e12) {
      return parseInt(e12.replaceAll(/[^-\d.]/g, ""), 10);
    }
    const a8 = o5 ? window.getComputedStyle(o5, null) : null, d4 = a8 ? l4(a8.getPropertyValue("max-height")) : 0, c8 = a8 ? l4(a8.getPropertyValue("height")) : 0, { height: h4, width: u2 } = i6.getBoundingClientRect(), p4 = u2 + t5, g2 = Math.max(h4, d4, c8) + t5, v2 = this._isOutsideView({ popupHeight: g2, popupWidth: p4, screenLocation: s4, side: "right", view: r3 }), m5 = this._isOutsideView({ popupHeight: g2, popupWidth: p4, screenLocation: s4, side: "left", view: r3 }), f7 = this._isOutsideView({ popupHeight: g2, popupWidth: p4, screenLocation: s4, side: "top", view: r3 }), w2 = this._isOutsideView({ popupHeight: g2, popupWidth: p4, screenLocation: s4, side: "bottom", view: r3 });
    return m5 ? f7 ? "bottom-right" : "top-right" : v2 ? f7 ? "bottom-left" : "top-left" : f7 ? w2 ? "top-center" : "bottom-center" : "top-center";
  }
  _callCurrentAlignment(e11) {
    return "function" == typeof e11 ? e11.call(this) : e11;
  }
  _getCurrentAlignment() {
    const { alignment: e11, dockEnabled: t5, _containerNode: i6 } = this;
    return !t5 && this.viewModel.active && i6 ? this._calculatePositionResult(this._calculateAutoAlignment(this._callCurrentAlignment(e11))) : null;
  }
  _setCurrentAlignment() {
    this._set("currentAlignment", this._getCurrentAlignment());
  }
  _setCurrentDockPosition() {
    this._set("currentDockPosition", this._getCurrentDockPosition());
  }
  _calculatePositionResult(e11) {
    const t5 = ["left", "right"];
    return L2(this.container) && t5.reverse(), e11?.replace(/leading/gi, t5[0]).replaceAll(/trailing/gi, t5[1]);
  }
  _callDockPosition(e11) {
    return "function" == typeof e11 ? e11.call(this) : e11;
  }
  _getDockPosition() {
    return this._calculatePositionResult(this._calculateAutoDockPosition(this._callDockPosition(this.dockOptions?.position)));
  }
  _getCurrentDockPosition() {
    return this.dockEnabled && this.viewModel.active ? this._getDockPosition() : null;
  }
  _calculateAutoDockPosition(e11) {
    if ("auto" !== e11) return e11;
    const t5 = this.viewModel?.view, i6 = L2(this.container) ? "top-left" : "top-right";
    if (!t5) return i6;
    const o5 = t5.padding || { left: 0, right: 0 }, n8 = t5.width - o5.left - o5.right, { breakpoints: s4 } = t5;
    return s4 && n8 <= s4.xsmall ? "bottom-center" : i6;
  }
  _getDockIcon() {
    const e11 = this._getDockPosition();
    if (this.dockEnabled) return "minimize";
    switch (e11) {
      case "top-left":
      case "bottom-left":
        return "dock-left";
      case "top-center":
        return "maximize";
      case "bottom-center":
        return "dock-bottom";
      default:
        return "dock-right";
    }
  }
  _handleDockIcon() {
    this._dockAction.icon = this._getDockIcon();
  }
  _handleDockEnabled() {
    this._dockAction.title = this.dockEnabled ? this.messages?.undock : this.messages?.dock;
  }
  _setMainContainerNode(e11) {
    this._mainContainerNode = e11;
  }
  _positionContainer(e11 = this._containerNode) {
    if (e11 && (this._containerNode = e11), !this._containerNode) return;
    const { screenLocation: t5 } = this.viewModel, { width: i6 } = this._containerNode.getBoundingClientRect(), o5 = this._calculatePositionStyle(t5, i6);
    o5 && Object.assign(this._containerNode.style, o5);
  }
  _calculateFullWidth(e11) {
    const { currentAlignment: t5, _pointerOffsetInPx: i6 } = this;
    return "top-left" === t5 || "bottom-left" === t5 || "top-right" === t5 || "bottom-right" === t5 ? e11 + i6 : e11;
  }
  _calculateAlignmentPosition(e11, t5, i6, o5) {
    const { currentAlignment: n8, _pointerOffsetInPx: s4 } = this;
    if (!i6) return;
    const { padding: r3 } = i6, l4 = o5 / 2, a8 = i6.height - t5, d4 = i6.width - e11;
    return "bottom-center" === n8 ? { top: t5 + s4 - r3.top, left: e11 - l4 - r3.left } : "top-left" === n8 ? { bottom: a8 + s4 - r3.bottom, right: d4 + s4 - r3.right } : "bottom-left" === n8 ? { top: t5 + s4 - r3.top, right: d4 + s4 - r3.right } : "top-right" === n8 ? { bottom: a8 + s4 - r3.bottom, left: e11 + s4 - r3.left } : "bottom-right" === n8 ? { top: t5 + s4 - r3.top, left: e11 + s4 - r3.left } : "top-center" === n8 ? { bottom: a8 + s4 - r3.bottom, left: e11 - l4 - r3.left } : void 0;
  }
  _calculatePositionStyle(e11, t5) {
    const { dockEnabled: i6, view: o5 } = this;
    if (!o5) return;
    if (i6) return { left: "", top: "", right: "", bottom: "" };
    if (null == e11 || !t5) return;
    const n8 = this._calculateFullWidth(t5), s4 = this._calculateAlignmentPosition(e11.x, e11.y, o5, n8);
    return s4 ? { top: void 0 !== s4.top ? `${s4.top}px` : "auto", left: void 0 !== s4.left ? `${s4.left}px` : "auto", bottom: void 0 !== s4.bottom ? `${s4.bottom}px` : "auto", right: void 0 !== s4.right ? `${s4.right}px` : "auto" } : void 0;
  }
  _viewChange(e11, t5) {
    e11 && t5 && (this.close(), this.clear());
  }
  _viewReadyChange(e11, t5) {
    e11 ? this._wireUpView() : t5 && (this.close(), this.clear());
  }
  _wireUpView() {
    this._setDockEnabledForViewSize(this.dockOptions);
  }
  _dockingThresholdCrossed(e11, t5, i6) {
    const [o5, n8] = e11, [s4, r3] = t5, { width: l4 = 0, height: a8 = 0 } = i6 ?? {};
    return o5 <= l4 && s4 > l4 || o5 > l4 && s4 <= l4 || n8 <= a8 && r3 > a8 || n8 > a8 && r3 <= a8;
  }
  _updateDockEnabledForViewSize(e11, t5) {
    if (!e11 || !t5) return;
    const i6 = this.viewModel?.view?.padding || { left: 0, right: 0, top: 0, bottom: 0 }, o5 = i6.left + i6.right, n8 = i6.top + i6.bottom, s4 = [], r3 = [];
    s4[0] = e11[0] - o5, s4[1] = e11[1] - n8, r3[0] = t5[0] - o5, r3[1] = t5[1] - n8;
    const { dockOptions: l4 } = this, a8 = l4.breakpoint;
    this._dockingThresholdCrossed(s4, r3, a8) && this._setDockEnabledForViewSize(l4), this._setCurrentDockPosition();
  }
  _toggleScreenLocationEnabled() {
    const { dockEnabled: e11, viewModel: t5 } = this;
    if (!t5) return;
    const i6 = t5.active && !e11;
    t5.screenLocationEnabled = i6;
  }
  _shouldDockAtCurrentViewSize(e11) {
    const t5 = e11.breakpoint, i6 = this.viewModel?.view?.ui;
    if (!i6) return false;
    const { width: o5, height: n8 } = i6;
    if (isNaN(o5) || isNaN(n8)) return false;
    if (!t5) return false;
    const s4 = t5.hasOwnProperty("width") && o5 <= (t5.width ?? 0), r3 = t5.hasOwnProperty("height") && n8 <= (t5.height ?? 0);
    return s4 || r3;
  }
  _setDockEnabledForViewSize(e11) {
    e11.breakpoint && (this.dockEnabled = this._shouldDockAtCurrentViewSize(e11));
  }
};
r([m()], D2.prototype, "_containerNode", void 0), r([m({ readOnly: true })], D2.prototype, "_featureNavigationTop", null), r([m()], D2.prototype, "actions", null), r([m({ readOnly: true })], D2.prototype, "active", null), r([m()], D2.prototype, "alignment", void 0), r([m()], D2.prototype, "autoCloseEnabled", null), r([m()], D2.prototype, "defaultPopupTemplateEnabled", null), r([m()], D2.prototype, "content", null), r([m()], D2.prototype, "collapsed", null), r([m({ readOnly: true })], D2.prototype, "currentAlignment", null), r([m({ readOnly: true })], D2.prototype, "currentDockPosition", null), r([m()], D2.prototype, "dockOptions", null), r([m()], D2.prototype, "dockEnabled", void 0), r([m({ readOnly: true })], D2.prototype, "featureCount", null), r([m()], D2.prototype, "featureMenuOpen", null), r([m()], D2.prototype, "features", null), r([m()], D2.prototype, "goToOverride", null), r([m()], D2.prototype, "headingLevel", void 0), r([m()], D2.prototype, "highlightEnabled", null), r([m()], D2.prototype, "icon", null), r([m()], D2.prototype, "initialDisplayMode", null), r([m()], D2.prototype, "location", null), r([m()], D2.prototype, "label", null), r([m(), e2("esri/widgets/Popup/t9n/Popup")], D2.prototype, "messages", void 0), r([m()], D2.prototype, "promises", null), r([m({ readOnly: true })], D2.prototype, "selectedFeature", null), r([m({ readOnly: true })], D2.prototype, "selectedDrillInFeature", null), r([m()], D2.prototype, "selectedFeatureIndex", null), r([m({ readOnly: true })], D2.prototype, "selectedFeatureWidget", null), r([m()], D2.prototype, "title", null), r([m()], D2.prototype, "updateLocationEnabled", null), r([m()], D2.prototype, "view", null), r([m({ type: e10 }), e6(["triggerAction", "trigger-action"])], D2.prototype, "viewModel", void 0), r([m()], D2.prototype, "visible", null), r([m({ type: a7, nonNullable: true })], D2.prototype, "visibleElements", void 0), D2 = r([a("esri.widgets.Popup")], D2);
var P = D2;
export {
  P as default
};
//# sourceMappingURL=Popup-QNE4RREM.js.map
