import {
  r as r2
} from "./chunk-YFPGM5UE.js";
import {
  l
} from "./chunk-E3KEUGUG.js";
import {
  m as m2
} from "./chunk-N3XLUQJI.js";
import {
  a2 as a
} from "./chunk-JUAD7TJ6.js";
import {
  m
} from "./chunk-VHLUKPRH.js";
import {
  r
} from "./chunk-5TPMG26T.js";
import "./chunk-XTNIDRTB.js";
import "./chunk-FGWIXJQY.js";
import "./chunk-TKYAZCMB.js";
import "./chunk-3TBMFSPB.js";
import "./chunk-PSZLDJJA.js";
import "./chunk-S7IJH524.js";
import "./chunk-GZ2P4SCJ.js";
import "./chunk-XWG6QGFK.js";
import "./chunk-GWNLQRNM.js";
import "./chunk-FXKORAMT.js";
import "./chunk-GNMFMITH.js";

// node_modules/@arcgis/core/rest/networks/circuits/support/QueryCircuitsParameters.js
var n;
var p = n = class extends l {
  static from(t) {
    return m(n, t);
  }
  constructor(t) {
    super(t), this.gdbVersion = null, this.sessionId = null, this.moment = null, this.domainNetworkName = null, this.circuits = null, this.location = null, this.terminalId = 1, this.locationType = null, this.returnConsumerCircuits = false, this.resultTypes = null;
  }
  writeLocation(t, o) {
    null != t && (o.sourceId = t.sourceId, o.globalId = t.globalId, o.firstUnit = t.firstUnit, o.numUnits = t.numUnits);
  }
};
r([m2({ type: String, json: { write: true } })], p.prototype, "gdbVersion", void 0), r([m2({ type: String, json: { write: true } })], p.prototype, "sessionId", void 0), r([m2({ type: Date, json: { type: Number, write: { writer: (t, o) => {
  o.moment = t ? t.getTime() : null;
} } } })], p.prototype, "moment", void 0), r([m2({ type: String, json: { write: true } })], p.prototype, "domainNetworkName", void 0), r([m2({ type: [String], json: { write: true } })], p.prototype, "circuits", void 0), r([m2({ type: Object, json: { write: true } })], p.prototype, "location", void 0), r([r2("location")], p.prototype, "writeLocation", null), r([m2({ type: Number, json: { write: true } })], p.prototype, "terminalId", void 0), r([m2({ type: String, json: { write: true } })], p.prototype, "locationType", void 0), r([m2({ type: Boolean, json: { write: true } })], p.prototype, "returnConsumerCircuits", void 0), r([m2({ type: [String], json: { write: true } })], p.prototype, "resultTypes", void 0), p = n = r([a("esri.rest.networks.circuits.support.QueryCircuitsParameters")], p);
var c = p;
export {
  c as default
};
//# sourceMappingURL=QueryCircuitsParameters-APOG3C5D.js.map
