import {
  S as S3
} from "./chunk-YR4BEFGH.js";
import {
  u
} from "./chunk-EEB2RHCK.js";
import {
  t
} from "./chunk-ASO56N3T.js";
import "./chunk-KYHAK7RN.js";
import {
  O
} from "./chunk-4PAILKIT.js";
import "./chunk-QYCJPZF2.js";
import "./chunk-G3V62EXP.js";
import "./chunk-MGE3DVJJ.js";
import "./chunk-A4YQJHJZ.js";
import "./chunk-JSDQVIZI.js";
import "./chunk-GEY3MNEN.js";
import "./chunk-QARUBZM2.js";
import "./chunk-YEQJ7SMN.js";
import "./chunk-F6HYAIOQ.js";
import "./chunk-733XT7D4.js";
import "./chunk-O3AUTEBE.js";
import "./chunk-TUPNUSND.js";
import "./chunk-VZRBHAHT.js";
import "./chunk-73JRZP7E.js";
import "./chunk-I7SMTGBD.js";
import "./chunk-TAPCW5Z5.js";
import "./chunk-JOUWZB2W.js";
import "./chunk-ZQPAEH56.js";
import "./chunk-SEPZOYEZ.js";
import "./chunk-L5FOMWCW.js";
import "./chunk-CF5GNPLI.js";
import "./chunk-5WTH3GBK.js";
import "./chunk-N6WKHIKW.js";
import {
  c,
  c2,
  f
} from "./chunk-PLM5FUIE.js";
import {
  S,
  S2,
  d,
  h as h2
} from "./chunk-PC3GTHZ5.js";
import "./chunk-LHJOMFWG.js";
import "./chunk-LW7J7Z4M.js";
import "./chunk-A4KKV2O6.js";
import "./chunk-IAKXH7PU.js";
import "./chunk-DRLVYVHZ.js";
import "./chunk-DKS7UUDR.js";
import "./chunk-KDQWOWXR.js";
import "./chunk-JOVQBCRD.js";
import "./chunk-2B6XECE5.js";
import "./chunk-GYAK76KG.js";
import "./chunk-QB5ST4HW.js";
import "./chunk-CCHJ3WNU.js";
import "./chunk-RD652CDC.js";
import "./chunk-KB5I2WHB.js";
import "./chunk-P3YYANTX.js";
import "./chunk-WKCCXG3E.js";
import "./chunk-ZWJOMK2U.js";
import "./chunk-Y2ZAHGIO.js";
import "./chunk-ZCE5HP23.js";
import "./chunk-Y2QTREQA.js";
import "./chunk-OV7XVIQP.js";
import "./chunk-JQSXFLSD.js";
import "./chunk-H5K53FMS.js";
import "./chunk-VNLFNBKT.js";
import "./chunk-KHEIHGIK.js";
import "./chunk-XGWAEOLO.js";
import "./chunk-76QJRCNC.js";
import "./chunk-YL4WUSSA.js";
import "./chunk-AAC6XSCN.js";
import "./chunk-GKCEBA6Q.js";
import "./chunk-VWMPQK5V.js";
import "./chunk-IGBV77N3.js";
import "./chunk-5Y3EUPZN.js";
import "./chunk-2W7OT7Z4.js";
import "./chunk-3PPDORWL.js";
import "./chunk-YIXK32VF.js";
import "./chunk-CHTPXQAG.js";
import "./chunk-2NTKYBCL.js";
import "./chunk-4ADC6HZF.js";
import "./chunk-H6F6O2KE.js";
import "./chunk-AF3FX2UV.js";
import "./chunk-DRAQJS2F.js";
import "./chunk-BZYXFNL4.js";
import "./chunk-VNTS5E5O.js";
import "./chunk-TMFB3DKM.js";
import "./chunk-X3UT6DT7.js";
import "./chunk-JD3UVEVP.js";
import "./chunk-NO2XQDLB.js";
import "./chunk-LBC3MAJX.js";
import "./chunk-NMP7ZOVG.js";
import "./chunk-YHYQP7QX.js";
import "./chunk-RP7FUW55.js";
import "./chunk-MPV4X4LZ.js";
import "./chunk-TNW4TPNP.js";
import "./chunk-IL45XPTT.js";
import "./chunk-G5DA3EEG.js";
import "./chunk-I6IIPG56.js";
import "./chunk-JEYXDNAT.js";
import "./chunk-DJJNSAUR.js";
import "./chunk-PZBXBPVO.js";
import "./chunk-TMC6HYGQ.js";
import "./chunk-7FAVUXK2.js";
import "./chunk-IVNFIIVI.js";
import "./chunk-NOGWEW4X.js";
import "./chunk-ZCZERMS4.js";
import "./chunk-RGFH75DR.js";
import "./chunk-FEGY3M6U.js";
import "./chunk-NY6S6EMV.js";
import "./chunk-AQGMTI4V.js";
import "./chunk-QG7JWSBW.js";
import "./chunk-7ZMGKXLG.js";
import "./chunk-JMXPE5PE.js";
import "./chunk-LL73CCBG.js";
import "./chunk-6TS2ZJL4.js";
import "./chunk-IBGTNH54.js";
import "./chunk-ROVRMLYN.js";
import "./chunk-SYPTUUSZ.js";
import {
  l as l2
} from "./chunk-4OESBQFK.js";
import "./chunk-6QTMK7BB.js";
import "./chunk-BNO7HCVD.js";
import "./chunk-7NMH5MM5.js";
import "./chunk-TCIXF7MM.js";
import "./chunk-UGTICYU7.js";
import "./chunk-3MHRDLQO.js";
import "./chunk-2IMSGFJN.js";
import "./chunk-VHTQ5H2C.js";
import "./chunk-YX2VTIZR.js";
import "./chunk-LYSDGL5S.js";
import "./chunk-SRJX4QLW.js";
import "./chunk-WPTJIN2M.js";
import "./chunk-KUP5BM5G.js";
import "./chunk-HNQNVI5C.js";
import "./chunk-G34OBNLT.js";
import "./chunk-WJUYGRZY.js";
import "./chunk-FKFXOPPT.js";
import "./chunk-KE3WBZYL.js";
import "./chunk-EOMIFMDH.js";
import "./chunk-QFU5COFB.js";
import "./chunk-45ILJ6ZH.js";
import "./chunk-VCRP2PLV.js";
import "./chunk-BDLVUYG2.js";
import "./chunk-6QA2BVC5.js";
import "./chunk-HWKQJUGY.js";
import "./chunk-XDCUZFJX.js";
import "./chunk-DNZK6PPI.js";
import "./chunk-7BWCD63N.js";
import "./chunk-65K4DQAH.js";
import "./chunk-MUKDJQWB.js";
import "./chunk-6KFXWKZZ.js";
import {
  V
} from "./chunk-X3R5OB6L.js";
import "./chunk-RACDQ3AL.js";
import "./chunk-TEXTBDH7.js";
import "./chunk-N3A2BVTW.js";
import "./chunk-IGYEHOTB.js";
import "./chunk-TVM3SZJR.js";
import "./chunk-52HWRRRQ.js";
import "./chunk-VNTEV3V4.js";
import "./chunk-OGOQOMMV.js";
import "./chunk-7Z3AF3B2.js";
import "./chunk-6GWORUT3.js";
import "./chunk-CMHHL5UO.js";
import "./chunk-KJSBBQ22.js";
import "./chunk-LMEOPAGQ.js";
import "./chunk-YIV2QKTZ.js";
import {
  h,
  l,
  w
} from "./chunk-A3VAC24F.js";
import "./chunk-FPSA4NFH.js";
import "./chunk-UY6B6IVT.js";
import "./chunk-6PV45IYU.js";
import "./chunk-SRQCQD63.js";
import "./chunk-FIRNXFAH.js";
import "./chunk-O5TPFXRT.js";
import "./chunk-Q6XRAGMA.js";
import "./chunk-JUAPMINU.js";
import "./chunk-PK2ZR2SJ.js";
import "./chunk-YFPGM5UE.js";
import "./chunk-OXSERRAR.js";
import "./chunk-7HI4VRVW.js";
import "./chunk-ZX46THLM.js";
import "./chunk-Y2ZIOB7Y.js";
import "./chunk-KTUX3OKX.js";
import "./chunk-E3KEUGUG.js";
import {
  m
} from "./chunk-N3XLUQJI.js";
import {
  a2 as a
} from "./chunk-JUAD7TJ6.js";
import "./chunk-VHLUKPRH.js";
import {
  r
} from "./chunk-5TPMG26T.js";
import "./chunk-3NBBZ43U.js";
import "./chunk-VOLWOTEG.js";
import "./chunk-XTNIDRTB.js";
import "./chunk-FGWIXJQY.js";
import "./chunk-TKYAZCMB.js";
import "./chunk-3TBMFSPB.js";
import "./chunk-PSZLDJJA.js";
import "./chunk-ZWFY3WY5.js";
import "./chunk-LQFTAGIV.js";
import "./chunk-S7IJH524.js";
import {
  e
} from "./chunk-GZ2P4SCJ.js";
import "./chunk-XWG6QGFK.js";
import "./chunk-GWNLQRNM.js";
import {
  L
} from "./chunk-FXKORAMT.js";
import "./chunk-GNMFMITH.js";

// node_modules/@arcgis/core/views/2d/layers/RouteLayerView2D.js
var k = ["route-info", "direction-line", "direction-point", "polygon-barrier", "polyline-barrier", "point-barrier", "stop"];
var I = { graphic: null, property: null, oldValue: null, newValue: null };
function M(t2) {
  return t2 instanceof c || t2 instanceof c2 || t2 instanceof S || t2 instanceof h2 || t2 instanceof d || t2 instanceof f || t2 instanceof S2;
}
function F(t2) {
  return V.isCollection(t2) && t2.length && M(t2.at(0));
}
function j(t2) {
  return Array.isArray(t2) && t2.length > 0 && M(t2[0]);
}
var V2 = /* @__PURE__ */ new Set(["default"]);
var G = class extends S3(u) {
  constructor() {
    super(...arguments), this._graphics = new V(), this._highlightIds = /* @__PURE__ */ new Map(), this._networkFeatureMap = /* @__PURE__ */ new Map(), this._networkGraphicMap = /* @__PURE__ */ new Map(), this._interaction = null, this._loadInteractionPromise = null, this.interactive = false;
  }
  get _routeItems() {
    return new l2({ getCollections: () => null == this.layer || this.destroyed ? [] : [null != this.layer.routeInfo ? new V([this.layer.routeInfo]) : null, this.layer.directionLines, this.layer.directionPoints, this.layer.polygonBarriers, this.layer.polylineBarriers, this.layer.pointBarriers, this.layer.stops] });
  }
  initialize() {
    this.addHandles(l(() => {
      const { interactive: t2, suspended: e2 } = this;
      return { interactive: t2, suspended: e2 };
    }, ({ interactive: t2, suspended: e2 }) => {
      const i = t2 && !e2;
      i && this._getInteractionLoadPromise().then((t3) => {
        t3.enabled = this.interactive && !this.suspended;
      }), this._interaction && (this._interaction.enabled = i);
    }, w)), this._updatingHandles.addOnCollectionChange(() => this._routeItems, (t2) => this._routeItemsChanged(t2), h);
  }
  destroy() {
    this._networkFeatureMap.clear(), this._networkGraphicMap.clear(), this._graphics.removeAll(), this._get("_routeItems")?.destroy();
  }
  attach() {
    this._createGraphicsView();
  }
  detach() {
    this._destroyGraphicsView(), this._interaction?.enabled && (this._interaction.enabled = false);
  }
  get selectedNetworkFeatures() {
    return this._interaction?.selectedNetworkFeatures ?? null;
  }
  async create(t2) {
    if (!this.interactive) return;
    return (await this._getInteractionLoadPromise()).create(t2);
  }
  async fetchPopupFeaturesAtLocation(t2, e2) {
    return this._graphicsView.hitTest(t2).filter(({ popupTemplate: t3 }) => !!t3);
  }
  highlight(t2) {
    let i;
    i = M(t2) ? [this._getNetworkFeatureUid(t2)] : j(t2) ? t2.map((t3) => this._getNetworkFeatureUid(t3)) : F(t2) ? t2.map((t3) => this._getNetworkFeatureUid(t3)).toArray() : [t2.uid];
    const r2 = i.filter(L);
    return r2.length ? (this._addHighlight(r2), e(() => this._removeHighlight(r2))) : e();
  }
  async hitTest(t2, i) {
    if (this.suspended) return null;
    const r2 = this._graphicsView.hitTest(t2).filter(L).map((t3) => this._networkGraphicMap.get(t3));
    if (!r2.length) return null;
    const { layer: s } = this;
    return r2.reverse().map((e2) => ({ type: "route", layer: s, mapPoint: t2, networkFeature: e2 }));
  }
  isUpdating() {
    return this._graphicsView.updating;
  }
  moveEnd() {
  }
  remove(t2) {
    this._interaction?.remove(t2);
  }
  update(t2) {
    this._graphicsView.processUpdate(t2);
  }
  viewChange() {
    this._graphicsView.viewChange();
  }
  _addHighlight(t2) {
    for (const e2 of t2) if (this._highlightIds.has(e2)) {
      const t3 = this._highlightIds.get(e2);
      this._highlightIds.set(e2, t3 + 1);
    } else this._highlightIds.set(e2, 1);
    this._updateHighlight();
  }
  _createGraphic(t2) {
    const e2 = t2.toGraphic();
    return e2.layer = this.layer, e2.sourceLayer = this.layer, e2;
  }
  _createGraphicsView() {
    const t2 = this.view, e2 = () => this.requestUpdate(), i = new t(t2.featuresTilingScheme);
    this._graphicsView = new O({ container: i, graphics: this._graphics, requestUpdateCallback: e2, view: t2 }), this.container.addChild(i), this._updateHighlight();
  }
  _destroyGraphicsView() {
    this.container.removeChild(this._graphicsView.container), this._graphicsView.destroy();
  }
  _getDrawOrder(t2) {
    const e2 = this._networkGraphicMap.get(t2);
    return k.indexOf(e2.type);
  }
  _getInteractionLoadPromise() {
    return this._loadInteractionPromise || (this._loadInteractionPromise = this._loadInteraction(), this._updatingHandles.addPromise(this._loadInteractionPromise)), this._loadInteractionPromise;
  }
  _getNetworkFeatureUid(t2) {
    return this._networkFeatureMap.has(t2) ? this._networkFeatureMap.get(t2).uid : null;
  }
  async _loadInteraction() {
    const { layer: t2, view: e2 } = this, { RouteLayerInteraction: i } = await import("./RouteLayerInteraction-IGA2ZPI7.js");
    return this._interaction = new i({ view: e2, layer: t2 }), this._interaction;
  }
  _removeHighlight(t2) {
    for (const e2 of t2) if (this._highlightIds.has(e2)) {
      const t3 = this._highlightIds.get(e2) - 1;
      0 === t3 ? this._highlightIds.delete(e2) : this._highlightIds.set(e2, t3);
    }
    this._updateHighlight();
  }
  _routeItemsChanged(t2) {
    if (t2.removed.length) {
      this._graphics.removeMany(t2.removed.map((t3) => {
        const e2 = this._networkFeatureMap.get(t3);
        return this._networkFeatureMap.delete(t3), this._networkGraphicMap.delete(e2), e2;
      }));
      for (const e2 of t2.removed) this.removeHandles(e2);
    }
    if (t2.added.length) {
      this._graphics.addMany(t2.added.map((t3) => {
        const e2 = this._createGraphic(t3);
        return null == e2.symbol ? null : (this._networkFeatureMap.set(t3, e2), this._networkGraphicMap.set(e2, t3), e2);
      }).filter(L));
      for (const e2 of t2.added) this.addHandles([l(() => e2.geometry, (t3, i) => {
        this._updateGraphic(e2, "geometry", t3, i);
      }), l(() => e2.symbol, (t3, i) => {
        this._updateGraphic(e2, "symbol", t3, i);
      }), l(() => e2.popupTemplate, (t3) => {
        this._networkFeatureMap.has(e2) && (this._networkFeatureMap.get(e2).popupTemplate = t3);
      }), l(() => e2.toGraphic().attributes, (t3) => {
        this._networkFeatureMap.has(e2) && (this._networkFeatureMap.get(e2).attributes = t3);
      })], e2);
      this._graphics.sort((t3, e2) => this._getDrawOrder(t3) - this._getDrawOrder(e2));
    }
  }
  _updateGraphic(t2, e2, i, r2) {
    if (!this._networkFeatureMap.has(t2)) {
      const e3 = this._createGraphic(t2);
      return this._networkFeatureMap.set(t2, e3), this._networkGraphicMap.set(e3, t2), void this._graphics.add(e3);
    }
    const s = this._networkFeatureMap.get(t2);
    s[e2] = i, I.graphic = s, I.property = e2, I.oldValue = r2, I.newValue = i, this._graphicsView.graphicUpdateHandler(I);
  }
  _updateHighlight() {
    const t2 = Array.from(this._highlightIds.keys()), e2 = this._getHighlightBits(V2.values());
    this._graphicsView.setHighlight(t2.map((t3) => ({ objectId: t3, highlightFlags: e2 })));
  }
};
r([m()], G.prototype, "_graphics", void 0), r([m()], G.prototype, "_routeItems", null), r([m()], G.prototype, "_interaction", void 0), r([m()], G.prototype, "interactive", void 0), r([m({ readOnly: true })], G.prototype, "selectedNetworkFeatures", null), G = r([a("esri.views.2d.layers.RouteLayerView2D")], G);
var b = G;
export {
  b as default
};
//# sourceMappingURL=RouteLayerView2D-WWMCM3DK.js.map
