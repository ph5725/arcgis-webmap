import {
  _
} from "./chunk-L5FOMWCW.js";
import {
  e as e2
} from "./chunk-ZUTXZ2PO.js";
import {
  d as d2
} from "./chunk-FSVG2RRX.js";
import "./chunk-L3O6KWVI.js";
import {
  l as l3
} from "./chunk-H7SHPX7W.js";
import {
  c as c2
} from "./chunk-WIICHW3C.js";
import "./chunk-T4BWGCN6.js";
import "./chunk-AC7GOP3F.js";
import {
  a as a5
} from "./chunk-XPKVLOAO.js";
import {
  s as s3
} from "./chunk-GESOBEYT.js";
import {
  A as A2,
  l as l4
} from "./chunk-GG4VLKUY.js";
import "./chunk-IL45XPTT.js";
import {
  c as c3
} from "./chunk-6MFKAT6L.js";
import "./chunk-NOWX6W7R.js";
import {
  p as p3
} from "./chunk-OQ76WPLD.js";
import {
  e
} from "./chunk-KSVHYEPS.js";
import {
  te
} from "./chunk-UTU6N7VJ.js";
import "./chunk-RV3SBM2C.js";
import "./chunk-4GXVCEW4.js";
import {
  f as f2
} from "./chunk-IUQBXXYO.js";
import "./chunk-7WKBQS4R.js";
import {
  A
} from "./chunk-MULCOUFY.js";
import {
  j as j2
} from "./chunk-VGIEH4HM.js";
import {
  p
} from "./chunk-XLF2NMGX.js";
import {
  t as t3
} from "./chunk-X5GD6LFD.js";
import {
  b2 as b,
  d,
  j,
  l as l2,
  p as p2,
  s as s2,
  v,
  y as y2
} from "./chunk-G4PMFSAZ.js";
import "./chunk-MX5VW6PC.js";
import {
  c
} from "./chunk-JJNHUYXK.js";
import "./chunk-UG6RJXJ2.js";
import {
  S
} from "./chunk-OTCYHWWG.js";
import {
  t as t2
} from "./chunk-UDSZVLDS.js";
import "./chunk-UGXCZZ7N.js";
import {
  o as o2
} from "./chunk-OTSYE6UT.js";
import "./chunk-K5LVZUBF.js";
import "./chunk-J7LSFQNH.js";
import {
  m as m3,
  u
} from "./chunk-AGDHKBKD.js";
import "./chunk-OC2XWDW2.js";
import "./chunk-C3JHRSMA.js";
import "./chunk-M2UZRY7C.js";
import "./chunk-HUVZEBBO.js";
import "./chunk-VLPG2W66.js";
import "./chunk-GH7GZNY6.js";
import "./chunk-G5DA3EEG.js";
import "./chunk-D443BZKU.js";
import "./chunk-7DFHXN7Z.js";
import "./chunk-NX54JGTL.js";
import "./chunk-I6IIPG56.js";
import "./chunk-JEYXDNAT.js";
import "./chunk-DJJNSAUR.js";
import "./chunk-PZBXBPVO.js";
import "./chunk-TMC6HYGQ.js";
import "./chunk-7FAVUXK2.js";
import "./chunk-IVNFIIVI.js";
import "./chunk-T4QXFCFF.js";
import "./chunk-BFUOEOXA.js";
import "./chunk-NOGWEW4X.js";
import "./chunk-ZCZERMS4.js";
import "./chunk-7CUBIFKN.js";
import "./chunk-GPMIOMDJ.js";
import "./chunk-RGFH75DR.js";
import "./chunk-FEGY3M6U.js";
import "./chunk-RWRC6JKB.js";
import "./chunk-M6AESODI.js";
import "./chunk-NY6S6EMV.js";
import "./chunk-AQGMTI4V.js";
import "./chunk-QG7JWSBW.js";
import "./chunk-YSCIEMYQ.js";
import {
  R
} from "./chunk-7ZMGKXLG.js";
import "./chunk-JMXPE5PE.js";
import "./chunk-LL73CCBG.js";
import {
  m as m2
} from "./chunk-6TS2ZJL4.js";
import "./chunk-IBGTNH54.js";
import {
  h
} from "./chunk-L7EN54WK.js";
import "./chunk-6QTMK7BB.js";
import "./chunk-7NMH5MM5.js";
import "./chunk-TCIXF7MM.js";
import "./chunk-UGTICYU7.js";
import "./chunk-3MHRDLQO.js";
import "./chunk-F4KXGA4J.js";
import "./chunk-KHRHKYU2.js";
import "./chunk-2IMSGFJN.js";
import "./chunk-VHTQ5H2C.js";
import {
  q
} from "./chunk-YX2VTIZR.js";
import "./chunk-LYSDGL5S.js";
import "./chunk-SRJX4QLW.js";
import "./chunk-WPTJIN2M.js";
import "./chunk-KUP5BM5G.js";
import "./chunk-HNQNVI5C.js";
import "./chunk-G34OBNLT.js";
import "./chunk-WJUYGRZY.js";
import "./chunk-FKFXOPPT.js";
import "./chunk-KE3WBZYL.js";
import "./chunk-EOMIFMDH.js";
import "./chunk-QFU5COFB.js";
import "./chunk-45ILJ6ZH.js";
import {
  I,
  g
} from "./chunk-VCRP2PLV.js";
import "./chunk-BDLVUYG2.js";
import "./chunk-6QA2BVC5.js";
import "./chunk-HWKQJUGY.js";
import "./chunk-XDCUZFJX.js";
import "./chunk-DNZK6PPI.js";
import "./chunk-7BWCD63N.js";
import "./chunk-65K4DQAH.js";
import "./chunk-MUKDJQWB.js";
import "./chunk-6KFXWKZZ.js";
import "./chunk-HPGYEHVI.js";
import "./chunk-YBJ5GVXQ.js";
import "./chunk-X3R5OB6L.js";
import "./chunk-RACDQ3AL.js";
import "./chunk-TEXTBDH7.js";
import "./chunk-N3A2BVTW.js";
import {
  y
} from "./chunk-IGYEHOTB.js";
import {
  a as a4
} from "./chunk-TVM3SZJR.js";
import "./chunk-52HWRRRQ.js";
import "./chunk-VNTEV3V4.js";
import "./chunk-OGOQOMMV.js";
import "./chunk-7Z3AF3B2.js";
import "./chunk-6GWORUT3.js";
import "./chunk-HCYE6OE4.js";
import "./chunk-KJSBBQ22.js";
import "./chunk-LMEOPAGQ.js";
import "./chunk-YIV2QKTZ.js";
import "./chunk-A3VAC24F.js";
import "./chunk-FPSA4NFH.js";
import "./chunk-UY6B6IVT.js";
import "./chunk-6PV45IYU.js";
import "./chunk-SRQCQD63.js";
import "./chunk-FIRNXFAH.js";
import {
  z
} from "./chunk-O5TPFXRT.js";
import "./chunk-Q6XRAGMA.js";
import {
  o
} from "./chunk-JUAPMINU.js";
import {
  f
} from "./chunk-PK2ZR2SJ.js";
import "./chunk-YFPGM5UE.js";
import "./chunk-OXSERRAR.js";
import "./chunk-7HI4VRVW.js";
import "./chunk-ZX46THLM.js";
import "./chunk-Y2ZIOB7Y.js";
import "./chunk-KTUX3OKX.js";
import {
  l
} from "./chunk-E3KEUGUG.js";
import {
  m
} from "./chunk-N3XLUQJI.js";
import {
  a2
} from "./chunk-JUAD7TJ6.js";
import {
  x
} from "./chunk-VHLUKPRH.js";
import {
  r
} from "./chunk-5TPMG26T.js";
import "./chunk-3NBBZ43U.js";
import "./chunk-VOLWOTEG.js";
import "./chunk-XTNIDRTB.js";
import "./chunk-FGWIXJQY.js";
import "./chunk-TKYAZCMB.js";
import "./chunk-3TBMFSPB.js";
import "./chunk-PSZLDJJA.js";
import {
  H
} from "./chunk-ZWFY3WY5.js";
import "./chunk-LQFTAGIV.js";
import "./chunk-S7IJH524.js";
import {
  a as a3,
  k,
  t
} from "./chunk-GZ2P4SCJ.js";
import {
  i2 as i,
  s
} from "./chunk-XWG6QGFK.js";
import {
  a
} from "./chunk-GWNLQRNM.js";
import "./chunk-FXKORAMT.js";
import "./chunk-GNMFMITH.js";

// node_modules/@arcgis/core/layers/support/PurgeOptions.js
var r2;
var _a;
var i2 = (_a = class extends l {
  constructor() {
    super(...arguments), this.age = null, this.ageReceived = null, this.displayCount = null, this.maxObservations = 1;
  }
  clone() {
    return new r2({ age: this.age, ageReceived: this.ageReceived, displayCount: this.displayCount, maxObservations: this.maxObservations });
  }
}, r2 = _a, _a);
r([m({ type: Number, json: { write: true } })], i2.prototype, "age", void 0), r([m({ type: Number, json: { write: true } })], i2.prototype, "ageReceived", void 0), r([m({ type: Number, json: { write: true } })], i2.prototype, "displayCount", void 0), r([m({ type: Number, json: { write: true } })], i2.prototype, "maxObservations", void 0), i2 = r2 = r([a2("esri.layers.support.PurgeOptions")], i2);

// node_modules/@arcgis/core/layers/StreamLayer.js
var te2 = s3();
function re(e3, t4) {
  return new s("layer:unsupported", `Layer (${e3.title}, ${e3.id}) of type '${e3.declaredClass}' ${t4}`, { layer: e3 });
}
var ie = class extends a5(d2(c2(p(c3(e2(t3(f2(l3(b(j2(S(e(a4.ClonableMixin(h)))))))))))))) {
  constructor(...e3) {
    super(...e3), this.copyright = null, this.definitionExpression = null, this.displayField = null, this.elevationInfo = null, this.fields = null, this.fieldsIndex = null, this.geometryDefinition = null, this.geometryType = null, this.labelsVisible = true, this.labelingInfo = null, this.legendEnabled = true, this.maxReconnectionAttempts = 0, this.maxReconnectionInterval = 20, this.maxScale = 0, this.minScale = 0, this.objectIdField = null, this.operationalLayerType = "ArcGISStreamLayer", this.outFields = ["*"], this.popupEnabled = true, this.popupTemplate = null, this.purgeOptions = new i2(), this.refreshInterval = 0, this.screenSizePerspectiveEnabled = true, this.sourceJSON = null, this.spatialReference = f.WGS84, this.type = "stream", this.url = null, this.updateInterval = 300, this.useViewTime = true, this.webSocketUrl = null, this._debouncedSaveOperations = k(async (e4, t4, r3) => {
      const { save: i3, saveAs: o3 } = await import("./streamLayerUtils-WJOFIL3E.js");
      switch (e4) {
        case A.SAVE:
          return i3(this, t4);
        case A.SAVE_AS:
          return o3(this, r3, t4);
      }
    });
  }
  normalizeCtorArgs(e3, t4) {
    return "string" == typeof e3 ? { url: e3, ...t4 } : e3;
  }
  load(e3) {
    if (!("WebSocket" in globalThis)) return this.addResolvingPromise(Promise.reject(new s("stream-layer:websocket-unsupported", "WebSocket is not supported in this browser. StreamLayer will not have real-time connection with the stream service."))), Promise.resolve(this);
    const t4 = null != e3 ? e3.signal : null;
    return this.addResolvingPromise(this.loadFromPortal({ supportedTypes: ["Stream Service", "Feed"] }, e3).catch(a3).then(() => this._fetchService(t4))), Promise.resolve(this);
  }
  get defaultPopupTemplate() {
    return this.createPopupTemplate();
  }
  set featureReduction(e3) {
    const t4 = this._normalizeFeatureReduction(e3);
    this._set("featureReduction", t4);
  }
  set renderer(e3) {
    g(e3, this.fieldsIndex), this._set("renderer", e3);
  }
  readRenderer(e3, t4, r3) {
    t4 = t4.layerDefinition || t4;
    const i3 = t4.drawingInfo?.renderer;
    if (i3) {
      const e4 = o2(i3, t4, r3) || void 0;
      return e4 || i.getLogger(this).error("Failed to create renderer", { rendererDefinition: t4.drawingInfo.renderer, layer: this, context: r3 }), e4;
    }
    return te(t4, r3);
  }
  async connect(e3) {
    const [{ createConnection: t4 }] = await Promise.all([import("./createConnection-PQ46Q4C6.js"), this.load()]), r3 = this.geometryType ? y.toJSON(this.geometryType) : null, { customParameters: i3 = null, definitionExpression: o3 = null, geometryDefinition: n = null, maxReconnectionAttempts: a6 = 0, maxReconnectionInterval: p4 = 20, spatialReference: l5 = this.spatialReference } = e3 || this.createConnectionParameters(), m4 = t4(this.parsedUrl, this.spatialReference, l5, r3, o3, n, a6, p4, i3 ?? void 0), d3 = t([this.on("send-message-to-socket", (e4) => m4.sendMessageToSocket(e4)), this.on("send-message-to-client", (e4) => m4.sendMessageToClient(e4))]);
    return m4.once("destroy", d3.remove), m4;
  }
  createConnectionParameters() {
    return { spatialReference: this.spatialReference, customParameters: this.customParameters, definitionExpression: this.definitionExpression, geometryDefinition: this.geometryDefinition, maxReconnectionAttempts: this.maxReconnectionAttempts, maxReconnectionInterval: this.maxReconnectionInterval };
  }
  createPopupTemplate(e3) {
    return p3(this, e3);
  }
  createQuery() {
    const e3 = new R();
    return e3.returnGeometry = true, e3.outFields = ["*"], e3.where = this.definitionExpression || "1=1", e3;
  }
  getFieldDomain(e3, t4) {
    if (!this.fields) return null;
    let r3 = null;
    return this.fields.some((t5) => (t5.name === e3 && (r3 = t5.domain), !!r3)), r3;
  }
  getField(e3) {
    return this.fieldsIndex.get(e3);
  }
  serviceSupportsSpatialReference(e3) {
    return true;
  }
  sendMessageToSocket(e3) {
    this.emit("send-message-to-socket", e3);
  }
  sendMessageToClient(e3) {
    this.emit("send-message-to-client", e3);
  }
  async save(e3) {
    return this._debouncedSaveOperations(A.SAVE, e3);
  }
  async saveAs(e3, t4) {
    return this._debouncedSaveOperations(A.SAVE_AS, t4, e3);
  }
  write(e3, t4) {
    const r3 = t4?.messages;
    return this.webSocketUrl ? (r3?.push(re(this, "using a custom websocket connection cannot be written to web scenes and web maps")), null) : this.parsedUrl ? super.write(e3, t4) : (r3?.push(re(this, "using a client-side only connection without a url cannot be written to web scenes and web maps")), null);
  }
  async _fetchService(e3) {
    if (!!!this.webSocketUrl && this.parsedUrl) {
      if (!this.sourceJSON) {
        const { data: t4 } = await H(this.parsedUrl.path, { query: { f: "json", ...this.customParameters, ...this.parsedUrl.query }, responseType: "json", signal: e3 });
        this.sourceJSON = t4;
      }
    } else {
      if (!this.timeInfo?.trackIdField) throw new s("stream-layer:missing-metadata", "The stream layer trackIdField must be specified.");
      if (!this.objectIdField) {
        const e4 = this.fields.find((e5) => "oid" === e5.type)?.name;
        if (!e4) throw new s("stream-layer:missing-metadata", "The stream layer objectIdField must be specified.");
        this.objectIdField = e4;
      }
      if (!this.fields) throw new s("stream-layer:missing-metadata", "The stream layer fields must be specified.");
      if (this.fields.some((e4) => e4.name === this.objectIdField) || this.fields.push(new m2({ name: this.objectIdField, alias: this.objectIdField, type: "oid" })), !this.geometryType) throw new s("stream-layer:missing-metadata", "The stream layer geometryType must be specified.");
      this.webSocketUrl && (this.url = this.webSocketUrl);
    }
    return this.read(this.sourceJSON, { origin: "service", portalItem: this.portalItem, portal: this.portalItem?.portal, url: this.parsedUrl }), g(this.renderer, this.fieldsIndex), I(this.timeInfo, this.fieldsIndex), this.objectIdField || (this.objectIdField = _), t2(this, { origin: "service" });
  }
};
r([m({ type: String })], ie.prototype, "copyright", void 0), r([m({ readOnly: true })], ie.prototype, "defaultPopupTemplate", null), r([m({ type: String, json: { name: "layerDefinition.definitionExpression", write: { enabled: true, allowNull: true } } })], ie.prototype, "definitionExpression", void 0), r([m({ type: String })], ie.prototype, "displayField", void 0), r([m({ type: c })], ie.prototype, "elevationInfo", void 0), r([m({ json: { origins: { "web-map": { read: false, write: false }, "portal-item": { read: false, write: false }, "web-scene": { read: false, write: false } } } })], ie.prototype, "featureReduction", null), r([m(te2.fields)], ie.prototype, "fields", void 0), r([m(te2.fieldsIndex)], ie.prototype, "fieldsIndex", void 0), r([m({ type: z, json: { name: "layerDefinition.definitionGeometry", write: true } })], ie.prototype, "geometryDefinition", void 0), r([m({ type: y.apiValues, json: { read: { reader: y.read } } })], ie.prototype, "geometryType", void 0), r([m(p2)], ie.prototype, "labelsVisible", void 0), r([m({ type: [A2], json: { name: "layerDefinition.drawingInfo.labelingInfo", read: { reader: l4 }, write: true } })], ie.prototype, "labelingInfo", void 0), r([m(d)], ie.prototype, "legendEnabled", void 0), r([m({ type: ["show", "hide"], json: { origins: { "portal-item": { read: false, write: false } } } })], ie.prototype, "listMode", void 0), r([m({ type: x })], ie.prototype, "maxReconnectionAttempts", void 0), r([m({ type: x })], ie.prototype, "maxReconnectionInterval", void 0), r([m(v)], ie.prototype, "maxScale", void 0), r([m(j)], ie.prototype, "minScale", void 0), r([m({ type: String })], ie.prototype, "objectIdField", void 0), r([m({ value: "ArcGISStreamLayer", type: ["ArcGISStreamLayer"] })], ie.prototype, "operationalLayerType", void 0), r([m({ readOnly: true })], ie.prototype, "outFields", void 0), r([m(l2)], ie.prototype, "popupEnabled", void 0), r([m({ type: q, json: { name: "popupInfo", write: true } })], ie.prototype, "popupTemplate", void 0), r([m({ type: i2 })], ie.prototype, "purgeOptions", void 0), r([m({ json: { read: false, write: false } })], ie.prototype, "refreshInterval", void 0), r([m({ types: m3, json: { origins: { service: { write: { target: "drawingInfo.renderer", enabled: false } }, "web-scene": { name: "layerDefinition.drawingInfo.renderer", types: u, write: true } }, write: { target: "layerDefinition.drawingInfo.renderer" } } })], ie.prototype, "renderer", null), r([o("service", "renderer", ["drawingInfo.renderer", "defaultSymbol"]), o("renderer", ["layerDefinition.drawingInfo.renderer", "layerDefinition.defaultSymbol"])], ie.prototype, "readRenderer", null), r([m((() => {
  const e3 = a(s2);
  return e3.json.origins["portal-item"] = { read: false, write: false }, e3;
})())], ie.prototype, "screenSizePerspectiveEnabled", void 0), r([m()], ie.prototype, "sourceJSON", void 0), r([m({ type: f, json: { origins: { service: { read: { source: "spatialReference" } } } } })], ie.prototype, "spatialReference", void 0), r([m({ json: { read: false } })], ie.prototype, "type", void 0), r([m(y2)], ie.prototype, "url", void 0), r([m({ type: Number })], ie.prototype, "updateInterval", void 0), r([m({ json: { read: false, write: false } })], ie.prototype, "useViewTime", void 0), r([m({ type: String })], ie.prototype, "webSocketUrl", void 0), ie = r([a2("esri.layers.StreamLayer")], ie);
var oe = ie;
export {
  oe as default
};
//# sourceMappingURL=StreamLayer-N35DUP35.js.map
