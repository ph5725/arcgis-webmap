import {
  ce,
  n as n2
} from "./chunk-XXIGPIQW.js";
import "./chunk-5FFOLNHT.js";
import "./chunk-CEMHA5WX.js";
import "./chunk-YR4BEFGH.js";
import "./chunk-EEB2RHCK.js";
import "./chunk-FY4QOUNB.js";
import "./chunk-QYCJPZF2.js";
import "./chunk-G3V62EXP.js";
import "./chunk-MGE3DVJJ.js";
import "./chunk-A4YQJHJZ.js";
import "./chunk-JSDQVIZI.js";
import "./chunk-GEY3MNEN.js";
import "./chunk-QARUBZM2.js";
import "./chunk-YEQJ7SMN.js";
import "./chunk-F6HYAIOQ.js";
import "./chunk-733XT7D4.js";
import "./chunk-O3AUTEBE.js";
import "./chunk-3D5Q5QVJ.js";
import "./chunk-3JKD2XXM.js";
import "./chunk-VZRBHAHT.js";
import "./chunk-73JRZP7E.js";
import "./chunk-I7SMTGBD.js";
import "./chunk-TAPCW5Z5.js";
import "./chunk-IVCVGY7Y.js";
import "./chunk-JOUWZB2W.js";
import "./chunk-PLYN6ARH.js";
import "./chunk-L5FOMWCW.js";
import "./chunk-CF5GNPLI.js";
import "./chunk-5WTH3GBK.js";
import "./chunk-WGTPS6U6.js";
import "./chunk-A4KKV2O6.js";
import "./chunk-WEJSS4SJ.js";
import "./chunk-C6WRFAXG.js";
import "./chunk-IAKXH7PU.js";
import "./chunk-DRLVYVHZ.js";
import "./chunk-DKS7UUDR.js";
import "./chunk-KDQWOWXR.js";
import "./chunk-JOVQBCRD.js";
import "./chunk-VXCZZCO4.js";
import "./chunk-I3A6CJVF.js";
import "./chunk-U3MD377S.js";
import "./chunk-2B6XECE5.js";
import "./chunk-GYAK76KG.js";
import "./chunk-QB5ST4HW.js";
import "./chunk-NHBIV3BK.js";
import "./chunk-RD652CDC.js";
import "./chunk-KB5I2WHB.js";
import "./chunk-T2RAES2T.js";
import "./chunk-P3YYANTX.js";
import "./chunk-WKCCXG3E.js";
import "./chunk-ZWJOMK2U.js";
import "./chunk-Y2ZAHGIO.js";
import "./chunk-ZCE5HP23.js";
import "./chunk-Y2QTREQA.js";
import "./chunk-OV7XVIQP.js";
import "./chunk-JQSXFLSD.js";
import "./chunk-VM7TVSSO.js";
import "./chunk-H5K53FMS.js";
import "./chunk-VNLFNBKT.js";
import "./chunk-KHEIHGIK.js";
import "./chunk-GKCEBA6Q.js";
import "./chunk-VWMPQK5V.js";
import "./chunk-IGBV77N3.js";
import "./chunk-5Y3EUPZN.js";
import "./chunk-YBXGYFQH.js";
import "./chunk-NFDUQVJM.js";
import "./chunk-3PPDORWL.js";
import "./chunk-YIXK32VF.js";
import "./chunk-CHTPXQAG.js";
import "./chunk-2NTKYBCL.js";
import "./chunk-H6F6O2KE.js";
import "./chunk-AF3FX2UV.js";
import "./chunk-DRAQJS2F.js";
import "./chunk-BZYXFNL4.js";
import "./chunk-VNTS5E5O.js";
import "./chunk-TMFB3DKM.js";
import "./chunk-X3UT6DT7.js";
import "./chunk-JD3UVEVP.js";
import "./chunk-NO2XQDLB.js";
import "./chunk-LBC3MAJX.js";
import "./chunk-NMP7ZOVG.js";
import "./chunk-YHYQP7QX.js";
import "./chunk-RP7FUW55.js";
import "./chunk-MPV4X4LZ.js";
import "./chunk-TNW4TPNP.js";
import "./chunk-XJMFXMGK.js";
import "./chunk-T4BWGCN6.js";
import {
  d
} from "./chunk-AC7GOP3F.js";
import "./chunk-E76L26GR.js";
import "./chunk-GG4VLKUY.js";
import "./chunk-IL45XPTT.js";
import "./chunk-UTU6N7VJ.js";
import "./chunk-RV3SBM2C.js";
import "./chunk-4GXVCEW4.js";
import {
  g
} from "./chunk-B6C7UPBZ.js";
import "./chunk-7WKBQS4R.js";
import "./chunk-K5LVZUBF.js";
import "./chunk-C3JHRSMA.js";
import "./chunk-HUVZEBBO.js";
import "./chunk-VLPG2W66.js";
import "./chunk-GH7GZNY6.js";
import "./chunk-G5DA3EEG.js";
import "./chunk-D443BZKU.js";
import "./chunk-7DFHXN7Z.js";
import "./chunk-NX54JGTL.js";
import "./chunk-DJJNSAUR.js";
import "./chunk-PZBXBPVO.js";
import "./chunk-TMC6HYGQ.js";
import "./chunk-7FAVUXK2.js";
import "./chunk-IVNFIIVI.js";
import "./chunk-T4QXFCFF.js";
import "./chunk-BFUOEOXA.js";
import "./chunk-NOGWEW4X.js";
import "./chunk-ZCZERMS4.js";
import "./chunk-7CUBIFKN.js";
import "./chunk-GPMIOMDJ.js";
import "./chunk-RGFH75DR.js";
import "./chunk-FEGY3M6U.js";
import "./chunk-6WL2SHX6.js";
import "./chunk-ZXGBNDYM.js";
import "./chunk-GOWWJ2HE.js";
import "./chunk-7ZMGKXLG.js";
import "./chunk-JMXPE5PE.js";
import "./chunk-LL73CCBG.js";
import "./chunk-6TS2ZJL4.js";
import "./chunk-IBGTNH54.js";
import "./chunk-ROVRMLYN.js";
import "./chunk-SYPTUUSZ.js";
import "./chunk-6QTMK7BB.js";
import "./chunk-BNO7HCVD.js";
import "./chunk-7NMH5MM5.js";
import "./chunk-TCIXF7MM.js";
import "./chunk-UGTICYU7.js";
import "./chunk-3MHRDLQO.js";
import "./chunk-KHRHKYU2.js";
import "./chunk-2IMSGFJN.js";
import "./chunk-VHTQ5H2C.js";
import "./chunk-YX2VTIZR.js";
import "./chunk-LYSDGL5S.js";
import "./chunk-SRJX4QLW.js";
import "./chunk-WPTJIN2M.js";
import "./chunk-KUP5BM5G.js";
import "./chunk-HNQNVI5C.js";
import "./chunk-G34OBNLT.js";
import "./chunk-WJUYGRZY.js";
import "./chunk-FKFXOPPT.js";
import "./chunk-KE3WBZYL.js";
import "./chunk-EOMIFMDH.js";
import "./chunk-QFU5COFB.js";
import "./chunk-45ILJ6ZH.js";
import "./chunk-VCRP2PLV.js";
import "./chunk-BDLVUYG2.js";
import {
  n
} from "./chunk-6QA2BVC5.js";
import "./chunk-HWKQJUGY.js";
import "./chunk-XDCUZFJX.js";
import "./chunk-DNZK6PPI.js";
import "./chunk-7BWCD63N.js";
import "./chunk-65K4DQAH.js";
import "./chunk-MUKDJQWB.js";
import "./chunk-6KFXWKZZ.js";
import "./chunk-HPGYEHVI.js";
import "./chunk-YBJ5GVXQ.js";
import "./chunk-X3R5OB6L.js";
import "./chunk-RACDQ3AL.js";
import "./chunk-TEXTBDH7.js";
import "./chunk-N3A2BVTW.js";
import "./chunk-IGYEHOTB.js";
import "./chunk-TVM3SZJR.js";
import "./chunk-52HWRRRQ.js";
import "./chunk-VNTEV3V4.js";
import "./chunk-OGOQOMMV.js";
import "./chunk-7Z3AF3B2.js";
import "./chunk-6GWORUT3.js";
import "./chunk-U57T7EQN.js";
import "./chunk-CMHHL5UO.js";
import "./chunk-XHYOFJ4U.js";
import "./chunk-HCYE6OE4.js";
import "./chunk-KJSBBQ22.js";
import "./chunk-LMEOPAGQ.js";
import "./chunk-YIV2QKTZ.js";
import {
  l
} from "./chunk-A3VAC24F.js";
import "./chunk-FPSA4NFH.js";
import "./chunk-UY6B6IVT.js";
import "./chunk-6PV45IYU.js";
import "./chunk-SRQCQD63.js";
import "./chunk-FIRNXFAH.js";
import "./chunk-O5TPFXRT.js";
import "./chunk-Q6XRAGMA.js";
import "./chunk-JUAPMINU.js";
import "./chunk-PK2ZR2SJ.js";
import "./chunk-YFPGM5UE.js";
import "./chunk-OXSERRAR.js";
import "./chunk-7HI4VRVW.js";
import "./chunk-ZX46THLM.js";
import "./chunk-Y2ZIOB7Y.js";
import "./chunk-KTUX3OKX.js";
import "./chunk-E3KEUGUG.js";
import {
  m
} from "./chunk-N3XLUQJI.js";
import {
  a2 as a
} from "./chunk-JUAD7TJ6.js";
import "./chunk-VHLUKPRH.js";
import {
  r
} from "./chunk-5TPMG26T.js";
import "./chunk-3NBBZ43U.js";
import "./chunk-VOLWOTEG.js";
import "./chunk-XTNIDRTB.js";
import "./chunk-FGWIXJQY.js";
import "./chunk-TKYAZCMB.js";
import "./chunk-3TBMFSPB.js";
import "./chunk-PSZLDJJA.js";
import "./chunk-ZWFY3WY5.js";
import "./chunk-LQFTAGIV.js";
import "./chunk-S7IJH524.js";
import {
  e,
  t
} from "./chunk-GZ2P4SCJ.js";
import {
  s
} from "./chunk-XWG6QGFK.js";
import "./chunk-GWNLQRNM.js";
import "./chunk-FXKORAMT.js";
import "./chunk-GNMFMITH.js";

// node_modules/@arcgis/core/views/layers/StreamLayerView.js
var r2 = (r3) => {
  let i = class extends r3 {
    resume() {
      this._isUserPaused = false, this.suspended || this._doResume();
    }
    pause() {
      this._isUserPaused = true, this.suspended || this._doPause();
    }
    disconnect() {
      this._doDisconnect();
    }
    connect() {
      this._doConnect();
    }
    clear() {
      this._doClear();
    }
    constructor(...s2) {
      super(...s2), this._isUserPaused = false, this.filter = null;
    }
    get connectionStatus() {
      return (this._isUserPaused || this.suspended) && "connected" === this._streamConnectionStatus ? "paused" : this._streamConnectionStatus;
    }
    _onSuspendedChange(s2) {
      s2 ? this._doPause() : this._isUserPaused || this._doResume();
    }
  };
  return r([m()], i.prototype, "_isUserPaused", void 0), r([m({ readOnly: true })], i.prototype, "connectionStatus", null), r([m({ type: d })], i.prototype, "filter", void 0), i = r([a("esri.views.layers.StreamLayerView")], i), i;
};

// node_modules/@arcgis/core/views/2d/layers/StreamLayerView2D.js
var p = class extends r2(ce) {
  constructor() {
    super(...arguments), this.pipelineConnectionStatus = "disconnected", this.pipelineErrorString = null;
  }
  initialize() {
    this.addHandles([l(() => this.layer.customParameters, async (e2) => {
      (await this.getWorker()).streamMessenger.updateCustomParameters(e2);
    }), this.layer.on("send-message-to-socket", async (e2) => {
      (await this.getWorker()).streamMessenger.sendMessageToSocket(e2);
    }), this.layer.on("send-message-to-client", async (e2) => {
      (await this.getWorker()).streamMessenger.sendMessageToClient(e2), this._isUserPaused && "type" in e2 && "clear" === e2.type && this.incrementSourceRefreshVersion();
    }), l(() => this.layer.purgeOptions, () => this._update()), l(() => this.suspended, this._onSuspendedChange.bind(this))], "constructor"), this._doResume();
  }
  destroy() {
    this._doPause();
  }
  get connectionError() {
    return this.pipelineErrorString ? new s("stream-controller", this.pipelineErrorString) : null;
  }
  on(e2, r3) {
    if (Array.isArray(e2)) return t(e2.map((e3) => this.on(e3, r3)));
    const n3 = ["data-received", "message-received"].includes(e2);
    n3 && this.getWorker().then((r4) => r4.streamMessenger.enableEvent(e2, true));
    const o = super.on(e2, r3), i = this;
    return e(() => {
      o.remove(), n3 && (i._workerProxy.closed || i.hasEventListener(e2) || i.getWorker().then((r4) => r4.streamMessenger.enableEvent(e2, false)));
    });
  }
  async queryLatestObservations(e2, t2) {
    if (!(this.layer.timeInfo?.endField || this.layer.timeInfo?.startField || this.layer.timeInfo?.trackIdField)) throw new s("streamlayer-no-timeField", "queryLatestObservation can only be used with services that define a TrackIdField");
    const s2 = await this.getWorker();
    return n2(s2.features.executeQueryForLatestObservations(this._cleanUpQuery(e2), t2).then((e3) => {
      const r3 = g.fromJSON(e3);
      return r3.features.forEach((e4) => {
        e4.layer = this.layer, e4.sourceLayer = this.layer;
      }), r3;
    }), new g({ features: [] }));
  }
  detach() {
    super.detach(), this.pipelineConnectionStatus = "disconnected";
  }
  async queryObjectIds(e2, r3) {
    return (await super.queryObjectIds(e2, r3)).filter(n);
  }
  get _streamConnectionStatus() {
    return this.pipelineConnectionStatus;
  }
  _doPause() {
    null != this._refreshInterval && (clearInterval(this._refreshInterval), this._refreshInterval = null);
  }
  _doResume() {
    null == this._refreshInterval && (this._refreshInterval = setInterval(() => this.incrementSourceRefreshVersion(), this.layer.updateInterval));
  }
  _doDisconnect() {
    this.getWorker().then((e2) => e2.streamMessenger.disconnect()), this._doPause();
  }
  _doConnect() {
    this.getWorker().then((e2) => e2.streamMessenger.connect()), this.resume();
  }
  _doClear() {
    this.getWorker().then((e2) => e2.streamMessenger.clear()), null == this._refreshInterval && this.incrementSourceRefreshVersion();
  }
  _createClientOptions() {
    const e2 = super._createClientOptions(), r3 = this;
    return { ...e2, get container() {
      return r3.featureContainer;
    }, setProperty: (e3) => {
      this.set(e3.propertyName, e3.value);
    } };
  }
};
r([m()], p.prototype, "pipelineConnectionStatus", void 0), r([m()], p.prototype, "pipelineErrorString", void 0), r([m({ readOnly: true })], p.prototype, "connectionError", null), r([m({ readOnly: true })], p.prototype, "_streamConnectionStatus", null), p = r([a("esri.views.2d.layers.StreamLayerView2D")], p);
var d2 = p;
export {
  d2 as default
};
//# sourceMappingURL=StreamLayerView2D-EQJMM6ZX.js.map
