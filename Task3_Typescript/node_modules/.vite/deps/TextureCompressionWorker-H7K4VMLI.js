import {
  _
} from "./chunk-VRSDJVZH.js";
import {
  l
} from "./chunk-BZYXFNL4.js";
import {
  n
} from "./chunk-VOLWOTEG.js";
import "./chunk-ZWFY3WY5.js";
import "./chunk-LQFTAGIV.js";
import "./chunk-S7IJH524.js";
import "./chunk-GZ2P4SCJ.js";
import "./chunk-XWG6QGFK.js";
import "./chunk-GWNLQRNM.js";
import "./chunk-FXKORAMT.js";
import "./chunk-GNMFMITH.js";

// node_modules/@arcgis/core/libs/basisu/BasisUEncoder.js
function i() {
  return t ??= (async () => {
    const i3 = await import("./basis_encoder-MPPLS45N.js"), t2 = await i3.default({ locateFile: (i4) => n(`esri/libs/basisu/${i4}`) });
    return t2.initializeBasis(), t2;
  })(), t;
}
var t;

// node_modules/@arcgis/core/libs/dxtEncoder/DXTEncoder.js
function e() {
  return r ??= (async () => {
    const e2 = await import("./dxt_encoder-KOHQXEFW.js");
    return await e2.default({ locateFile: (e3) => n(`esri/libs/dxtEncoder/${e3}`) });
  })(), r;
}
var r;

// node_modules/@arcgis/core/views/support/TextureCompressionWorker.js
var a;
var s;
var l2 = null;
var i2 = null;
var o = class {
  constructor(e2, t2) {
    this.internalFormat = e2, this.compressedTexture = t2;
  }
};
async function u(e2) {
  let t2;
  if (t2 = e2.data instanceof ImageBitmap ? p(e2.data) : m(e2.data, e2.width, e2.height, e2.components, e2.needsFlip), e2.hasS3TC) {
    i2 || await h();
    const n2 = new Uint8Array(t2.length);
    if (i2?.encode(t2, e2.width, e2.height, e2.preMultiplyAlpha, n2)) {
      const e3 = M(n2, true), t3 = [n2.buffer];
      return { result: new o(e3?.internalFormat ?? null, e3?.textureData ?? null), transferList: t3 };
    }
    return { result: new o(null, null) };
  }
  if (e2.hasETC) {
    if (l2 || await c(), e2.preMultiplyAlpha && !i2 && await h(), e2.preMultiplyAlpha) {
      const n3 = new Uint8ClampedArray(t2.length);
      i2?.premultiply(new Uint8Array(t2), e2.width, e2.height, n3), t2 = n3;
    }
    const n2 = await d(t2, e2.width, e2.height, e2.hasMipmap), r2 = n2 ? await f(n2) : null, a2 = r2?.compressedTexture?.levels.map((e3) => e3.buffer) || [];
    return { result: new o(r2?.internalFormat ?? null, r2?.compressedTexture ?? null), transferList: a2 };
  }
  return { result: new o(null, null) };
}
async function c() {
  l2 || (l2 = await (a ??= i()));
}
async function h() {
  i2 || (i2 = await (s ??= e()));
}
async function d(e2, t2, n2, r2, a2 = 255, s2 = 0, i3 = false, o2 = false) {
  if (!l2) return null;
  const u2 = new l2.BasisEncoder();
  u2.setPerceptual(!o2), u2.setCheckForAlpha(true), u2.setForceAlpha(false), u2.setRenormalize(o2), u2.setMipGen(r2), u2.setMipSRGB(!o2), u2.setCreateKTX2File(true), u2.setKTX2SRGBTransferFunc(!o2), u2.setQualityLevel(a2), u2.setCompressionLevel(s2);
  const c2 = new Uint8Array(e2.byteLength);
  u2.setSliceSourceImage(0, new Uint8Array(e2), t2, n2, i3);
  const h2 = u2.encode(c2), d2 = new Uint8Array(c2.buffer, 0, h2), f2 = new l2.KTX2File(new Uint8Array(d2));
  return f2.isValid() ? (u2.delete(), d2) : (f2.close(), f2.delete(), u2.delete(), null);
}
async function f(e2) {
  if (!l2) return new o(null, null);
  const n2 = new l2.KTX2File(new Uint8Array(e2));
  n2.startTranscoding();
  const [a2, s2] = n2.getHasAlpha() ? [_.ETC2_RGBA, l.COMPRESSED_RGBA8_ETC2_EAC] : [_.ETC1_RGB, l.COMPRESSED_RGB8_ETC2], i3 = n2.getLevels(), u2 = [];
  for (let t2 = 0; t2 < i3; t2++) u2.push(new Uint8Array(n2.getImageTranscodedSizeInBytes(t2, 0, 0, a2))), n2.transcodeImage(u2[t2], t2, 0, 0, a2, 0, -1, -1);
  return n2.close(), n2.delete(), { internalFormat: s2, compressedTexture: { type: "compressed", levels: u2 } };
}
function p(e2) {
  const t2 = new OffscreenCanvas(e2.width, e2.height), n2 = t2.getContext("2d");
  n2.drawImage(e2, 0, 0);
  return n2.getImageData(0, 0, t2.width, t2.height).data;
}
function m(e2, t2, n2, r2, a2) {
  const s2 = new Uint8ClampedArray(e2).subarray(0, t2 * n2 * r2);
  if (!a2) return s2;
  const l3 = new Uint8ClampedArray(s2.length), i3 = t2 * r2;
  for (let o2 = 0; o2 < n2; o2++) {
    const e3 = o2 * i3, t3 = (n2 - o2 - 1) * i3;
    l3.set(s2.subarray(e3, e3 + i3), t3);
  }
  return l3;
}
var w = 31;
var y = 1;
var T = 2;
var A = 3;
var C = 4;
var g = 7;
var E = 21;
var b = 131072;
function S(e2) {
  return e2.charCodeAt(0) + (e2.charCodeAt(1) << 8) + (e2.charCodeAt(2) << 16) + (e2.charCodeAt(3) << 24);
}
var _2 = S("DXT1");
var D = S("DXT3");
var R = S("DXT5");
function M(e2, t2) {
  const n2 = new Int32Array(e2.buffer, e2.byteOffset, w);
  let a2, s2;
  switch (n2[E]) {
    case _2:
      a2 = 8, s2 = l.COMPRESSED_RGB_S3TC_DXT1_EXT;
      break;
    case D:
      a2 = 16, s2 = l.COMPRESSED_RGBA_S3TC_DXT3_EXT;
      break;
    case R:
      a2 = 16, s2 = l.COMPRESSED_RGBA_S3TC_DXT5_EXT;
      break;
    default:
      return null;
  }
  let l3 = 1, i3 = n2[C], o2 = n2[A];
  (3 & i3 || 3 & o2) && (i3 = i3 + 3 & -4, o2 = o2 + 3 & -4);
  const u2 = i3, c2 = o2;
  let h2, d2;
  n2[T] & b && false !== t2 && (l3 = Math.max(1, n2[g]));
  let f2 = e2.byteOffset + n2[y] + 4;
  const p2 = [];
  for (let r2 = 0; r2 < l3; ++r2) d2 = (i3 + 3 >> 2) * (o2 + 3 >> 2) * a2, h2 = new Uint8Array(e2.buffer, f2, d2), p2.push(h2), f2 += d2, i3 = Math.max(1, i3 >> 1), o2 = Math.max(1, o2 >> 1);
  return { textureData: { type: "compressed", levels: p2 }, internalFormat: s2, width: u2, height: c2 };
}
export {
  o as TextureCompressionWorkerOutput,
  u as compress,
  d as compressRGBADataToKTX2,
  f as createTextureDataKTX2,
  c as initializeBasisEncoder,
  h as initializeDXTEncoder
};
//# sourceMappingURL=TextureCompressionWorker-H7K4VMLI.js.map
