import {
  ae,
  f as f3,
  m as m2
} from "./chunk-7DTNCUVI.js";
import {
  p as p3
} from "./chunk-XBKH7OJ5.js";
import "./chunk-5DPSFHAC.js";
import "./chunk-L3WYZ6BH.js";
import "./chunk-TUSII7EA.js";
import "./chunk-ULQQXQG7.js";
import "./chunk-5HHZADOU.js";
import "./chunk-DKS7UUDR.js";
import "./chunk-F2RPYCFO.js";
import "./chunk-YB2E6SEN.js";
import "./chunk-KH55BE33.js";
import "./chunk-WEBPKGFM.js";
import "./chunk-6DARBDBU.js";
import "./chunk-KDQWOWXR.js";
import "./chunk-JOVQBCRD.js";
import "./chunk-ZAIOYQ5Z.js";
import {
  o as o2
} from "./chunk-TRH7YR3L.js";
import "./chunk-MXSL6LZA.js";
import "./chunk-VNLFNBKT.js";
import "./chunk-KHEIHGIK.js";
import "./chunk-X3UT6DT7.js";
import "./chunk-JD3UVEVP.js";
import "./chunk-3ZORAHSR.js";
import "./chunk-SZN55B2M.js";
import "./chunk-RNXMAHSA.js";
import "./chunk-VD4HSDHE.js";
import "./chunk-WBSGKMRV.js";
import "./chunk-SBFMUXL3.js";
import {
  i
} from "./chunk-PZV6BOD6.js";
import {
  l
} from "./chunk-H7SHPX7W.js";
import "./chunk-3IU6SQCC.js";
import "./chunk-E7YVYF37.js";
import "./chunk-E76L26GR.js";
import "./chunk-GG4VLKUY.js";
import "./chunk-IL45XPTT.js";
import "./chunk-OQ76WPLD.js";
import {
  e
} from "./chunk-KSVHYEPS.js";
import "./chunk-UTU6N7VJ.js";
import "./chunk-RV3SBM2C.js";
import "./chunk-4GXVCEW4.js";
import "./chunk-KQINCOQL.js";
import "./chunk-B6C7UPBZ.js";
import {
  f as f2
} from "./chunk-IUQBXXYO.js";
import "./chunk-7WKBQS4R.js";
import "./chunk-Z6OMEWWC.js";
import {
  j
} from "./chunk-VGIEH4HM.js";
import {
  p as p2
} from "./chunk-XLF2NMGX.js";
import {
  t as t2
} from "./chunk-X5GD6LFD.js";
import {
  b2 as b,
  y
} from "./chunk-G4PMFSAZ.js";
import "./chunk-MX5VW6PC.js";
import {
  c
} from "./chunk-JJNHUYXK.js";
import "./chunk-UG6RJXJ2.js";
import {
  S
} from "./chunk-OTCYHWWG.js";
import "./chunk-UGXCZZ7N.js";
import "./chunk-AGDHKBKD.js";
import "./chunk-OC2XWDW2.js";
import "./chunk-C3JHRSMA.js";
import "./chunk-M2UZRY7C.js";
import "./chunk-HUVZEBBO.js";
import "./chunk-VLPG2W66.js";
import "./chunk-GH7GZNY6.js";
import "./chunk-G5DA3EEG.js";
import "./chunk-D443BZKU.js";
import "./chunk-7DFHXN7Z.js";
import "./chunk-NX54JGTL.js";
import "./chunk-I6IIPG56.js";
import "./chunk-JEYXDNAT.js";
import "./chunk-DJJNSAUR.js";
import "./chunk-PZBXBPVO.js";
import "./chunk-TMC6HYGQ.js";
import "./chunk-7FAVUXK2.js";
import "./chunk-IVNFIIVI.js";
import "./chunk-T4QXFCFF.js";
import "./chunk-BFUOEOXA.js";
import "./chunk-NOGWEW4X.js";
import "./chunk-ZCZERMS4.js";
import "./chunk-7CUBIFKN.js";
import "./chunk-GPMIOMDJ.js";
import "./chunk-RGFH75DR.js";
import "./chunk-FEGY3M6U.js";
import "./chunk-RWRC6JKB.js";
import "./chunk-M6AESODI.js";
import "./chunk-NY6S6EMV.js";
import "./chunk-AQGMTI4V.js";
import "./chunk-QG7JWSBW.js";
import "./chunk-7ZMGKXLG.js";
import "./chunk-JMXPE5PE.js";
import "./chunk-LL73CCBG.js";
import "./chunk-6TS2ZJL4.js";
import "./chunk-IBGTNH54.js";
import "./chunk-ROVRMLYN.js";
import "./chunk-SYPTUUSZ.js";
import "./chunk-4OESBQFK.js";
import {
  h
} from "./chunk-L7EN54WK.js";
import "./chunk-6QTMK7BB.js";
import {
  t
} from "./chunk-5SRIFOTG.js";
import "./chunk-7NMH5MM5.js";
import "./chunk-TCIXF7MM.js";
import "./chunk-UGTICYU7.js";
import "./chunk-3MHRDLQO.js";
import "./chunk-F4KXGA4J.js";
import "./chunk-KHRHKYU2.js";
import "./chunk-2IMSGFJN.js";
import "./chunk-VHTQ5H2C.js";
import "./chunk-YX2VTIZR.js";
import "./chunk-LYSDGL5S.js";
import "./chunk-SRJX4QLW.js";
import "./chunk-WPTJIN2M.js";
import "./chunk-KUP5BM5G.js";
import "./chunk-HNQNVI5C.js";
import "./chunk-G34OBNLT.js";
import "./chunk-WJUYGRZY.js";
import "./chunk-FKFXOPPT.js";
import "./chunk-KE3WBZYL.js";
import "./chunk-EOMIFMDH.js";
import "./chunk-QFU5COFB.js";
import "./chunk-45ILJ6ZH.js";
import "./chunk-VCRP2PLV.js";
import "./chunk-BDLVUYG2.js";
import "./chunk-6QA2BVC5.js";
import "./chunk-HWKQJUGY.js";
import "./chunk-XDCUZFJX.js";
import "./chunk-DNZK6PPI.js";
import "./chunk-7BWCD63N.js";
import "./chunk-65K4DQAH.js";
import "./chunk-MUKDJQWB.js";
import "./chunk-6KFXWKZZ.js";
import "./chunk-HPGYEHVI.js";
import "./chunk-YBJ5GVXQ.js";
import "./chunk-X3R5OB6L.js";
import "./chunk-RACDQ3AL.js";
import "./chunk-TEXTBDH7.js";
import "./chunk-N3A2BVTW.js";
import "./chunk-IGYEHOTB.js";
import "./chunk-TVM3SZJR.js";
import "./chunk-52HWRRRQ.js";
import "./chunk-VNTEV3V4.js";
import "./chunk-OGOQOMMV.js";
import "./chunk-7Z3AF3B2.js";
import "./chunk-6GWORUT3.js";
import "./chunk-HCYE6OE4.js";
import "./chunk-KJSBBQ22.js";
import "./chunk-LMEOPAGQ.js";
import "./chunk-YIV2QKTZ.js";
import "./chunk-A3VAC24F.js";
import "./chunk-FPSA4NFH.js";
import "./chunk-UY6B6IVT.js";
import "./chunk-6PV45IYU.js";
import "./chunk-SRQCQD63.js";
import "./chunk-FIRNXFAH.js";
import "./chunk-O5TPFXRT.js";
import "./chunk-Q6XRAGMA.js";
import {
  o
} from "./chunk-JUAPMINU.js";
import {
  f
} from "./chunk-PK2ZR2SJ.js";
import {
  r as r2
} from "./chunk-YFPGM5UE.js";
import "./chunk-OXSERRAR.js";
import "./chunk-7HI4VRVW.js";
import "./chunk-ZX46THLM.js";
import "./chunk-Y2ZIOB7Y.js";
import {
  s as s2
} from "./chunk-KTUX3OKX.js";
import "./chunk-E3KEUGUG.js";
import {
  m
} from "./chunk-N3XLUQJI.js";
import {
  a2 as a
} from "./chunk-JUAD7TJ6.js";
import "./chunk-VHLUKPRH.js";
import {
  r
} from "./chunk-5TPMG26T.js";
import "./chunk-3NBBZ43U.js";
import "./chunk-VOLWOTEG.js";
import "./chunk-XTNIDRTB.js";
import "./chunk-FGWIXJQY.js";
import "./chunk-TKYAZCMB.js";
import "./chunk-3TBMFSPB.js";
import "./chunk-PSZLDJJA.js";
import {
  H,
  d,
  g2 as g,
  p2 as p
} from "./chunk-ZWFY3WY5.js";
import {
  I,
  _,
  v
} from "./chunk-LQFTAGIV.js";
import "./chunk-S7IJH524.js";
import {
  a as a2
} from "./chunk-GZ2P4SCJ.js";
import {
  s
} from "./chunk-XWG6QGFK.js";
import "./chunk-GWNLQRNM.js";
import "./chunk-FXKORAMT.js";
import "./chunk-GNMFMITH.js";

// node_modules/@arcgis/core/layers/TileLayer.js
var W;
var B = ["Canvas/World_Dark_Gray_Base", "Canvas/World_Dark_Gray_Reference", "Canvas/World_Light_Gray_Base", "Canvas/World_Light_Gray_Reference", "Elevation/World_Hillshade", "Elevation/World_Hillshade_Dark", "Ocean/World_Ocean_Base", "Ocean/World_Ocean_Reference", "Ocean_Basemap", "Reference/World_Boundaries_and_Places", "Reference/World_Boundaries_and_Places_Alternate", "Reference/World_Transportation", "World_Imagery", "World_Street_Map", "World_Topo_Map"];
var C = W = class extends p2(t2(m2(p3(f3(b(j(l(S(f2(i(e(h)))))))))))) {
  constructor(...e2) {
    super(...e2), this.listMode = "show", this.elevationInfo = new c({ mode: "on-the-ground" }), this.isReference = null, this.operationalLayerType = "ArcGISTiledMapServiceLayer", this.resampling = true, this.sourceJSON = null, this.spatialReference = null, this.path = null, this.sublayers = null, this.type = "tile", this.url = null;
  }
  normalizeCtorArgs(e2, r3) {
    return "string" == typeof e2 ? { url: e2, ...r3 } : e2;
  }
  load(e2) {
    const r3 = null != e2 ? e2.signal : null;
    return this.addResolvingPromise(this.loadFromPortal({ supportedTypes: ["Map Service"] }, e2).catch(a2).then(() => this._fetchService(r3))), Promise.resolve(this);
  }
  get attributionDataUrl() {
    const e2 = this.parsedUrl?.path.toLowerCase();
    return e2 ? this._getDefaultAttribution(this._getMapName(e2)) : null;
  }
  readSpatialReference(e2, r3) {
    return (e2 = e2 || r3.tileInfo?.spatialReference) && f.fromJSON(e2);
  }
  writeSublayers(e2, r3, t3, s3) {
    if (!this.loaded || !e2) return;
    const i2 = e2.slice().reverse().flatten(({ sublayers: e3 }) => e3 && e3.toArray().reverse()).toArray(), o3 = [], a3 = { writeSublayerStructure: false, ...s3 };
    i2.forEach((e3) => {
      const r4 = e3.write({}, a3);
      o3.push(r4);
    });
    o3.some((e3) => Object.keys(e3).length > 1) && (r3.layers = o3);
  }
  get tileServers() {
    return this._getDefaultTileServers(this.parsedUrl?.path);
  }
  castTileServers(e2) {
    return Array.isArray(e2) ? e2.map((e3) => I(e3).path) : null;
  }
  fetchTile(e2, t3, s3, i2 = {}) {
    const { signal: o3 } = i2, a3 = this.getTileUrl(e2, t3, s3), l2 = { responseType: "image", signal: o3, query: { ...this.refreshParameters } };
    return H(a3, l2).then((e3) => e3.data);
  }
  async fetchImageBitmapTile(e2, t3, s3, i2 = {}) {
    const { signal: o3 } = i2;
    if (this.fetchTile !== W.prototype.fetchTile) {
      const r3 = await this.fetchTile(e2, t3, s3, i2);
      return o2(r3, e2, t3, s3, o3);
    }
    const a3 = this.getTileUrl(e2, t3, s3), l2 = { responseType: "blob", signal: o3, query: { ...this.refreshParameters } }, { data: n } = await H(a3, l2);
    return o2(n, e2, t3, s3, o3);
  }
  getTileUrl(e2, r3, t3) {
    const s3 = !this.capabilities.operations.supportsTileMap && this.supportsBlankTile, i2 = v({ ...this.parsedUrl?.query, blankTile: !s3 && null, ...this.customParameters, token: this.apiKey }), o3 = this.tileServers;
    return `${o3 && o3.length ? o3[r3 % o3.length] : this.parsedUrl?.path}/tile/${e2}/${r3}/${t3}${i2 ? "?" + i2 : ""}`;
  }
  loadAll() {
    return t(this, (e2) => {
      e2(this.allSublayers);
    });
  }
  _fetchService(e2) {
    return new Promise((s3, i2) => {
      if (this.sourceJSON) {
        if (null != this.sourceJSON.bandCount && null != this.sourceJSON.pixelSizeX) throw new s("tile-layer:unsupported-url", "use ImageryTileLayer to open a tiled image service");
        return void s3({ data: this.sourceJSON });
      }
      if (!this.parsedUrl) throw new s("tile-layer:undefined-url", "layer's url is not defined");
      const o3 = p(this.parsedUrl.path);
      if (null != o3 && "ImageServer" === o3.serverType) throw new s("tile-layer:unsupported-url", "use ImageryTileLayer to open a tiled image service");
      H(this.parsedUrl.path, { query: { f: "json", ...this.parsedUrl.query, ...this.customParameters, token: this.apiKey }, responseType: "json", signal: e2 }).then(s3, i2);
    }).then((r3) => {
      let t3 = this.url;
      if (r3.ssl && (t3 = this.url = t3.replace(/^http:/i, "https:")), this.sourceJSON = r3.data, this.read(r3.data, { origin: "service", url: this.parsedUrl }), 10.1 === this.version && !g(t3)) return this._fetchServerVersion(t3, e2).then((e3) => {
        this.read({ currentVersion: e3 });
      }).catch(() => {
      });
    });
  }
  _fetchServerVersion(e2, s3) {
    if (!d(e2)) return Promise.reject();
    const i2 = e2.replace(/(.*\/rest)\/.*/i, "$1") + "/info";
    return H(i2, { query: { f: "json", ...this.customParameters, token: this.apiKey }, responseType: "json", signal: s3 }).then((e3) => {
      if (e3.data?.currentVersion) return e3.data.currentVersion;
      throw new s("tile-layer:version-not-available", "Server did not provide a version");
    });
  }
  _getMapName(e2) {
    const r3 = e2.match(/^(?:https?:)?\/\/(server\.arcgisonline\.com|services\.arcgisonline\.com|ibasemaps-api\.arcgis\.com)\/arcgis\/rest\/services\/([^/]+(\/[^/]+)*)\/mapserver/i);
    return r3 ? r3[2] : void 0;
  }
  _getDefaultAttribution(e2) {
    if (null == e2) return null;
    let r3;
    e2 = e2.toLowerCase();
    for (let t3 = 0, s3 = B.length; t3 < s3; t3++) if (r3 = B[t3], r3.toLowerCase().includes(e2)) return _("//static.arcgis.com/attribution/" + r3);
    return null;
  }
  _getDefaultTileServers(e2) {
    if (null == e2) return [];
    const r3 = -1 !== e2.search(/^(?:https?:)?\/\/server\.arcgisonline\.com/i), t3 = -1 !== e2.search(/^(?:https?:)?\/\/services\.arcgisonline\.com/i);
    return r3 || t3 ? [e2, e2.replace(r3 ? /server\.arcgisonline/i : /services\.arcgisonline/i, r3 ? "services.arcgisonline" : "server.arcgisonline")] : [];
  }
  get hasOverriddenFetchTile() {
    return !this.fetchTile[N];
  }
};
r([m({ readOnly: true })], C.prototype, "attributionDataUrl", null), r([m({ type: ["show", "hide", "hide-children"] })], C.prototype, "listMode", void 0), r([m({ json: { read: true, write: true } })], C.prototype, "blendMode", void 0), r([m()], C.prototype, "elevationInfo", void 0), r([m({ type: Boolean, json: { read: false, write: { enabled: true, overridePolicy: () => ({ enabled: false }) } } })], C.prototype, "isReference", void 0), r([m({ readOnly: true, type: ["ArcGISTiledMapServiceLayer"] })], C.prototype, "operationalLayerType", void 0), r([m({ type: Boolean })], C.prototype, "resampling", void 0), r([m()], C.prototype, "sourceJSON", void 0), r([m({ type: f })], C.prototype, "spatialReference", void 0), r([o("spatialReference", ["spatialReference", "tileInfo"])], C.prototype, "readSpatialReference", null), r([m({ type: String, json: { origins: { "web-scene": { read: true, write: true } }, read: false } })], C.prototype, "path", void 0), r([m({ readOnly: true })], C.prototype, "sublayers", void 0), r([r2("sublayers", { layers: { type: [ae] } })], C.prototype, "writeSublayers", null), r([m({ json: { read: false, write: false } })], C.prototype, "popupEnabled", void 0), r([m()], C.prototype, "tileServers", null), r([s2("tileServers")], C.prototype, "castTileServers", null), r([m({ readOnly: true, json: { read: false } })], C.prototype, "type", void 0), r([m(y)], C.prototype, "url", void 0), C = W = r([a("esri.layers.TileLayer")], C);
var N = Symbol("default-fetch-tile");
C.prototype.fetchTile[N] = true;
var k = C;
export {
  k as default
};
//# sourceMappingURL=TileLayer-52YZMGXY.js.map
