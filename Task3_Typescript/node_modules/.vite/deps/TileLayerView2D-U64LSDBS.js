import {
  n,
  o,
  r as r3
} from "./chunk-HFVCCDEX.js";
import {
  P,
  _,
  i as i3
} from "./chunk-YZ7DWVLV.js";
import {
  a as a2
} from "./chunk-TYEOKHW6.js";
import {
  r as r4
} from "./chunk-QRQFF5JU.js";
import "./chunk-IEBPGCZ4.js";
import {
  i as i2
} from "./chunk-CEMHA5WX.js";
import {
  S
} from "./chunk-YR4BEFGH.js";
import {
  u
} from "./chunk-EEB2RHCK.js";
import "./chunk-ZHRX45KN.js";
import "./chunk-625W4ZH5.js";
import "./chunk-OOBS22NY.js";
import "./chunk-KYHAK7RN.js";
import {
  O
} from "./chunk-4PAILKIT.js";
import "./chunk-QYCJPZF2.js";
import "./chunk-G3V62EXP.js";
import "./chunk-MGE3DVJJ.js";
import "./chunk-A4YQJHJZ.js";
import "./chunk-JSDQVIZI.js";
import "./chunk-GEY3MNEN.js";
import "./chunk-QARUBZM2.js";
import "./chunk-YEQJ7SMN.js";
import "./chunk-F6HYAIOQ.js";
import "./chunk-733XT7D4.js";
import "./chunk-O3AUTEBE.js";
import "./chunk-EGNOBZZN.js";
import "./chunk-3JKD2XXM.js";
import "./chunk-TUPNUSND.js";
import "./chunk-VZRBHAHT.js";
import "./chunk-73JRZP7E.js";
import "./chunk-I7SMTGBD.js";
import "./chunk-TAPCW5Z5.js";
import "./chunk-ORKTLG2L.js";
import "./chunk-JOUWZB2W.js";
import "./chunk-ZQPAEH56.js";
import "./chunk-SEPZOYEZ.js";
import "./chunk-L5FOMWCW.js";
import "./chunk-S4X4QGA7.js";
import "./chunk-CF5GNPLI.js";
import "./chunk-5WTH3GBK.js";
import "./chunk-N6WKHIKW.js";
import "./chunk-LHJOMFWG.js";
import "./chunk-56ZY2WLU.js";
import "./chunk-A4KKV2O6.js";
import "./chunk-WEJSS4SJ.js";
import "./chunk-IAKXH7PU.js";
import "./chunk-6EOJZ6DP.js";
import "./chunk-DRLVYVHZ.js";
import "./chunk-DKS7UUDR.js";
import "./chunk-6DARBDBU.js";
import "./chunk-KDQWOWXR.js";
import "./chunk-JOVQBCRD.js";
import "./chunk-2B6XECE5.js";
import "./chunk-GYAK76KG.js";
import "./chunk-QB5ST4HW.js";
import "./chunk-67CCONUO.js";
import "./chunk-CCHJ3WNU.js";
import "./chunk-RD652CDC.js";
import "./chunk-KB5I2WHB.js";
import "./chunk-P3YYANTX.js";
import "./chunk-WKCCXG3E.js";
import "./chunk-ZWJOMK2U.js";
import "./chunk-Y2ZAHGIO.js";
import "./chunk-ZCE5HP23.js";
import "./chunk-Y2QTREQA.js";
import "./chunk-OV7XVIQP.js";
import "./chunk-JQSXFLSD.js";
import "./chunk-VM7TVSSO.js";
import "./chunk-MXSL6LZA.js";
import "./chunk-H5K53FMS.js";
import "./chunk-VNLFNBKT.js";
import "./chunk-KHEIHGIK.js";
import "./chunk-XGWAEOLO.js";
import "./chunk-76QJRCNC.js";
import "./chunk-YL4WUSSA.js";
import "./chunk-AAC6XSCN.js";
import "./chunk-GKCEBA6Q.js";
import "./chunk-LYNZJBHM.js";
import "./chunk-SHYE33QH.js";
import "./chunk-LTMF2W73.js";
import "./chunk-VWMPQK5V.js";
import "./chunk-IGBV77N3.js";
import {
  c as c2
} from "./chunk-5Y3EUPZN.js";
import "./chunk-55AFRDJF.js";
import "./chunk-F5C72MOD.js";
import {
  p,
  r as r2
} from "./chunk-YBXGYFQH.js";
import {
  h
} from "./chunk-NFDUQVJM.js";
import "./chunk-2W7OT7Z4.js";
import "./chunk-3PPDORWL.js";
import "./chunk-YIXK32VF.js";
import "./chunk-CHTPXQAG.js";
import {
  e as e2
} from "./chunk-2NTKYBCL.js";
import {
  g
} from "./chunk-BDWOUZQR.js";
import "./chunk-H34ENSPL.js";
import "./chunk-4ADC6HZF.js";
import {
  c
} from "./chunk-XFKS4JQP.js";
import "./chunk-H6F6O2KE.js";
import "./chunk-AF3FX2UV.js";
import "./chunk-DRAQJS2F.js";
import "./chunk-BZYXFNL4.js";
import "./chunk-VNTS5E5O.js";
import "./chunk-TMFB3DKM.js";
import "./chunk-X3UT6DT7.js";
import "./chunk-JD3UVEVP.js";
import "./chunk-NO2XQDLB.js";
import "./chunk-LBC3MAJX.js";
import "./chunk-NMP7ZOVG.js";
import "./chunk-YHYQP7QX.js";
import "./chunk-RP7FUW55.js";
import "./chunk-MPV4X4LZ.js";
import "./chunk-TNW4TPNP.js";
import "./chunk-IL45XPTT.js";
import "./chunk-J7LSFQNH.js";
import "./chunk-G5DA3EEG.js";
import "./chunk-I6IIPG56.js";
import "./chunk-JEYXDNAT.js";
import "./chunk-DJJNSAUR.js";
import "./chunk-PZBXBPVO.js";
import "./chunk-TMC6HYGQ.js";
import "./chunk-7FAVUXK2.js";
import "./chunk-IVNFIIVI.js";
import "./chunk-NOGWEW4X.js";
import "./chunk-ZCZERMS4.js";
import "./chunk-RGFH75DR.js";
import "./chunk-FEGY3M6U.js";
import "./chunk-NY6S6EMV.js";
import "./chunk-AQGMTI4V.js";
import "./chunk-QG7JWSBW.js";
import "./chunk-7ZMGKXLG.js";
import "./chunk-JMXPE5PE.js";
import "./chunk-LL73CCBG.js";
import "./chunk-6TS2ZJL4.js";
import "./chunk-IBGTNH54.js";
import "./chunk-ROVRMLYN.js";
import "./chunk-SYPTUUSZ.js";
import "./chunk-6QTMK7BB.js";
import "./chunk-BNO7HCVD.js";
import "./chunk-7NMH5MM5.js";
import "./chunk-TCIXF7MM.js";
import "./chunk-UGTICYU7.js";
import "./chunk-3MHRDLQO.js";
import "./chunk-VUGQF5TL.js";
import "./chunk-ZAISHGSP.js";
import "./chunk-2IMSGFJN.js";
import "./chunk-VHTQ5H2C.js";
import "./chunk-YX2VTIZR.js";
import "./chunk-LYSDGL5S.js";
import "./chunk-SRJX4QLW.js";
import "./chunk-WPTJIN2M.js";
import "./chunk-KUP5BM5G.js";
import "./chunk-HNQNVI5C.js";
import "./chunk-G34OBNLT.js";
import "./chunk-WJUYGRZY.js";
import "./chunk-FKFXOPPT.js";
import "./chunk-KE3WBZYL.js";
import "./chunk-EOMIFMDH.js";
import "./chunk-QFU5COFB.js";
import "./chunk-45ILJ6ZH.js";
import "./chunk-VCRP2PLV.js";
import "./chunk-BDLVUYG2.js";
import "./chunk-6QA2BVC5.js";
import "./chunk-HWKQJUGY.js";
import "./chunk-XDCUZFJX.js";
import "./chunk-DNZK6PPI.js";
import "./chunk-7BWCD63N.js";
import "./chunk-65K4DQAH.js";
import "./chunk-MUKDJQWB.js";
import "./chunk-6KFXWKZZ.js";
import "./chunk-HPGYEHVI.js";
import "./chunk-X3R5OB6L.js";
import "./chunk-RACDQ3AL.js";
import "./chunk-TEXTBDH7.js";
import "./chunk-N3A2BVTW.js";
import "./chunk-IGYEHOTB.js";
import "./chunk-TVM3SZJR.js";
import "./chunk-52HWRRRQ.js";
import "./chunk-VNTEV3V4.js";
import "./chunk-OGOQOMMV.js";
import "./chunk-7Z3AF3B2.js";
import "./chunk-6GWORUT3.js";
import "./chunk-CMHHL5UO.js";
import "./chunk-KJSBBQ22.js";
import "./chunk-LMEOPAGQ.js";
import "./chunk-YIV2QKTZ.js";
import "./chunk-A3VAC24F.js";
import "./chunk-FPSA4NFH.js";
import "./chunk-UY6B6IVT.js";
import "./chunk-6PV45IYU.js";
import "./chunk-SRQCQD63.js";
import "./chunk-FIRNXFAH.js";
import "./chunk-O5TPFXRT.js";
import "./chunk-Q6XRAGMA.js";
import "./chunk-JUAPMINU.js";
import "./chunk-PK2ZR2SJ.js";
import "./chunk-YFPGM5UE.js";
import {
  s
} from "./chunk-OXSERRAR.js";
import "./chunk-7HI4VRVW.js";
import "./chunk-ZX46THLM.js";
import "./chunk-Y2ZIOB7Y.js";
import "./chunk-KTUX3OKX.js";
import "./chunk-E3KEUGUG.js";
import {
  m
} from "./chunk-N3XLUQJI.js";
import {
  a2 as a
} from "./chunk-JUAD7TJ6.js";
import "./chunk-VHLUKPRH.js";
import {
  r
} from "./chunk-5TPMG26T.js";
import "./chunk-3NBBZ43U.js";
import "./chunk-VOLWOTEG.js";
import "./chunk-XTNIDRTB.js";
import "./chunk-FGWIXJQY.js";
import "./chunk-TKYAZCMB.js";
import "./chunk-3TBMFSPB.js";
import "./chunk-PSZLDJJA.js";
import "./chunk-ZWFY3WY5.js";
import "./chunk-LQFTAGIV.js";
import "./chunk-S7IJH524.js";
import {
  D,
  b,
  e
} from "./chunk-GZ2P4SCJ.js";
import {
  i2 as i
} from "./chunk-XWG6QGFK.js";
import "./chunk-GWNLQRNM.js";
import "./chunk-FXKORAMT.js";
import "./chunk-GNMFMITH.js";

// node_modules/@arcgis/core/views/2d/layers/TileLayerView2D.js
var I = [0, 0];
var P2 = class extends i2(r3(S(u))) {
  constructor() {
    super(...arguments), this._fetchQueue = null, this._highlightGraphics = new c(), this._highlightView = null, this._popupHighlightHelper = null, this._tileStrategy = null, this.layer = null;
  }
  get resampling() {
    return !("resampling" in this.layer) || false !== this.layer.resampling;
  }
  get tilemapCache() {
    return "tilemapCache" in this.layer ? this.layer.tilemapCache : null;
  }
  update(e3) {
    this._fetchQueue.pause(), this._fetchQueue.state = e3.state, this._tileStrategy.update(e3), this._fetchQueue.resume(), this._highlightView?.processUpdate(e3);
  }
  attach() {
    const e3 = "tileServers" in this.layer ? this.layer.tileServers : null, i4 = this.tilemapCache;
    if (this._tileInfoView = new h(this.layer.tileInfo, this.layer.fullExtent, i4?.effectiveMinLOD, i4?.effectiveMaxLOD), this._fetchQueue = new p({ tileInfoView: this._tileInfoView, concurrency: e3 && 10 * e3.length || 10, process: (e4, i5) => this.fetchTile(e4, i5), scheduler: this.scheduler, priority: g.MAPVIEW_FETCH_QUEUE }), this._tileStrategy = new r2({ cachePolicy: "keep", resampling: this.resampling, acquireTile: (e4) => this.acquireTile(e4), releaseTile: (e4) => this.releaseTile(e4), tileInfoView: this._tileInfoView }), _(this, this.layer)) {
      const e4 = this._highlightView = new O({ view: this.view, graphics: this._highlightGraphics, requestUpdateCallback: () => this.requestUpdate(), container: new a2(this.view.featuresTilingScheme), defaultPointSymbolEnabled: false });
      this.container.addChild(this._highlightView.container), this._popupHighlightHelper = new P({ createFetchPopupFeaturesQueryGeometry: (e5, i5) => r4(e5, i5, this.view), highlightGraphics: this._highlightGraphics, highlightGraphicUpdated: ({ graphic: i5, property: t }) => e4.graphicUpdateHandler({ graphic: i5, property: t }), layerView: this, updatingHandles: this._updatingHandles });
    }
    this.requestUpdate(), this.addAttachHandles(this._updatingHandles.add(() => this.resampling, () => {
      this.doRefresh();
    })), super.attach();
  }
  detach() {
    super.detach(), this._tileStrategy.destroy(), this._fetchQueue.clear(), this.container.removeAllChildren(), this._popupHighlightHelper?.destroy(), this._highlightView?.destroy(), this._fetchQueue = this._tileStrategy = this._tileInfoView = this._popupHighlightHelper = null;
  }
  async fetchPopupFeaturesAtLocation(e3, i4) {
    return this._popupHighlightHelper ? this._popupHighlightHelper.fetchPopupFeaturesAtLocation(e3, i4) : [];
  }
  highlight(e3, t) {
    const s2 = i3(e3);
    if (0 === s2.length) return e();
    const r5 = t?.name ?? c2;
    return this._addHighlightGraphics(s2, r5), e(() => !this.destroyed && this._removeHighlightGraphics(s2, r5));
  }
  _processHighlight() {
    const e3 = this._getHighlights();
    this._highlightView?.setHighlight(e3);
  }
  _addHighlightGraphics(e3, i4) {
    this._highlightGraphics.addMany(e3), this._addHighlights(e3.map((e4) => e4.uid), i4);
  }
  _removeHighlightGraphics(e3, i4) {
    this._highlightGraphics.removeMany(e3), this._removeHighlights(e3.map((e4) => e4.uid), i4);
  }
  viewChange() {
    this.requestUpdate();
  }
  moveEnd() {
    this.requestUpdate();
  }
  supportsSpatialReference(e3) {
    return s(this.layer.tileInfo?.spatialReference, e3);
  }
  async doRefresh() {
    if (this.attached) {
      if (this.suspended) return this._tileStrategy.clear(), void this.requestUpdate();
      this._fetchQueue.reset(), this._tileStrategy.refresh((e3) => this._updatingHandles.addPromise(this._enqueueTileFetch(e3)));
    }
  }
  acquireTile(e3) {
    const i4 = this._bitmapView.createTile(e3), t = i4.bitmap;
    return [t.x, t.y] = this._tileInfoView.getTileCoords(I, i4.key), t.resolution = this._tileInfoView.getTileResolution(i4.key), [t.width, t.height] = this._tileInfoView.tileInfo.size, this._updatingHandles.addPromise(this._enqueueTileFetch(i4)), this._bitmapView.addChild(i4), this.requestUpdate(), i4;
  }
  releaseTile(e3) {
    this._fetchQueue.abort(e3.key.id), this._bitmapView.removeChild(e3), e3.once("detach", () => e3.destroy()), this.requestUpdate();
  }
  async fetchTile(e3, i4 = {}) {
    return this.tilemapCache ? this._fetchTileWithTilemapCache(e3, i4) : this._fetchTileWithoutTilemapCache(e3, i4);
  }
  async _fetchTileWithoutTilemapCache(e3, i4 = {}) {
    const { signal: t, resamplingLevel: r5 = 0 } = i4;
    try {
      return await this._fetchImage(e3, t);
    } catch (o2) {
      if (b(o2)) throw o2;
      if (!this.resampling) return o(this._tileInfoView.tileInfo.size);
      if (r5 < 3) {
        const t2 = this._tileInfoView.getTileParentId(e3.id);
        if (t2) {
          const s2 = new e2(t2), o3 = await this._fetchTileWithoutTilemapCache(s2, { ...i4, resamplingLevel: r5 + 1 });
          return n(this._tileInfoView, o3, s2, e3);
        }
      }
      return o(this._tileInfoView.tileInfo.size);
    }
  }
  async _fetchTileWithTilemapCache(e3, i4 = {}) {
    const t = this.tilemapCache, { signal: o2, resamplingLevel: l = 0 } = i4, h2 = new e2(0, 0, 0, 0);
    let a3, n2 = null;
    try {
      if (n2 = await t.fetchAvailabilityUpsample(e3.level, e3.row, e3.col, h2, { signal: o2 }), !this.resampling && h2.level !== e3.level) return await D(i4), o(this._tileInfoView.tileInfo.size);
      a3 = await this._fetchImage(h2, o2);
    } catch (p2) {
      if (b(p2)) throw p2;
      if (this.resampling && "unknown" === n2 && l < 3) {
        const t2 = this._tileInfoView.getTileParentId(e3.id);
        if (t2) {
          h2.set(t2);
          try {
            a3 = await this._fetchTileWithTilemapCache(h2, { ...i4, resamplingLevel: l + 1 });
          } catch {
          }
        }
      }
    }
    return a3 ? this.resampling ? n(this._tileInfoView, a3, h2, e3) : a3 : o(this._tileInfoView.tileInfo.size);
  }
  async _enqueueTileFetch(e3) {
    if (!this._fetchQueue.has(e3.key.id)) {
      try {
        const i4 = await this._fetchQueue.push(e3.key);
        e3.bitmap.source = i4, e3.bitmap.width = this._tileInfoView.tileInfo.size[0], e3.bitmap.height = this._tileInfoView.tileInfo.size[1], e3.once("attach", () => this.requestUpdate());
      } catch (i4) {
        b(i4) || i.getLogger(this).error(i4);
      }
      this.requestUpdate();
    }
  }
  async _fetchImage(e3, i4) {
    return this.layer.fetchImageBitmapTile(e3.level, e3.row, e3.col, { signal: i4 });
  }
};
r([m()], P2.prototype, "resampling", null), r([m()], P2.prototype, "tilemapCache", null), P2 = r([a("esri.views.2d.layers.TileLayerView2D")], P2);
var C = P2;
export {
  C as default
};
//# sourceMappingURL=TileLayerView2D-U64LSDBS.js.map
