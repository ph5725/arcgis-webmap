import {
  u as u4
} from "./chunk-WHJKVDY7.js";
import {
  S as S3,
  n as n2
} from "./chunk-YR4BEFGH.js";
import {
  u as u3
} from "./chunk-EEB2RHCK.js";
import "./chunk-OIYN2A3E.js";
import {
  t
} from "./chunk-ASO56N3T.js";
import "./chunk-KYHAK7RN.js";
import {
  O as O2
} from "./chunk-4PAILKIT.js";
import "./chunk-QYCJPZF2.js";
import "./chunk-G3V62EXP.js";
import "./chunk-MGE3DVJJ.js";
import "./chunk-A4YQJHJZ.js";
import "./chunk-JSDQVIZI.js";
import "./chunk-GEY3MNEN.js";
import {
  e
} from "./chunk-QARUBZM2.js";
import "./chunk-YEQJ7SMN.js";
import "./chunk-F6HYAIOQ.js";
import "./chunk-733XT7D4.js";
import "./chunk-O3AUTEBE.js";
import "./chunk-TUPNUSND.js";
import "./chunk-VZRBHAHT.js";
import "./chunk-73JRZP7E.js";
import "./chunk-I7SMTGBD.js";
import "./chunk-TAPCW5Z5.js";
import "./chunk-JOUWZB2W.js";
import "./chunk-ZQPAEH56.js";
import "./chunk-SEPZOYEZ.js";
import {
  h as h2,
  p
} from "./chunk-6JRYYUTZ.js";
import "./chunk-L5FOMWCW.js";
import "./chunk-CF5GNPLI.js";
import "./chunk-5WTH3GBK.js";
import "./chunk-N6WKHIKW.js";
import "./chunk-LHJOMFWG.js";
import {
  c as c2
} from "./chunk-2XBUTZI3.js";
import "./chunk-A4KKV2O6.js";
import "./chunk-IAKXH7PU.js";
import "./chunk-DRLVYVHZ.js";
import "./chunk-DKS7UUDR.js";
import "./chunk-KDQWOWXR.js";
import "./chunk-JOVQBCRD.js";
import "./chunk-2B6XECE5.js";
import "./chunk-GYAK76KG.js";
import "./chunk-QB5ST4HW.js";
import "./chunk-CCHJ3WNU.js";
import "./chunk-RD652CDC.js";
import "./chunk-KB5I2WHB.js";
import "./chunk-P3YYANTX.js";
import "./chunk-WKCCXG3E.js";
import "./chunk-ZWJOMK2U.js";
import "./chunk-Y2ZAHGIO.js";
import "./chunk-ZCE5HP23.js";
import "./chunk-Y2QTREQA.js";
import "./chunk-OV7XVIQP.js";
import "./chunk-JQSXFLSD.js";
import "./chunk-OFHPFWHF.js";
import {
  S
} from "./chunk-MZJEBIXX.js";
import "./chunk-H5K53FMS.js";
import "./chunk-VNLFNBKT.js";
import "./chunk-KHEIHGIK.js";
import "./chunk-XGWAEOLO.js";
import "./chunk-76QJRCNC.js";
import "./chunk-YL4WUSSA.js";
import "./chunk-AAC6XSCN.js";
import "./chunk-GKCEBA6Q.js";
import "./chunk-VWMPQK5V.js";
import "./chunk-IGBV77N3.js";
import "./chunk-5Y3EUPZN.js";
import "./chunk-55AFRDJF.js";
import "./chunk-F5C72MOD.js";
import "./chunk-2W7OT7Z4.js";
import "./chunk-3PPDORWL.js";
import "./chunk-YIXK32VF.js";
import "./chunk-CHTPXQAG.js";
import "./chunk-2NTKYBCL.js";
import "./chunk-4ADC6HZF.js";
import "./chunk-XFKS4JQP.js";
import {
  S as S2,
  a as a2
} from "./chunk-H6F6O2KE.js";
import "./chunk-AF3FX2UV.js";
import "./chunk-DRAQJS2F.js";
import {
  P as P2
} from "./chunk-BZYXFNL4.js";
import {
  n
} from "./chunk-VNTS5E5O.js";
import "./chunk-TMFB3DKM.js";
import "./chunk-X3UT6DT7.js";
import "./chunk-JD3UVEVP.js";
import "./chunk-NO2XQDLB.js";
import "./chunk-LBC3MAJX.js";
import "./chunk-NMP7ZOVG.js";
import "./chunk-YHYQP7QX.js";
import "./chunk-RP7FUW55.js";
import "./chunk-MPV4X4LZ.js";
import "./chunk-TNW4TPNP.js";
import "./chunk-IL45XPTT.js";
import "./chunk-XLF2NMGX.js";
import "./chunk-X5GD6LFD.js";
import "./chunk-MX5VW6PC.js";
import "./chunk-JJNHUYXK.js";
import "./chunk-UG6RJXJ2.js";
import "./chunk-G5DA3EEG.js";
import "./chunk-I6IIPG56.js";
import "./chunk-JEYXDNAT.js";
import "./chunk-DJJNSAUR.js";
import "./chunk-PZBXBPVO.js";
import "./chunk-TMC6HYGQ.js";
import "./chunk-7FAVUXK2.js";
import "./chunk-IVNFIIVI.js";
import "./chunk-NOGWEW4X.js";
import "./chunk-ZCZERMS4.js";
import "./chunk-GPMIOMDJ.js";
import "./chunk-RGFH75DR.js";
import "./chunk-FEGY3M6U.js";
import "./chunk-RWRC6JKB.js";
import "./chunk-M6AESODI.js";
import "./chunk-NY6S6EMV.js";
import "./chunk-AQGMTI4V.js";
import "./chunk-QG7JWSBW.js";
import "./chunk-7ZMGKXLG.js";
import "./chunk-JMXPE5PE.js";
import "./chunk-LL73CCBG.js";
import "./chunk-6TS2ZJL4.js";
import "./chunk-IBGTNH54.js";
import "./chunk-ROVRMLYN.js";
import "./chunk-SYPTUUSZ.js";
import "./chunk-L7EN54WK.js";
import "./chunk-6QTMK7BB.js";
import "./chunk-BNO7HCVD.js";
import {
  O
} from "./chunk-7NMH5MM5.js";
import "./chunk-TCIXF7MM.js";
import "./chunk-UGTICYU7.js";
import "./chunk-3MHRDLQO.js";
import "./chunk-VUGQF5TL.js";
import "./chunk-ZAISHGSP.js";
import {
  d
} from "./chunk-2IMSGFJN.js";
import "./chunk-VHTQ5H2C.js";
import "./chunk-YX2VTIZR.js";
import {
  x
} from "./chunk-LYSDGL5S.js";
import "./chunk-SRJX4QLW.js";
import "./chunk-WPTJIN2M.js";
import "./chunk-KUP5BM5G.js";
import {
  m as m3,
  u as u2
} from "./chunk-HNQNVI5C.js";
import {
  m as m2
} from "./chunk-G34OBNLT.js";
import "./chunk-WJUYGRZY.js";
import "./chunk-FKFXOPPT.js";
import {
  l as l2
} from "./chunk-KE3WBZYL.js";
import "./chunk-EOMIFMDH.js";
import "./chunk-QFU5COFB.js";
import "./chunk-45ILJ6ZH.js";
import "./chunk-VCRP2PLV.js";
import "./chunk-BDLVUYG2.js";
import "./chunk-6QA2BVC5.js";
import "./chunk-HWKQJUGY.js";
import "./chunk-XDCUZFJX.js";
import "./chunk-DNZK6PPI.js";
import "./chunk-7BWCD63N.js";
import "./chunk-65K4DQAH.js";
import {
  c
} from "./chunk-MUKDJQWB.js";
import "./chunk-6KFXWKZZ.js";
import "./chunk-HPGYEHVI.js";
import "./chunk-X3R5OB6L.js";
import "./chunk-RACDQ3AL.js";
import "./chunk-TEXTBDH7.js";
import "./chunk-N3A2BVTW.js";
import "./chunk-IGYEHOTB.js";
import "./chunk-TVM3SZJR.js";
import {
  P
} from "./chunk-52HWRRRQ.js";
import "./chunk-VNTEV3V4.js";
import "./chunk-OGOQOMMV.js";
import "./chunk-7Z3AF3B2.js";
import "./chunk-6GWORUT3.js";
import "./chunk-CMHHL5UO.js";
import "./chunk-KJSBBQ22.js";
import "./chunk-LMEOPAGQ.js";
import "./chunk-YIV2QKTZ.js";
import {
  f,
  h,
  l
} from "./chunk-A3VAC24F.js";
import "./chunk-FPSA4NFH.js";
import "./chunk-UY6B6IVT.js";
import "./chunk-6PV45IYU.js";
import "./chunk-SRQCQD63.js";
import "./chunk-FIRNXFAH.js";
import "./chunk-O5TPFXRT.js";
import {
  _
} from "./chunk-Q6XRAGMA.js";
import "./chunk-JUAPMINU.js";
import "./chunk-PK2ZR2SJ.js";
import "./chunk-YFPGM5UE.js";
import "./chunk-OXSERRAR.js";
import "./chunk-7HI4VRVW.js";
import "./chunk-ZX46THLM.js";
import "./chunk-Y2ZIOB7Y.js";
import "./chunk-KTUX3OKX.js";
import "./chunk-E3KEUGUG.js";
import {
  m,
  r2
} from "./chunk-N3XLUQJI.js";
import {
  a2 as a
} from "./chunk-JUAD7TJ6.js";
import "./chunk-VHLUKPRH.js";
import {
  r
} from "./chunk-5TPMG26T.js";
import "./chunk-3NBBZ43U.js";
import "./chunk-VOLWOTEG.js";
import "./chunk-XTNIDRTB.js";
import "./chunk-FGWIXJQY.js";
import "./chunk-TKYAZCMB.js";
import "./chunk-3TBMFSPB.js";
import "./chunk-PSZLDJJA.js";
import "./chunk-ZWFY3WY5.js";
import "./chunk-LQFTAGIV.js";
import "./chunk-S7IJH524.js";
import {
  o4 as o,
  r2 as r3,
  u2 as u
} from "./chunk-GZ2P4SCJ.js";
import "./chunk-XWG6QGFK.js";
import "./chunk-GWNLQRNM.js";
import "./chunk-FXKORAMT.js";
import "./chunk-GNMFMITH.js";

// node_modules/@arcgis/core/views/2d/engine/webgl/OverlayMultipoint.js
var f2 = 2;
var x2 = class extends e {
  constructor(r4) {
    super(), this.element = r4, this._handles = new r2(), this.isWrapAround = false, this.perspectiveTransform = n(), this.wrapAroundShift = 0, this.clipGeometry = null, this._handles.add(f(() => this.element, () => {
      const e2 = this.element;
      this.ready(), e2 && this._handles.add(o(e2, "play", () => this.requestRender()));
    }, h));
  }
  getMesh(t2) {
    throw new Error("Method not implemented.");
  }
  destroy() {
    this._handles.destroy(), this.texture = r3(this.texture);
  }
  get textureSize() {
    if (!this.texture) return [1, 1];
    const t2 = this.texture.descriptor;
    return [t2.width, t2.height];
  }
  get dvsMat3() {
    return this.parent.dvsMat3;
  }
  beforeRender(t2) {
    const e2 = this.element;
    if (null == e2) return;
    const { context: r4 } = t2, { videoWidth: i, videoHeight: s } = e2;
    if (0 !== i && 0 !== s) {
      if (this.texture) e2.paused || this.texture.setData(e2);
      else {
        const t3 = new a2();
        t3.wrapMode = P2.CLAMP_TO_EDGE, t3.preMultiplyAlpha = true, t3.width = i, t3.height = s, this.texture = new S2(r4, t3, e2);
      }
      e2.paused || (this.texture.generateMipmap(), this.requestRender()), super.beforeRender(t2);
    }
  }
  _createTransforms() {
    return null;
  }
  updateDrawCoords(t2, e2, r4, i) {
    const s = this.element, o2 = this._getFrameInfo();
    if (!s || !o2) return;
    const { spatialReference: n3 } = r4;
    this._initializeData(t2, o2, n3);
    const { controlPoints: a3, horizon: u5 } = o2, d2 = Math.sqrt(a3.length), c3 = d2, { x: p2, y: x3 } = t2, g = this._vertices, y = a3[0], w2 = a3[d2 - 1], P3 = a3[(c3 - 1) * d2], _2 = a3[(c3 - 1) * d2 + d2 - 1], v2 = O(u5 ? u5[0].mapPoint : y.mapPoint, n3), j = O(u5 ? u5[1].mapPoint : w2.mapPoint, n3), M = O(P3.mapPoint, n3), A = O(_2.mapPoint, n3);
    this.clipGeometry = u5 ? new n2({ geometry: P.fromJSON({ rings: [[[M.x, M.y], [A.x, A.y], [j.x, j.y], [v2.x, v2.y], [M.x, M.y]]], spatialReference: n3 }) }) : null;
    for (let h3 = 0; h3 < a3.length; h3++) {
      const t3 = a3[h3], { sourcePoint: e3, mapPoint: r5 } = t3;
      if (null == e3 || null == r5) continue;
      const i2 = O(r5, n3);
      g[h3 * f2 + 0] = i2.x - p2, g[h3 * f2 + 1] = i2.y - x3;
    }
    let b = e2;
    if (i) {
      const t3 = Math.min(v2.x, j.x, M.x, A.x), e3 = Math.max(v2.x, j.x, M.x, A.x), { worldWidth: r5, xBounds: s2 } = i, [o3, n4] = s2;
      t3 < o3 && e3 > o3 ? b = r5 : e3 > n4 && t3 < n4 && (b = -r5);
    }
    this.wrapAroundShift = b, this.isWrapAround = 0 !== b;
  }
  draw(t2, e2) {
    if (!this.visible) return;
    if (!(this.isReady && this._vertices && this._indices && this._texCoords)) return void this.requestRender();
    this.stage || console.warn("OverlayMultipoint: stage is null"), e2.render(t2, { transform: { dvs: this.dvsMat3 }, config: { perspective: this.perspectiveTransform, texSize: this.textureSize, wrapAroundShift: this.wrapAroundShift, isWrapAround: this.isWrapAround, opacity: this.opacity, texture: { texture: this.texture, unit: 0 } }, position: this._vertices, tex: this._texCoords, index: this._indices });
  }
  _initializeData(t2, e2, r4) {
    if (null != this._vertices && null != this._indices) return;
    const { controlPoints: i } = e2, s = Math.sqrt(i.length), o2 = s, n3 = new Float32Array(f2 * i.length), a3 = new Uint16Array(2 * i.length);
    for (let m4 = 0; m4 < i.length; m4++) {
      const e3 = i[m4], { sourcePoint: s2, mapPoint: o3 } = e3;
      if (null == s2 || null == o3) continue;
      const h4 = O(o3, r4);
      n3[m4 * f2 + 0] = h4.x - t2.x, n3[m4 * f2 + 1] = h4.y - t2.y, a3[2 * m4 + 0] = s2.x, a3[2 * m4 + 1] = s2.y;
    }
    const h3 = new Uint16Array(o2 * s + (o2 - 2) * (s + 2));
    let u5 = 0;
    for (let l3 = 0; l3 < o2; l3++) {
      for (let t3 = 0; t3 < s; t3++) h3[u5++] = l3 * s + t3, h3[u5++] = (l3 + 1) * s + t3;
      l3 < o2 - 2 && (h3[u5++] = (l3 + 1) * s + (s - 1), h3[u5++] = (l3 + 1) * s);
    }
    this._vertices = n3, this._texCoords = a3, this._indices = h3;
  }
  _getFrameInfo() {
    if (!this.groundControlPoints) return null;
    const t2 = this._getFrameControlPoints(), e2 = this.frameHorizonPoints;
    let r4 = null;
    if (e2) {
      const t3 = e2.startX, i = e2.startY, s = e2.endX, n3 = e2.endY;
      r4 = [{ sourcePoint: c(t3, i), mapPoint: new _(e2.startLongitude, e2.startLatitude) }, { sourcePoint: c(s, n3), mapPoint: new _(e2.endLongitude, e2.endLatitude) }];
    }
    return { controlPoints: t2, horizon: r4 };
  }
  _getFrameControlPoints() {
    const t2 = this.groundControlPoints, e2 = t2?.length;
    if (!e2) return [];
    const r4 = new Array(e2), i = Math.max(...t2.map(({ x: t3 }) => t3)), s = this.element.videoWidth / i;
    for (let n3 = 0; n3 < e2; n3++) {
      const { x: e3, y: i2, lat: h3, lon: l3 } = t2[n3];
      r4[n3] = { sourcePoint: c(e3 * s, -i2 * s), mapPoint: new _(l3, h3) };
    }
    return r4;
  }
};

// node_modules/@arcgis/core/views/2d/layers/VideoLayerView2D.js
var v = new l2([255, 127, 0]);
var T = 10005;
var w = 10018;
var O3 = class extends S3(u3) {
  constructor() {
    super(...arguments), this._graphicsLayer = new c2(), this._frameOutlineGraphic = new d({ symbol: new m3({ outline: { type: "simple-line", color: v } }) }), this._frameCenterGraphic = new d({ symbol: new u2({ color: v, style: "cross" }) }), this._sensorTrailGraphic = new d({ symbol: new m2({ color: v }) }), this._sensorSightlineGraphic = new d({ symbol: new m2({ color: v }) }), this._sensorLocationGraphic = new d({ symbol: new u2({ color: v }) }), this._overlayContainer = null, this._sensorLocationSymbolType = null, this.layer = null, this.sensorLocationSymbol = null, this.symbolAngle = 0, this.visibleTelemetryElements = null;
  }
  destroy() {
    this._graphicsLayer = u(this._graphicsLayer);
  }
  initialize() {
    this._sensorLocationSymbolType = this.layer?.sensorSymbol.type, this._graphicsLayer.graphics.addMany([this._frameCenterGraphic, this._frameOutlineGraphic, this._sensorLocationGraphic, this._sensorSightlineGraphic, this._sensorTrailGraphic]), this.visibleTelemetryElements = new p({ frame: this.layer.telemetryDisplay?.frame ?? false, frameCenter: this.layer.telemetryDisplay?.frameCenter ?? true, frameOutline: this.layer.telemetryDisplay?.frameOutline ?? true, lineOfSight: this.layer.telemetryDisplay?.lineOfSight ?? true, sensorLocation: this.layer.telemetryDisplay?.sensorLocation ?? true, sensorTrail: this.layer.telemetryDisplay?.sensorTrail ?? true });
  }
  attach() {
    this._overlayContainer = new u4(), this.container.addChild(this._overlayContainer), this._addOverlayMultipoint(), this.graphicsView = new O2({ requestUpdateCallback: () => this.requestUpdate(), view: this.view, graphics: this._graphicsLayer.graphics, container: new t(this.view.featuresTilingScheme) }), this.container.addChild(this.graphicsView.container), this.addAttachHandles(this._graphicsLayer.on("graphic-update", this.graphicsView.graphicUpdateHandler)), this.addAttachHandles([l(() => [this.layer.telemetryDisplay?.frame, this.layer.telemetryDisplay?.frameCenter, this.layer.telemetryDisplay?.frameOutline, this.layer.telemetryDisplay?.sensorLocation, this.layer.telemetryDisplay?.sensorTrail, this.layer.telemetryDisplay?.lineOfSight], () => this._updateVisibleTelemetryElements(), h), l(() => [this.layer.telemetry, this.visibleTelemetryElements?.frameCenter, this.visibleTelemetryElements?.frameOutline, this.visibleTelemetryElements?.sensorLocation, this.visibleTelemetryElements?.sensorTrail, this.visibleTelemetryElements?.lineOfSight], () => this._updateGraphicGeometries(), h), l(() => this.layer.metadata, () => this._updateSensorLocationSymbolAngle(), h), l(() => this.layer?.frameCenterSymbol, () => this._updateFrameCenterSymbol(), h), l(() => this.layer?.frameOutlineSymbol, () => this._updateFrameOutlineSymbol(), h), l(() => this.layer?.sensorSightLineSymbol, () => this._updateSensorSightlineSymbol(), h), l(() => this.layer?.sensorSymbol, () => this._updateSensorLocationSymbol(), h), l(() => this.layer?.sensorTrailSymbol, () => this._updateSensorTrailSymbol(), h), l(() => this.symbolAngle, () => this._updateSensorLocationSymbol(), h)]);
  }
  detach() {
    this._overlayContainer.removeAllChildren(), this.container.removeAllChildren(), this.graphicsView = u(this.graphicsView);
  }
  supportsSpatialReference(e2) {
    return true;
  }
  moveEnd() {
  }
  viewChange() {
    this.graphicsView.viewChange();
  }
  update(e2) {
    this.graphicsView.processUpdate(e2);
  }
  isUpdating() {
    return !this.graphicsView || this.graphicsView.updating;
  }
  _updateVisibleTelemetryElements() {
    this.visibleTelemetryElements && this.layer.telemetryDisplay && (this.visibleTelemetryElements.frame = this.layer.telemetryDisplay.frame, this.visibleTelemetryElements.frameCenter = this.layer.telemetryDisplay.frameCenter, this.visibleTelemetryElements.frameOutline = this.layer.telemetryDisplay.frameOutline, this.visibleTelemetryElements.lineOfSight = this.layer.telemetryDisplay.lineOfSight, this.visibleTelemetryElements.sensorLocation = this.layer.telemetryDisplay.sensorLocation, this.visibleTelemetryElements.sensorTrail = this.layer.telemetryDisplay.sensorTrail);
  }
  _updateGraphicGeometries() {
    const { telemetry: e2 } = this.layer, { visibleTelemetryElements: t2 } = this;
    e2 && t2 && (t2.frameOutline && e2.frameOutline ? this._frameOutlineGraphic.geometry = this.layer.telemetry.frameOutline : this._frameOutlineGraphic.geometry = null, t2.sensorTrail && e2.sensorTrail ? this._sensorTrailGraphic.geometry = this.layer.telemetry.sensorTrail : this._sensorTrailGraphic.geometry = null, t2.lineOfSight && e2.lineOfSight ? this._sensorSightlineGraphic.geometry = this.layer.telemetry.lineOfSight : this._sensorSightlineGraphic.geometry = null, t2.sensorLocation && e2.sensorLocation ? this._sensorLocationGraphic.geometry = this.layer.telemetry.sensorLocation : this._sensorLocationGraphic.geometry = null, t2.frameCenter && e2.frameCenter ? this._frameCenterGraphic.geometry = this.layer.telemetry.frameCenter : this._frameCenterGraphic.geometry = null);
  }
  _updateSensorLocationSymbolAngle() {
    if (!this.layer?.metadata?.size) return;
    const { source: e2, symbolOffset: t2 = 0 } = this.layer.sensorSymbolOrientation || {};
    if (!e2 && !t2) return;
    const i = this.layer?.metadata?.get(T)?.value ?? 0, s = this.layer?.metadata?.get(w)?.value ?? 0, r4 = h2({ cameraAzimuth: s, platformHeading: i, source: this.layer.sensorSymbolOrientation?.source, symbolOffset: this.layer.sensorSymbolOrientation?.symbolOffset ?? 0 });
    this.symbolAngle = Math.round(Math.abs(r4));
  }
  _updateSensorLocationSymbol() {
    switch (this._sensorLocationSymbolType) {
      case "simple-marker":
        this.sensorLocationSymbol = this.layer.sensorSymbol.clone(), this.sensorLocationSymbol.angle = this.symbolAngle, this._sensorLocationGraphic.symbol = this.sensorLocationSymbol.clone();
        break;
      case "picture-marker":
        this.sensorLocationSymbol = this.layer.sensorSymbol, this.sensorLocationSymbol.angle = this.symbolAngle, this._sensorLocationGraphic.symbol = this.sensorLocationSymbol;
        break;
      case "cim":
        this.sensorLocationSymbol = this.layer.sensorSymbol, S(this.sensorLocationSymbol, this.symbolAngle, true), this._sensorLocationGraphic.symbol = this.sensorLocationSymbol;
    }
  }
  _updateFrameCenterSymbol() {
    this.layer?.frameCenterSymbol && (this._frameCenterGraphic.symbol = this.layer.frameCenterSymbol.clone());
  }
  _updateFrameOutlineSymbol() {
    this.layer?.frameOutlineSymbol && (this._frameOutlineGraphic.symbol = this.layer.frameOutlineSymbol.clone());
  }
  _updateSensorSightlineSymbol() {
    this.layer?.sensorSightLineSymbol && (this._sensorSightlineGraphic.symbol = this.layer.sensorSightLineSymbol.clone());
  }
  _updateSensorTrailSymbol() {
    this.layer?.sensorTrailSymbol && (this._sensorTrailGraphic.symbol = this.layer.sensorTrailSymbol.clone());
  }
  async _addOverlayMultipoint() {
    if (!this.layer.videoElement) return;
    const e2 = new x2(this.layer.videoElement);
    this.addAttachHandles([l(() => [this.layer.frameHorizonPoints, this.layer.groundControlPoints, this.layer.frameOpacity, this.layer.telemetryDisplay?.frame], () => {
      const { visibleTelemetryElements: t2 } = this;
      e2.frameHorizonPoints = this.layer.frameHorizonPoints, e2.groundControlPoints = this.layer.groundControlPoints, e2.opacity = this.layer.frameOpacity, e2.visible = t2?.frame ?? false;
    }, h)]), this._overlayContainer.addChild(e2), this.view.stage.requestRender();
  }
};
r([m()], O3.prototype, "graphicsView", void 0), r([m()], O3.prototype, "layer", void 0), r([m({ types: x })], O3.prototype, "sensorLocationSymbol", void 0), r([m()], O3.prototype, "symbolAngle", void 0), r([m({ type: p })], O3.prototype, "visibleTelemetryElements", void 0), O3 = r([a("esri.views.2d.layers.VideoLayerView2D")], O3);
var C = O3;
export {
  C as default
};
//# sourceMappingURL=VideoLayerView2D-5MYBIVAT.js.map
