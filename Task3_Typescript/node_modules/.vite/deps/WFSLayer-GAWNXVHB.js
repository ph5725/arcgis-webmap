import {
  F,
  W,
  Y,
  v,
  z as z2
} from "./chunk-YW4E5EBT.js";
import "./chunk-VTZ6LADX.js";
import "./chunk-TQBLAIQG.js";
import "./chunk-DBZ575A6.js";
import "./chunk-JOVQBCRD.js";
import {
  u as u2,
  y as y4
} from "./chunk-7TPOIM4Y.js";
import "./chunk-LNFOAX5I.js";
import {
  i as i2
} from "./chunk-VXCZZCO4.js";
import "./chunk-VNLFNBKT.js";
import "./chunk-KHEIHGIK.js";
import {
  e as e3
} from "./chunk-ZUTXZ2PO.js";
import {
  d as d2
} from "./chunk-FSVG2RRX.js";
import "./chunk-L3O6KWVI.js";
import {
  c
} from "./chunk-WIICHW3C.js";
import "./chunk-T4BWGCN6.js";
import "./chunk-AC7GOP3F.js";
import {
  a as a3
} from "./chunk-XPKVLOAO.js";
import {
  s as s3
} from "./chunk-GESOBEYT.js";
import {
  p as p4
} from "./chunk-E7YVYF37.js";
import "./chunk-E76L26GR.js";
import {
  A,
  l as l2
} from "./chunk-GG4VLKUY.js";
import "./chunk-IL45XPTT.js";
import {
  c as c2
} from "./chunk-6MFKAT6L.js";
import "./chunk-NOWX6W7R.js";
import {
  p as p5
} from "./chunk-OQ76WPLD.js";
import {
  e as e2
} from "./chunk-KSVHYEPS.js";
import {
  ae
} from "./chunk-UTU6N7VJ.js";
import "./chunk-RV3SBM2C.js";
import "./chunk-4GXVCEW4.js";
import {
  g
} from "./chunk-B6C7UPBZ.js";
import {
  f as f2
} from "./chunk-IUQBXXYO.js";
import "./chunk-7WKBQS4R.js";
import {
  j
} from "./chunk-VGIEH4HM.js";
import {
  p as p2
} from "./chunk-XLF2NMGX.js";
import {
  t
} from "./chunk-X5GD6LFD.js";
import {
  b,
  b2,
  d,
  l,
  m as m3,
  p as p3,
  s as s2,
  y as y3
} from "./chunk-G4PMFSAZ.js";
import "./chunk-MX5VW6PC.js";
import "./chunk-JJNHUYXK.js";
import "./chunk-UG6RJXJ2.js";
import {
  S
} from "./chunk-OTCYHWWG.js";
import "./chunk-UGXCZZ7N.js";
import "./chunk-OTSYE6UT.js";
import "./chunk-K5LVZUBF.js";
import "./chunk-J7LSFQNH.js";
import {
  m as m4,
  u
} from "./chunk-AGDHKBKD.js";
import "./chunk-OC2XWDW2.js";
import "./chunk-C3JHRSMA.js";
import "./chunk-M2UZRY7C.js";
import "./chunk-HUVZEBBO.js";
import "./chunk-VLPG2W66.js";
import "./chunk-GH7GZNY6.js";
import "./chunk-G5DA3EEG.js";
import "./chunk-D443BZKU.js";
import "./chunk-7DFHXN7Z.js";
import "./chunk-NX54JGTL.js";
import "./chunk-I6IIPG56.js";
import "./chunk-JEYXDNAT.js";
import "./chunk-DJJNSAUR.js";
import "./chunk-PZBXBPVO.js";
import "./chunk-TMC6HYGQ.js";
import "./chunk-7FAVUXK2.js";
import "./chunk-IVNFIIVI.js";
import "./chunk-T4QXFCFF.js";
import "./chunk-BFUOEOXA.js";
import "./chunk-NOGWEW4X.js";
import "./chunk-ZCZERMS4.js";
import "./chunk-7CUBIFKN.js";
import "./chunk-GPMIOMDJ.js";
import "./chunk-RGFH75DR.js";
import "./chunk-FEGY3M6U.js";
import "./chunk-RWRC6JKB.js";
import "./chunk-M6AESODI.js";
import "./chunk-NY6S6EMV.js";
import "./chunk-AQGMTI4V.js";
import "./chunk-QG7JWSBW.js";
import "./chunk-YSCIEMYQ.js";
import {
  p as p6
} from "./chunk-ZXGBNDYM.js";
import "./chunk-GOWWJ2HE.js";
import {
  R
} from "./chunk-7ZMGKXLG.js";
import "./chunk-JMXPE5PE.js";
import "./chunk-LL73CCBG.js";
import {
  m as m2
} from "./chunk-6TS2ZJL4.js";
import "./chunk-IBGTNH54.js";
import {
  h
} from "./chunk-L7EN54WK.js";
import "./chunk-6QTMK7BB.js";
import "./chunk-BNO7HCVD.js";
import "./chunk-7NMH5MM5.js";
import "./chunk-TCIXF7MM.js";
import "./chunk-UGTICYU7.js";
import "./chunk-3MHRDLQO.js";
import "./chunk-F4KXGA4J.js";
import "./chunk-KHRHKYU2.js";
import "./chunk-2IMSGFJN.js";
import "./chunk-VHTQ5H2C.js";
import {
  q
} from "./chunk-YX2VTIZR.js";
import "./chunk-LYSDGL5S.js";
import "./chunk-SRJX4QLW.js";
import "./chunk-WPTJIN2M.js";
import "./chunk-KUP5BM5G.js";
import "./chunk-HNQNVI5C.js";
import "./chunk-G34OBNLT.js";
import "./chunk-WJUYGRZY.js";
import "./chunk-FKFXOPPT.js";
import "./chunk-KE3WBZYL.js";
import "./chunk-EOMIFMDH.js";
import "./chunk-QFU5COFB.js";
import "./chunk-45ILJ6ZH.js";
import {
  I as I2,
  g as g2
} from "./chunk-VCRP2PLV.js";
import "./chunk-BDLVUYG2.js";
import "./chunk-6QA2BVC5.js";
import "./chunk-HWKQJUGY.js";
import "./chunk-XDCUZFJX.js";
import "./chunk-DNZK6PPI.js";
import "./chunk-7BWCD63N.js";
import "./chunk-65K4DQAH.js";
import "./chunk-MUKDJQWB.js";
import "./chunk-6KFXWKZZ.js";
import "./chunk-HPGYEHVI.js";
import "./chunk-YBJ5GVXQ.js";
import "./chunk-X3R5OB6L.js";
import "./chunk-RACDQ3AL.js";
import "./chunk-TEXTBDH7.js";
import "./chunk-N3A2BVTW.js";
import {
  y as y2
} from "./chunk-IGYEHOTB.js";
import "./chunk-TVM3SZJR.js";
import "./chunk-52HWRRRQ.js";
import "./chunk-VNTEV3V4.js";
import "./chunk-OGOQOMMV.js";
import "./chunk-7Z3AF3B2.js";
import "./chunk-6GWORUT3.js";
import "./chunk-U57T7EQN.js";
import "./chunk-CMHHL5UO.js";
import "./chunk-XHYOFJ4U.js";
import "./chunk-HCYE6OE4.js";
import "./chunk-KJSBBQ22.js";
import {
  a as a2,
  n
} from "./chunk-LMEOPAGQ.js";
import "./chunk-YIV2QKTZ.js";
import "./chunk-A3VAC24F.js";
import "./chunk-FPSA4NFH.js";
import "./chunk-UY6B6IVT.js";
import "./chunk-6PV45IYU.js";
import {
  p
} from "./chunk-SRQCQD63.js";
import "./chunk-FIRNXFAH.js";
import {
  z
} from "./chunk-O5TPFXRT.js";
import "./chunk-Q6XRAGMA.js";
import "./chunk-JUAPMINU.js";
import {
  f
} from "./chunk-PK2ZR2SJ.js";
import {
  r as r2
} from "./chunk-YFPGM5UE.js";
import "./chunk-OXSERRAR.js";
import "./chunk-7HI4VRVW.js";
import "./chunk-ZX46THLM.js";
import "./chunk-Y2ZIOB7Y.js";
import "./chunk-KTUX3OKX.js";
import "./chunk-E3KEUGUG.js";
import {
  m
} from "./chunk-N3XLUQJI.js";
import {
  a2 as a
} from "./chunk-JUAD7TJ6.js";
import {
  x
} from "./chunk-VHLUKPRH.js";
import {
  r
} from "./chunk-5TPMG26T.js";
import "./chunk-3NBBZ43U.js";
import "./chunk-VOLWOTEG.js";
import "./chunk-XTNIDRTB.js";
import "./chunk-FGWIXJQY.js";
import "./chunk-TKYAZCMB.js";
import "./chunk-3TBMFSPB.js";
import "./chunk-PSZLDJJA.js";
import "./chunk-ZWFY3WY5.js";
import {
  I
} from "./chunk-LQFTAGIV.js";
import "./chunk-S7IJH524.js";
import {
  k,
  y
} from "./chunk-GZ2P4SCJ.js";
import {
  i2 as i,
  s
} from "./chunk-XWG6QGFK.js";
import {
  e
} from "./chunk-GWNLQRNM.js";
import {
  has
} from "./chunk-FXKORAMT.js";
import "./chunk-GNMFMITH.js";

// node_modules/@arcgis/core/layers/graphics/sources/WFSSource.js
var F2 = class extends p {
  constructor() {
    super(...arguments), this._connection = null, this._workerHandler = null, this.capabilities = y4(false, false), this.type = "wfs", this.refresh = k(async () => {
      await this.load();
      const e4 = { customParameters: this.layer.customParameters, maxRecordCount: this.layer.maxRecordCount, maxTotalRecordCount: this.layer.maxTotalRecordCount, maxPageCount: this.layer.maxPageCount }, { extent: t2 } = await this._workerHandler.refresh(e4);
      return t2 && (this.sourceJSON.extent = t2), { dataChanged: true, updates: { extent: this.sourceJSON.extent } };
    });
  }
  load(e4) {
    const t2 = null != e4 ? e4.signal : null;
    return this.addResolvingPromise(this._startWorker({ signal: t2 })), Promise.resolve(this);
  }
  destroy() {
    this._connection?.close(), this._connection = null, this._workerHandler = null;
  }
  async openPorts() {
    return await this.load(), this._connection.openPorts();
  }
  async queryFeatures(e4, t2 = {}) {
    const r3 = await this.queryFeaturesJSON(e4, t2);
    return g.fromJSON(r3);
  }
  async queryFeaturesJSON(e4, t2 = {}) {
    return await this.load(t2), this._workerHandler.queryFeatures(e4 ? e4.toJSON() : void 0, t2);
  }
  async queryFeatureCount(e4, t2 = {}) {
    return await this.load(t2), this._workerHandler.queryFeatureCount(e4 ? e4.toJSON() : void 0, t2);
  }
  async queryObjectIds(e4, t2 = {}) {
    return await this.load(t2), this._workerHandler.queryObjectIds(e4 ? e4.toJSON() : void 0, t2);
  }
  async queryExtent(e4, t2 = {}) {
    await this.load(t2);
    const r3 = await this._workerHandler.queryExtent(e4 ? e4.toJSON() : void 0, t2);
    return { count: r3.count, extent: z.fromJSON(r3.extent) };
  }
  async querySnapping(e4, t2 = {}) {
    return await this.load(t2), this._workerHandler.querySnapping(e4, t2);
  }
  async queryAttributeBins(e4, t2 = {}) {
    await this.load(t2);
    const r3 = await this._workerHandler.queryAttributeBins(e4?.toJSON(), t2);
    return i2.fromJSON(r3);
  }
  async _createLoadOptions(e4) {
    const { url: r3, customParameters: o, name: a4, namespaceUri: s4, fields: i3, geometryType: n2, maxRecordCount: l3, maxPageCount: u3, maxTotalRecordCount: p7, swapXY: m5 } = this.layer, w = "defaults" === this.layer.originOf("spatialReference") ? void 0 : this.layer.spatialReference;
    if (!r3) throw new s("wfs-layer:missing-url", "WFSLayer must be created with a url");
    this.wfsCapabilities || (this.wfsCapabilities = await v(r3, { customParameters: o, ...e4 }));
    const g3 = ["fields", "geometryType", "name", "namespaceUri", "swapXY"].some((e5) => null == this.layer[e5]), S2 = g3 ? await W(this.wfsCapabilities, a4, s4, { spatialReference: w, customParameters: o, signal: e4?.signal }) : { ...z2(i3 ?? []), geometryType: n2, name: a4, namespaceUri: s4, spatialReference: w, swapXY: m5 }, F3 = Y(this.wfsCapabilities.readFeatureTypes(), S2.name, S2.namespaceUri), x2 = y2.toJSON(S2.geometryType), { operations: O } = this.wfsCapabilities, j2 = O.GetFeature.url, C = O.GetFeature.outputFormat;
    return { customParameters: o, featureType: F3, fields: S2.fields?.map((e5) => e5.toJSON()) ?? [], geometryField: S2.geometryField, geometryType: x2, getFeatureUrl: j2, getFeatureOutputFormat: C, maxRecordCount: l3, maxPageCount: u3, maxTotalRecordCount: p7, objectIdField: S2.objectIdField, spatialReference: S2.spatialReference?.toJSON(), swapXY: !!S2.swapXY };
  }
  async _startWorker(e4) {
    const [t2, r3] = await y([this._createLoadOptions(e4), p6("WFSSourceWorker", { ...e4, strategy: has("feature-layers-workers") ? "dedicated" : "local", registryTarget: this })]), a4 = t2.error || r3.error || null, n2 = r3.value || null;
    if (a4) throw n2 && n2.close(), a4;
    const l3 = t2.value;
    this._connection = r3.value, this._workerHandler = this._connection.createInvokeProxy();
    const u3 = await this._workerHandler.load(l3, e4);
    for (const s4 of u3.warnings) i.getLogger(this.layer).warn("#load()", `${s4.message} (title: '${this.layer.title || "no title"}', id: '${this.layer.id ?? "no id"}')`, { warning: s4 });
    this.sourceJSON = { dateFieldsTimeReference: { timeZoneIANA: n }, extent: u3.extent, fields: l3.fields, geometryType: l3.geometryType, objectIdField: l3.objectIdField, geometryField: l3.geometryField, drawingInfo: u2(l3.geometryType), name: l3.featureType.title, wfsInfo: { name: l3.featureType.name, featureUrl: l3.getFeatureUrl, maxFeatures: l3.maxRecordCount, swapXY: l3.swapXY, supportedSpatialReferences: l3.featureType.supportedSpatialReferences, version: "2.0.0", wfsNamespace: l3.featureType.namespaceUri } };
  }
};
r([m()], F2.prototype, "capabilities", void 0), r([m({ constructOnly: true })], F2.prototype, "layer", void 0), r([m()], F2.prototype, "sourceJSON", void 0), r([m()], F2.prototype, "type", void 0), r([m()], F2.prototype, "wfsCapabilities", void 0), F2 = r([a("esri.layers.graphics.sources.WFSSource")], F2);

// node_modules/@arcgis/core/layers/WFSLayer.js
var J;
var M = s3();
var Z = J = class extends p4(a3(e2(d2(c(p2(c2(e3(f2(t(b2(j(S(h))))))))))))) {
  static fromWFSLayerInfo(e4) {
    const { customParameters: t2, fields: r3, geometryField: i3, geometryType: o, name: s4, namespaceUri: n2, objectIdField: p7, spatialReference: a4, swapXY: l3, url: m5, wfsCapabilities: d3 } = e4;
    return new J({ customParameters: t2, fields: r3, geometryField: i3, geometryType: o, name: s4, namespaceUri: n2, objectIdField: p7, spatialReference: a4, swapXY: l3, url: m5, wfsCapabilities: d3 });
  }
  constructor(e4) {
    super(e4), this.copyright = null, this.customParameters = null, this.dateFieldsTimeZone = null, this.definitionExpression = null, this.displayField = null, this.elevationInfo = null, this.featureUrl = void 0, this.fields = null, this.fieldsIndex = null, this.fullExtent = null, this.geometryType = null, this.labelsVisible = true, this.labelingInfo = null, this.legendEnabled = true, this.objectIdField = null, this.operationalLayerType = "WFS", this.maxRecordCount = 3e3, this.maxPageCount = 10, this.maxTotalRecordCount = 2e5, this.mode = 0, this.name = null, this.namespaceUri = null, this.outFields = null, this.popupEnabled = true, this.popupTemplate = null, this.screenSizePerspectiveEnabled = true, this.source = new F2({ layer: this }), this.spatialReference = f.WGS84, this.spatialReferences = [4326], this.swapXY = void 0, this.title = "WFS", this.type = "wfs", this.url = null, this.version = void 0;
  }
  destroy() {
    this.source?.destroy();
  }
  load(e4) {
    return this.addResolvingPromise(this.loadFromPortal({ supportedTypes: ["WFS"] }, e4).then(() => this.source.load(e4)).then(() => {
      this.read(this.source.sourceJSON, { origin: "service", url: this.parsedUrl }), this.revert(["objectIdField", "fields", "timeInfo", "spatialReference", "name", "namespaceUri"], "service"), g2(this.renderer, this.fieldsIndex), I2(this.timeInfo, this.fieldsIndex);
    })), Promise.resolve(this);
  }
  get capabilities() {
    return this.source?.capabilities;
  }
  get createQueryVersion() {
    return this.commitProperty("definitionExpression"), this.commitProperty("timeExtent"), this.commitProperty("timeOffset"), this.commitProperty("geometryType"), this.commitProperty("capabilities"), (this._get("createQueryVersion") || 0) + 1;
  }
  get defaultPopupTemplate() {
    return this.createPopupTemplate();
  }
  writeFields(e4, t2, r3) {
    const o = e4.filter((e5) => e5.name !== F);
    this.geometryField && o.unshift(new m2({ name: this.geometryField, alias: this.geometryField, type: "geometry" })), e(r3, o.map((e5) => e5.toJSON()), t2);
  }
  get parsedUrl() {
    return I(this.url);
  }
  set renderer(e4) {
    g2(e4, this.fieldsIndex), this._set("renderer", e4);
  }
  get wfsCapabilities() {
    return this.source?.wfsCapabilities;
  }
  set wfsCapabilities(e4) {
    this.source && (this.source.wfsCapabilities = e4);
  }
  createPopupTemplate(e4) {
    return p5(this, e4);
  }
  createQuery() {
    const e4 = new R({ returnGeometry: true, outFields: ["*"], where: this.definitionExpression || "1=1" }), { timeOffset: t2, timeExtent: r3 } = this;
    return e4.timeExtent = null != t2 && null != r3 ? r3.offset(-t2.value, t2.unit) : r3 || null, e4;
  }
  getFieldDomain(e4, t2) {
    return this.getField(e4)?.domain;
  }
  getField(e4) {
    return this.fieldsIndex?.get(e4);
  }
  queryFeatures(e4, t2) {
    return this.load().then(() => this.source.queryFeatures(R.from(e4) || this.createQuery(), t2)).then((e5) => {
      if (e5?.features) for (const t3 of e5.features) t3.layer = t3.sourceLayer = this;
      return e5;
    });
  }
  queryObjectIds(e4, t2) {
    return this.load().then(() => this.source.queryObjectIds(R.from(e4) || this.createQuery(), t2));
  }
  queryFeatureCount(e4, t2) {
    return this.load().then(() => this.source.queryFeatureCount(R.from(e4) || this.createQuery(), t2));
  }
  queryExtent(e4, t2) {
    return this.load().then(() => this.source.queryExtent(R.from(e4) || this.createQuery(), t2));
  }
  async queryAttributeBins(e4, t2) {
    const { source: r3, capabilities: i3 } = await this.load();
    ae(e4, i3, "WFSLayer");
    const o = await import("./AttributeBinsQuery-B7JIAQBA.js"), s4 = await r3.queryAttributeBins(o.default.from(e4), t2);
    if (s4.features) for (const n2 of s4.features) n2.layer = n2.sourceLayer = this;
    return s4;
  }
  async hasDataChanged() {
    try {
      const { dataChanged: e4, updates: t2 } = await this.source.refresh();
      return null != t2 && this.read(t2, { origin: "service", url: this.parsedUrl, ignoreDefaults: true }), e4;
    } catch {
    }
    return false;
  }
};
r([m({ readOnly: true })], Z.prototype, "capabilities", null), r([m({ type: String })], Z.prototype, "copyright", void 0), r([m({ readOnly: true })], Z.prototype, "createQueryVersion", null), r([m({ json: { name: "wfsInfo.customParameters", write: { overridePolicy: (e4) => ({ enabled: !!(e4 && Object.keys(e4).length > 0), ignoreOrigin: true }) } } })], Z.prototype, "customParameters", void 0), r([m(a2("dateFieldsTimeReference"))], Z.prototype, "dateFieldsTimeZone", void 0), r([m({ readOnly: true })], Z.prototype, "defaultPopupTemplate", null), r([m({ type: String, json: { name: "layerDefinition.definitionExpression", write: { enabled: true, allowNull: true } } })], Z.prototype, "definitionExpression", void 0), r([m({ type: String })], Z.prototype, "displayField", void 0), r([m(m3)], Z.prototype, "elevationInfo", void 0), r([m({ type: String, readOnly: true, json: { name: "wfsInfo.featureUrl", write: { ignoreOrigin: true, isRequired: true } } })], Z.prototype, "featureUrl", void 0), r([m({ type: [m2], json: { name: "layerDefinition.fields", write: { ignoreOrigin: true, isRequired: true }, origins: { service: { name: "fields" } } } })], Z.prototype, "fields", void 0), r([r2("fields")], Z.prototype, "writeFields", null), r([m(M.fieldsIndex)], Z.prototype, "fieldsIndex", void 0), r([m({ type: z, json: { name: "extent" } })], Z.prototype, "fullExtent", void 0), r([m()], Z.prototype, "geometryField", void 0), r([m({ type: String, json: { read: { source: "layerDefinition.geometryType", reader: y2.read }, write: { target: "layerDefinition.geometryType", writer: y2.write, ignoreOrigin: true }, origins: { service: { read: y2.read } } } })], Z.prototype, "geometryType", void 0), r([m({ type: String })], Z.prototype, "id", void 0), r([m(p3)], Z.prototype, "labelsVisible", void 0), r([m({ type: [A], json: { name: "layerDefinition.drawingInfo.labelingInfo", read: { reader: l2 }, write: true } })], Z.prototype, "labelingInfo", void 0), r([m(d)], Z.prototype, "legendEnabled", void 0), r([m({ type: ["show", "hide"] })], Z.prototype, "listMode", void 0), r([m({ type: String })], Z.prototype, "objectIdField", void 0), r([m({ type: ["WFS"] })], Z.prototype, "operationalLayerType", void 0), r([m({ type: x, json: { name: "wfsInfo.maxFeatures", write: { ignoreOrigin: true, isRequired: true } } })], Z.prototype, "maxRecordCount", void 0), r([m({ type: x })], Z.prototype, "maxPageCount", void 0), r([m({ type: x })], Z.prototype, "maxTotalRecordCount", void 0), r([m({ type: [0], readOnly: true, json: { origins: { "web-map": { write: { ignoreOrigin: true, isRequired: true } } } } })], Z.prototype, "mode", void 0), r([m({ type: String, json: { name: "wfsInfo.name", write: { ignoreOrigin: true, isRequired: true } } })], Z.prototype, "name", void 0), r([m({ type: String, json: { name: "wfsInfo.wfsNamespace", write: { ignoreOrigin: true, isRequired: true } } })], Z.prototype, "namespaceUri", void 0), r([m(b)], Z.prototype, "opacity", void 0), r([m(M.outFields)], Z.prototype, "outFields", void 0), r([m({ readOnly: true })], Z.prototype, "parsedUrl", null), r([m(l)], Z.prototype, "popupEnabled", void 0), r([m({ type: q, json: { name: "popupInfo", write: true } })], Z.prototype, "popupTemplate", void 0), r([m({ types: m4, json: { origins: { service: { name: "drawingInfo.renderer" }, "web-scene": { types: u, name: "layerDefinition.drawingInfo.renderer", write: true } }, name: "layerDefinition.drawingInfo.renderer", write: { ignoreOrigin: true } } })], Z.prototype, "renderer", null), r([m(s2)], Z.prototype, "screenSizePerspectiveEnabled", void 0), r([m({ readOnly: true })], Z.prototype, "source", void 0), r([m({ type: f, json: { name: "layerDefinition.spatialReference", write: { ignoreOrigin: true, isRequired: true }, origins: { service: { name: "extent.spatialReference" } } } })], Z.prototype, "spatialReference", void 0), r([m({ readOnly: true, type: [x], json: { name: "wfsInfo.supportedSpatialReferences", write: { ignoreOrigin: true, isRequired: true } } })], Z.prototype, "spatialReferences", void 0), r([m({ type: Boolean, value: false, json: { name: "wfsInfo.swapXY", write: { ignoreOrigin: true, isRequired: true } } })], Z.prototype, "swapXY", void 0), r([m({ json: { write: { ignoreOrigin: true, isRequired: true }, origins: { service: { name: "name" } } } })], Z.prototype, "title", void 0), r([m({ json: { read: false }, readOnly: true })], Z.prototype, "type", void 0), r([m(y3)], Z.prototype, "url", void 0), r([m({ type: String, readOnly: true, json: { name: "wfsInfo.version", write: { ignoreOrigin: true, isRequired: true } } })], Z.prototype, "version", void 0), r([m()], Z.prototype, "wfsCapabilities", null), Z = J = r([a("esri.layers.WFSLayer")], Z);
var _ = Z;
export {
  _ as default
};
//# sourceMappingURL=WFSLayer-GAWNXVHB.js.map
