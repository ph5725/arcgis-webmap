import {
  u
} from "./chunk-CVH52ZBN.js";
import {
  K,
  ee,
  oe
} from "./chunk-YW4E5EBT.js";
import "./chunk-VTZ6LADX.js";
import {
  d as d2
} from "./chunk-7U7T3Q43.js";
import {
  E,
  N
} from "./chunk-TQBLAIQG.js";
import "./chunk-DBZ575A6.js";
import {
  f
} from "./chunk-524UHFSB.js";
import "./chunk-H5N2AXWG.js";
import {
  L
} from "./chunk-P4YXQBLK.js";
import "./chunk-WUKLWX63.js";
import "./chunk-LHJOMFWG.js";
import "./chunk-APGIAJ3M.js";
import "./chunk-ES5H7VGK.js";
import "./chunk-JV7SG7ZY.js";
import "./chunk-NLQ5JBZ3.js";
import "./chunk-WQVEQTKW.js";
import {
  lt,
  ut
} from "./chunk-DKS7UUDR.js";
import "./chunk-KDQWOWXR.js";
import "./chunk-JOVQBCRD.js";
import "./chunk-LNFOAX5I.js";
import "./chunk-U3MD377S.js";
import {
  j,
  x
} from "./chunk-2B6XECE5.js";
import "./chunk-QB5ST4HW.js";
import "./chunk-OIO6NR6X.js";
import "./chunk-F5BDMX7A.js";
import "./chunk-VNLFNBKT.js";
import "./chunk-KHEIHGIK.js";
import "./chunk-AAC6XSCN.js";
import "./chunk-Z7VYTTYM.js";
import "./chunk-BDWOUZQR.js";
import "./chunk-H34ENSPL.js";
import "./chunk-4ADC6HZF.js";
import "./chunk-X3UT6DT7.js";
import "./chunk-JD3UVEVP.js";
import "./chunk-LBC3MAJX.js";
import "./chunk-4GXVCEW4.js";
import "./chunk-C3JHRSMA.js";
import {
  Z
} from "./chunk-JEYXDNAT.js";
import "./chunk-7FAVUXK2.js";
import "./chunk-IVNFIIVI.js";
import "./chunk-RWRC6JKB.js";
import "./chunk-M6AESODI.js";
import "./chunk-NY6S6EMV.js";
import "./chunk-AQGMTI4V.js";
import "./chunk-QG7JWSBW.js";
import "./chunk-6TS2ZJL4.js";
import "./chunk-IBGTNH54.js";
import "./chunk-ROVRMLYN.js";
import "./chunk-SYPTUUSZ.js";
import "./chunk-7NMH5MM5.js";
import "./chunk-TCIXF7MM.js";
import "./chunk-UGTICYU7.js";
import "./chunk-3MHRDLQO.js";
import "./chunk-VHTQ5H2C.js";
import "./chunk-FKFXOPPT.js";
import "./chunk-EOMIFMDH.js";
import "./chunk-QFU5COFB.js";
import "./chunk-VCRP2PLV.js";
import "./chunk-BDLVUYG2.js";
import {
  n as n2
} from "./chunk-6QA2BVC5.js";
import "./chunk-QVKLS4LH.js";
import "./chunk-2KVNXQA7.js";
import "./chunk-XDCUZFJX.js";
import "./chunk-DNZK6PPI.js";
import "./chunk-7BWCD63N.js";
import "./chunk-MUKDJQWB.js";
import "./chunk-6KFXWKZZ.js";
import {
  d
} from "./chunk-HPGYEHVI.js";
import "./chunk-X3R5OB6L.js";
import "./chunk-RACDQ3AL.js";
import "./chunk-TEXTBDH7.js";
import "./chunk-N3A2BVTW.js";
import "./chunk-IGYEHOTB.js";
import "./chunk-TVM3SZJR.js";
import "./chunk-52HWRRRQ.js";
import "./chunk-VNTEV3V4.js";
import "./chunk-OGOQOMMV.js";
import "./chunk-7Z3AF3B2.js";
import "./chunk-6GWORUT3.js";
import "./chunk-XHYOFJ4U.js";
import "./chunk-KJSBBQ22.js";
import {
  n
} from "./chunk-LMEOPAGQ.js";
import "./chunk-YIV2QKTZ.js";
import "./chunk-A3VAC24F.js";
import {
  r
} from "./chunk-FPSA4NFH.js";
import "./chunk-UY6B6IVT.js";
import "./chunk-O5TPFXRT.js";
import "./chunk-Q6XRAGMA.js";
import "./chunk-JUAPMINU.js";
import "./chunk-PK2ZR2SJ.js";
import "./chunk-YFPGM5UE.js";
import {
  s as s4
} from "./chunk-OXSERRAR.js";
import "./chunk-7HI4VRVW.js";
import "./chunk-ZX46THLM.js";
import "./chunk-Y2ZIOB7Y.js";
import "./chunk-KTUX3OKX.js";
import "./chunk-E3KEUGUG.js";
import "./chunk-N3XLUQJI.js";
import {
  s as s2
} from "./chunk-JUAD7TJ6.js";
import "./chunk-VHLUKPRH.js";
import "./chunk-5TPMG26T.js";
import "./chunk-3NBBZ43U.js";
import "./chunk-VOLWOTEG.js";
import "./chunk-XTNIDRTB.js";
import "./chunk-FGWIXJQY.js";
import "./chunk-TKYAZCMB.js";
import "./chunk-3TBMFSPB.js";
import "./chunk-PSZLDJJA.js";
import "./chunk-ZWFY3WY5.js";
import "./chunk-LQFTAGIV.js";
import "./chunk-S7IJH524.js";
import {
  b,
  s as s3
} from "./chunk-GZ2P4SCJ.js";
import {
  i2 as i,
  s
} from "./chunk-XWG6QGFK.js";
import "./chunk-GWNLQRNM.js";
import "./chunk-FXKORAMT.js";
import "./chunk-GNMFMITH.js";

// node_modules/@arcgis/core/layers/graphics/sources/WFSSourceWorker.js
var S = "esri.layers.WFSLayer";
var j2 = class {
  constructor() {
    this._customParameters = null, this._queryEngine = null, this._supportsPagination = true;
  }
  destroy() {
    this._queryEngine?.destroy(), this._queryEngine = null;
  }
  async load(e, r2 = {}) {
    const { getFeatureUrl: a, getFeatureOutputFormat: o, fields: n3, geometryType: i2, featureType: u2, maxRecordCount: l, maxTotalRecordCount: c, maxPageCount: p, objectIdField: f2, customParameters: g } = e, { spatialReference: y, getFeatureSpatialReference: x2 } = oe(a, u2, e.spatialReference);
    try {
      await x(x2, y);
    } catch {
      throw new s("unsupported-projection", "Projection not supported", { inSpatialReference: x2, outSpatialReference: y });
    }
    s3(r2), this._customParameters = g, this._featureType = u2, this._fieldsIndex = Z.fromLayerJSON({ fields: n3, dateFieldsTimeReference: n3.some((e2) => "esriFieldTypeDate" === e2.type) ? { timeZoneIANA: n } : null }), this._geometryType = i2, this._getFeatureUrl = a, this._getFeatureOutputFormat = o, this._getFeatureSpatialReference = x2, this._maxRecordCount = l, this._maxTotalRecordCount = c, this._maxPageCount = p, this._objectIdField = f2, this._spatialReference = y;
    let C = await this._snapshotFeatures(r2);
    if (C.errors.length > 0 && (this._supportsPagination = false, C = await this._snapshotFeatures(r2), C.errors.length > 0)) throw C.errors[0];
    const R = { type: "object-id", fieldName: f2 };
    return this._queryEngine = new L({ fieldsIndex: this._fieldsIndex, geometryType: i2, hasM: false, hasZ: false, featureIdInfo: R, spatialReference: y, timeInfo: null, featureStore: new f({ geometryType: i2, hasM: false, hasZ: false }) }), this._queryEngine.featureStore.addMany(C.features), { warnings: q(C), extent: (await this._queryEngine.fetchRecomputedExtents()).fullExtent };
  }
  async applyEdits() {
    throw new s("wfs-source:editing-not-supported", "applyEdits() is not supported on WFSLayer");
  }
  async queryFeatures(e = {}, t = {}) {
    return await this._waitSnapshotComplete(), this._queryEngine.executeQuery(e, t.signal);
  }
  async queryFeatureCount(e = {}, t = {}) {
    return await this._waitSnapshotComplete(), this._queryEngine.executeQueryForCount(e, t.signal);
  }
  async queryObjectIds(e = {}, t = {}) {
    await this._waitSnapshotComplete();
    return (await this._queryEngine.executeQueryForIds(e, t.signal)).filter(n2);
  }
  async queryExtent(e = {}, t = {}) {
    return await this._waitSnapshotComplete(), this._queryEngine.executeQueryForExtent(e, t.signal);
  }
  async querySnapping(e, t = {}) {
    return await this._waitSnapshotComplete(), u(this._queryEngine, e, t.signal);
  }
  async queryAttributeBins(e, t = {}) {
    return await this._waitSnapshotComplete(), this._queryEngine.executeAttributeBinsQuery(e, t.signal);
  }
  async refresh(t) {
    return this._customParameters = t.customParameters, this._maxRecordCount = t.maxRecordCount, this._maxTotalRecordCount = t.maxTotalRecordCount, this._maxPageCount = t.maxPageCount, this._snapshotTask?.abort(), this._snapshotTask = d((e) => this._snapshotFeatures({ signal: e })), this._snapshotTask.promise.then((e) => {
      this._queryEngine.featureStore.clear(), this._queryEngine.featureStore.addMany(e.features);
      for (const t2 of q(e)) i.getLogger(S).warn(new s2("wfs-layer:refresh-warning", t2.message, t2.details));
      e.errors?.length && i.getLogger(S).warn(new s2("wfs-layer:refresh-error", "Refresh completed with errors", { errors: e.errors }));
    }, () => {
      this._queryEngine.featureStore.clear();
    }), await this._waitSnapshotComplete(), { extent: (await this._queryEngine.fetchRecomputedExtents()).fullExtent };
  }
  async _waitSnapshotComplete() {
    if (this._snapshotTask && !this._snapshotTask.finished) {
      try {
        await this._snapshotTask.promise;
      } catch {
      }
      return this._waitSnapshotComplete();
    }
  }
  async _snapshotFeatures(e) {
    const t = e?.signal, r2 = this._maxTotalRecordCount, n3 = this._maxPageCount, i2 = this._supportsPagination && n3 > 1 ? await ee(this._getFeatureUrl, this._featureType.typeName, { customParameters: this._customParameters, signal: t }) : void 0;
    let u2 = [];
    const l = [];
    if (null == i2) try {
      u2 = await this._singleQuery(t);
    } catch (c) {
      b(c) || l.push(c);
    }
    else {
      const e2 = Math.min(i2, r2), s5 = T(this, r(Math.ceil(e2 / this._maxRecordCount), 1, n3), t);
      await Promise.allSettled(Array.from({ length: 10 }).map(() => E2(s5, u2, l)));
    }
    return s3(t), { features: u2, totalRecordCount: i2, maxTotalRecordCount: r2, maxPageCount: n3, errors: l };
  }
  async _singleQuery(e) {
    const t = Number.isFinite(this._maxRecordCount) && this._maxRecordCount > 0 ? this._maxRecordCount : void 0, r2 = await K(this._getFeatureUrl, this._featureType.typeName, this._getFeatureSpatialReference, this._getFeatureOutputFormat, { customParameters: this._customParameters, count: t, signal: e });
    return this._processGeoJSON(r2, { signal: e });
  }
  async _pageQuery(e, t) {
    const r2 = e * this._maxRecordCount, a = await K(this._getFeatureUrl, this._featureType.typeName, this._getFeatureSpatialReference, this._getFeatureOutputFormat, { customParameters: this._customParameters, startIndex: r2, count: this._maxRecordCount, signal: t });
    return this._processGeoJSON(a, { startIndex: r2, signal: t });
  }
  _processGeoJSON(e, t) {
    E(e, this._getFeatureSpatialReference.wkid);
    const { startIndex: r2, signal: a } = t;
    s3(a);
    const o = N(e, { geometryType: this._geometryType, hasZ: false, objectIdField: this._objectIdField });
    if (!s4(this._spatialReference, this._getFeatureSpatialReference)) for (const s5 of o) null != s5.geometry && (s5.geometry = ut(j(lt(s5.geometry, this._geometryType, false, false), this._getFeatureSpatialReference, this._spatialReference)));
    let n3 = r2 ?? 1;
    for (const s5 of o) {
      const e2 = {};
      d2(this._fieldsIndex, e2, s5.attributes, true), s5.attributes = e2, null == e2[this._objectIdField] && (s5.objectId = e2[this._objectIdField] = n3++);
    }
    return o;
  }
};
function* T(e, t, r2) {
  for (let a = 0; a < t; a++) yield e._pageQuery(a, r2);
}
async function E2(e, t, r2) {
  let a = e.next();
  for (; !a.done; ) {
    try {
      const e2 = await a.value;
      t.push(...e2);
    } catch (s5) {
      b(s5) || r2.push(s5);
    }
    a = e.next();
  }
}
function q(e) {
  const t = [];
  return null != e.totalRecordCount && (e.features.length < e.totalRecordCount && t.push({ name: "wfs-layer:maxRecordCount-too-low", message: `Could only fetch ${e.features.length} of ${e.totalRecordCount} in ${e.maxPageCount} queries. Try increasing the value of WFSLayer.maxRecordCount.`, details: { recordCount: e.features.length, totalRecordCount: e.totalRecordCount } }), e.totalRecordCount > e.maxTotalRecordCount && t.push({ name: "wfs-layer:large-dataset", message: `The number of ${e.totalRecordCount} features exceeds the maximum allowed of ${e.maxTotalRecordCount}.`, details: { recordCount: e.features.length, totalRecordCount: e.totalRecordCount, maxTotalRecordCount: e.maxTotalRecordCount } })), t;
}
export {
  j2 as default
};
//# sourceMappingURL=WFSSourceWorker-KEDN2KVG.js.map
