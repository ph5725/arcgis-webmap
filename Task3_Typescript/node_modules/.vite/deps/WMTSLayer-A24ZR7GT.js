import {
  o as o4
} from "./chunk-VTZ6LADX.js";
import {
  o as o3
} from "./chunk-4BWHW3TP.js";
import {
  U as U2,
  p as p2
} from "./chunk-3VWMXAOT.js";
import {
  e
} from "./chunk-5DPSFHAC.js";
import {
  o as o2
} from "./chunk-TRH7YR3L.js";
import {
  j as j2,
  l as l3
} from "./chunk-3ZORAHSR.js";
import "./chunk-SZN55B2M.js";
import {
  f
} from "./chunk-IUQBXXYO.js";
import {
  j
} from "./chunk-VGIEH4HM.js";
import {
  p
} from "./chunk-XLF2NMGX.js";
import {
  t as t2
} from "./chunk-X5GD6LFD.js";
import {
  b2 as b
} from "./chunk-G4PMFSAZ.js";
import "./chunk-MX5VW6PC.js";
import "./chunk-JJNHUYXK.js";
import "./chunk-UG6RJXJ2.js";
import {
  S
} from "./chunk-OTCYHWWG.js";
import "./chunk-UGXCZZ7N.js";
import "./chunk-GPMIOMDJ.js";
import "./chunk-RGFH75DR.js";
import "./chunk-FEGY3M6U.js";
import {
  h
} from "./chunk-L7EN54WK.js";
import "./chunk-6QTMK7BB.js";
import "./chunk-7NMH5MM5.js";
import "./chunk-TCIXF7MM.js";
import "./chunk-UGTICYU7.js";
import "./chunk-3MHRDLQO.js";
import "./chunk-F4KXGA4J.js";
import "./chunk-QFU5COFB.js";
import "./chunk-45ILJ6ZH.js";
import "./chunk-VCRP2PLV.js";
import "./chunk-BDLVUYG2.js";
import "./chunk-6QA2BVC5.js";
import "./chunk-HWKQJUGY.js";
import "./chunk-XDCUZFJX.js";
import "./chunk-DNZK6PPI.js";
import "./chunk-7BWCD63N.js";
import "./chunk-MUKDJQWB.js";
import "./chunk-6KFXWKZZ.js";
import "./chunk-HPGYEHVI.js";
import "./chunk-YBJ5GVXQ.js";
import {
  V
} from "./chunk-X3R5OB6L.js";
import "./chunk-RACDQ3AL.js";
import "./chunk-TEXTBDH7.js";
import "./chunk-TVM3SZJR.js";
import "./chunk-52HWRRRQ.js";
import "./chunk-VNTEV3V4.js";
import "./chunk-OGOQOMMV.js";
import "./chunk-7Z3AF3B2.js";
import "./chunk-6GWORUT3.js";
import "./chunk-KJSBBQ22.js";
import "./chunk-LMEOPAGQ.js";
import "./chunk-YIV2QKTZ.js";
import {
  U,
  a as a4,
  l as l2
} from "./chunk-A3VAC24F.js";
import "./chunk-FPSA4NFH.js";
import "./chunk-UY6B6IVT.js";
import "./chunk-6PV45IYU.js";
import "./chunk-SRQCQD63.js";
import "./chunk-FIRNXFAH.js";
import {
  z
} from "./chunk-O5TPFXRT.js";
import {
  _
} from "./chunk-Q6XRAGMA.js";
import {
  o
} from "./chunk-JUAPMINU.js";
import "./chunk-PK2ZR2SJ.js";
import {
  r as r2
} from "./chunk-YFPGM5UE.js";
import {
  R,
  r as r3
} from "./chunk-OXSERRAR.js";
import "./chunk-7HI4VRVW.js";
import "./chunk-ZX46THLM.js";
import "./chunk-Y2ZIOB7Y.js";
import "./chunk-KTUX3OKX.js";
import {
  l
} from "./chunk-E3KEUGUG.js";
import {
  m
} from "./chunk-N3XLUQJI.js";
import {
  a2
} from "./chunk-JUAD7TJ6.js";
import "./chunk-VHLUKPRH.js";
import {
  r
} from "./chunk-5TPMG26T.js";
import "./chunk-3NBBZ43U.js";
import "./chunk-VOLWOTEG.js";
import "./chunk-XTNIDRTB.js";
import "./chunk-FGWIXJQY.js";
import "./chunk-TKYAZCMB.js";
import "./chunk-3TBMFSPB.js";
import "./chunk-PSZLDJJA.js";
import {
  H
} from "./chunk-ZWFY3WY5.js";
import {
  I,
  v
} from "./chunk-LQFTAGIV.js";
import "./chunk-S7IJH524.js";
import {
  a as a3
} from "./chunk-GZ2P4SCJ.js";
import {
  s
} from "./chunk-XWG6QGFK.js";
import {
  a,
  t
} from "./chunk-GWNLQRNM.js";
import {
  L
} from "./chunk-FXKORAMT.js";
import "./chunk-GNMFMITH.js";

// node_modules/@arcgis/core/layers/support/TileMatrixSet.js
var l4;
var n = l4 = class extends l {
  constructor(t3) {
    super(t3), this.fullExtent = null, this.id = null, this.tileInfo = null;
  }
  clone() {
    const t3 = new l4();
    return this.hasOwnProperty("fullExtent") && (t3.fullExtent = this.fullExtent?.clone() ?? null), this.hasOwnProperty("id") && (t3.id = this.id), this.hasOwnProperty("tileInfo") && (t3.tileInfo = this.tileInfo?.clone() ?? null), t3;
  }
};
r([m({ type: z, json: { read: { source: "fullExtent" } } })], n.prototype, "fullExtent", void 0), r([m({ type: String, json: { read: { source: "id" } } })], n.prototype, "id", void 0), r([m({ type: j2, json: { read: { source: "tileInfo" } } })], n.prototype, "tileInfo", void 0), n = l4 = r([a2("esri.layers.support.TileMatrixSet")], n);
var p3 = n;

// node_modules/@arcgis/core/layers/support/WMTSStyle.js
var o5;
var i = o5 = class extends l {
  constructor(r4) {
    super(r4), this.id = null, this.title = null, this.description = null, this.legendUrl = null;
  }
  clone() {
    const r4 = new o5();
    return this.hasOwnProperty("description") && (r4.description = this.description), this.hasOwnProperty("id") && (r4.id = this.id), this.hasOwnProperty("isDefault") && (r4.isDefault = this.isDefault), this.hasOwnProperty("keywords") && (r4.keywords = this.keywords && this.keywords.slice()), this.hasOwnProperty("legendUrl") && (r4.legendUrl = this.legendUrl), this.hasOwnProperty("title") && (r4.title = this.title), r4;
  }
};
r([m({ json: { read: { source: "id" } } })], i.prototype, "id", void 0), r([m({ json: { read: { source: "title" } } })], i.prototype, "title", void 0), r([m({ json: { read: { source: "abstract" } } })], i.prototype, "description", void 0), r([m({ json: { read: { source: "legendUrl" } } })], i.prototype, "legendUrl", void 0), r([m({ json: { read: { source: "isDefault" } } })], i.prototype, "isDefault", void 0), r([m({ json: { read: { source: "keywords" } } })], i.prototype, "keywords", void 0), i = o5 = r([a2("esri.layers.support.WMTSStyle")], i);
var p4 = i;

// node_modules/@arcgis/core/layers/support/WMTSSublayer.js
var p5;
var m2 = p5 = class extends l {
  constructor(t3) {
    super(t3), this.description = null, this.fullExtent = null, this.fullExtents = null, this.id = null, this.imageFormats = null, this.layer = null, this.parent = null, this.styles = null, this.title = null, this.tileMatrixSetId = null, this.tileMatrixSets = null;
  }
  readFullExtent(t3, e2) {
    return (t3 = e2.fullExtent) ? z.fromJSON(t3) : null;
  }
  readFullExtents(t3, e2) {
    return e2.fullExtents?.length ? e2.fullExtents.map((t4) => z.fromJSON(t4)) : e2.tileMatrixSets?.map((t4) => z.fromJSON(t4.fullExtent)).filter((t4) => t4) ?? [];
  }
  get imageFormat() {
    let t3 = this._get("imageFormat");
    return t3 || (t3 = this.imageFormats?.length ? this.imageFormats[0] : ""), t3;
  }
  set imageFormat(t3) {
    const e2 = this.imageFormats;
    t3 && (t3.includes("image/") || e2 && !e2.includes(t3)) && (t3.includes("image/") || (t3 = "image/" + t3), e2 && !e2.includes(t3)) ? console.error("The layer doesn't support the format of " + t3) : this._set("imageFormat", t3);
  }
  get styleId() {
    let t3 = this._get("styleId");
    return t3 || (t3 = this.styles?.at(0)?.id ?? ""), t3;
  }
  set styleId(t3) {
    this._set("styleId", t3);
  }
  get tileMatrixSet() {
    return this.tileMatrixSets?.find(({ id: t3 }) => t3 === this.tileMatrixSetId) ?? null;
  }
  clone() {
    const t3 = new p5();
    return this.hasOwnProperty("description") && (t3.description = this.description), this.hasOwnProperty("imageFormats") && (t3.imageFormats = this.imageFormats?.slice() ?? null), this.hasOwnProperty("imageFormat") && (t3.imageFormat = this.imageFormat), this.hasOwnProperty("fullExtent") && (t3.fullExtent = this.fullExtent?.clone()), this.hasOwnProperty("id") && (t3.id = this.id), this.hasOwnProperty("layer") && (t3.layer = this.layer), this.hasOwnProperty("styleId") && (t3.styleId = this.styleId), this.hasOwnProperty("styles") && (t3.styles = this.styles?.clone()), this.hasOwnProperty("tileMatrixSetId") && (t3.tileMatrixSetId = this.tileMatrixSetId), this.hasOwnProperty("tileMatrixSets") && (t3.tileMatrixSets = this.tileMatrixSets?.clone()), this.hasOwnProperty("title") && (t3.title = this.title), t3;
  }
};
r([m()], m2.prototype, "description", void 0), r([m({ type: z })], m2.prototype, "fullExtent", void 0), r([o("fullExtent", ["fullExtent"])], m2.prototype, "readFullExtent", null), r([m({ readOnly: true })], m2.prototype, "fullExtents", void 0), r([o("fullExtents", ["fullExtents", "tileMatrixSets"])], m2.prototype, "readFullExtents", null), r([m()], m2.prototype, "id", void 0), r([m()], m2.prototype, "imageFormat", null), r([m({ json: { read: { source: "formats" } } })], m2.prototype, "imageFormats", void 0), r([m()], m2.prototype, "layer", void 0), r([m()], m2.prototype, "parent", void 0), r([m()], m2.prototype, "styleId", null), r([m({ type: V.ofType(p4), json: { read: { source: "styles" } } })], m2.prototype, "styles", void 0), r([m({ json: { write: { ignoreOrigin: true } } })], m2.prototype, "title", void 0), r([m()], m2.prototype, "tileMatrixSetId", void 0), r([m({ readOnly: true })], m2.prototype, "tileMatrixSet", null), r([m({ type: V.ofType(p3), json: { read: { source: "tileMatrixSets" } } })], m2.prototype, "tileMatrixSets", void 0), m2 = p5 = r([a2("esri.layers.support.WMTSSublayer")], m2);

// node_modules/@arcgis/core/layers/support/wmtsUtils.js
var u = 90.71428571428571;
function p6(e2) {
  const t3 = e2.replaceAll(/ows:/gi, "");
  return new DOMParser().parseFromString(t3, "text/xml");
}
function f2(e2) {
  if (!g("Contents", e2.documentElement)) throw new s("wmtslayer:wmts-capabilities-xml-is-not-valid", "the wmts get capabilities response is not compliant");
}
function d(e2, i2) {
  const n2 = e2.documentElement, r4 = /* @__PURE__ */ new Map(), l5 = /* @__PURE__ */ new Map(), o6 = g("Contents", n2);
  if (!o6) throw new s("wmtslayer:wmts-capabilities-xml-is-not-valid", "Can't retrieve xml capabilities element");
  const s2 = g("OperationsMetadata", n2), a5 = s2?.querySelector("[name='GetTile']"), c = a5?.getElementsByTagName("Get"), u2 = c && Array.prototype.slice.call(c), p7 = i2.url?.indexOf("https"), f3 = void 0 !== p7 && p7 > -1;
  let d2, m4, x2 = i2.serviceMode, w2 = i2?.url;
  if (u2?.length && u2.some((e3) => {
    const t3 = g("Constraint", e3);
    return !t3 || M("AllowedValues", "Value", x2, t3) ? (w2 = e3.attributes[0].nodeValue, true) : (!t3 || M("AllowedValues", "Value", "RESTful", t3) || M("AllowedValues", "Value", "REST", t3) ? m4 = e3.attributes[0].nodeValue : t3 && !M("AllowedValues", "Value", "KVP", t3) || (d2 = e3.attributes[0].nodeValue), false);
  }), !w2) if (m4) w2 = m4, x2 = "RESTful";
  else if (d2) w2 = d2, x2 = "KVP";
  else {
    const e3 = g("ServiceMetadataURL", n2);
    w2 = e3?.getAttribute("xlink:href");
  }
  const y2 = w2.indexOf("1.0.0/");
  -1 === y2 && "RESTful" === x2 ? w2 += "/" : y2 > -1 && (w2 = w2.slice(0, y2)), "KVP" === x2 && (w2 += y2 > -1 ? "" : "?"), f3 && (w2 = w2.replace(/^http:/i, "https:"));
  const R3 = C("ServiceIdentification>ServiceTypeVersion", n2), S3 = C("ServiceIdentification>AccessConstraints", n2), A2 = S3 && /^none$/i.test(S3) ? null : S3, V4 = h2("Layer", o6), L3 = h2("TileMatrixSet", o6), b3 = V4.map((e3) => {
    const t3 = C("Identifier", e3);
    return r4.set(t3, e3), T(t3, e3, L3, f3, R3);
  });
  return { copyright: A2, dimensionMap: l5, layerMap: r4, layers: b3, serviceMode: x2, tileUrl: w2 };
}
function m3(e2) {
  for (const t3 of e2.layers) for (const e3 of t3.tileMatrixSets ?? []) {
    const { tileInfo: t4 } = e3;
    if (t4 && 96 !== t4.dpi) {
      for (const i2 of t4.lods ?? []) i2.scale = 96 * i2.scale / t4.dpi, i2.resolution = P(t4.spatialReference?.wkid, i2.scale * u / 96, e3.id);
      t4.dpi = 96;
    }
  }
}
function x(e2) {
  return e2.nodeType === Node.ELEMENT_NODE;
}
function g(e2, t3) {
  for (let i2 = 0; i2 < t3.childNodes.length; i2++) {
    const n2 = t3.childNodes[i2];
    if (x(n2) && n2.nodeName === e2) return n2;
  }
  return null;
}
function h2(e2, t3) {
  const i2 = [];
  for (let n2 = 0; n2 < t3.childNodes.length; n2++) {
    const r4 = t3.childNodes[n2];
    x(r4) && r4.nodeName === e2 && i2.push(r4);
  }
  return i2;
}
function w(t3, i2) {
  const n2 = [];
  for (let e2 = 0; e2 < i2.childNodes.length; e2++) {
    const r4 = i2.childNodes[e2];
    x(r4) && r4.nodeName === t3 && n2.push(r4);
  }
  return n2.map((e2) => e2.textContent).filter(L);
}
function C(e2, t3) {
  return e2.split(">").forEach((e3) => {
    t3 && (t3 = g(e3, t3));
  }), t3 && t3.textContent;
}
function M(e2, t3, i2, n2) {
  let r4;
  return Array.prototype.slice.call(n2.childNodes).some((n3) => {
    if (n3.nodeName.includes(e2)) {
      const e3 = g(t3, n3), l5 = e3?.textContent;
      if (l5 === i2 || i2.split(":") && i2.split(":")[1] === l5) return r4 = n3, true;
    }
    return false;
  }), r4;
}
function T(e2, t3, i2, n2, r4) {
  const l5 = C("Abstract", t3), o6 = w("Format", t3);
  return { id: e2, fullExtent: V2(t3), fullExtents: L2(t3), description: l5, formats: o6, styles: b2(t3, n2), title: C("Title", t3), tileMatrixSets: E(r4, t3, i2) };
}
function y(e2, t3) {
  const i2 = [], n2 = e2.layerMap?.get(t3);
  if (!n2) return null;
  const r4 = h2("ResourceURL", n2), l5 = h2("Dimension", n2);
  let o6, s2, a5, c;
  return l5.length && (o6 = C("Identifier", l5[0]), s2 = w("Default", l5[0]) || w("Value", l5[0])), l5.length > 1 && (a5 = C("Identifier", l5[1]), c = w("Default", l5[1]) || w("Value", l5[1])), e2.dimensionMap.set(t3, { dimensions: s2, dimensions2: c }), r4.forEach((e3) => {
    let t4 = e3.getAttribute("template");
    if ("tile" === e3.getAttribute("resourceType")) {
      if (o6 && s2.length) if (t4.includes("{" + o6 + "}")) t4 = t4.replace("{" + o6 + "}", "{dimensionValue}");
      else {
        const e4 = t4.toLowerCase().indexOf("{" + o6.toLowerCase() + "}");
        e4 > -1 && (t4 = t4.slice(0, e4) + "{dimensionValue}" + t4.slice(e4 + o6.length + 2));
      }
      if (a5 && c.length) if (t4.includes("{" + a5 + "}")) t4 = t4.replace("{" + a5 + "}", "{dimensionValue2}");
      else {
        const e4 = t4.toLowerCase().indexOf("{" + a5.toLowerCase() + "}");
        e4 > -1 && (t4 = t4.slice(0, e4) + "{dimensionValue2}" + t4.slice(e4 + a5.length + 2));
      }
      i2.push({ template: t4, format: e3.getAttribute("format"), resourceType: "tile" });
    }
  }), i2;
}
function R2(e2, t3, i2, n2, r4, l5, o6, s2) {
  const a5 = S2(e2, t3, n2);
  if (!(a5?.length > 0)) return "";
  const { dimensionMap: c } = e2, u2 = c.get(t3).dimensions?.[0], p7 = c.get(t3).dimensions2?.[0];
  return a5[o6 % a5.length].template.replaceAll(/\{Style\}/gi, r4 ?? "").replaceAll(/\{TileMatrixSet\}/gi, i2 ?? "").replaceAll(/\{TileMatrix\}/gi, l5).replaceAll(/\{TileRow\}/gi, "" + o6).replaceAll(/\{TileCol\}/gi, "" + s2).replaceAll(/\{dimensionValue\}/gi, u2).replaceAll(/\{dimensionValue2\}/gi, p7);
}
function S2(e2, t3, i2) {
  const n2 = y(e2, t3), r4 = n2?.filter((e3) => e3.format === i2);
  return (r4?.length ? r4 : n2) ?? [];
}
function A(e2, t3, i2, n2) {
  const { dimensionMap: r4 } = e2, l5 = y(e2, t3);
  let o6 = "";
  if (l5 && l5.length > 0) {
    const e3 = r4.get(t3).dimensions?.[0], s2 = r4.get(t3).dimensions2?.[0];
    o6 = l5[0].template, o6.endsWith(".xxx") && (o6 = o6.slice(0, -4)), o6 = o6.replaceAll(/\{Style\}/gi, n2), o6 = o6.replaceAll(/\{TileMatrixSet\}/gi, i2), o6 = o6.replaceAll(/\{TileMatrix\}/gi, "{level}"), o6 = o6.replaceAll(/\{TileRow\}/gi, "{row}"), o6 = o6.replaceAll(/\{TileCol\}/gi, "{col}"), o6 = o6.replaceAll(/\{dimensionValue\}/gi, e3), o6 = o6.replaceAll(/\{dimensionValue2\}/gi, s2);
  }
  return o6;
}
function V2(e2) {
  const t3 = g("WGS84BoundingBox", e2), i2 = t3 ? C("LowerCorner", t3).split(" ") : ["-180", "-90"], n2 = t3 ? C("UpperCorner", t3).split(" ") : ["180", "90"];
  return { xmin: parseFloat(i2[0]), ymin: parseFloat(i2[1]), xmax: parseFloat(n2[0]), ymax: parseFloat(n2[1]), spatialReference: { wkid: 4326 } };
}
function L2(e2) {
  const t3 = [];
  return o4(e2, { BoundingBox: (e3) => {
    if (!e3.getAttribute("crs")) return;
    const i2 = e3.getAttribute("crs").toLowerCase(), n2 = N(i2), r4 = i2.includes("epsg") && o3(n2.wkid);
    let l5, a5, c, u2;
    o4(e3, { LowerCorner: (e4) => {
      [l5, a5] = e4.textContent.split(" ").map((e5) => Number.parseFloat(e5)), r4 && ([l5, a5] = [a5, l5]);
    }, UpperCorner: (e4) => {
      [c, u2] = e4.textContent.split(" ").map((e5) => Number.parseFloat(e5)), r4 && ([c, u2] = [u2, c]);
    } }), t3.push({ xmin: l5, ymin: a5, xmax: c, ymax: u2, spatialReference: n2 });
  } }), t3;
}
function b2(e2, t3) {
  return h2("Style", e2).map((e3) => {
    const i2 = g("LegendURL", e3), n2 = g("Keywords", e3), r4 = n2 ? w("Keyword", n2) : [];
    let l5 = i2?.getAttribute("xlink:href");
    t3 && (l5 = l5?.replace(/^http:/i, "https:"));
    return { abstract: C("Abstract", e3), id: C("Identifier", e3), isDefault: "true" === e3.getAttribute("isDefault"), keywords: r4, legendUrl: l5, title: C("Title", e3) };
  });
}
function E(e2, t3, i2) {
  return h2("TileMatrixSetLink", t3).map((t4) => I2(e2, t4, i2));
}
function I2(e2, t3, i2) {
  const n2 = g("TileMatrixSet", t3).textContent, r4 = w("TileMatrix", t3), l5 = i2.find((e3) => {
    const t4 = g("Identifier", e3), i3 = t4?.textContent;
    return !!(i3 === n2 || n2.split(":") && n2.split(":")[1] === i3);
  }), o6 = g("TileMatrixSetLimits", t3), s2 = o6 && h2("TileMatrixLimits", o6), a5 = /* @__PURE__ */ new Map();
  if (s2?.length) for (const c of s2) {
    const e3 = g("TileMatrix", c).textContent, t4 = +g("MinTileRow", c).textContent, i3 = +g("MaxTileRow", c).textContent, n3 = +g("MinTileCol", c).textContent, r5 = +g("MaxTileCol", c).textContent;
    a5.set(e3, { minCol: n3, maxCol: r5, minRow: t4, maxRow: i3 });
  }
  const u2 = C("SupportedCRS", l5).toLowerCase(), p7 = v2(l5, u2), f3 = p7.spatialReference, d2 = g("TileMatrix", l5), m4 = [parseInt(C("TileWidth", d2), 10), parseInt(C("TileHeight", d2), 10)], x2 = [];
  if (r4.length) r4.forEach((e3, t4) => {
    const i3 = M("TileMatrix", "Identifier", e3, l5);
    x2.push(j3(i3, u2, t4, n2, a5));
  });
  else {
    h2("TileMatrix", l5).forEach((e3, t4) => {
      x2.push(j3(e3, u2, t4, n2, a5));
    });
  }
  const T2 = U3(e2, l5, p7, m4, x2[0]).toJSON(), y2 = new j2({ dpi: 96, spatialReference: f3, size: m4, origin: p7, lods: x2 }).toJSON();
  return { id: n2, fullExtent: T2, tileInfo: y2 };
}
function N(e2) {
  e2 = e2.toLowerCase();
  let t3 = parseInt(e2.split(":").pop(), 10);
  900913 !== t3 && 3857 !== t3 || (t3 = 102100);
  const i2 = O(e2);
  return null != i2 && (t3 = i2), { wkid: t3 };
}
function v2(e2, t3) {
  return F(g("TileMatrix", e2), t3);
}
function F(e2, t3) {
  const i2 = N(t3), [n2, l5] = C("TopLeftCorner", e2).split(" ").map((e3) => parseFloat(e3)), s2 = t3.includes("epsg") && o3(i2.wkid);
  return new _(s2 ? { x: l5, y: n2, spatialReference: i2 } : { x: n2, y: l5, spatialReference: i2 });
}
function U3(e2, t3, i2, r4, l5) {
  const o6 = g("BoundingBox", t3);
  let s2, a5, c, u2, p7, f3;
  if (o6 && (s2 = C("LowerCorner", o6).split(" "), a5 = C("UpperCorner", o6).split(" ")), s2 && s2.length > 1 && a5 && a5.length > 1) c = parseFloat(s2[0]), p7 = parseFloat(s2[1]), u2 = parseFloat(a5[0]), f3 = parseFloat(a5[1]);
  else {
    const e3 = g("TileMatrix", t3), n2 = parseInt(C("MatrixWidth", e3), 10), o7 = parseInt(C("MatrixHeight", e3), 10);
    c = i2.x, f3 = i2.y, u2 = c + n2 * r4[0] * l5.resolution, p7 = f3 - o7 * r4[1] * l5.resolution;
  }
  return k(e2, i2.spatialReference, i2) ? new z(p7, c, f3, u2, i2.spatialReference) : new z(c, p7, u2, f3, i2.spatialReference);
}
function k(e2, t3, i2) {
  return "1.0.0" === e2 && o3(t3.wkid) && !(i2.spatialReference.isGeographic && i2.x < -90 && i2.y >= -90);
}
var D;
function O(e2) {
  return e2.includes("crs84") || e2.includes("crs:84") ? D.CRS84 : e2.includes("crs83") || e2.includes("crs:83") ? D.CRS83 : e2.includes("crs27") || e2.includes("crs:27") ? D.CRS27 : null;
}
function j3(e2, t3, i2, n2, r4) {
  const l5 = N(t3), o6 = C("Identifier", e2);
  let s2 = parseFloat(C("ScaleDenominator", e2));
  const c = P(l5.wkid, s2, n2);
  s2 *= 96 / u;
  const p7 = +C("MatrixWidth", e2), f3 = +C("MatrixHeight", e2), { maxCol: d2 = p7 - 1, maxRow: m4 = f3 - 1, minCol: x2 = 0, minRow: g2 = 0 } = r4.get(o6) ?? {}, { x: h3, y: w2 } = F(e2, t3);
  return new l3({ cols: [x2, d2], level: i2, levelValue: o6, origin: [h3, w2], scale: s2, resolution: c, rows: [g2, m4] });
}
function P(e2, t3, n2) {
  let r4;
  return r4 = r3.hasOwnProperty("" + e2) ? r3.values[r3[e2]] : "default028mm" === n2 ? 6370997 * Math.PI / 180 : R(e2).metersPerDegree, 7 * t3 / 25e3 / r4;
}
!function(e2) {
  e2[e2.CRS84 = 4326] = "CRS84", e2[e2.CRS83 = 4269] = "CRS83", e2[e2.CRS27 = 4267] = "CRS27";
}(D || (D = {}));

// node_modules/@arcgis/core/layers/WMTSLayer.js
var F2;
var V3 = { "image/png": ".png", "image/png8": ".png", "image/png24": ".png", "image/png32": ".png", "image/jpg": ".jpg", "image/jpeg": ".jpeg", "image/gif": ".gif", "image/bmp": ".bmp", "image/tiff": ".tif", "image/jpgpng": "", "image/jpegpng": "", "image/unknown": "" };
var B = /* @__PURE__ */ new Set(["version", "service", "request", "layer", "style", "format", "tilematrixset", "tilematrix", "tilerow", "tilecol"]);
var $ = F2 = class extends p(f(t2(b(j(S(h)))))) {
  constructor(...e2) {
    super(...e2), this.activeLayer = null, this.copyright = "", this.customParameters = null, this.customLayerParameters = null, this.fullExtent = null, this.operationalLayerType = "WebTiledLayer", this.resourceInfo = null, this.serviceMode = "RESTful", this.sublayers = null, this.type = "wmts", this.version = "1.0.0", this.addHandles([l2(() => this.activeLayer, (e3, t3) => {
      t3 && !this.sublayers?.includes(t3) && (t3.layer = null, t3.parent = null), e3 && (e3.layer = this, e3.parent = this);
    }, U), a4(() => this.sublayers, "after-add", ({ item: e3 }) => {
      e3.layer = this, e3.parent = this;
    }, U), a4(() => this.sublayers, "after-remove", ({ item: e3 }) => {
      e3.layer = null, e3.parent = null;
    }, U), l2(() => this.sublayers, (e3, t3) => {
      if (t3) for (const r4 of t3) r4.layer = null, r4.parent = null;
      if (e3) for (const r4 of e3) r4.layer = this, r4.parent = this;
    }, U)]);
  }
  normalizeCtorArgs(e2, t3) {
    return "string" == typeof e2 ? { url: e2, ...t3 } : e2;
  }
  load(e2) {
    return this.addResolvingPromise(this.loadFromPortal({ supportedTypes: ["WMTS"] }, e2).catch(a3).then(() => this._fetchService(e2)).catch((e3) => {
      throw a3(e3), new s("wmtslayer:unsupported-service-data", "Invalid response from the WMTS service.", { error: e3 });
    })), Promise.resolve(this);
  }
  readActiveLayerFromService(e2, t3, r4) {
    this.activeLayer || (this.activeLayer = new m2());
    let i2 = t3.layers.find((e3) => e3.id === this.activeLayer.id);
    return i2 || (i2 = t3.layers[0]), this.activeLayer.read(i2, r4), this.activeLayer;
  }
  readActiveLayerFromItemOrWebDoc(e2, t3) {
    const { templateUrl: r4, wmtsInfo: i2 } = t3, s2 = r4 ? this._getLowerCasedUrlParams(r4) : null, a5 = i2?.layerIdentifier;
    let o6 = null;
    const l5 = i2?.tileMatrixSet;
    l5 && (Array.isArray(l5) ? l5.length && (o6 = l5[0]) : o6 = l5);
    const n2 = s2?.format, m4 = s2?.style;
    return new m2({ id: a5, imageFormat: n2, styleId: m4, tileMatrixSetId: o6 });
  }
  writeActiveLayer(e2, t3, r4, i2) {
    const s2 = this.activeLayer;
    t3.templateUrl = this.getUrlTemplate(s2.id, s2.tileMatrixSetId, s2.imageFormat, s2.styleId);
    const a5 = t("tileMatrixSet.tileInfo", s2);
    t3.tileInfo = a5 ? a5.toJSON(i2) : null, t3.wmtsInfo = { ...t3.wmtsInfo, layerIdentifier: s2.id, tileMatrixSet: s2.tileMatrixSetId };
  }
  readCustomParameters(e2, t3) {
    const r4 = t3.wmtsInfo;
    return r4 ? this._mergeParams(r4.customParameters, r4.url) : null;
  }
  get fullExtents() {
    return this.activeLayer.fullExtents;
  }
  readServiceMode(e2, t3) {
    return t3.templateUrl.includes("?") ? "KVP" : "RESTful";
  }
  readSublayersFromService(e2, t3, r4) {
    return K(t3.layers, r4);
  }
  get supportedSpatialReferences() {
    return this.activeLayer.tileMatrixSets?.map((e2) => e2.tileInfo?.spatialReference).toArray().filter(L) ?? [];
  }
  get tilemapCache() {
    const e2 = this.activeLayer?.tileMatrixSet?.tileInfo;
    return e2 ? new e(e2) : void 0;
  }
  get title() {
    return this.activeLayer?.title ?? "Layer";
  }
  set title(e2) {
    this._overrideIfSome("title", e2);
  }
  get url() {
    return this._get("url");
  }
  set url(e2) {
    e2 && e2.endsWith("/") ? this._set("url", e2.slice(0, -1)) : this._set("url", e2);
  }
  createWebTileLayer(e2) {
    const t3 = this.getUrlTemplate(this.activeLayer.id, this.activeLayer.tileMatrixSetId, this.activeLayer.imageFormat, this.activeLayer.styleId), r4 = this._getTileMatrixSetById(e2.tileMatrixSetId), i2 = r4?.tileInfo, s2 = e2.fullExtent, a5 = new p2({ layerIdentifier: e2.id, tileMatrixSet: e2.tileMatrixSetId, url: this.url });
    return this.customLayerParameters && (a5.customLayerParameters = this.customLayerParameters), this.customParameters && (a5.customParameters = this.customParameters), new U2({ fullExtent: s2, urlTemplate: t3, tileInfo: i2, wmtsInfo: a5 });
  }
  async fetchTile(e2, r4, i2, s2 = {}) {
    const { signal: a5 } = s2, o6 = this.getTileUrl(e2, r4, i2), { data: l5 } = await H(o6, { responseType: "image", signal: a5 });
    return l5;
  }
  async fetchImageBitmapTile(e2, r4, i2, s2 = {}) {
    const { signal: a5 } = s2;
    if (this.fetchTile !== F2.prototype.fetchTile) {
      const t3 = await this.fetchTile(e2, r4, i2, s2);
      return o2(t3, e2, r4, i2, a5);
    }
    const o6 = this.getTileUrl(e2, r4, i2), { data: l5 } = await H(o6, { responseType: "blob", signal: a5 });
    return o2(l5, e2, r4, i2, a5);
  }
  findSublayerById(e2) {
    return this.sublayers?.find((t3) => t3.id === e2);
  }
  getTileUrl(e2, t3, r4) {
    const i2 = this._getTileMatrixSetById(this.activeLayer.tileMatrixSetId), s2 = i2?.tileInfo?.lods[e2], a5 = s2 ? s2.levelValue || `${s2.level}` : `${e2}`;
    let o6 = this.resourceInfo ? "" : R2({ dimensionMap: this.dimensionMap, layerMap: this.layerMap }, this.activeLayer.id, this.activeLayer.tileMatrixSetId, this.activeLayer.imageFormat, this.activeLayer.styleId, a5, t3, r4);
    if (!o6) {
      o6 = this.getUrlTemplate(this.activeLayer.id, this.activeLayer.tileMatrixSetId, this.activeLayer.imageFormat, this.activeLayer.styleId).replaceAll(/\{level\}/gi, a5).replaceAll(/\{row\}/gi, `${t3}`).replaceAll(/\{col\}/gi, `${r4}`);
    }
    return o6 = this._appendCustomLayerParameters(o6), o6;
  }
  getUrlTemplate(e2, t3, r4, i2) {
    if (!this.resourceInfo) {
      const r5 = A({ dimensionMap: this.dimensionMap, layerMap: this.layerMap }, e2, t3, i2);
      if (r5) return r5;
    }
    if ("KVP" === this.serviceMode) return this.url + "?SERVICE=WMTS&VERSION=" + this.version + "&REQUEST=GetTile&LAYER=" + e2 + "&STYLE=" + i2 + "&FORMAT=" + r4 + "&TILEMATRIXSET=" + t3 + "&TILEMATRIX={level}&TILEROW={row}&TILECOL={col}";
    if ("RESTful" === this.serviceMode) {
      let s2 = "";
      return V3[r4.toLowerCase()] && (s2 = V3[r4.toLowerCase()]), this.url + e2 + "/" + i2 + "/" + t3 + "/{level}/{row}/{col}" + s2;
    }
    return "";
  }
  async _fetchService(e2) {
    if (this.resourceInfo) return "KVP" !== this.resourceInfo.serviceMode || this.url.includes("?") || (this.url += "?"), m3(this.resourceInfo), void this.read(this.resourceInfo, { origin: "service" });
    let t3 = null;
    try {
      const { data: r5 } = await this._getCapabilities(this.serviceMode, e2);
      t3 = p6(r5), f2(t3);
    } catch {
      const r5 = "KVP" === this.serviceMode ? "RESTful" : "KVP";
      try {
        const { data: i3 } = await this._getCapabilities(r5, e2);
        t3 = p6(i3), f2(t3), this.serviceMode = r5;
      } catch (o6) {
        throw new s("wmtslayer:unsupported-service-data", "Services does not support RESTful or KVP service modes.", { error: o6 });
      }
    }
    const { serviceMode: r4, url: i2 } = this, a5 = d(t3, { serviceMode: r4, url: i2 });
    this.read(a5, { origin: "service" });
  }
  async _getCapabilities(e2, r4) {
    const i2 = this._getCapabilitiesUrl(e2);
    return await H(i2, { ...r4, responseType: "text" });
  }
  _getTileMatrixSetById(e2) {
    const t3 = this.findSublayerById(this.activeLayer.id);
    return t3?.tileMatrixSets?.find(({ id: t4 }) => t4 === e2);
  }
  _appendCustomParameters(e2) {
    return this._appendParameters(e2, this.customParameters);
  }
  _appendCustomLayerParameters(e2) {
    return this._appendParameters(e2, { ...a(this.customParameters), ...this.customLayerParameters });
  }
  _appendParameters(e2, t3) {
    const r4 = I(e2), i2 = { ...r4.query, ...t3 }, s2 = v(i2);
    return "" === s2 ? r4.path : `${r4.path}?${s2}`;
  }
  _getCapabilitiesUrl(e2) {
    this.url = I(this.url).path;
    let t3 = this.url;
    switch (e2) {
      case "KVP":
        t3 += `?request=GetCapabilities&service=WMTS&version=${this.version}`;
        break;
      case "RESTful": {
        const e3 = `/${this.version}/WMTSCapabilities.xml`, r4 = new RegExp(e3, "i");
        t3 = t3.replace(r4, ""), t3 += e3;
        break;
      }
    }
    return this._appendCustomParameters(t3);
  }
  _getLowerCasedUrlParams(e2) {
    if (!e2) return null;
    const t3 = I(e2).query;
    if (!t3) return null;
    const r4 = {};
    return Object.keys(t3).forEach((e3) => {
      r4[e3.toLowerCase()] = t3[e3];
    }), r4;
  }
  _mergeParams(e2, t3) {
    const r4 = this._getLowerCasedUrlParams(t3);
    if (r4) {
      const t4 = Object.keys(r4);
      t4.length && (e2 = e2 ? a(e2) : {}, t4.forEach((t5) => {
        e2.hasOwnProperty(t5) || B.has(t5) || (e2[t5] = r4[t5]);
      }));
    }
    return e2;
  }
};
function K(e2, t3) {
  return e2.map((e3) => {
    const r4 = new m2();
    return r4.read(e3, t3), r4;
  });
}
r([m()], $.prototype, "dimensionMap", void 0), r([m()], $.prototype, "layerMap", void 0), r([m({ type: m2, json: { origins: { "web-document": { write: { ignoreOrigin: true } } } } })], $.prototype, "activeLayer", void 0), r([o("service", "activeLayer", ["layers"])], $.prototype, "readActiveLayerFromService", null), r([o(["web-document", "portal-item"], "activeLayer", ["wmtsInfo"])], $.prototype, "readActiveLayerFromItemOrWebDoc", null), r([r2(["web-document", "portal-item"], "activeLayer", { templateUrl: { type: String }, tileInfo: { type: j2 }, "wmtsInfo.layerIdentifier": { type: String }, "wmtsInfo.tileMatrixSet": { type: String } })], $.prototype, "writeActiveLayer", null), r([m({ type: String, value: "", json: { write: true } })], $.prototype, "copyright", void 0), r([m({ type: ["show", "hide"] })], $.prototype, "listMode", void 0), r([m({ json: { read: true, write: true } })], $.prototype, "blendMode", void 0), r([m({ json: { origins: { "web-document": { read: { source: ["wmtsInfo.customParameters", "wmtsInfo.url"] }, write: { target: "wmtsInfo.customParameters" } }, "portal-item": { read: { source: ["wmtsInfo.customParameters", "wmtsInfo.url"] }, write: { target: "wmtsInfo.customParameters" } } } } })], $.prototype, "customParameters", void 0), r([o(["portal-item", "web-document"], "customParameters")], $.prototype, "readCustomParameters", null), r([m({ json: { origins: { "web-document": { read: { source: "wmtsInfo.customLayerParameters" }, write: { target: "wmtsInfo.customLayerParameters" } }, "portal-item": { read: { source: "wmtsInfo.customLayerParameters" }, write: { target: "wmtsInfo.customLayerParameters" } } } } })], $.prototype, "customLayerParameters", void 0), r([m({ type: z, json: { write: { ignoreOrigin: true }, origins: { "web-document": { read: { source: "fullExtent" } }, "portal-item": { read: { source: "fullExtent" } } } } })], $.prototype, "fullExtent", void 0), r([m({ readOnly: true })], $.prototype, "fullExtents", null), r([m({ type: ["WebTiledLayer"] })], $.prototype, "operationalLayerType", void 0), r([m()], $.prototype, "resourceInfo", void 0), r([m()], $.prototype, "serviceMode", void 0), r([o(["portal-item", "web-document"], "serviceMode", ["templateUrl"])], $.prototype, "readServiceMode", null), r([m({ type: V.ofType(m2) })], $.prototype, "sublayers", void 0), r([o("service", "sublayers", ["layers"])], $.prototype, "readSublayersFromService", null), r([m({ readOnly: true })], $.prototype, "supportedSpatialReferences", null), r([m({ readOnly: true })], $.prototype, "tilemapCache", null), r([m({ json: { read: { source: "title" } } })], $.prototype, "title", null), r([m({ json: { read: false }, readOnly: true, value: "wmts" })], $.prototype, "type", void 0), r([m({ json: { origins: { service: { read: { source: "tileUrl" } }, "web-document": { read: { source: "wmtsInfo.url" }, write: { target: "wmtsInfo.url" } }, "portal-item": { read: { source: "wmtsInfo.url" }, write: { target: "wmtsInfo.url" } } } } })], $.prototype, "url", null), r([m()], $.prototype, "version", void 0), $ = F2 = r([a2("esri.layers.WMTSLayer")], $);
var k2 = $;
export {
  k2 as default
};
//# sourceMappingURL=WMTSLayer-A24ZR7GT.js.map
