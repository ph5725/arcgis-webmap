import {
  n,
  r as r3
} from "./chunk-HFVCCDEX.js";
import "./chunk-IEBPGCZ4.js";
import {
  i as i2
} from "./chunk-CEMHA5WX.js";
import {
  S
} from "./chunk-YR4BEFGH.js";
import {
  u
} from "./chunk-EEB2RHCK.js";
import "./chunk-MGE3DVJJ.js";
import "./chunk-JSDQVIZI.js";
import "./chunk-GEY3MNEN.js";
import "./chunk-QARUBZM2.js";
import "./chunk-YEQJ7SMN.js";
import "./chunk-F6HYAIOQ.js";
import "./chunk-733XT7D4.js";
import "./chunk-O3AUTEBE.js";
import "./chunk-I7SMTGBD.js";
import "./chunk-TAPCW5Z5.js";
import "./chunk-JOUWZB2W.js";
import "./chunk-CF5GNPLI.js";
import "./chunk-5WTH3GBK.js";
import "./chunk-A4KKV2O6.js";
import "./chunk-IAKXH7PU.js";
import "./chunk-DRLVYVHZ.js";
import "./chunk-DKS7UUDR.js";
import "./chunk-KDQWOWXR.js";
import "./chunk-JOVQBCRD.js";
import "./chunk-GYAK76KG.js";
import "./chunk-KB5I2WHB.js";
import "./chunk-P3YYANTX.js";
import "./chunk-Y2ZAHGIO.js";
import "./chunk-VNLFNBKT.js";
import "./chunk-KHEIHGIK.js";
import "./chunk-GKCEBA6Q.js";
import "./chunk-VWMPQK5V.js";
import "./chunk-IGBV77N3.js";
import "./chunk-5Y3EUPZN.js";
import {
  p,
  r as r2
} from "./chunk-YBXGYFQH.js";
import {
  h
} from "./chunk-NFDUQVJM.js";
import "./chunk-3PPDORWL.js";
import "./chunk-YIXK32VF.js";
import {
  e
} from "./chunk-2NTKYBCL.js";
import {
  g
} from "./chunk-BDWOUZQR.js";
import "./chunk-H34ENSPL.js";
import "./chunk-H6F6O2KE.js";
import "./chunk-AF3FX2UV.js";
import "./chunk-DRAQJS2F.js";
import "./chunk-BZYXFNL4.js";
import "./chunk-VNTS5E5O.js";
import "./chunk-TMFB3DKM.js";
import "./chunk-NO2XQDLB.js";
import "./chunk-LBC3MAJX.js";
import "./chunk-NMP7ZOVG.js";
import "./chunk-YHYQP7QX.js";
import "./chunk-RP7FUW55.js";
import "./chunk-MPV4X4LZ.js";
import "./chunk-TNW4TPNP.js";
import "./chunk-TMC6HYGQ.js";
import "./chunk-RGFH75DR.js";
import "./chunk-BNO7HCVD.js";
import "./chunk-VHTQ5H2C.js";
import "./chunk-FKFXOPPT.js";
import "./chunk-KE3WBZYL.js";
import "./chunk-HWKQJUGY.js";
import "./chunk-XDCUZFJX.js";
import "./chunk-DNZK6PPI.js";
import "./chunk-7BWCD63N.js";
import "./chunk-65K4DQAH.js";
import "./chunk-MUKDJQWB.js";
import "./chunk-6KFXWKZZ.js";
import "./chunk-X3R5OB6L.js";
import "./chunk-RACDQ3AL.js";
import "./chunk-TEXTBDH7.js";
import "./chunk-N3A2BVTW.js";
import "./chunk-52HWRRRQ.js";
import "./chunk-VNTEV3V4.js";
import "./chunk-OGOQOMMV.js";
import "./chunk-7Z3AF3B2.js";
import "./chunk-6GWORUT3.js";
import "./chunk-YIV2QKTZ.js";
import "./chunk-A3VAC24F.js";
import "./chunk-FPSA4NFH.js";
import "./chunk-FIRNXFAH.js";
import "./chunk-O5TPFXRT.js";
import "./chunk-Q6XRAGMA.js";
import "./chunk-JUAPMINU.js";
import "./chunk-PK2ZR2SJ.js";
import "./chunk-YFPGM5UE.js";
import {
  s
} from "./chunk-OXSERRAR.js";
import "./chunk-7HI4VRVW.js";
import "./chunk-ZX46THLM.js";
import "./chunk-KTUX3OKX.js";
import "./chunk-E3KEUGUG.js";
import {
  m
} from "./chunk-N3XLUQJI.js";
import {
  a2 as a
} from "./chunk-JUAD7TJ6.js";
import "./chunk-VHLUKPRH.js";
import {
  r
} from "./chunk-5TPMG26T.js";
import "./chunk-3NBBZ43U.js";
import "./chunk-VOLWOTEG.js";
import "./chunk-XTNIDRTB.js";
import "./chunk-FGWIXJQY.js";
import "./chunk-TKYAZCMB.js";
import "./chunk-3TBMFSPB.js";
import "./chunk-PSZLDJJA.js";
import "./chunk-ZWFY3WY5.js";
import "./chunk-LQFTAGIV.js";
import "./chunk-S7IJH524.js";
import {
  b
} from "./chunk-GZ2P4SCJ.js";
import {
  i2 as i
} from "./chunk-XWG6QGFK.js";
import "./chunk-GWNLQRNM.js";
import "./chunk-FXKORAMT.js";
import "./chunk-GNMFMITH.js";

// node_modules/@arcgis/core/views/2d/layers/WMTSLayerView2D.js
var y = [0, 0];
var _ = class extends i2(r3(S(u))) {
  constructor() {
    super(...arguments), this._tileStrategy = null, this._fetchQueue = null, this.layer = null;
  }
  get tileMatrixSet() {
    const { activeLayer: e2 } = this.layer, { tileMatrixSet: t } = e2;
    if (t && s(t.tileInfo?.spatialReference, this.view.spatialReference)) return t;
    const i3 = this._getTileMatrixSetBySpatialReference(e2);
    return i3 && i3.id !== e2.tileMatrixSetId ? (e2.tileMatrixSetId = i3.id, i3) : null;
  }
  update(e2) {
    this._fetchQueue.pause(), this._fetchQueue.state = e2.state, this._tileStrategy.update(e2), this._fetchQueue.resume();
  }
  attach() {
    const e2 = this.tileMatrixSet?.tileInfo;
    e2 && (this._tileInfoView = new h(e2), this._fetchQueue = new p({ tileInfoView: this._tileInfoView, concurrency: 16, process: (e3, t) => this.fetchTile(e3, t), scheduler: this.scheduler, priority: g.MAPVIEW_FETCH_QUEUE }), this._tileStrategy = new r2({ cachePolicy: "keep", resampling: true, acquireTile: (e3) => this.acquireTile(e3), releaseTile: (e3) => this.releaseTile(e3), tileInfoView: this._tileInfoView }), this.addAttachHandles(this._updatingHandles.add(() => [this.layer?.activeLayer?.styleId, this.tileMatrixSet], () => this.doRefresh())), super.attach());
  }
  detach() {
    super.detach(), this._tileStrategy?.destroy(), this._fetchQueue?.destroy(), this._fetchQueue = this._tileStrategy = this._tileInfoView = null;
  }
  viewChange() {
    this.requestUpdate();
  }
  moveEnd() {
    this.requestUpdate();
  }
  supportsSpatialReference(e2) {
    return this.layer.activeLayer.tileMatrixSets?.some((t) => s(t.tileInfo?.spatialReference, e2)) ?? false;
  }
  async doRefresh() {
    if (this.attached) {
      if (this.suspended) return this._tileStrategy.clear(), void this.requestUpdate();
      this._fetchQueue.reset(), this._tileStrategy.refresh((e2) => this._updatingHandles.addPromise(this._enqueueTileFetch(e2)));
    }
  }
  acquireTile(e2) {
    const t = this._bitmapView.createTile(e2), i3 = t.bitmap;
    return [i3.x, i3.y] = this._tileInfoView.getTileCoords(y, t.key), i3.resolution = this._tileInfoView.getTileResolution(t.key), [i3.width, i3.height] = this._tileInfoView.tileInfo.size, this._updatingHandles.addPromise(this._enqueueTileFetch(t)), this._bitmapView.addChild(t), this.requestUpdate(), t;
  }
  releaseTile(e2) {
    this._fetchQueue.abort(e2.key.id), this._bitmapView.removeChild(e2), e2.once("detach", () => e2.destroy()), this.requestUpdate();
  }
  async fetchTile(e2, t = {}) {
    const s2 = "tilemapCache" in this.layer ? this.layer.tilemapCache : null, { signal: r4, resamplingLevel: a2 = 0 } = t;
    if (!s2) return this._fetchImage(e2, r4);
    const l = new e(0, 0, 0, 0);
    let o;
    try {
      await s2.fetchAvailabilityUpsample(e2.level, e2.row, e2.col, l, { signal: r4 }), o = await this._fetchImage(l, r4);
    } catch (n2) {
      if (b(n2)) throw n2;
      if (a2 < 3) {
        const i3 = this._tileInfoView.getTileParentId(e2.id);
        if (i3) {
          const s3 = new e(i3), r5 = await this.fetchTile(s3, { ...t, resamplingLevel: a2 + 1 });
          return n(this._tileInfoView, r5, s3, e2);
        }
      }
      throw n2;
    }
    return n(this._tileInfoView, o, l, e2);
  }
  canResume() {
    const e2 = super.canResume();
    return e2 ? null !== this.tileMatrixSet : e2;
  }
  async _enqueueTileFetch(e2) {
    if (!this._fetchQueue.has(e2.key.id)) {
      try {
        const t = await this._fetchQueue.push(e2.key);
        e2.bitmap.source = t, e2.bitmap.width = this._tileInfoView.tileInfo.size[0], e2.bitmap.height = this._tileInfoView.tileInfo.size[1], e2.once("attach", () => this.requestUpdate());
      } catch (s2) {
        b(s2) || i.getLogger(this).error(s2);
      }
      this.requestUpdate();
    }
  }
  async _fetchImage(e2, t) {
    return this.layer.fetchImageBitmapTile(e2.level, e2.row, e2.col, { signal: t });
  }
  _getTileMatrixSetBySpatialReference(e2) {
    return e2.tileMatrixSets?.find((e3) => s(e3.tileInfo?.spatialReference, this.view.spatialReference));
  }
};
r([m({ readOnly: true })], _.prototype, "tileMatrixSet", null), _ = r([a("esri.views.2d.layers.WMTSLayerView2D")], _);
var w = _;
export {
  w as default
};
//# sourceMappingURL=WMTSLayerView2D-YU2QDAOJ.js.map
