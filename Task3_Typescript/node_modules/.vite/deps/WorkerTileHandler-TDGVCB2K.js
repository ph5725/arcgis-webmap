import {
  s as s2,
  t as t5
} from "./chunk-JXATTI6K.js";
import {
  o as o4
} from "./chunk-O3AUTEBE.js";
import {
  a as a3,
  c as c3,
  i as i3
} from "./chunk-ORKTLG2L.js";
import {
  O,
  U,
  o as o3,
  t as t3
} from "./chunk-NCPKBH2V.js";
import {
  E,
  I,
  c as c2,
  t as t2
} from "./chunk-S4X4QGA7.js";
import {
  i,
  l as l2,
  m,
  n as n2,
  o,
  p,
  u
} from "./chunk-CF5GNPLI.js";
import "./chunk-5WTH3GBK.js";
import {
  a
} from "./chunk-6DARBDBU.js";
import {
  e
} from "./chunk-GYAK76KG.js";
import {
  C
} from "./chunk-Y2QTREQA.js";
import {
  t as t4
} from "./chunk-OV7XVIQP.js";
import {
  _,
  a as a2,
  d,
  e as e2,
  e2 as e3,
  f,
  h,
  h2,
  i as i2,
  o as o2,
  p as p2,
  r,
  s
} from "./chunk-JQSXFLSD.js";
import "./chunk-KHEIHGIK.js";
import "./chunk-76QJRCNC.js";
import "./chunk-7DRFV7H6.js";
import "./chunk-BZYXFNL4.js";
import "./chunk-RP7FUW55.js";
import "./chunk-TMC6HYGQ.js";
import "./chunk-7FAVUXK2.js";
import "./chunk-IVNFIIVI.js";
import "./chunk-KE3WBZYL.js";
import "./chunk-7BWCD63N.js";
import "./chunk-6KFXWKZZ.js";
import "./chunk-VNTEV3V4.js";
import "./chunk-7Z3AF3B2.js";
import "./chunk-6GWORUT3.js";
import "./chunk-FPSA4NFH.js";
import "./chunk-O5TPFXRT.js";
import "./chunk-Q6XRAGMA.js";
import "./chunk-JUAPMINU.js";
import "./chunk-PK2ZR2SJ.js";
import "./chunk-YFPGM5UE.js";
import "./chunk-OXSERRAR.js";
import "./chunk-7HI4VRVW.js";
import "./chunk-ZX46THLM.js";
import "./chunk-KTUX3OKX.js";
import "./chunk-E3KEUGUG.js";
import {
  t3 as t
} from "./chunk-N3XLUQJI.js";
import "./chunk-JUAD7TJ6.js";
import "./chunk-VHLUKPRH.js";
import "./chunk-5TPMG26T.js";
import "./chunk-3NBBZ43U.js";
import "./chunk-VOLWOTEG.js";
import "./chunk-XTNIDRTB.js";
import "./chunk-FGWIXJQY.js";
import "./chunk-TKYAZCMB.js";
import "./chunk-3TBMFSPB.js";
import "./chunk-PSZLDJJA.js";
import "./chunk-ZWFY3WY5.js";
import "./chunk-LQFTAGIV.js";
import "./chunk-S7IJH524.js";
import {
  b,
  c3 as c,
  n
} from "./chunk-GZ2P4SCJ.js";
import {
  l
} from "./chunk-XWG6QGFK.js";
import "./chunk-GWNLQRNM.js";
import "./chunk-FXKORAMT.js";
import "./chunk-GNMFMITH.js";

// node_modules/@arcgis/core/views/2d/engine/vectorTiles/ScriptUtils.js
function e4(e6) {
  return 746 === e6 || 747 === e6 || !(e6 < 4352) && (e6 >= 12704 && e6 <= 12735 || (e6 >= 12544 && e6 <= 12591 || (e6 >= 65072 && e6 <= 65103 && !(e6 >= 65097 && e6 <= 65103) || (e6 >= 63744 && e6 <= 64255 || (e6 >= 13056 && e6 <= 13311 || (e6 >= 11904 && e6 <= 12031 || (e6 >= 12736 && e6 <= 12783 || (e6 >= 12288 && e6 <= 12351 && !(e6 >= 12296 && e6 <= 12305 || e6 >= 12308 && e6 <= 12319 || 12336 === e6) || (e6 >= 13312 && e6 <= 19903 || (e6 >= 19968 && e6 <= 40959 || (e6 >= 12800 && e6 <= 13055 || (e6 >= 12592 && e6 <= 12687 || (e6 >= 43360 && e6 <= 43391 || (e6 >= 55216 && e6 <= 55295 || (e6 >= 4352 && e6 <= 4607 || (e6 >= 44032 && e6 <= 55215 || (e6 >= 12352 && e6 <= 12447 || (e6 >= 12272 && e6 <= 12287 || (e6 >= 12688 && e6 <= 12703 || (e6 >= 12032 && e6 <= 12255 || (e6 >= 12784 && e6 <= 12799 || (e6 >= 12448 && e6 <= 12543 && 12540 !== e6 || (e6 >= 65280 && e6 <= 65519 && !(65288 === e6 || 65289 === e6 || 65293 === e6 || e6 >= 65306 && e6 <= 65310 || 65339 === e6 || 65341 === e6 || 65343 === e6 || e6 >= 65371 && e6 <= 65503 || 65507 === e6 || e6 >= 65512 && e6 <= 65519) || (e6 >= 65104 && e6 <= 65135 && !(e6 >= 65112 && e6 <= 65118 || e6 >= 65123 && e6 <= 65126) || (e6 >= 5120 && e6 <= 5759 || (e6 >= 6320 && e6 <= 6399 || (e6 >= 65040 && e6 <= 65055 || (e6 >= 19904 && e6 <= 19967 || (e6 >= 40960 && e6 <= 42127 || e6 >= 42128 && e6 <= 42191)))))))))))))))))))))))))))));
}
function c4(e6) {
  return !(e6 < 11904) && (e6 >= 12704 && e6 <= 12735 || (e6 >= 12544 && e6 <= 12591 || (e6 >= 65072 && e6 <= 65103 || (e6 >= 63744 && e6 <= 64255 || (e6 >= 13056 && e6 <= 13311 || (e6 >= 11904 && e6 <= 12031 || (e6 >= 12736 && e6 <= 12783 || (e6 >= 12288 && e6 <= 12351 || (e6 >= 13312 && e6 <= 19903 || (e6 >= 19968 && e6 <= 40959 || (e6 >= 12800 && e6 <= 13055 || (e6 >= 65280 && e6 <= 65519 || (e6 >= 12352 && e6 <= 12447 || (e6 >= 12272 && e6 <= 12287 || (e6 >= 12032 && e6 <= 12255 || (e6 >= 12784 && e6 <= 12799 || (e6 >= 12448 && e6 <= 12543 || (e6 >= 65040 && e6 <= 65055 || (e6 >= 42128 && e6 <= 42191 || e6 >= 40960 && e6 <= 42127)))))))))))))))))));
}
function s3(e6) {
  switch (e6) {
    case 10:
    case 32:
    case 38:
    case 40:
    case 41:
    case 43:
    case 45:
    case 47:
    case 173:
    case 183:
    case 8203:
    case 8208:
    case 8211:
    case 8231:
      return true;
  }
  return false;
}
function a4(e6) {
  switch (e6) {
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 32:
      return true;
  }
  return false;
}

// node_modules/@arcgis/core/views/2d/engine/vectorTiles/TextShaping.js
var c5 = 24;
var h3 = 17;
var l3 = class {
  constructor(t6, e6, i6, o7, s6, c6, h5) {
    this._glyphItems = t6, this._maxWidth = e6, this._lineHeight = i6, this._letterSpacing = o7, this._hAnchor = s6, this._vAnchor = c6, this._justify = h5;
  }
  getShaping(s6, c6, h5) {
    const l5 = this._letterSpacing, n4 = this._lineHeight, a6 = this._justify, r6 = this._maxWidth, m2 = [];
    let f3 = 0, p4 = 0;
    for (const t6 of s6) {
      const e6 = t6.codePointAt(0);
      if (null == e6) continue;
      const o7 = h5 && e4(e6);
      let s7;
      for (const t7 of this._glyphItems) if (s7 = t7[e6], s7) break;
      m2.push({ codePoint: e6, x: f3, y: p4, vertical: o7, glyphMosaicItem: s7 }), s7 && (f3 += s7.metrics.advance + l5);
    }
    let g2 = f3;
    if (r6 > 0) {
      g2 = f3 / Math.max(1, Math.ceil(f3 / r6));
    }
    const y2 = s6.includes("â€‹"), d3 = [], x = m2.length;
    for (let e6 = 0; e6 < x - 1; e6++) {
      const i6 = m2[e6].codePoint, s7 = c4(i6);
      if (s3(i6) || s7) {
        let t6 = 0;
        if (10 === i6) t6 -= 1e4;
        else if (s7 && y2) t6 += 150;
        else {
          40 !== i6 && 65288 !== i6 || (t6 += 50);
          const o7 = m2[e6 + 1].codePoint;
          41 !== o7 && 65289 !== o7 || (t6 += 50);
        }
        d3.push(this._buildBreak(e6 + 1, m2[e6].x, g2, d3, t6, false));
      }
    }
    const u3 = this._optimalBreaks(this._buildBreak(x, f3, g2, d3, 0, true));
    let M = 0;
    const _2 = c6 ? -n4 : n4;
    let I4 = 0;
    for (let t6 = 0; t6 < u3.length; t6++) {
      const i6 = u3[t6];
      let o7 = I4;
      for (; o7 < i6 && a4(m2[o7].codePoint); ) m2[o7].glyphMosaicItem = null, ++o7;
      let s7 = i6 - 1;
      for (; s7 > o7 && a4(m2[s7].codePoint); ) m2[s7].glyphMosaicItem = null, --s7;
      if (o7 <= s7) {
        const t7 = m2[o7].x;
        for (let i7 = o7; i7 <= s7; i7++) m2[i7].x -= t7, m2[i7].y = p4;
        let e6 = m2[s7].x;
        m2[s7].glyphMosaicItem && (e6 += m2[s7].glyphMosaicItem.metrics.advance), M = Math.max(e6, M), a6 && this._applyJustification(m2, o7, s7);
      }
      I4 = i6, p4 += _2;
    }
    if (m2.length > 0) {
      const t6 = u3.length - 1, e6 = (a6 - this._hAnchor) * M;
      let i6 = (-this._vAnchor * (t6 + 1) + 0.5) * n4;
      c6 && t6 && (i6 += t6 * n4);
      for (const o7 of m2) o7.x += e6, o7.y += i6;
    }
    return m2.filter((t6) => t6.glyphMosaicItem);
  }
  static getTextBox(t6, e6) {
    if (!t6.length) return null;
    let i6 = 1 / 0, o7 = 1 / 0, s6 = 0, c6 = 0;
    for (const l5 of t6) {
      const t7 = l5.glyphMosaicItem.metrics.advance, n4 = l5.x, a6 = l5.y - h3, r6 = n4 + t7, m2 = a6 + e6;
      i6 = Math.min(i6, n4), s6 = Math.max(s6, r6), o7 = Math.min(o7, a6), c6 = Math.max(c6, m2);
    }
    return { x: i6, y: o7, width: s6 - i6, height: c6 - o7 };
  }
  static getBox(t6) {
    if (!t6.length) return null;
    let e6 = 1 / 0, i6 = 1 / 0, o7 = 0, s6 = 0;
    for (const c6 of t6) {
      const { height: t7, left: h5, top: l5, width: n4 } = c6.glyphMosaicItem.metrics, a6 = c6.x, r6 = c6.y - (t7 - Math.abs(l5)), m2 = a6 + n4 + h5, f3 = r6 + t7;
      e6 = Math.min(e6, a6), o7 = Math.max(o7, m2), i6 = Math.min(i6, r6), s6 = Math.max(s6, f3);
    }
    return { x: e6, y: i6, width: o7 - e6, height: s6 - i6 };
  }
  static addDecoration(t6, e6) {
    const i6 = t6.length;
    if (0 === i6) return;
    const o7 = 3;
    let c6 = t6[0].x + t6[0].glyphMosaicItem.metrics.left, h5 = t6[0].y;
    for (let n4 = 1; n4 < i6; n4++) {
      const i7 = t6[n4];
      if (i7.y !== h5) {
        const l6 = t6[n4 - 1].x + t6[n4 - 1].glyphMosaicItem.metrics.left + t6[n4 - 1].glyphMosaicItem.metrics.width;
        t6.push({ codePoint: 0, x: c6, y: h5 + e6 - o7, vertical: false, glyphMosaicItem: { sdf: true, rect: new t4(4, 0, 4, 8), metrics: { width: l6 - c6, height: 2 + 2 * o7, left: 0, top: 0, advance: 0 }, page: 0, code: 0 } }), h5 = i7.y, c6 = i7.x + i7.glyphMosaicItem.metrics.left;
      }
    }
    const l5 = t6[i6 - 1].x + t6[i6 - 1].glyphMosaicItem.metrics.left + t6[i6 - 1].glyphMosaicItem.metrics.width;
    t6.push({ codePoint: 0, x: c6, y: h5 + e6 - o7, vertical: false, glyphMosaicItem: { sdf: true, rect: new t4(4, 0, 4, 8), metrics: { width: l5 - c6, height: 2 + 2 * o7, left: 0, top: 0, advance: 0 }, page: 0, code: 0 } });
  }
  _breakScore(t6, e6, i6, o7) {
    const s6 = (t6 - e6) * (t6 - e6);
    return o7 ? t6 < e6 ? s6 / 2 : 2 * s6 : s6 + Math.abs(i6) * i6;
  }
  _buildBreak(t6, e6, i6, o7, s6, c6) {
    let h5 = null, l5 = this._breakScore(e6, i6, s6, c6);
    for (const n4 of o7) {
      const t7 = e6 - n4.x, o8 = this._breakScore(t7, i6, s6, c6) + n4.score;
      o8 <= l5 && (h5 = n4, l5 = o8);
    }
    return { index: t6, x: e6, score: l5, previousBreak: h5 };
  }
  _optimalBreaks(t6) {
    return t6 ? this._optimalBreaks(t6.previousBreak).concat(t6.index) : [];
  }
  _applyJustification(t6, e6, i6) {
    const o7 = t6[i6], s6 = o7.vertical ? c5 : o7.glyphMosaicItem ? o7.glyphMosaicItem.metrics.advance : 0, h5 = (o7.x + s6) * this._justify;
    for (let c6 = e6; c6 <= i6; c6++) t6[c6].x -= h5;
  }
};

// node_modules/@arcgis/core/views/2d/engine/vectorTiles/Placement.js
var d2 = 0.5;
var p3 = 2;
var w = class {
  constructor(e6, t6, i6 = 0, n4 = -1, s6 = d2) {
    this.x = e6, this.y = t6, this.angle = i6, this.segment = n4, this.minzoom = s6;
  }
};
var T = class {
  constructor(e6, t6, i6, n4, o7, a6 = d2, l5 = r) {
    this.anchor = e6, this.labelAngle = t6, this.glyphAngle = i6, this.page = n4, this.alternateVerticalGlyph = o7, this.minzoom = a6, this.maxzoom = l5;
  }
};
var y = class {
  constructor(e6, t6, i6, n4, s6, o7, a6, l5, h5, r6, c6, g2) {
    this.tl = e6, this.tr = t6, this.bl = i6, this.br = n4, this.mosaicRect = s6, this.labelAngle = o7, this.minAngle = a6, this.maxAngle = l5, this.anchor = h5, this.minzoom = r6, this.maxzoom = c6, this.page = g2;
  }
};
var f2 = class {
  constructor(e6) {
    this.shapes = e6;
  }
};
var I2 = class {
  getIconPlacement(t6, s6, o7) {
    const a6 = new h(t6.x, t6.y), l5 = o7.rotationAlignment === l2.MAP, h5 = o7.keepUpright;
    let r6 = o7.rotate * s;
    l5 && (r6 += t6.angle);
    const c6 = new f2([]);
    return o7.allowOverlap && o7.ignorePlacement || !o4 || (c6.iconColliders = []), this._addIconPlacement(c6, a6, s6, o7, r6), l5 && h5 && this._addIconPlacement(c6, a6, s6, o7, r6 + o2), c6;
  }
  _addIconPlacement(t6, i6, n4, o7, a6) {
    const l5 = n4.rasterizationScale, h5 = n4.width / l5, r6 = n4.height / l5, c6 = o7.offset;
    let m2 = c6[0], p4 = c6[1];
    switch (o7.anchor) {
      case m.CENTER:
        m2 -= h5 / 2, p4 -= r6 / 2;
        break;
      case m.LEFT:
        p4 -= r6 / 2;
        break;
      case m.RIGHT:
        m2 -= h5, p4 -= r6 / 2;
        break;
      case m.TOP:
        m2 -= h5 / 2;
        break;
      case m.BOTTOM:
        m2 -= h5 / 2, p4 -= r6;
        break;
      case m.TOP_LEFT:
        break;
      case m.BOTTOM_LEFT:
        p4 -= r6;
        break;
      case m.TOP_RIGHT:
        m2 -= h5;
        break;
      case m.BOTTOM_RIGHT:
        m2 -= h5, p4 -= r6;
    }
    const w2 = n4.rect, T2 = 2 / l5, f3 = m2 - T2, I4 = p4 - T2, u3 = f3 + w2.width / l5, b3 = I4 + w2.height / l5, P = new h(f3, I4), O2 = new h(u3, b3), _2 = new h(f3, b3), k = new h(u3, I4);
    if (0 !== a6) {
      const e6 = Math.cos(a6), t7 = Math.sin(a6);
      P.rotate(e6, t7), O2.rotate(e6, t7), _2.rotate(e6, t7), k.rotate(e6, t7);
    }
    const M = new y(P, k, _2, O2, w2, a6, 0, 256, i6, d2, r, 0);
    if (t6.shapes.push(M), (!o7.allowOverlap || !o7.ignorePlacement) && o4) {
      const e6 = o7.size, n5 = o7.padding, l6 = { xTile: i6.x, yTile: i6.y, dxPixels: m2 * e6 - n5, dyPixels: p4 * e6 - n5, hard: !o7.optional, partIndex: 0, width: h5 * e6 + 2 * n5, height: r6 * e6 + 2 * n5, angle: a6, minLod: d2, maxLod: r };
      t6.iconColliders.push(l6);
    }
  }
  getTextPlacement(o7, a6, l5, g2) {
    const w2 = new h(o7.x, o7.y), I4 = g2.rotate * s, u3 = g2.rotationAlignment === l2.MAP, b3 = g2.keepUpright, P = g2.padding;
    let O2 = d2;
    const _2 = !u3 ? 0 : o7.angle, k = o7.segment >= 0 && u3, M = g2.allowOverlap && g2.ignorePlacement ? null : [], E2 = [], G = 4, N = !k;
    let A2 = Number.POSITIVE_INFINITY, L2 = Number.NEGATIVE_INFINITY, z = A2, F = L2;
    const v = (k || u3) && b3, R = g2.size / c5;
    let B = false;
    for (const e6 of a6) if (e6.vertical) {
      B = true;
      break;
    }
    let H, V = 0, j = 0;
    if (!k && B) {
      const e6 = l3.getTextBox(a6, g2.lineHeight * c5);
      switch (g2.anchor) {
        case m.LEFT:
          V = e6.height / 2, j = -e6.width / 2;
          break;
        case m.RIGHT:
          V = -e6.height / 2, j = e6.width / 2;
          break;
        case m.TOP:
          V = e6.height / 2, j = e6.width / 2;
          break;
        case m.BOTTOM:
          V = -e6.height / 2, j = -e6.width / 2;
          break;
        case m.TOP_LEFT:
          V = e6.height;
          break;
        case m.BOTTOM_LEFT:
          j = -e6.width;
          break;
        case m.TOP_RIGHT:
          j = e6.width;
          break;
        case m.BOTTOM_RIGHT:
          V = -e6.height;
      }
    }
    V += g2.offset[0] * c5, j += g2.offset[1] * c5;
    for (const i6 of a6) {
      const a7 = i6.glyphMosaicItem;
      if (!a7 || a7.rect.isEmpty) continue;
      const h5 = a7.rect, r6 = a7.metrics, m2 = a7.page;
      if (M && N) {
        if (void 0 !== H && H !== i6.y) {
          let e6, t6, i7, n4;
          B ? (e6 = -F + V, t6 = A2 + j, i7 = F - z, n4 = L2 - A2) : (e6 = A2 + V, t6 = z + j, i7 = L2 - A2, n4 = F - z);
          const a8 = { xTile: o7.x, yTile: o7.y, dxPixels: e6 * R - P, dyPixels: t6 * R - P, hard: !g2.optional, partIndex: 1, width: i7 * R + 2 * P, height: n4 * R + 2 * P, angle: I4, minLod: d2, maxLod: r };
          M.push(a8), A2 = Number.POSITIVE_INFINITY, L2 = Number.NEGATIVE_INFINITY, z = A2, F = L2;
        }
        H = i6.y;
      }
      const x = [];
      if (k) {
        const e6 = 0.5 * a7.metrics.width, n4 = (i6.x + r6.left - G + e6) * R * c2;
        if (O2 = this._placeGlyph(o7, O2, n4, l5, o7.segment, 1, i6.vertical, m2, x), b3 && (O2 = this._placeGlyph(o7, O2, n4, l5, o7.segment, -1, i6.vertical, m2, x)), O2 >= p3) break;
      } else x.push(new T(w2, _2, _2, m2, false)), u3 && b3 && x.push(new T(w2, _2 + o2, _2 + o2, m2, false));
      const f3 = i6.x + r6.left, C3 = i6.y - h3 - r6.top, S = f3 + r6.width, Y = C3 + r6.height;
      let q, U2, D, J, K, Q, W, X;
      if (!k && B) if (i6.vertical) {
        const t6 = (f3 + S) / 2 - r6.height / 2, i7 = (C3 + Y) / 2 + r6.width / 2;
        q = new h(-i7 - G + V, t6 - G + j), U2 = new h(q.x + h5.width, q.y + h5.height), D = new h(q.x, U2.y), J = new h(U2.x, q.y);
      } else q = new h(-C3 + G + V, f3 - G + j), U2 = new h(q.x - h5.height, q.y + h5.width), D = new h(U2.x, q.y), J = new h(q.x, U2.y);
      else q = new h(f3 - G + V, C3 - G + j), U2 = new h(q.x + h5.width, q.y + h5.height), D = new h(q.x, U2.y), J = new h(U2.x, q.y);
      for (const t6 of x) {
        let n4, s6, a8, l6;
        if (t6.alternateVerticalGlyph) {
          if (!K) {
            const t7 = (C3 + Y) / 2 + j;
            K = new h((f3 + S) / 2 + V - r6.height / 2 - G, t7 + r6.width / 2 + G), Q = new h(K.x + h5.height, K.y - h5.width), W = new h(Q.x, K.y), X = new h(K.x, Q.y);
          }
          n4 = K, s6 = W, a8 = X, l6 = Q;
        } else n4 = q, s6 = D, a8 = J, l6 = U2;
        const c6 = C3, m3 = Y, x2 = t6.glyphAngle + I4;
        if (0 !== x2) {
          const e6 = Math.cos(x2), t7 = Math.sin(x2);
          n4 = n4.clone(), s6 = s6?.clone(), a8 = a8?.clone(), l6 = l6?.clone(), n4.rotate(e6, t7), l6?.rotate(e6, t7), s6?.rotate(e6, t7), a8?.rotate(e6, t7);
        }
        let d3 = 0, w3 = 256;
        if (k && B ? i6.vertical ? t6.alternateVerticalGlyph ? (d3 = 32, w3 = 96) : (d3 = 224, w3 = 32) : (d3 = 224, w3 = 96) : (d3 = 192, w3 = 64), E2.push(new y(n4, a8, s6, l6, h5, t6.labelAngle, d3, w3, t6.anchor, t6.minzoom, t6.maxzoom, t6.page)), M && (!v || this._legible(t6.labelAngle))) {
          if (N) f3 < A2 && (A2 = f3), c6 < z && (z = c6), S > L2 && (L2 = S), m3 > F && (F = m3);
          else if (t6.minzoom < p3) {
            const e6 = { xTile: o7.x, yTile: o7.y, dxPixels: (f3 + V) * R - P, dyPixels: (c6 + V) * R - P, hard: !g2.optional, partIndex: 1, width: (S - f3) * R + 2 * P, height: (m3 - c6) * R + 2 * P, angle: x2, minLod: t6.minzoom, maxLod: t6.maxzoom };
            M.push(e6);
          }
        }
      }
    }
    if (O2 >= p3) return null;
    if (M && N) {
      let e6, t6, i6, n4;
      B ? (e6 = -F + V, t6 = A2 + j, i6 = F - z, n4 = L2 - A2) : (e6 = A2 + V, t6 = z + j, i6 = L2 - A2, n4 = F - z);
      const a7 = { xTile: o7.x, yTile: o7.y, dxPixels: e6 * R - P, dyPixels: t6 * R - P, hard: !g2.optional, partIndex: 1, width: i6 * R + 2 * P, height: n4 * R + 2 * P, angle: I4, minLod: d2, maxLod: r };
      M.push(a7);
    }
    const C2 = new f2(E2);
    return M && M.length > 0 && (C2.textColliders = M), C2;
  }
  _legible(e6) {
    const t6 = f(e6);
    return t6 < 65 || t6 >= 193;
  }
  _placeGlyph(t6, i6, a6, h5, r6, c6, g2, m2, x) {
    let d3 = c6;
    const p4 = d3 < 0 ? a2(t6.angle + o2, e3) : t6.angle;
    let w2 = 0;
    a6 < 0 && (d3 *= -1, a6 *= -1, w2 = o2), d3 > 0 && ++r6;
    let y2 = new h(t6.x, t6.y), f3 = h5[r6], I4 = r;
    if (h5.length <= r6) return I4;
    for (; ; ) {
      const e6 = f3.x - y2.x, t7 = f3.y - y2.y, n4 = Math.sqrt(e6 * e6 + t7 * t7), s6 = Math.max(a6 / n4, i6), c7 = e6 / n4, u3 = t7 / n4, b3 = a2(Math.atan2(u3, c7) + w2, e3);
      if (x.push(new T(y2, p4, b3, m2, false, s6, I4)), g2 && x.push(new T(y2, p4, b3, m2, true, s6, I4)), s6 <= i6) return s6;
      y2 = f3.clone();
      do {
        if (r6 += d3, h5.length <= r6 || r6 < 0) return s6;
        f3 = h5[r6];
      } while (y2.isEqual(f3));
      let P = f3.x - y2.x, O2 = f3.y - y2.y;
      const _2 = Math.sqrt(P * P + O2 * O2);
      P *= n4 / _2, O2 *= n4 / _2, y2.x -= P, y2.y -= O2, I4 = s6;
    }
  }
};

// node_modules/@arcgis/core/views/2d/engine/vectorTiles/IndexMemoryBuffer.js
var r2 = class extends t3 {
  constructor() {
    super(12);
  }
  add(s6, r6, t6) {
    const e6 = this.array;
    e6.push(s6), e6.push(r6), e6.push(t6);
  }
};

// node_modules/@arcgis/core/views/2d/engine/vectorTiles/VertexMemoryBuffer.js
var o5 = class extends t3 {
  constructor(t6) {
    super(t6);
  }
  add(t6, o7, r6, u3, h5, a6, n4, d3, e6, p4, i6, c6) {
    const M = this.array;
    let l5 = t3.i1616to32(t6, o7);
    M.push(l5);
    const m2 = 31;
    l5 = t3.i8888to32(Math.round(m2 * r6), Math.round(m2 * u3), Math.round(m2 * h5), Math.round(m2 * a6)), M.push(l5), l5 = t3.i8888to32(Math.round(m2 * n4), Math.round(m2 * d3), Math.round(m2 * e6), Math.round(m2 * p4)), M.push(l5), l5 = t3.i1616to32(i6, 0), M.push(l5), c6 && M.push(...c6);
  }
};
var r3 = class extends t3 {
  constructor(t6) {
    super(t6);
  }
  add(t6, o7, r6) {
    const u3 = this.array;
    u3.push(t3.i1616to32(t6, o7)), r6 && u3.push(...r6);
  }
};
var u2 = class extends t3 {
  constructor(t6) {
    super(t6);
  }
  add(t6, o7, r6, u3, h5, a6, n4) {
    const d3 = this.array, e6 = this.index;
    let p4 = t3.i1616to32(t6, o7);
    d3.push(p4);
    const i6 = 15;
    return p4 = t3.i8888to32(Math.round(i6 * r6), Math.round(i6 * u3), h5, a6), d3.push(p4), n4 && d3.push(...n4), e6;
  }
};
var h4 = class extends t3 {
  constructor(t6) {
    super(t6);
  }
  add(o7, r6, u3, h5, a6, n4, d3, e6, p4, i6, c6, M) {
    const l5 = this.array;
    let m2 = t3.i1616to32(o7, r6);
    l5.push(m2), m2 = t3.i1616to32(Math.round(8 * u3), Math.round(8 * h5)), l5.push(m2), m2 = t3.i8888to32(a6 / 4, n4 / 4, e6, p4), l5.push(m2), m2 = t3.i8888to32(0, f(d3), 10 * i6, Math.min(10 * c6, 255)), l5.push(m2), M && l5.push(...M);
  }
};
var a5 = class extends t3 {
  constructor(t6) {
    super(t6);
  }
  add(t6, o7, r6, u3, h5) {
    const a6 = this.array, n4 = t3.i1616to32(2 * t6 + r6, 2 * o7 + u3);
    a6.push(n4), h5 && a6.push(...h5);
  }
};

// node_modules/@arcgis/core/views/2d/engine/vectorTiles/buckets/BaseBucket.js
var e5 = class {
  constructor(e6, s6, r6) {
    this.layerExtent = t2, this._features = [], this.layer = e6, this.zoom = s6, this._spriteInfo = r6, this._filter = e6.getFeatureFilter();
  }
  pushFeature(t6) {
    this._filter && !this._filter.filter(t6, this.zoom) || this._features.push(t6);
  }
  hasFeatures() {
    return this._features.length > 0;
  }
  getResources(t6, e6, s6) {
  }
};

// node_modules/@arcgis/core/views/2d/engine/vectorTiles/buckets/CircleBucket.js
var r4 = class extends e5 {
  constructor(t6, r6, i6, c6, s6) {
    super(t6, r6, i6), this.type = E.CIRCLE, this._circleVertexBuffer = c6, this._circleIndexBuffer = s6;
  }
  get circleIndexStart() {
    return this._circleIndexStart;
  }
  get circleIndexCount() {
    return this._circleIndexCount;
  }
  processFeatures(e6) {
    const t6 = this._circleVertexBuffer, r6 = this._circleIndexBuffer;
    this._circleIndexStart = 3 * r6.index, this._circleIndexCount = 0;
    const i6 = this.layer, c6 = this.zoom;
    e6 && e6.setExtent(this.layerExtent);
    for (const s6 of this._features) {
      const n4 = s6.getGeometry(e6);
      if (!n4) continue;
      const l5 = i6.circleMaterial.encodeAttributes(s6, c6, i6);
      for (const e7 of n4) if (e7) for (const i7 of e7) {
        const e8 = t6.index;
        t6.add(i7.x, i7.y, 0, 0, l5), t6.add(i7.x, i7.y, 0, 1, l5), t6.add(i7.x, i7.y, 1, 0, l5), t6.add(i7.x, i7.y, 1, 1, l5), r6.add(e8, e8 + 1, e8 + 2), r6.add(e8 + 1, e8 + 2, e8 + 3), this._circleIndexCount += 6;
      }
    }
  }
  serialize() {
    let e6 = 6;
    e6 += this.layerUIDs.length, e6 += this._circleVertexBuffer.array.length, e6 += this._circleIndexBuffer.array.length;
    const t6 = new Uint32Array(e6), r6 = new Int32Array(t6.buffer);
    let i6 = 0;
    t6[i6++] = this.type, t6[i6++] = this.layerUIDs.length;
    for (let c6 = 0; c6 < this.layerUIDs.length; c6++) t6[i6++] = this.layerUIDs[c6];
    t6[i6++] = this._circleIndexStart, t6[i6++] = this._circleIndexCount, t6[i6++] = this._circleVertexBuffer.array.length;
    for (let c6 = 0; c6 < this._circleVertexBuffer.array.length; c6++) r6[i6++] = this._circleVertexBuffer.array[c6];
    t6[i6++] = this._circleIndexBuffer.array.length;
    for (let c6 = 0; c6 < this._circleIndexBuffer.array.length; c6++) t6[i6++] = this._circleIndexBuffer.array[c6];
    return t6.buffer;
  }
};

// node_modules/@arcgis/core/views/2d/engine/vectorTiles/buckets/FillBucket.js
var s4 = class _s extends e5 {
  constructor(t6, e6, i6, r6, n4, s6, o7) {
    super(t6, e6, i6), this.type = E.FILL, this._patternMap = /* @__PURE__ */ new Map(), this._fillVertexBuffer = r6, this._fillIndexBuffer = n4, this._outlineVertexBuffer = s6, this._outlineIndexBuffer = o7;
  }
  get fillIndexStart() {
    return this._fillIndexStart;
  }
  get fillIndexCount() {
    return this._fillIndexCount;
  }
  get outlineIndexStart() {
    return this._outlineIndexStart;
  }
  get outlineIndexCount() {
    return this._outlineIndexCount;
  }
  getResources(t6, e6, i6) {
    const r6 = this.layer, l5 = this.zoom, n4 = r6.getPaintProperty("fill-pattern");
    if (n4) if (n4.isDataDriven) for (const s6 of this._features) e6(n4.getValue(l5, s6), true);
    else e6(n4.getValue(l5), true);
  }
  processFeatures(t6) {
    this._fillIndexStart = 3 * this._fillIndexBuffer.index, this._fillIndexCount = 0, this._outlineIndexStart = 3 * this._outlineIndexBuffer.index, this._outlineIndexCount = 0;
    const e6 = this.layer, i6 = this.zoom, { fillMaterial: r6, outlineMaterial: l5, hasDataDrivenFill: n4, hasDataDrivenOutline: s6 } = e6;
    t6 && t6.setExtent(this.layerExtent);
    const o7 = e6.getPaintProperty("fill-pattern"), a6 = o7?.isDataDriven;
    let f3 = !o7 && e6.getPaintValue("fill-antialias", i6);
    if (e6.outlineUsesFillColor) {
      if (f3 && !e6.hasDataDrivenOpacity) {
        const t7 = e6.getPaintValue("fill-opacity", i6), r7 = e6.getPaintValue("fill-opacity", i6 + 1);
        t7 < 1 && r7 < 1 && (f3 = false);
      }
      if (f3 && !e6.hasDataDrivenColor) {
        const t7 = e6.getPaintValue("fill-color", i6), r7 = e6.getPaintValue("fill-color", i6 + 1);
        t7[3] < 1 && r7[3] < 1 && (f3 = false);
      }
    }
    const u3 = this._features, d3 = t6?.validateTessellation;
    if (a6) {
      const n5 = [];
      for (const a7 of u3) {
        const u4 = o7.getValue(i6, a7), h5 = this._spriteInfo[u4];
        if (!h5?.rect) continue;
        const x = r6.encodeAttributes(a7, i6, e6, h5), c6 = f3 && s6 ? l5.encodeAttributes(a7, i6, e6) : [], _2 = a7.getGeometry(t6);
        n5.push({ ddFillAttributes: x, ddOutlineAttributes: c6, page: h5.page, geometry: _2 }), n5.sort((t7, e7) => t7.page - e7.page);
        for (const { ddFillAttributes: t7, ddOutlineAttributes: i7, page: r7, geometry: l6 } of n5) this._processFeature(l6, f3, e6.outlineUsesFillColor, t7, i7, d3, r7);
      }
    } else for (const h5 of u3) {
      const o8 = n4 ? r6.encodeAttributes(h5, i6, e6) : null, a7 = f3 && s6 ? l5.encodeAttributes(h5, i6, e6) : null, u4 = h5.getGeometry(t6);
      this._processFeature(u4, f3, e6.outlineUsesFillColor, o8, a7, d3);
    }
  }
  serialize() {
    let t6 = 10;
    t6 += this.layerUIDs.length, t6 += this._fillVertexBuffer.array.length, t6 += this._fillIndexBuffer.array.length, t6 += this._outlineVertexBuffer.array.length, t6 += this._outlineIndexBuffer.array.length, t6 += 3 * this._patternMap.size + 1;
    const e6 = new Uint32Array(t6), i6 = new Int32Array(e6.buffer);
    let r6 = 0;
    e6[r6++] = this.type, e6[r6++] = this.layerUIDs.length;
    for (let s6 = 0; s6 < this.layerUIDs.length; s6++) e6[r6++] = this.layerUIDs[s6];
    e6[r6++] = this._fillIndexStart, e6[r6++] = this._fillIndexCount, e6[r6++] = this._outlineIndexStart, e6[r6++] = this._outlineIndexCount;
    const l5 = this._patternMap, n4 = l5.size;
    if (e6[r6++] = n4, n4 > 0) for (const [s6, [o7, a6]] of l5) e6[r6++] = s6, e6[r6++] = o7, e6[r6++] = a6;
    e6[r6++] = this._fillVertexBuffer.array.length;
    for (let s6 = 0; s6 < this._fillVertexBuffer.array.length; s6++) i6[r6++] = this._fillVertexBuffer.array[s6];
    e6[r6++] = this._fillIndexBuffer.array.length;
    for (let s6 = 0; s6 < this._fillIndexBuffer.array.length; s6++) e6[r6++] = this._fillIndexBuffer.array[s6];
    e6[r6++] = this._outlineVertexBuffer.array.length;
    for (let s6 = 0; s6 < this._outlineVertexBuffer.array.length; s6++) i6[r6++] = this._outlineVertexBuffer.array[s6];
    e6[r6++] = this._outlineIndexBuffer.array.length;
    for (let s6 = 0; s6 < this._outlineIndexBuffer.array.length; s6++) e6[r6++] = this._outlineIndexBuffer.array[s6];
    return e6.buffer;
  }
  _processFeature(t6, e6, i6, r6, l5, n4, o7) {
    if (!t6) return;
    const a6 = t6.length, f3 = !l5 || 0 === l5.length;
    if (e6 && (!i6 || f3)) for (let s6 = 0; s6 < a6; s6++) this._processOutline(t6[s6], l5);
    const u3 = 32;
    let d3;
    for (let h5 = 0; h5 < a6; h5++) {
      const e7 = _s._area(t6[h5]);
      e7 > u3 ? (void 0 !== d3 && this._processFill(t6, d3, r6, n4, o7), d3 = [h5]) : e7 < -32 && void 0 !== d3 && d3.push(h5);
    }
    void 0 !== d3 && this._processFill(t6, d3, r6, n4, o7);
  }
  _processOutline(t6, e6) {
    const i6 = this._outlineVertexBuffer, l5 = this._outlineIndexBuffer, n4 = l5.index;
    let s6, o7, a6;
    const f3 = new h(0, 0), u3 = new h(0, 0), d3 = new h(0, 0);
    let h5 = -1, x = -1, c6 = -1, _2 = -1, y2 = -1, g2 = false;
    const p4 = 0;
    let I4 = t6.length;
    if (I4 < 2) return;
    const B = t6[p4];
    let m2 = t6[I4 - 1];
    for (; I4 && m2.isEqual(B); ) --I4, m2 = t6[I4 - 1];
    if (!(I4 - p4 < 2)) {
      for (let r6 = p4; r6 < I4; ++r6) {
        r6 === p4 ? (s6 = t6[I4 - 1], o7 = t6[p4], a6 = t6[p4 + 1], f3.assignSub(o7, s6), f3.normalize(), f3.rightPerpendicular()) : (s6 = o7, o7 = a6, a6 = r6 !== I4 - 1 ? t6[r6 + 1] : t6[p4], f3.assign(u3));
        const n5 = this._isClipEdge(s6, o7);
        -1 === _2 && (g2 = n5), u3.assignSub(a6, o7), u3.normalize(), u3.rightPerpendicular();
        const B2 = f3.x * u3.y - f3.y * u3.x;
        d3.assignAdd(f3, u3), d3.normalize();
        const m3 = -d3.x * -f3.x + -d3.y * -f3.y;
        let V = Math.abs(0 !== m3 ? 1 / m3 : 1);
        V > 8 && (V = 8), B2 >= 0 ? (c6 = i6.add(o7.x, o7.y, f3.x, f3.y, 0, 1, e6), -1 === _2 && (_2 = c6), h5 >= 0 && x >= 0 && c6 >= 0 && !n5 && l5.add(h5, x, c6), x = i6.add(o7.x, o7.y, V * -d3.x, V * -d3.y, 0, -1, e6), -1 === y2 && (y2 = x), h5 >= 0 && x >= 0 && c6 >= 0 && !n5 && l5.add(h5, x, c6), h5 = x, x = c6, c6 = i6.add(o7.x, o7.y, d3.x, d3.y, 0, 1, e6), h5 >= 0 && x >= 0 && c6 >= 0 && !n5 && l5.add(h5, x, c6), x = i6.add(o7.x, o7.y, u3.x, u3.y, 0, 1, e6), h5 >= 0 && x >= 0 && c6 >= 0 && !n5 && l5.add(h5, x, c6)) : (c6 = i6.add(o7.x, o7.y, V * d3.x, V * d3.y, 0, 1, e6), -1 === _2 && (_2 = c6), h5 >= 0 && x >= 0 && c6 >= 0 && !n5 && l5.add(h5, x, c6), x = i6.add(o7.x, o7.y, -f3.x, -f3.y, 0, -1, e6), -1 === y2 && (y2 = x), h5 >= 0 && x >= 0 && c6 >= 0 && !n5 && l5.add(h5, x, c6), h5 = x, x = c6, c6 = i6.add(o7.x, o7.y, -d3.x, -d3.y, 0, -1, e6), h5 >= 0 && x >= 0 && c6 >= 0 && !n5 && l5.add(h5, x, c6), h5 = i6.add(o7.x, o7.y, -u3.x, -u3.y, 0, -1, e6), h5 >= 0 && x >= 0 && c6 >= 0 && !n5 && l5.add(h5, x, c6));
      }
      h5 >= 0 && x >= 0 && _2 >= 0 && !g2 && l5.add(h5, x, _2), h5 >= 0 && _2 >= 0 && y2 >= 0 && !g2 && l5.add(h5, y2, _2), this._outlineIndexCount += 3 * (l5.index - n4);
    }
  }
  _processFill(r6, l5, n4, s6, o7) {
    s6 = true;
    let a6;
    l5.length > 1 && (a6 = []);
    let f3 = 0;
    for (const t6 of l5) 0 !== f3 && a6.push(f3), f3 += r6[t6].length;
    const u3 = 2 * f3, d3 = t.acquire();
    for (const t6 of l5) {
      const e6 = r6[t6], i6 = e6.length;
      for (let t7 = 0; t7 < i6; ++t7) d3.push(e6[t7].x, e6[t7].y);
    }
    const h5 = e(d3, a6, 2);
    if (s6 && e.deviation(d3, a6, 2, h5) > 0) {
      const t6 = l5.map((t7) => r6[t7].length), { buffer: e6, vertexCount: s7 } = a3(d3, t6);
      if (s7 > 0) {
        const t7 = this._fillVertexBuffer.index;
        for (let i6 = 0; i6 < s7; i6++) this._fillVertexBuffer.add(e6[2 * i6], e6[2 * i6 + 1], n4);
        for (let e7 = 0; e7 < s7; e7 += 3) {
          const i6 = t7 + e7;
          this._fillIndexBuffer.add(i6, i6 + 1, i6 + 2);
        }
        if (void 0 !== o7) {
          const t8 = this._patternMap, e7 = t8.get(o7);
          e7 ? e7[1] += s7 : t8.set(o7, [this._fillIndexStart + this._fillIndexCount, s7]);
        }
        this._fillIndexCount += s7;
      }
    } else {
      const t6 = h5.length;
      if (t6 > 0) {
        const e6 = this._fillVertexBuffer.index;
        let i6 = 0;
        for (; i6 < u3; ) this._fillVertexBuffer.add(d3[i6++], d3[i6++], n4);
        let r7 = 0;
        for (; r7 < t6; ) this._fillIndexBuffer.add(e6 + h5[r7++], e6 + h5[r7++], e6 + h5[r7++]);
        if (void 0 !== o7) {
          const e7 = this._patternMap, i7 = e7.get(o7);
          i7 ? i7[1] += t6 : e7.set(o7, [this._fillIndexStart + this._fillIndexCount, t6]);
        }
        this._fillIndexCount += t6;
      }
    }
    t.release(d3);
  }
  _isClipEdge(t6, e6) {
    return t6.x === e6.x ? t6.x <= -64 || t6.x >= 4160 : t6.y === e6.y && (t6.y <= -64 || t6.y >= 4160);
  }
  static _area(t6) {
    let e6 = 0;
    const i6 = t6.length - 1;
    for (let r6 = 0; r6 < i6; r6++) e6 += (t6[r6].x - t6[r6 + 1].x) * (t6[r6].y + t6[r6 + 1].y);
    return e6 += (t6[i6].x - t6[0].x) * (t6[i6].y + t6[0].y), 0.5 * e6;
  }
};

// node_modules/@arcgis/core/views/2d/engine/vectorTiles/buckets/LineBucket.js
var s5 = 65535;
var n3 = class extends e5 {
  constructor(t6, s6, n4, a6, o7) {
    super(t6, s6, n4), this.type = E.LINE, this._tessellationOptions = { pixelCoordRatio: 8, halfWidth: 0, offset: 0 }, this._patternMap = /* @__PURE__ */ new Map(), this.tessellationProperties = { _lineVertexBuffer: null, _lineIndexBuffer: null, _ddValues: null }, this.tessellationProperties._lineVertexBuffer = a6, this.tessellationProperties._lineIndexBuffer = o7, this._lineTessellator = new c3(r5(this.tessellationProperties), l4(this.tessellationProperties), t6.canUseThinTessellation);
  }
  get lineIndexStart() {
    return this._lineIndexStart;
  }
  get lineIndexCount() {
    return this._lineIndexCount;
  }
  getResources(e6, t6, i6) {
    const s6 = this.layer, n4 = this.zoom, r6 = s6.getPaintProperty("line-pattern"), l5 = s6.getPaintProperty("line-dasharray"), a6 = s6.getLayoutProperty("line-cap");
    if (!r6 && !l5) return;
    const o7 = a6?.getValue(n4) || 0, u3 = a6?.isDataDriven, f3 = r6?.isDataDriven, h5 = l5?.isDataDriven;
    if (f3 || h5) for (const p4 of this._features) t6(f3 ? r6.getValue(n4, p4) : this._getDashArrayKey(p4, n4, s6, l5, u3, a6, o7));
    else if (r6) t6(r6.getValue(n4));
    else if (l5) {
      const e7 = l5.getValue(n4);
      t6(s6.getDashKey(e7, o7));
    }
  }
  processFeatures(e6) {
    this._lineIndexStart = 3 * this.tessellationProperties._lineIndexBuffer.index, this._lineIndexCount = 0;
    const t6 = this.layer, i6 = this.zoom, s6 = this._features, n4 = this._tessellationOptions, { hasDataDrivenLine: r6, lineMaterial: l5 } = t6;
    e6 && e6.setExtent(this.layerExtent);
    const a6 = t6.getPaintProperty("line-pattern"), o7 = t6.getPaintProperty("line-dasharray"), u3 = a6?.isDataDriven, f3 = o7?.isDataDriven;
    let h5;
    h5 = t6.getLayoutProperty("line-cap");
    const p4 = h5?.isDataDriven ? h5 : null, g2 = p4 ? null : t6.getLayoutValue("line-cap", i6), y2 = g2 || 0, d3 = !!p4;
    h5 = t6.getLayoutProperty("line-join");
    const c6 = h5?.isDataDriven ? h5 : null, _2 = c6 ? null : t6.getLayoutValue("line-join", i6);
    h5 = t6.getLayoutProperty("line-miter-limit");
    const x = h5?.isDataDriven ? h5 : null, V = x ? null : t6.getLayoutValue("line-miter-limit", i6);
    h5 = t6.getLayoutProperty("line-round-limit");
    const m2 = h5?.isDataDriven ? h5 : null, D = m2 ? null : t6.getLayoutValue("line-round-limit", i6);
    h5 = t6.getPaintProperty("line-width");
    const P = h5?.isDataDriven ? h5 : null, I4 = P ? null : t6.getPaintValue("line-width", i6);
    h5 = t6.getPaintProperty("line-offset");
    const L2 = h5?.isDataDriven ? h5 : null, B = L2 ? null : t6.getPaintValue("line-offset", i6);
    if (u3 || f3) {
      const r7 = [];
      for (const n5 of s6) {
        const s7 = u3 ? a6.getValue(i6, n5) : this._getDashArrayKey(n5, i6, t6, o7, d3, p4, y2), f4 = this._spriteInfo[s7];
        if (!f4?.rect) continue;
        const h6 = l5.encodeAttributes(n5, i6, t6, f4), v = n5.getGeometry(e6);
        r7.push({ ddAttributes: h6, page: f4.page, cap: p4 ? p4.getValue(i6, n5) : g2, join: c6 ? c6.getValue(i6, n5) : _2, miterLimit: x ? x.getValue(i6, n5) : V, roundLimit: m2 ? m2.getValue(i6, n5) : D, halfWidth: 0.5 * (P ? P.getValue(i6, n5) : I4), offset: L2 ? L2.getValue(i6, n5) : B, geometry: v });
      }
      r7.sort((e7, t7) => e7.page - t7.page), n4.textured = true;
      for (const { ddAttributes: e7, page: t7, cap: i7, join: s7, miterLimit: l6, roundLimit: a7, halfWidth: o8, offset: u4, geometry: f4 } of r7) n4.capType = i7, n4.joinType = s7, n4.miterLimit = l6, n4.roundLimit = a7, n4.halfWidth = o8, n4.offset = u4, this._processFeature(f4, e7, t7);
    } else {
      if (a6) {
        const e7 = a6.getValue(i6), t7 = this._spriteInfo[e7];
        if (!t7?.rect) return;
      }
      n4.textured = !(!a6 && !o7), n4.capType = g2, n4.joinType = _2, n4.miterLimit = V, n4.roundLimit = D, n4.halfWidth = 0.5 * I4, n4.offset = B;
      for (const a7 of s6) {
        const s7 = r6 ? l5.encodeAttributes(a7, i6, t6) : null;
        p4 && (n4.capType = p4.getValue(i6, a7)), c6 && (n4.joinType = c6.getValue(i6, a7)), x && (n4.miterLimit = x.getValue(i6, a7)), m2 && (n4.roundLimit = m2.getValue(i6, a7)), P && (n4.halfWidth = 0.5 * P.getValue(i6, a7)), L2 && (n4.offset = L2.getValue(i6, a7));
        const o8 = a7.getGeometry(e6);
        this._processFeature(o8, s7);
      }
    }
  }
  serialize() {
    let e6 = 6;
    e6 += this.layerUIDs.length, e6 += this.tessellationProperties._lineVertexBuffer.array.length, e6 += this.tessellationProperties._lineIndexBuffer.array.length, e6 += 3 * this._patternMap.size + 1;
    const t6 = new Uint32Array(e6), i6 = new Int32Array(t6.buffer);
    let s6 = 0;
    t6[s6++] = this.type, t6[s6++] = this.layerUIDs.length;
    for (let l5 = 0; l5 < this.layerUIDs.length; l5++) t6[s6++] = this.layerUIDs[l5];
    t6[s6++] = this._lineIndexStart, t6[s6++] = this._lineIndexCount;
    const n4 = this._patternMap, r6 = n4.size;
    if (t6[s6++] = r6, r6 > 0) for (const [l5, [a6, o7]] of n4) t6[s6++] = l5, t6[s6++] = a6, t6[s6++] = o7;
    t6[s6++] = this.tessellationProperties._lineVertexBuffer.array.length;
    for (let l5 = 0; l5 < this.tessellationProperties._lineVertexBuffer.array.length; l5++) i6[s6++] = this.tessellationProperties._lineVertexBuffer.array[l5];
    t6[s6++] = this.tessellationProperties._lineIndexBuffer.array.length;
    for (let l5 = 0; l5 < this.tessellationProperties._lineIndexBuffer.array.length; l5++) t6[s6++] = this.tessellationProperties._lineIndexBuffer.array[l5];
    return t6.buffer;
  }
  _processFeature(e6, t6, i6) {
    if (!e6) return;
    const s6 = e6.length;
    for (let n4 = 0; n4 < s6; n4++) this._processGeometry(e6[n4], t6, i6);
  }
  _processGeometry(e6, t6, i6) {
    if (e6.length < 2) return;
    const n4 = 1e-3;
    let r6, l5, a6 = e6[0], o7 = 1;
    for (; o7 < e6.length; ) r6 = e6[o7].x - a6.x, l5 = e6[o7].y - a6.y, r6 * r6 + l5 * l5 < n4 * n4 ? e6.splice(o7, 1) : (a6 = e6[o7], ++o7);
    if (e6.length < 2) return;
    const u3 = this.tessellationProperties._lineIndexBuffer, f3 = 3 * u3.index;
    this._tessellationOptions.initialDistance = 0, this._tessellationOptions.wrapDistance = s5, this.tessellationProperties._ddValues = t6, this._lineTessellator.tessellate(e6, this._tessellationOptions);
    const h5 = 3 * u3.index - f3;
    if (void 0 !== i6) {
      const e7 = this._patternMap, t7 = e7.get(i6);
      t7 ? t7[1] += h5 : e7.set(i6, [f3 + this._lineIndexCount, h5]);
    }
    this._lineIndexCount += h5;
  }
  _getDashArrayKey(e6, t6, i6, s6, n4, r6, l5) {
    const a6 = n4 ? r6.getValue(t6, e6) : l5, o7 = s6.getValue(t6, e6);
    return i6.getDashKey(o7, a6);
  }
};
var r5 = (e6) => (t6, i6, s6, n4, r6, l5, a6, o7, u3, f3, h5) => (e6._lineVertexBuffer.add(t6, i6, a6, o7, s6, n4, r6, l5, u3, f3, h5, e6._ddValues), e6._lineVertexBuffer.index - 1);
var l4 = (e6) => (t6, i6, s6) => {
  e6._lineIndexBuffer.add(t6, i6, s6);
};

// node_modules/@arcgis/core/views/2d/engine/vectorTiles/buckets/SymbolBucket.js
var b2 = 10;
function A(e6, t6) {
  return e6.iconMosaicItem && t6.iconMosaicItem ? e6.iconMosaicItem.page === t6.iconMosaicItem.page ? 0 : e6.iconMosaicItem.page - t6.iconMosaicItem.page : e6.iconMosaicItem && !t6.iconMosaicItem ? 1 : !e6.iconMosaicItem && t6.iconMosaicItem ? -1 : 0;
}
var _L = class _L extends e5 {
  constructor(e6, t6, n4, i6, s6, a6, o7, l5, h5) {
    super(t6, n4, h5.getSpriteItems()), this.type = E.SYMBOL, this._markerMap = /* @__PURE__ */ new Map(), this._glyphMap = /* @__PURE__ */ new Map(), this._glyphBufferDataStorage = /* @__PURE__ */ new Map(), this._isIconSDF = false, this._sourceTileKey = e6, this._iconVertexBuffer = i6, this._iconIndexBuffer = s6, this._textVertexBuffer = a6, this._textIndexBuffer = o7, this._placementEngine = l5, this._workerTileHandler = h5;
  }
  get markerPageMap() {
    return this._markerMap;
  }
  get glyphsPageMap() {
    return this._glyphMap;
  }
  get symbolInstances() {
    return this._symbolInstances;
  }
  getResources(e6, t6, i6) {
    const s6 = this.layer, a6 = this.zoom;
    e6 && e6.setExtent(this.layerExtent);
    const o7 = s6.getLayoutProperty("icon-image"), r6 = s6.getLayoutProperty("text-field");
    let l5 = s6.getLayoutProperty("text-transform"), h5 = s6.getLayoutProperty("text-font");
    const x = [];
    let c6, d3, f3, g2;
    o7 && !o7.isDataDriven && (c6 = o7.getValue(a6)), r6 && !r6.isDataDriven && (d3 = r6.getValue(a6)), l5 && l5.isDataDriven || (f3 = s6.getLayoutValue("text-transform", a6), l5 = null), h5 && h5.isDataDriven || (g2 = s6.getLayoutValue("text-font", a6), h5 = null);
    for (const m2 of this._features) {
      const u3 = m2.getGeometry(e6);
      if (!u3 || 0 === u3.length) continue;
      let p4, _2;
      o7 && (p4 = o7.isDataDriven ? o7.getValue(a6, m2) : this._replaceKeys(c6, m2.values), p4 && t6(p4));
      let M = false;
      if (r6 && (_2 = r6.isDataDriven ? r6.getValue(a6, m2) : this._replaceKeys(d3, m2.values), _2)) {
        switch (_2 = _2.replaceAll("\\n", "\n"), l5 && (f3 = l5.getValue(a6, m2)), f3) {
          case o.LOWERCASE:
            _2 = _2.toLowerCase();
            break;
          case o.UPPERCASE:
            _2 = _2.toUpperCase();
        }
        if (_L._bidiEngine.hasBidiChar(_2)) {
          let e7;
          e7 = "rtl" === _L._bidiEngine.checkContextual(_2) ? "IDNNN" : "ICNNN", _2 = _L._bidiEngine.bidiTransform(_2, e7, "VLYSN"), M = true;
        }
        if (_2.length > 0) {
          h5 && (g2 = h5.getValue(a6, m2));
          for (const e7 of g2) {
            let t7 = i6[e7];
            t7 || (t7 = i6[e7] = /* @__PURE__ */ new Set());
            for (const e8 of _2) {
              const n4 = e8.codePointAt(0);
              null != n4 && t7.add(n4);
            }
          }
        }
      }
      if (!p4 && !_2) continue;
      const P = s6.getLayoutValue("symbol-sort-key", a6, m2), I4 = { feature: m2, sprite: p4, label: _2, rtl: M, geometry: u3, hash: (_2 ? l(_2) : 0) ^ (p4 ? l(p4) : 0), priority: P, textFont: g2 };
      x.push(I4);
    }
    this._symbolFeatures = x;
  }
  processFeatures(e6) {
    e6 && e6.setExtent(this.layerExtent);
    const n4 = this.layer, s6 = this.zoom, r6 = n4.getLayoutValue("symbol-placement", s6), h5 = r6 !== n2.POINT, x = n4.getLayoutValue("symbol-spacing", s6) * c2, g2 = n4.getLayoutProperty("icon-image"), y2 = n4.getLayoutProperty("text-field"), b3 = g2 ? new U(n4, s6, h5) : null, T2 = y2 ? new O(n4, s6, h5) : null, V = this._workerTileHandler;
    let w2;
    g2 && (w2 = V.getSpriteItems()), this._iconIndexStart = 3 * this._iconIndexBuffer.index, this._textIndexStart = 3 * this._textIndexBuffer.index, this._iconIndexCount = 0, this._textIndexCount = 0, this._markerMap.clear(), this._glyphMap.clear();
    const B = [];
    let C2 = 1;
    T2?.size && (C2 = T2.size / c5);
    const R = T2 ? T2.maxAngle * s : 0, D = T2 ? T2.size * c2 : 0;
    for (const l5 of this._symbolFeatures) {
      let e7;
      b3 && w2 && l5.sprite && (e7 = w2[l5.sprite], e7 && e7.sdf && (this._isIconSDF = true));
      let n5;
      !!e7 && b3.update(s6, l5.feature);
      let g3 = 0;
      const y3 = l5.label;
      if (y3) {
        n(T2), T2.update(s6, l5.feature);
        const e8 = h5 && T2.rotationAlignment === l2.MAP ? T2.keepUpright : T2.writingMode && T2.writingMode.includes(p.VERTICAL);
        let i6 = 0.5;
        switch (T2.anchor) {
          case m.TOP_LEFT:
          case m.LEFT:
          case m.BOTTOM_LEFT:
            i6 = 0;
            break;
          case m.TOP_RIGHT:
          case m.RIGHT:
          case m.BOTTOM_RIGHT:
            i6 = 1;
        }
        let o7 = 0.5;
        switch (T2.anchor) {
          case m.TOP_LEFT:
          case m.TOP:
          case m.TOP_RIGHT:
            o7 = 0;
            break;
          case m.BOTTOM_LEFT:
          case m.BOTTOM:
          case m.BOTTOM_RIGHT:
            o7 = 1;
        }
        let r7 = 0.5;
        switch (T2.justify) {
          case u.AUTO:
            r7 = i6;
            break;
          case u.LEFT:
            r7 = 0;
            break;
          case u.RIGHT:
            r7 = 1;
        }
        const x2 = T2.letterSpacing * c5, c6 = h5 ? 0 : T2.maxWidth * c5, m2 = T2.lineHeight * c5, P = l5.textFont.map((e9) => V.getGlyphItems(e9));
        if (n5 = new l3(P, c6, m2, x2, i6, o7, r7).getShaping(y3, l5.rtl, e8), n5 && n5.length > 0) {
          let e9 = 1e30, t6 = -1e30;
          for (const i7 of n5) e9 = Math.min(e9, i7.x), t6 = Math.max(t6, i7.x);
          g3 = (t6 - e9 + 2 * c5) * C2 * c2;
        }
      }
      for (let t6 of l5.geometry) {
        const s7 = [];
        if (r6 === n2.LINE) {
          if (n5?.length && T2?.size) {
            const e8 = T2.size * c2 * (2 + Math.min(2, 4 * Math.abs(T2.offset[1])));
            t6 = _L._smoothVertices(t6, e8);
          }
          _L._pushAnchors(s7, t6, x, g3);
        } else r6 === n2.LINE_CENTER ? _L._pushCenterAnchor(s7, t6) : l5.feature.type === i2.Polygon ? _L._pushCentroid(s7, t6) : s7.push(new w(t6[0].x, t6[0].y));
        for (const i6 of s7) {
          if (i6.x < 0 || i6.x > t2 || i6.y < 0 || i6.y > t2) continue;
          if (h5 && g3 > 0 && T2?.rotationAlignment === l2.MAP && !_L._honorsTextMaxAngle(t6, i6, g3, R, D)) continue;
          const s8 = { shaping: n5, line: t6, iconMosaicItem: e7, anchor: i6, symbolFeature: l5, textColliders: [], iconColliders: [], textVertexRanges: [], iconVertexRanges: [] };
          B.push(s8), this._processFeature(s8, b3, T2);
        }
      }
    }
    B.sort(A), this._addPlacedGlyphs(), this._symbolInstances = B;
  }
  serialize() {
    let e6 = 14;
    e6 += this.layerUIDs.length, e6 += 3 * this.markerPageMap.size, e6 += 3 * this.glyphsPageMap.size, e6 += _L._symbolsSerializationLength(this._symbolInstances), e6 += this._iconVertexBuffer.array.length, e6 += this._iconIndexBuffer.array.length, e6 += this._textVertexBuffer.array.length, e6 += this._textIndexBuffer.array.length;
    const t6 = new Uint32Array(e6), n4 = new Int32Array(t6.buffer), i6 = new Float32Array(t6.buffer), [s6, a6, o7] = this._sourceTileKey.split("/");
    let r6 = 0;
    t6[r6++] = this.type, t6[r6++] = this.layerUIDs.length;
    for (let l5 = 0; l5 < this.layerUIDs.length; l5++) t6[r6++] = this.layerUIDs[l5];
    t6[r6++] = this._isIconSDF ? 1 : 0, t6[r6++] = parseFloat(s6), t6[r6++] = parseFloat(a6), t6[r6++] = parseFloat(o7), t6[r6++] = this.markerPageMap.size;
    for (const [l5, [h5, x]] of this.markerPageMap) t6[r6++] = l5, t6[r6++] = h5, t6[r6++] = x;
    t6[r6++] = this.glyphsPageMap.size;
    for (const [l5, [h5, x]] of this.glyphsPageMap) t6[r6++] = l5, t6[r6++] = h5, t6[r6++] = x;
    t6[r6++] = this._iconVertexBuffer.index / 4, t6[r6++] = this._textVertexBuffer.index / 4, r6 = _L.serializeSymbols(t6, n4, i6, r6, this._symbolInstances), t6[r6++] = this._iconVertexBuffer.array.length;
    for (let l5 = 0; l5 < this._iconVertexBuffer.array.length; l5++) n4[r6++] = this._iconVertexBuffer.array[l5];
    t6[r6++] = this._iconIndexBuffer.array.length;
    for (let l5 = 0; l5 < this._iconIndexBuffer.array.length; l5++) t6[r6++] = this._iconIndexBuffer.array[l5];
    t6[r6++] = this._textVertexBuffer.array.length;
    for (let l5 = 0; l5 < this._textVertexBuffer.array.length; l5++) n4[r6++] = this._textVertexBuffer.array[l5];
    t6[r6++] = this._textIndexBuffer.array.length;
    for (let l5 = 0; l5 < this._textIndexBuffer.array.length; l5++) t6[r6++] = this._textIndexBuffer.array[l5];
    return t6.buffer;
  }
  static _symbolsSerializationLength(e6) {
    let t6 = 0;
    t6 += 1;
    for (const n4 of e6 || []) {
      t6 += 5, t6 += 1;
      for (const e7 of n4.textColliders) t6 += b2;
      for (const e7 of n4.iconColliders) t6 += b2;
      t6 += 1, t6 += 2 * n4.textVertexRanges.length, t6 += 1, t6 += 2 * n4.iconVertexRanges.length;
    }
    return t6;
  }
  static serializeSymbols(e6, t6, n4, i6, s6) {
    s6 = s6 || [], t6[i6++] = s6.length;
    for (const a6 of s6) {
      t6[i6++] = a6.anchor.x, t6[i6++] = a6.anchor.y, t6[i6++] = a6.symbolFeature.hash, t6[i6++] = a6.symbolFeature.priority, t6[i6++] = a6.symbolFeature.feature.featureIndex, t6[i6++] = a6.textColliders.length + a6.iconColliders.length;
      for (const e7 of a6.textColliders) t6[i6++] = e7.xTile, t6[i6++] = e7.yTile, t6[i6++] = e7.dxPixels, t6[i6++] = e7.dyPixels, t6[i6++] = e7.hard ? 1 : 0, t6[i6++] = e7.partIndex, n4[i6++] = e7.minLod, n4[i6++] = e7.maxLod, t6[i6++] = e7.width, t6[i6++] = e7.height;
      for (const e7 of a6.iconColliders) t6[i6++] = e7.xTile, t6[i6++] = e7.yTile, t6[i6++] = e7.dxPixels, t6[i6++] = e7.dyPixels, t6[i6++] = e7.hard ? 1 : 0, t6[i6++] = e7.partIndex, n4[i6++] = e7.minLod, n4[i6++] = e7.maxLod, t6[i6++] = e7.width, t6[i6++] = e7.height;
      t6[i6++] = a6.textVertexRanges.length;
      for (const [e7, n5] of a6.textVertexRanges) t6[i6++] = e7, t6[i6++] = n5;
      t6[i6++] = a6.iconVertexRanges.length;
      for (const [e7, n5] of a6.iconVertexRanges) t6[i6++] = e7, t6[i6++] = n5;
    }
    return i6;
  }
  _replaceKeys(e6, t6) {
    return e6.replaceAll(/{([^{}]+)}/g, (e7, n4) => n4 in t6 ? t6[n4] : "");
  }
  _processFeature(e6, t6, n4) {
    const { line: i6, iconMosaicItem: s6, shaping: a6, anchor: o7 } = e6, r6 = this.zoom, l5 = this.layer, x = !!s6;
    let c6 = true;
    x && (c6 = t6?.optional || !s6);
    const d3 = a6 && a6.length > 0, f3 = !d3 || n4?.optional;
    let g2, y2;
    if (x && (g2 = this._placementEngine.getIconPlacement(o7, s6, t6)), (g2 || c6) && (d3 && (y2 = this._placementEngine.getTextPlacement(o7, a6, i6, n4)), y2 || f3)) {
      if (g2 && y2 || (f3 || c6 ? f3 || y2 ? c6 || g2 || (y2 = null) : g2 = null : (g2 = null, y2 = null)), y2) {
        const t7 = l5.hasDataDrivenText ? l5.textMaterial.encodeAttributes(e6.symbolFeature.feature, r6, l5) : null;
        if (this._storePlacedGlyphs(e6, y2.shapes, r6, n4.rotationAlignment, t7), y2.textColliders) {
          e6.textColliders = y2.textColliders;
          for (const e7 of y2.textColliders) {
            e7.minLod = Math.max(r6 + h2(e7.minLod), 0), e7.maxLod = Math.min(r6 + h2(e7.maxLod), 25);
            const t8 = e7.angle;
            if (t8) {
              const n5 = Math.cos(t8), i7 = Math.sin(t8), s7 = e7.dxPixels * n5 - e7.dyPixels * i7, a7 = e7.dxPixels * i7 + e7.dyPixels * n5, o8 = (e7.dxPixels + e7.width) * n5 - e7.dyPixels * i7, r7 = (e7.dxPixels + e7.width) * i7 + e7.dyPixels * n5, l6 = e7.dxPixels * n5 - (e7.dyPixels + e7.height) * i7, h5 = e7.dxPixels * i7 + (e7.dyPixels + e7.height) * n5, x2 = (e7.dxPixels + e7.width) * n5 - (e7.dyPixels + e7.height) * i7, c7 = (e7.dxPixels + e7.width) * i7 + (e7.dyPixels + e7.height) * n5, d4 = Math.min(s7, o8, l6, x2), f4 = Math.max(s7, o8, l6, x2), g3 = Math.min(a7, r7, h5, c7), y3 = Math.max(a7, r7, h5, c7);
              e7.dxPixels = d4, e7.dyPixels = g3, e7.width = f4 - d4, e7.height = y3 - g3;
            }
          }
        }
      }
      if (g2) {
        const n5 = l5.hasDataDrivenIcon ? l5.iconMaterial.encodeAttributes(e6.symbolFeature.feature, r6, l5) : null;
        if (this._addPlacedIcons(e6, g2.shapes, r6, s6.page, t6.rotationAlignment === l2.VIEWPORT, n5), g2.iconColliders) {
          e6.iconColliders = g2.iconColliders;
          for (const e7 of g2.iconColliders) {
            e7.minLod = Math.max(r6 + h2(e7.minLod), 0), e7.maxLod = Math.min(r6 + h2(e7.maxLod), 25);
            const t7 = e7.angle;
            if (t7) {
              const n6 = Math.cos(t7), i7 = Math.sin(t7), s7 = e7.dxPixels * n6 - e7.dyPixels * i7, a7 = e7.dxPixels * i7 + e7.dyPixels * n6, o8 = (e7.dxPixels + e7.width) * n6 - e7.dyPixels * i7, r7 = (e7.dxPixels + e7.width) * i7 + e7.dyPixels * n6, l6 = e7.dxPixels * n6 - (e7.dyPixels + e7.height) * i7, h5 = e7.dxPixels * i7 + (e7.dyPixels + e7.height) * n6, x2 = (e7.dxPixels + e7.width) * n6 - (e7.dyPixels + e7.height) * i7, c7 = (e7.dxPixels + e7.width) * i7 + (e7.dyPixels + e7.height) * n6, d4 = Math.min(s7, o8, l6, x2), f4 = Math.max(s7, o8, l6, x2), g3 = Math.min(a7, r7, h5, c7), y3 = Math.max(a7, r7, h5, c7);
              e7.dxPixels = d4, e7.dyPixels = g3, e7.width = f4 - d4, e7.height = y3 - g3;
            }
          }
        }
      }
    }
  }
  _addPlacedIcons(e6, t6, n4, i6, s6, a6) {
    const o7 = Math.max(n4 - 1, 0), r6 = this._iconVertexBuffer, l5 = this._iconIndexBuffer, x = this._markerMap;
    for (const c6 of t6) {
      const t7 = s6 ? 0 : Math.max(n4 + h2(c6.minzoom), o7), d3 = s6 ? 25 : Math.min(n4 + h2(c6.maxzoom), 25);
      if (d3 <= t7) continue;
      const f3 = c6.tl, g2 = c6.tr, y2 = c6.bl, m2 = c6.br, u3 = c6.mosaicRect, p4 = c6.labelAngle, _2 = c6.minAngle, M = c6.maxAngle, P = c6.anchor, I4 = r6.index, b3 = u3.x, A2 = u3.y, L2 = b3 + u3.width, T2 = A2 + u3.height, V = r6.index;
      r6.add(P.x, P.y, f3.x, f3.y, b3, A2, p4, _2, M, t7, d3, a6), r6.add(P.x, P.y, g2.x, g2.y, L2, A2, p4, _2, M, t7, d3, a6), r6.add(P.x, P.y, y2.x, y2.y, b3, T2, p4, _2, M, t7, d3, a6), r6.add(P.x, P.y, m2.x, m2.y, L2, T2, p4, _2, M, t7, d3, a6), e6.iconVertexRanges.length > 0 && e6.iconVertexRanges[0][0] + e6.iconVertexRanges[0][1] === V ? e6.iconVertexRanges[0][1] += 4 : e6.iconVertexRanges.push([V, 4]), l5.add(I4, I4 + 1, I4 + 2), l5.add(I4 + 1, I4 + 2, I4 + 3), x.has(i6) ? x.get(i6)[1] += 6 : x.set(i6, [this._iconIndexStart + this._iconIndexCount, 6]), this._iconIndexCount += 6;
    }
  }
  _addPlacedGlyphs() {
    const e6 = this._textVertexBuffer, t6 = this._textIndexBuffer, n4 = this._glyphMap;
    for (const [i6, s6] of this._glyphBufferDataStorage) for (const a6 of s6) {
      const s7 = e6.index, o7 = a6.symbolInstance, r6 = a6.ddAttributes, l5 = e6.index;
      e6.add(a6.glyphAnchor[0], a6.glyphAnchor[1], a6.tl[0], a6.tl[1], a6.xmin, a6.ymin, a6.labelAngle, a6.minAngle, a6.maxAngle, a6.minLod, a6.maxLod, r6), e6.add(a6.glyphAnchor[0], a6.glyphAnchor[1], a6.tr[0], a6.tr[1], a6.xmax, a6.ymin, a6.labelAngle, a6.minAngle, a6.maxAngle, a6.minLod, a6.maxLod, r6), e6.add(a6.glyphAnchor[0], a6.glyphAnchor[1], a6.bl[0], a6.bl[1], a6.xmin, a6.ymax, a6.labelAngle, a6.minAngle, a6.maxAngle, a6.minLod, a6.maxLod, r6), e6.add(a6.glyphAnchor[0], a6.glyphAnchor[1], a6.br[0], a6.br[1], a6.xmax, a6.ymax, a6.labelAngle, a6.minAngle, a6.maxAngle, a6.minLod, a6.maxLod, r6), o7.textVertexRanges.length > 0 && o7.textVertexRanges[0][0] + o7.textVertexRanges[0][1] === l5 ? o7.textVertexRanges[0][1] += 4 : o7.textVertexRanges.push([l5, 4]), t6.add(s7, s7 + 1, s7 + 2), t6.add(s7 + 1, s7 + 2, s7 + 3), n4.has(i6) ? n4.get(i6)[1] += 6 : n4.set(i6, [this._textIndexStart + this._textIndexCount, 6]), this._textIndexCount += 6;
    }
    this._glyphBufferDataStorage.clear();
  }
  _storePlacedGlyphs(e6, t6, n4, i6, s6) {
    const a6 = Math.max(n4 - 1, 0), o7 = i6 === l2.VIEWPORT;
    let r6, l5, x, c6, d3, f3, g2, y2, m2, p4, _2;
    for (const u3 of t6) {
      if (r6 = o7 ? 0 : Math.max(n4 + h2(u3.minzoom), a6), l5 = o7 ? 25 : Math.min(n4 + h2(u3.maxzoom), 25), l5 <= r6) continue;
      x = u3.tl, c6 = u3.tr, d3 = u3.bl, f3 = u3.br, g2 = u3.labelAngle, y2 = u3.minAngle, m2 = u3.maxAngle, p4 = u3.anchor, _2 = u3.mosaicRect, this._glyphBufferDataStorage.has(u3.page) || this._glyphBufferDataStorage.set(u3.page, []);
      this._glyphBufferDataStorage.get(u3.page).push({ glyphAnchor: [p4.x, p4.y], tl: [x.x, x.y], tr: [c6.x, c6.y], bl: [d3.x, d3.y], br: [f3.x, f3.y], xmin: _2.x, ymin: _2.y, xmax: _2.x + _2.width, ymax: _2.y + _2.height, labelAngle: g2, minAngle: y2, maxAngle: m2, minLod: r6, maxLod: l5, placementLod: a6, symbolInstance: e6, ddAttributes: s6 });
    }
  }
  static _pushAnchors(e6, t6, n4, i6) {
    n4 += i6;
    let a6 = 0;
    const o7 = t6.length - 1;
    for (let x = 0; x < o7; x++) a6 += h.distance(t6[x], t6[x + 1]);
    let r6 = i6 || n4;
    if (r6 *= 0.5, a6 <= r6) return;
    const l5 = r6 / a6;
    let h5 = 0, d3 = -(n4 = a6 / Math.max(Math.round(a6 / n4), 1)) / 2;
    const f3 = t6.length - 1;
    for (let s6 = 0; s6 < f3; s6++) {
      const i7 = t6[s6], a7 = t6[s6 + 1], o8 = a7.x - i7.x, r7 = a7.y - i7.y, f4 = Math.sqrt(o8 * o8 + r7 * r7);
      let g2;
      for (; d3 + n4 < h5 + f4; ) {
        d3 += n4;
        const t7 = (d3 - h5) / f4, y2 = p2(i7.x, a7.x, t7), m2 = p2(i7.y, a7.y, t7);
        void 0 === g2 && (g2 = Math.atan2(r7, o8)), e6.push(new w(y2, m2, g2, s6, l5));
      }
      h5 += f4;
    }
  }
  static _pushCenterAnchor(e6, t6) {
    let n4 = 0;
    const i6 = t6.length - 1;
    for (let l5 = 0; l5 < i6; l5++) n4 += h.distance(t6[l5], t6[l5 + 1]);
    const a6 = n4 / 2;
    let o7 = 0;
    const r6 = t6.length - 1;
    for (let s6 = 0; s6 < r6; s6++) {
      const n5 = t6[s6], i7 = t6[s6 + 1], r7 = i7.x - n5.x, l5 = i7.y - n5.y, h5 = Math.sqrt(r7 * r7 + l5 * l5);
      if (a6 < o7 + h5) {
        const t7 = (a6 - o7) / h5, d3 = p2(n5.x, i7.x, t7), f3 = p2(n5.y, i7.y, t7), g2 = Math.atan2(l5, r7);
        return void e6.push(new w(d3, f3, g2, s6, 0));
      }
      o7 += h5;
    }
  }
  static _deviation(e6, t6, n4) {
    const i6 = (t6.x - e6.x) * (n4.x - t6.x) + (t6.y - e6.y) * (n4.y - t6.y), s6 = (t6.x - e6.x) * (n4.y - t6.y) - (t6.y - e6.y) * (n4.x - t6.x);
    return Math.atan2(s6, i6);
  }
  static _honorsTextMaxAngle(e6, t6, n4, i6, a6) {
    let o7 = 0;
    const r6 = n4 / 2;
    let l5 = new h(t6.x, t6.y), h5 = t6.segment + 1;
    for (; o7 > -r6; ) {
      if (--h5, h5 < 0) return false;
      o7 -= h.distance(e6[h5], l5), l5 = e6[h5];
    }
    o7 += h.distance(e6[h5], e6[h5 + 1]);
    const x = [];
    let c6 = 0;
    const d3 = e6.length;
    for (; o7 < r6; ) {
      const t7 = e6[h5];
      let n5, r7 = h5;
      do {
        if (++r7, r7 === d3) return false;
        n5 = e6[r7];
      } while (n5.isEqual(t7));
      let l6, f3 = r7;
      do {
        if (++f3, f3 === d3) return false;
        l6 = e6[f3];
      } while (l6.isEqual(n5));
      const g2 = this._deviation(t7, n5, l6);
      for (x.push({ deviation: g2, distToAnchor: o7 }), c6 += g2; o7 - x[0].distToAnchor > a6; ) c6 -= x.shift().deviation;
      if (Math.abs(c6) > i6) return false;
      o7 += h.distance(n5, l6), h5 = r7;
    }
    return true;
  }
  static _smoothVertices(e6, t6) {
    if (t6 <= 0) return e6;
    let n4 = e6.length;
    if (n4 < 3) return e6;
    const i6 = [];
    let a6 = 0, o7 = 0;
    i6.push(0);
    for (let y2 = 1; y2 < n4; y2++) {
      const t7 = h.distance(e6[y2], e6[y2 - 1]);
      t7 > 0 && (a6 += t7, i6.push(a6), o7++, o7 !== y2 && (e6[o7] = e6[y2]));
    }
    if (n4 = o7 + 1, n4 < 3) return e6;
    t6 = Math.min(t6, 0.2 * a6);
    const r6 = e6[0].x, l5 = e6[0].y, h5 = e6[n4 - 1].x, x = e6[n4 - 1].y, c6 = h.sub(e6[0], e6[1]);
    c6.normalize(), e6[0].x += t6 * c6.x, e6[0].y += t6 * c6.y, c6.assignSub(e6[n4 - 1], e6[n4 - 2]), c6.normalize(), e6[n4 - 1].x += t6 * c6.x, e6[n4 - 1].y += t6 * c6.y, i6[0] -= t6, i6[n4 - 1] += t6;
    const d3 = [];
    d3.push(new h(r6, l5));
    const f3 = 1e-6, g2 = 0.5 * t6;
    for (let y2 = 1; y2 < n4 - 1; y2++) {
      let a7 = 0, o8 = 0, r7 = 0;
      for (let n5 = y2 - 1; n5 >= 0; n5--) {
        const s6 = g2 + i6[n5 + 1] - i6[y2];
        if (s6 < 0) break;
        const l6 = i6[n5 + 1] - i6[n5], h6 = i6[y2] - i6[n5] < g2 ? 1 : s6 / l6;
        if (h6 < f3) break;
        const x2 = h6 * h6, c7 = h6 * s6 - 0.5 * x2 * l6, d4 = h6 * l6 / t6, m2 = e6[n5 + 1], u3 = e6[n5].x - m2.x, p4 = e6[n5].y - m2.y;
        a7 += d4 / c7 * (m2.x * h6 * s6 + 0.5 * x2 * (s6 * u3 - l6 * m2.x) - x2 * h6 * l6 * u3 / 3), o8 += d4 / c7 * (m2.y * h6 * s6 + 0.5 * x2 * (s6 * p4 - l6 * m2.y) - x2 * h6 * l6 * p4 / 3), r7 += d4;
      }
      for (let s6 = y2 + 1; s6 < n4; s6++) {
        const n5 = g2 - i6[s6 - 1] + i6[y2];
        if (n5 < 0) break;
        const l6 = i6[s6] - i6[s6 - 1], h6 = i6[s6] - i6[y2] < g2 ? 1 : n5 / l6;
        if (h6 < f3) break;
        const x2 = h6 * h6, c7 = h6 * n5 - 0.5 * x2 * l6, d4 = h6 * l6 / t6, m2 = e6[s6 - 1], u3 = e6[s6].x - m2.x, p4 = e6[s6].y - m2.y;
        a7 += d4 / c7 * (m2.x * h6 * n5 + 0.5 * x2 * (n5 * u3 - l6 * m2.x) - x2 * h6 * l6 * u3 / 3), o8 += d4 / c7 * (m2.y * h6 * n5 + 0.5 * x2 * (n5 * p4 - l6 * m2.y) - x2 * h6 * l6 * p4 / 3), r7 += d4;
      }
      d3.push(new h(a7 / r7, o8 / r7));
    }
    return d3.push(new h(h5, x)), e6[0].x = r6, e6[0].y = l5, e6[n4 - 1].x = h5, e6[n4 - 1].y = x, d3;
  }
  static _pushCentroid(e6, t6) {
    const n4 = 0, i6 = 0, s6 = t2, a6 = t2, r6 = t6.length - 1;
    let l5 = 0, h5 = 0, x = 0, d3 = t6[0].x, f3 = t6[0].y;
    d3 > s6 && (d3 = s6), d3 < n4 && (d3 = n4), f3 > a6 && (f3 = a6), f3 < i6 && (f3 = i6);
    for (let o7 = 1; o7 < r6; o7++) {
      let e7 = t6[o7].x, r7 = t6[o7].y, c6 = t6[o7 + 1].x, g2 = t6[o7 + 1].y;
      e7 > s6 && (e7 = s6), e7 < n4 && (e7 = n4), r7 > a6 && (r7 = a6), r7 < i6 && (r7 = i6), c6 > s6 && (c6 = s6), c6 < n4 && (c6 = n4), g2 > a6 && (g2 = a6), g2 < i6 && (g2 = i6);
      const y2 = (e7 - d3) * (g2 - f3) - (c6 - d3) * (r7 - f3);
      l5 += y2 * (d3 + e7 + c6), h5 += y2 * (f3 + r7 + g2), x += y2;
    }
    l5 /= 3 * x, h5 /= 3 * x, isNaN(l5) || isNaN(h5) || e6.push(new w(l5, h5));
  }
};
_L._bidiEngine = new C();
var L = _L;

// node_modules/@arcgis/core/views/2d/tiling/enums.js
var I3;
!function(I4) {
  I4[I4.INITIALIZED = 0] = "INITIALIZED", I4[I4.NO_DATA = 1] = "NO_DATA", I4[I4.READY = 2] = "READY", I4[I4.MODIFIED = 3] = "MODIFIED", I4[I4.INVALID = 4] = "INVALID";
}(I3 || (I3 = {}));

// node_modules/@arcgis/core/views/2d/engine/vectorTiles/TileParser.js
var g = class {
  constructor(t6, r6, o7, n4, l5, a6) {
    if (this._pbfTiles = {}, this._tileClippers = {}, this._client = o7, this._tile = r6, this._sourceDataMaxLOD = n4, a6) {
      this._styleLayerUIDs = /* @__PURE__ */ new Set();
      for (const e6 of a6) this._styleLayerUIDs.add(e6);
    }
    this._styleRepository = l5, this._layers = this._styleRepository?.layers ?? [];
    const [u3, f3, p4] = r6.tileKey.split("/").map(parseFloat);
    this._level = u3;
    const h5 = d(this._level);
    for (const c6 of Object.keys(t6)) {
      const r7 = t6[c6];
      this._pbfTiles[c6] = new a(new Uint8Array(r7.protobuff), new DataView(r7.protobuff));
      if (r7.refKey) {
        const [e6] = r7.refKey.split("/").map(parseFloat), t7 = u3 - e6;
        if (t7 > 0) {
          const e7 = (1 << t7) - 1, r8 = f3 & e7, i6 = p4 & e7;
          this._tileClippers[c6] = new e2(t7, r8, i6, 8, h5);
        }
      }
      this._tileClippers[c6] || (this._tileClippers[c6] = new _());
    }
  }
  _canParseStyleLayer(e6) {
    return !this._styleLayerUIDs || this._styleLayerUIDs.has(e6);
  }
  async parse(e6) {
    const t6 = i3(), s6 = this._initialize(e6), { returnedBuckets: i6 } = s6;
    this._processLayers(s6), this._linkReferences(s6), this._filterFeatures(s6);
    const o7 = [], c6 = /* @__PURE__ */ new Set(), n4 = (e7, t7) => {
      c6.has(e7) || (o7.push({ name: e7, repeat: t7 }), c6.add(e7));
    }, l5 = {};
    for (const r6 of i6) r6.getResources(r6.tileClipper, n4, l5);
    if (this._tile.status === I3.INVALID) return [];
    const a6 = this._fetchResources(o7, l5, e6);
    return Promise.all([...a6, t6]).then(() => this._processFeatures(s6.returnedBuckets));
  }
  _initialize(e6) {
    const t6 = e6?.signal;
    return { signal: t6, sourceNameToTileData: this._parseTileData(this._pbfTiles), layers: this._layers, zoom: this._level, sourceNameToTileClipper: this._tileClippers, sourceNameToUniqueSourceLayerBuckets: {}, sourceNameToUniqueSourceLayers: {}, returnedBuckets: [], layerIdToBucket: {}, referencerUIDToReferencedId: /* @__PURE__ */ new Map() };
  }
  _processLayers(e6) {
    const { sourceNameToTileData: t6, zoom: r6, layers: s6, sourceNameToTileClipper: i6, sourceNameToUniqueSourceLayerBuckets: o7, sourceNameToUniqueSourceLayers: c6, returnedBuckets: n4, layerIdToBucket: l5, referencerUIDToReferencedId: a6 } = e6, u3 = this._sourceDataMaxLOD;
    for (let f3 = s6.length - 1; f3 >= 0; f3--) {
      const e7 = s6[f3];
      if (r6 < u3) {
        if (e7.minzoom && r6 < Math.floor(e7.minzoom) || e7.maxzoom && r6 >= e7.maxzoom) continue;
      } else if (e7.maxzoom && r6 >= e7.maxzoom) continue;
      if (e7.type === i.BACKGROUND || !this._canParseStyleLayer(e7.uid) || !t6[e7.source] || !i6[e7.source]) continue;
      const p4 = t6[e7.source], h5 = i6[e7.source], m2 = e7.sourceLayer, _2 = p4[m2];
      if (_2) {
        let t7 = c6[e7.source];
        if (t7 || (t7 = c6[e7.source] = /* @__PURE__ */ new Set()), t7.add(e7.sourceLayer), e7.refLayerId) a6.set(e7.uid, e7.refLayerId);
        else {
          const t8 = this._createBucket(e7);
          if (t8) {
            t8.layerUIDs = [e7.uid], t8.layerExtent = _2.extent, t8.tileClipper = h5;
            let r7 = o7[e7.source];
            r7 || (r7 = o7[e7.source] = {});
            let s7 = r7[m2];
            s7 || (s7 = r7[m2] = []), s7.push(t8), n4.push(t8), l5[e7.id] = t8;
          }
        }
      }
    }
  }
  _linkReferences(e6) {
    const { layerIdToBucket: t6, referencerUIDToReferencedId: r6 } = e6;
    r6.forEach((e7, r7) => {
      t6[e7] && t6[e7].layerUIDs.push(r7);
    });
  }
  _filterFeatures(e6) {
    const { signal: r6, sourceNameToTileData: s6, sourceNameToUniqueSourceLayerBuckets: i6, sourceNameToUniqueSourceLayers: c6 } = e6, n4 = 10 * this._level, l5 = 10 * (this._level + 1), a6 = [], u3 = [];
    for (const t6 of Object.keys(c6)) {
      c6[t6].forEach((e7) => {
        a6.push(e7), u3.push(t6);
      });
    }
    for (let f3 = 0; f3 < a6.length; f3++) {
      const e7 = u3[f3], c7 = a6[f3];
      if (!s6[e7] || !i6[e7]) continue;
      const p4 = s6[e7][c7], h5 = i6[e7][c7];
      if (!h5 || 0 === h5.length) continue;
      if (c(r6)) return;
      let m2 = 0;
      const _2 = p4.getData();
      for (; _2.nextTag(2); ) {
        const e8 = _2.getMessage(), t6 = new s2(e8, p4, m2++);
        e8.release();
        const r7 = t6.values;
        if (r7) {
          const e9 = r7._minzoom;
          if (e9 && e9 >= l5) continue;
          const t7 = r7._maxzoom;
          if (t7 && t7 <= n4) continue;
        }
        for (const s7 of h5) s7.pushFeature(t6);
      }
    }
  }
  _fetchResources(e6, t6, r6) {
    const s6 = [], i6 = this._tile.getWorkerTileHandler();
    let o7, c6;
    e6.length > 0 && (o7 = i6.fetchSprites(e6, this._client, r6), s6.push(o7));
    for (const n4 in t6) {
      const e7 = t6[n4];
      e7.size > 0 && (c6 = i6.fetchGlyphs(this._tile.tileKey, n4, e7, this._client, r6), s6.push(c6));
    }
    return s6;
  }
  _processFeatures(e6) {
    const t6 = e6.filter((e7) => e7.hasFeatures() || this._canParseStyleLayer(e7.layer.uid));
    for (const r6 of t6) r6.processFeatures(r6.tileClipper);
    return t6;
  }
  _parseTileData(e6) {
    const t6 = {};
    for (const r6 of Object.keys(e6)) {
      const s6 = e6[r6], i6 = {};
      for (; s6.next(); ) switch (s6.tag()) {
        case 3: {
          const e7 = s6.getMessage(), t7 = new t5(e7);
          e7.release(), i6[t7.name] = t7;
          break;
        }
        default:
          s6.skip();
      }
      t6[r6] = i6;
    }
    return t6;
  }
  _createBucket(e6) {
    switch (e6.type) {
      case i.BACKGROUND:
        return null;
      case i.FILL:
        return this._createFillBucket(e6);
      case i.LINE:
        return this._createLineBucket(e6);
      case i.CIRCLE:
        return this._createCircleBucket(e6);
      case i.SYMBOL:
        return this._createSymbolBucket(e6);
    }
  }
  _createFillBucket(e6) {
    return new s4(e6, this._level, this._tile.getWorkerTileHandler().getSpriteItems(), new r3(e6.fillMaterial.getStride()), new r2(), new u2(e6.outlineMaterial.getStride()), new r2());
  }
  _createLineBucket(e6) {
    return new n3(e6, this._level, this._tile.getWorkerTileHandler().getSpriteItems(), new o5(e6.lineMaterial.getStride()), new r2());
  }
  _createCircleBucket(e6) {
    return new r4(e6, this._level, this._tile.getWorkerTileHandler().getSpriteItems(), new a5(e6.circleMaterial.getStride()), new r2());
  }
  _createSymbolBucket(e6) {
    const t6 = this._tile;
    return new L(t6.tileKey, e6, this._level, new h4(e6.iconMaterial.getStride()), new r2(), new h4(e6.textMaterial.getStride()), new r2(), t6.placementEngine, t6.getWorkerTileHandler());
  }
};

// node_modules/@arcgis/core/views/2d/engine/vectorTiles/WorkerTile.js
var i4 = class {
  constructor(t6, s6, i6, a6) {
    this.status = I3.INITIALIZED, this.placementEngine = new I2(), this.tileKey = t6, this.refKeys = s6, this._workerTileHandler = i6, this._styleRepository = a6;
  }
  release() {
    this.tileKey = "", this.refKeys = null, this.status = I3.INITIALIZED, this._workerTileHandler = null;
  }
  async parse(e6, s6) {
    const i6 = s6?.signal;
    if (null != i6) {
      const t6 = () => {
        i6.removeEventListener("abort", t6), this.status = I3.INVALID;
      };
      i6.addEventListener("abort", t6);
    }
    let a6;
    const n4 = { bucketsWithData: [], emptyBuckets: null };
    try {
      a6 = await this._parse(e6, s6);
    } catch (c6) {
      if (b(c6)) throw c6;
      return { result: n4, transferList: [] };
    }
    this.status = I3.READY;
    const l5 = n4.bucketsWithData, o7 = [];
    for (const t6 of a6) if (t6.hasFeatures()) {
      const e7 = t6.serialize();
      l5.push(e7);
    } else o7.push(t6.layer.uid);
    const u3 = [...l5];
    let h5 = null;
    return o7.length > 0 && (h5 = Uint32Array.from(o7), u3.push(h5.buffer)), n4.emptyBuckets = h5, { result: n4, transferList: u3 };
  }
  setObsolete() {
    this.status = I3.INVALID;
  }
  getLayers() {
    return this._workerTileHandler.getLayers();
  }
  getWorkerTileHandler() {
    return this._workerTileHandler;
  }
  async _parse(t6, e6) {
    const i6 = t6.sourceName2DataAndRefKey;
    if (0 === Object.keys(i6).length) return [];
    this.status = I3.MODIFIED;
    return new g(i6, this, e6.client, t6.sourceDataMaxLOD, this._styleRepository, t6.styleLayerUIDs).parse(e6);
  }
};

// node_modules/@arcgis/core/views/2d/engine/vectorTiles/WorkerTileHandler.js
var o6 = 25;
var i5 = class {
  constructor() {
    this._spriteInfo = {}, this._glyphInfo = {}, this._sourceDataMaxLOD = o6;
  }
  reset() {
    return this._spriteInfo = {}, this._glyphInfo = {}, Promise.resolve();
  }
  getLayers() {
    return this._styleRepository?.layers ?? [];
  }
  async createTileAndParse(t6, r6) {
    const { key: o7 } = t6, i6 = {};
    for (const e6 of Object.keys(t6.sourceName2DataAndRefKey)) {
      const s6 = t6.sourceName2DataAndRefKey[e6];
      i6[e6] = s6.refKey;
    }
    const a6 = new i4(o7, i6, this, this._styleRepository);
    try {
      return await a6.parse({ ...t6, sourceDataMaxLOD: this._sourceDataMaxLOD }, r6);
    } catch (n4) {
      if (a6.setObsolete(), a6.release(), !b(n4)) throw n4;
      return null;
    }
  }
  updateStyle(e6) {
    if (!e6 || 0 === e6.length || !this._styleRepository) return;
    const s6 = this._styleRepository;
    for (const r6 of e6) {
      const e7 = r6.type, o7 = r6.data;
      switch (e7) {
        case I.PAINTER_CHANGED:
          s6.setPaintProperties(o7.layer, o7.paint);
          break;
        case I.LAYOUT_CHANGED:
          s6.setLayoutProperties(o7.layer, o7.layout);
          break;
        case I.LAYER_REMOVED:
          s6.deleteStyleLayer(o7.layer);
          break;
        case I.LAYER_CHANGED:
          s6.setStyleLayer(o7.layer, o7.index);
          break;
        case I.SPRITES_CHANGED:
          this._spriteInfo = {};
      }
    }
  }
  setStyle(e6) {
    const { style: t6, sourceDataMaxLOD: s6 } = e6;
    this._styleRepository = new o3(t6), this._sourceDataMaxLOD = s6, this._spriteInfo = {}, this._glyphInfo = {};
  }
  fetchSprites(e6, t6, s6) {
    const r6 = [], o7 = this._spriteInfo;
    for (const i6 of e6) {
      void 0 === o7[i6.name] && r6.push(i6);
    }
    return 0 === r6.length ? Promise.resolve() : t6.invoke("getSprites", r6, { signal: s6?.signal }).then((e7) => {
      for (const t7 in e7) {
        const s7 = e7[t7];
        o7[t7] = s7;
      }
    });
  }
  getSpriteItems() {
    return this._spriteInfo;
  }
  fetchGlyphs(e6, t6, s6, r6, o7) {
    const i6 = [];
    let a6 = this._glyphInfo[t6];
    return a6 ? s6.forEach((e7) => {
      a6[e7] || i6.push(e7);
    }) : (a6 = this._glyphInfo[t6] = [], s6.forEach((e7) => i6.push(e7))), 0 === i6.length ? Promise.resolve() : r6.invoke("getGlyphs", { tileID: e6, font: t6, codePoints: i6 }, o7).then((e7) => {
      for (let t7 = 0; t7 < e7.length; t7++) e7[t7] && (a6[t7] = e7[t7]);
    });
  }
  getGlyphItems(e6) {
    return this._glyphInfo[e6];
  }
};
export {
  i5 as default
};
//# sourceMappingURL=WorkerTileHandler-TDGVCB2K.js.map
