import {
  t
} from "./chunk-4J6GMCJZ.js";
import {
  Xe
} from "./chunk-KXFCAOWK.js";
import "./chunk-VGXBH5PT.js";
import "./chunk-ZUTXZ2PO.js";
import "./chunk-FSVG2RRX.js";
import "./chunk-L3O6KWVI.js";
import "./chunk-2SK5ARBZ.js";
import "./chunk-RNXMAHSA.js";
import "./chunk-VD4HSDHE.js";
import "./chunk-WBSGKMRV.js";
import "./chunk-SBFMUXL3.js";
import "./chunk-PZV6BOD6.js";
import "./chunk-DD7VYTDF.js";
import "./chunk-H7SHPX7W.js";
import "./chunk-WIICHW3C.js";
import "./chunk-T4BWGCN6.js";
import "./chunk-AC7GOP3F.js";
import "./chunk-XPKVLOAO.js";
import "./chunk-GESOBEYT.js";
import "./chunk-3IU6SQCC.js";
import "./chunk-E7YVYF37.js";
import "./chunk-E76L26GR.js";
import "./chunk-GG4VLKUY.js";
import "./chunk-IL45XPTT.js";
import "./chunk-6MFKAT6L.js";
import "./chunk-NOWX6W7R.js";
import "./chunk-OQ76WPLD.js";
import "./chunk-KSVHYEPS.js";
import "./chunk-YOMN3PFE.js";
import "./chunk-UTU6N7VJ.js";
import "./chunk-RV3SBM2C.js";
import "./chunk-4GXVCEW4.js";
import "./chunk-KQINCOQL.js";
import {
  g
} from "./chunk-B6C7UPBZ.js";
import "./chunk-IUQBXXYO.js";
import "./chunk-7WKBQS4R.js";
import "./chunk-SJHAGLIM.js";
import "./chunk-Z6OMEWWC.js";
import "./chunk-MULCOUFY.js";
import "./chunk-VGIEH4HM.js";
import "./chunk-XLF2NMGX.js";
import "./chunk-X5GD6LFD.js";
import "./chunk-G4PMFSAZ.js";
import "./chunk-MX5VW6PC.js";
import "./chunk-JJNHUYXK.js";
import "./chunk-UG6RJXJ2.js";
import "./chunk-OTCYHWWG.js";
import "./chunk-UDSZVLDS.js";
import "./chunk-UGXCZZ7N.js";
import "./chunk-OTSYE6UT.js";
import "./chunk-K5LVZUBF.js";
import "./chunk-J7LSFQNH.js";
import "./chunk-AGDHKBKD.js";
import "./chunk-OC2XWDW2.js";
import "./chunk-C3JHRSMA.js";
import "./chunk-M2UZRY7C.js";
import "./chunk-HUVZEBBO.js";
import "./chunk-VLPG2W66.js";
import "./chunk-GH7GZNY6.js";
import "./chunk-G5DA3EEG.js";
import "./chunk-D443BZKU.js";
import "./chunk-7DFHXN7Z.js";
import "./chunk-NX54JGTL.js";
import "./chunk-I6IIPG56.js";
import "./chunk-JEYXDNAT.js";
import "./chunk-DJJNSAUR.js";
import "./chunk-PZBXBPVO.js";
import "./chunk-TMC6HYGQ.js";
import "./chunk-7FAVUXK2.js";
import "./chunk-IVNFIIVI.js";
import "./chunk-T4QXFCFF.js";
import "./chunk-BFUOEOXA.js";
import "./chunk-NOGWEW4X.js";
import "./chunk-ZCZERMS4.js";
import "./chunk-7CUBIFKN.js";
import "./chunk-GPMIOMDJ.js";
import "./chunk-RGFH75DR.js";
import "./chunk-FEGY3M6U.js";
import "./chunk-RWRC6JKB.js";
import "./chunk-M6AESODI.js";
import {
  h,
  i as i2,
  r
} from "./chunk-NY6S6EMV.js";
import "./chunk-AQGMTI4V.js";
import "./chunk-QG7JWSBW.js";
import "./chunk-YSCIEMYQ.js";
import "./chunk-ZXGBNDYM.js";
import "./chunk-GOWWJ2HE.js";
import "./chunk-5GBXHGKW.js";
import "./chunk-7ZMGKXLG.js";
import "./chunk-JMXPE5PE.js";
import "./chunk-LL73CCBG.js";
import "./chunk-6TS2ZJL4.js";
import "./chunk-IBGTNH54.js";
import "./chunk-L7EN54WK.js";
import "./chunk-6QTMK7BB.js";
import "./chunk-BNO7HCVD.js";
import "./chunk-7NMH5MM5.js";
import "./chunk-TCIXF7MM.js";
import "./chunk-UGTICYU7.js";
import "./chunk-3MHRDLQO.js";
import "./chunk-F4KXGA4J.js";
import "./chunk-KHRHKYU2.js";
import {
  d
} from "./chunk-2IMSGFJN.js";
import "./chunk-VHTQ5H2C.js";
import "./chunk-YX2VTIZR.js";
import "./chunk-LYSDGL5S.js";
import "./chunk-SRJX4QLW.js";
import "./chunk-WPTJIN2M.js";
import "./chunk-KUP5BM5G.js";
import "./chunk-HNQNVI5C.js";
import "./chunk-G34OBNLT.js";
import "./chunk-WJUYGRZY.js";
import "./chunk-FKFXOPPT.js";
import "./chunk-KE3WBZYL.js";
import "./chunk-EOMIFMDH.js";
import "./chunk-QFU5COFB.js";
import "./chunk-45ILJ6ZH.js";
import {
  e2 as e
} from "./chunk-VCRP2PLV.js";
import "./chunk-BDLVUYG2.js";
import "./chunk-6QA2BVC5.js";
import "./chunk-HWKQJUGY.js";
import "./chunk-XDCUZFJX.js";
import "./chunk-DNZK6PPI.js";
import "./chunk-7BWCD63N.js";
import "./chunk-65K4DQAH.js";
import "./chunk-MUKDJQWB.js";
import "./chunk-6KFXWKZZ.js";
import "./chunk-HPGYEHVI.js";
import "./chunk-YBJ5GVXQ.js";
import "./chunk-X3R5OB6L.js";
import "./chunk-RACDQ3AL.js";
import "./chunk-TEXTBDH7.js";
import "./chunk-N3A2BVTW.js";
import "./chunk-IGYEHOTB.js";
import "./chunk-TVM3SZJR.js";
import "./chunk-52HWRRRQ.js";
import "./chunk-VNTEV3V4.js";
import "./chunk-OGOQOMMV.js";
import "./chunk-7Z3AF3B2.js";
import "./chunk-6GWORUT3.js";
import "./chunk-U57T7EQN.js";
import "./chunk-CMHHL5UO.js";
import "./chunk-XHYOFJ4U.js";
import "./chunk-HCYE6OE4.js";
import "./chunk-KJSBBQ22.js";
import "./chunk-LMEOPAGQ.js";
import "./chunk-YIV2QKTZ.js";
import "./chunk-A3VAC24F.js";
import "./chunk-FPSA4NFH.js";
import "./chunk-UY6B6IVT.js";
import {
  C
} from "./chunk-6PV45IYU.js";
import "./chunk-SRQCQD63.js";
import "./chunk-FIRNXFAH.js";
import "./chunk-O5TPFXRT.js";
import "./chunk-Q6XRAGMA.js";
import "./chunk-JUAPMINU.js";
import "./chunk-PK2ZR2SJ.js";
import "./chunk-YFPGM5UE.js";
import "./chunk-OXSERRAR.js";
import "./chunk-7HI4VRVW.js";
import "./chunk-ZX46THLM.js";
import "./chunk-Y2ZIOB7Y.js";
import "./chunk-KTUX3OKX.js";
import "./chunk-E3KEUGUG.js";
import {
  m2 as m
} from "./chunk-N3XLUQJI.js";
import "./chunk-JUAD7TJ6.js";
import "./chunk-VHLUKPRH.js";
import "./chunk-5TPMG26T.js";
import "./chunk-3NBBZ43U.js";
import "./chunk-VOLWOTEG.js";
import "./chunk-XTNIDRTB.js";
import "./chunk-FGWIXJQY.js";
import "./chunk-TKYAZCMB.js";
import "./chunk-3TBMFSPB.js";
import "./chunk-PSZLDJJA.js";
import "./chunk-ZWFY3WY5.js";
import "./chunk-LQFTAGIV.js";
import "./chunk-S7IJH524.js";
import "./chunk-GZ2P4SCJ.js";
import {
  i2 as i,
  s
} from "./chunk-XWG6QGFK.js";
import {
  a
} from "./chunk-GWNLQRNM.js";
import "./chunk-FXKORAMT.js";
import "./chunk-GNMFMITH.js";

// node_modules/@arcgis/core/arcade.js
var y = null;
function f(e2, t2, a2, n = {}) {
  const o = t2.elementType, c = "value", s2 = "array" === o.type ? [{ name: c, type: o.type, elementType: o.elementType }] : "dictionary" === o.type ? [{ name: c, type: o.type, properties: o.properties }] : [{ name: c, type: o.type }];
  return new t(e2.map((e3) => {
    const t3 = {};
    return g2(t3, s2, { [c]: e3 }, a2, n), t3[c];
  }));
}
function d2(e2, t2, r2 = {}) {
  const a2 = e2 instanceof g ? new Xe({ source: e2.features, geometryType: e2.geometryType, fields: e2.fields, spatialReference: e2.spatialReference }) : e2;
  return t2.constructFeatureSet(a2, r2.spatialReference, null, true, r2.lruCache, r2.interceptor);
}
function b(e2, t2, r2 = {}) {
  const { spatialReference: a2, interceptor: n, lruCache: o } = r2;
  return "string" == typeof e2 ? t2.createFeatureSetCollectionFromService(e2, a2, o, n) : t2.createFeatureSetCollectionFromMap(e2, a2, o, n);
}
function v(e2, t2, r2, a2 = {}) {
  const n = /* @__PURE__ */ Object.create(null);
  return g2(n, t2.properties, e2, r2, a2), new y.Dictionary(n);
}
function g2(e2, r2, a2, n, o = {}) {
  const c = {};
  for (const t2 of Object.keys(a2)) c[t2.toLowerCase()] = a2[t2];
  for (const p of r2) {
    const r3 = p.name.toLowerCase();
    if (o.variablesPreProcessed) e2[r3] = c[r3];
    else switch (p.type) {
      case "array": {
        const t2 = c[r3];
        e2[r3] = null == t2 ? null : f(t2, p, n, o);
        break;
      }
      case "feature": {
        const t2 = c[r3];
        e2[r3] = null == t2 ? null : y.Feature.createFromGraphic(t2, o?.timeZone);
        break;
      }
      case "featureSet": {
        const t2 = c[r3];
        e2[r3] = null == t2 ? null : n ? d2(t2, n, o) : null;
        break;
      }
      case "featureSetCollection": {
        const t2 = c[r3];
        e2[r3] = null == t2 ? null : n ? b(t2, n, o) : null;
        break;
      }
      case "dictionary": {
        const t2 = c[r3];
        e2[r3] = null == t2 ? null : v(t2, p, n, o);
        break;
      }
      case "date": {
        const a3 = c[r3];
        e2[r3] = a3 ? a3 instanceof h ? a3 : o?.timeZone ? h.dateJSAndZoneToArcadeDate(a3, o?.timeZone) : h.dateJSToArcadeDate(a3) : null;
        break;
      }
      case "dateOnly": {
        const t2 = c[r3];
        e2[r3] = t2 ? t2 instanceof i2 ? t2 : i2.fromReader(t2) : null;
        break;
      }
      case "time": {
        const t2 = c[r3];
        e2[r3] = t2 ? t2 instanceof r ? t2 : r.fromReader(t2) : null;
        break;
      }
      case "knowledgeGraph":
      case "geometry":
      case "boolean":
      case "text":
      case "number":
        e2[r3] = c[r3];
        break;
      case "voxel": {
        const t2 = c[r3];
        e2[r3] = null == t2 ? null : new y.Voxel(t2, o?.timeZone);
        break;
      }
    }
  }
}
function w(e2, t2) {
  for (const r2 of e2) t2.push(r2), "dictionary" === r2.type && w(r2.properties, t2);
  return t2;
}
function S(e2, t2, r2, a2, n) {
  const { spatialReference: o, interceptor: c, lruCache: s2, console: i3, abortSignal: p, timeZone: l, services: m2 = { portal: C.getDefault() } } = r2, y2 = { vars: {}, spatialReference: o, interceptor: c, timeZone: l, lrucache: s2, useAsync: n, services: m2, console: i3, abortSignal: p };
  return t2 ? (g2(y2.vars, e2.variables, t2, a2, r2), y2) : y2;
}
function h2(t2, r2) {
  switch (r2.getArcadeType(t2)) {
    case "number":
    case "text":
    case "boolean":
    case "point":
    case "polygon":
    case "polyline":
    case "multipoint":
    case "extent":
      return t2;
    case "date":
      return t2.toJSDate();
    case "time":
    case "dateOnly":
      return t2.toString();
    case "feature": {
      const r3 = (t2.type, t2), a2 = "geometry" in r3 ? r3.geometry() : null, n = "readAttributes" in r3 ? r3.readAttributes() : r3.attributes;
      return new d({ geometry: a2, attributes: n });
    }
    case "dictionary": {
      const e2 = t2, a2 = e2.attributes, n = {};
      for (const t3 of Object.keys(a2)) n[t3] = h2(e2.field(t3), r2);
      return n;
    }
    case "array":
      return ("toArray" in t2 ? t2.toArray() : t2).map((e2) => h2(e2, r2));
  }
  return t2;
}
var $ = { variables: [{ name: "$feature", type: "feature" }, { name: "$layer", type: "featureSet" }, { name: "$datastore", type: "featureSetCollection" }, { name: "$map", type: "featureSetCollection" }, { name: "$userInput", type: "geometry" }, { name: "$graph", type: "knowledgeGraph" }, { name: "$view", type: "dictionary", properties: [{ name: "scale", type: "number" }, { name: "timeProperties", type: "dictionary", properties: [{ name: "currentStart", type: "date" }, { name: "currentEnd", type: "date" }, { name: "startIncluded", type: "boolean" }, { name: "endIncluded", type: "boolean" }] }] }] };
var x = { variables: [{ name: "$feature", type: "feature" }, { name: "$aggregatedFeatures", type: "featureSet" }, { name: "$view", type: "dictionary", properties: [{ name: "scale", type: "number" }, { name: "timeProperties", type: "dictionary", properties: [{ name: "currentStart", type: "date" }, { name: "currentEnd", type: "date" }, { name: "startIncluded", type: "boolean" }, { name: "endIncluded", type: "boolean" }] }] }] };
var C2 = { variables: [{ name: "$voxel", type: "voxel" }] };
var j = /* @__PURE__ */ new Map([["aggregate-field", { variables: [{ name: "$feature", type: "feature" }] }], ["form-constraint", { variables: [{ name: "$feature", type: "feature" }] }], ["feature-z", { variables: [{ name: "$feature", type: "feature" }] }], ["field-calculation", { variables: [{ name: "$feature", type: "feature" }, { name: "$datastore", type: "featureSetCollection" }] }], ["form-calculation", { variables: [{ name: "$feature", type: "feature" }, { name: "$originalFeature", type: "feature" }, { name: "$layer", type: "featureSet" }, { name: "$featureSet", type: "featureSet" }, { name: "$datastore", type: "featureSetCollection" }, { name: "$map", type: "featureSetCollection" }, { name: "$editContext", type: "dictionary", properties: [{ name: "editType", type: "text" }] }] }], ["labeling", { variables: [{ name: "$feature", type: "feature" }, { name: "$view", type: "dictionary", properties: [{ name: "scale", type: "number" }, { name: "timeProperties", type: "dictionary", properties: [{ name: "currentStart", type: "date" }, { name: "currentEnd", type: "date" }, { name: "startIncluded", type: "boolean" }, { name: "endIncluded", type: "boolean" }] }] }] }], ["popup", $], ["popup-element", $], ["popup-feature-reduction", x], ["popup-element-feature-reduction", x], ["visualization", { variables: [{ name: "$feature", type: "feature" }, { name: "$view", type: "dictionary", properties: [{ name: "scale", type: "number" }, { name: "timeProperties", type: "dictionary", properties: [{ name: "currentStart", type: "date" }, { name: "currentEnd", type: "date" }, { name: "startIncluded", type: "boolean" }, { name: "endIncluded", type: "boolean" }] }] }] }], ["popup-voxel", C2], ["popup-element-voxel", C2]]);
function A(e2) {
  "feature-reduction-popup" === e2 ? (m(i.getLogger("esri.arcade"), 'profile name: "feature-reduction-popup"', { replacement: '"popup-feature-reduction"', version: "4.32", warnOnce: true }), e2 = "popup-feature-reduction") : "feature-reduction-popup-element" === e2 && (m(i.getLogger("esri.arcade"), 'profile name: "feature-reduction-popup-element"', { replacement: '"popup-element-feature-reduction"', version: "4.32", warnOnce: true }), e2 = "popup-element-feature-reduction");
  const t2 = j.get(e2);
  if (!t2) {
    const t3 = Array.from(j.keys()).map((e3) => `'${e3}'`).join(", ");
    throw new s("createArcadeProfile:invalid-profile-name", `Invalid profile name '${e2}'. You must specify one of the following values: ${t3}`);
  }
  return a(t2);
}
async function k(e2, t2, r2 = {}) {
  y || (y = await e());
  const { arcade: a2, arcadeUtils: o, batchExec: { createBatchExecutor: c }, aiServices: { BatchTranslationServiceFactory: s2, PortalTranslationService: i3 } } = y, { loadScriptDependencies: p, referencesMember: l, scriptIsAsync: f2 } = a2, d3 = w(t2.variables, []), b2 = d3.filter((e3) => "featureSet" === e3.type || "featureSetCollection" === e3.type).map((e3) => e3.name.toLowerCase()), v2 = a2.parseScript(e2, b2);
  if (!v2) throw new s("arcade:invalid-script", "Unable to create SyntaxTree");
  const g3 = o.extractFieldNames(v2), $2 = a2.scriptTouchesGeometry(v2), x2 = d3.map((e3) => e3.name.toLowerCase()).filter((e3) => l(v2, e3)), C3 = f2(v2, b2);
  await p(v2, C3, b2);
  const j2 = { vars: {}, useAsync: C3 };
  for (const n of x2) j2.vars[n] = "any";
  const { lruCache: A2, services: k2 } = r2, T = a2.compileScript(v2, j2), F = a2.featureSetUtils(), I = (e3, r3 = {}) => {
    if (C3) throw new s("arcade:invalid-execution-mode", "Cannot execute the script in synchronous mode");
    const a3 = { ...k2, ...r3.services }, c2 = { lruCache: A2, ...r3, services: a3 }, s3 = T(S(t2, e3, c2, F, C3));
    return r3.rawOutput ? s3 : h2(s3, o);
  }, O = async (e3, r3 = {}) => {
    const a3 = { ...k2, ...r3.services }, n = { lruCache: A2, ...r3, services: a3 }, c2 = await T(S(t2, e3, n, F, C3));
    return r3.rawOutput ? c2 : h2(c2, o);
  }, D = async (e3, r3, a3 = {}) => {
    const n = [], p2 = c(e3, async (e4, c2) => {
      const s3 = r3(e4);
      try {
        const e5 = { ...l2, translation: m2.create(c2) }, r4 = { lruCache: A2, ...a3, services: e5 }, i4 = await T(S(t2, s3, r4, F, C3)), p3 = a3.rawOutput ? i4 : h2(i4, o);
        n.push({ id: c2.id, result: { status: "fulfilled", value: p3 } });
      } catch (i4) {
        throw n.push({ id: c2.id, result: { status: "rejected", reason: i4 } }), i4;
      }
    }, a3.maxConcurrency ?? 64, a3.abortSignal), l2 = { ...k2, ...a3.services }, m2 = new s2(p2, l2.translation ?? new i3(l2.portal ?? C.getDefault(), a3.console));
    return await p2.run(), n.sort(({ id: e4 }, { id: t3 }) => e4 - t3).map(({ result: e4 }) => e4);
  };
  return { execute: I, executeAsync: O, executeAsyncBatch: D, isAsync: C3, variablesUsed: x2, fieldsUsed: g3, geometryUsed: $2, syntaxTree: v2 };
}
export {
  k as createArcadeExecutor,
  A as createArcadeProfile
};
//# sourceMappingURL=arcade-BK5TQQFO.js.map
