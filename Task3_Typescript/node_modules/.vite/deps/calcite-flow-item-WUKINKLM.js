import {
  SLOTS
} from "./chunk-TNUT2ZSI.js";
import "./chunk-ZAFFSROT.js";
import "./chunk-DTJMJGOI.js";
import "./chunk-WYF34MB4.js";
import "./chunk-BRUOKITX.js";
import "./chunk-KUPPO7IZ.js";
import "./chunk-VVRDMPXN.js";
import "./chunk-67OXY2P7.js";
import "./chunk-D257XFGU.js";
import "./chunk-YK5JRZRQ.js";
import "./chunk-7JUQWAV4.js";
import {
  keyed
} from "./chunk-MDFGHTOD.js";
import {
  InteractiveContainer,
  updateHostInteraction
} from "./chunk-JKGFEKFK.js";
import {
  componentFocusable
} from "./chunk-YPMRATRJ.js";
import {
  ref
} from "./chunk-ANGWRBN5.js";
import "./chunk-QZRFQNCS.js";
import "./chunk-F3MCMPIO.js";
import "./chunk-E2AFNPMT.js";
import {
  getElementDir
} from "./chunk-LYDL4SGT.js";
import "./chunk-33KS4OQR.js";
import {
  useT9n
} from "./chunk-35ZL4FO6.js";
import "./chunk-6TXQF3OH.js";
import {
  LitElement,
  createEvent,
  css,
  customElement,
  html,
  nothing,
  safeClassMap
} from "./chunk-77M4J56U.js";
import "./chunk-GNMFMITH.js";

// node_modules/@esri/calcite-components/dist/components/calcite-flow-item/customElement.js
var CSS = {
  backButton: "back-button"
};
var ICONS = {
  backLeft: "chevron-left",
  backRight: "chevron-right"
};
var SLOTS2 = {
  actionBar: "action-bar",
  alerts: "alerts",
  contentTop: "content-top",
  contentBottom: "content-bottom",
  headerActionsStart: "header-actions-start",
  headerActionsEnd: "header-actions-end",
  headerMenuActions: "header-menu-actions",
  headerContent: "header-content",
  fab: "fab",
  footer: "footer",
  footerActions: "footer-actions",
  footerEnd: "footer-end",
  footerStart: "footer-start"
};
var styles = css`:host{box-sizing:border-box;background-color:var(--calcite-color-foreground-1);color:var(--calcite-color-text-2);font-size:var(--calcite-font-size--1)}:host *{box-sizing:border-box}:host([disabled]){cursor:default;-webkit-user-select:none;user-select:none;opacity:var(--calcite-opacity-disabled)}:host([disabled]) *,:host([disabled]) ::slotted(*){pointer-events:none}:host{position:relative;display:none;inline-size:100%;flex:1 1 auto;overflow:hidden}:host([selected]){display:flex}:host([disabled]) ::slotted([calcite-hydrated][disabled]),:host([disabled]) [calcite-hydrated][disabled]{opacity:1}.interaction-container{display:contents}.back-button{border-width:0px;border-style:solid;border-inline-end-width:1px;border-color:var(--calcite-flow-border-color, var(--calcite-color-border-3))}calcite-panel{--calcite-panel-background-color: var(--calcite-flow-background-color);--calcite-panel-border-color: var(--calcite-flow-border-color, var(--calcite-flow-item-header-border-block-end));--calcite-panel-corner-radius: var(--calcite-flow-corner-radius);--calcite-panel-description-text-color: var(--calcite-flow-description-text-color);--calcite-panel-footer-background-color: var(--calcite-flow-footer-background-color);--calcite-panel-footer-space: var(--calcite-flow-footer-space, var(--calcite-flow-item-footer-padding));--calcite-panel-header-action-background-color-hover: var(--calcite-flow-header-action-background-color-hover);--calcite-panel-header-action-background-color-press: var(--calcite-flow-header-action-background-color-press);--calcite-panel-header-action-background-color: var(--calcite-flow-header-action-background-color);--calcite-panel-header-action-indicator-color: var(--calcite-flow-header-action-indicator-color);--calcite-panel-header-action-text-color-press: var(--calcite-flow-header-action-text-color-press);--calcite-panel-header-action-text-color: var(--calcite-flow-header-action-text-color);--calcite-panel-header-background-color: var(--calcite-flow-header-background-color);--calcite-panel-header-content-space: var(--calcite-flow-header-content-space);--calcite-panel-heading-text-color: var(--calcite-flow-heading-text-color);--calcite-panel-space: var(--calcite-flow-space)}:host([hidden]){display:none}[hidden]{display:none}`;
var _FlowItem = class _FlowItem extends LitElement {
  constructor() {
    super(...arguments);
    this.messages = useT9n();
    this.closable = false;
    this.closed = false;
    this.collapseDirection = "down";
    this.collapsed = false;
    this.collapsible = false;
    this.disabled = false;
    this.loading = false;
    this.menuOpen = false;
    this.overlayPositioning = "absolute";
    this.scale = "m";
    this.selected = false;
    this.showBackButton = false;
    this.calciteFlowItemBack = createEvent();
    this.calciteFlowItemClose = createEvent({ cancelable: false });
    this.calciteFlowItemScroll = createEvent({ cancelable: false });
    this.calciteFlowItemToggle = createEvent({ cancelable: false });
    this.calciteInternalFlowItemChange = createEvent({ cancelable: false });
  }
  async scrollContentTo(options) {
    await this.containerEl?.scrollContentTo(options);
  }
  async setFocus() {
    await componentFocusable(this);
    const { backButtonEl, containerEl } = this;
    if (backButtonEl) {
      return backButtonEl.setFocus();
    } else if (containerEl) {
      return containerEl.setFocus();
    }
  }
  willUpdate(changes) {
    if (changes.has("selected") && (this.hasUpdated || this.selected !== false)) {
      this.calciteInternalFlowItemChange.emit();
    }
  }
  updated() {
    updateHostInteraction(this);
  }
  handleInternalPanelScroll(event) {
    if (event.target !== this.containerEl) {
      return;
    }
    event.stopPropagation();
    this.calciteFlowItemScroll.emit();
  }
  handleInternalPanelClose(event) {
    if (event.target !== this.containerEl) {
      return;
    }
    event.stopPropagation();
    this.closed = true;
    this.calciteFlowItemClose.emit();
  }
  handleInternalPanelToggle(event) {
    if (event.target !== this.containerEl) {
      return;
    }
    event.stopPropagation();
    this.collapsed = event.target.collapsed;
    this.calciteFlowItemToggle.emit();
  }
  backButtonClick() {
    this.calciteFlowItemBack.emit();
  }
  setBackRef(node) {
    this.backButtonEl = node;
  }
  setContainerRef(node) {
    this.containerEl = node;
  }
  renderBackButton() {
    const { el } = this;
    const rtl = getElementDir(el) === "rtl";
    const { showBackButton, backButtonClick, messages } = this;
    const label = messages.back;
    const icon = rtl ? ICONS.backRight : ICONS.backLeft;
    return showBackButton ? keyed("flow-back-button", html`<calcite-action .ariaLabel=${label} class=${safeClassMap(CSS.backButton)} .icon=${icon} @click=${backButtonClick} scale=s slot=header-actions-start .text=${label} title=${label ?? nothing} ${ref(this.setBackRef)}></calcite-action>`) : null;
  }
  render() {
    const { collapsed, collapseDirection, collapsible, closable, closed, description, disabled, heading, headingLevel, loading, menuOpen, messages, overlayPositioning, beforeClose } = this;
    return InteractiveContainer({ disabled, children: html`<calcite-panel .beforeClose=${beforeClose} .closable=${closable} .closed=${closed} .collapseDirection=${collapseDirection} .collapsed=${collapsed} .collapsible=${collapsible} .description=${description} .disabled=${disabled} .heading=${heading} .headingLevel=${headingLevel} .loading=${loading} .menuOpen=${menuOpen} .messageOverrides=${messages} @calcitePanelClose=${this.handleInternalPanelClose} @calcitePanelScroll=${this.handleInternalPanelScroll} @calcitePanelToggle=${this.handleInternalPanelToggle} .overlayPositioning=${overlayPositioning} .scale=${this.scale} ${ref(this.setContainerRef)}>${this.renderBackButton()}<slot name=${SLOTS2.actionBar} slot=${SLOTS.actionBar}></slot><slot name=${SLOTS2.alerts} slot=${SLOTS.alerts}></slot><slot name=${SLOTS2.headerActionsStart} slot=${SLOTS.headerActionsStart}></slot><slot name=${SLOTS2.headerActionsEnd} slot=${SLOTS.headerActionsEnd}></slot><slot name=${SLOTS2.headerContent} slot=${SLOTS.headerContent}></slot><slot name=${SLOTS2.headerMenuActions} slot=${SLOTS.headerMenuActions}></slot><slot name=${SLOTS2.fab} slot=${SLOTS.fab}></slot><slot name=${SLOTS2.contentTop} slot=${SLOTS.contentTop}></slot><slot name=${SLOTS2.contentBottom} slot=${SLOTS.contentBottom}></slot><slot name=${SLOTS2.footerStart} slot=${SLOTS.footerStart}></slot><slot name=${SLOTS2.footer} slot=${SLOTS.footer}></slot><slot name=${SLOTS2.footerEnd} slot=${SLOTS.footerEnd}></slot><slot name=${SLOTS2.footerActions} slot=${SLOTS.footerActions}></slot><slot></slot></calcite-panel>` });
  }
};
_FlowItem.properties = { beforeBack: [0, {}, { attribute: false }], beforeClose: [0, {}, { attribute: false }], closable: [7, {}, { reflect: true, type: Boolean }], closed: [7, {}, { reflect: true, type: Boolean }], collapseDirection: 1, collapsed: [7, {}, { reflect: true, type: Boolean }], collapsible: [7, {}, { reflect: true, type: Boolean }], description: 1, disabled: [7, {}, { reflect: true, type: Boolean }], heading: 1, headingLevel: [11, {}, { type: Number, reflect: true }], loading: [7, {}, { reflect: true, type: Boolean }], menuOpen: [7, {}, { reflect: true, type: Boolean }], messageOverrides: [0, {}, { attribute: false }], overlayPositioning: [3, {}, { reflect: true }], scale: [3, {}, { reflect: true }], selected: [7, {}, { reflect: true, type: Boolean }], showBackButton: [5, {}, { type: Boolean }] };
_FlowItem.styles = styles;
var FlowItem = _FlowItem;
customElement("calcite-flow-item", FlowItem);
export {
  FlowItem
};
/*! Bundled license information:

@esri/calcite-components/dist/components/calcite-flow-item/customElement.js:
  (*! All material copyright ESRI, All Rights Reserved, unless otherwise specified.
  See https://github.com/Esri/calcite-design-system/blob/dev/LICENSE.md for details.
  v3.2.1 *)
*/
//# sourceMappingURL=calcite-flow-item-WUKINKLM.js.map
