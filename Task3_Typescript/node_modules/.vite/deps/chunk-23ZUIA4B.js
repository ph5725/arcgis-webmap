import {
  Q,
  _ as _2,
  ue
} from "./chunk-Z5EDZREM.js";
import {
  _
} from "./chunk-Q6XRAGMA.js";

// node_modules/@arcgis/core/layers/support/rasterDatasets/EphemeralBlockCache.js
var t = class {
  constructor(t2 = 15e3, e = 5e3) {
    this._timer = null, this._cachedBlocks = /* @__PURE__ */ new Map(), this._size = -1, this._duration = t2, this._interval = Math.min(t2, e);
  }
  decreaseRefCount(t2, e) {
    const s2 = t2 + "/" + e, r2 = this._cachedBlocks;
    if (r2.has(s2)) {
      const t3 = r2.get(s2);
      return t3.refCount--, t3.refCount <= 0 && (r2.delete(s2), t3.controller && t3.controller.abort()), t3.refCount;
    }
    return 0;
  }
  getBlock(t2, e) {
    const s2 = t2 + "/" + e, r2 = this._cachedBlocks;
    if (r2.has(s2)) {
      const t3 = r2.get(s2);
      return t3.ts = Date.now(), t3.refCount++, r2.delete(s2), r2.set(s2, t3), t3.block;
    }
    return null;
  }
  putBlock(t2, e, s2, r2) {
    const i2 = this._cachedBlocks, c2 = t2 + "/" + e;
    if (i2.has(c2)) {
      const t3 = i2.get(c2);
      t3.ts = Date.now(), t3.refCount++;
    } else i2.set(c2, { block: s2, ts: Date.now(), refCount: 1, controller: r2 });
    this._trim(), this._updateTimer();
  }
  deleteBlock(t2, e) {
    const s2 = this._cachedBlocks, r2 = t2 + "/" + e;
    s2.has(r2) && s2.delete(r2);
  }
  updateMaxSize(t2) {
    this._size = t2, this._trim();
  }
  empty() {
    this._cachedBlocks.clear(), this._clearTimer();
  }
  getCurrentSize() {
    return this._cachedBlocks.size;
  }
  _updateTimer() {
    if (null != this._timer) return;
    const t2 = this._cachedBlocks;
    this._timer = setInterval(() => {
      const e = Array.from(t2), s2 = Date.now();
      for (let r2 = 0; r2 < e.length && e[r2][1].ts <= s2 - this._duration; r2++) t2.delete(e[r2][0]);
      0 === t2.size && this._clearTimer();
    }, this._interval);
  }
  _trim() {
    const t2 = this._cachedBlocks;
    if (-1 === this._size || this._size >= t2.size) return;
    const e = Array.from(t2);
    for (let s2 = 0; s2 < e.length - this._size; s2++) t2.delete(e[s2][0]);
  }
  _clearTimer() {
    null != this._timer && (clearInterval(this._timer), this._timer = null);
  }
};

// node_modules/@arcgis/core/layers/support/rasterDatasets/RawBlockCache.js
var r = /* @__PURE__ */ new Map();
var c = new t();
function i(e, n, t2) {
  const o = [];
  return null != n && o.push(`sliceId=${n}`), null != t2 && o.push(`bandIds=${t2.join(",")}`), o.length ? `${e}?${o.join("&")}` : e;
}
function u(e, n) {
  const t2 = { extent: null, rasterInfo: n, cache: /* @__PURE__ */ new Map() }, o = r.get(e);
  return o ? (o.push(t2), o.length - 1) : (r.set(e, [t2]), 0);
}
function a(e, n) {
  const t2 = r.get(e);
  t2 && (t2[n] = null, t2.some((e2) => null != e2) || r.delete(e));
}
function s(e, n, t2) {
  const o = r.get(e);
  if (!o) return null == n ? c.decreaseRefCount(e, t2) : 0;
  if (null == n || null == o[n]) return c.decreaseRefCount(e, t2);
  const l = o[n]?.cache, i2 = l?.get(t2);
  if (l && i2) {
    if (i2.refCount--, 0 === i2.refCount) {
      l.delete(t2);
      for (let e2 = 0; e2 < o.length; e2++) o[e2]?.cache.delete(t2);
      i2.controller && i2.controller.abort();
    }
    return i2.refCount;
  }
  return 0;
}
function m(e, n, t2) {
  const o = r.get(e);
  if (!o) return null == n ? c.getBlock(e, t2) : null;
  if (null == n || null == o[n]) {
    for (let e2 = 0; e2 < o.length; e2++) {
      const n2 = o[e2]?.cache.get(t2);
      if (n2) return n2.refCount++, n2.block;
    }
    return c.getBlock(e, t2);
  }
  const l = o[n]?.cache.get(t2);
  if (l) return l.refCount++, l.block;
  for (let r2 = 0; r2 < o.length; r2++) {
    if (r2 === n || !o[r2]) continue;
    const e2 = o[r2]?.cache, l2 = e2?.get(t2);
    if (e2 && l2) return l2.refCount++, e2.set(t2, l2), l2.block;
  }
  return null;
}
function h(e, n, t2, o, l = null) {
  const i2 = r.get(e);
  if (!i2) return void (null == n && c.putBlock(e, t2, o, l));
  if (null == n || null == i2[n]) return void c.putBlock(e, t2, o, l);
  const u2 = { refCount: 1, block: o, isResolved: false, isRejected: false, controller: l };
  o.then(() => u2.isResolved = true).catch(() => u2.isRejected = true), i2[n]?.cache.set(t2, u2);
}
function x(e, n, t2) {
  const o = r.get(e);
  o ? null != n && null != o[n] ? o[n]?.cache.delete(t2) : c.deleteBlock(e, t2) : null == n && c.deleteBlock(e, t2);
}
function d(e, n) {
  const t2 = r.get(e);
  return t2 ? t2[n] ?? null : null;
}
function g(n, r2, c2, i2, u2, a2, f = null) {
  const s2 = d(n, r2);
  if (!s2) return;
  const m2 = s2.extent, { cache: h2, rasterInfo: x2 } = s2;
  if (m2 && m2.xmin === c2.xmin && m2.xmax === c2.xmax && m2.ymin === c2.ymin && m2.ymax === c2.ymax) return;
  i2 = i2 ?? 0;
  const g2 = c2.clone().normalize(), { spatialReference: p, transform: y } = x2, k = /* @__PURE__ */ new Set();
  for (let d2 = 0; d2 < g2.length; d2++) {
    const n2 = g2[d2];
    if (n2.xmax - n2.xmin <= i2 || n2.ymax - n2.ymin <= i2) continue;
    let r3 = Q(n2, p, f);
    if (null == r3) continue;
    if (null != y && (r3 = y.inverseTransform(r3), null == r3)) continue;
    const c3 = new _({ x: i2, y: i2, spatialReference: n2.spatialReference });
    if (null == u2 && !(u2 = _2(c3, p, n2, f))) return;
    const { pyramidLevel: s3, pyramidResolution: m3, excessiveReading: h3 } = ue(u2, x2, a2 || "closest");
    if (h3) return;
    const { storageInfo: M } = x2, { origin: R } = M, { x: C, y: B } = m3, b = Math.max(0, Math.floor((r3.xmin - R.x) / C)), j = Math.max(0, Math.floor((R.y - r3.ymax) / B)), v = Math.ceil(r3.width / C - 0.1), w = Math.ceil(r3.height / B - 0.1), $ = s3 > 0 ? M.pyramidBlockWidth : M.blockWidth, I = s3 > 0 ? M.pyramidBlockHeight : M.blockHeight, H = M.blockBoundary[s3];
    if (!H) continue;
    const E = 1, P = Math.max(H.minCol, Math.floor(b / $) - E), W = Math.max(H.minRow, Math.floor(j / I) - E), z = Math.min(H.maxCol, Math.floor((b + v - 1) / $) + E), F = Math.min(H.maxRow, Math.floor((j + w - 1) / I) + E);
    for (let e = W; e <= F; e++) for (let n3 = P; n3 <= z; n3++) k.add(`${s3}/${e}/${n3}`);
  }
  h2.forEach((e, n2) => {
    if (!k.has(n2)) {
      const e2 = h2.get(n2);
      (null == e2 || e2.isResolved || e2.isRejected) && h2.delete(n2);
    }
  }), s2.extent = { xmin: c2.xmin, ymin: c2.ymin, xmax: c2.xmax, ymax: c2.ymax };
}

export {
  i,
  u,
  a,
  s,
  m,
  h,
  x,
  g
};
//# sourceMappingURL=chunk-23ZUIA4B.js.map
