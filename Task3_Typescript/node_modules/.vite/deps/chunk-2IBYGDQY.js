import {
  S,
  a
} from "./chunk-H6F6O2KE.js";
import {
  B,
  L,
  M,
  P,
  X
} from "./chunk-BZYXFNL4.js";

// node_modules/@arcgis/core/views/webgl/rasterUtils.js
function s(t, s2, m2 = "nearest", l3 = false) {
  const c2 = !(l3 && "u8" === s2.pixelType), f = c2 ? X.FLOAT : X.UNSIGNED_BYTE, p = null == s2.pixels || 0 === s2.pixels.length ? null : c2 ? s2.getAsRGBAFloat() : s2.getAsRGBA(), _ = t.capabilities.textureFloatLinear, g = new a();
  return g.width = s2.width, g.height = s2.height, g.internalFormat = c2 ? B.RGBA32F : M.RGBA, g.samplingMode = !_ || "bilinear" !== m2 && "cubic" !== m2 ? L.NEAREST : L.LINEAR, g.dataType = f, g.wrapMode = P.CLAMP_TO_EDGE, new S(t, g, p);
}
function m(t, r) {
  const { spacing: s2, offsets: m2, coefficients: l3, size: [c2, f] } = r, p = s2[0] > 1, _ = new a();
  _.width = p ? 4 * c2 : c2, _.height = f, _.internalFormat = B.RGBA32F, _.dataType = X.FLOAT, _.samplingMode = L.NEAREST, _.wrapMode = P.CLAMP_TO_EDGE;
  const g = new Float32Array(p ? c2 * f * 16 : 2 * m2.length);
  if (p && null != l3) for (let e = 0, n = 0; e < l3.length; e++) g[n++] = l3[e], e % 3 == 2 && (g[n++] = 1);
  else for (let e = 0; e < f; e++) for (let t2 = 0; t2 < c2; t2++) {
    const n = 4 * (e * c2 + t2), a2 = 2 * (t2 * f + e);
    g[n] = m2[a2], g[n + 1] = m2[a2 + 1], g[n + 3] = -1 === m2[a2] ? 0 : 1;
  }
  return new S(t, _, g);
}
function l2(t, e) {
  const n = new a();
  return n.internalFormat = M.RGBA, n.width = e.length / 4, n.height = 1, n.samplingMode = L.NEAREST, n.wrapMode = P.CLAMP_TO_EDGE, new S(t, n, e);
}
function c(t, e, s2) {
  const m2 = new a();
  return m2.internalFormat = M.ALPHA, m2.pixelFormat = M.ALPHA, m2.dataType = X.UNSIGNED_BYTE, m2.width = s2[0], m2.height = s2[1], m2.samplingMode = L.NEAREST, m2.wrapMode = P.CLAMP_TO_EDGE, new S(t, m2, e);
}

export {
  s,
  m,
  l2 as l,
  c
};
//# sourceMappingURL=chunk-2IBYGDQY.js.map
