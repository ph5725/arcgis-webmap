import {
  i as i2
} from "./chunk-VHTQ5H2C.js";
import {
  q
} from "./chunk-YX2VTIZR.js";
import {
  x
} from "./chunk-LYSDGL5S.js";
import {
  f as f2
} from "./chunk-N3A2BVTW.js";
import {
  l as l2
} from "./chunk-IGYEHOTB.js";
import {
  a as a2
} from "./chunk-TVM3SZJR.js";
import {
  f
} from "./chunk-A3VAC24F.js";
import {
  l
} from "./chunk-E3KEUGUG.js";
import {
  e3 as e,
  m,
  p
} from "./chunk-N3XLUQJI.js";
import {
  a2 as a
} from "./chunk-JUAD7TJ6.js";
import {
  r
} from "./chunk-5TPMG26T.js";
import {
  t
} from "./chunk-LQFTAGIV.js";
import {
  i2 as i
} from "./chunk-XWG6QGFK.js";

// node_modules/@arcgis/core/Graphic.js
var c;
function f3(t2) {
  if (!t2) return null;
  const e2 = {};
  for (const r2 in t2) {
    const s = f2(t2[r2]);
    s && (e2[r2] = s);
  }
  return 0 !== Object.keys(e2).length ? e2 : null;
}
function b(t2) {
  if (null == t2) return null;
  const e2 = {};
  for (const r2 in t2) {
    const s = t2[r2];
    s && (e2[r2] = s.toJSON());
  }
  return 0 !== Object.keys(e2).length ? e2 : null;
}
var _a;
var d = (_a = class extends a2.ClonableMixin(l) {
  constructor(t2) {
    super(t2), this.isAggregate = false, this.layer = null, this.origin = null, this.sourceLayer = null, this._version = 0, Object.defineProperty(this, "uid", { value: e(), configurable: true }), Object.defineProperty(this, "_lastMeshTransform", { value: {}, configurable: true, writable: true, enumerable: false }), arguments.length > 1 && p(i.getLogger(this), "Graphic", { version: "4.30" });
  }
  initialize() {
    this._watchMeshGeometryChanges();
  }
  set aggregateGeometries(t2) {
    const e2 = this._get("aggregateGeometries");
    JSON.stringify(e2) !== JSON.stringify(t2) && this._set("aggregateGeometries", t2);
  }
  set attributes(t2) {
    const e2 = this._get("attributes");
    e2 !== t2 && (this._set("attributes", t2), this._notifyLayer("attributes", e2, t2));
  }
  set geometry(t2) {
    const e2 = this._get("geometry");
    e2 !== t2 && (this._set("geometry", t2), "mesh" !== t2?.type && this._notifyLayer("geometry", e2, t2));
  }
  set popupTemplate(t2) {
    const e2 = this._get("popupTemplate");
    e2 !== t2 && (this._set("popupTemplate", t2), this._notifyLayer("popupTemplate", e2, t2));
  }
  set symbol(t2) {
    const e2 = this._get("symbol");
    e2 !== t2 && (this._set("symbol", t2), this._notifyLayer("symbol", e2, t2));
  }
  get version() {
    return this._version;
  }
  set visible(t2) {
    const e2 = this._get("visible");
    e2 !== t2 && (this._set("visible", t2), this._notifyLayer("visible", e2, t2));
  }
  cloneShallow() {
    return new c({ aggregateGeometries: this.aggregateGeometries, attributes: this.attributes, geometry: this.geometry, isAggregate: this.isAggregate, layer: this.layer, popupTemplate: this.popupTemplate, sourceLayer: this.sourceLayer, symbol: this.symbol, visible: this.visible, origin: this.origin });
  }
  getEffectivePopupTemplate(t2 = false) {
    if (this.popupTemplate) return this.popupTemplate;
    const e2 = this.origin && "layer" in this.origin ? this.origin.layer : null;
    for (const r2 of [e2, this.sourceLayer, this.layer]) if (r2) {
      if ("popupTemplate" in r2 && r2.popupTemplate) return r2.popupTemplate;
      if (t2 && "defaultPopupTemplate" in r2 && null != r2.defaultPopupTemplate) return r2.defaultPopupTemplate;
    }
    return null;
  }
  getAttribute(t2) {
    return this.attributes?.[t2];
  }
  setAttribute(t2, e2) {
    if (this.attributes) {
      const r2 = this.getAttribute(t2);
      this.attributes[t2] = e2, this._notifyLayer("attributes", r2, e2, t2);
    } else this.attributes = { [t2]: e2 };
  }
  getObjectId() {
    const t2 = this.sourceLayer ?? this.layer;
    return t2 ? i2(this, t2) : null;
  }
  getGlobalId() {
    const t2 = this.sourceLayer ?? this.layer;
    return t2 && "globalIdField" in t2 && t2.globalIdField ? this.getAttribute(t2.globalIdField) : null;
  }
  toJSON() {
    return { aggregateGeometries: b(this.aggregateGeometries), geometry: null != this.geometry ? this.geometry.toJSON() : null, symbol: null != this.symbol ? this.symbol.toJSON() : null, attributes: t(this.attributes) ? this.attributes.toJSON() : { ...this.attributes }, popupTemplate: this.popupTemplate?.toJSON() ?? null };
  }
  notifyMeshTransformChanged(t2 = {}) {
    const { geometry: e2 } = this;
    if ("mesh" === e2?.type) {
      const r2 = { origin: e2.origin, transform: e2.transform };
      this._notifyLayer("origin-transform", r2, r2, t2.action);
    }
  }
  _notifyLayer(t2, e2, r2, s) {
    if (this._version++, !this.layer || !("graphicChanged" in this.layer)) return;
    const i3 = { graphic: this, property: t2, oldValue: e2, newValue: r2 };
    "origin-transform" === t2 && (i3.action = s), "attributes" === t2 && (i3.attributeName = s), this.layer.graphicChanged(i3);
  }
  _watchMeshGeometryChanges() {
    this.addHandles([f(() => "mesh" === this.geometry?.type && this.geometry.vertexSpace.origin ? { localMatrix: this.geometry.transform?.localMatrix, origin: this.geometry.vertexSpace.origin } : void 0, ({ localMatrix: t2, origin: e2 }) => {
      this._lastMeshTransform.localMatrix === t2 && this._lastMeshTransform.origin === e2 || (this._lastMeshTransform.localMatrix = t2, this._lastMeshTransform.origin = e2, this.notifyMeshTransformChanged());
    }), f(() => "mesh" === this.geometry?.type ? { vertexAttributes: this.geometry.vertexAttributes } : void 0, () => {
      const t2 = this.geometry;
      "mesh" === t2?.type && t2.vertexSpace.origin ? (this._lastMeshTransform.localMatrix = t2.transform?.localMatrix, this._lastMeshTransform.origin = t2.vertexSpace.origin) : (this._lastMeshTransform.localMatrix = void 0, this._lastMeshTransform.origin = void 0), this._notifyLayer("geometry", this.geometry, this.geometry);
    }, { equals: (t2, e2) => t2 === e2, sync: true })]);
  }
}, c = _a, _a);
r([m({ value: null, json: { read: f3 } })], d.prototype, "aggregateGeometries", null), r([m({ value: null })], d.prototype, "attributes", null), r([m({ value: null, types: l2, json: { read: f2 } })], d.prototype, "geometry", null), r([m({ type: Boolean })], d.prototype, "isAggregate", void 0), r([m({ clonable: false })], d.prototype, "layer", void 0), r([m({ clonable: "reference" })], d.prototype, "origin", void 0), r([m({ type: q, value: null })], d.prototype, "popupTemplate", null), r([m({ clonable: "reference" })], d.prototype, "sourceLayer", void 0), r([m({ value: null, types: x })], d.prototype, "symbol", null), r([m({ clonable: false, json: { read: false, write: false } })], d.prototype, "_version", void 0), r([m({ type: Boolean, value: true })], d.prototype, "visible", null), d = c = r([a("esri.Graphic")], d);

export {
  d
};
//# sourceMappingURL=chunk-2IMSGFJN.js.map
