import {
  Dt,
  H,
  M,
  Ot,
  P,
  Pt,
  mi,
  n,
  si
} from "./chunk-DDDUQRA2.js";

// node_modules/@arcgis/core/chunks/Transformation2D.js
var y = class _y {
  constructor(t, s, o) {
    if (t instanceof _y) return this.data = t.data, this.N = t.N, this.M = t.M, t.data = null, t.N = 0, void (t.M = 0);
    this.data = t, this.N = s, this.M = o;
  }
  assignCopy(s) {
    return this === s || (n(this.N * this.M === s.N * s.M), this.data.set(s.data), this.N = s.N, this.M = s.M), this;
  }
  setZero() {
    return this.data?.fill(0), this;
  }
  setIdentity() {
    const t = 0, s = 1;
    for (let o = 0; o < this.N; o++) for (let i = 0; i < this.M; i++) this.setRowCol(o, i, o === i ? s : t);
    return this;
  }
  rows() {
    return this.N;
  }
  cols() {
    return this.M;
  }
  row(s) {
    return n(0), {};
  }
  set(t, s) {
    return this.data[t] = s, this;
  }
  setRowCol(t, s, o) {
    return this.data[t * this.M + s] = o, this;
  }
  at(t) {
    return this.data[t];
  }
  atRowCol(t, s) {
    return this.data[t * this.M + s];
  }
  mulScalar(s, o) {
    n(0);
  }
  mul(s, o) {
    if (n(this.M === s.rows()), n(this.N === o.rows()), n(s.cols() === o.cols()), o === this) {
      const t = new Float64Array(this.N * this.M), i2 = new _y(t, this.N, this.M);
      return this.mul(s, i2), void o.assignCopy(i2);
    }
    if (o === s) {
      const t = new Float64Array(s.N * s.M), i2 = new _y(t, s.N, s.M);
      return this.mul(s, i2), void o.assignCopy(i2);
    }
    const i = s.cols();
    for (let t = 0; t < this.N; t++) for (let e = 0; e < i; e++) {
      let i2 = 0;
      for (let o2 = 0; o2 < this.M; o2++) i2 += this.atRowCol(t, o2) * s.atRowCol(o2, e);
      o.setRowCol(t, e, i2);
    }
  }
  mulTranspose(s, o) {
    if (n(this.M === s.cols()), n(this.N === o.rows()), n(s.rows() === o.cols()), o === this) {
      const t = new Float64Array(this.N * this.M), i2 = new _y(t, this.N, this.M);
      return this.mulTranspose(s, i2), void o.assignCopy(i2);
    }
    if (o === s) {
      const t = new Float64Array(s.N * s.M), i2 = new _y(t, s.N, s.M);
      return this.mulTranspose(s, i2), void o.assignCopy(i2);
    }
    const i = s.rows();
    for (let t = 0; t < this.N; t++) for (let e = 0; e < i; e++) {
      let i2 = 0;
      for (let o2 = 0; o2 < this.M; o2++) i2 += this.atRowCol(t, o2) * s.atRowCol(e, o2);
      o.setRowCol(t, e, i2);
    }
  }
  mulLeft(s, o) {
    n(0);
  }
  mulLeftTranspose(s, o) {
    n(0);
  }
  mulDiag(s, o) {
    if (n(this.M === s.N * s.M), n(this.N === o.rows()), n(this.M === o.cols()), o === this) {
      const t = new Float64Array(this.N * this.M), i2 = new _y(t, this.N, this.M);
      return this.mulDiag(s, i2), void o.assignCopy(i2);
    }
    const i = this.M;
    for (let t = 0; t < this.N; t++) for (let e = 0; e < i; e++) o.setRowCol(t, e, this.atRowCol(t, e) * s.at(e));
  }
  transposeInPlace() {
    if (this.N === this.M) {
      for (let t2 = 0; t2 < this.N; t2++) for (let s2 = t2 + 1; s2 < this.M; s2++) {
        const o = this.atRowCol(t2, s2);
        this.setRowCol(t2, s2, this.atRowCol(s2, t2)), this.setRowCol(s2, t2, o);
      }
      return this;
    }
    const t = new Float64Array(this.N * this.M), s = new _y(t, this.N, this.M);
    return s.assignCopy(this), this.M = Pt(this.N, this.N = this.M), s.transpose(this), this;
  }
  transpose(t) {
    if (this !== t) {
      _y.checkDims(t, this.M, this.N);
      for (let s = 0; s < this.N; s++) for (let o = 0; o < this.M; o++) t.setRowCol(o, s, this.atRowCol(s, o));
    } else t.transposeInPlace();
  }
  add(t, s) {
  }
  svd(s, o, i, e = false) {
    if (_y.checkDims(s, this.N, this.M), _y.checkDims(o, this.M, 1), _y.checkDims(i, this.M, this.M), e) {
      if (n(this.N === this.M), !this.symmetricEigen(o, i)) return false;
      for (let t = 0; t < this.M; ++t) o.at(t) < 0 && o.set(t, 0);
      return s.assignCopy(i), true;
    }
    let h, r, a, l, n3, x2, w2, u2 = 0, C2 = 0, f2 = 0, R = 0, d = 0;
    const c = this.M, M2 = this.N;
    s.assignCopy(this);
    const m = new Float64Array(c), N = new _y(m, c, 1), b = (t, s2) => s2 >= 0 ? Math.abs(t) : -Math.abs(t), p = (t, s2) => {
      if ((t = Math.abs(t)) > (s2 = Math.abs(s2))) {
        const o2 = s2 / t;
        return t * Math.sqrt(o2 * o2 + 1);
      }
      if (s2 > 0) {
        const o2 = t / s2;
        return s2 * Math.sqrt(o2 * o2 + 1);
      }
      return 0;
    };
    for (let t = 0; t < c; t++) {
      if (u2 = t + 1, N.set(t, R * f2), f2 = l = R = 0, t < M2) {
        for (let o2 = t; o2 < M2; o2++) R += Math.abs(s.atRowCol(o2, t));
        if (R) {
          for (let o2 = t; o2 < M2; o2++) s.setRowCol(o2, t, s.atRowCol(o2, t) / R), l += s.atRowCol(o2, t) * s.atRowCol(o2, t);
          r = s.atRowCol(t, t), f2 = -b(Math.sqrt(l), r), a = r * f2 - l, s.setRowCol(t, t, r - f2);
          for (let o2 = u2; o2 < c; o2++) {
            l = 0;
            for (let i3 = t; i3 < M2; i3++) l += s.atRowCol(i3, t) * s.atRowCol(i3, o2);
            r = l / a;
            for (let i3 = t; i3 < M2; i3++) s.setRowCol(i3, o2, s.atRowCol(i3, o2) + r * s.atRowCol(i3, t));
          }
          for (let o2 = t; o2 < M2; o2++) s.setRowCol(o2, t, s.atRowCol(o2, t) * R);
        }
      }
      if (o.set(t, R * f2), f2 = l = R = 0, t < M2 && t !== c - 1) {
        for (let o2 = u2; o2 < c; o2++) R += Math.abs(s.atRowCol(t, o2));
        if (R) {
          for (let o2 = u2; o2 < c; o2++) s.setRowCol(t, o2, s.atRowCol(t, o2) / R), l += s.atRowCol(t, o2) * s.atRowCol(t, o2);
          r = s.atRowCol(t, u2), f2 = -b(Math.sqrt(l), r), a = r * f2 - l, s.setRowCol(t, u2, r - f2);
          for (let o2 = u2; o2 < c; o2++) N.set(o2, s.atRowCol(t, o2) / a);
          for (let o2 = u2; o2 < M2; o2++) {
            l = 0;
            for (let i3 = u2; i3 < c; i3++) l += s.atRowCol(o2, i3) * s.atRowCol(t, i3);
            for (let t2 = u2; t2 < c; t2++) s.setRowCol(o2, t2, s.atRowCol(o2, t2) + l * N.at(t2));
          }
          for (let o2 = u2; o2 < c; o2++) s.setRowCol(t, o2, s.atRowCol(t, o2) * R);
        }
      }
      const i2 = Math.abs(o.at(t)) + Math.abs(N.at(t));
      d = i2 > d ? i2 : d;
    }
    for (let t = c - 1; t >= 0; t--) {
      if (t < c - 1) {
        if (f2) {
          for (let o2 = u2; o2 < c; o2++) i.setRowCol(o2, t, s.atRowCol(t, o2) / s.atRowCol(t, u2) / f2);
          for (let o2 = u2; o2 < c; o2++) {
            l = 0;
            for (let e2 = u2; e2 < c; e2++) l += s.atRowCol(t, e2) * i.atRowCol(e2, o2);
            for (let s2 = u2; s2 < c; s2++) i.setRowCol(s2, o2, i.atRowCol(s2, o2) + l * i.atRowCol(s2, t));
          }
        }
        for (let s2 = u2; s2 < c; s2++) i.setRowCol(t, s2, 0), i.setRowCol(s2, t, 0);
      }
      i.setRowCol(t, t, 1), f2 = N.at(t), u2 = t;
    }
    for (let t = (M2 < c ? M2 : c) - 1; t >= 0; t--) {
      u2 = t + 1, f2 = o.at(t);
      for (let o2 = u2; o2 < c; o2++) s.setRowCol(t, o2, 0);
      if (f2) {
        f2 = 1 / f2;
        for (let o2 = u2; o2 < c; o2++) {
          l = 0;
          for (let i2 = u2; i2 < M2; i2++) l += s.atRowCol(i2, t) * s.atRowCol(i2, o2);
          r = l / s.atRowCol(t, t) * f2;
          for (let i2 = t; i2 < M2; i2++) s.setRowCol(i2, o2, s.atRowCol(i2, o2) + r * s.atRowCol(i2, t));
        }
        for (let o2 = t; o2 < M2; o2++) s.setRowCol(o2, t, s.atRowCol(o2, t) * f2);
      } else for (let o2 = t; o2 < M2; o2++) s.setRowCol(o2, t, 0);
      s.setRowCol(t, t, s.atRowCol(t, t) + 1);
    }
    for (let t = c - 1; t >= 0; t--) for (let e2 = 1; ; e2++) {
      let y2 = 1;
      for (u2 = t; u2 >= 0; u2--) {
        if (C2 = u2 - 1, Math.abs(N.at(u2)) + d === d) {
          y2 = 0;
          break;
        }
        if (Math.abs(o.at(C2)) + d === d) break;
      }
      if (y2) {
        h = 0, l = 1;
        for (let i2 = u2; i2 <= t && (r = l * N.at(i2), N.set(i2, N.at(i2) * h), Math.abs(r) + d !== d); i2++) {
          f2 = o.at(i2), a = p(r, f2), o.set(i2, a), a = 1 / a, h = f2 * a, l = -r * a;
          for (let t2 = 0; t2 < M2; t2++) x2 = s.atRowCol(t2, C2), w2 = s.atRowCol(t2, i2), s.setRowCol(t2, C2, x2 * h + w2 * l), s.setRowCol(t2, i2, w2 * h - x2 * l);
        }
      }
      if (w2 = o.at(t), u2 === t) {
        if (w2 < 0) {
          o.set(t, -w2);
          for (let s2 = 0; s2 < c; s2++) i.setRowCol(s2, t, -i.atRowCol(s2, t));
        }
        break;
      }
      if (100 === e2) return false;
      n3 = o.at(u2), C2 = t - 1, x2 = o.at(C2), f2 = N.at(C2), a = N.at(t), r = ((x2 - w2) * (x2 + w2) + (f2 - a) * (f2 + a)) / (2 * a * x2), f2 = p(r, 1), r = ((n3 - w2) * (n3 + w2) + a * (x2 / (r + b(f2, r)) - a)) / n3, h = l = 1;
      for (let t2 = u2; t2 <= C2; t2++) {
        const e3 = t2 + 1;
        f2 = N.at(e3), x2 = o.at(e3), a = l * f2, f2 *= h, w2 = p(r, a), N.set(t2, w2), h = r / w2, l = a / w2, r = n3 * h + f2 * l, f2 = f2 * h - n3 * l, a = x2 * l, x2 *= h;
        for (let s2 = 0; s2 < c; s2++) n3 = i.atRowCol(s2, t2), w2 = i.atRowCol(s2, e3), i.setRowCol(s2, t2, n3 * h + w2 * l), i.setRowCol(s2, e3, w2 * h - n3 * l);
        w2 = p(r, a), o.set(t2, w2), w2 && (w2 = 1 / w2, h = r * w2, l = a * w2), r = h * f2 + l * x2, n3 = h * x2 - l * f2;
        for (let o2 = 0; o2 < M2; o2++) x2 = s.atRowCol(o2, t2), w2 = s.atRowCol(o2, e3), s.setRowCol(o2, t2, x2 * h + w2 * l), s.setRowCol(o2, e3, w2 * h - x2 * l);
      }
      N.set(u2, 0), N.set(t, r), o.set(t, n3);
    }
    const g = new Float64Array(this.N), v = new Float64Array(this.M), T = new _y(g, this.N, 1), I = new _y(v, this.M, 1);
    let A = 1;
    do {
      A *= 3, A++;
    } while (A <= this.M);
    do {
      A /= 3, A = Math.trunc(A);
      for (let t = A; t < this.M; t++) {
        const e2 = o.at(t);
        for (let o2 = 0; o2 < this.N; o2++) T.set(o2, s.atRowCol(o2, t));
        for (let s2 = 0; s2 < this.M; s2++) I.set(s2, i.atRowCol(s2, t));
        let h2 = t;
        for (; o.at(h2 - A) < e2; ) {
          o.set(h2, o.at(h2 - A));
          for (let t2 = 0; t2 < this.N; t2++) s.setRowCol(t2, h2, s.atRowCol(t2, h2 - A));
          for (let t2 = 0; t2 < this.M; t2++) i.setRowCol(t2, h2, i.atRowCol(t2, h2 - A));
          if (h2 -= A, h2 < A) break;
        }
        o.set(h2, e2);
        for (let t2 = 0; t2 < this.N; t2++) s.setRowCol(t2, h2, T.at(t2));
        for (let t2 = 0; t2 < this.M; t2++) i.setRowCol(t2, h2, I.at(t2));
      }
    } while (A > 1);
    for (let t = 0; t < this.M; t++) {
      let o2 = 0;
      for (let i2 = 0; i2 < this.N; i2++) s.atRowCol(i2, t) < 0 && o2++;
      for (let s2 = 0; s2 < this.M; s2++) i.atRowCol(s2, t) < 0 && o2++;
      if (o2 > Math.trunc((this.N + this.M) / 2)) {
        for (let o3 = 0; o3 < this.N; o3++) s.setRowCol(o3, t, -s.atRowCol(o3, t));
        for (let s2 = 0; s2 < this.M; s2++) i.setRowCol(s2, t, -i.atRowCol(s2, t));
      }
    }
    return true;
  }
  isSymmetric() {
    if (this.N !== this.M) return false;
    for (let t = 0; t < this.N; t++) for (let s = t + 1; s < this.M; s++) if (this.atRowCol(t, s) !== this.atRowCol(s, t)) return false;
    return true;
  }
  isZero() {
    return n(0), false;
  }
  isIdentity() {
    return n(0), false;
  }
  equals(s, o) {
    if (void 0 !== o && n(0), this.N !== s.N || this.M !== s.M) return false;
    for (let t = 0; t < this.N * this.M; t++) if (this.data[t] !== s.data[t]) return false;
    return true;
  }
  maxElement() {
    return n(0), 0;
  }
  minElement() {
    return n(0), 0;
  }
  determinant() {
    if (n(this.N === this.M), 1 === this.N) return this.data[0];
    if (2 === this.N) return this.data[0] * this.data[3] - this.data[1] * this.data[2];
    if (3 === this.N) {
      const t = this;
      return t.atRowCol(0, 0) * (t.atRowCol(1, 1) * t.atRowCol(2, 2) - t.atRowCol(1, 2) * t.atRowCol(2, 1)) - t.atRowCol(0, 1) * (t.atRowCol(1, 0) * t.atRowCol(2, 2) - t.atRowCol(2, 0) * t.atRowCol(1, 2)) + t.atRowCol(0, 2) * (t.atRowCol(1, 0) * t.atRowCol(2, 1) - t.atRowCol(1, 1) * t.atRowCol(2, 0));
    }
    const s = new Float64Array(this.N * this.N), o = new _y(s, this.N, this.N), i = new Float64Array(this.N);
    if (!this.luDecomposition(o, i)) return 0;
    let e = 1;
    for (let t = 0; t < this.N; t++) e *= o.atRowCol(t, t), i[t] !== t && (e = -e);
    return e;
  }
  submatrix(s, o, i) {
    n(0);
  }
  inverse(s) {
    n(0);
  }
  pseudoInverse(t, s = false, o = 2220446049250313e-31) {
    if (t.setZero(), 1 === this.N && 1 === this.M) return 0 !== this.atRowCol(0, 0) ? t.setRowCol(0, 0, 1 / this.atRowCol(0, 0)) : t.setRowCol(0, 0, 0), true;
    if (2 === this.N && 2 === this.M) {
      const s2 = this.atRowCol(0, 0) * this.atRowCol(1, 1) - this.atRowCol(0, 1) * this.atRowCol(1, 0), o2 = 1e-5 * (Math.abs(this.atRowCol(0, 0) * this.atRowCol(1, 1)) + Math.abs(this.atRowCol(0, 1) * this.atRowCol(1, 0)));
      if (Math.abs(s2) > o2) return t.setRowCol(0, 0, this.atRowCol(1, 1) / s2), t.setRowCol(0, 1, -this.atRowCol(0, 1) / s2), t.setRowCol(1, 0, -this.atRowCol(1, 0) / s2), t.setRowCol(1, 1, this.atRowCol(0, 0) / s2), true;
    }
    const i = new Float64Array(this.N * this.M), e = new _y(i, this.N, this.M), h = new Float64Array(this.M), r = new _y(h, this.M, 1), a = new Float64Array(this.M * this.M), l = new _y(a, this.M, this.M);
    if (!this.svd(e, r, l, s)) return false;
    const n3 = Math.max(this.N, this.M), x2 = o * Math.abs(r.at(0)) * n3;
    for (let y2 = 0; y2 < this.M; y2++) r.at(y2) > x2 ? r.set(y2, 1 / r.at(y2)) : r.set(y2, 0);
    return l.mulDiag(r, t), t.mulTranspose(e, t), true;
  }
  luDecomposition(s, o) {
    return n(0), false;
  }
  symmetricEigen(s, o) {
    n(this.rows() === this.cols()), n(this.rows() === s.rows()), n(o.rows() === o.cols() && o.rows() === this.rows()), n(this.isSymmetric());
    const i = new Float64Array(this.N * this.M), e = new _y(i, this.N, this.M);
    e.assignCopy(this);
    const h = 100 / Number.EPSILON, r = this.rows(), a = new Float64Array(r), l = new Float64Array(r), n3 = new _y(a, r, 1), x2 = new _y(l, r, 1);
    for (let t = 0; t < r; t++) n3.set(t, e.atRowCol(t, t)), s.set(t, e.atRowCol(t, t)), x2.set(t, 0);
    o.setIdentity();
    const w2 = () => {
      const t = n3;
      o.transposeInPlace();
      let i2 = 1;
      do {
        i2 *= 3, i2++;
      } while (i2 <= r);
      do {
        i2 /= 3, i2 = Math.trunc(i2);
        for (let e2 = i2; e2 < r; e2++) {
          const h2 = s.at(e2), r2 = Math.abs(h2);
          for (let s2 = 0; s2 < this.M; s2++) t.set(s2, o.atRowCol(s2, e2));
          let a2 = e2;
          for (; Math.abs(s.at(a2 - i2)) < r2; ) {
            s.set(a2, s.at(a2 - i2));
            for (let t2 = 0; t2 < this.M; t2++) o.setRowCol(t2, a2, o.atRowCol(t2, a2 - i2));
            if (a2 -= i2, a2 < i2) break;
          }
          if (a2 !== e2) {
            s.set(a2, h2);
            for (let s2 = 0; s2 < this.M; s2++) o.setRowCol(s2, a2, t.at(s2));
          }
        }
      } while (i2 > 1);
    };
    for (let t = 1; ; t++) {
      let i2 = 0;
      for (let t2 = 1; t2 < r; t2++) for (let s2 = 0; s2 < t2; s2++) i2 += Math.abs(e.atRowCol(t2, s2));
      if (0 === i2) return w2(), true;
      const a2 = t < 4 ? 0.2 * i2 / (r * r) : 0;
      for (let l2 = 0; l2 < r; l2++) for (let i3 = l2 + 1; i3 < r; i3++) {
        let y2 = h * Math.abs(e.atRowCol(i3, l2));
        if (t > 4 && y2 <= Math.abs(s.at(l2)) && y2 <= Math.abs(s.at(i3))) e.setRowCol(i3, l2, 0);
        else if (Math.abs(e.atRowCol(i3, l2)) > a2) {
          let t2, h2 = s.at(i3) - s.at(l2);
          if (y2 < Math.abs(h2)) t2 = e.atRowCol(i3, l2) / h2;
          else {
            const s2 = 0.5 * h2 / e.atRowCol(i3, l2);
            t2 = 1 / (Math.abs(s2) + Math.sqrt(1 + s2 * s2)), s2 < 0 && (t2 = -t2);
          }
          const a3 = 1 / Math.sqrt(1 + t2 * t2), n4 = t2 * a3, w3 = n4 / (1 + a3);
          h2 = t2 * e.atRowCol(i3, l2), x2.set(l2, x2.at(l2) - h2), x2.set(i3, x2.at(i3) + h2), s.set(l2, s.at(l2) - h2), s.set(i3, s.at(i3) + h2), e.setRowCol(i3, l2, 0);
          let u2 = 0;
          for (; u2 < l2; u2++) y2 = e.atRowCol(l2, u2), h2 = e.atRowCol(i3, u2), e.setRowCol(l2, u2, y2 - n4 * (h2 + y2 * w3)), e.setRowCol(i3, u2, h2 + n4 * (y2 - h2 * w3));
          for (u2++; u2 < i3; u2++) y2 = e.atRowCol(u2, l2), h2 = e.atRowCol(i3, u2), e.setRowCol(u2, l2, y2 - n4 * (h2 + y2 * w3)), e.setRowCol(i3, u2, h2 + n4 * (y2 - h2 * w3));
          for (u2++; u2 < r; u2++) y2 = e.atRowCol(u2, l2), h2 = e.atRowCol(u2, i3), e.setRowCol(u2, l2, y2 - n4 * (h2 + y2 * w3)), e.setRowCol(u2, i3, h2 + n4 * (y2 - h2 * w3));
          for (u2 = 0; u2 < r; u2++) y2 = o.atRowCol(l2, u2), h2 = o.atRowCol(i3, u2), o.setRowCol(l2, u2, y2 - n4 * (h2 + y2 * w3)), o.setRowCol(i3, u2, h2 + n4 * (y2 - h2 * w3));
        }
      }
      for (let t2 = 0; t2 < r; t2++) n3.set(t2, n3.at(t2) + x2.at(t2)), s.set(t2, n3.at(t2)), x2.set(t2, 0);
    }
  }
  static checkDims(s, o, i) {
    n(s.rows() === o && s.cols() === i);
  }
};
var n2 = class extends y {
  constructor(t) {
    if (t.copy) {
      const s2 = new Float64Array(t.copy.N * t.copy.M);
      return super(s2, t.copy.N, t.copy.M), this.buffer = s2, void this.assignCopy(t.copy);
    }
    const s = new Float64Array(t.NN * t.MM);
    super(s, t.NN, t.MM), this.buffer = s, t.initializerList && Dt(this.buffer, t.initializerList, 0, 0, t.initializerList.length);
  }
  assignCopy(t) {
    return this === t || super.assignCopy(t), this;
  }
};
var x = class _x {
  constructor(t) {
    this.m_TransformationType = 1, void 0 === t ? this.setIdentity() : t instanceof _x ? this.set(t) : this.setScale(t);
  }
  set(t) {
    return this.xx = t.xx, this.xy = t.xy, this.xd = t.xd, this.yx = t.yx, this.yy = t.yy, this.yd = t.yd, this;
  }
  clone() {
    return new _x().set(this);
  }
  setZero() {
    this.xx = 0, this.yy = 0, this.xy = 0, this.yx = 0, this.xd = 0, this.yd = 0;
  }
  isEqual(t) {
    return this === t || this.xx === t.xx && this.xy === t.xy && this.xd === t.xd && this.yx === t.yx && this.yy === t.yy && this.yd === t.yd;
  }
  transformInPlace(t) {
    const s = this.xx * t.x + this.xy * t.y + this.xd, o = this.yx * t.x + this.yy * t.y + this.yd;
    t.x = s, t.y = o;
  }
  transform(t) {
    const s = t.clone();
    return this.transformInPlace(s), s;
  }
  queryTransform(t, s) {
    const o = this.xx * t.x + this.xy * t.y + this.xd, i = this.yx * t.x + this.yy * t.y + this.yd;
    s.setCoords(o, i);
  }
  transformEnvInPlace(t) {
    if (t.isEmpty()) return;
    const s = Ot(mi, 4);
    t.queryCorners(s), this.transformPoints2D(s, 4, s), t.setFromPoints(s, 4);
  }
  queryTransformEnv(s, o) {
    n(0);
  }
  transformPoints2D(t, s, o) {
    for (let i = 0; i < s; ++i) this.queryTransform(t[i], o[i]);
  }
  transformInterleavedPoints(t, s, o) {
    s *= 2;
    const i = mi.getNAN();
    for (let e = 0; e < s; e += 2) i.x = t[e], i.y = t[e + 1], this.transformInPlace(i), o[e] = i.x, o[e + 1] = i.y;
  }
  multiply(t) {
    return _x.st_multiply(this, t, this), this;
  }
  mulLeft(s) {
    return n(0), this;
  }
  static st_multiply(t, s, o) {
    const i = t.xx * s.xx + t.yx * s.xy, e = t.xy * s.xx + t.yy * s.xy, h = t.xd * s.xx + t.yd * s.xy + s.xd, r = t.xx * s.yx + t.yx * s.yy, a = t.xy * s.yx + t.yy * s.yy, l = t.xd * s.yx + t.yd * s.yy + s.yd;
    o.xx = i, o.xy = e, o.xd = h, o.yx = r, o.yy = a, o.yd = l;
  }
  getCoefficients(s) {
    n(s.length >= 6), s[0] = this.xx, s[1] = this.xy, s[2] = this.xd, s[3] = this.yx, s[4] = this.yy, s[5] = this.yd;
  }
  setCoefficients(s) {
    n(s.length >= 6), this.xx = s[0], this.xy = s[1], this.xd = s[2], this.yx = s[3], this.yy = s[4], this.yd = s[5];
  }
  copyTo(s) {
    n(0);
  }
  initializeFromRect(t, s) {
    t.isEmpty() || s.isEmpty() || !t.width() || !t.height() ? this.setZero() : (this.xy = this.yx = 0, this.xx = s.width() / t.width(), this.yy = s.height() / t.height(), this.xd = s.xmin - t.xmin * this.xx, this.yd = s.ymin - t.ymin * this.yy);
  }
  initializeFromRectIsotropic(t, s) {
    if (t.isEmpty() || !t.width() || !t.height() || s.isEmpty()) this.setZero();
    else {
      this.yx = 0, this.xy = 0, this.xx = s.width() / t.width(), this.yy = s.height() / t.height(), this.xx > this.yy ? this.xx = this.yy : this.yy = this.xx;
      const o = s.getCenter(), i = t.getCenter();
      this.xd = o.x - i.x * this.xx, this.yd = o.y - i.y * this.yy;
    }
  }
  initializeFromTwoPointsArray(t, o) {
    if (t[0].equals(o[0]) && t[1].equals(o[1])) return void this.setIdentity();
    if (t[0].equals(t[1])) {
      if (o[0].equals(o[1])) return void this.setShift(o[0].sub(t[0]));
      P("");
    }
    if (!t[0].equals(t[1]) && o[0].equals(o[1])) return this.setZero(), void this.shift(o[0]);
    this.setShiftCoords(-t[0].x, -t[0].y);
    const i = mi.distance(t[0], t[1]), h = mi.distance(o[0], o[1]), r = h / i;
    this.scale(r, r);
    const a = t[1].sub(t[0]);
    a.divThis(i);
    const l = o[1].sub(o[0]);
    l.divThis(h);
    const y2 = a.crossProduct(l), n3 = a.dotProduct(l);
    this.rotate(n3, y2), this.shiftCoords(o[0].x, o[0].y);
  }
  initializeFromTwoPoints(t, s, o, i) {
    const e = [t, s], h = [o, i];
    this.initializeFromTwoPointsArray(e, h);
  }
  transformSizeInPlace(s) {
    n(0);
  }
  transformSize(s, o) {
    n(0);
  }
  transformTol(s) {
    return n(0), 0;
  }
  transformWithoutTranslateArray(t, s, o) {
    for (let i = 0; i < s; ++i) this.transformWithoutTranslate(t[i], o[i]);
  }
  transformWithoutTranslateInPlace(t) {
    const s = this.xx * t.x + this.xy * t.y, o = this.yx * t.x + this.yy * t.y;
    t.setCoords(s, o);
  }
  transformWithoutTranslate(t, s) {
    const o = this.xx * t.x + this.xy * t.y, i = this.yx * t.x + this.yy * t.y;
    s.setCoords(o, i);
  }
  setIdentity() {
    this.xx = 1, this.xy = 0, this.xd = 0, this.yx = 0, this.yy = 1, this.yd = 0;
  }
  isIdentity() {
    return !(1 !== this.xx || 1 !== this.yy || this.xy || this.xd || this.yx || this.yd);
  }
  isIdentityTol(t) {
    const s = t * t;
    return !(H(this.xd) + H(this.yd) > s) && (!(H(this.xy + this.xd) + H(this.yy + this.yd - 1) > s) && !(H(this.xx + this.xd - 1) + H(this.yx + this.yd) > s));
  }
  isReflective() {
    return this.xx * this.yy - this.yx * this.xy < 0;
  }
  isUniform(t) {
    const s = this.xx * this.xx + this.yx * this.yx, o = this.xy * this.xy + this.yy * this.yy, i = (s + o) * t;
    return Math.abs(s - o) <= i && Math.abs(this.xx * this.xy + this.yx * this.yy) <= i;
  }
  isUniformNoRotation() {
    return 0 !== this.xx && Math.abs(this.xx) === Math.abs(this.yy) && 0 === this.xy && 0 === this.yx;
  }
  isTranslate() {
    return 1 === this.xx && 1 === this.yy && !this.xy && !this.yx;
  }
  isTranslateTol(t) {
    const s = new mi();
    return s.setCoords(0, 1), this.transformWithoutTranslateInPlace(s), s.y -= 1, !(s.sqrLength() > t * t) && (s.setCoords(1, 0), this.transformWithoutTranslateInPlace(s), s.x -= 1, s.sqrLength() <= t * t);
  }
  isOrthonormal(t) {
    const s = new _x();
    return s.xx = this.xx * this.xx + this.xy * this.xy, s.xy = this.xx * this.yx + this.xy * this.yy, s.yx = this.yx * this.xx + this.yy * this.xy, s.yy = this.yx * this.yx + this.yy * this.yy, s.xd = 0, s.yd = 0, s.isIdentityTol(t);
  }
  isDegenerate(t) {
    return Math.abs(this.xx * this.yy - this.yx * this.xy) <= 2 * t * (Math.abs(this.xx * this.yy) + Math.abs(this.yx * this.xy));
  }
  isZero() {
    return 0 === this.xx && 0 === this.yy && 0 === this.xy && 0 === this.yx && 0 === this.xd && 0 === this.yd;
  }
  isScaleAndTranslateTol(t) {
    return this.xy * this.xy + this.yx * this.yx <= (this.xx * this.xx + this.yy * this.yy) * t;
  }
  setTranslate(t, s) {
    return this.xx = 1, this.xy = 0, this.xd = t, this.yx = 0, this.yy = 1, this.yd = s, this;
  }
  setShiftCoords(t, s) {
    return this.xx = 1, this.xy = 0, this.xd = t, this.yx = 0, this.yy = 1, this.yd = s, this;
  }
  setShift(t) {
    return this.xx = 1, this.xy = 0, this.xd = t.x, this.yx = 0, this.yy = 1, this.yd = t.y, this;
  }
  setScaleCoords(t, s) {
    return this.xx = t, this.xy = 0, this.xd = 0, this.yx = 0, this.yy = s, this.yd = 0, this;
  }
  setScale(t) {
    return this.setScaleCoords(t, t), this;
  }
  setFlipX(t, s) {
    return this.xx = -1, this.xy = 0, this.xd = t + s, this.yx = 0, this.yy = 1, this.yd = 0, this;
  }
  setFlipY(t, s) {
    return this.xx = 1, this.xy = 0, this.xd = 0, this.yx = 0, this.yy = -1, this.yd = t + s, this;
  }
  setShear(t, s) {
    return this.xx = 1, this.xy = t, this.xd = 0, this.yx = s, this.yy = 1, this.yd = 0, this;
  }
  scale(t, s) {
    return this.xx *= t, this.xy *= t, this.xd *= t, this.yx *= s, this.yy *= s, this.yd *= s, this;
  }
  setRotateAngle(t) {
    return this.setRotate(Math.cos(t), Math.sin(t));
  }
  setRotate(t, s) {
    return this.xx = t, this.xy = -s, this.xd = 0, this.yx = s, this.yy = t, this.yd = 0, this;
  }
  setRotateAngleAbout(t, s) {
    return this.setRotateAbout(Math.cos(t), Math.sin(t), s);
  }
  setRotateAbout(t, s, o) {
    return this.setTranslate(-o.x, -o.y), this.rotate(t, s), this.translate(o.x, o.y);
  }
  setSwapCoordinates() {
    return this.xx = 0, this.xy = 1, this.xd = 0, this.yx = 1, this.yy = 0, this.yd = 0, this;
  }
  setRotateCw90() {
    return this.xx = 0, this.xy = 1, this.xd = 0, this.yx = -1, this.yy = 0, this.yd = 0, this;
  }
  setRotateCcw90() {
    return this.xx = 0, this.xy = -1, this.xd = 0, this.yx = 1, this.yy = 0, this.yd = 0, this;
  }
  shiftCoords(t, s) {
    return this.xd += t, this.yd += s, this;
  }
  shift(t) {
    return this.xd += t.x, this.yd += t.y, this;
  }
  translate(t, s) {
    return this.xd += t, this.yd += s, this;
  }
  flipX(t, s) {
    return this.xx = -this.xx, this.xy = -this.xy, this.xd = t + s - this.xd, this;
  }
  flipY(t, s) {
    return this.yx = -this.yx, this.yy = -this.yy, this.yd = t + s - this.yd, this;
  }
  shear(t, s) {
    const o = new _x();
    return o.setShear(t, s), this.multiply(o);
  }
  rotateAngle(t) {
    const s = new _x();
    return s.setRotateAngle(t), this.multiply(s);
  }
  rotate(t, s) {
    const o = new _x();
    return o.setRotate(t, s), this.multiply(o);
  }
  rotateAbout(t, s, o) {
    return this.translate(-o.x, -o.y), this.rotate(t, s), this.translate(o.x, o.y);
  }
  rotateAngleAbout(t, s) {
    return this.rotateAbout(Math.cos(t), Math.sin(t), s);
  }
  setInvert(t) {
    return this.set(t), this.invertThis();
  }
  invertThis() {
    let t = this.xx * this.yy - this.xy * this.yx;
    if (0 === t) return this.setZero(), this;
    t = 1 / t;
    const s = (this.xy * this.yd - this.xd * this.yy) * t, o = (this.xd * this.yx - this.xx * this.yd) * t, i = this.yy * t, e = -this.xy * t, h = -this.yx * t, r = this.xx * t;
    return this.xd = s, this.yd = o, this.xx = i, this.yy = r, this.xy = e, this.yx = h, this;
  }
  invertPrecise(t) {
    return this.set(t), this.invertPreciseThis();
  }
  invertPreciseThis() {
    const t = si.constructDouble(this.xy), s = si.constructDouble(this.xx), o = s.mulDouble(this.yy).sub(t.mulDouble(this.yx));
    if (o.isZero()) return this.setZero(), this;
    const i = o.clone();
    i.invertThis();
    const e = si.constructDouble(this.xd), h = t.mulDouble(this.yd).sub(e.mulDouble(this.yy)).mul(i).toDouble(), a = e.mulDouble(this.yx).sub(s.mulDouble(this.yd)).mul(i).toDouble(), l = i.mulDouble(this.yy).toDouble(), y2 = i.mulDouble(-this.xy).toDouble(), n3 = i.mulDouble(-this.yx).toDouble(), x2 = i.mulDouble(this.xx).toDouble();
    return this.xd = h, this.yd = a, this.xx = l, this.yy = x2, this.xy = y2, this.yx = n3, this;
  }
  extractScaleTransform(t, s) {
    const o = Math.sqrt(this.xx * this.xx + this.xy * this.xy), i = Math.sqrt(this.yx * this.yx + this.yy * this.yy);
    s.setScaleCoords(1 / o, 1 / i), s.multiply(this), t.setScaleCoords(o, i);
  }
  setFromTwoTriangles(t, s) {
    let o = true;
    for (let e = 0; e < 3; ++e) o = o && t[e].equals(s[e]);
    if (o) return this.setIdentity(), true;
    const i = new mi();
    i.setSub(t[0], t[1]);
    const h = new mi();
    h.setSub(t[0], t[2]);
    const r = new mi();
    r.setSub(s[0], s[1]);
    const a = new mi();
    a.setSub(s[0], s[2]);
    const l = 4 * Number.EPSILON * (Math.abs(i.x * h.y) + Math.abs(h.x * i.y));
    let y2 = i.x * h.y - i.y * h.x;
    return Math.abs(y2) > l ? (y2 = 1 / y2, this.xx = (r.x * h.y - i.y * a.x) * y2, this.xy = (i.x * a.x - r.x * h.x) * y2, this.yx = (r.y * h.y - i.y * a.y) * y2, this.yy = (i.x * a.y - r.y * h.x) * y2, this.xd = s[0].x - (this.xx * t[0].x + this.xy * t[0].y), this.yd = s[0].y - (this.yx * t[0].x + this.yy * t[0].y), true) : (this.setZero(), false);
  }
  initializeFromControlPoints(t, s, o, i, e = null) {
    return 0 === s ? (this.setIdentity(), void (e && e.setIdentity())) : 1 === s ? (this.setShift(i[0].sub(o[0])), void (e && e.setShift(o[0].sub(i[0])))) : (s < 3 && (t = 1), void (4 === t && s > 2 ? C(this, s, o, i, e) : f(t, this, s, o, i, e)));
  }
  calculateErrors(s, o, i, h) {
    n(s > 0 && null !== o && null !== i);
    let r = 0;
    for (let t = 0; t < s; ++t) {
      const s2 = this.transform(o[t]), a = mi.sqrDistance(i[t], s2);
      r += a, h && (h[t] = Math.sqrt(a));
    }
    return Math.sqrt(r / s);
  }
};
var w = [43, 11, 41, 9, 61];
function u(s, o) {
  n(!(2 !== o.rows() && 3 !== o.rows() || 2 !== o.cols() && 3 !== o.rows())), s.xx = o.atRowCol(0, 0), s.xy = o.atRowCol(0, 1), s.yx = o.atRowCol(1, 0), s.yy = o.atRowCol(1, 1), 3 === o.cols() ? (s.xd = o.atRowCol(0, 2), s.yd = o.atRowCol(1, 2)) : (s.xd = 0, s.yd = 0);
}
function C(t, s, i, h, r) {
  const a = mi.average(i, s), l = mi.average(h, s), y2 = new n2({ NN: 2, MM: 2 });
  y2.setZero();
  const x2 = new n2({ NN: 2, MM: 2 });
  x2.setZero();
  for (let o = 0; o < s; ++o) y2.setRowCol(0, 0, y2.atRowCol(0, 0) + (i[o].x - a.x) * (i[o].x - a.x)), y2.setRowCol(0, 1, y2.atRowCol(0, 1) + (i[o].x - a.x) * (i[o].y - a.y)), y2.setRowCol(1, 1, y2.atRowCol(1, 1) + (i[o].y - a.y) * (i[o].y - a.y)), x2.setRowCol(0, 0, x2.atRowCol(0, 0) + (h[o].x - l.x) * (i[o].x - a.x)), x2.setRowCol(0, 1, x2.atRowCol(0, 1) + (h[o].x - l.x) * (i[o].y - a.y)), x2.setRowCol(1, 0, x2.atRowCol(1, 0) + (h[o].y - l.y) * (i[o].x - a.x)), x2.setRowCol(1, 1, x2.atRowCol(1, 1) + (h[o].y - l.y) * (i[o].y - a.y));
  y2.setRowCol(1, 0, y2.atRowCol(0, 1));
  const w2 = new n2({ NN: 2, MM: 2 });
  y2.pseudoInverse(w2, true) || M("Failed to compute pseudo inverse"), x2.mul(w2, x2), u(t, x2);
  const C2 = a.clone();
  t.transformInPlace(C2), t.xd = l.x - C2.x, t.yd = l.y - C2.y, r && (x2.pseudoInverse(w2, false) || M("Failed to compute pseudo inverse"), u(r, w2), r.transformInPlace(l), r.xd = a.x - l.x, r.yd = a.y - l.y);
}
function f(s, i, h, r, a, l) {
  n(1 === s || 0 === s || 2 === s || 3 === s), i.setIdentity();
  const y2 = mi.average(r, h), C2 = mi.average(a, h);
  if (n(s < w.length && s > 0), 8 & w[s]) {
    const t = new n2({ NN: 2, MM: 2 });
    t.setZero();
    for (let s2 = 0; s2 < h; ++s2) t.setRowCol(0, 0, t.atRowCol(0, 0) + (a[s2].x - C2.x) * (r[s2].x - y2.x)), t.setRowCol(1, 0, t.atRowCol(1, 0) + (a[s2].x - C2.x) * (r[s2].y - y2.y)), t.setRowCol(0, 1, t.atRowCol(0, 1) + (a[s2].y - C2.y) * (r[s2].x - y2.x)), t.setRowCol(1, 1, t.atRowCol(1, 1) + (a[s2].y - C2.y) * (r[s2].y - y2.y));
    const e = new n2({ NN: 2, MM: 2 }), l2 = new n2({ NN: 2, MM: 1 }), f3 = new n2({ NN: 2, MM: 2 });
    t.svd(e, l2, f3) || M("Failed to compute svd");
    const R = new n2({ NN: 2, MM: 2 });
    e.transpose(R);
    const d = new n2({ NN: 2, MM: 2 });
    if (f3.mul(R, d), !(32 & w[s])) {
      d.determinant() < 0 && (R.setRowCol(1, 0, -R.atRowCol(1, 0)), R.setRowCol(1, 1, -R.atRowCol(1, 1)), f3.mul(R, d));
    }
    const c = new x();
    u(c, d), i.set(c);
  }
  if (2 & w[s]) {
    let t = 0, s2 = 0;
    for (let o = 0; o < h; ++o) {
      const e = r[o].sub(y2);
      t += e.sqrLength(), i.transformInPlace(e), s2 += e.dotProduct(a[o].sub(C2));
    }
    if (0 === t) 0 === s2 ? i.setIdentity() : i.setZero();
    else {
      const o = s2 / t;
      i.scale(o, o);
    }
  } else n(!(4 & w[s]));
  const f2 = y2.clone();
  i.transformInPlace(f2), i.xd = C2.x - f2.x, i.yd = C2.y - f2.y, l && (l.set(i), l.invertThis(), l.isZero() && (l.xd = y2.x, l.yd = y2.y));
}

export {
  x
};
//# sourceMappingURL=chunk-2OTCLWRN.js.map
