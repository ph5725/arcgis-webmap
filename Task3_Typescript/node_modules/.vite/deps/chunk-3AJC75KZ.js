import {
  A as A3,
  B,
  C,
  H as H2,
  J as J2,
  K as K2,
  U as U2,
  w as w2
} from "./chunk-RFM3ACHA.js";
import {
  r as r8
} from "./chunk-6VC2SGU3.js";
import {
  r as r7
} from "./chunk-YIOJR4CO.js";
import {
  A as A2,
  j as j4,
  w
} from "./chunk-U6CQ42B3.js";
import {
  s as s4
} from "./chunk-HPOHIVBI.js";
import {
  o as o5
} from "./chunk-5TKMN7TZ.js";
import {
  n as n7
} from "./chunk-WYLBCBQH.js";
import {
  b as b2,
  j as j3,
  n as n6
} from "./chunk-ENM5QFON.js";
import {
  U,
  a as a4,
  d as d2,
  h as h3,
  i as i2,
  l as l3,
  o as o4,
  s as s3
} from "./chunk-NZUIJLHR.js";
import {
  H,
  M,
  O,
  V,
  h as h2,
  k,
  l,
  z
} from "./chunk-RTDWTAVK.js";
import {
  a as a3,
  f
} from "./chunk-QLJ6JQFC.js";
import {
  n as n5,
  o as o3,
  r as r5
} from "./chunk-VNTS5E5O.js";
import {
  A,
  I,
  J,
  K,
  P as P2,
  _ as _3,
  g,
  o as o2,
  p,
  s as s2,
  u as u3,
  y as y2
} from "./chunk-TMFB3DKM.js";
import {
  l as l2
} from "./chunk-H7XUEHGR.js";
import {
  I as I2,
  T,
  _ as _4,
  e as e2,
  j as j2,
  k as k2,
  m as m2,
  r as r6,
  v
} from "./chunk-TNW4TPNP.js";
import {
  n as n4,
  r as r4,
  u as u2
} from "./chunk-7FAVUXK2.js";
import {
  L,
  _ as _2,
  a as a2
} from "./chunk-IVNFIIVI.js";
import {
  n as n3,
  r as r3,
  t as t2,
  u
} from "./chunk-RACDQ3AL.js";
import {
  P
} from "./chunk-52HWRRRQ.js";
import {
  j
} from "./chunk-VNTEV3V4.js";
import {
  y
} from "./chunk-OGOQOMMV.js";
import {
  n as n2
} from "./chunk-HCYE6OE4.js";
import {
  o
} from "./chunk-YIV2QKTZ.js";
import {
  r as r2,
  s
} from "./chunk-FPSA4NFH.js";
import {
  _,
  i
} from "./chunk-Q6XRAGMA.js";
import {
  d
} from "./chunk-OXSERRAR.js";
import {
  b,
  m
} from "./chunk-N3XLUQJI.js";
import {
  a2 as a
} from "./chunk-JUAD7TJ6.js";
import {
  r
} from "./chunk-5TPMG26T.js";
import {
  e,
  t
} from "./chunk-GZ2P4SCJ.js";
import {
  G,
  h,
  n
} from "./chunk-FXKORAMT.js";

// node_modules/@arcgis/core/views/interactive/coordinateHelper.js
var x;
!function(e7) {
  e7[e7.Z = 0] = "Z", e7[e7.M = 1] = "M";
}(x || (x = {}));
var R = class {
  constructor(e7) {
    this.spatialReference = e7;
  }
  createVector() {
    return this._tag(n5());
  }
  pointToVector(e7) {
    return this._tag(r5(e7.x, e7.y));
  }
  arrayToVector(e7) {
    return this._tag(r5(e7[0], e7[1]));
  }
  vectorToArray(e7) {
    return [e7[0], e7[1]];
  }
  pointToArray(e7) {
    return [e7.x, e7.y];
  }
  vectorToPoint(e7, r11 = new _()) {
    if (e7) return r11.x = e7[0], r11.y = e7[1], r11.z = void 0, r11.m = void 0, r11.spatialReference = this.spatialReference, r11;
  }
  arrayToPoint(e7, r11 = new _()) {
    return r11.x = e7[0], r11.y = e7[1], r11.z = void 0, r11.m = void 0, r11.spatialReference = this.spatialReference, r11;
  }
  vectorToDehydratedPoint(e7, r11) {
    if (e7) return r11 ??= { x: void 0, y: void 0, z: void 0, m: void 0, hasZ: void 0, hasM: void 0, spatialReference: void 0, type: "point" }, r11.x = e7[0], r11.y = e7[1], r11.z = void 0, r11.m = void 0, r11.hasZ = false, r11.hasM = false, r11.spatialReference = this.spatialReference, r11;
  }
  lerp(e7, t9, a8, i6) {
    return _4(i6, e7, t9, a8);
  }
  addDelta(e7, r11, t9) {
    e7[0] += r11, e7[1] += t9;
  }
  distance(r11, t9) {
    return m2(r11, t9);
  }
  getZ(e7, r11 = void 0) {
    return r11;
  }
  hasZ() {
    return false;
  }
  getM(e7, r11 = void 0) {
    return r11;
  }
  hasM() {
    return false;
  }
  clone(e7) {
    return this._tag(o3(e7));
  }
  copy(e7, r11) {
    return r6(r11, e7);
  }
  fromXYZ(e7) {
    return this._tag(r5(e7[0], e7[1]));
  }
  toXYZ(e7, r11 = n3()) {
    return o2(r11, e7[0], e7[1], 0);
  }
  pointToXYZ(e7, r11 = n3()) {
    return o2(r11, e7.x, e7.y, 0);
  }
  equals(e7, r11) {
    return T(e7, r11);
  }
  _tag(e7) {
    return e7;
  }
};
var M2 = class {
  constructor(e7, r11) {
    this._valueType = e7, this.spatialReference = r11;
  }
  createVector() {
    return this._tag(n3());
  }
  pointToVector(e7) {
    return this._tag(r3(e7.x, e7.y, this._valueType === x.Z ? e7.z : e7.m));
  }
  arrayToVector(e7) {
    return this._tag(r3(e7[0], e7[1], e7[2] || 0));
  }
  vectorToArray(e7) {
    return [e7[0], e7[1], e7[2]];
  }
  pointToArray(e7) {
    return this._valueType === x.Z ? [e7.x, e7.y, e7.z] : [e7.x, e7.y, e7.m];
  }
  vectorToPoint(e7, r11 = new _()) {
    if (e7) return r11.x = e7[0], r11.y = e7[1], r11.z = this._valueType === x.Z ? e7[2] : void 0, r11.m = this._valueType === x.M ? e7[2] : void 0, r11.spatialReference = this.spatialReference, r11;
  }
  arrayToPoint(e7, r11 = new _()) {
    return r11.x = e7[0], r11.y = e7[1], r11.z = this._valueType === x.Z ? e7[2] : void 0, r11.m = this._valueType === x.M ? e7[2] : void 0, r11.spatialReference = this.spatialReference, r11;
  }
  vectorToDehydratedPoint(e7, r11) {
    if (!e7) return;
    r11 ??= { x: void 0, y: void 0, z: void 0, m: void 0, hasZ: void 0, hasM: void 0, spatialReference: void 0, type: "point" };
    const t9 = this._valueType === x.Z, a8 = this._valueType === x.M;
    return r11.x = e7[0], r11.y = e7[1], r11.z = t9 ? e7[2] : void 0, r11.m = a8 ? e7[2] : void 0, r11.hasZ = t9, r11.hasM = a8, r11.spatialReference = this.spatialReference, r11;
  }
  lerp(e7, r11, t9, a8) {
    return I(a8, e7, r11, t9);
  }
  addDelta(e7, r11, t9, a8) {
    e7[0] += r11, e7[1] += t9, this._valueType === x.Z && (e7[2] += a8);
  }
  distance(r11, t9) {
    return this._valueType === x.Z ? p(r11, t9) : m2(w3(r11), w3(t9));
  }
  getZ(e7, r11 = void 0) {
    return this._valueType === x.Z ? e7[2] : r11;
  }
  hasZ() {
    return this._valueType === x.Z;
  }
  getM(e7, r11 = void 0) {
    return this._valueType === x.M ? e7[2] : r11;
  }
  hasM() {
    return this._valueType === x.M;
  }
  clone(e7) {
    return this._tag(u(e7));
  }
  copy(e7, r11) {
    return s2(r11, e7);
  }
  fromXYZ(e7, r11 = 0, t9 = 0) {
    return this._tag(r3(e7[0], e7[1], this._valueType === x.Z ? e7.length > 2 ? e7[2] : r11 : t9));
  }
  toXYZ(e7, r11 = n3()) {
    return o2(r11, e7[0], e7[1], this._valueType === x.Z ? e7[2] : 0);
  }
  pointToXYZ(e7, r11 = n3()) {
    return o2(r11, e7.x, e7.y, this._valueType === x.Z ? e7.z ?? 0 : 0);
  }
  equals(e7, r11) {
    return J(e7, r11);
  }
  _tag(e7) {
    return e7;
  }
};
var z2 = class {
  constructor(e7) {
    this.spatialReference = e7;
  }
  createVector() {
    return this._tag(n4());
  }
  pointToVector(e7) {
    return this._tag(r4(e7.x, e7.y, e7.z, e7.m));
  }
  arrayToVector(e7) {
    return this._tag(r4(e7[0], e7[1], e7[2] || 0, e7[3] || 0));
  }
  vectorToArray(e7) {
    return [e7[0], e7[1], e7[2], e7[3]];
  }
  pointToArray(e7) {
    return [e7.x, e7.y, e7.z, e7.m];
  }
  vectorToPoint(e7, r11 = new _()) {
    return r11.x = e7[0], r11.y = e7[1], r11.z = e7[2], r11.m = e7[3], r11.spatialReference = this.spatialReference, r11;
  }
  arrayToPoint(e7, r11 = new _()) {
    return r11.x = e7[0], r11.y = e7[1], r11.z = e7[2], r11.m = e7[3], r11.spatialReference = this.spatialReference, r11;
  }
  vectorToDehydratedPoint(e7, r11) {
    if (e7) return r11 ??= { x: void 0, y: void 0, z: void 0, m: void 0, hasZ: void 0, hasM: void 0, spatialReference: void 0, type: "point" }, r11.x = e7[0], r11.y = e7[1], r11.z = e7[2], r11.m = e7[3], r11.hasZ = true, r11.hasM = true, r11.spatialReference = this.spatialReference, r11;
  }
  lerp(e7, r11, t9, a8) {
    return _2(a8, e7, r11, t9);
  }
  addDelta(e7, r11, t9, a8) {
    e7[0] += r11, e7[1] += t9, e7[2] += a8;
  }
  distance(e7, r11) {
    return p(V2(e7), V2(r11));
  }
  getZ(e7) {
    return e7[2];
  }
  hasZ() {
    return true;
  }
  getM(e7) {
    return e7[3];
  }
  hasM() {
    return true;
  }
  clone(e7) {
    return this._tag(u2(e7));
  }
  copy(e7, r11) {
    return a2(r11, e7);
  }
  fromXYZ(e7, r11 = 0, t9 = 0) {
    return this._tag(r4(e7[0], e7[1], e7.length > 2 ? e7[2] : r11, t9));
  }
  toXYZ(e7, r11 = n3()) {
    return o2(r11, e7[0], e7[1], e7[2]);
  }
  pointToXYZ(e7, r11 = n3()) {
    return o2(r11, e7.x, e7.y, e7.z ?? 0);
  }
  equals(e7, r11) {
    return L(e7, r11);
  }
  _tag(e7) {
    return e7;
  }
};
function V2(e7) {
  return e7;
}
function w3(e7) {
  return e7;
}
function P3(e7, r11, t9) {
  return e7 && r11 ? new z2(t9) : r11 ? new M2(x.M, t9) : e7 ? new M2(x.Z, t9) : new R(t9);
}

// node_modules/@arcgis/core/views/interactive/editGeometry/unnormalizationHelper.js
function e3(o7, r11) {
  if (!r11.supported) return;
  let e7 = 1 / 0, p4 = -1 / 0;
  const n9 = r11.upperBoundX - r11.lowerBoundX;
  o7.forEach((o8) => {
    let u6 = o8.pos[0];
    for (; u6 < r11.lowerBoundX; ) u6 += n9;
    for (; u6 > r11.upperBoundX; ) u6 -= n9;
    e7 = Math.min(e7, u6), p4 = Math.max(p4, u6), o8.pos[0] = u6;
  });
  const u5 = p4 - e7;
  n9 - u5 < u5 && o7.forEach((o8) => {
    o8.pos[0] < 0 && (o8.pos[0] += n9);
  });
}
function p2(e7, p4) {
  const n9 = d(e7);
  return p4 === l2.Global && n9 ? { supported: true, lowerBoundX: n9.valid[0], upperBoundX: n9.valid[1] } : { supported: false, lowerBoundX: null, upperBoundX: null };
}

// node_modules/@arcgis/core/views/interactive/editGeometry/EditGeometry.js
var h4 = class {
  constructor(e7) {
    this.component = e7, this.leftEdge = null, this.rightEdge = null, this.type = "vertex", this.index = null;
  }
  get pos() {
    return this._pos;
  }
  set pos(e7) {
    this._pos = e7, this.component.unnormalizeVertexPositions();
  }
};
var l4 = class {
  constructor(e7, t9, s7) {
    this.component = e7, this.leftVertex = t9, this.rightVertex = s7, this.type = "edge", t9.rightEdge = this, s7.leftEdge = this;
  }
};
var a5 = class {
  constructor(e7, t9) {
    this._spatialReference = e7, this._viewingMode = t9, this.vertices = [], this.edges = [], this.index = null;
  }
  unnormalizeVertexPositions() {
    this.vertices.length <= 1 || e3(this.vertices, p2(this._spatialReference, this._viewingMode));
  }
  updateVertexIndex(e7, t9) {
    if (0 === this.vertices.length) return;
    const s7 = this.vertices[0];
    let i6 = null, r11 = e7, o7 = t9;
    do {
      i6 = r11, i6.index = o7++, r11 = i6.rightEdge ? i6.rightEdge.rightVertex : null;
    } while (null != r11 && r11 !== s7);
    i6.leftEdge && i6 !== this.vertices[this.vertices.length - 1] && this.swapVertices(this.vertices.indexOf(i6), this.vertices.length - 1);
  }
  getFirstVertex() {
    return this.vertices.at(0);
  }
  getLastVertex() {
    return this.vertices.at(-1);
  }
  isClosed() {
    return this.vertices.length > 2 && null !== this.vertices[0].leftEdge;
  }
  swapVertices(e7, t9) {
    const s7 = this.vertices[e7];
    this.vertices[e7] = this.vertices[t9], this.vertices[t9] = s7;
  }
  iterateVertices(e7) {
    if (0 === this.vertices.length) return;
    const t9 = this.vertices[0];
    let s7 = t9;
    do {
      e7(s7, s7.index), s7 = null != s7.rightEdge ? s7.rightEdge.rightVertex : null;
    } while (s7 !== t9 && null != s7);
  }
};
var p3 = class _p extends o {
  constructor(e7, t9) {
    super(), this.type = e7, this.coordinateHelper = t9, this._geometry = null, this._dirty = true, this.components = [];
  }
  get geometry() {
    if (this._dirty) {
      switch (this.type) {
        case "point":
          this._geometry = this._toPoint();
          break;
        case "polyline":
          this._geometry = this._toPolyline();
          break;
        case "polygon":
          this._geometry = this._toPolygon();
          break;
        case "mesh":
          break;
        default:
          n(this.type);
      }
      this._dirty = false;
    }
    return this._geometry;
  }
  get spatialReference() {
    return this.coordinateHelper.spatialReference;
  }
  get allVertices() {
    return Array.from(this.iterateVertices());
  }
  *iterateVertices() {
    for (const e7 of this.components) for (const t9 of e7.vertices) yield t9;
  }
  notifyChanges(e7) {
    this._dirty = true, this.emit("change", e7);
  }
  _toPoint() {
    return 0 === this.components.length || 0 === this.components[0].vertices.length ? null : this.coordinateHelper.vectorToPoint(this.components[0].vertices[0].pos);
  }
  _toPolyline() {
    const e7 = [], t9 = this.coordinateHelper.vectorToArray;
    for (const s7 of this.components) {
      if (s7.vertices.length < 1) continue;
      const i6 = [];
      let r11 = s7.vertices.find((e8) => null == e8.leftEdge);
      const o7 = r11;
      do {
        i6.push(t9(r11.pos)), r11 = r11.rightEdge ? r11.rightEdge.rightVertex : null;
      } while (r11 && r11 !== o7);
      e7.push(i6);
    }
    return new y({ paths: e7, spatialReference: this.spatialReference, hasZ: this.coordinateHelper.hasZ(), hasM: this.coordinateHelper.hasM() });
  }
  _toPolygon() {
    const e7 = [], t9 = this.coordinateHelper.vectorToArray;
    for (const s7 of this.components) {
      if (s7.vertices.length < 1) continue;
      const i6 = [], r11 = s7.vertices[0];
      let o7 = r11;
      const n9 = o7;
      do {
        i6.push(t9(o7.pos)), o7 = null != o7.rightEdge ? o7.rightEdge.rightVertex : null;
      } while (o7 && o7 !== n9);
      s7.isClosed() && i6.push(t9(r11.pos)), e7.push(i6);
    }
    return new P({ rings: e7, spatialReference: this.spatialReference, hasZ: this.coordinateHelper.hasZ(), hasM: this.coordinateHelper.hasM() });
  }
  static fromGeometry(e7, t9) {
    const s7 = e7.spatialReference, i6 = P3(e7.hasZ, e7.hasM, s7), r11 = new _p(e7.type, i6);
    switch (e7.type) {
      case "polygon":
        g2(r11, e7, t9);
        break;
      case "polyline":
        d3(r11, e7, t9);
        break;
      case "point":
        u4(r11, e7, t9);
        break;
      case "mesh":
        u4(r11, e7.origin, t9), r11._geometry = e7, r11._dirty = false;
    }
    return r11;
  }
};
function g2(t9, s7, i6) {
  const r11 = s7.spatialReference, o7 = t9.coordinateHelper, n9 = s7.rings;
  for (let c4 = 0; c4 < n9.length; ++c4) {
    const s8 = n9[c4], p4 = new a5(r11, i6);
    p4.index = c4;
    const g4 = s8.length > 2 && h(s8[0], s8[s8.length - 1]), d4 = g4 ? s8.length - 1 : s8.length;
    for (let e7 = 0; e7 < d4; ++e7) {
      const t10 = o7.arrayToVector(s8[e7]), i7 = new h4(p4);
      p4.vertices.push(i7), i7.pos = t10, i7.index = e7;
    }
    const u5 = p4.vertices.length - 1;
    for (let e7 = 0; e7 < u5; ++e7) {
      const t10 = p4.vertices[e7], s9 = p4.vertices[e7 + 1], i7 = new l4(p4, t10, s9);
      p4.edges.push(i7);
    }
    if (g4) {
      const e7 = new l4(p4, p4.vertices[p4.vertices.length - 1], p4.vertices[0]);
      p4.edges.push(e7);
    }
    t9.components.push(p4);
  }
}
function d3(e7, t9, s7) {
  const i6 = t9.spatialReference, r11 = e7.coordinateHelper, o7 = t9.paths;
  for (let n9 = 0; n9 < o7.length; ++n9) {
    const t10 = o7[n9], c4 = new a5(i6, s7);
    c4.index = n9;
    const p4 = t10.length;
    for (let e8 = 0; e8 < p4; ++e8) {
      const s8 = r11.arrayToVector(t10[e8]), i7 = new h4(c4);
      c4.vertices.push(i7), i7.pos = s8, i7.index = e8;
    }
    const g4 = c4.vertices.length - 1;
    for (let e8 = 0; e8 < g4; ++e8) {
      const t11 = c4.vertices[e8], s8 = c4.vertices[e8 + 1], i7 = new l4(c4, t11, s8);
      c4.edges.push(i7);
    }
    e7.components.push(c4);
  }
}
function u4(e7, t9, s7) {
  const i6 = t9.spatialReference, r11 = e7.coordinateHelper, o7 = new a5(i6, s7);
  o7.index = 0;
  const n9 = new h4(o7);
  n9.index = 0, n9.pos = r11.pointToVector(t9), o7.vertices.push(n9), e7.components.push(o7);
}
function f2(e7) {
  return "mesh" === e7.type;
}

// node_modules/@arcgis/core/views/interactive/editGeometry/interfaces.js
var E;
!function(E3) {
  E3[E3.NEW_STEP = 0] = "NEW_STEP", E3[E3.ACCUMULATE_STEPS = 1] = "ACCUMULATE_STEPS";
}(E || (E = {}));

// node_modules/@arcgis/core/views/interactive/editGeometry/operations/AppendVertex.js
var i3 = class {
  constructor(e7, t9, i6) {
    this._editGeometry = e7, this._component = t9, this._pos = i6, this._addedVertex = null, this._originalEdge = null, this._left = null, this._right = null;
  }
  apply() {
    let i6 = "redo";
    null == this._addedVertex && (i6 = "apply", this._addedVertex = new h4(this._component));
    const s7 = this._component.getLastVertex();
    if (null == s7) this._component.vertices.push(this._addedVertex), this._addedVertex.pos = this._pos, this._addedVertex.index = 0;
    else {
      let e7 = null;
      s7.rightEdge && (this._originalEdge = s7.rightEdge, e7 = this._originalEdge.rightVertex, this._component.edges.splice(this._component.edges.indexOf(this._originalEdge), 1)), this._component.vertices.push(this._addedVertex), this._addedVertex.pos = this._pos, null == this._left && (this._left = new l4(this._component, s7, this._addedVertex)), this._component.edges.push(this._left), s7.rightEdge = this._left, null != this._originalEdge && null != e7 && (null == this._right && (this._right = new l4(this._component, this._addedVertex, e7)), this._component.edges.push(this._right), e7.leftEdge = this._right), this._component.updateVertexIndex(this._addedVertex, s7.index + 1);
    }
    this._editGeometry.notifyChanges({ operation: i6, addedVertices: [this._addedVertex] });
  }
  undo() {
    null != this._addedVertex && (this._component.vertices.splice(this._component.vertices.indexOf(this._addedVertex), 1), null != this._left && (this._component.edges.splice(this._component.edges.indexOf(this._left), 1), this._left.leftVertex.rightEdge = null), null != this._right && (this._component.edges.splice(this._component.edges.indexOf(this._right), 1), this._right.rightVertex.leftEdge = null), null != this._originalEdge && (this._component.edges.push(this._originalEdge), this._originalEdge.leftVertex.rightEdge = this._originalEdge, this._originalEdge.rightVertex.leftEdge = this._originalEdge), null != this._left ? this._component.updateVertexIndex(this._left.leftVertex, this._left.leftVertex.index) : this._component.updateVertexIndex(this._addedVertex, 0), this._editGeometry.notifyChanges({ operation: "undo", removedVertices: [this._addedVertex] }));
  }
  accumulate() {
    return false;
  }
};

// node_modules/@arcgis/core/views/interactive/editGeometry/operations/UpdateVertices.js
var t3 = class _t {
  constructor(t9, e7, i6) {
    this._editGeometry = t9, this._vertices = e7, this.operation = i6, this._undone = false;
  }
  _notifyChanges(t9) {
    this._editGeometry.components.forEach((t10) => t10.unnormalizeVertexPositions()), this._editGeometry.notifyChanges({ operation: t9, updatedVertices: this._vertices });
  }
  apply() {
    this._vertices.forEach((t9) => this.operation.apply(t9)), this._notifyChanges(this._undone ? "redo" : "apply");
  }
  undo() {
    this._vertices.forEach((t9) => this.operation.undo(t9)), this._undone = true, this._notifyChanges("undo");
  }
  canAccumulate(t9) {
    if (this._undone || t9._vertices.length !== this._vertices.length) return false;
    for (let e7 = 0; e7 < t9._vertices.length; ++e7) if (t9._vertices[e7] !== this._vertices[e7]) return false;
    return this.operation.canAccumulate(t9.operation);
  }
  accumulate(e7) {
    return !!(e7 instanceof _t && this.canAccumulate(e7)) && (this._vertices.forEach((t9) => this.operation.accumulate(t9, e7.operation)), this.operation.accumulateParams(e7.operation), this._notifyChanges("apply"), true);
  }
};
var e4;
!function(t9) {
  t9[t9.CUMULATIVE = 0] = "CUMULATIVE", t9[t9.REPLACE = 1] = "REPLACE";
}(e4 || (e4 = {}));

// node_modules/@arcgis/core/views/interactive/editGeometry/operations/RemoveVertices.js
var t4 = class {
  constructor(e7, t9, r11 = 0) {
    this._editGeometry = e7, this._vertices = t9, this._minNumberOfVertices = r11, this.removedVertices = null;
  }
  apply() {
    let e7 = "redo";
    if (null == this.removedVertices) {
      const t9 = this.removedVertices = [];
      this._vertices.forEach((e8) => {
        const r11 = this._removeVertex(e8);
        null != r11 && t9.push(r11);
      }), e7 = "apply";
    } else this.removedVertices.forEach((e8) => {
      this._removeVertex(e8.removedVertex);
    });
    this._editGeometry.notifyChanges({ operation: e7, removedVertices: this._vertices });
  }
  undo() {
    this.removedVertices?.forEach((e7) => {
      this._undoRemoveVertex(e7);
    }), this._editGeometry.notifyChanges({ operation: "undo", addedVertices: this._vertices });
  }
  accumulate() {
    return false;
  }
  _removeVertex(t9) {
    const r11 = t9.component;
    if (r11.vertices.length <= this._minNumberOfVertices) return null;
    const i6 = { removedVertex: t9, createdEdge: null }, s7 = t9.leftEdge, d4 = t9.rightEdge;
    return r11.vertices.splice(r11.vertices.indexOf(t9), 1), s7 && (r11.edges.splice(r11.edges.indexOf(s7), 1), s7.leftVertex.rightEdge = null), d4 && (r11.edges.splice(r11.edges.indexOf(d4), 1), d4.rightVertex.leftEdge = null), 0 === t9.index && d4 && this._vertices.length > 0 && r11.swapVertices(r11.vertices.indexOf(d4.rightVertex), 0), s7 && d4 && (i6.createdEdge = new l4(r11, s7.leftVertex, d4.rightVertex), r11.edges.push(i6.createdEdge)), d4 && r11.updateVertexIndex(d4.rightVertex, d4.rightVertex.index - 1), i6;
  }
  _undoRemoveVertex(e7) {
    const t9 = e7.removedVertex, r11 = e7.removedVertex.component, i6 = t9.leftEdge, s7 = t9.rightEdge;
    e7.createdEdge && r11.edges.splice(r11.edges.indexOf(e7.createdEdge), 1), r11.vertices.push(t9), i6 && (r11.edges.push(i6), i6.leftVertex.rightEdge = i6), s7 && (r11.edges.push(s7), s7.rightVertex.leftEdge = s7), r11.updateVertexIndex(t9, t9.index);
  }
};

// node_modules/@arcgis/core/views/interactive/editGeometry/operations/SplitEdge.js
var i4 = class {
  constructor(e7, t9, i6) {
    this._editGeometry = e7, this._edge = t9, this._t = i6, this.createdVertex = null, this._left = null, this._right = null;
  }
  apply() {
    let i6 = "redo";
    const r11 = this._edge, s7 = r11.component, d4 = r11.leftVertex, h6 = r11.rightVertex;
    s7.edges.splice(s7.edges.indexOf(r11), 1), null == this.createdVertex && (i6 = "apply", this.createdVertex = new h4(r11.component)), s7.vertices.push(this.createdVertex), this.createdVertex.pos = this._editGeometry.coordinateHelper.lerp(r11.leftVertex.pos, r11.rightVertex.pos, this._t, this._editGeometry.coordinateHelper.createVector()), null == this._left && (this._left = new l4(s7, d4, this.createdVertex)), this._left.leftVertex.leftEdge ? s7.edges.push(this._left) : s7.edges.unshift(this._left), d4.rightEdge = this._left, null == this._right && (this._right = new l4(s7, this.createdVertex, h6)), s7.edges.push(this._right), h6.leftEdge = this._right, s7.updateVertexIndex(this.createdVertex, d4.index + 1), this._editGeometry.notifyChanges({ operation: i6, addedVertices: [this.createdVertex] });
  }
  undo() {
    if (null == this.createdVertex || null == this._left || null == this._right) return null;
    const e7 = this._edge, t9 = e7.component, i6 = this.createdVertex.leftEdge, r11 = this.createdVertex.rightEdge, s7 = i6?.leftVertex, d4 = r11?.rightVertex;
    t9.vertices.splice(t9.vertices.indexOf(this.createdVertex), 1), t9.edges.splice(t9.edges.indexOf(this._left), 1), t9.edges.splice(t9.edges.indexOf(this._right), 1), this._edge.leftVertex.leftEdge ? t9.edges.push(this._edge) : t9.edges.unshift(this._edge), s7 && (s7.rightEdge = e7), d4 && (d4.leftEdge = e7), s7 && t9.updateVertexIndex(s7, s7.index), this._editGeometry.notifyChanges({ operation: "undo", removedVertices: [this.createdVertex] });
  }
  accumulate() {
    return false;
  }
};

// node_modules/@arcgis/core/views/interactive/editGeometry/operations/SetVertexPosition.js
var t5 = class _t {
  constructor(t9, e7, i6) {
    this._editGeometry = t9, this._vertex = e7, this._pos = i6;
  }
  apply() {
    const t9 = null == this._originalPosition;
    t9 && (this._originalPosition = this._vertex.pos), this._apply(t9 ? "apply" : "redo");
  }
  undo() {
    this._vertex.pos = this._originalPosition, this._editGeometry.notifyChanges({ operation: "undo", updatedVertices: [this._vertex] });
  }
  accumulate(e7) {
    return e7 instanceof _t && e7._vertex === this._vertex && (this._pos = e7._pos, this._apply("apply"), true);
  }
  _apply(t9) {
    this._vertex.pos = this._pos, this._editGeometry.components.forEach((t10) => t10.unnormalizeVertexPositions()), this._editGeometry.notifyChanges({ operation: t9, updatedVertices: [this._vertex] });
  }
};

// node_modules/@arcgis/core/views/interactive/editGeometry/operations/CloseComponent.js
var r9 = class {
  constructor(e7, t9) {
    this._editGeometry = e7, this._component = t9, this._createdEdge = null;
  }
  apply() {
    let e7 = "redo";
    if (null == this._createdEdge) {
      e7 = "apply";
      const r11 = this._component.getFirstVertex(), i6 = this._component.getLastVertex();
      if (this._component.isClosed() || this._component.vertices.length < 3 || null == r11 || null == i6) return;
      this._createdEdge = new l4(this._component, i6, r11);
    }
    this._createdEdge.leftVertex.rightEdge = this._createdEdge, this._createdEdge.rightVertex.leftEdge = this._createdEdge, this._component.edges.push(this._createdEdge), this._editGeometry.notifyChanges({ operation: e7 });
  }
  undo() {
    null != this._createdEdge && (G(this._component.edges, this._createdEdge), this._createdEdge.leftVertex.rightEdge = null, this._createdEdge.rightVertex.leftEdge = null, this._editGeometry.notifyChanges({ operation: "undo" }));
  }
  accumulate() {
    return false;
  }
};

// node_modules/@arcgis/core/views/interactive/editGeometry/operations/MoveMesh.js
var t6 = class _t {
  constructor(t9, e7, i6, s7) {
    this._editGeometry = t9, this.dx = e7, this.dy = i6, this.dz = s7, this._firstTime = true;
  }
  apply() {
    const t9 = this._firstTime ? "apply" : "redo";
    this._firstTime = false, this._apply(t9, this.dx, this.dy, this.dz);
  }
  undo() {
    this._apply("undo", -this.dx, -this.dy, -this.dz);
  }
  accumulate(e7) {
    const i6 = this._editGeometry.geometry;
    return e7 instanceof _t && e7._editGeometry.geometry === i6 && (this._apply("apply", e7.dx, e7.dy, e7.dz), this.dx += e7.dx, this.dy += e7.dy, this.dz += e7.dz, true);
  }
  _apply(t9, e7, i6, s7) {
    const o7 = this._editGeometry.geometry;
    o7.offset(e7, i6, s7);
    const d4 = this._editGeometry.components[0].getFirstVertex();
    if (!d4) return;
    const r11 = this._editGeometry.coordinateHelper;
    d4.pos = r11.pointToVector(o7.origin), this._editGeometry.notifyChanges({ operation: t9, updatedVertices: [d4] });
  }
};

// node_modules/@arcgis/core/views/interactive/editGeometry/operations/MoveVertex.js
var t7 = class _t {
  constructor(t9, s7, d4, h6) {
    this._helper = t9, this.dx = s7, this.dy = d4, this.dz = h6;
  }
  _move(t9, s7, d4, h6) {
    this._helper.addDelta(t9.pos, s7, d4, h6);
  }
  apply(t9) {
    this._move(t9, this.dx, this.dy, this.dz);
  }
  undo(t9) {
    this._move(t9, -this.dx, -this.dy, -this.dz);
  }
  canAccumulate(s7) {
    return s7 instanceof _t;
  }
  accumulate(t9, s7) {
    this._move(t9, s7.dx, s7.dy, s7.dz);
  }
  accumulateParams(t9) {
    this.dx += t9.dx, this.dy += t9.dy, this.dz += t9.dz;
  }
};

// node_modules/@arcgis/core/views/interactive/editGeometry/operations/OffsetEdgeVertex.js
var P4 = class _P {
  get plane() {
    return this._plane;
  }
  get requiresSplitEdgeLeft() {
    return !this._left.isOriginalDirection;
  }
  get requiresSplitEdgeRight() {
    return !this._right.isOriginalDirection;
  }
  get edgeDirection() {
    return this._edgeDirection;
  }
  constructor(t9, i6, e7, s7 = 0, n9 = j5.IMMEDIATE) {
    this._helper = t9, this._planeType = i6, this._edge = e7, this.distance = s7, this._plane = M(), this._offsetPlane = M(), this._minDistance = -1 / 0, this._maxDistance = 1 / 0, this._selectedArrow = 1, n9 === j5.IMMEDIATE && this._initialize();
  }
  _initialize() {
    this._initializeNeighbors(), this._initializePlane(), this._initializeDistanceConstraints();
  }
  _initializeNeighbors() {
    const t9 = this._toXYZ(this._edge.leftVertex.pos), i6 = this._toXYZ(this._edge.leftVertex.leftEdge?.leftVertex?.pos), e7 = this._toXYZ(this._edge.rightVertex.pos), s7 = this._toXYZ(this._edge.rightVertex.rightEdge?.rightVertex?.pos);
    this._edgeDirection = K(n3(), t9, e7), i6 ? (this._left = this._computeNeighbor(t9, i6, this._edgeDirection), this._right = this._computeNeighbor(e7, s7, this._edgeDirection, this._left)) : (this._right = this._computeNeighbor(e7, s7, this._edgeDirection), this._left = this._computeNeighbor(t9, i6, this._edgeDirection, this._right));
  }
  _toXYZ(t9) {
    return null != t9 ? this._helper.toXYZ(t9) : null;
  }
  _pointToXYZ(t9) {
    return this._toXYZ(this._helper.pointToVector(t9));
  }
  _computeNeighbor(t9, i6, e7, s7) {
    const n9 = n3();
    if (i6) {
      K(n9, t9, i6);
      const s8 = !this._passesBisectingAngleThreshold(n9, e7);
      return { start: t9, end: i6, direction: s8 ? this._bisectVectorsPerpendicular(e7, n9) : n9, isOriginalDirection: !s8 };
    }
    return this._helper.hasZ() ? s7 && (_3(n9, e7, s7.direction), _3(n9, n9, e7), A(n9, n9), Math.sign(n9[1]) !== Math.sign(e7[0]) && g(n9, n9, -1)) : o2(n9, -e7[1], e7[0], 0), { start: t9, end: i6, direction: n9, isOriginalDirection: true };
  }
  _passesBisectingAngleThreshold(t9, i6) {
    const e7 = Math.abs(f(i6, t9));
    return e7 >= y3 && e7 <= Math.PI - y3;
  }
  _bisectVectorsPerpendicular(t9, i6) {
    const e7 = P2(t9, i6) < 0 ? t9 : y2(n3(), t9), s7 = Math.abs(P2(e7, i6));
    if (!(s7 < A4 || s7 > 1 - A4)) return this._bisectDirection(e7, i6);
    const n9 = _3(n3(), e7, [0, 0, 1]);
    return A(n9, n9);
  }
  _bisectDirection(t9, i6) {
    const e7 = u3(n3(), t9, i6);
    return A(e7, e7);
  }
  _initializePlane() {
    const t9 = this._computeNormalDirection(this._left), i6 = this._computeNormalDirection(this._right);
    P2(t9, i6) < 0 && y2(i6, i6), l(this._left.start, this._bisectDirection(t9, i6), this._plane);
  }
  _computeNormalDirection(t9) {
    const i6 = _3(n3(), t9.direction, this._edgeDirection);
    A(i6, i6);
    const e7 = _3(n3(), this._edgeDirection, i6);
    return this._planeType === z3.XY && (e7[2] = 0), A(e7, e7);
  }
  _initializeDistanceConstraints() {
    null == this._left.end || this.requiresSplitEdgeLeft || this._updateDistanceConstraint(V(this._plane, this._left.end)), null == this._right.end || this.requiresSplitEdgeRight || this._updateDistanceConstraint(V(this._plane, this._right.end)), this._updateIntersectDistanceConstraint(this._plane);
  }
  _updateDistanceConstraint(t9) {
    t9 <= 0 && (this._minDistance = Math.max(this._minDistance, t9)), t9 >= 0 && (this._maxDistance = Math.min(this._maxDistance, t9));
  }
  _updateIntersectDistanceConstraint(t9) {
    const i6 = O(t9), h6 = this._edgeDirection, o7 = u3(n3(), this._left.start, this._left.direction), a8 = u3(n3(), this._right.start, this._right.direction), _5 = this._pointInBasis2D(n5(), i6, h6, this._left.start), l5 = this._pointInBasis2D(n5(), i6, h6, o7), p4 = this._pointInBasis2D(n5(), i6, h6, this._right.start), d4 = this._pointInBasis2D(n5(), i6, h6, a8), [u5] = b2({ start: l5, end: _5, type: j3.LINE }, { start: d4, end: p4, type: j3.LINE });
    if (!u5) return;
    const m3 = e2(n5(), _5, l5);
    v(m3, m3);
    const D2 = e2(n5(), u5, l5), E3 = j2(m3, D2), I3 = u3(n3(), o7, g(n3(), this._left.direction, -E3)), M4 = V(t9, I3);
    this._updateDistanceConstraint(M4);
  }
  _pointInBasis2D(t9, i6, e7, s7) {
    return t9[0] = a3(i6, s7), t9[1] = a3(e7, s7), t9;
  }
  _offset(t9, i6) {
    Number.isFinite(this._minDistance) && (i6 = Math.max(this._minDistance, i6)), Number.isFinite(this._maxDistance) && (i6 = Math.min(this._maxDistance, i6)), h2(this._offsetPlane, this._plane), this._offsetPlane[3] -= i6;
    const e7 = (t10, i7, e8) => null != i7 && k(this._offsetPlane, t10, u3(n3(), t10, i7), e8), s7 = n3();
    (t9 === this._edge.leftVertex ? e7(this._left.start, this._left.direction, s7) : e7(this._right.start, this._right.direction, s7)) && this._helper.copy(this._helper.fromXYZ(s7, void 0, this._helper.getM(t9.pos)), t9.pos);
  }
  selectArrowFromStartPoint(t9) {
    this._selectedArrow = z(this.plane, this._pointToXYZ(t9)) ? 1 : -1;
  }
  get selectedArrow() {
    return this._selectedArrow;
  }
  signedDistanceToPoint(t9) {
    return V(this.plane, this._pointToXYZ(t9));
  }
  clampedStartAndEnd(i6) {
    const e7 = this._helper.toXYZ(this._helper.pointToVector(i6)), s7 = H(this._plane, e7, n3()), n9 = V(this._plane, e7), r11 = r2(n9, this._minDistance, this._maxDistance);
    return I(e7, s7, e7, r11 / n9), { start: s7, end: e7 };
  }
  apply(t9) {
    this._offset(t9, this.distance);
  }
  undo(t9) {
    this._offset(t9, 0);
  }
  canAccumulate(t9) {
    return t9 instanceof _P && this._edge.leftVertex.index === t9._edge.leftVertex.index && this._edge.rightVertex.index === t9._edge.rightVertex.index && this._edge.component === t9._edge.component && this._maybeEqualsVec3(this._left.direction, t9._left.direction) && this._maybeEqualsVec3(this._right.direction, t9._right.direction) && J(O(this._plane), O(t9._plane));
  }
  accumulate(t9, i6) {
    const e7 = this._plane[3] - i6._plane[3] + i6.distance;
    this._offset(t9, e7);
  }
  accumulateParams(t9) {
    const i6 = t9.distance - t9._plane[3];
    this.distance = i6 + this._plane[3];
  }
  clone() {
    const t9 = new _P(this._helper, this._planeType, this._edge, this.distance, j5.DEFERRED);
    return h2(t9._plane, this._plane), h2(t9._offsetPlane, this._offsetPlane), t9._maxDistance = this._maxDistance, t9._minDistance = this._minDistance, t9._left = this._cloneNeighbor(this._left), t9._right = this._cloneNeighbor(this._right), t9._edgeDirection = s2(n3(), this._edgeDirection), t9;
  }
  _maybeEqualsVec3(t9, i6) {
    return null == t9 && null == i6 || null != t9 && null != i6 && J(t9, i6);
  }
  _cloneNeighbor({ start: t9, end: i6, direction: e7, isOriginalDirection: s7 }) {
    return { start: s2(n3(), t9), end: null != i6 ? s2(n3(), i6) : null, direction: s2(n3(), e7), isOriginalDirection: s7 };
  }
};
var y3 = s(15);
var A4 = 1e-3;
var z3;
var j5;
!function(t9) {
  t9[t9.XYZ = 0] = "XYZ", t9[t9.XY = 1] = "XY";
}(z3 || (z3 = {})), function(t9) {
  t9[t9.IMMEDIATE = 0] = "IMMEDIATE", t9[t9.DEFERRED = 1] = "DEFERRED";
}(j5 || (j5 = {}));

// node_modules/@arcgis/core/views/interactive/editGeometry/operations/RotateVertex.js
var e5 = class _e {
  constructor(t9, a8, e7 = e4.CUMULATIVE) {
    this.origin = t9, this.angle = a8, this._accumulationType = e7;
  }
  _rotate(t9, i6) {
    I2(t9.pos, t9.pos, this.origin, i6);
  }
  apply(t9) {
    this._rotate(t9, this.angle);
  }
  undo(t9) {
    this._rotate(t9, -this.angle);
  }
  canAccumulate(a8) {
    return a8 instanceof _e && h(this.origin, a8.origin);
  }
  accumulate(t9, a8) {
    const e7 = a8._accumulationType === e4.REPLACE;
    this._rotate(t9, e7 ? a8.angle - this.angle : a8.angle);
  }
  accumulateParams(t9) {
    const a8 = t9._accumulationType === e4.REPLACE;
    this.angle = a8 ? t9.angle : this.angle + t9.angle;
  }
};

// node_modules/@arcgis/core/views/interactive/editGeometry/operations/ScaleVertex.js
var c = class _c {
  constructor(t9, s7, c4, o7, r11 = e4.CUMULATIVE) {
    this.origin = t9, this.axis1 = s7, this.factor1 = c4, this.factor2 = o7, this._accumulationType = r11, this.axis2 = r5(s7[1], -s7[0]);
  }
  _scale(t9, i6, a8) {
    k2(t9.pos, t9.pos, this.origin, this.axis1, i6), k2(t9.pos, t9.pos, this.origin, this.axis2, a8);
  }
  apply(t9) {
    this._scale(t9, this.factor1, this.factor2);
  }
  undo(t9) {
    this._scale(t9, 1 / this.factor1, 1 / this.factor2);
  }
  canAccumulate(i6) {
    return i6 instanceof _c && h(this.origin, i6.origin) && h(this.axis1, i6.axis1);
  }
  accumulate(t9, i6) {
    i6._accumulationType === e4.REPLACE ? this._scale(t9, i6.factor1 / this.factor1, i6.factor2 / this.factor2) : this._scale(t9, i6.factor1, i6.factor2);
  }
  accumulateParams(t9) {
    const i6 = t9._accumulationType === e4.REPLACE;
    this.factor1 = i6 ? t9.factor1 : this.factor1 * t9.factor1, this.factor2 = i6 ? t9.factor2 : this.factor2 * t9.factor2;
  }
};

// node_modules/@arcgis/core/views/interactive/editGeometry/operations/SetAllVertexPositions.js
var i5 = class _i {
  constructor(i6, t9) {
    this._editGeometry = i6, this._newPositions = t9;
  }
  apply() {
    const i6 = null == this._originalPositions ? "apply" : "redo";
    if (!this._originalPositions) {
      const i7 = this._editGeometry.coordinateHelper;
      this._originalPositions = this._editGeometry.allVertices.map((t9) => i7.clone(t9.pos));
    }
    this._apply(i6, this._newPositions);
  }
  undo() {
    this._originalPositions && this._apply("undo", this._originalPositions);
  }
  accumulate(t9) {
    return t9 instanceof _i && (this._newPositions = t9._newPositions, this._apply("apply", this._newPositions), true);
  }
  _apply(i6, t9) {
    const o7 = this._editGeometry.coordinateHelper, s7 = this._editGeometry.allVertices;
    for (let e7 = 0; e7 < s7.length; e7++) o7.copy(t9[e7], s7[e7].pos);
    this._editGeometry.components.forEach((i7) => i7.unnormalizeVertexPositions()), this._editGeometry.notifyChanges({ operation: i6, updatedVertices: s7 });
  }
};

// node_modules/@arcgis/core/views/interactive/editGeometry/operations/UndoGroup.js
var t8;
var s5 = Symbol();
var o6 = class {
  constructor(s7) {
    this._operations = [], this._closed = false, this[t8] = true, s7 && (this._operations = s7, this._closed = true);
  }
  close() {
    this._closed = true;
  }
  apply() {
    for (const t9 of this._operations) t9.apply();
  }
  undo() {
    for (let t9 = this._operations.length - 1; t9 >= 0; t9--) this._operations[t9].undo();
  }
  accumulate(t9) {
    if (this._closed) return false;
    const s7 = this._operations.length ? this._operations[this._operations.length - 1] : null;
    return s7 && s7.accumulate(t9) || (this._operations.push(t9), t9.apply()), true;
  }
};
t8 = s5;

// node_modules/@arcgis/core/views/interactive/editGeometry/EditGeometryOperations.js
var E2 = class _E extends o {
  constructor(t9, e7) {
    super(), this.data = t9, this.viewingMode = e7, this._undoStack = [], this._redoStack = [], this._listener = this.data.on("change", (t10) => {
      t10.addedVertices && this.emit("vertex-add", { type: "vertex-add", vertices: t10.addedVertices, operation: t10.operation }), t10.removedVertices && this.emit("vertex-remove", { type: "vertex-remove", vertices: t10.removedVertices, operation: t10.operation }), t10.updatedVertices && this.emit("vertex-update", { type: "vertex-update", vertices: t10.updatedVertices, operation: t10.operation });
    });
  }
  destroy() {
    this._listener.remove();
  }
  splitEdge(t9, e7) {
    return this._apply(new i4(this.data, t9, e7));
  }
  updateVertices(t9, e7, r11 = E.ACCUMULATE_STEPS) {
    return this._apply(new t3(this.data, t9, e7), r11);
  }
  move(t9, e7, r11, s7 = E.ACCUMULATE_STEPS) {
    return f2(this.data) ? this._apply(new t6(this.data, t9, e7, r11), s7) : this.moveVertices(this.data.allVertices, t9, e7, r11, s7);
  }
  moveVertices(t9, e7, r11, s7, o7 = E.ACCUMULATE_STEPS) {
    return f2(this.data) ? this._apply(new t6(this.data, e7, r11, s7), o7) : this.updateVertices(t9, new t7(this.data.coordinateHelper, e7, r11, s7), o7);
  }
  scale(t9, e7, r11, s7, i6 = E.ACCUMULATE_STEPS, o7 = e4.CUMULATIVE) {
    return this.scaleVertices(this.data.allVertices, t9, e7, r11, s7, i6, o7);
  }
  scaleVertices(t9, e7, r11, s7, i6, o7 = E.ACCUMULATE_STEPS, n9 = e4.CUMULATIVE) {
    return this.updateVertices(t9, new c(e7, r11, s7, i6, n9), o7);
  }
  rotate(t9, e7, r11 = E.ACCUMULATE_STEPS, s7 = e4.CUMULATIVE) {
    return this.rotateVertices(this.data.allVertices, t9, e7, r11, s7);
  }
  rotateVertices(t9, e7, r11, s7 = E.ACCUMULATE_STEPS, i6 = e4.CUMULATIVE) {
    return this.updateVertices(t9, new e5(e7, r11, i6), s7);
  }
  removeVertices(t9) {
    return this._apply(new t4(this.data, t9, this._minNumVerticesPerType));
  }
  appendVertex(t9) {
    return 0 === this.data.components.length ? null : this._apply(new i3(this.data, this.data.components[0], t9));
  }
  setVertexPosition(t9, e7) {
    return this._apply(new t5(this.data, t9, e7));
  }
  offsetEdge(t9, e7, r11, s7 = E.ACCUMULATE_STEPS) {
    return this.updateVertices([e7.leftVertex, e7.rightVertex], new P4(this.data.coordinateHelper, t9, e7, r11), s7);
  }
  trySetGeometry(t9, e7 = E.ACCUMULATE_STEPS) {
    const { data: r11 } = this, { coordinateHelper: n9 } = r11;
    if (r11.type !== t9.type || !r11.spatialReference.equals(t9.spatialReference) || n9.hasZ() !== t9.hasZ || n9.hasM() !== t9.hasM || !j(r11.geometry, t9) || f2(r11)) return;
    const p4 = Array.from(p3.fromGeometry(t9, this.viewingMode).iterateVertices(), (t10) => t10.pos);
    return this.setVertexPositions(p4, e7);
  }
  setVertexPositions(t9, e7 = E.ACCUMULATE_STEPS) {
    return this._apply(new i5(this.data, t9), e7);
  }
  createResetState() {
    if (f2(this.data)) return this._createResetStateMesh();
    const t9 = this.data.geometry.clone();
    return e(() => this.trySetGeometry(t9));
  }
  closeComponent(t9) {
    return this.data.components.includes(t9) ? this._apply(new r9(this.data, t9)) : null;
  }
  canRemoveVertex(t9) {
    return t9.vertices.length > this._minNumVerticesPerType;
  }
  createUndoGroup() {
    const t9 = new o6();
    return this._apply(t9), e(() => t9.close());
  }
  undo() {
    if (this._undoStack.length > 0) {
      const t9 = this._undoStack.pop();
      return t9.undo(), this._redoStack.push(t9), t9;
    }
    return null;
  }
  redo() {
    if (this._redoStack.length > 0) {
      const t9 = this._redoStack.pop();
      return t9.apply(), this._undoStack.push(t9), t9;
    }
    return null;
  }
  get canUndo() {
    return this._undoStack.length > 0;
  }
  get canRedo() {
    return this._redoStack.length > 0;
  }
  get lastOperation() {
    return this._undoStack.length > 0 ? this._undoStack[this._undoStack.length - 1] : null;
  }
  get _minNumVerticesPerType() {
    switch (this.data.type) {
      case "point":
        return 1;
      case "polyline":
        return 2;
      case "polygon":
        return 3;
      default:
        return 0;
    }
  }
  _apply(t9, e7 = E.ACCUMULATE_STEPS) {
    return e7 !== E.NEW_STEP && null != this.lastOperation && this.lastOperation.accumulate(t9) || (t9.apply(), this._undoStack.push(t9), this._redoStack = []), t9;
  }
  _createResetStateMesh() {
    if (!f2(this.data)) return e();
    const t9 = this.data.geometry, { vertexSpace: s7 } = t9;
    if (s7.origin) {
      const i6 = t2(s7.origin);
      return e(() => {
        t9.vertexSpace.origin = i6;
      });
    }
    const o7 = t9.vertexAttributes.clonePositional();
    return e(() => {
      t9.vertexAttributes = o7, t9.vertexAttributesChanged();
    });
  }
  static fromGeometry(t9, e7) {
    return new _E(p3.fromGeometry(t9, e7), e7);
  }
};

// node_modules/@arcgis/core/views/interactive/snapping/SnappingContext.js
var e6 = class {
  constructor(e7) {
    this.vertexHandle = null, this.excludeFeature = null, this.visualizer = null, this.selfSnappingZ = null, this.drawConstraints = null, this.editGeometryOperations = e7.editGeometryOperations, this.elevationInfo = e7.elevationInfo, this.pointer = e7.pointer, this.vertexHandle = e7.vertexHandle, this.excludeFeature = e7.excludeFeature, this.feature = e7.feature, this.visualizer = e7.visualizer, this.selfSnappingZ = e7.selfSnappingZ, this.drawConstraints = e7.drawConstraints;
  }
  get coordinateHelper() {
    return this.editGeometryOperations.data.coordinateHelper;
  }
  get spatialReference() {
    return this.coordinateHelper.spatialReference;
  }
};

// node_modules/@arcgis/core/views/interactive/snapping/SnappingVisualizer.js
var r10 = class {
  draw(r11, p4) {
    const h6 = a6(r11), f3 = this.sortUniqueHints(h6), u5 = [];
    for (const i6 of f3) i6 instanceof o5 && u5.push(this.visualizeIntersectionPoint(i6, p4)), i6 instanceof n6 && u5.push(this.visualizeLine(i6, p4)), i6 instanceof r7 && u5.push(this.visualizeParallelSign(i6, p4)), i6 instanceof s4 && u5.push(this.visualizeRightAngleQuad(i6, p4)), i6 instanceof n7 && u5.push(this.visualizePoint(i6, p4));
    return t(u5);
  }
  sortUniqueHints(i6) {
    return i6;
  }
};
function a6(i6) {
  const n9 = [];
  for (const t9 of i6) {
    let i7 = true;
    for (const s7 of n9) if (t9.equals(s7)) {
      i7 = false;
      break;
    }
    i7 && n9.push(t9);
  }
  return n9;
}

// node_modules/@arcgis/core/views/interactive/tooltip/fields/TooltipField.js
var s6 = class extends b {
  constructor(t9) {
    super(t9), this.actual = null, this.lockable = true, this.id = n2(), this.inputValue = null, this.readOnly = false, this.suffix = null, this.visible = true, this.invalid = false, this.unlockOnVertexPlacement = true;
  }
  get committed() {
    return this.lockable ? this._get("committed") : null;
  }
  set committed(t9) {
    this.lockable && this._set("committed", t9);
  }
  get dirty() {
    return null != this.inputValue;
  }
  get locked() {
    return this.lockable && null != this.committed;
  }
  onInput(t9) {
    this.inputValue = t9, this.invalid = false;
  }
  onCommit(t9, o7, i6) {
    this.lockable ? this._onCommitLockable(t9, i6) : this._onCommitNonLockable(i6), this.invalid && "commit-and-exit" === t9 || i6.onCommit(o7, t9);
  }
  _onCommitLockable(t9, o7) {
    const { inputValue: i6, locked: l5 } = this;
    l5 && n8(i6) ? this.unlock() : ("commit-and-exit" === t9 && !l5 || null != i6) && this._parseInputAndLock(o7);
  }
  _onCommitNonLockable(t9) {
    const { inputValue: o7 } = this;
    n8(o7) ? this.lockable ? this.setActual(null) : this.clearInputValue() : null != o7 && this._parseInputAndSetActual(t9);
  }
  applyValue(t9) {
    this.lockable ? this.lock(t9) : this.setActual(t9);
  }
  clearInputValue() {
    this.inputValue = null, this.invalid = false;
  }
  setActual(t9) {
    this.actual = t9, this.clearInputValue();
  }
  lock(t9) {
    this.lockable && (this.committed = t9 ?? this.actual, this.clearInputValue());
  }
  unlock() {
    this.lockable && (this.committed = null, this.clearInputValue());
  }
  toggleLock(t9) {
    this.lockable && (this.locked ? this.unlock() : this._parseInputAndLock(t9));
  }
  getSuffix(t9) {
    const { suffix: o7 } = this;
    return "function" == typeof o7 ? o7(t9) : o7;
  }
  getFormattedValue(t9) {
    const { actual: o7, committed: i6, format: l5 } = this;
    return null != i6 ? l5(i6, t9) : null != o7 ? l5(o7, t9) : null;
  }
  getRawDisplayValue(t9) {
    const { actual: o7, committed: i6, inputValue: l5 } = this;
    return null != l5 ? l5 : this.lockable && null != i6 ? this.formatForInputMode(i6, t9) : null != o7 ? this.formatForInputMode(o7, t9) : null;
  }
  _parseInputAndSetActual(t9) {
    const { inputValue: o7 } = this;
    if (null == o7 || n8(o7)) return this.setActual(null);
    const i6 = this.parse(o7, t9);
    null != i6 ? this.setActual(i6) : this.invalid = true;
  }
  _parseInputAndLock(t9) {
    const { inputValue: o7, actual: i6 } = this;
    if (n8(o7)) return this.unlock();
    if (null == o7) return this.lock(i6);
    const l5 = this.parse(o7, t9);
    null != l5 ? this.lock(l5) : this.invalid = true;
  }
};
function n8(t9) {
  return null != t9 && "" === t9.trim();
}
r([m()], s6.prototype, "actual", void 0), r([m()], s6.prototype, "committed", null), r([m()], s6.prototype, "dirty", null), r([m()], s6.prototype, "format", void 0), r([m()], s6.prototype, "formatForInputMode", void 0), r([m()], s6.prototype, "lockable", void 0), r([m()], s6.prototype, "locked", null), r([m()], s6.prototype, "id", void 0), r([m()], s6.prototype, "inputValue", void 0), r([m()], s6.prototype, "name", void 0), r([m()], s6.prototype, "parse", void 0), r([m()], s6.prototype, "readOnly", void 0), r([m()], s6.prototype, "suffix", void 0), r([m()], s6.prototype, "title", void 0), r([m()], s6.prototype, "visible", void 0), r([m()], s6.prototype, "invalid", void 0), r([m()], s6.prototype, "unlockOnVertexPlacement", void 0), s6 = r([a("esri.views.interactive.tooltip.fields.TooltipField")], s6);

// node_modules/@arcgis/core/views/interactive/tooltip/fields/TooltipFieldElevation.js
var c2 = class extends s6 {
  constructor(t9) {
    super(t9), this.showAsZ = false;
  }
  normalizeCtorArgs(t9) {
    const s7 = (t10) => t10.inputUnitInfos.verticalLength.unit;
    return { name: "elevation", actual: h3, parse: B({ createQuantity: (t10, o7) => a4(t10, s7(o7)) }), format: (t10, o7) => o7.formatters.verticalLength(t10), formatForInputMode: (t10, o7) => o7.formatters.scalar(s3(t10, s7(o7))), suffix: (t10) => t10.inputUnitInfos.verticalLength.abbreviation, title: (t10) => t10.messages.sketch[this.showAsZ ? "z" : "elevation"], unlockOnVertexPlacement: false, ...t9 };
  }
};
r([m()], c2.prototype, "showAsZ", void 0), c2 = r([a("esri.views.interactive.tooltip.fields.TooltipFieldElevation")], c2);

// node_modules/@arcgis/core/views/interactive/tooltip/fields/TooltipFieldOrientation.js
var c3 = class extends s6 {
  constructor(t9) {
    super(t9), this.precision = 1;
  }
  normalizeCtorArgs(t9) {
    const i6 = (t10) => t10.inputUnitInfos.angle.unit;
    return { name: "orientation", actual: null, parse: B({ createQuantity: (t10, r11) => o4(t10, i6(r11), "geographic"), sanitize: C }), format: (t10) => {
      const o7 = A2(t10);
      return U2(o7, "geographic", this.precision);
    }, formatForInputMode: (t10, r11) => {
      const o7 = A2(t10);
      return r11.formatters.scalar(o7);
    }, suffix: (t10) => t10.inputUnitInfos.angle.abbreviation, title: (t10) => t10.messages.sketch.orientation, ...t9 };
  }
};
r([m()], c3.prototype, "precision", void 0), c3 = r([a("esri.views.interactive.tooltip.fields.TooltipFieldOrientation")], c3);

// node_modules/@arcgis/core/views/interactive/tooltip/fields/TooltipFieldSize.js
var a7 = class extends s6 {
  constructor(t9) {
    super(t9), this.precision = null;
  }
  normalizeCtorArgs(t9) {
    const s7 = (t10) => t10.inputUnitInfos.length.unit;
    return { name: "size", actual: null, parse: B({ createQuantity: (t10, o7) => a4(t10, s7(o7)) }), format: (t10, o7) => o7.formatters.length(t10), formatForInputMode: (t10, r11) => r11.formatters.scalar(s3(t10, s7(r11))), suffix: (t10) => t10.inputUnitInfos.length.abbreviation, title: (t10) => t10.messages.sketch.size, ...t9 };
  }
};
r([m()], a7.prototype, "precision", void 0), a7 = r([a("esri.views.interactive.tooltip.fields.TooltipFieldSize")], a7);

// node_modules/@arcgis/core/views/interactive/tooltip/fields/fields.js
function y4(t9) {
  const e7 = (t10) => t10.inputUnitInfos.angle.unit, r11 = (t10) => t10.sketchOptions.values.effectiveDirectionMode;
  return new s6({ name: "direction", actual: U, parse: B({ createQuantity: (t10, a8) => o4(t10, e7(a8), "geographic"), sanitize: C }), format: (t10, e8) => {
    const a8 = r11(e8), n9 = w(t10, a8);
    switch (a8) {
      case j4.Absolute:
        return e8.formatters.direction(n9);
      case j4.Relative:
        return e8.formatters.directionRelative(n9);
      case j4.RelativeBilateral:
        return e8.formatters.directionRelativeBilateral(n9);
    }
  }, formatForInputMode: (t10, n9) => {
    const i6 = w(t10, r11(n9));
    return n9.formatters.scalar(s3(i6, e7(n9)));
  }, suffix: (t10) => t10.inputUnitInfos.angle.abbreviation, title: (t10) => {
    const e8 = r11(t10), { absolute: a8, relative: n9 } = t10.messages.sketch.direction;
    switch (e8) {
      case j4.Absolute:
        return a8;
      case j4.Relative:
      case j4.RelativeBilateral:
        return n9;
    }
  }, ...t9 });
}
function U3(t9) {
  const e7 = (t10) => t10.inputUnitInfos.length.unit;
  return new s6({ name: "distance", actual: h3, parse: B({ createQuantity: (t10, a8) => a4(Math.max(t10, 0), e7(a8)) }), format: (t10, e8) => e8.formatters.length(t10), formatForInputMode: (t10, n9) => n9.formatters.scalar(s3(t10, e7(n9))), suffix: (t10) => t10.inputUnitInfos.length.abbreviation, title: (t10) => t10.messages.sketch.distance, ...t9 });
}
function w4(t9) {
  return U3({ format: (t10, e7) => e7.formatters.totalLength(t10), title: (t10) => t10.messages.sketch.totalLength, readOnly: true, ...t9 });
}
function F(t9) {
  return U3({ ...t9 });
}
function x2(t9) {
  const e7 = (t10) => t10.inputUnitInfos.length.unit;
  return U3({ ...t9, parse: B({ createQuantity: (t10, a8) => a4(t10, e7(a8)) }), format: (t10, e8) => e8.formatters.lengthRelative(t10) });
}
function M3(t9) {
  return new c2(t9);
}
function k3(t9) {
  return new c3(t9);
}
function j6(t9) {
  return new a7(t9);
}
function R2(e7) {
  return B2("scale", { name: "scale", actual: null, parse: B({ createQuantity: (e8) => i2(Math.abs(e8)) }), ...e7 });
}
function Q(t9) {
  const n9 = (t10) => t10.inputUnitInfos.area.unit;
  return new s6({ name: "area", actual: d2, parse: B({ createQuantity: (t10, e7) => l3(t10, n9(e7)) }), format: (t10, e7) => e7.formatters.area(t10), formatForInputMode: (t10, e7) => e7.formatters.scalar(s3(t10, n9(e7))), suffix: (t10) => t10.inputUnitInfos.area.abbreviation, title: (t10) => t10.messages.sketch.area, readOnly: true, ...t9 });
}
function D(t9) {
  return new s6({ name: "x", actual: U, parse: H2, format: (t10, e7) => e7.formatters.longitudeDecimalDegrees(t10), formatForInputMode: (t10) => w2(t10), suffix: (t10) => t10.inputUnitInfos.angle.abbreviation, title: (t10) => t10.messages.sketch.longitude, ...t9 });
}
function O2(t9) {
  return new s6({ name: "y", actual: U, parse: J2, format: (t10, e7) => e7.formatters.latitudeDecimalDegrees(t10), formatForInputMode: (t10) => A3(t10), suffix: (t10) => t10.inputUnitInfos.angle.abbreviation, title: (t10) => t10.messages.sketch.latitude, ...t9 });
}
function T2(t9) {
  return B2("x", { name: "x", ...t9 });
}
function A5(t9) {
  return B2("y", { name: "y", ...t9 });
}
function B2(e7, a8) {
  return new s6({ actual: i2(0), parse: B({ createQuantity: (e8) => i2(e8) }), format: (t9, e8) => e8.formatters.scalar(t9), formatForInputMode: (t9, e8) => e8.formatters.scalar(t9), title: (t9) => t9.messages.sketch[e7], ...a8 });
}

// node_modules/@arcgis/core/views/interactive/tooltip/infos/TooltipInfoWithCoordinates.js
var h5 = (h6) => {
  let f3 = class extends h6 {
    constructor() {
      super(...arguments), this.longitude = D(), this.latitude = O2(), this.x = T2(), this.y = A5(), this.elevation = M3(), this.geographic = false;
    }
    get effectiveX() {
      return this.geographic ? this.longitude : this.x;
    }
    get effectiveY() {
      return this.geographic ? this.latitude : this.y;
    }
    get key() {
      return { longitude: this.longitude.actual, latitude: this.latitude.actual, x: this.x.actual, y: this.y.actual, elevation: this.elevation.actual, geographic: this.geographic };
    }
    setLocationFromPoint(t9, i6 = t9?.spatialReference) {
      if (this.geographic = !!i6 && r8(i6), null == t9) return this._setActualLonLat(null, null), void this._setActualXY(null, null);
      if (this.geographic) {
        const e7 = i(t9, g3);
        this._setActualLonLat(K2(e7?.[0]), K2(e7?.[1]));
      } else this._setActualXY(i2(t9.x), i2(t9.y));
    }
    _setActualLonLat(t9, e7) {
      this.longitude.actual = t9, this.latitude.actual = e7;
    }
    _setActualXY(t9, e7) {
      this.x.actual = t9, this.y.actual = e7;
    }
  };
  return r([m()], f3.prototype, "geographic", void 0), r([m()], f3.prototype, "effectiveX", null), r([m()], f3.prototype, "effectiveY", null), r([m()], f3.prototype, "key", null), f3 = r([a("esri.views.interactive.tooltip.infos.TooltipInfoWithCoordinates")], f3), f3;
};
var g3 = [0, 0];

export {
  r10 as r,
  y4 as y,
  w4 as w,
  F,
  x2 as x,
  k3 as k,
  j6 as j,
  R2 as R,
  Q,
  h5 as h,
  P3 as P,
  a5 as a,
  p3 as p,
  E,
  t3 as t,
  e4 as e,
  t7 as t2,
  P4 as P2,
  z3 as z,
  e5 as e2,
  c,
  E2,
  e6 as e3
};
//# sourceMappingURL=chunk-3AJC75KZ.js.map
