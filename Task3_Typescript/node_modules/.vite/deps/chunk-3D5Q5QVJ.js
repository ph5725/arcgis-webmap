import {
  E,
  J,
  Q
} from "./chunk-IVCVGY7Y.js";
import {
  n
} from "./chunk-VOLWOTEG.js";
import {
  H
} from "./chunk-ZWFY3WY5.js";

// node_modules/@arcgis/core/layers/graphics/data/FeatureIdInfo.js
function* e(e2) {
  switch (e2.type) {
    case "object-id":
    case "unique-id-simple":
      return void (yield e2.fieldName);
    case "unique-id-composite":
      return void (yield* e2.fieldNames);
  }
}

// node_modules/@arcgis/core/libs/parquet/loadParquetModule.js
var n2 = null;
async function s() {
  return n2 || (n2 = a()), n2;
}
async function a() {
  const n3 = await import("./bundle-AOBSHDXG.js");
  return await n3.default({ module_or_path: n("esri/libs/parquet/pkg/bundle_bg.wasm") }), n3;
}

// node_modules/@arcgis/core/libs/parquet/parquet.js
var i = (t) => async function(a2, n3, r) {
  const i2 = t(), { data: s3 } = await H(a2, { responseType: "array-buffer", query: i2, headers: { range: `bytes=${n3}-${r}` }, useRequestQueue: true });
  return s3;
};
var s2 = (t) => async function(a2) {
  const n3 = t(), { data: r } = await H(a2, { responseType: "native", method: "head", query: n3, useRequestQueue: true }), i2 = r.headers.get("Content-Length");
  if (null == i2) throw new Error("Unable to parse content length");
  return parseInt(i2, 10);
};
var o = class _o {
  static async create(e2, a2) {
    const n3 = await s(), r = await n3.readMetadata(e2, i(a2), s2(a2));
    return _o.fromFileMetadata(r);
  }
  static fromFileMetadata(e2) {
    const t = [];
    for (let a2 = 0; a2 < e2.numFields(); a2++) {
      const n3 = e2.getFieldByIndex(a2);
      t.push({ name: n3.name, type: n3.type, alias: n3.name, index: n3.index }), n3.free();
    }
    return new _o(e2, t);
  }
  constructor(e2, t) {
    this._inner = e2, this.fields = t;
  }
  destroy() {
    this._inner.free();
  }
  [Symbol.dispose]() {
    this.destroy();
  }
  get size() {
    return this._inner.numRows();
  }
  getFieldIndex(e2) {
    return this._inner.getFieldIndex(e2);
  }
  tryReadGeoMetadata() {
    const e2 = this._inner.keyValueMetadata("geo");
    return null == e2 ? null : JSON.parse(e2);
  }
  tryReadEsriMetadata() {
    const e2 = this._inner.keyValueMetadata("esri");
    return null == e2 ? null : JSON.parse(e2);
  }
};
function d(e2) {
  switch (e2) {
    case "esriGeometryPoint":
      return E.Point;
    case "esriGeometryPolygon":
      return E.Polygon;
    case "esriGeometryPolyline":
      return E.Polyline;
    case "esriGeometryMultipoint":
      return E.Multipoint;
    default:
      throw new Error(`InternalError: Found unexpected GeometryType: ${e2}`);
  }
}
function l(e2, t, r) {
  const i2 = J.new();
  if (i2.geometryType = d(e2.geometryType), "location" === e2.encoding.type) i2.latIndex = t.getFieldIndex(e2.encoding.latitudeFieldName), i2.lngIndex = t.getFieldIndex(e2.encoding.longitudeFieldName);
  else if (i2.wkbIndex = t.getFieldIndex(e2.encoding.primaryFieldName), e2.encoding.multiscale) {
    const a2 = Q.new();
    for (const n3 of e2.encoding.multiscale.levels) {
      const [e3, r2] = n3.transform.translate, [i3, s3] = n3.transform.scale, o2 = t.getFieldIndex(n3.column);
      a2.push(o2, e3, r2, i3, s3);
    }
    i2.setMultiscaleInfo(a2);
  }
  return i2.inWkid = e2.spatialReference.wkid, r && (i2.outWkid = r.wkid), i2;
}
var u = class _u {
  static async create(e2, a2) {
    const n3 = await s(), r = i(a2.getCustomParameters), d2 = s2(a2.getCustomParameters), c = await n3.readMetadata(e2, r, d2), m = l(a2.geometryInfo, c, a2.outSpatialReference), y = await n3.readFile(e2, r, d2, c, m);
    return new _u(y, o.fromFileMetadata(y.metadata()));
  }
  static async fromFile(e2, a2, n3) {
    const r = await s(), i2 = await r.readMetadataFromFile(e2), s3 = a2 ? l(a2, i2, n3) : void 0, d2 = await r.readFileFromBinary(s3, e2);
    return new _u(d2, o.fromFileMetadata(d2.metadata()));
  }
  constructor(e2, t) {
    this.inner = e2, this.metadata = t;
  }
  destroy() {
    this.inner.free(), this.metadata.destroy();
  }
  [Symbol.dispose]() {
    this.destroy();
  }
};

export {
  e,
  u
};
//# sourceMappingURL=chunk-3D5Q5QVJ.js.map
