import {
  Fe
} from "./chunk-G72VEDU6.js";
import {
  s
} from "./chunk-NO2XQDLB.js";
import {
  s as s2
} from "./chunk-NEBU5XJO.js";
import {
  r as r2
} from "./chunk-RV3SBM2C.js";
import {
  g as g2
} from "./chunk-B6C7UPBZ.js";
import {
  R
} from "./chunk-7ZMGKXLG.js";
import {
  d as d2
} from "./chunk-2IMSGFJN.js";
import {
  l as l2
} from "./chunk-BDLVUYG2.js";
import {
  n
} from "./chunk-HWKQJUGY.js";
import {
  g,
  p
} from "./chunk-YBJ5GVXQ.js";
import {
  V
} from "./chunk-X3R5OB6L.js";
import {
  a as a2
} from "./chunk-TVM3SZJR.js";
import {
  h,
  l
} from "./chunk-A3VAC24F.js";
import {
  b,
  m
} from "./chunk-N3XLUQJI.js";
import {
  a2 as a
} from "./chunk-JUAD7TJ6.js";
import {
  r
} from "./chunk-5TPMG26T.js";
import {
  u
} from "./chunk-S7IJH524.js";
import {
  d,
  k
} from "./chunk-GZ2P4SCJ.js";

// node_modules/@arcgis/core/widgets/Feature/FeatureUtilityNetworkAssociations/VisibleElements.js
var s3 = class extends b {
  constructor(o2) {
    super(o2), this.title = true, this.description = true;
  }
};
r([m({ type: Boolean, nonNullable: true })], s3.prototype, "title", void 0), r([m({ type: Boolean, nonNullable: true })], s3.prototype, "description", void 0), s3 = r([a("esri.widgets.Feature.FeatureUtilityNetworkAssociations.VisibleElements")], s3);

// node_modules/@arcgis/core/widgets/Feature/FeatureUtilityNetworkAssociations/resources.js
var o = { fromGlobalId: "fromglobalid", fromNetworkSourceId: "fromnetworksourceid", fromTerminalId: "fromterminalid", toGlobalId: "toglobalid", toNetworkSourceId: "tonetworksourceid", toTerminalId: "toterminalid", associationType: "associationtype", globalId: "globalid", status: "status", isContentVisible: "iscontentvisible", percentAlong: "percentalong", assetGroup: "assetgroup", assetType: "assettype" };

// node_modules/@arcgis/core/widgets/support/UtilityNetworkAssociations/utils/getFeatureTitle.js
function t(t2) {
  const { attributes: l3, sourceLayer: n2 } = t2;
  if (!l3 || !n2) return "";
  const e = "displayField" in n2 ? n2.displayField : null, i = null != e ? l3[e] : null, r3 = null != i ? i.toString() : null, u2 = t2.getObjectId()?.toString();
  return r3 || u2 || "";
}

// node_modules/@arcgis/core/widgets/support/UtilityNetworkAssociations/FeatureUtilityNetworkAssociationsViewModel.js
var I = 100;
var v = class extends a2.ClonableMixin(n.IdentifiableMixin(b)) {
  constructor(t2) {
    super(t2), this._loaded = false, this._queryAbortController = null, this._queryPageAbortController = null, this._queryFeatureCountAbortController = null, this.networkSourceIdsInUse = /* @__PURE__ */ new Set(), this.source = "popup", this.description = null, this.graphic = null, this.layer = null, this.map = null, this.featureCount = 0, this.associationTypes = null, this.showAllEnabled = false, this.title = null, this.attachmentsFeatureCount = 0, this.structureFeatureCount = 0, this.contentFeatureCount = 0, this.containerFeatureCount = 0, this.connectivityFeatureCount = 0, this._queryOpenAssociationType = async () => {
      this.activeAssociationType && await this._queryDebounced(this.activeAssociationType);
    }, this._cancelQuery = () => {
      const { _queryAbortController: t3 } = this;
      t3 && t3.abort(), this._queryAbortController = null;
    }, this._cancelQueryFeatureCount = () => {
      const { _queryFeatureCountAbortController: t3 } = this;
      t3 && t3.abort(), this._queryFeatureCountAbortController = null;
    }, this._queryController = async (t3) => {
      this._cancelQuery();
      const e = new AbortController();
      this._queryAbortController = e, await d(this._query(t3)), this._queryAbortController === e && (this._queryAbortController = null);
    }, this._queryFeatureCountController = async () => {
      this._loaded = false, this._cancelQueryFeatureCount();
      const t3 = new AbortController();
      this._queryFeatureCountAbortController = t3, await d(this._queryFeatureCount()), this._queryFeatureCountAbortController === t3 && (this._queryFeatureCountAbortController = null), this._loaded = true;
    }, this._queryDebounced = k(this._queryController, I), this._queryFeatureCountDebounced = k(this._queryFeatureCountController, I);
  }
  initialize() {
    this.addHandles([l(() => [this.graphic, this.layer, this.map, this.associationTypes, this.objectId, this.globalId, this.canQuery], () => this.refresh(), h), l(() => this.activeAssociationType, (t2) => this._queryDebounced(t2), h)]);
  }
  destroy() {
    this._cancelQuery(), this._cancelQueryFeatureCount(), this._destroyAssociatedFeatureViewModels();
  }
  get supportsCacheHint() {
    return !!this.layer?.capabilities?.query?.supportsCacheHint;
  }
  get canLoad() {
    return !!this.map && !!this.associationTypes && "string" == typeof this.globalId;
  }
  get canQuery() {
    const t2 = this.layer?.capabilities?.query;
    return !!this.associationTypes && "string" == typeof this.globalId && !!t2?.supportsPagination;
  }
  set displayCount(t2) {
    const e = 0, o2 = 3;
    this._set("displayCount", Math.max(t2 ?? o2, e));
  }
  get displayCount() {
    return this._get("displayCount");
  }
  get objectId() {
    return (this.objectIdField && this.graphic?.attributes?.[this.objectIdField]) ?? null;
  }
  get objectIdField() {
    return this.layer?.objectIdField || null;
  }
  get globalId() {
    return (this.globalIdField && this.graphic?.attributes?.[this.globalIdField]) ?? null;
  }
  get globalIdField() {
    const { layer: t2 } = this;
    return t2?.globalIdField;
  }
  get activeAssociationType() {
    return this._get("activeAssociationType");
  }
  set activeAssociationType(t2) {
    t2 && !this.associationTypes.includes(t2) || this._set("activeAssociationType", t2);
  }
  get state() {
    const { _queryAbortController: t2, _queryFeatureCountAbortController: e, _queryPageAbortController: o2, canQuery: r3, _loaded: s4, canLoad: i, source: a3 } = this;
    return e || i && !s4 ? "loading" : t2 || o2 ? "querying" : !r3 || "popup" === a3 && 0 === this.featureCount ? "disabled" : "ready";
  }
  get utilityNetwork() {
    const { layer: t2, map: e } = this;
    if (!t2?.loaded || !e) return null;
    const o2 = g(t2) ? t2.parent : t2;
    return Fe(e, o2);
  }
  get attachmentsAssociations() {
    return this._get("attachmentsAssociations") || new V();
  }
  get structureAssociations() {
    return this._get("structureAssociations") || new V();
  }
  get contentAssociations() {
    return this._get("contentAssociations") || new V();
  }
  get containerAssociations() {
    return this._get("containerAssociations") || new V();
  }
  get connectivityAssociations() {
    return this._get("connectivityAssociations") || new V();
  }
  get associationFeatures() {
    return this._get("associationFeatures") || new s();
  }
  get associationViewModels() {
    return this._get("associationViewModels") || /* @__PURE__ */ new Map();
  }
  async refresh() {
    await this._queryFeatureCountDebounced(), await this._queryOpenAssociationType();
  }
  getFeatureCountForAssociationType(t2) {
    switch (t2) {
      case "attachment":
        return this.attachmentsFeatureCount;
      case "structure":
        return this.structureFeatureCount;
      case "content":
        return this.contentFeatureCount;
      case "container":
        return this.containerFeatureCount;
      case "connectivity":
        return this.connectivityFeatureCount;
    }
  }
  _destroyAssociatedFeatureViewModels() {
    this.associationViewModels.forEach((t2) => t2.destroyAll());
  }
  async _loadUtiltyNetworks() {
    const t2 = this.map;
    if (!t2) return;
    await Promise.allSettled(t2.utilityNetworks?.map(async (t3) => {
      await t3.load();
    }) ?? []);
    const e = this.utilityNetwork;
    if (e) {
      const o2 = (t3) => {
        if ("layerId" in t3 && e.isUtilityLayer(t3)) {
          const o3 = e.getSourceIdByLayerId(t3.layerId);
          null !== o3 && this.networkSourceIdsInUse.add(o3);
        }
      };
      this._set("networkSourceIdsInUse", /* @__PURE__ */ new Set()), t2.allLayers.forEach(o2), t2.allTables.forEach(o2);
    }
  }
  async _findLayersBySourceId(t2) {
    const { utilityNetwork: e, map: o2 } = this, r3 = (t3) => {
      const o3 = t3;
      if (!t3.url) return false;
      if (o3.layerId === s4) {
        return t3.url.replace(/\/\d+$/, "") === e?.featureServiceUrl;
      }
      return false;
    };
    await e?.load();
    const s4 = e.getLayerIdBySourceId(t2), i = o2.allLayers.filter(r3), a3 = o2.allTables.filter(r3), n2 = i.concat(a3).toArray();
    return await Promise.allSettled(n2.map((t3) => t3.load())), n2;
  }
  _clearAssociations() {
    this.attachmentsAssociations.removeAll(), this.structureAssociations.removeAll(), this.contentAssociations.removeAll(), this.containerAssociations.removeAll(), this.connectivityAssociations.removeAll();
  }
  _clearFeatures() {
    this.associationFeatures.forEach((t2) => t2.removeAll()), this.associationFeatures.clear();
  }
  _getAssociationsByType(t2) {
    switch (t2) {
      case "attachment":
        return this.attachmentsAssociations;
      case "structure":
        return this.structureAssociations;
      case "connectivity":
        return this.connectivityAssociations;
      case "container":
        return this.containerAssociations;
      case "content":
        return this.contentAssociations;
    }
  }
  async _queryLayer(t2, e, o2, r3, s4) {
    const i = this._getFeatureQueryWhereClause(t2, e, o2, r3), a3 = new R({ where: i, outFields: ["*"], cacheHint: this.supportsCacheHint }), n2 = g2.fromJSON(await r2(t2, a3, s4));
    return n2.features.forEach((e2) => {
      e2.layer = e2.sourceLayer = p(t2) ? t2.findSublayerForFeature(e2) : t2;
    }), n2.features;
  }
  async _createAssociationFeatureObjects(t2, e, o2, r3, s4, i) {
    if (0 === t2.length) return [];
    const a3 = /* @__PURE__ */ new Map();
    for (const [c, l3] of e) {
      const t3 = await this._findLayersBySourceId(c);
      for (const e2 of t3) {
        (await this._queryLayer(e2, l3, r3, s4, i)).forEach((t4) => {
          if ("popup" === this.source ? t4.sourceLayer && t4.getEffectivePopupTemplate() : !!t4.sourceLayer) {
            const o3 = a3.get(t4.attributes[e2.globalIdField]) ?? [];
            o3.push(t4), a3.set(t4.attributes[e2.globalIdField], o3);
          }
        });
      }
    }
    const n2 = [];
    return await Promise.all(t2.toArray().map(async (t3) => {
      const { fromNetworkElement: e2, toNetworkElement: r4 } = t3, s5 = e2.globalId === o2 ? r4 : e2, i2 = a3.get(s5.globalId) ?? [];
      await Promise.all(i2.map(async (e3) => {
        const o3 = this.utilityNetwork?.getTerminalById(s5?.terminalId)?.name, r5 = e3.sourceLayer && "getFeatureTitle" in e3.sourceLayer ? await e3.sourceLayer.getFeatureTitle(e3) : t(e3);
        n2.push({ title: r5, feature: e3, association: t3, terminalName: o3 });
      }));
    })), n2;
  }
  _parseFeatureObjects(t2, e) {
    const o2 = /* @__PURE__ */ new Map();
    t2.forEach((t3) => {
      const e2 = t3?.feature, r3 = e2.sourceLayer;
      u(o2, r3, () => new V()).add(t3);
    });
    for (const [r3, s4] of o2) this._sortFeatureObjectsByTitle(s4), e.set(r3, s4);
  }
  _sortFeatureObjectsByTitle(t2) {
    t2.sort(this._compareByFeatureTitle);
  }
  _compareByFeatureTitle(t2, e) {
    return t2.title.localeCompare(e.title, void 0, { numeric: true });
  }
  async _queryAssociations(t2) {
    const { layer: e, globalId: o2, associationTypes: r3, utilityNetwork: s4, canQuery: i } = this;
    if (await Promise.allSettled([e?.load(), s4?.load()]), this._clearAssociations(), !(i && e && r3 && s4 && o2)) return;
    const a3 = g(e) ? e.parent : e, n2 = new s2({ globalId: o2, networkSourceId: s4.getSourceIdByLayerId(a3.layerId) }), c = /* @__PURE__ */ new Set();
    r3.forEach((t3) => {
      switch (t3.type) {
        case "attachment":
        case "structure":
          c.add("attachment");
          break;
        case "container":
        case "content":
          c.add("containment");
          break;
        case "connectivity":
          c.add("connectivity"), c.add("junction-junction-connectivity"), c.add("junction-edge-from-connectivity"), c.add("junction-edge-midspan-connectivity"), c.add("junction-edge-to-connectivity");
      }
    });
    const l3 = await s4?.queryAssociations({ elements: [n2], types: Array.from(c) }, { signal: t2?.signal }), u2 = /* @__PURE__ */ new Map(), y = /* @__PURE__ */ new Map();
    r3.forEach((t3) => {
      y.set(t3.type, t3), u2.set(t3.type, []);
    }), l3.forEach((t3) => {
      const { toNetworkElement: e2, fromNetworkElement: r4 } = t3;
      switch (t3.associationType) {
        case "connectivity":
        case "junction-junction-connectivity":
        case "junction-edge-from-connectivity":
        case "junction-edge-midspan-connectivity":
        case "junction-edge-to-connectivity":
          if (r4?.globalId === o2) {
            if (this._shouldDiscardNetworkElement(e2, "connectivity", y)) break;
            u2.get("connectivity")?.push(e2.globalId);
          } else {
            if (this._shouldDiscardNetworkElement(r4, "connectivity", y)) break;
            u2.get("connectivity")?.push(r4.globalId);
          }
          this.connectivityAssociations.add(t3);
          break;
        case "containment":
          if (r4?.globalId === o2) {
            if (this._shouldDiscardNetworkElement(e2, "content", y)) break;
            u2.get("content")?.push(e2.globalId), this.contentAssociations.add(t3);
          } else {
            if (this._shouldDiscardNetworkElement(r4, "container", y)) break;
            u2.get("container")?.push(r4.globalId), this.containerAssociations.add(t3);
          }
          break;
        case "attachment":
          if (r4?.globalId === o2) {
            if (this._shouldDiscardNetworkElement(e2, "attachment", y)) break;
            u2.get("attachment")?.push(e2.globalId), this.attachmentsAssociations.add(t3);
          } else {
            if (this._shouldDiscardNetworkElement(r4, "structure", y)) break;
            u2.get("structure")?.push(r4.globalId), this.structureAssociations.add(t3);
          }
      }
    });
    const d3 = r3.map(async (e2) => {
      const { associatedNetworkSourceId: o3, associatedAssetGroup: r4, associatedAssetType: s5 } = e2, i2 = u2.get(e2.type), a4 = null != r4 ? await this._countAssociatedFeatures(o3, i2, r4, s5, t2) : i2.length;
      switch (e2.type) {
        case "attachment":
          this._set("attachmentsFeatureCount", a4);
          break;
        case "structure":
          this._set("structureFeatureCount", a4);
          break;
        case "content":
          this._set("contentFeatureCount", a4);
          break;
        case "container":
          this._set("containerFeatureCount", a4);
          break;
        case "connectivity":
          this._set("connectivityFeatureCount", a4);
      }
    });
    await Promise.allSettled(d3);
  }
  async _countAssociatedFeatureCount(t2, e, o2, r3, s4) {
    const i = this._getFeatureQueryWhereClause(t2, e, o2, r3);
    return t2.queryFeatureCount({ where: i, outFields: ["*"], returnGeometry: false }, { signal: s4?.signal });
  }
  async _countAssociatedFeatures(t2, e, o2, r3, s4) {
    if (0 === e.length) return 0;
    const i = (await this._findLayersBySourceId(t2)).map(async (t3) => this._countAssociatedFeatureCount(t3, e, o2, r3, s4));
    return (await Promise.all(i)).reduce((t3, e2) => t3 + e2, 0);
  }
  async _queryAssociatedFeatures(t2, e) {
    const { layer: o2, globalId: r3, associationTypes: s4, utilityNetwork: i, canQuery: a3, associationFeatures: n2 } = this;
    if (await Promise.allSettled([o2?.load(), i?.load()]), !(a3 && o2 && s4 && i)) return;
    const c = this._getAssociationsByType(t2.type), { associatedAssetGroup: l3, associatedAssetType: u2 } = t2, y = /* @__PURE__ */ new Map();
    c.forEach((t3) => {
      const { fromNetworkElement: e2, toNetworkElement: o3 } = t3, { networkSourceId: s5, elementGlobalId: i2 } = e2.globalId === r3 ? { networkSourceId: o3.networkSourceId, elementGlobalId: o3.globalId } : { networkSourceId: e2.networkSourceId, elementGlobalId: e2.globalId }, a4 = y.get(s5) || [];
      a4.push(i2), y.set(s5, a4);
    });
    const d3 = await this._createAssociationFeatureObjects(c, y, r3, l3, u2, e);
    this._parseFeatureObjects(d3, n2);
  }
  async _queryFeatureCount() {
    await this._loadUtiltyNetworks();
    const { _queryFeatureCountAbortController: t2, canQuery: e } = this;
    e ? (await this._queryAssociations(t2), this._set("featureCount", this.attachmentsFeatureCount + this.structureFeatureCount + this.contentFeatureCount + this.containerFeatureCount + this.connectivityFeatureCount)) : this._set("featureCount", 0);
  }
  async _query(t2) {
    if (!t2) return;
    await this._loadUtiltyNetworks();
    const { _queryAbortController: e } = this;
    this._destroyAssociatedFeatureViewModels(), this._clearFeatures(), 0 !== this.featureCount && (this.destroyed || await this._queryAssociatedFeatures(t2, { signal: e?.signal }));
  }
  _shouldDiscardNetworkElement(t2, e, o2) {
    if (!t2) return false;
    const { networkSourceIdsInUse: r3 } = this, { networkSourceId: s4 } = t2, i = o2.get(e)?.associatedNetworkSourceId, a3 = r3.has(s4);
    return null != i && i !== s4 || !a3;
  }
  _getFeatureQueryWhereClause(t2, e, o2, r3) {
    const s4 = t2.globalIdField, i = t2.fieldsIndex.get(o.assetGroup), a3 = t2.fieldsIndex.get(o.assetType), n2 = null != o2, c = null != r3;
    return [s4 ? l2(s4, e) : null, n2 ? `(${i?.name} = ${o2})` : null, n2 && c ? `(${a3?.name} = ${r3})` : null].filter(Boolean).join(" AND ");
  }
};
r([m()], v.prototype, "_loaded", void 0), r([m()], v.prototype, "_queryAbortController", void 0), r([m()], v.prototype, "_queryPageAbortController", void 0), r([m()], v.prototype, "_queryFeatureCountAbortController", void 0), r([m({ readOnly: true })], v.prototype, "supportsCacheHint", null), r([m({ readOnly: true })], v.prototype, "canLoad", null), r([m({ readOnly: true })], v.prototype, "canQuery", null), r([m()], v.prototype, "networkSourceIdsInUse", void 0), r([m({ constructOnly: true })], v.prototype, "source", void 0), r([m()], v.prototype, "description", void 0), r([m({ value: 3 })], v.prototype, "displayCount", null), r([m({ type: d2 })], v.prototype, "graphic", void 0), r([m()], v.prototype, "layer", void 0), r([m()], v.prototype, "map", void 0), r([m({ readOnly: true })], v.prototype, "objectId", null), r([m({ readOnly: true })], v.prototype, "objectIdField", null), r([m({ readOnly: true })], v.prototype, "globalId", null), r([m({ readOnly: true })], v.prototype, "globalIdField", null), r([m()], v.prototype, "featureCount", void 0), r([m()], v.prototype, "associationTypes", void 0), r([m()], v.prototype, "activeAssociationType", null), r([m()], v.prototype, "showAllEnabled", void 0), r([m()], v.prototype, "state", null), r([m()], v.prototype, "title", void 0), r([m({ readOnly: true })], v.prototype, "utilityNetwork", null), r([m({ readOnly: true })], v.prototype, "attachmentsFeatureCount", void 0), r([m({ readOnly: true })], v.prototype, "structureFeatureCount", void 0), r([m({ readOnly: true })], v.prototype, "attachmentsAssociations", null), r([m({ readOnly: true })], v.prototype, "structureAssociations", null), r([m({ readOnly: true })], v.prototype, "contentFeatureCount", void 0), r([m({ readOnly: true })], v.prototype, "containerFeatureCount", void 0), r([m({ readOnly: true })], v.prototype, "contentAssociations", null), r([m({ readOnly: true })], v.prototype, "containerAssociations", null), r([m({ readOnly: true })], v.prototype, "connectivityFeatureCount", void 0), r([m({ readOnly: true })], v.prototype, "connectivityAssociations", null), r([m({ readOnly: true })], v.prototype, "associationFeatures", null), r([m({ readOnly: true })], v.prototype, "associationViewModels", null), v = r([a("esri.widgets.support.UtilityNetworkAssociations.FeatureUtilityNetworkAssociationsViewModel")], v);

export {
  s3 as s,
  v
};
//# sourceMappingURL=chunk-3U5EJ7ZC.js.map
