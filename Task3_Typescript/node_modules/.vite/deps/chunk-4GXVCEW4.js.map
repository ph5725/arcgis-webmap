{
  "version": 3,
  "sources": ["../../@arcgis/core/rest/support/NormalizationBinParametersMixin.js"],
  "sourcesContent": ["/*\r\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\r\nSee https://js.arcgis.com/4.33/esri/copyright.txt for details.\r\n*/\r\nimport{_ as o}from\"../../chunks/tslib.es6.js\";import{strict as t}from\"../../core/jsonMap.js\";import r from\"../../core/Logger.js\";import{property as a}from\"../../core/accessorSupport/decorators/property.js\";import\"../../core/has.js\";import\"../../core/RandomLCG.js\";import{enumeration as e}from\"../../core/accessorSupport/decorators/enumeration.js\";import{subclass as i}from\"../../core/accessorSupport/decorators/subclass.js\";const n=t()({naturalLog:\"natural-log\",squareRoot:\"square-root\",percentOfTotal:\"percent-of-total\",log:\"log\",field:\"field\"}),l=\"percent-of-total\",s=\"field\",m=t=>{let m=class extends t{constructor(){super(...arguments),this.normalizationField=null,this.normalizationMaxValue=null,this.normalizationMinValue=null,this.normalizationTotal=null}get normalizationType(){let o=this._get(\"normalizationType\");const t=!!this.normalizationField,a=null!=this.normalizationTotal;return t||a?(o=t&&s||a&&l||null,t&&a&&r.getLogger(this).warn(\"warning: both normalizationField and normalizationTotal are set!\")):o!==s&&o!==l||(o=null),o}set normalizationType(o){this._set(\"normalizationType\",o)}};return o([a({type:String,json:{name:\"parameters.normalizationField\",write:!0}})],m.prototype,\"normalizationField\",void 0),o([a({type:Number,json:{name:\"parameters.normalizationMaxValue\",write:!0}})],m.prototype,\"normalizationMaxValue\",void 0),o([a({type:Number,json:{name:\"parameters.normalizationMinValue\",write:!0}})],m.prototype,\"normalizationMinValue\",void 0),o([a({type:Number,json:{name:\"parameters.normalizationTotal\",write:!0}})],m.prototype,\"normalizationTotal\",void 0),o([e(n,{name:\"parameters.normalizationType\"})],m.prototype,\"normalizationType\",null),m=o([i(\"esri.rest.support.NormalizationBinParametersMixin\")],m),m};export{m as NormalizationBinParametersMixin,n as normalizationTypeJsonMap};\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;AAIwa,IAAM,IAAEA,GAAE,EAAE,EAAC,YAAW,eAAc,YAAW,eAAc,gBAAe,oBAAmB,KAAI,OAAM,OAAM,QAAO,CAAC;AAAzH,IAA2H,IAAE;AAA7H,IAAgJ,IAAE;AAAlJ,IAA0JC,KAAE,OAAG;AAAC,MAAIA,KAAE,cAAc,EAAC;AAAA,IAAC,cAAa;AAAC,YAAM,GAAG,SAAS,GAAE,KAAK,qBAAmB,MAAK,KAAK,wBAAsB,MAAK,KAAK,wBAAsB,MAAK,KAAK,qBAAmB;AAAA,IAAI;AAAA,IAAC,IAAI,oBAAmB;AAAC,UAAI,IAAE,KAAK,KAAK,mBAAmB;AAAE,YAAMC,KAAE,CAAC,CAAC,KAAK,oBAAmBC,KAAE,QAAM,KAAK;AAAmB,aAAOD,MAAGC,MAAG,IAAED,MAAG,KAAGC,MAAG,KAAG,MAAKD,MAAGC,MAAG,EAAE,UAAU,IAAI,EAAE,KAAK,kEAAkE,KAAG,MAAI,KAAG,MAAI,MAAI,IAAE,OAAM;AAAA,IAAC;AAAA,IAAC,IAAI,kBAAkB,GAAE;AAAC,WAAK,KAAK,qBAAoB,CAAC;AAAA,IAAC;AAAA,EAAC;AAAE,SAAO,EAAE,CAAC,EAAE,EAAC,MAAK,QAAO,MAAK,EAAC,MAAK,iCAAgC,OAAM,KAAE,EAAC,CAAC,CAAC,GAAEF,GAAE,WAAU,sBAAqB,MAAM,GAAE,EAAE,CAAC,EAAE,EAAC,MAAK,QAAO,MAAK,EAAC,MAAK,oCAAmC,OAAM,KAAE,EAAC,CAAC,CAAC,GAAEA,GAAE,WAAU,yBAAwB,MAAM,GAAE,EAAE,CAAC,EAAE,EAAC,MAAK,QAAO,MAAK,EAAC,MAAK,oCAAmC,OAAM,KAAE,EAAC,CAAC,CAAC,GAAEA,GAAE,WAAU,yBAAwB,MAAM,GAAE,EAAE,CAAC,EAAE,EAAC,MAAK,QAAO,MAAK,EAAC,MAAK,iCAAgC,OAAM,KAAE,EAAC,CAAC,CAAC,GAAEA,GAAE,WAAU,sBAAqB,MAAM,GAAE,EAAE,CAACG,GAAE,GAAE,EAAC,MAAK,+BAA8B,CAAC,CAAC,GAAEH,GAAE,WAAU,qBAAoB,IAAI,GAAEA,KAAE,EAAE,CAAC,EAAE,mDAAmD,CAAC,GAAEA,EAAC,GAAEA;AAAC;",
  "names": ["i", "m", "t", "a", "r"]
}
