import {
  C,
  L as L3,
  P,
  R as R2,
  S as S2,
  a2 as a6,
  d as d4,
  g,
  h,
  m2 as m6,
  o3 as o2,
  p,
  s2 as s5,
  z,
  z2
} from "./chunk-G3V62EXP.js";
import {
  I as I2
} from "./chunk-GEY3MNEN.js";
import {
  l as l3,
  n as n4,
  n2 as n5,
  s as s4,
  v as v3,
  x as x3
} from "./chunk-TUPNUSND.js";
import {
  d as d3
} from "./chunk-VZRBHAHT.js";
import {
  F,
  e as e5,
  i,
  n as n3,
  t
} from "./chunk-ZQPAEH56.js";
import {
  a as a4
} from "./chunk-N6WKHIKW.js";
import {
  dt,
  gt,
  ut
} from "./chunk-DKS7UUDR.js";
import {
  j,
  x as x2
} from "./chunk-2B6XECE5.js";
import {
  e as e3
} from "./chunk-CCHJ3WNU.js";
import {
  $,
  ee,
  ft,
  i4 as i2,
  m as m5,
  te
} from "./chunk-WKCCXG3E.js";
import {
  e as e2
} from "./chunk-VNLFNBKT.js";
import {
  e
} from "./chunk-KHEIHGIK.js";
import {
  v as v2
} from "./chunk-XGWAEOLO.js";
import {
  i as i3
} from "./chunk-2W7OT7Z4.js";
import {
  e as e4,
  r as r2
} from "./chunk-DRAQJS2F.js";
import {
  L as L2
} from "./chunk-X3UT6DT7.js";
import {
  M,
  S,
  W,
  X,
  a as a5
} from "./chunk-RP7FUW55.js";
import {
  b as b2
} from "./chunk-TNW4TPNP.js";
import {
  Z
} from "./chunk-JEYXDNAT.js";
import {
  N,
  O,
  y as y2
} from "./chunk-NOGWEW4X.js";
import {
  n as n2
} from "./chunk-HWKQJUGY.js";
import {
  u as u2
} from "./chunk-MUKDJQWB.js";
import {
  m as m4,
  s as s3,
  v,
  y
} from "./chunk-N3A2BVTW.js";
import {
  l as l2,
  o
} from "./chunk-52HWRRRQ.js";
import {
  m as m3
} from "./chunk-VNTEV3V4.js";
import {
  a as a3
} from "./chunk-OGOQOMMV.js";
import {
  I,
  R,
  a as a2,
  s as s2,
  u,
  x
} from "./chunk-6GWORUT3.js";
import {
  l
} from "./chunk-A3VAC24F.js";
import {
  A,
  m as m2
} from "./chunk-FPSA4NFH.js";
import {
  d as d2
} from "./chunk-OXSERRAR.js";
import {
  b,
  m
} from "./chunk-N3XLUQJI.js";
import {
  a2 as a
} from "./chunk-JUAD7TJ6.js";
import {
  r
} from "./chunk-5TPMG26T.js";
import {
  d,
  n,
  s
} from "./chunk-GZ2P4SCJ.js";
import {
  L,
  has
} from "./chunk-FXKORAMT.js";

// node_modules/@arcgis/core/views/2d/engine/webgl/shaderGraph/techniques/createGraphicSymbolMeshSchemas.js
async function u3(u8, f3, k2) {
  const b5 = [], d6 = { scaleInfo: s5(u8), scaleExpression: null };
  for (const s8 of f3) switch (s8.type) {
    case "marker":
      if (s8.animationParams) {
        if (s8.animationParams.params.hasShiftAnimation) {
          b5.push(...m6(k2.instances.animatedMarkerShift, s8, z, d6));
          break;
        }
        b5.push(...m6(k2.instances.animatedMarker, s8, z, d6));
        break;
      }
      b5.push(...S2(k2.instances.marker, s8, z, d6));
      break;
    case "fill":
      if (s8.animationParams) {
        b5.push(...p(k2.instances.animatedPolygon, s8, z, d6));
        break;
      }
      null == s8.spriteRasterizationParam ? b5.push(...h(k2.instances.fill, s8, d6)) : b5.push(...d4(k2.instances.complexFill, s8, false, d6));
      break;
    case "line":
      if (s8.animationParams) {
        if (s8.animationParams.params.hasShiftAnimation) {
          b5.push(...p(k2.instances.animatedPolylineShift, s8, z, d6));
          break;
        }
        b5.push(...p(k2.instances.animatedPolyline, s8, z, d6));
        break;
      }
      s8.spriteRasterizationParam ? b5.push(...R2(k2.instances.texturedLine, s8, false, d6)) : b5.push(...P(k2.instances.line, s8, false, d6));
      break;
    case "text":
      b5.push(...L3(k2.instances.text, s8, z, d6));
      break;
    case "gradientFill":
      b5.push(...g(k2.instances.gradientFill, s8, d6));
      break;
    case "gradientStroke":
      b5.push(...C(k2.instances.gradientStroke, s8, d6));
      break;
    case "outlineFill":
      b5.push(...z2(k2.instances.outlineFill, s8, d6));
  }
  return b5;
}

// node_modules/@arcgis/core/views/2d/layers/features/support/GraphicsReader.js
var a7 = class _a extends v3 {
  static from(t4, e9, r6) {
    return new _a(t4, e9, r6);
  }
  constructor(t4, e9, r6) {
    super(r6), this._items = t4, this._tile = e9, this._index = -1, this._cachedGeometry = null;
    const s8 = e9.lod;
    s8.wrap && (this._wrappingInfo = { worldSizeX: s8.worldSize[0] });
  }
  get _current() {
    return this._items[this._index];
  }
  getItem() {
    return this._current;
  }
  getZOrder() {
    return this._current.zOrder;
  }
  getMeshWriters() {
    return this._current.symbolResource?.symbolInfo.meshWriters ?? [];
  }
  hasField(t4) {
    return null != this._current.attributes[t4];
  }
  field(t4) {
    return this.readAttribute(t4);
  }
  get geometryType() {
    const t4 = v(this._current.geometry);
    return "esriGeometryPoint" === t4 ? "esriGeometryMultipoint" : t4;
  }
  getCursor() {
    return this.copy();
  }
  copy() {
    const t4 = new _a(this._items, this._tile, this.metadata);
    return this.copyInto(t4), t4;
  }
  copyInto(t4) {
    super.copyInto(t4), t4._cachedGeometry = this._cachedGeometry, t4._index = this._index;
  }
  get fields() {
    throw new Error("Fields reading not supported to graphics.");
  }
  get hasFeatures() {
    return !!this._items.length;
  }
  get hasNext() {
    return this._index + 1 < this._items.length;
  }
  get exceededTransferLimit() {
    throw new Error("InternalError: exceededTransferLimit not implemented for graphics.");
  }
  get hasZ() {
    return false;
  }
  get hasM() {
    return false;
  }
  get usedMemory() {
    return this._current.usedMemory;
  }
  getInTransform() {
    return this._tile.transform;
  }
  getSize() {
    return this._items.length;
  }
  getAttributeHash() {
    let t4 = "";
    for (const e9 in this._current.attributes) t4 += this._current.attributes[e9];
    return t4;
  }
  getObjectId() {
    return this._items[this._index].objectId;
  }
  getDisplayId() {
    return this._current.displayId;
  }
  setDisplayId(t4) {
    throw new Error("InternalError: Setting displayId not supported for graphics.");
  }
  setIndex(t4) {
    this._index = t4;
  }
  getIndex() {
    return this._index;
  }
  next() {
    for (this._cachedGeometry = null; ++this._index < this._items.length && !this._getExists(); ) ;
    return this._index < this._items.length;
  }
  readGeometryArea() {
    throw new Error("InternalError: readGeometryArea not supported for graphics.");
  }
  _readGeometry() {
    if (!this._cachedGeometry) {
      let t4 = ut(this._current.projectedGeometry, this.hasZ, this.hasM);
      if ("esriGeometryPolyline" === this.geometryType && (t4 = dt(new e2(), t4, this.hasZ, this.hasM, this.geometryType, this._tile.transform.scale[0])), this._cachedGeometry = gt(new e2(), t4, this.hasZ, this.hasM, this.geometryType, this._tile.transform), !this._cachedGeometry) return null;
      this._wrapGeometry(this._cachedGeometry);
    }
    return this._cachedGeometry;
  }
  _wrapGeometry(t4) {
    if (!this._wrappingInfo) return;
    const { worldSizeX: e9 } = this._wrappingInfo;
    if (t4.isPoint) return 1 === e9 ? (t4.coords.push(a5, 0), t4.coords.push(-1024, 0), void t4.lengths.push(3)) : 2 === e9 ? (t4.coords.push(2 * a5, 0), t4.coords.push(-2048, 0), void t4.lengths.push(3)) : void this._wrapVertex(t4.coords, 0, 2, e9);
    if ("esriGeometryMultipoint" !== this.geometryType) ;
    else {
      if (1 === e9) {
        const e10 = t4.coords.slice();
        e10[0] -= 512;
        const r6 = t4.coords.slice();
        r6[0] += 512, t4.coords.push(...e10, ...r6);
        const s8 = t4.lengths[0];
        return void t4.lengths.push(s8, s8);
      }
      this._wrapVertex(t4.coords, 0, 2, e9);
    }
  }
  _wrapVertex(t4, e9, r6, s8) {
    const i8 = e9 * r6, o5 = t4[i8];
    o5 < -a5 * (s8 - 2) ? t4[i8] = o5 + a5 * s8 : o5 > a5 * (s8 - 1) && (t4[i8] = o5 - a5 * s8);
  }
  _readX() {
    const t4 = this._readGeometry();
    return null != t4 ? t4.coords[0] : 0;
  }
  _readY() {
    const t4 = this._readGeometry();
    return null != t4 ? t4.coords[1] : 0;
  }
  _readServerCentroid() {
    switch (this.geometryType) {
      case "esriGeometryPolygon": {
        const t4 = l2(this._current.projectedGeometry), r6 = new e2([], t4);
        return gt(new e2(), r6, this.hasZ, this.hasM, this.geometryType, this._tile.transform);
      }
      case "esriGeometryPolyline": {
        const e9 = this._current.projectedGeometry, r6 = o(e9.paths, this.hasZ), s8 = new e2([], r6);
        return gt(new e2(), s8, this.hasZ, this.hasM, this.geometryType, this._tile.transform);
      }
    }
    return null;
  }
  _readAttribute(t4, e9) {
    const r6 = this._current.attributes[t4];
    if (void 0 !== r6) return r6;
    const s8 = t4.toLowerCase();
    for (const i8 in this._current.attributes) if (i8.toLowerCase() === s8) return this._current.attributes[i8];
  }
  _readAttributes() {
    return this._current.attributes;
  }
};

// node_modules/@arcgis/core/geometry/support/curves/curveUtils.js
function n6(n7) {
  return "curveRings" in n7 && !!n7.curveRings?.length || "curvePaths" in n7 && !!n7.curvePaths?.length;
}
function r3(n7) {
  return "curveRings" in n7 ? n7.curveRings : n7.curvePaths;
}
function t2(n7) {
  return "b" in n7;
}
function u4(n7) {
  return "c" in n7;
}
function e6(n7) {
  return Array.isArray(n7);
}
function i4(n7) {
  return "a" in n7;
}
function c(n7) {
  return 4 === n7.a.length;
}
function f(n7) {
  return 7 === n7.a.length;
}
function o3(n7) {
  return t2(n7) ? n7.b[0] : u4(n7) ? n7.c[0] : i4(n7) ? n7.a[0] : n7;
}

// node_modules/@arcgis/core/geometry/support/curves/mathUtils.js
function r4(t4, n7, r6, o5) {
  return t4[0] = n7[0] * (1 - o5) + r6[0] * o5, t4[1] = n7[1] * (1 - o5) + r6[1] * o5, t4;
}
function o4(t4, r6) {
  return b2(t4, r6);
}
function u5(t4, n7, r6) {
  const u8 = o4(n7, r6);
  if (0 === u8) return o4(n7, t4);
  const c4 = (n7[0] - t4[0]) * (r6[1] - t4[1]) - (n7[1] - t4[1]) * (r6[0] - t4[0]);
  return c4 * c4 / u8;
}
function a8(t4, n7) {
  const r6 = Math.atan2(t4, n7);
  return r6 < 0 ? r6 + 2 * Math.PI : r6;
}
function e7(n7, r6, o5) {
  const [u8, c4, a10, e9] = o5.a, i8 = Math.abs(n7 - r6), s8 = i8 > Math.PI, h3 = i8 < Math.PI, f3 = m2(i8, Math.PI);
  return (!f3 && (s8 && a10 || h3 && !a10) || f3 && (n7 > r6 && e9 || n7 < r6 && !e9)) && (n7 += 2 * (Math.sign(r6 - n7) || 1) * Math.PI), n7;
}

// node_modules/@arcgis/core/geometry/support/curves/bezierCurveUtils.js
function u6(t4, n7, o5, r6, s8) {
  const c4 = 1 - s8, e9 = c4 * c4, u8 = s8 * s8, i8 = e9 * c4, a10 = 3 * s8 * e9, f3 = 3 * u8 * c4, m10 = u8 * s8;
  return [t4[0] * i8 + n7[0] * a10 + o5[0] * f3 + r6[0] * m10, t4[1] * i8 + n7[1] * a10 + o5[1] * f3 + r6[1] * m10];
}

// node_modules/@arcgis/core/geometry/support/curves/circleUtils.js
var c2 = 2 * Math.PI;
var r5 = class {
  constructor(t4, n7, a10, s8, c4, r6) {
    this.cx = t4, this.cy = n7, this.radius = a10, this.thetaStart = s8, this.thetaEnd = c4, this.isInvalid = r6;
  }
};

// node_modules/@arcgis/core/geometry/support/curves/circularArcUtils.js
var m8 = e3();
function l4(o5, n7, c4) {
  const [i8, s8] = o5, [l5, e9] = n7, [a10, f3] = c4, u8 = i8 * i8 + s8 * s8, h3 = l5 * l5 + e9 * e9, p4 = a10 * a10 + f3 * f3;
  r2(m8, i8, l5, a10, s8, e9, f3, 1, 1, 1);
  const j5 = e4(m8);
  if (0 === j5) return null;
  r2(m8, u8, h3, p4, s8, e9, f3, 1, 1, 1);
  const g3 = e4(m8);
  r2(m8, u8, h3, p4, i8, l5, a10, 1, 1, 1);
  return [g3 / j5 * 0.5, e4(m8) / j5 * -0.5];
}
function e8(t4, r6) {
  const [o5, c4] = r6.c, m10 = l4(t4, c4, o5), e9 = null == m10, a10 = m10 ?? r4([], t4, o5, 0.5), [f3, u8] = t4, [h3, p4] = c4, [j5, g3] = o5, [x5, M3] = a10, b5 = f3 - x5, U = u8 - M3, q = Math.sqrt(b5 * b5 + U * U), w = a8(u8 - M3, f3 - x5), I3 = a8(p4 - M3, h3 - x5);
  let P4 = a8(g3 - M3, j5 - x5);
  return (I3 - w) * (P4 - I3) < 0 && (P4 += 2 * Math.sign(w - P4) * Math.PI), new r5(x5, M3, q, w, P4, e9);
}

// node_modules/@arcgis/core/geometry/support/curves/ellipticArc4Utils.js
function h2(r6, h3) {
  const [n7, c4] = h3.a, [i8, e9] = r6, [m10, M3] = n7, [f3, l5] = c4, p4 = i8 - f3, u8 = e9 - l5, j5 = Math.sqrt(p4 * p4 + u8 * u8), U = m10 - f3, b5 = M3 - l5, q = Math.sqrt(U * U + b5 * b5), x5 = 0 === j5 || 0 === q || !A(j5, q), I3 = j5, P4 = a8(e9 - l5, i8 - f3), d6 = e7(a8(M3 - l5, m10 - f3), P4, h3);
  return new r5(f3, l5, I3, P4, d6, x5);
}

// node_modules/@arcgis/core/geometry/support/curves/ellipticArc7Utils.js
var m9 = class {
  constructor(t4, s8, n7, o5, r6, a10, c4, i8, u8) {
    this.cx = t4, this.cy = s8, this.a = n7, this.b = o5, this.cosR = r6, this.sinR = a10, this.u1 = c4, this.u2 = i8, this.isInvalid = u8;
  }
};
function b3(t4, s8) {
  const [n7, o5, r6, a10, c4, i8, e9] = s8.a, [f3, M3] = t4, [l5, b5] = n7, [p4, R4] = o5, q = i8 * e9, I3 = Math.cos(c4), g3 = Math.sin(c4), x5 = a8(1 / q * (M3 - R4) * I3 - 1 / q * (f3 - p4) * g3, 1 / i8 * (M3 - R4) * g3 + 1 / i8 * (f3 - p4) * I3), j5 = e7(a8(1 / q * (b5 - R4) * I3 - 1 / q * (l5 - p4) * g3, 1 / i8 * (b5 - R4) * g3 + 1 / i8 * (l5 - p4) * I3), x5, s8);
  return new m9(p4, R4, i8, q, I3, g3, x5, j5, 0 === i8 || 0 === q);
}
function p2(t4, s8) {
  const { a: n7, b: o5, cosR: r6, sinR: a10, cx: c4, cy: i8 } = t4, u8 = Math.cos(s8), h3 = Math.sin(s8);
  return [n7 * u8 * r6 - o5 * h3 * a10 + c4, n7 * u8 * a10 + o5 * h3 * r6 + i8];
}
function R3(t4, s8) {
  const { u1: n7, u2: o5 } = t4;
  return p2(t4, n7 * (1 - s8) + o5 * s8);
}
var j2 = e3();
var v4 = e3();
var P2 = e3();
var d5 = e3();

// node_modules/@arcgis/core/geometry/support/curves/densifyCurvedGeometry.js
var f2 = { maxSegmentLength: 1 / 0, maxDeviation: 1 / 0, maxSegmentsPerCurve: 12e3, minSegmentsPerCurve: 1 };
var v5 = 1e-6;
var g2 = [0, 0];
var P3 = class {
  constructor(t4, s8) {
    this.curveStart = t4, this.curveEnd = s8, this.tStart = 0, this.tEnd = 0, this.tEndStack = [], this.arcEndStack = [];
  }
  get stackSize() {
    return this.tEndStack.length;
  }
  initialize(t4, s8) {
    this.tStart = 0, this.arcStart = t4, this.tEndStack.push(1), this.arcEndStack.push(s8);
  }
  splitAt(t4) {
    this.tEndStack.push(this.tEnd), this.arcEndStack.push(this.arcEnd), this.tEndStack.push(t4), this.arcEndStack.push(this.interpolate(t4));
  }
  splitInHalf() {
    return this.splitAt((this.tStart + this.tEnd) / 2);
  }
  pop() {
    this.tEnd = this.tEndStack.pop(), this.arcEnd = this.arcEndStack.pop();
  }
  next() {
    this.tStart = this.tEnd, this.arcStart = this.arcEnd;
  }
  densify(t4, { maxDeviation: s8, maxSegmentLength: i8, maxSegmentsPerCurve: n7, minSegmentsPerCurve: r6 }) {
    const e9 = i8 * i8, a10 = s8 * s8, h3 = 1 / n7, c4 = this.interpolate(0), o5 = this.interpolate(1);
    o4(this.curveStart, c4) > v5 && t4.push(c4), this.initialize(c4, o5);
    const u8 = 1 / r6;
    for (let p4 = r6 - 1; p4 > 0; p4--) {
      const t5 = p4 * u8;
      this.pop(), this.splitAt(t5);
    }
    for (; this.stackSize > 0; ) this.pop(), this.tStart === this.tEnd || this.tEnd - this.tStart < h3 || (0 === e9 || !isFinite(e9) || o4(this.arcStart, this.arcEnd) < e9) && (0 === a10 || !isFinite(a10) || this.getDeviation2() < a10) ? (t4.push(this.arcEnd), this.next()) : this.splitInHalf();
    return o4(this.curveEnd, o5) > v5 && t4.push([...this.curveEnd]), t4;
  }
};
var x4 = class extends P3 {
  constructor(t4, s8) {
    const [i8, n7, r6] = s8.b;
    super(t4, i8), this._controlPointsStack = [], this._curveControlPoints = [n7, r6], this._arcControlPoints = [n7, r6], this._controlPointsStack.push(this._arcControlPoints);
  }
  splitAt(t4) {
    const { arcStart: s8, arcEnd: i8, tStart: n7, tEnd: r6 } = this, [e9, a10] = this._arcControlPoints, h3 = (t4 - n7) / (r6 - n7), c4 = r4([], s8, e9, h3), o5 = r4(g2, e9, a10, h3), u8 = r4([], a10, i8, h3), p4 = r4([], c4, o5, h3), d6 = r4([], o5, u8, h3), l5 = r4([], p4, d6, h3);
    this.tEndStack.push(this.tEnd), this.arcEndStack.push(this.arcEnd), this._controlPointsStack.push([d6, u8]), this.tEndStack.push(t4), this.arcEndStack.push(l5), this._arcControlPoints[0] = c4, this._arcControlPoints[1] = p4, this._controlPointsStack.push(this._arcControlPoints);
  }
  pop() {
    super.pop(), this._arcControlPoints = this._controlPointsStack.pop();
  }
  interpolate(s8) {
    const { curveStart: i8, curveEnd: n7 } = this, [r6, e9] = this._curveControlPoints;
    return u6(i8, r6, e9, n7, s8);
  }
  getDeviation2() {
    const { arcStart: t4, arcEnd: s8 } = this, [i8, n7] = this._arcControlPoints;
    return Math.max(u5(i8, t4, s8), u5(n7, t4, s8));
  }
};
var k = class extends P3 {
  constructor(t4, s8) {
    const [i8] = s8.a;
    super(t4, i8), this._derivedEllipse = b3(t4, s8);
  }
  pop() {
    super.pop(), this._tMid = (this.tStart + this.tEnd) / 2, this._arcMid = this.interpolate(this._tMid);
  }
  splitInHalf() {
    this.tEndStack.push(this.tEnd), this.arcEndStack.push(this.arcEnd), this.tEndStack.push(this._tMid), this.arcEndStack.push(this._arcMid);
  }
  interpolate(t4) {
    return R3(this._derivedEllipse, t4);
  }
  getDeviation2() {
    return u5(this._arcMid, this.arcStart, this.arcEnd);
  }
};
function C2(t4, s8, i8, { cx: n7, cy: r6, radius: e9, thetaStart: a10, thetaEnd: h3, isInvalid: c4 }, { maxDeviation: o5, maxSegmentLength: u8, maxSegmentsPerCurve: p4, minSegmentsPerCurve: d6 }) {
  if (c4) return t4.push([...i8]), t4;
  const l5 = 2 * e9, S3 = [n7 + e9 * Math.cos(a10), r6 + e9 * Math.sin(a10)], m10 = [n7 + e9 * Math.cos(h3), r6 + e9 * Math.sin(h3)];
  o4(s8, S3) > v5 && t4.push(S3);
  const f3 = Math.abs(h3 - a10), g3 = u8 < l5 ? 2 * Math.asin(u8 / l5) : f3, P4 = o5 <= e9 ? 2 * Math.acos(1 - o5 / e9) : f3, x5 = Math.min(g3, P4), k2 = Math.min(p4, Math.max(d6, Math.ceil(Math.abs(f3 / x5)))), C3 = 1 / k2;
  for (let E = 1; E < k2; E++) {
    const s9 = E * C3, i9 = a10 * (1 - s9) + h3 * s9;
    t4.push([n7 + e9 * Math.cos(i9), r6 + e9 * Math.sin(i9)]);
  }
  return t4.push(m10), o4(i8, m10) > v5 && t4.push([...i8]), t4;
}
function _(t4, s8, i8, n7) {
  return new x4(s8, i8).densify(t4, n7);
}
function M2(t4, i8, n7, r6) {
  const e9 = e8(i8, n7), [a10] = n7.c;
  return C2(t4, i8, a10, e9, r6);
}
function D(t4, s8, i8, n7) {
  const r6 = h2(s8, i8), [e9] = i8.a;
  return C2(t4, s8, e9, r6, n7);
}
function A2(t4, s8, i8, n7) {
  const [r6, e9, a10, h3, c4, o5, u8] = i8.a;
  return 0 === o5 || 0 === u8 ? (t4.push([...r6]), t4) : new k(s8, i8).densify(t4, n7);
}
function j3(t4, s8, i8, n7) {
  if (e6(i8)) return t4.push([...i8]), t4;
  if (t2(i8)) return _(t4, s8, i8, n7);
  if (u4(i8)) return M2(t4, s8, i8, n7);
  if (i4(i8)) {
    if (c(i8)) return D(t4, s8, i8, n7);
    if (f(i8)) return A2(t4, s8, i8, n7);
  }
  return t4;
}
function L4(t4, s8) {
  if (!n6(t4)) return t4;
  const e9 = r3(t4), a10 = [];
  for (const i8 of e9) {
    const t5 = [];
    for (let n7 = 0, e10 = 1; e10 < i8.length; n7 = e10++) {
      const a11 = o3(i8[n7]);
      0 === n7 && t5.push(a11);
      j3(t5, a11, i8[e10], { maxSegmentLength: s8.maxSegmentLength ?? f2.maxSegmentLength, maxDeviation: s8.maxDeviation ?? f2.maxDeviation, maxSegmentsPerCurve: s8.maxSegmentsPerCurve ?? f2.maxSegmentsPerCurve, minSegmentsPerCurve: Math.max(s8.minSegmentsPerCurve ?? f2.minSegmentsPerCurve, 1) });
    }
    a10.push(t5);
  }
  return "curvePaths" in t4 ? { paths: a10, spatialReference: t4.spatialReference } : { rings: a10, spatialReference: t4.spatialReference };
}

// node_modules/@arcgis/core/views/2d/layers/graphics/GraphicStoreItem.js
var v6 = class _v {
  static fromGraphic(t4, e9, i8, s8) {
    return new _v(t4.geometry, e9, t4.attributes, t4.visible, t4.uid, t4.version, i8, s8);
  }
  constructor(t4, i8, s8, r6, o5, n7, m10, a10) {
    this.geometry = t4, this.symbol = i8, this.attributes = s8, this.visible = r6, this.objectId = o5, this._version = n7, this.zOrder = m10, this.displayId = a10, this.symbolBounds = I(), this.prevSymbolBounds = I(), this.size = [0, 0, 0, 0], this.geometryBounds = I(), this._isDensificationDirty = false, this._densificationDeviation = 1 / 0;
  }
  get projectedGeometry() {
    return this._projectedGeometry;
  }
  get linearCIM() {
    return this.symbolResource?.symbolInfo.linearCIM;
  }
  get usedMemory() {
    return 128 + e(this.attributes) + F(this.geometry);
  }
  get hasAnimations() {
    const { linearCIM: t4 } = this;
    return !!t4 && t4.some((t5) => "animationParams" in t5 && !!t5.animationParams);
  }
  get hasCurvedGeoemtry() {
    return null != this.geometry && "mesh" !== this.geometry.type && n6(this.geometry);
  }
  update(t4, i8, s8) {
    return (this._version !== t4.version || this.zOrder !== s8 || this.symbol !== i8) && (this.prevSymbolBounds = this.symbolBounds, this.symbolBounds = I(), this.zOrder = s8, this.geometry = t4.geometry, this.attributes = t4.attributes, this.symbol = i8, this.visible = t4.visible, this._version = t4.version, this.symbolResource = null, this._projectedGeometry = null, I(this.geometryBounds), this._minDensificationDeviation = null, this._isDensificationDirty = true, true);
  }
  updateDensificationResolution(t4) {
    if (!this.hasCurvedGeoemtry) return false;
    const e9 = Math.max(D2(t4), this._minDensificationDeviation ?? 0);
    return e9 !== this._densificationDeviation && (this._densificationDeviation = e9, this._isDensificationDirty = true, true);
  }
  async projectAndNormalize(t4) {
    let e9, o5 = this.geometry;
    if (o5 && o5.spatialReference && "mesh" !== o5.type && ("extent" === o5.type && (o5 = m5(o5)), e9 = n6(o5) ? L4(o5, { maxSegmentLength: 1 / 0, minSegmentsPerCurve: n3() }) : o5.toJSON(), this._projectedGeometry = await j4(e9, o5.spatialReference, t4), a3(this.geometryBounds, this._projectedGeometry), this.hasCurvedGeoemtry && null != this._projectedGeometry)) {
      const t5 = x(this.geometryBounds), e10 = s2(this.geometryBounds);
      this._minDensificationDeviation = b4(t5, e10);
    }
  }
  async densifyCurvedGeometryForDisplay(t4) {
    if (!this.hasCurvedGeoemtry || !this._isDensificationDirty) return;
    this._isDensificationDirty = false;
    const e9 = this.geometry;
    if (!e9 || !e9.spatialReference || "mesh" === e9.type) return;
    const i8 = t4.metersPerUnit / e9.spatialReference.metersPerUnit, s8 = this._densificationDeviation * i8, r6 = L4(e9, { maxDeviation: s8, minSegmentsPerCurve: i() });
    this._projectedGeometry = await j4(r6, e9.spatialReference, t4);
  }
};
async function j4(t4, e9, i8) {
  await x2(t4.spatialReference, i8);
  const s8 = a4(t4);
  if (!s8) return;
  const r6 = j(s8, e9, i8);
  return r6 && m3(r6), m4(r6) ? m5(r6) : r6;
}
function D2(t4) {
  return 2 ** Math.round(Math.log2(t4)) * t();
}
function b4(t4, e9) {
  if (t4 > 0 && e9 > 0) {
    const i8 = Math.min(t4, e9) / 2, s8 = 2 * Math.PI / e5();
    return i8 * (1 - Math.cos(s8 / 2));
  }
  return null;
}

// node_modules/@arcgis/core/views/2d/layers/graphics/GraphicUpdateMessage.js
var t3 = class {
  constructor(t4, e9, d6) {
    this.added = t4, this.updated = e9, this.removed = d6;
  }
  hasAnyUpdate() {
    return !!(this.added.length || this.updated.length || this.removed.length);
  }
};

// node_modules/@arcgis/core/views/2d/layers/graphics/GraphicStore.js
var p3 = 1e-5;
function _2(e9, t4) {
  return t4.zOrder - e9.zOrder;
}
var y3 = class {
  constructor(e9, t4, s8, o5, i8) {
    this._items = /* @__PURE__ */ new Map(), this._boundsDirty = false, this._outSpatialReference = e9, this._cimResourceManager = t4, this._hittestDrawHelper = new ft(t4), this._tileInfoView = s8, this._store = i8;
    const r6 = s8.getClosestInfoForScale(o5);
    this._resolution = this._tileInfoView.getTileResolution(r6.level);
  }
  destroy() {
    this._hittestDrawHelper.destroy();
  }
  items() {
    return this._items.values();
  }
  getItem(e9) {
    return this._items.get(e9);
  }
  async update(e9, t4, s8) {
    const o5 = [], i8 = [], r6 = [], n7 = /* @__PURE__ */ new Set(), m10 = [];
    let l5 = 0;
    for (const a10 of e9.items) {
      l5++;
      const e10 = a10.uid, r7 = this._items.get(e10), u8 = t4(a10);
      if (n7.add(e10), r7) {
        const e11 = r7.update(a10, u8, l5), t5 = r7.updateDensificationResolution(this._resolution);
        e11 && m10.push(this._updateItem(r7, s8)), (e11 || t5) && i8.push(r7);
        continue;
      }
      const h3 = this._store.createDisplayIdForObjectId(e10), d6 = v6.fromGraphic(a10, u8, l5, h3);
      d6.updateDensificationResolution(this._resolution), m10.push(this._updateItem(d6, s8)), this._items.set(d6.objectId, d6), o5.push(d6);
    }
    for (const [a10, u8] of this._items.entries()) n7.has(a10) || (this._store.releaseDisplayIdForObjectId(a10), this._items.delete(a10), r6.push(u8));
    return await Promise.all(m10), this._index = null, new t3(o5, i8, r6);
  }
  updateLevel(e9) {
    if (this._resolution === e9) return false;
    this._index = null, this._boundsDirty = true, this._resolution = e9;
    for (const t4 of this.items()) if (t4.hasCurvedGeoemtry) return true;
    return false;
  }
  hitTest(e9, t4, i8, n7, m10) {
    const l5 = has("esri-mobile"), c4 = l5 ? S : W, f3 = c4 + (l5 ? 0 : X);
    e9 = L2(e9, this._tileInfoView.spatialReference);
    const p4 = n7 * window.devicePixelRatio * f3, y4 = u();
    y4[0] = e9 - p4, y4[1] = t4 - p4, y4[2] = e9 + p4, y4[3] = t4 + p4;
    const b5 = n7 * window.devicePixelRatio * c4, I3 = u();
    I3[0] = e9 - b5, I3[1] = t4 - b5, I3[2] = e9 + b5, I3[3] = t4 + b5;
    const g3 = 0.5 * n7 * (f3 + i2), w = this._searchIndex(e9 - g3, t4 - g3, e9 + g3, t4 + g3);
    if (!w || 0 === w.length) return [];
    const x5 = [], j5 = u(), R4 = u();
    for (const s8 of w) {
      if (!s8.visible) continue;
      const { geometryBounds: e10, symbolResource: t5 } = s8;
      this._getSymbolBounds(j5, t5, e10, R4, m10), R4[3] = R4[2] = R4[1] = R4[0] = 0, R(j5, y4) && x5.push(s8);
    }
    if (0 === x5.length) return [];
    const S3 = this._hittestDrawHelper, B = [];
    for (const s8 of x5) {
      const { projectedGeometry: e10, symbolResource: t5 } = s8;
      if (!t5) continue;
      const { textInfo: o5, symbolInfo: i9 } = t5, r6 = i9.cimSymbol;
      S3.hitTest(I3, r6.symbol, e10, o5, m10, n7) && B.push(s8);
    }
    return B.sort(_2), B.map((e10) => e10.objectId);
  }
  queryItems(e9) {
    return 0 === this._items.size ? [] : this._searchForItems(e9);
  }
  clear() {
    this._items.clear(), this._index = null;
  }
  async _updateItem(e9, t4) {
    await e9.projectAndNormalize(this._outSpatialReference), await t4(e9);
    const { size: s8 } = e9;
    s8[0] = s8[1] = s8[2] = s8[3] = 0, this._getSymbolBounds(e9.symbolBounds, e9.symbolResource, e9.geometryBounds, e9.size, 0);
  }
  _searchIndex(e9, s8, o5, i8) {
    return this._boundsDirty && (this._items.forEach((e10) => this._getSymbolBounds(e10.symbolBounds, e10.symbolResource, e10.geometryBounds, e10.size, 0)), this._boundsDirty = false), this._index || (this._index = i3(9, (e10) => ({ minX: e10.symbolBounds[0], minY: e10.symbolBounds[1], maxX: e10.symbolBounds[2], maxY: e10.symbolBounds[3] })), this._index.load(Array.from(this._items.values()))), this._index.search({ minX: e9, minY: s8, maxX: o5, maxY: i8 });
  }
  _searchForItems(e9) {
    const t4 = this._tileInfoView.spatialReference, o5 = e9.bounds, i8 = d2(t4);
    if (i8 && t4.isWrappable) {
      const [t5, r6] = i8.valid, n7 = Math.abs(o5[2] - r6) < p3, m10 = Math.abs(o5[0] - t5) < p3;
      if ((!n7 || !m10) && (n7 || m10)) {
        const i9 = e9.resolution;
        let m11;
        m11 = u(n7 ? [t5, o5[1], t5 + i9 * i2, o5[3]] : [r6 - i9 * i2, o5[1], r6, o5[3]]);
        const l5 = this._searchIndex(o5[0], o5[1], o5[2], o5[3]), a10 = this._searchIndex(m11[0], m11[1], m11[2], m11[3]);
        return [.../* @__PURE__ */ new Set([...l5, ...a10])];
      }
    }
    return this._searchIndex(o5[0], o5[1], o5[2], o5[3]);
  }
  _getSymbolBounds(t4, o5, r6, n7, m10) {
    if (!o5 || !o5.symbolInfo.linearCIM) return null;
    if (t4 || (t4 = u()), a2(t4, r6), !n7 || 0 === n7[0] && 0 === n7[1] && 0 === n7[2] && 0 === n7[3]) {
      const { textInfo: t5, symbolInfo: s8 } = o5, i8 = s8.cimSymbol;
      n7 || (n7 = [0, 0, 0, 0]);
      const r7 = ee.getSymbolInflateSize(n7, i8.symbol, this._cimResourceManager, m10, t5);
      n7[0] = u2(r7[0]), n7[1] = u2(r7[1]), n7[2] = u2(r7[2]), n7[3] = u2(r7[3]);
    }
    const a10 = this._resolution, u8 = ee.safeSize(n7);
    return t4[0] -= u8 * a10, t4[1] -= u8 * a10, t4[2] += u8 * a10, t4[3] += u8 * a10, t4;
  }
};

// node_modules/@arcgis/core/views/2d/layers/graphics/GraphicsView2D.js
var F2 = class _F {
  static getOrCreate(e9, t4, s8) {
    let r6 = t4.get(e9.id);
    return r6 || (r6 = new _F(e9, s8), t4.set(e9.id, r6)), r6;
  }
  static fromItems(e9, t4, s8) {
    const r6 = new _F(e9, s8);
    for (const i8 of t4) r6.append(i8);
    return r6;
  }
  constructor(e9, t4) {
    this.tile = e9, this.metadata = t4, this.addedOrModified = [], this.removed = [], this.objectIdMap = null;
  }
  get reader() {
    return this._reader || (this._reader = a7.from(this.addedOrModified, this.tile, this.metadata)), this._reader;
  }
  append(e9) {
    this.addedOrModified.push(e9), e9.hasAnimations && (this.objectIdMap = this.objectIdMap || {}, this.objectIdMap[e9.displayId] = e9.objectId);
  }
};
var O2 = class extends n2.IdentifiableMixin(b) {
  constructor(e9) {
    super(e9), this._attached = false, this._tiles = /* @__PURE__ */ new Map(), this._controller = new AbortController(), this._hashToSymbolInfo = /* @__PURE__ */ new Map(), this._lastCleanup = performance.now(), this._cleanupRequired = true, this.lastUpdateId = -1, this.renderer = null, this._updateTracking = new d3({ debugName: "GraphicsView2D" }), this.updateRequested = false, this.defaultPointSymbolEnabled = true, this._commandQueue = new o2({ process: (e10) => {
      if ("update" === e10.type) return this._update();
      throw new Error("InternalError: Unsupported command");
    } }), this.graphicUpdateHandler = this.graphicUpdateHandler.bind(this);
  }
  destroy() {
    this.container.destroy(), this.view = null, this.renderer = null, this._set("graphics", null), this._controller.abort(), this._graphicStore.clear(), this._graphicStore.destroy(), this._attributeStore = null, this._hashToSymbolInfo.clear(), this._updateTracking.destroy(), this._commandQueue.destroy();
  }
  _initAttributeStore() {
    this._storage = new l3({ spatialReference: this.view.spatialReference, fields: new Z() }), this._attributeStore = new x3({ isLocal: true, update: (e10) => {
      has("esri-2d-update-debug") && console.debug(`[Id: ${this.layerId}] GraphicsView2D.AttributeStoreView.updateStart`, { message: e10 }), this.container.attributeView.requestUpdate(e10), this.container.requestRender(), has("esri-2d-update-debug") && console.debug(`[Id: ${this.layerId}] GraphicsView2D.AttributeStoreView.updateEnd`, { message: e10 });
    } });
    const e9 = a6(null, []);
    this._attributeStore.update(e9, this._storage, null), this.container.checkHighlight = () => this._attributeStore.hasHighlight;
  }
  initialize() {
    this._initAttributeStore(), this._metadata = n5.createGraphics(this.view.spatialReference), this._resourceProxy = new s4({ fetch: (e10) => Promise.all(e10.map((e11) => this.view.stage.textureManager.rasterizeItem(e11))), fetchDictionary: (e10) => {
      throw new Error("InternalError: Graphics do not support Dictionary requests");
    } }), this.addHandles([l(() => this._effectiveRenderer, () => this._pushUpdate()), this.view.graphicsTileStore.on("update", this._onTileUpdate.bind(this)), this.container.on("attach", () => {
      this.addHandles([this.graphics.on("change", () => this._pushUpdate())]), this._graphicStore?.destroy(), this._graphicStore = new y3(this.view.spatialReference, this._cimResourceManager, this.view.featuresTilingScheme, this.view.state.scale, this._attributeStore), this._attached = true, this.requestUpdate(), this._pushUpdate();
    })]), this._updateTracking.addUpdateTracking("CommandQueue", this._commandQueue.updateTracking);
    const e9 = this.view.graphicsTileStore.tiles;
    this._onTileUpdate({ added: e9, removed: [] });
  }
  get _effectiveRenderer() {
    return "function" == typeof this.renderer ? this.renderer() : this.renderer;
  }
  get _cimResourceManager() {
    return this.view.stage.textureManager.resourceManager;
  }
  get updating() {
    const e9 = !this._attached || this._updateTracking.updating;
    return has("esri-2d-log-updating") && console.log(`Updating GraphicsView2D: ${e9}
  -> attaching ${!this._attached}
  -> updateTracking ${this._updateTracking.updating}`), e9;
  }
  hitTest(e9) {
    if (!this.view || this.view.suspended) return [];
    const { resolution: t4, rotation: r6 } = this.view.state, i8 = this._graphicStore.hitTest(e9.x, e9.y, 2, t4, r6), o5 = new Set(i8), a10 = this.graphics.items.reduce((e10, t5) => (o5.has(t5.uid) && e10.set(t5.uid, t5), e10), /* @__PURE__ */ new Map());
    return i8.map((e10) => a10.get(e10)).filter(L);
  }
  requestUpdate() {
    this.updateRequested || (this.updateRequested = true, this.requestUpdateCallback()), this.notifyChange("updating");
  }
  processUpdate(e9) {
    this.updateRequested && (this.updateRequested = false, this.update(e9));
  }
  viewChange() {
    this.requestUpdate();
  }
  setHighlight(e9) {
    const t4 = [];
    for (const { objectId: s8, highlightFlags: r6 } of e9) {
      const e10 = this._graphicStore.getItem(s8)?.displayId;
      t4.push({ objectId: s8, highlightFlags: r6, displayId: e10 });
    }
    this._attributeStore.setHighlight(t4, e9), this._pushUpdate();
  }
  graphicUpdateHandler(e9) {
    this._pushUpdate();
  }
  update(e9) {
    this.updateRequested = false, this._attached && this._graphicStore.updateLevel(e9.state.resolution) && this.pushUpdate();
  }
  pushUpdate() {
    this._pushUpdate();
  }
  _pushUpdate() {
    d(this._commandQueue.push({ type: "update" }));
  }
  async _update() {
    try {
      has("esri-2d-update-debug") && console.debug(`[Id: ${this.layerId}] GraphicsView._update start`);
      const e9 = await this._graphicStore.update(this.graphics, (e10) => this._getSymbolForGraphic(e10), (e10) => this._ensureSymbolResource(e10));
      for (const s8 of e9.updated) this.container.restartAnimation(s8.objectId);
      if (!e9.hasAnyUpdate()) return void this._attributeStore.sendUpdates();
      e9.removed.length && (this._cleanupRequired = true), has("esri-2d-update-debug") && console.debug(`[Id: ${this.layerId}] GraphicsView updateMessage`, e9);
      const t4 = this._createTileMessages(e9);
      await this._densifyItemsForDisplay(t4), await this._fetchResources(t4), this._write(t4);
      for (const s8 of e9.added) this._setFilterState(s8);
      for (const s8 of e9.updated) this._setFilterState(s8);
      has("esri-2d-update-debug") && console.debug(`[Id: ${this.layerId}] GraphicsView sendUpdate`, e9), this._attributeStore.sendUpdates(), has("esri-2d-update-debug") && console.debug(`[Id: ${this.layerId}] GraphicsView sendUpdate.await`, e9);
    } catch (e9) {
    }
    this._cleanupSharedResources();
  }
  _createTileMessages(e9) {
    const t4 = /* @__PURE__ */ new Map();
    for (const s8 of e9.added) {
      const e10 = this.view.graphicsTileStore.getIntersectingTiles(s8.symbolBounds);
      for (const r6 of e10) {
        F2.getOrCreate(r6, t4, this._metadata).append(s8);
      }
    }
    for (const s8 of e9.updated) {
      const e10 = this.view.graphicsTileStore.getIntersectingTiles(s8.prevSymbolBounds), r6 = this.view.graphicsTileStore.getIntersectingTiles(s8.symbolBounds);
      for (const i8 of e10) {
        F2.getOrCreate(i8, t4, this._metadata).removed.push(s8.displayId);
      }
      for (const i8 of r6) {
        F2.getOrCreate(i8, t4, this._metadata).append(s8);
      }
    }
    for (const s8 of e9.removed) {
      const e10 = this.view.graphicsTileStore.getIntersectingTiles(s8.symbolBounds);
      for (const r6 of e10) {
        F2.getOrCreate(r6, t4, this._metadata).removed.push(s8.displayId);
      }
    }
    return Array.from(t4.values());
  }
  async _densifyItemsForDisplay(e9) {
    const t4 = /* @__PURE__ */ new Map();
    for (const s8 of e9) for (const e10 of s8.addedOrModified) t4.has(e10) || t4.set(e10, e10.densifyCurvedGeometryForDisplay(this.view.spatialReference));
    await Promise.all(t4.values());
  }
  async _fetchResources(e9) {
    const t4 = { timeZone: null, timeExtent: null };
    for (const { tile: s8, reader: r6 } of e9) {
      has("esri-2d-update-debug") && console.debug(`Id[${this.layerId}] Tile[${s8.id}] GraphicsView fetchResources`, e9);
      const i8 = r6.getCursor();
      for (; i8.next(); ) for (const e10 of i8.getMeshWriters()) e10.enqueueRequest(this._resourceProxy, i8, s8.createArcadeEvaluationOptions(t4));
    }
    await this._resourceProxy.fetchEnqueuedResources();
  }
  _write(e9) {
    for (const t4 of e9) {
      has("esri-2d-update-debug") && console.debug(`Id[${this.layerId}] Tile[${t4.tile.id}] GraphicsView write`, t4);
      const e10 = this._writeMeshes(t4);
      let s8 = this._tiles.get(t4.tile.key);
      s8 || (s8 = this._createFeatureTile(t4.tile.key)), has("esri-2d-update-debug") && console.debug(`Id[${this.layerId}] Tile[${t4.tile.id}] GraphicsView onTileData`, t4), this.container.onTileData(s8, { type: "update", modify: e10, remove: t4.removed, end: false, attributeEpoch: this._attributeStore.epoch, objectIdMap: t4.objectIdMap }), this.container.requestRender();
    }
  }
  _writeMeshes(e9) {
    const t4 = { timeZone: null, timeExtent: null }, s8 = new n4(e9.tile.id), r6 = e9.reader.getCursor();
    for (; r6.next(); ) {
      s8.entityStart(r6.getDisplayId(), r6.getZOrder());
      for (const i8 of r6.getMeshWriters()) i8.write(s8, this._resourceProxy, r6, e9.tile.createArcadeEvaluationOptions(t4), e9.tile.level);
      s8.entityEnd();
    }
    return { ...s8.serialize().message, tileId: e9.tile.id };
  }
  _setFilterState(e9) {
    const t4 = e9.displayId, s8 = this._attributeStore.getHighlightFlags(e9.objectId);
    this._attributeStore.setData(t4, 0, 0, s8 | (e9.visible ? M : 0));
  }
  _getSymbolForGraphic(e9) {
    return null != e9.symbol ? e9.symbol : null != this._effectiveRenderer ? this._effectiveRenderer.getSymbol(e9) : this._getNullSymbol(e9);
  }
  async _ensureSymbolResource(e9) {
    if (!e9.symbol) return;
    const t4 = await this._getSymbolInfo(e9.symbol);
    if (!t4) return;
    const s8 = t4.linearCIM.filter((e10) => "text" === e10.type);
    if (s8.length > 0) {
      const r6 = await this._getTextResources(e9, s8);
      e9.symbolResource = { symbolInfo: t4, textInfo: r6 };
    } else e9.symbolResource = { symbolInfo: t4 };
  }
  _getSymbolInfo(e9) {
    const t4 = e9.hash();
    return this._hashToSymbolInfo.has(t4) || this._hashToSymbolInfo.set(t4, this._createSymbolInfo(t4, e9).catch((e10) => null)), this._hashToSymbolInfo.get(t4);
  }
  async _createSymbolInfo(e9, t4) {
    const s8 = await this._convertToCIMSymbol(t4), r6 = await this._createLinearCIM(s8);
    return { hash: e9, cimSymbol: s8, linearCIM: r6, meshWriters: await this._createMeshWriters(s8, r6) };
  }
  async _convertToCIMSymbol(e9) {
    const t4 = $(e9);
    return "web-style" === t4.type ? this._convertToCIMSymbol(await t4.fetchSymbol({ acceptedFormats: ["cim", "web"] })) : t4;
  }
  async _createLinearCIM(e9) {
    return await Promise.all(te.fetchResources(e9.symbol, this._cimResourceManager, [])), this.view.stage.cimAnalyzer.analyzeSymbolReference(e9, false);
  }
  async _createMeshWriters(e9, t4) {
    s(this._controller.signal);
    const s8 = this.container.instanceStore, r6 = this.view.stage.meshWriterRegistry, i8 = await u3(e9, t4, s8);
    return Promise.all(i8.map((e10) => r6.createMeshWriter(this._storage, this._resourceProxy, { tileInfo: this.view.featuresTilingScheme.tileInfo }, e10, null)));
  }
  _onTileUpdate(e9) {
    if (e9.added && e9.added.length > 0) for (const t4 of e9.added) this._updateTracking.addPromise(this._addTile(t4));
    if (e9.removed && e9.removed.length > 0) for (const t4 of e9.removed) this._removeTile(t4.key);
  }
  _createFeatureTile(e9) {
    const t4 = this.view.featuresTilingScheme.getTileBounds(u(), e9), s8 = this.view.featuresTilingScheme.getTileResolution(e9.level), r6 = new I2(e9, s8, t4[0], t4[3]);
    return this._tiles.set(e9, r6), this.container.addChild(r6), r6;
  }
  async _addTile(e9) {
    if (!this._attached) return;
    const t4 = this._graphicStore.queryItems(e9);
    if (!t4.length) return;
    const s8 = this._createFeatureTile(e9.key), r6 = F2.fromItems(e9, t4, this._metadata);
    await this._densifyItemsForDisplay([r6]), await this._fetchResources([r6]);
    const i8 = this._writeMeshes(r6);
    s8.onMessage({ type: "append", append: i8, clear: false, end: true, attributeEpoch: this._attributeStore.epoch, objectIdMap: r6.objectIdMap });
  }
  _removeTile(e9) {
    if (!this._tiles.has(e9)) return;
    const t4 = this._tiles.get(e9);
    this.container.removeChild(t4), t4.destroy(), this._tiles.delete(e9);
  }
  _getNullSymbol(e9) {
    const t4 = e9.geometry;
    return t4 ? s3(t4) ? O : y(t4) || m4(t4) ? y2 : this.defaultPointSymbolEnabled ? N : null : this.defaultPointSymbolEnabled ? N : null;
  }
  async _getTextResources(e9, t4) {
    const s8 = new Array(), r6 = new Array();
    for (let i8 = 0; i8 < t4.length; i8++) {
      const o6 = t4[i8], { resource: a11, overrides: n8 } = o6.textRasterizationParam;
      if (n8?.length > 0) {
        const t5 = v2.resolveSymbolOverrides({ type: "CIMSymbolReference", primitiveOverrides: n8, symbol: { type: "CIMPointSymbol", symbolLayers: [{ type: "CIMVectorMarker", enable: true, size: a11.symbol.height, anchorPointUnits: "Relative", frame: { xmin: -5, ymin: -5, xmax: 5, ymax: 5 }, markerGraphics: [{ type: "CIMMarkerGraphic", geometry: { x: 0, y: 0 }, symbol: a11.symbol, textString: a11.textString }], scaleSymbolsProportionally: true, respectFrame: true }] } }, e9, this.view.spatialReference, null, v(e9.projectedGeometry), null, null);
        t5.then((e10) => {
          const t6 = e10.symbolLayers[0], { textString: s9 } = t6.markerGraphics[0];
          r6.push({ type: "cim-rasterization-info", resource: { type: "text", textString: s9 || "", font: a11.font } }), o6.text = a11.textString = s9 || "";
        }), s8.push(t5);
      } else r6.push({ type: "cim-rasterization-info", resource: a11 });
    }
    s8.length > 0 && await Promise.all(s8);
    const o5 = r6.map((e10) => this.view.stage.textureManager.rasterizeItem(e10)), a10 = await Promise.all(o5);
    n(a10);
    const n7 = /* @__PURE__ */ new Map();
    for (let i8 = 0; i8 < t4.length; i8++) {
      const e10 = t4[i8];
      n7.set(e10.textRasterizationParam.resource.symbol, { text: e10.text, glyphMosaicItems: a10[i8] });
    }
    return n7;
  }
  _cleanupSharedResources() {
    if (!this._cleanupRequired) return;
    const e9 = performance.now();
    if (e9 - this._lastCleanup < 5e3) return;
    this._cleanupRequired = false, this._lastCleanup = e9;
    const t4 = /* @__PURE__ */ new Set();
    for (const r6 of this._graphicStore.items()) {
      const e10 = r6.symbolResource?.symbolInfo.hash;
      t4.add(e10);
    }
    const s8 = new Set(this._hashToSymbolInfo.keys());
    for (const r6 of s8.values()) t4.has(r6) || this._hashToSymbolInfo.delete(r6);
  }
};
r([m()], O2.prototype, "_effectiveRenderer", null), r([m({ constructOnly: true })], O2.prototype, "layerId", void 0), r([m({ constructOnly: true })], O2.prototype, "requestUpdateCallback", void 0), r([m()], O2.prototype, "container", void 0), r([m({ constructOnly: true })], O2.prototype, "graphics", void 0), r([m()], O2.prototype, "renderer", void 0), r([m()], O2.prototype, "_updateTracking", void 0), r([m()], O2.prototype, "updating", null), r([m()], O2.prototype, "view", void 0), r([m()], O2.prototype, "updateRequested", void 0), r([m()], O2.prototype, "defaultPointSymbolEnabled", void 0), O2 = r([a("esri.views.2d.layers.graphics.GraphicsView2D")], O2);

export {
  O2 as O
};
//# sourceMappingURL=chunk-4PAILKIT.js.map
