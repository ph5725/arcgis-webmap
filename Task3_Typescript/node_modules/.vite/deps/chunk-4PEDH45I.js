import {
  M,
  V,
  _
} from "./chunk-PYKMDQYM.js";
import {
  d as d2
} from "./chunk-4TMVUEZQ.js";
import {
  A as A2,
  F,
  F2,
  L,
  N2,
  R as R3,
  S,
  b2 as b,
  h3 as h2,
  i as i3
} from "./chunk-CWLDBABC.js";
import {
  O
} from "./chunk-B7AMZ4LC.js";
import {
  g as g4,
  t
} from "./chunk-SMESMUA5.js";
import {
  f as f2,
  o as o4,
  o2 as o5,
  u2 as u5
} from "./chunk-RS3I6DPK.js";
import {
  B,
  g as g3,
  o as o8,
  p as p3
} from "./chunk-56ZY2WLU.js";
import {
  a,
  d,
  i as i2,
  m,
  n2 as n7,
  o2 as o7,
  oe,
  p as p2,
  t as t2
} from "./chunk-4XEYVSQH.js";
import {
  o as o6
} from "./chunk-QY6CN52R.js";
import {
  o2 as o9
} from "./chunk-VT5VIQO4.js";
import {
  i
} from "./chunk-U3CE4V5Z.js";
import {
  n as n5
} from "./chunk-3MVOHROR.js";
import {
  e as e5
} from "./chunk-TTPBKTNJ.js";
import {
  n as n6,
  u as u4,
  w
} from "./chunk-ZPAWXU2P.js";
import {
  e as e4
} from "./chunk-UZRZVWLE.js";
import {
  T,
  f,
  g as g2,
  o as o3,
  y
} from "./chunk-6DBRCIDV.js";
import {
  s as s3
} from "./chunk-YSRSL2SU.js";
import {
  e as e2
} from "./chunk-NZPABYQQ.js";
import {
  e as e3
} from "./chunk-CCHJ3WNU.js";
import {
  n as n4
} from "./chunk-DRAQJS2F.js";
import {
  C,
  R as R2
} from "./chunk-BZYXFNL4.js";
import {
  n as n3,
  r as r5
} from "./chunk-VNTS5E5O.js";
import {
  A,
  E,
  N,
  P,
  R,
  c,
  g,
  o,
  p,
  r as r4,
  s as s2,
  u as u3
} from "./chunk-TMFB3DKM.js";
import {
  I,
  o as o2
} from "./chunk-TNW4TPNP.js";
import {
  e,
  n as n2,
  u as u2
} from "./chunk-7FAVUXK2.js";
import {
  h
} from "./chunk-DNZK6PPI.js";
import {
  n,
  r as r3
} from "./chunk-RACDQ3AL.js";
import {
  u
} from "./chunk-6GWORUT3.js";
import {
  r as r2,
  s
} from "./chunk-FPSA4NFH.js";
import {
  r
} from "./chunk-5TPMG26T.js";

// node_modules/@arcgis/core/core/libs/gl-matrix-2/types/mat4.js
function n8(n9) {
  return n9 instanceof Float32Array && n9.length >= 16;
}
function r6(n9) {
  return Array.isArray(n9) && n9.length >= 16;
}
function t3(t5) {
  return n8(t5) || r6(t5);
}

// node_modules/@arcgis/core/views/3d/webgl-engine/materials/ScaleInfo.js
var t4 = class {
  constructor() {
    this.factor = new c2(), this.factorAlignment = new c2();
  }
};
var c2 = class {
  constructor() {
    this.scale = 0, this.factor = 0, this.minScaleFactor = 0;
  }
};

// node_modules/@arcgis/core/views/3d/webgl-engine/shaders/HUDMaterialTechnique.js
var h3 = class extends g4 {
  constructor(e6, r8) {
    super(e6, r8, new t(_, () => import("./HUDMaterial.glsl-62JSGQLA.js"))), this.primitiveType = r8.occlusionPass ? R2.POINTS : R2.TRIANGLES;
  }
  initializePipeline(s4) {
    const { oitPass: o11, hasPolygonOffset: n9, draped: a2, output: h4, depthTestEnabled: T2, occlusionPass: g5 } = s4, j = o11 === o6.NONE, b2 = o11 === o6.ColorAlpha, O2 = h4 === n6.Highlight, P2 = T2 && !a2 && !b2 && !g5 && !O2;
    return B({ blending: u4(h4) ? j ? o8 : i3(o11) : null, depthTest: T2 && !a2 ? { func: C.LEQUAL } : null, depthWrite: P2 ? p3 : null, drawBuffers: F(o11, h4), colorWrite: g3, polygonOffset: n9 ? f3 : null });
  }
};
var f3 = { factor: 0, units: -4 };

// node_modules/@arcgis/core/views/3d/webgl-engine/shaders/HUDMaterialTechniqueConfiguration.js
var r7 = class extends a {
  constructor(e6) {
    super(), this.spherical = e6, this.screenCenterOffsetUnitsEnabled = false, this.occlusionTestEnabled = true, this.signedDistanceFieldEnabled = false, this.sampleSignedDistanceFieldTexelCenter = false, this.vvSize = false, this.vvColor = false, this.hasVerticalOffset = false, this.hasScreenSizePerspective = false, this.hasRotation = false, this.debugDrawLabelBorder = false, this.hasPolygonOffset = false, this.depthTestEnabled = true, this.pixelSnappingEnabled = true, this.draped = false, this.terrainDepthTest = false, this.cullAboveTerrain = false, this.occlusionPass = false, this.occludedFragmentFade = false, this.objectAndLayerIdColorInstanced = false, this.horizonCullingEnabled = true, this.isFocused = true, this.textureCoordinateType = o4.None, this.emissionSource = f2.None, this.discardInvisibleFragments = true, this.hasVvInstancing = false, this.snowCover = false;
  }
};
r([i()], r7.prototype, "screenCenterOffsetUnitsEnabled", void 0), r([i()], r7.prototype, "occlusionTestEnabled", void 0), r([i()], r7.prototype, "signedDistanceFieldEnabled", void 0), r([i()], r7.prototype, "sampleSignedDistanceFieldTexelCenter", void 0), r([i()], r7.prototype, "vvSize", void 0), r([i()], r7.prototype, "vvColor", void 0), r([i()], r7.prototype, "hasVerticalOffset", void 0), r([i()], r7.prototype, "hasScreenSizePerspective", void 0), r([i()], r7.prototype, "hasRotation", void 0), r([i()], r7.prototype, "debugDrawLabelBorder", void 0), r([i()], r7.prototype, "hasPolygonOffset", void 0), r([i()], r7.prototype, "depthTestEnabled", void 0), r([i()], r7.prototype, "pixelSnappingEnabled", void 0), r([i()], r7.prototype, "draped", void 0), r([i()], r7.prototype, "terrainDepthTest", void 0), r([i()], r7.prototype, "cullAboveTerrain", void 0), r([i()], r7.prototype, "occlusionPass", void 0), r([i()], r7.prototype, "occludedFragmentFade", void 0), r([i()], r7.prototype, "objectAndLayerIdColorInstanced", void 0), r([i()], r7.prototype, "horizonCullingEnabled", void 0), r([i()], r7.prototype, "isFocused", void 0);

// node_modules/@arcgis/core/views/3d/webgl-engine/materials/HUDMaterial.js
var ue = class extends n7 {
  constructor(e6, t5) {
    super(e6, Me), this.produces = /* @__PURE__ */ new Map([[A2.HUD_MATERIAL, (e7) => w(e7) && !this.parameters.drawAsLabel], [A2.LABEL_MATERIAL, (e7) => w(e7) && this.parameters.drawAsLabel], [A2.OCCLUSION_PIXELS, () => this.parameters.occlusionTest], [A2.DRAPED_MATERIAL, (e7) => this.parameters.draped && w(e7)]]), this._visible = true, this._configuration = new r7(t5);
  }
  getConfiguration(e6, t5) {
    const i5 = this.parameters.draped;
    return super.getConfiguration(e6, t5, this._configuration), this._configuration.hasSlicePlane = this.parameters.hasSlicePlane, this._configuration.hasVerticalOffset = !!this.parameters.verticalOffset, this._configuration.hasScreenSizePerspective = !!this.parameters.screenSizePerspective, this._configuration.screenCenterOffsetUnitsEnabled = "screen" === this.parameters.centerOffsetUnits, this._configuration.hasPolygonOffset = this.parameters.polygonOffset, this._configuration.draped = i5, this._configuration.occlusionTestEnabled = this.parameters.occlusionTest, this._configuration.pixelSnappingEnabled = this.parameters.pixelSnappingEnabled, this._configuration.signedDistanceFieldEnabled = this.parameters.textureIsSignedDistanceField, this._configuration.sampleSignedDistanceFieldTexelCenter = this.parameters.sampleSignedDistanceFieldTexelCenter, this._configuration.hasRotation = this.parameters.hasRotation, this._configuration.vvSize = !!this.parameters.vvSize, this._configuration.vvColor = !!this.parameters.vvColor, this._configuration.occlusionPass = t5.slot === A2.OCCLUSION_PIXELS, this._configuration.occludedFragmentFade = !i5 && this.parameters.occludedFragmentFade, this._configuration.horizonCullingEnabled = this.parameters.horizonCullingEnabled, this._configuration.isFocused = this.parameters.isFocused, this._configuration.depthTestEnabled = this.parameters.depthEnabled || t5.slot === A2.OCCLUSION_PIXELS, u4(e6) && (this._configuration.debugDrawLabelBorder = !!t2.LABELS_SHOW_BORDER), this._configuration.oitPass = t5.oitPass, this._configuration.terrainDepthTest = t5.terrainDepthTest, this._configuration.cullAboveTerrain = t5.cullAboveTerrain, this._configuration;
  }
  intersect(e6, t5, s4, a2, n9, o11) {
    const { options: { selectionMode: l, hud: c3, excludeLabels: S2 }, point: T2, camera: b2 } = s4, { parameters: v } = this;
    if (!l || !c3 || S2 && v.isLabel || !e6.visible || !T2 || !b2) return;
    const E2 = e6.attributes.get(e4.FEATUREATTRIBUTE), I2 = null == E2 ? null : u2(E2.data, ye), { scaleX: x, scaleY: F3 } = Xe(I2, v, b2.pixelRatio);
    n4(Ie, t5), e6.attributes.has(e4.FEATUREATTRIBUTE) && de(Ie);
    const P2 = e6.attributes.get(e4.POSITION), _2 = e6.attributes.get(e4.SIZE), C2 = e6.attributes.get(e4.NORMAL), y2 = e6.attributes.get(e4.ROTATION), D = e6.attributes.get(e4.CENTEROFFSETANDDISTANCE);
    s3(P2.size >= 3);
    const L2 = M(v), N3 = "screen" === this.parameters.centerOffsetUnits;
    for (let i5 = 0; i5 < P2.data.length / P2.size; i5++) {
      const e7 = i5 * P2.size;
      o(Se, P2.data[e7], P2.data[e7 + 1], P2.data[e7 + 2]), E(Se, Se, t5), E(Se, Se, b2.viewMatrix);
      const a3 = i5 * D.size;
      if (o(_e, D.data[a3], D.data[a3 + 1], D.data[a3 + 2]), !N3 && (Se[0] += _e[0], Se[1] += _e[1], 0 !== _e[2])) {
        const e8 = _e[2];
        A(_e, Se), c(Se, Se, g(_e, _e, e8));
      }
      const n10 = i5 * C2.size;
      if (o(Te, C2.data[n10], C2.data[n10 + 1], C2.data[n10 + 2]), me(Te, Ie, b2, De), qe(this.parameters, Se, De, b2, Oe), b2.applyProjection(Se, be), be[0] > -1) {
        N3 && (_e[0] || _e[1]) && (be[0] += _e[0] * b2.pixelRatio, 0 !== _e[1] && (be[1] += m(_e[1], Oe.factorAlignment) * b2.pixelRatio), b2.unapplyProjection(be, Se)), be[0] += this.parameters.screenOffset[0] * b2.pixelRatio, be[1] += this.parameters.screenOffset[1] * b2.pixelRatio, be[0] = Math.floor(be[0]), be[1] = Math.floor(be[1]);
        const e8 = i5 * _2.size;
        je[0] = _2.data[e8], je[1] = _2.data[e8 + 1], p2(je, Oe.factor, je);
        const t6 = Le * b2.pixelRatio;
        let a4 = 0;
        if (v.textureIsSignedDistanceField) {
          a4 = Math.min(v.outlineSize, 0.5 * je[0]) * b2.pixelRatio / 2;
        }
        je[0] *= x, je[1] *= F3;
        const n11 = i5 * y2.size, l2 = v.rotation + y2.data[n11];
        if (ge(T2, be[0], be[1], je, t6, a4, l2, v, L2)) {
          const e9 = s4.ray;
          if (E(Ae, Se, h(Fe, b2.viewMatrix)), be[0] = T2[0], be[1] = T2[1], b2.unprojectFromRenderScreen(be, Se)) {
            const t7 = n();
            s2(t7, e9.direction);
            const i6 = 1 / r4(t7);
            g(t7, t7, i6);
            o11(p(e9.origin, Se) * i6, t7, -1, Ae);
          }
        }
      }
    }
  }
  intersectDraped(e6, t5, i5, s4, r8) {
    const a2 = e6.attributes.get(e4.POSITION), n9 = e6.attributes.get(e4.SIZE), o11 = e6.attributes.get(e4.ROTATION), l = this.parameters, c3 = M(l), f4 = e6.attributes.get(e4.FEATUREATTRIBUTE), u6 = null == f4 ? null : u2(f4.data, ye), { scaleX: p4, scaleY: h4 } = Xe(u6, l, e6.screenToWorldRatio), m2 = Ne * e6.screenToWorldRatio;
    for (let d3 = 0; d3 < a2.data.length / a2.size; d3++) {
      const t6 = d3 * a2.size, f5 = a2.data[t6], u7 = a2.data[t6 + 1], g5 = d3 * n9.size;
      je[0] = n9.data[g5], je[1] = n9.data[g5 + 1];
      let O2 = 0;
      if (l.textureIsSignedDistanceField) {
        O2 = Math.min(l.outlineSize, 0.5 * je[0]) * e6.screenToWorldRatio / 2;
      }
      je[0] *= p4, je[1] *= h4;
      const S2 = d3 * o11.size, T2 = l.rotation + o11.data[S2];
      ge(i5, f5, u7, je, m2, O2, T2, l, c3) && s4(r8.distance, r8.normal, -1);
    }
  }
  createBufferWriter() {
    return new Ve();
  }
  applyShaderOffsetsView(e6, t5, i5, s4, r8, a2, n9) {
    const o11 = me(t5, i5, r8, De);
    return this._applyVerticalGroundOffsetView(e6, o11, r8, n9), qe(this.parameters, n9, o11, r8, a2), this._applyPolygonOffsetView(n9, o11, s4[3], r8, n9), this._applyCenterOffsetView(n9, s4, n9), n9;
  }
  applyShaderOffsetsNDC(e6, t5, i5, s4, r8) {
    return this._applyCenterOffsetNDC(e6, t5, i5, s4), null != r8 && s2(r8, s4), this._applyPolygonOffsetNDC(s4, t5, i5, s4), s4;
  }
  _applyPolygonOffsetView(t5, i5, s4, r8, a2) {
    const n9 = r8.aboveGround ? 1 : -1;
    let o11 = Math.sign(s4);
    0 === o11 && (o11 = n9);
    const l = n9 * o11;
    if (this.parameters.shaderPolygonOffset <= 0) return s2(a2, t5);
    const c3 = r2(Math.abs(i5.cosAngle), 0.01, 1), f4 = 1 - Math.sqrt(1 - c3 * c3) / c3 / r8.viewport[2];
    return g(a2, t5, l > 0 ? f4 : 1 / f4), a2;
  }
  _applyVerticalGroundOffsetView(e6, t5, i5, s4) {
    const r8 = r4(e6), a2 = i5.aboveGround ? 1 : -1, n9 = i5.computeRenderPixelSizeAtDist(r8) * d2, o11 = g(Se, t5.normal, a2 * n9);
    return u3(s4, e6, o11), s4;
  }
  _applyCenterOffsetView(e6, t5, i5) {
    const s4 = "screen" !== this.parameters.centerOffsetUnits;
    return i5 !== e6 && s2(i5, e6), s4 && (i5[0] += t5[0], i5[1] += t5[1], t5[2] && (A(Te, i5), R(i5, i5, g(Te, Te, t5[2])))), i5;
  }
  _applyCenterOffsetNDC(e6, t5, i5, s4) {
    const r8 = "screen" !== this.parameters.centerOffsetUnits;
    return s4 !== e6 && s2(s4, e6), r8 || (s4[0] += t5[0] / i5.fullWidth * 2, s4[1] += t5[1] / i5.fullHeight * 2), s4;
  }
  _applyPolygonOffsetNDC(e6, t5, i5, s4) {
    const r8 = this.parameters.shaderPolygonOffset;
    if (e6 !== s4 && s2(s4, e6), r8) {
      const e7 = i5.aboveGround ? 1 : -1, a2 = e7 * Math.sign(t5[3]);
      s4[2] -= (a2 || e7) * r8;
    }
    return s4;
  }
  set visible(e6) {
    this._visible = e6;
  }
  get visible() {
    const { color: e6, outlineSize: t5, outlineColor: i5 } = this.parameters, s4 = e6[3] >= o9 || t5 >= o9 && i5[3] >= o9;
    return this._visible && s4;
  }
  createGLMaterial(e6) {
    return new pe(e6);
  }
  calculateRelativeScreenBounds(e6, t5, i5 = u()) {
    return he(this.parameters, e6, t5, i5), i5[2] = i5[0] + e6[0], i5[3] = i5[1] + e6[1], i5;
  }
};
var pe = class extends u5 {
  constructor(e6) {
    super({ ...e6, ...e6.material.parameters });
  }
  beginSlot(e6) {
    return this.updateTexture(this._material.parameters.textureId), this._material.setParameters(this.textureBindParameters), this.getTechnique(h3, e6);
  }
};
function he(e6, t5, i5, s4) {
  s4[0] = e6.anchorPosition[0] * -t5[0] + e6.screenOffset[0] * i5, s4[1] = e6.anchorPosition[1] * -t5[1] + e6.screenOffset[1] * i5;
}
function me(e6, t5, s4, r8) {
  return t3(t5) && (t5 = n4(xe, t5)), N(r8.normal, e6, t5), E(r8.normal, r8.normal, s4.viewInverseTransposeMatrix), r8.cosAngle = P(ve, ze), r8;
}
function de(e6) {
  const t5 = e6[0], i5 = e6[1], s4 = e6[2], r8 = e6[3], a2 = e6[4], n9 = e6[5], o11 = e6[6], l = e6[7], c3 = e6[8], f4 = 1 / Math.sqrt(t5 * t5 + i5 * i5 + s4 * s4), u6 = 1 / Math.sqrt(r8 * r8 + a2 * a2 + n9 * n9), p4 = 1 / Math.sqrt(o11 * o11 + l * l + c3 * c3);
  return e6[0] = t5 * f4, e6[1] = i5 * f4, e6[2] = s4 * f4, e6[3] = r8 * u6, e6[4] = a2 * u6, e6[5] = n9 * u6, e6[6] = o11 * p4, e6[7] = l * p4, e6[8] = c3 * p4, e6;
}
function ge(e6, i5, s4, r8, a2, l, c3, f4, u6) {
  let p4 = i5 - a2 - r8[0] * u6[0], h4 = p4 + r8[0] + 2 * a2, m2 = s4 - a2 - r8[1] * u6[1], d3 = m2 + r8[1] + 2 * a2;
  const g5 = f4.distanceFieldBoundingBox;
  return f4.textureIsSignedDistanceField && null != g5 && (p4 += r8[0] * g5[0], m2 += r8[1] * g5[1], h4 -= r8[0] * (1 - g5[2]), d3 -= r8[1] * (1 - g5[3]), p4 -= l, h4 += l, m2 -= l, d3 += l), o2(Re, i5, s4), I(Ee, e6, Re, s(c3)), Ee[0] > p4 && Ee[0] < h4 && Ee[1] > m2 && Ee[1] < d3;
}
var Oe = new t4();
var Se = n();
var Te = n();
var be = n2();
var ve = n();
var Ae = n();
var Ee = n3();
var Re = n3();
var Ie = e3();
var xe = e3();
var Fe = e2();
var Pe = n2();
var _e = n();
var Ce = n();
var ye = n2();
var De = { normal: ve, cosAngle: 0 };
var Le = 1;
var Ne = 2;
var je = r5(0, 0);
var Ue = 6;
var ze = r3(0, 0, 1);
var Me = class extends o5 {
  constructor() {
    super(...arguments), this.renderOccluded = o7.Occlude, this.isDecoration = false, this.color = e(1, 1, 1, 1), this.polygonOffset = false, this.anchorPosition = r5(0.5, 0.5), this.screenOffset = [0, 0], this.shaderPolygonOffset = 1e-5, this.textureIsSignedDistanceField = false, this.sampleSignedDistanceFieldTexelCenter = false, this.outlineColor = e(1, 1, 1, 1), this.outlineSize = 0, this.distanceFieldBoundingBox = n2(), this.rotation = 0, this.hasRotation = false, this.vvSizeEnabled = false, this.vvSize = null, this.vvColor = null, this.vvOpacity = null, this.vvSymbolAnchor = null, this.vvSymbolRotationMatrix = null, this.hasSlicePlane = false, this.pixelSnappingEnabled = true, this.occlusionTest = true, this.occludedFragmentFade = false, this.horizonCullingEnabled = false, this.centerOffsetUnits = "world", this.drawAsLabel = false, this.depthEnabled = true, this.isFocused = true, this.focusStyle = "bright", this.draped = false, this.isLabel = false;
  }
};
var we = O().vec3f(e4.POSITION).vec3f(e4.NORMAL).vec2i16(e4.UVI).vec4u8(e4.COLOR).vec2f(e4.SIZE).f32(e4.ROTATION).vec4f(e4.CENTEROFFSETANDDISTANCE).vec4f(e4.FEATUREATTRIBUTE);
var Be = we.clone().vec4u8(e4.OLIDCOLOR);
var Ve = class {
  constructor() {
    this.vertexBufferLayout = e5() ? Be : we;
  }
  elementCount(e6) {
    return e6.get(e4.POSITION).indices.length * Ue;
  }
  write(e6, t5, i5, s4, r8, a2) {
    const { position: n9, normal: o11, uvi: l, color: c3, size: f4, rotation: u6, centerOffsetAndDistance: p4, featureAttribute: h4 } = r8;
    R3(i5.get(e4.POSITION), e6, n9, a2, Ue), S(i5.get(e4.NORMAL), t5, o11, a2, Ue);
    const m2 = i5.get(e4.UVI)?.data;
    let d3 = 0, g5 = 0, O2 = -1 - V, S2 = -1 - V;
    m2 && m2.length >= 4 && (d3 = m2[0], g5 = m2[1], O2 = -1 - m2[2], S2 = -1 - m2[3]);
    let T2 = i5.get(e4.POSITION).indices.length, b2 = a2;
    for (let E2 = 0; E2 < T2; ++E2) l.set(b2, 0, d3), l.set(b2, 1, g5), b2++, l.set(b2, 0, O2), l.set(b2, 1, g5), b2++, l.set(b2, 0, O2), l.set(b2, 1, S2), b2++, l.set(b2, 0, O2), l.set(b2, 1, S2), b2++, l.set(b2, 0, d3), l.set(b2, 1, S2), b2++, l.set(b2, 0, d3), l.set(b2, 1, g5), b2++;
    N2(i5.get(e4.COLOR), 4, c3, a2, Ue);
    const { data: v, indices: A3 } = i5.get(e4.SIZE);
    T2 = A3.length, b2 = a2;
    for (let E2 = 0; E2 < T2; ++E2) {
      const e7 = v[2 * A3[E2]], t6 = v[2 * A3[E2] + 1];
      for (let i6 = 0; i6 < Ue; ++i6) f4.set(b2, 0, e7), f4.set(b2, 1, t6), b2++;
    }
    if (b(i5.get(e4.ROTATION), u6, a2, Ue), i5.get(e4.CENTEROFFSETANDDISTANCE) ? h2(i5.get(e4.CENTEROFFSETANDDISTANCE), p4, a2, Ue) : F2(p4, a2, T2 * Ue), i5.get(e4.FEATUREATTRIBUTE) ? h2(i5.get(e4.FEATUREATTRIBUTE), h4, a2, Ue) : F2(h4, a2, T2 * Ue), null != s4) {
      const e7 = i5.get(e4.POSITION)?.indices;
      if (e7) {
        const t6 = e7.length, i6 = r8.getField(e4.OLIDCOLOR, g2);
        L(s4, i6, t6, a2, Ue);
      }
    }
    return { numVerticesPerItem: Ue, numItems: T2 };
  }
  intersect(e6, t5, i5, s4, a2, n9, o11) {
    const { options: { selectionMode: l, hud: c3, excludeLabels: T2 }, point: b2, camera: v } = s4;
    if (!l || !c3 || T2 && t5.isLabel || !b2) return;
    const E2 = this.vertexBufferLayout.createView(e6), R4 = E2.getField(e4.POSITION, o3), I2 = E2.getField(e4.NORMAL, o3), x = E2.getField(e4.ROTATION, f), F3 = E2.getField(e4.SIZE, y), P2 = E2.getField(e4.FEATUREATTRIBUTE, T), _2 = E2.getField(e4.CENTEROFFSETANDDISTANCE, T), N3 = "screen" === t5.centerOffsetUnits, j = M(t5);
    if (null == R4 || null == I2 || null == x || null == F3 || null == _2 || null == v) return;
    const U = null == P2 ? null : P2.getVec(0, ye), { scaleX: z, scaleY: M2 } = Xe(U, t5, v.pixelRatio), w2 = R4.count / Ue;
    for (let C2 = 0; C2 < w2; C2++) {
      const e7 = C2 * Ue;
      if (R4.getVec(e7, Se), null != i5 && u3(Se, Se, i5), E(Se, Se, v.viewMatrix), _2.getVec(e7, Pe), o(_e, Pe[0], Pe[1], Pe[2]), !N3 && (Se[0] += _e[0], Se[1] += _e[1], 0 !== _e[2])) {
        const e8 = _e[2];
        A(_e, Se), c(Se, Se, g(_e, _e, e8));
      }
      if (I2.getVec(e7, Te), me(Te, Ie, v, De), qe(t5, Se, De, v, Oe), v.applyProjection(Se, be), be[0] > -1) {
        N3 && (_e[0] || _e[1]) && (be[0] += _e[0] * v.pixelRatio, 0 !== _e[1] && (be[1] += m(_e[1], Oe.factorAlignment) * v.pixelRatio), v.unapplyProjection(be, Se)), be[0] += t5.screenOffset[0] * v.pixelRatio, be[1] += t5.screenOffset[1] * v.pixelRatio, be[0] = Math.floor(be[0]), be[1] = Math.floor(be[1]), F3.getVec(e7, je), p2(je, Oe.factor, je);
        const i6 = Le * v.pixelRatio;
        let a3 = 0;
        if (t5.textureIsSignedDistanceField) {
          a3 = Math.min(t5.outlineSize, 0.5 * je[0]) * v.pixelRatio / 2;
        }
        je[0] *= z, je[1] *= M2;
        const n10 = x.get(e7), l2 = t5.rotation + n10;
        if (ge(b2, be[0], be[1], je, i6, a3, l2, t5, j)) {
          const e8 = s4.ray;
          if (E(Ae, Se, h(Fe, v.viewMatrix)), be[0] = b2[0], be[1] = b2[1], v.unprojectFromRenderScreen(be, Se)) {
            const t6 = n();
            s2(t6, e8.direction);
            const i7 = 1 / r4(t6);
            g(t6, t6, i7);
            o11(p(e8.origin, Se) * i7, t6, C2, Ae);
          }
        }
      }
    }
  }
};
function Xe(e6, t5, i5) {
  return null == e6 || null == t5.vvSize ? { scaleX: i5, scaleY: i5 } : (oe(Ce, t5, e6), { scaleX: Ce[0] * i5, scaleY: Ce[1] * i5 });
}
function qe(e6, t5, i5, s4, r8) {
  if (!e6.verticalOffset?.screenLength) {
    if (e6.screenSizePerspective || e6.screenSizePerspectiveAlignment) {
      Ge(e6, r8, r4(t5), i5.cosAngle);
    } else r8.factor.scale = 1, r8.factorAlignment.scale = 1;
    return t5;
  }
  const a2 = r4(t5), n9 = e6.screenSizePerspectiveAlignment ?? e6.screenSizePerspective, o11 = i2(s4, a2, e6.verticalOffset, i5.cosAngle, n9);
  return Ge(e6, r8, a2, i5.cosAngle), g(i5.normal, i5.normal, o11), u3(t5, t5, i5.normal);
}
function Ge(e6, t5, i5, s4) {
  null != e6.screenSizePerspective ? d(s4, i5, e6.screenSizePerspective, t5.factor) : (t5.factor.scale = 1, t5.factor.factor = 0, t5.factor.minScaleFactor = 0), null != e6.screenSizePerspectiveAlignment ? d(s4, i5, e6.screenSizePerspectiveAlignment, t5.factorAlignment) : (t5.factorAlignment.factor = t5.factor.factor, t5.factorAlignment.scale = t5.factor.scale, t5.factorAlignment.minScaleFactor = t5.factor.minScaleFactor);
}

// node_modules/@arcgis/core/geometry/projection/projectVectorToPoint.js
function o10(r8, t5, o11) {
  return !!n5(r8, t5, i4, o11.spatialReference) && (o11.x = i4[0], o11.y = i4[1], o11.z = i4[2], true);
}
var i4 = n();

export {
  ue,
  o10 as o
};
//# sourceMappingURL=chunk-4PEDH45I.js.map
