import {
  a,
  o,
  r as r2
} from "./chunk-AQGMTI4V.js";
import {
  B,
  r
} from "./chunk-OXSERRAR.js";

// node_modules/@arcgis/core/arcade/geometry/extendedUnitData.js
var e = /* @__PURE__ */ new Map([[1025, 109452], [1033, 109451], [9001, 109404], [9002, 109405], [9003, 109406], [9005, 109407], [9014, 109408], [9030, 109409], [9031, 109410], [9033, 109411], [9034, 109412], [9035, 109413], [9036, 109414], [9037, 109415], [9038, 109416], [9039, 109417], [9040, 109418], [9041, 109419], [9042, 109420], [9043, 109421], [9050, 109422], [9051, 109423], [9052, 109424], [9053, 109425], [9060, 109426], [9061, 109427], [9062, 109428], [9063, 109429], [9070, 109430], [9080, 109431], [9081, 109432], [9082, 109433], [9083, 109434], [9084, 109435], [9085, 109436], [9086, 109437], [9087, 109438], [9093, 109439], [9094, 109440], [9095, 109441], [9096, 109442], [9097, 109444], [9098, 109445], [9099, 109446], [9300, 109447], [9301, 109448], [9302, 109449], [109001, 109442], [109002, 109443], [109003, 109444], [109004, 109445], [109005, 109450], [109006, 109451], [109007, 109452], [109008, 109453], [109009, 109454], [109010, 109455], [109011, 109456], [109012, 109457], [109013, 109458], [109014, 109459], [109015, 109462], [109016, 109464], [109017, 109465], [109018, 109466], [109030, 109460], [109031, 109461]]);
function n(e3) {
  return (n3, a3) => [n3, { type: e3, wkid: n3, factor: a3 }];
}
var a2 = n("angular");
var t = new Map([a2(1031, 484813681109536e-23), a2(9101, 1), a2(9102, 0.017453292519943295), a2(9103, 2908882086657216e-19), a2(9104, 484813681109536e-20), a2(9105, 0.015707963267948967), a2(9106, 0.015707963267948967), a2(9109, 1e-6), a2(9112, 15707963267948965e-20), a2(9113, 15707963267948967e-22), a2(9114, 9817477042468104e-19)]);
var r3 = n("linear");
var p = new Map([r3(1025, 1e-3), r3(1033, 0.01), r3(9001, 1), r3(9002, 0.3048), r3(9003, 0.30480060960121924), r3(9005, 0.3047972654), r3(9014, 1.8288), r3(9030, 1852), r3(9031, 1.0000135965), r3(9033, 20.11684023368047), r3(9034, 0.2011684023368047), r3(9035, 1609.3472186944375), r3(9036, 1e3), r3(9037, 0.9143917962), r3(9038, 20.1166195164), r3(9039, 0.201166195164), r3(9040, 0.9143984146160287), r3(9041, 0.3047994715386762), r3(9042, 20.116765121552632), r3(9043, 0.2011676512155263), r3(9050, 0.9143992), r3(9051, 0.3047997333333333), r3(9052, 20.1167824), r3(9053, 0.201167824), r3(9060, 0.9143992042898124), r3(9061, 0.30479973476327077), r3(9062, 20.116782494375872), r3(9063, 0.2011678249437587), r3(9070, 0.30480083333333335), r3(9080, 0.30479951024814694), r3(9081, 0.30479841), r3(9082, 0.3047996), r3(9083, 0.3047995), r3(9084, 0.9143985307444408), r3(9085, 0.91439523), r3(9086, 0.9143988), r3(9087, 0.9143985), r3(9093, 1609.344), r3(9094, 0.3047997101815088), r3(9095, 0.3048007491), r3(9096, 0.9144), r3(9097, 20.1168), r3(9098, 0.201168), r3(9099, 0.914398), r3(9300, 0.30479933333333337), r3(9301, 20.116756), r3(9302, 0.20116756), r3(109001, 0.9144), r3(109002, 0.9144018288036576), r3(109003, 20.1168), r3(109004, 0.201168), r3(109005, 0.1), r3(109006, 0.01), r3(109007, 1e-3), r3(109008, 0.0254), r3(109009, 0.025400050800101603), r3(109010, 5.0292), r3(109011, 5.029210058420118), r3(109012, 1853.248), r3(109013, 1853.184), r3(109014, 1.7018), r3(109015, 0.8466683600033867), r3(109016, 35277777777777776e-20), r3(109017, 1e-6), r3(109018, 1e-9), r3(109030, 5e4), r3(109031, 15e4)]);
var o2 = p.get(9001);
var w = n("area");
var c = new Map([w(109401, 1e4), w(109402, 4046.8564224), w(109403, 4046.872609874252), w(109404, 1), w(109405, 0.09290304), w(109406, 0.09290341161327487), w(109407, 0.09290137299531805), w(109408, 3.34450944), w(109409, 3429904), w(109410, 1.000027193184865), w(109411, 404.6872609874253), w(109412, 0.04046872609874252), w(109413, 2589998470319522e-9), w(109414, 1e6), w(109415, 0.8361123569578626), w(109416, 404.6783807676053), w(109417, 0.04046783807676053), w(109418, 0.8361244606523066), w(109419, 0.09290271785025629), w(109420, 404.6842389557165), w(109421, 0.04046842389557164), w(109422, 0.83612589696064), w(109423, 0.0929028774400711), w(109424, 404.6849341289498), w(109425, 0.04046849341289498), w(109426, 0.836125904805842), w(109427, 0.09290287831176021), w(109428, 404.6849379260275), w(109429, 0.04046849379260275), w(109430, 0.09290354800069446), w(109431, 0.09290274144751023), w(109432, 0.09290207073852812), w(109433, 0.09290279616016), w(109434, 0.09290273520025), w(109435, 0.836124673027592), w(109436, 0.8361186366467529), w(109437, 0.8361251654414399), w(109438, 0.83612461680225), w(109439, 2589988110336e-6), w(109440, 0.09290286332673177), w(109441, 0.09290349665192114), w(109442, 0.83612736), w(109443, 0.8361307045194736), w(109444, 404.68564224), w(109445, 0.040468564224), w(109446, 0.836123702404), w(109447, 0.09290263360044447), w(109448, 404.683871963536), w(109449, 0.0404683871963536), w(109450, 0.01), w(109451, 1e-4), w(109452, 1e-6), w(109453, 64516e-8), w(109454, 6451625806477421e-19), w(109455, 25.29285264), w(109456, 25.29295381171408), w(109457, 3434528149504e-6), w(109458, 3434290937856e-6), w(109459, 2.89612324), w(109460, 25e8), w(109461, 225e8), w(109462, 0.7168473118308245), w(109463, 100), w(109464, 1244521604938271e-22), w(109465, 1e-12), w(109466, 1e-18)]);
var M = c.get(109404);

// node_modules/@arcgis/core/arcade/geometry/wkt.js
var t2 = [];
function e2(t3) {
  return 0 === t3.length ? '""' : '"' === t3[0] || "." === t3[0] || t3[0] >= "0" && t3[0] <= "9" ? t3 : '"' + t3.trim() + '"';
}
function n2(t3) {
  let n3 = "", r5 = "", u2 = false;
  for (let l2 = 0; l2 < t3.length; l2++) {
    const s = t3[l2];
    u2 ? '"' === s ? '"' === t3[l2 + 1] ? (n3 += `\\${s}`, l2 += 1) : u2 = false : n3 += s : /\s/.test(s) || ("," === s ? (r5 += "" !== n3 ? e2(n3) + "," : ",", n3 = "") : ")" === s || "]" === s ? (r5 += "" !== n3 ? e2(n3) + "]}" : "]}", n3 = "") : "(" === s || "[" === s ? (r5 += '{ "entity": "' + n3.toUpperCase().trim() + '", "values":[', n3 = "") : '"' === s ? (u2 = true, n3 = "") : n3 += s);
  }
  return JSON.parse(r5);
}
function r4(e3) {
  try {
    for (let n3 = 0; n3 < t2.length; n3++) if (t2[n3].spatialReferenceWkt === e3) return t2[n3].unit;
    const r5 = l(n2(e3));
    if (null === r5) return null;
    let s = null;
    for (const t3 of r5.values) if ("object" == typeof t3 && ("UNIT" === t3.entity || "ANGLEUNIT" === t3.entity || "LENGTHUNIT" === t3.entity)) {
      s = t3;
      break;
    }
    if (null === s) return null;
    const i = u("GEOGCS" === r5.entity || "GEOGCRS" === r5.entity ? "angular" : "linear", s.values[1], s.values[2]);
    return t2.push({ spatialReferenceWkt: e3, unit: i }), t2.length > 10 && t2.shift(), i;
  } catch (r5) {
    return null;
  }
}
function u(t3, e3, n3) {
  if (null != n3) try {
    if ("EPSG" === n3.values[0]) {
      return { type: t3, wkid: Number.parseInt(n3.values[1], 10), factor: e3 };
    }
  } catch (r5) {
  }
  return { type: t3, factor: e3 };
}
function l(t3) {
  if (null === t3) return null;
  switch (t3.entity) {
    case "GEOGCRS":
    case "GEOGCS":
    case "PROJCRS":
    case "PROJCS":
      return t3;
  }
  const e3 = [];
  for (const n3 of t3.values) if ("object" == typeof n3 && void 0 !== n3.entity) switch (n3.entity) {
    case "GEOGCRS":
    case "GEOGCS":
    case "PROJCRS":
    case "PROJCS":
      return n3;
    default:
      e3.push(n3);
  }
  for (const n3 of e3) {
    const t4 = l(n3);
    if (null != t4) return t4;
  }
  return null;
}

// node_modules/@arcgis/core/arcade/geometry/unitConversion.js
var o3 = -1;
function m(e3, r5) {
  let a3;
  switch (e3) {
    case "linear":
      a3 = p;
      break;
    case "angular":
      a3 = t;
      break;
    case "area":
      a3 = c;
      break;
    default:
      return null;
  }
  return a3.get(r5);
}
function f(e3) {
  const r5 = e3.wkid;
  if (null != r5) {
    const e4 = r.units[r[r5]];
    if (null != e4) switch (e4) {
      case "Meter":
        return m("linear", 9001);
      case "Foot":
        return m("linear", 9002);
      case "Foot_US":
        return m("linear", 9003);
      case "Foot_Clarke":
        return m("linear", 9005);
      case "Yard_Clarke":
        return m("linear", 9037);
      case "Link_Clarke":
        return m("linear", 9039);
      case "Yard_Sears":
        return m("linear", 9040);
      case "Foot_Sears":
        return m("linear", 9041);
      case "Chain_Sears":
        return m("linear", 9042);
      case "Chain_Benoit_1895_B":
        return m("linear", 9062);
      case "Yard_Indian":
        return m("linear", 9084);
      case "Yard_Indian_1937":
        return m("linear", 9085);
      case "Foot_Gold_Coast":
        return m("linear", 9094);
      case "Chain":
        return m("linear", 9097);
      case "Chain_Sears_1922_Truncated":
        return m("linear", 9301);
      case "50_Kilometers":
        return m("linear", 109030);
      case "150_Kilometers":
        return m("linear", 109031);
      default:
        throw new Error(`Unknown unit name: ${e4}`);
    }
    return B.has(r5) ? m("angular", 9105) : m("angular", 9102);
  }
  const a3 = e3.wkt2 || e3.wkt;
  if (null != a3) {
    const e4 = r4(a3);
    if (null != e4) {
      if (null != e4.wkid) {
        const r6 = m(e4.type, e4.wkid);
        if (null != r6) return r6;
      }
      return { type: e4.type, wkid: o3, factor: e4.factor };
    }
  }
  return null;
}
function q(e3) {
  if ("linear" !== e3.type) return null;
  if (e3.wkid === o3) return { type: "area", wkid: o3, factor: e3.factor ** 2 };
  const r5 = e.get(e3.wkid);
  return null == r5 ? null : m("area", r5);
}
function d(c2) {
  if (null != c2) {
    if ("number" == typeof c2) return c.get(c2) ?? p.get(c2) ?? t.get(c2);
    if ("string" != typeof c2) throw new a(null, r2.InvalidParameter, null);
    switch (o(c2)) {
      case "meters":
      case "meter":
      case "m":
      case "squaremeters":
      case "squaremeter":
        return c.get(109404);
      case "miles":
      case "mile":
      case "squaremile":
      case "squaremiles":
        return c.get(109439);
      case "kilometers":
      case "kilometer":
      case "squarekilometers":
      case "squarekilometer":
      case "km":
        return c.get(109414);
      case "acres":
      case "acre":
      case "ac":
        return c.get(109402);
      case "hectares":
      case "hectare":
      case "ha":
        return c.get(109401);
      case "yard":
      case "yd":
      case "yards":
      case "squareyards":
      case "squareyard":
        return c.get(109442);
      case "feet":
      case "ft":
      case "foot":
      case "squarefeet":
      case "squarefoot":
        return c.get(109405);
      case "nmi":
      case "nauticalmile":
      case "nauticalmiles":
      case "squarenauticalmile":
      case "squarenauticalmiles":
        return c.get(109409);
      case "millimeter":
      case "millimeters":
      case "squaremillimeter":
      case "squaremillimeters":
        return c.get(109452);
      case "centimeter":
      case "centimeters":
      case "squarecentimeter":
      case "squarecentimeters":
        return c.get(109451);
      case "decimeter":
      case "decimeters":
      case "squaredecimeter":
      case "squaredecimeters":
        return c.get(109450);
      case "inch":
      case "inches":
      case "squareinch":
      case "squareinches":
        return c.get(109453);
      case "usfoot":
      case "usfeet":
      case "squareusfoot":
      case "squareusfeet":
        return c.get(109406);
      case "usmile":
      case "usmiles":
      case "squareusmile":
      case "squareusmiles":
        return c.get(109413);
    }
  }
}
function g(c2) {
  if (null != c2) {
    if ("number" == typeof c2) return p.get(c2) ?? t.get(c2) ?? c.get(c2);
    if ("string" != typeof c2) throw new a(null, r2.InvalidParameter, null);
    switch (o(c2)) {
      case "meters":
      case "meter":
      case "m":
      case "squaremeters":
      case "squaremeter":
      case "hectares":
      case "hectare":
      case "ha":
        return p.get(9001);
      case "miles":
      case "mile":
      case "squaremile":
      case "squaremiles":
        return p.get(9093);
      case "kilometers":
      case "kilometer":
      case "squarekilometers":
      case "squarekilometer":
      case "km":
        return p.get(9036);
      case "yard":
      case "yd":
      case "yards":
      case "squareyards":
      case "squareyard":
      case "acres":
      case "acre":
      case "ac":
        return p.get(9096);
      case "feet":
      case "ft":
      case "foot":
      case "squarefeet":
      case "squarefoot":
        return p.get(9002);
      case "nmi":
      case "nauticalmile":
      case "nauticalmiles":
      case "squarenauticalmile":
      case "squarenauticalmiles":
        return p.get(9030);
      case "millimeter":
      case "millimeters":
      case "squaremillimeter":
      case "squaremillimeters":
        return p.get(109007);
      case "centimeter":
      case "centimeters":
      case "squarecentimeter":
      case "squarecentimeters":
        return p.get(109006);
      case "decimeter":
      case "decimeters":
      case "squaredecimeter":
      case "squaredecimeters":
        return p.get(109005);
      case "inch":
      case "inches":
      case "squareinch":
      case "squareinches":
        return p.get(109008);
      case "usfoot":
      case "usfeet":
      case "squareusfoot":
      case "squareusfeet":
        return p.get(9003);
      case "usmile":
      case "usmiles":
      case "squareusmile":
      case "squareusmiles":
        return p.get(9035);
    }
  }
}
function p2(e3, r5, a3) {
  if (e3.type !== r5.type) throw new Error(`Incompatible unit types. src=${e3.type} dest=${r5.type}`);
  return a3 * (e3.factor / r5.factor);
}
function w2(e3, r5, a3) {
  if (null == e3 || null == r5) return a3;
  const s = f(e3);
  if (null == s) throw new Error("Unknown spatial reference unit.");
  const t3 = "area" === r5.type && "linear" === s.type ? q(s) : s;
  if (null == t3) throw new Error(`Unknown spatial reference ${r5.type} unit.`);
  return p2(t3, r5, a3);
}
function h(e3, r5, a3) {
  if (null == e3 || null == r5) return a3;
  const s = f(r5);
  if (null == s) throw new Error("Unknown spatial reference unit.");
  const t3 = "area" === e3.type && "linear" === s.type ? q(s) : s;
  if (null == t3) throw new Error(`Unknown spatial reference ${e3.type} unit.`);
  return p2(e3, t3, a3);
}
function k(e3, r5, a3) {
  return null == e3 || null == r5 ? a3 : p2(e3, r5, a3);
}

export {
  o2 as o,
  M,
  f,
  d,
  g,
  w2 as w,
  h,
  k
};
//# sourceMappingURL=chunk-5J6W3WOM.js.map
