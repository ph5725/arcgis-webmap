import {
  m as m2
} from "./chunk-6TS2ZJL4.js";
import {
  l
} from "./chunk-E3KEUGUG.js";
import {
  m
} from "./chunk-N3XLUQJI.js";
import {
  a2
} from "./chunk-JUAD7TJ6.js";
import {
  _
} from "./chunk-VHLUKPRH.js";
import {
  r
} from "./chunk-5TPMG26T.js";
import {
  a
} from "./chunk-GWNLQRNM.js";
import {
  L
} from "./chunk-FXKORAMT.js";

// node_modules/@arcgis/core/layers/support/rasterFieldUtils.js
var n = "Raster.";
var a3 = "Raster.Dim.";
var i = ".Max";
var t = { servicePixelValue: "Raster.ServicePixelValue", rawServicePixelValue: "Raster.ServicePixelValue.Raw", itemPixelValue: "Raster.ItemPixelValue", magnitude: "Raster.Magnitude", direction: "Raster.Direction", variable: "Raster.Variable" };
var r2 = /* @__PURE__ */ new Map([["quarters", "Quarter"], ["months", "Month"], ["weeks", "Week of the year"], ["days", "Day of the year"]]);
function l2(n2, a6) {
  return new m2({ name: n2, alias: a6, domain: null, editable: false, length: 50, type: "string" });
}
function s(n2, a6) {
  return new m2({ name: n2, alias: a6, domain: null, editable: false, type: "double" });
}
function u(n2, a6) {
  return new m2({ name: n2, alias: a6, domain: null, editable: false, type: "date" });
}
function o(e) {
  return l2(t.servicePixelValue, e ?? "Service Pixel Value");
}
function c(e) {
  return l2(t.rawServicePixelValue, e ?? "Raw Service Pixel Value");
}
function m3() {
  return l2(t.itemPixelValue, "Item Pixel Value");
}
function f(e) {
  return l2(`${t.servicePixelValue}.${e}`, e);
}
function d(e) {
  return s(`${t.magnitude}`, "Magnitude" + (e ? ` (${e})` : ""));
}
function $() {
  return s(`${t.direction}`, "Direction (Â°)");
}
function v(e) {
  return e.fields.filter((e2) => "oid" !== e2.type && "value" !== e2.name.toLowerCase()).map((e2) => {
    const a6 = e2.clone();
    return a6.name = `${n}${e2.name}`, a6;
  });
}
function p(e) {
  const n2 = /* @__PURE__ */ new Set(), r4 = /* @__PURE__ */ new Set(), o3 = /* @__PURE__ */ new Map();
  e.variables.forEach(({ dimensions: e2 }) => {
    e2.forEach((e3) => {
      if (e3.recurring) o3.set(e3.name, e3.unit);
      else {
        const a6 = "ISO8601" === e3.unit?.trim() ? n2 : r4;
        a6.add(e3.name), e3.hasRanges && a6.add(`${e3.name}${i}`);
      }
    });
  });
  return [l2(t.variable, "Variable"), ...[...n2].map((e2) => u(`${a3}${e2}`, x(e2))), ...[...r4].map((e2) => s(`${a3}${e2}`, x(e2))), ...[...o3].map(([e2, n3]) => s(`${a3}${e2}`, h(e2, n3)))];
}
function h(e, n2) {
  return n2 = n2?.toLowerCase(), n2 && r2.has(n2) ? r2.get(n2) : x(e);
}
function x(e) {
  const n2 = e.endsWith(i), a6 = n2 ? e.slice(0, -4) : e, t3 = "StdTime" === a6 ? "Standard Time" : "StdZ" === a6 ? "Standard Z" : a6;
  return n2 ? `${t3} Max` : t3;
}
function w(e, n2) {
  return n2 ? new Date(e) : e;
}
function V(e, n2, r4) {
  r4?.length && (n2[t.variable] = r4[0].variableName, r4.forEach(({ dimensionName: t3, values: r5 }) => {
    if (t3 && r5?.length) {
      const l4 = `${a3}${t3}`, s3 = e.find(({ name: e2 }) => e2 === l4);
      if (!s3) return;
      const u3 = "date" === s3.type, o3 = r5[0];
      if (Array.isArray(o3)) {
        if (n2[`${a3}${t3}`] = w(o3[0], u3), null != o3[1]) {
          const r6 = `${a3}${t3}${i}`;
          if (e.some(({ name: e2 }) => e2 === r6)) {
            const e2 = w(o3[1], u3);
            n2[r6] = e2;
          }
        }
      } else n2[`${a3}${t3}`] = w(o3, u3);
    }
  }));
}
function b(e, n2) {
  if (n2.pixelType.startsWith("f") && e.forEach(({ format: e2, fieldName: n3 }) => {
    e2 && n3 && /^raster\.(item|service)pixelvalue/i.test(n3) && (e2.places = 2);
  }), n2.multidimensionalInfo) {
    const t3 = n2.multidimensionalInfo.variables.flatMap(({ dimensions: e2 }) => e2);
    e.forEach(({ format: e2, fieldName: n3 }) => {
      if (e2 && n3?.startsWith(a3)) {
        const r4 = n3.slice(a3.length), l4 = `${r4}${i}`, s3 = t3.find(({ name: e3 }) => e3 === r4 || e3 === l4);
        s3?.values?.every((e3) => Number.isInteger(e3)) && (e2.places = 0);
      }
    });
  }
}

// node_modules/@arcgis/core/layers/support/DimensionalDefinition.js
var a4;
var p2 = a4 = class extends l {
  constructor(e) {
    super(e), this.variableName = null, this.dimensionName = null, this.values = [], this.isSlice = false;
  }
  clone() {
    return new a4({ variableName: this.variableName, dimensionName: this.dimensionName, values: a(this.values), isSlice: this.isSlice });
  }
};
r([m({ type: String, json: { write: true } })], p2.prototype, "variableName", void 0), r([m({ type: String, json: { write: true } })], p2.prototype, "dimensionName", void 0), r([m({ type: _.array(_.oneOf([_.native(Number), _.array(_.native(Number))])), json: { write: true } })], p2.prototype, "values", void 0), r([m({ type: Boolean, json: { write: true } })], p2.prototype, "isSlice", void 0), p2 = a4 = r([a2("esri.layers.support.DimensionalDefinition")], p2);

// node_modules/@arcgis/core/layers/support/rasterDatasets/multidimensionalUtils.js
function t2(e, n2, i3) {
  const a6 = n2.shift();
  if (0 === i3.length) {
    const e2 = [];
    i3.push({ sliceId: -1, multidimensionalDefinition: e2 });
  }
  const s3 = i3.length;
  for (let t3 = 0; t3 < s3; t3++) {
    const n3 = i3.shift().multidimensionalDefinition;
    a6.values?.forEach((t4) => {
      i3.push({ sliceId: -1, multidimensionalDefinition: [...n3, { variableName: e, dimensionName: a6.name, values: [t4] }] });
    });
  }
  n2.length && t2(e, n2, i3);
}
function i2(e, n2) {
  const i3 = [];
  let a6 = 0;
  return (n2 ? e.variables.filter((e2) => e2.name.toLowerCase() === n2.toLowerCase()) : [...e.variables].sort((e2, n3) => e2.name > n3.name ? 1 : -1)).forEach((e2) => {
    const n3 = [], s3 = [...e2.dimensions].sort((e3, n4) => e3.name > n4.name ? -1 : 1);
    t2(e2.name, s3, n3), n3.forEach((e3) => {
      i3.push({ ...e3, sliceId: a6++ });
    });
  }), i3;
}
function a5(e, n2, t3) {
  let i3 = e;
  if (n2 && (n2 = [...n2].sort((e2, n3) => e2.dimensionName < n3.dimensionName ? -1 : 1)).forEach(({ dimensionName: e2, values: n3, isSlice: t4 }) => {
    n3.length && (i3 = i3.filter((i4) => {
      const a6 = i4.multidimensionalDefinition.find((n4) => n4.dimensionName === e2);
      if (null == a6) return false;
      const s3 = a6.values[0];
      return "number" == typeof s3 ? "number" == typeof n3[0] ? n3.includes(s3) : n3.some((e3) => e3[0] <= s3 && e3[1] >= s3) : "number" == typeof n3[0] ? n3.some((e3) => s3[0] <= e3 && s3[1] >= e3) : t4 ? n3.some((e3) => e3[0] === s3[0] && e3[0] === s3[1]) : n3.some((e3) => e3[0] >= s3[0] && e3[0] <= s3[1] || e3[1] >= s3[0] && e3[1] <= s3[1] || e3[0] < s3[0] && e3[1] > s3[1]);
    }));
  }), i3.length && null != t3?.start && null != t3.end) {
    const e2 = t3.start.getTime(), n3 = t3.end.getTime(), a6 = i3[0].multidimensionalDefinition.findIndex((e3) => "StdTime" === e3.dimensionName);
    a6 > -1 && (i3 = i3.filter((t4) => {
      const i4 = t4.multidimensionalDefinition[a6].values[0];
      return e2 <= i4 && n3 >= i4;
    }));
  }
  return i3.map((e2) => e2.sliceId);
}
function s2(e, n2) {
  return Array.isArray(e) ? n2[0] === n2[1] ? e[0] === n2[0] || e[1] === n2[0] : e[0] >= n2[0] && e[0] <= n2[1] && e[1] >= n2[0] && e[1] <= n2[1] : e >= n2[0] && e <= n2[1];
}
function l3(e, n2) {
  return e[0] <= n2[0] && e[1] >= n2[0] || e[0] <= n2[1] && e[1] >= n2[1] || e[0] >= n2[0] && e[1] <= n2[1];
}
function r3(e) {
  return 1 === e.length ? [e[0], e[0]] : [e[0], e[e.length - 1]];
}
function u2(e, n2, t3) {
  if (!n2?.subsetDefinitions?.length) return e;
  let i3;
  if (t3) {
    const { variables: a7 } = n2;
    if (a7.length && !a7.includes(t3)) return null;
    const s3 = n2.subsetDefinitions.find((n3) => n3.dimensionName === e.name && n3.variableName === t3);
    if (!s3?.values?.length) return e;
    i3 = r3(s3.values);
  } else {
    const t4 = n2.dimensions.find(({ name: n3 }) => n3 === e.name);
    i3 = t4?.extent;
  }
  const a6 = i3;
  if (!a6?.length) return e;
  const l4 = e.values.filter((e2) => s2(e2, a6));
  return { ...e, extent: [...a6], values: l4 };
}
function o2(e, n2, t3) {
  if (!n2?.subsetDefinitions?.length) return false;
  const { variables: i3 } = n2;
  if (i3.length && e.some(({ variableName: e2 }) => e2 && !i3.includes(e2))) return true;
  for (let a6 = 0; a6 < e.length; a6++) {
    const i4 = e[a6], u3 = n2.subsetDefinitions.find((e2) => ("" === i4.variableName || e2.variableName === i4.variableName) && e2.dimensionName === i4.dimensionName);
    if (u3?.values.length) {
      const e2 = r3(u3.values);
      if (!i4.isSlice && 2 === i4.values.length && !Array.isArray(i4.values[0]) && i4.values[0] !== i4.values[1] && t3) {
        if (!l3(i4.values, e2)) return true;
      } else if (i4.values.some((n3) => !s2(n3, e2))) return true;
    }
  }
  return false;
}
function m4(e, n2) {
  if (null == e) return { isOutside: false };
  const { geometry: t3, timeExtent: i3, multidimensionalDefinition: a6 } = n2;
  let s3 = null;
  if (null != i3 && (s3 = c2(e, i3), null == s3)) return { isOutside: true };
  const { areaOfInterest: l4 } = e;
  if (l4 && t3) {
    const e2 = "point" === t3.type ? t3 : "extent" === t3.type ? t3.center : "polygon" === t3.type ? t3.centroid : null;
    if (e2 && !l4.contains(e2)) return { isOutside: true };
  }
  return null != a6 && a6.length && o2(a6, e, true) ? { isOutside: true } : { isOutside: false, intersection: { geometry: t3, timeExtent: s3, multidimensionalDefinition: a6 } };
}
function c2(e, t3) {
  const i3 = e.dimensions.find(({ name: e2 }) => "StdTime" === e2);
  if (null == i3 || null == t3.start && null == t3.end) return t3;
  t3 = t3.clone();
  const { start: a6, end: s3 } = t3.toJSON(), l4 = a6 === s3 ? [a6] : null != a6 && null != s3 ? [a6, s3] : [a6 ?? s3];
  if (2 === l4.length && i3?.extent.length && (l4[0] = Math.max(l4[0], i3.extent[0]), l4[1] = Math.min(l4[1], i3.extent[1] ?? i3.extent[0]), l4[1] < l4[0])) return null;
  return o2([new p2({ variableName: "", dimensionName: "StdTime", isSlice: 1 === l4.length, values: l4 })], e, true) ? null : (t3.start = new Date(l4[0]), t3.end = new Date(l4[1] ?? l4[0]), t3);
}
function f2(e) {
  const { rasterInfo: n2, multidimensionalSubset: t3 } = e, { multidimensionalInfo: i3 } = n2;
  if (null == i3) return null;
  let a6 = e.multidimensionalDefinition?.length ? e.multidimensionalDefinition : h2(n2, { multidimensionalSubset: t3 });
  if (!a6?.length) return null;
  if (a6.some((e2) => !e2.dimensionName)) {
    const { variableName: e2 } = a6[0], i4 = h2(n2, { multidimensionalSubset: t3, variableName: e2 });
    i4?.forEach((e3) => {
      const n3 = a6?.find(({ dimensionName: n4 }) => n4 === e3.dimensionName);
      n3?.values?.length && (e3.values = n3.values, e3.isSlice = n3.isSlice);
    }), a6 = i4;
  }
  const { timeExtent: s3 } = e;
  if (null != a6 && null != s3 && (null != s3.start || null != s3.end)) {
    a6 = a6.map((e3) => e3.clone());
    const e2 = i3.variables.find(({ name: e3 }) => e3 === a6[0].variableName)?.dimensions?.find(({ name: e3 }) => "StdTime" === e3), n3 = a6.find(({ dimensionName: e3 }) => "StdTime" === e3);
    if (!e2 || !n3) return null;
    const { start: t4, end: l4 } = s3, r4 = null == t4 ? null : t4.getTime(), u3 = null == l4 ? null : l4.getTime(), o3 = r4 ?? u3, m5 = u3 ?? r4;
    if (null != e2.values) {
      const t5 = e2.values.filter((e3) => {
        if (Array.isArray(e3)) {
          if (o3 === m5) return e3[0] <= o3 && e3[1] >= o3;
          const n4 = e3[0] <= o3 && e3[1] > o3 || e3[0] < m5 && e3[1] >= m5, t6 = e3[0] >= o3 && e3[1] <= m5 || e3[0] < o3 && e3[1] > m5;
          return n4 || t6;
        }
        return o3 === m5 ? e3 === o3 : e3 >= o3 && e3 <= m5;
      });
      if (t5.length) {
        const e3 = t5.sort((e4, n4) => {
          const t6 = Array.isArray(e4) ? e4[0] : e4, i4 = Array.isArray(e4) ? e4[1] : e4, a7 = Array.isArray(n4) ? n4[0] : n4, s4 = Array.isArray(n4) ? n4[1] : n4;
          if (o3 === m5) return t6 - a7;
          return Math.abs(i4 - m5) - Math.abs(s4 - m5);
        })[0];
        n3.values = [e3];
      } else a6 = null;
    } else if (e2.hasRegularIntervals && e2.extent) {
      const [t5, i4] = e2.extent;
      o3 > i4 || m5 < t5 ? a6 = null : n3.values = o3 === m5 ? [o3] : [Math.max(t5, o3), Math.min(i4, m5)];
    }
  }
  return null != a6 && o2(a6, t3) ? null : a6;
}
function d2(e, n2 = {}) {
  const { multidimensionalInfo: t3, keyProperties: i3 } = e;
  if (null == t3) return null;
  const { variableName: a6, multidimensionalSubset: s3, multidimensionalDefinition: l4 } = n2, r4 = null != l4 ? l4[0]?.variableName : null, u3 = a6 || r4 || i3?.DefaultVariable;
  let { variables: o3 } = t3;
  s3?.variables?.length && (o3 = o3.filter(({ name: e2 }) => s3.variables.includes(e2)));
  return u3 ? o3.find(({ name: e2 }) => e2 === u3) ?? o3[0] : o3[0];
}
function h2(e, t3 = {}) {
  const i3 = d2(e, t3);
  if (!i3) return null;
  const a6 = [], { dimensions: s3, name: l4 } = i3;
  if (0 === s3.length) return [new p2({ variableName: l4, dimensionName: "", values: [], isSlice: true })];
  for (let r4 = 0; r4 < s3.length; r4++) {
    const e2 = u2(s3[r4], t3.multidimensionalSubset, l4);
    if (!e2) return null;
    const { values: i4, extent: o3 } = e2;
    let m5 = i4?.[0] ?? o3?.[0];
    "stdz" === e2.name.toLowerCase() && !e2.hasRanges && o3 && Math.abs(o3[1]) <= Math.abs(o3[0]) && (m5 = i4?.length ? i4[i4.length - 1] : o3[1]), a6.push(new p2({ variableName: l4, dimensionName: e2.name, values: [m5], isSlice: !t3.useRangeForRangedDimensionInfo || !!e2.hasRanges }));
  }
  return a6;
}
function g(e) {
  return !!e?.length && e.some((e2) => {
    if (null == e2.values) return true;
    const n2 = e2.values.length;
    return 0 === n2 || n2 > 1 || !e2.isSlice && Array.isArray(e2.values[0]);
  });
}
function v2(n2, t3) {
  if (null == t3 || null == n2) return null;
  let i3 = t3.variables.map((e) => ({ ...e }));
  return n2?.variables?.length && (i3 = i3.filter(({ name: e }) => n2.variables.includes(e)), i3.forEach((t4) => {
    t4.dimensions = t4.dimensions.map((e) => u2(e, n2, t4.name)).filter(L);
  })), i3;
}
function b2(e, n2) {
  const { values: t3 } = n2;
  if (t3?.length) {
    const n3 = Array.isArray(t3[0]), i4 = Array.isArray(e);
    return n3 !== i4 ? -1 : n3 && i4 ? t3.findIndex((n4) => n4[0] === e[0] && n4[1] === e[1]) : t3.indexOf(e);
  }
  const { extent: i3 } = n2;
  if (Array.isArray(e) || !i3 || e < i3[0] || e > i3[1]) return -1;
  const a6 = n2.interval || 1;
  if ("ISO8601" !== n2.unit) return Math.round((e - i3[0]) / a6);
  const s3 = i3[0];
  let l4 = -1;
  switch (n2.intervalUnit?.toLowerCase() || "days") {
    case "seconds":
      l4 = Math.round((e - s3) / 1e3 / a6);
      break;
    case "minutes":
      l4 = Math.round((e - s3) / 6e4 / a6);
      break;
    case "hours":
      l4 = Math.round((e - s3) / 36e5 / a6);
      break;
    case "days":
      l4 = Math.round((e - s3) / 864e5 / a6);
      break;
    case "months":
      {
        const n3 = new Date(e).getUTCFullYear() - new Date(s3).getUTCFullYear(), t4 = new Date(s3).getUTCMonth(), i4 = new Date(e).getUTCMonth();
        l4 = 0 === n3 ? i4 - t4 : i4 + 11 - t4 + 12 * (n3 - 1);
      }
      break;
    case "years":
      l4 = Math.round((new Date(e).getUTCFullYear() - new Date(s3).getUTCFullYear()) / a6);
      break;
    case "decades":
      l4 = Math.round((new Date(e).getUTCFullYear() - new Date(s3).getUTCFullYear()) / 10 / a6);
  }
  return l4;
}
function y(e) {
  let n2 = e.values?.length;
  if (n2) return n2;
  const { extent: t3, unit: i3 } = e, a6 = e.interval || 1, s3 = t3 ? t3[1] - t3[0] : 0;
  if ("ISO8601" !== i3) return Math.round(s3 / a6);
  switch (e.intervalUnit?.toLowerCase() ?? "seconds") {
    case "seconds":
      n2 = Math.round(s3 / 1e3 / a6);
      break;
    case "minutes":
      n2 = Math.round(s3 / 6e4 / a6);
      break;
    case "hours":
      n2 = Math.round(s3 / 36e5 / a6);
      break;
    case "days":
      n2 = Math.round(s3 / 864e5 / a6);
      break;
    case "months":
      if (t3) {
        const e2 = new Date(t3[1]).getUTCFullYear() - new Date(t3[0]).getUTCFullYear(), i4 = new Date(t3[0]).getUTCMonth(), a7 = new Date(t3[1]).getUTCMonth();
        n2 = 0 === e2 ? a7 - i4 + 1 : a7 + 11 - i4 + 12 * (e2 - 1) + 1;
      } else n2 = 0;
      break;
    case "years":
      n2 = t3 ? Math.round((new Date(t3[1]).getUTCFullYear() - new Date(t3[0]).getUTCFullYear()) / a6) : 0;
      break;
    case "decades":
      n2 = t3 ? Math.round((new Date(t3[1]).getUTCFullYear() - new Date(t3[0]).getUTCFullYear()) / 10 / a6) : 0;
      break;
    default:
      n2 = 0;
  }
  return n2;
}
function D(e) {
  if (2 !== e.extent?.length || !e.interval) return [];
  const { extent: [n2, t3], interval: i3 } = e;
  if ("ISO8601" === e.unit) {
    const a7 = e.intervalUnit?.toLowerCase() ?? "days";
    return ["decades", "years", "months", "days", "hours", "minutes", "seconds"].includes(a7) ? T(n2, t3, i3, a7) : [];
  }
  const a6 = Math.round((t3 - n2) / i3);
  return Array.from({ length: a6 }, (e2, s3) => s3 === a6 - 1 ? t3 : n2 + s3 * i3);
}
function T(e, n2, t3, i3) {
  const a6 = [];
  let s3 = e;
  const l4 = new Date(e);
  for (; s3 <= n2; ) switch (a6.push(s3), i3) {
    case "decades":
      l4.setUTCFullYear(l4.getUTCFullYear() + 10 * t3), s3 = l4.getTime();
      break;
    case "years":
      l4.setUTCFullYear(l4.getUTCFullYear() + t3), s3 = l4.getTime();
      break;
    case "months":
      l4.setUTCMonth(l4.getUTCMonth() + t3), s3 = l4.getTime();
      break;
    case "days":
      s3 += 864e5 * t3;
      break;
    case "hours":
      s3 += 36e5 * t3;
      break;
    case "minutes":
      s3 += 6e4 * t3;
      break;
    case "seconds":
      s3 += 1e3 * t3;
  }
  return 1 === a6.length ? a6[1] = n2 : a6[a6.length - 1] = n2, a6;
}
function N(e, n2) {
  let t3 = 0;
  const i3 = e[0].variableName, a6 = [...n2.variables].sort((e2, n3) => e2.name > n3.name ? 1 : -1);
  for (let s3 = 0; s3 < a6.length; s3++) {
    const n3 = a6[s3], l4 = [...n3.dimensions].sort((e2, n4) => e2.name > n4.name ? -1 : 1);
    if (n3.name !== i3) {
      t3 += l4.map((e2) => y(e2)).reduce((e2, n4) => e2 * n4);
      continue;
    }
    const r4 = l4.map((e2) => y(e2)), u3 = l4.length;
    for (let i4 = 0; i4 < u3; i4++) {
      const n4 = e.find((e2) => e2.dimensionName === l4[i4].name);
      if (null == n4) return null;
      const a7 = b2(n4.values[0], l4[i4]);
      if (-1 === a7) return null;
      r4.shift(), t3 += i4 === u3 - 1 ? a7 : a7 * r4.reduce((e2, n5) => e2 * n5);
    }
    break;
  }
  return t3;
}
function w2(e) {
  return Math.round(24 * (e - 25569) * 3600 * 1e3);
}

export {
  p2 as p,
  n,
  a3 as a,
  t,
  o,
  c,
  m3 as m,
  f,
  d,
  $,
  v,
  p as p2,
  V,
  b,
  i2 as i,
  a5 as a2,
  o2,
  m4 as m2,
  f2,
  d2,
  h2 as h,
  g,
  v2,
  D,
  N,
  w2 as w
};
//# sourceMappingURL=chunk-623AYJP2.js.map
