import {
  r as r4
} from "./chunk-GEY3MNEN.js";
import {
  E as E2,
  o as o2
} from "./chunk-733XT7D4.js";
import {
  c,
  e as e2,
  t as t2
} from "./chunk-O3AUTEBE.js";
import {
  E,
  t
} from "./chunk-S4X4QGA7.js";
import {
  a,
  l,
  r as r3
} from "./chunk-CF5GNPLI.js";
import {
  w
} from "./chunk-JQSXFLSD.js";
import {
  i
} from "./chunk-KHEIHGIK.js";
import {
  e as e3,
  t as t3
} from "./chunk-IGBV77N3.js";
import {
  e
} from "./chunk-2NTKYBCL.js";
import {
  M,
  f,
  h,
  o
} from "./chunk-DRAQJS2F.js";
import {
  Y
} from "./chunk-BZYXFNL4.js";
import {
  r as r2
} from "./chunk-LBC3MAJX.js";
import {
  M as M2,
  N
} from "./chunk-RP7FUW55.js";
import {
  r2 as r
} from "./chunk-GZ2P4SCJ.js";

// node_modules/@arcgis/core/views/2d/engine/vectorTiles/decluttering/core.js
var t4 = class {
  constructor(t5, s4) {
    this.sourceTile = s4, this.xTile = 0, this.yTile = 0, this.hash = 0, this.priority = 1, this.featureIndex = 0, this.uniqueSymbol = null, this._colliders = [], this.textVertexRanges = [], this.iconVertexRanges = [], this.tile = t5;
  }
  colliders() {
    return this._colliders;
  }
};
var s = class {
  constructor(t5) {
    this.parts = [{ startTime: 0, startOpacity: 0, targetOpacity: 0, show: false }, { startTime: 0, startOpacity: 0, targetOpacity: 0, show: false }], this.show = false, this.lastShow = false, this.tileSymbols = [t5], this.id = t5.id;
  }
};

// node_modules/@arcgis/core/views/2d/engine/vectorTiles/decluttering/util.js
function s2(t5, e4, o4, s4) {
  return r5(t5, e4, o4.level, o4.col, s4.key.level, s4.key.col);
}
function l2(t5, e4, o4, s4) {
  return r5(t5, e4, o4.level, o4.row, s4.level, s4.row);
}
function r5(t5, e4, o4, s4, l5, r8) {
  const i3 = o4 - l5;
  if (i3 >= 0) return (e4 >> i3) + (s4 - (r8 << i3)) * (t5 >> i3);
  const n6 = -i3;
  return e4 - (r8 - (s4 << n6)) * (t5 >> n6) << n6;
}
var i2 = class {
  constructor(t5, e4, o4) {
    this._rows = Math.ceil(e4 / o4), this._columns = Math.ceil(t5 / o4), this._cellSize = o4, this.cells = new Array(this._rows);
    for (let s4 = 0; s4 < this._rows; s4++) {
      this.cells[s4] = new Array(this._columns);
      for (let t6 = 0; t6 < this._columns; t6++) this.cells[s4][t6] = [];
    }
  }
  getCell(t5, e4) {
    const o4 = Math.min(Math.max(Math.floor(e4 / this._cellSize), 0), this._rows - 1), s4 = Math.min(Math.max(Math.floor(t5 / this._cellSize), 0), this._columns - 1);
    return this.cells[o4] && this.cells[o4][s4] || null;
  }
  getCellSpan(t5, e4, o4, s4) {
    return [Math.min(Math.max(Math.floor(t5 / this._cellSize), 0), this.columns - 1), Math.min(Math.max(Math.floor(e4 / this._cellSize), 0), this.rows - 1), Math.min(Math.max(Math.floor(o4 / this._cellSize), 0), this.columns - 1), Math.min(Math.max(Math.floor(s4 / this._cellSize), 0), this.rows - 1)];
  }
  get cellSize() {
    return this._cellSize;
  }
  get columns() {
    return this._columns;
  }
  get rows() {
    return this._rows;
  }
};
function n(t5, e4, s4, l5, r8, i3, n6) {
  const c6 = e4[l5++];
  for (let a6 = 0; a6 < c6; a6++) {
    const c7 = new t4(i3, n6);
    c7.xTile = e4[l5++], c7.yTile = e4[l5++], c7.hash = e4[l5++], c7.priority = e4[l5++], c7.featureIndex = e4[l5++];
    const a7 = e4[l5++], h5 = c7.colliders();
    for (let t6 = 0; t6 < a7; t6++) {
      const t7 = e4[l5++], o4 = e4[l5++], r9 = e4[l5++], i4 = e4[l5++], n7 = !!e4[l5++], c8 = e4[l5++], a8 = s4[l5++], u4 = s4[l5++], f4 = e4[l5++], m2 = e4[l5++];
      h5.push({ xTile: t7, yTile: o4, dxPixels: r9, dyPixels: i4, hard: n7, partIndex: c8, width: f4, height: m2, minLod: a8, maxLod: u4 });
    }
    const u3 = t5[l5++];
    for (let e5 = 0; e5 < u3; e5++) c7.textVertexRanges.push([t5[l5++], t5[l5++]]);
    const f3 = t5[l5++];
    for (let e5 = 0; e5 < f3; e5++) c7.iconVertexRanges.push([t5[l5++], t5[l5++]]);
    r8.push(c7);
  }
  return l5;
}
function c2(t5, e4, o4) {
  for (const [s4, l5] of t5.symbols) a2(t5, e4, o4, l5, s4);
}
function a2(e4, o4, s4, l5, r8) {
  const i3 = e4.layerData.get(r8);
  if (i3.type === E.SYMBOL) {
    for (const t5 of l5) {
      const o5 = t5.uniqueSymbol;
      let l6;
      if (t5.selectedForRendering) {
        const t6 = o5.parts[0], r9 = t6.startOpacity, i4 = t6.targetOpacity;
        e4.allSymbolsFadingOut = e4.allSymbolsFadingOut && 0 === i4;
        const n6 = s4 ? Math.floor(127 * r9) | i4 << 7 : i4 ? 255 : 0;
        l6 = n6 << 24 | n6 << 16 | n6 << 8 | n6;
      } else l6 = 0;
      for (const [e5, s5] of t5.iconVertexRanges) for (let t6 = e5; t6 < e5 + s5; t6 += 4) i3.iconOpacity[t6 / 4] = l6;
      if (t5.selectedForRendering) {
        const t6 = o5.parts[1], r9 = t6.startOpacity, i4 = t6.targetOpacity;
        e4.allSymbolsFadingOut = e4.allSymbolsFadingOut && 0 === i4;
        const n6 = s4 ? Math.floor(127 * r9) | i4 << 7 : i4 ? 255 : 0;
        l6 = n6 << 24 | n6 << 16 | n6 << 8 | n6;
      } else l6 = 0;
      for (const [e5, s5] of t5.textVertexRanges) for (let t6 = e5; t6 < e5 + s5; t6 += 4) i3.textOpacity[t6 / 4] = l6;
    }
    i3.lastOpacityUpdate = o4, i3.opacityChanged = true;
  }
}
function h2(t5, o4, s4, l5) {
  const r8 = t5.colliders();
  let i3, n6, c6, a6;
  for (const h5 of r8) {
    if (t5.uniqueSymbol?.show && t5.uniqueSymbol.parts[h5.partIndex].show && (i3 = h5.xScreen - l5[0] + h5.dxScreen, n6 = h5.yScreen - l5[1] + h5.dyScreen, c6 = i3 + h5.width, a6 = n6 + h5.height, w(s4, o4.x, o4.y, i3, n6, c6, a6))) return true;
  }
  return false;
}

// node_modules/@arcgis/core/views/2d/engine/vectorTiles/RenderBucket.js
var h3 = class {
  constructor(t5, e4) {
    this.layerUIDs = [], this.isDestroyed = false, this._data = t5;
    let r8 = 1;
    const n6 = new Uint32Array(t5);
    this.layerUIDs = [];
    const i3 = n6[r8++];
    for (let s4 = 0; s4 < i3; s4++) this.layerUIDs[s4] = n6[r8++];
    this.bufferDataOffset = r8, e4 && (this.layer = e4.getStyleLayerByUID(this.layerUIDs[0]));
  }
  get isPreparedForRendering() {
    return null == this._data;
  }
  get offset() {
    return this.bufferDataOffset;
  }
  get data() {
    return this._data;
  }
  destroy() {
    this.isDestroyed || (this.doDestroy(), this._data = null, this.isDestroyed = true);
  }
  prepareForRendering(t5) {
    null != this._data && (this.doPrepareForRendering(t5, this._data, this.bufferDataOffset), this._data = null);
  }
};
var c3 = class extends h3 {
  constructor(t5, e4) {
    super(t5, e4), this.type = E.LINE, this.lineIndexStart = 0, this.lineIndexCount = 0;
    const r8 = new Uint32Array(t5);
    let i3 = this.bufferDataOffset;
    this.lineIndexStart = r8[i3++], this.lineIndexCount = r8[i3++];
    const s4 = r8[i3++];
    if (s4 > 0) {
      this.patternMap = /* @__PURE__ */ new Map();
      for (let t6 = 0; t6 < s4; t6++) {
        const t7 = r8[i3++], e5 = r8[i3++], n6 = r8[i3++];
        this.patternMap.set(t7, [e5, n6]);
      }
    }
    this.bufferDataOffset = i3;
  }
  get usedMemory() {
    return (this.data?.byteLength ?? 0) + (this.vao?.cachedMemory ?? 0);
  }
  hasData() {
    return this.lineIndexCount > 0;
  }
  triangleCount() {
    return this.lineIndexCount / 3;
  }
  doDestroy() {
    this.vao = r(this.vao);
  }
  doPrepareForRendering(t5, e4, r8) {
    const n6 = new Uint32Array(e4), i3 = new Int32Array(n6.buffer), h5 = n6[r8++], c6 = E2.createVertex(t5, Y.STATIC_DRAW, new Int32Array(i3.buffer, 4 * r8, h5));
    r8 += h5;
    const f3 = n6[r8++], l5 = E2.createIndex(t5, Y.STATIC_DRAW, new Uint32Array(n6.buffer, 4 * r8, f3));
    r8 += f3;
    const u3 = this.layer.lineMaterial;
    this.vao = new o2(t5, u3.getAttributeLocations(), u3.getLayoutInfo(), /* @__PURE__ */ new Map([["geometry", c6]]), l5);
  }
};
var f2 = class extends h3 {
  constructor(t5, e4) {
    super(t5, e4), this.type = E.FILL, this.fillIndexStart = 0, this.fillIndexCount = 0, this.outlineIndexStart = 0, this.outlineIndexCount = 0;
    const r8 = new Uint32Array(t5);
    let i3 = this.bufferDataOffset;
    this.fillIndexStart = r8[i3++], this.fillIndexCount = r8[i3++], this.outlineIndexStart = r8[i3++], this.outlineIndexCount = r8[i3++];
    const s4 = r8[i3++];
    if (s4 > 0) {
      this.patternMap = /* @__PURE__ */ new Map();
      for (let t6 = 0; t6 < s4; t6++) {
        const t7 = r8[i3++], e5 = r8[i3++], n6 = r8[i3++];
        this.patternMap.set(t7, [e5, n6]);
      }
    }
    this.bufferDataOffset = i3;
  }
  get usedMemory() {
    return (this.data?.byteLength ?? 0) + (this.fillVAO?.cachedMemory ?? 0) + (this.outlineVAO?.cachedMemory ?? 0);
  }
  hasData() {
    return this.fillIndexCount > 0 || this.outlineIndexCount > 0;
  }
  triangleCount() {
    return (this.fillIndexCount + this.outlineIndexCount) / 3;
  }
  doDestroy() {
    this.fillVAO = r(this.fillVAO), this.outlineVAO = r(this.outlineVAO);
  }
  doPrepareForRendering(t5, e4, r8) {
    const n6 = new Uint32Array(e4), i3 = new Int32Array(n6.buffer), h5 = n6[r8++], c6 = E2.createVertex(t5, Y.STATIC_DRAW, new Int32Array(i3.buffer, 4 * r8, h5));
    r8 += h5;
    const f3 = n6[r8++], l5 = E2.createIndex(t5, Y.STATIC_DRAW, new Uint32Array(n6.buffer, 4 * r8, f3));
    r8 += f3;
    const u3 = n6[r8++], y2 = E2.createVertex(t5, Y.STATIC_DRAW, new Int32Array(i3.buffer, 4 * r8, u3));
    r8 += u3;
    const d = n6[r8++], A = E2.createIndex(t5, Y.STATIC_DRAW, new Uint32Array(n6.buffer, 4 * r8, d));
    r8 += d;
    const p = this.layer, I = p.fillMaterial, g = p.outlineMaterial;
    this.fillVAO = new o2(t5, I.getAttributeLocations(), I.getLayoutInfo(), /* @__PURE__ */ new Map([["geometry", c6]]), l5), this.outlineVAO = new o2(t5, g.getAttributeLocations(), g.getLayoutInfo(), /* @__PURE__ */ new Map([["geometry", y2]]), A);
  }
};
var l3 = class extends h3 {
  constructor(t5, e4, s4) {
    super(t5, e4), this.type = E.SYMBOL, this.iconPerPageElementsMap = /* @__PURE__ */ new Map(), this.glyphPerPageElementsMap = /* @__PURE__ */ new Map(), this.symbolInstances = [], this.isIconSDF = false, this.opacityChanged = false, this.lastOpacityUpdate = 0, this.symbols = [];
    const a6 = new Uint32Array(t5), o4 = new Int32Array(t5), h5 = new Float32Array(t5);
    let c6 = this.bufferDataOffset;
    this.isIconSDF = !!a6[c6++];
    const f3 = a6[c6++], l5 = a6[c6++], u3 = a6[c6++], y2 = new e(f3, l5, u3, 0), d = a6[c6++];
    for (let r8 = 0; r8 < d; r8++) {
      const t6 = a6[c6++], e5 = a6[c6++], r9 = a6[c6++];
      this.iconPerPageElementsMap.set(t6, [e5, r9]);
    }
    const A = a6[c6++];
    for (let r8 = 0; r8 < A; r8++) {
      const t6 = a6[c6++], e5 = a6[c6++], r9 = a6[c6++];
      this.glyphPerPageElementsMap.set(t6, [e5, r9]);
    }
    const p = a6[c6++], I = a6[c6++];
    this.iconOpacity = new Int32Array(p), this.textOpacity = new Int32Array(I), c6 = n(a6, o4, h5, c6, this.symbols, s4, y2), this.bufferDataOffset = c6;
  }
  get usedMemory() {
    return (this.data?.byteLength ?? 0) + (this.iconVAO?.cachedMemory ?? 0) + (this.textVAO?.cachedMemory ?? 0) + i(this.iconOpacity) + i(this.textOpacity);
  }
  hasData() {
    return this.iconPerPageElementsMap.size > 0 || this.glyphPerPageElementsMap.size > 0;
  }
  triangleCount() {
    let t5 = 0;
    for (const e4 of this.iconPerPageElementsMap.values()) t5 += e4[1];
    for (const e4 of this.glyphPerPageElementsMap.values()) t5 += e4[1];
    return t5 / 3;
  }
  doDestroy() {
    this.iconVAO = r(this.iconVAO), this.textVAO = r(this.textVAO);
  }
  updateOpacityInfo() {
    if (!this.opacityChanged) return;
    this.opacityChanged = false;
    const t5 = this.iconOpacity, e4 = this.iconVAO.vertexBuffers.get("opacity");
    t5.length > 0 && t5.byteLength === e4.usedMemory && e4.setSubData(t5, 0, 0, t5.length);
    const r8 = this.textOpacity, n6 = this.textVAO.vertexBuffers.get("opacity");
    r8.length > 0 && r8.byteLength === n6.usedMemory && n6.setSubData(r8, 0, 0, r8.length);
  }
  doPrepareForRendering(t5, e4, r8) {
    const n6 = new Uint32Array(e4), i3 = new Int32Array(n6.buffer), h5 = n6[r8++], c6 = E2.createVertex(t5, Y.STATIC_DRAW, new Int32Array(i3.buffer, 4 * r8, h5));
    r8 += h5;
    const f3 = n6[r8++], l5 = E2.createIndex(t5, Y.STATIC_DRAW, new Uint32Array(n6.buffer, 4 * r8, f3));
    r8 += f3;
    const u3 = n6[r8++], y2 = E2.createVertex(t5, Y.STATIC_DRAW, new Int32Array(i3.buffer, 4 * r8, u3));
    r8 += u3;
    const d = n6[r8++], A = E2.createIndex(t5, Y.STATIC_DRAW, new Uint32Array(n6.buffer, 4 * r8, d));
    r8 += d;
    const p = E2.createVertex(t5, Y.STATIC_DRAW, this.iconOpacity.buffer), I = E2.createVertex(t5, Y.STATIC_DRAW, this.textOpacity.buffer), g = this.layer, x = g.iconMaterial, m2 = g.textMaterial;
    this.iconVAO = new o2(t5, x.getAttributeLocations(), x.getLayoutInfo(), /* @__PURE__ */ new Map([["geometry", c6], ["opacity", p]]), l5), this.textVAO = new o2(t5, m2.getAttributeLocations(), m2.getLayoutInfo(), /* @__PURE__ */ new Map([["geometry", y2], ["opacity", I]]), A);
  }
};
var u = class extends h3 {
  constructor(t5, e4) {
    super(t5, e4), this.type = E.CIRCLE, this.circleIndexStart = 0, this.circleIndexCount = 0;
    const r8 = new Uint32Array(t5);
    let i3 = this.bufferDataOffset;
    this.circleIndexStart = r8[i3++], this.circleIndexCount = r8[i3++], this.bufferDataOffset = i3;
  }
  get usedMemory() {
    return (this.data?.byteLength ?? 0) + (this.vao?.cachedMemory ?? 0);
  }
  hasData() {
    return this.circleIndexCount > 0;
  }
  triangleCount() {
    return this.circleIndexCount / 3;
  }
  doDestroy() {
    this.vao = r(this.vao);
  }
  doPrepareForRendering(t5, e4, r8) {
    const n6 = new Uint32Array(e4), i3 = new Int32Array(n6.buffer), h5 = n6[r8++], c6 = E2.createVertex(t5, Y.STATIC_DRAW, new Int32Array(i3.buffer, 4 * r8, h5));
    r8 += h5;
    const f3 = n6[r8++], l5 = E2.createIndex(t5, Y.STATIC_DRAW, new Uint32Array(n6.buffer, 4 * r8, f3));
    r8 += f3;
    const u3 = this.layer.circleMaterial;
    this.vao = new o2(t5, u3.getAttributeLocations(), u3.getLayoutInfo(), /* @__PURE__ */ new Map([["geometry", c6]]), l5);
  }
};

// node_modules/@arcgis/core/views/2d/engine/vectorTiles/VectorTile.js
var m = class _m extends r4 {
  constructor(e4, t5, s4, r8, a6, o4, h5, n6 = null) {
    super(e4, t5, s4, r8, a6, o4, t, t), this.styleRepository = h5, this._memCache = n6, this.type = "vector-tile", this._referenced = 1, this._hasSymbolBuckets = false, this._usedMemory = 256, this.layerData = /* @__PURE__ */ new Map(), this.status = "loading", this.allSymbolsFadingOut = false, this.lastOpacityUpdate = 0, this.symbols = /* @__PURE__ */ new Map(), this.isCoverage = false, this.neededForCoverage = false, this.decluttered = false, this.parentTile = null, this.childrenTiles = /* @__PURE__ */ new Set(), this.featureIndex = null, this.triangleCount = 0, this._processed = false, this.id = e4.id;
  }
  get styleLayerUIDs() {
    return Array.from(this.layerData.keys());
  }
  get hasSymbolBuckets() {
    return this._hasSymbolBuckets;
  }
  get isFading() {
    return this._hasSymbolBuckets && performance.now() - this.lastOpacityUpdate < e2;
  }
  get isHoldingForFade() {
    return this._hasSymbolBuckets && (!this.allSymbolsFadingOut || performance.now() - this.lastOpacityUpdate < e2);
  }
  get wasRequested() {
    return "errored" === this.status || "loaded" === this.status || "reloading" === this.status;
  }
  setData(e4) {
    this.changeDataImpl(e4), this.requestRender(), this.ready(), this._processed = true;
  }
  deleteLayerData(e4) {
    let t5 = false;
    for (const s4 of e4) {
      const e5 = this.layerData.get(s4);
      e5 && (this._usedMemory -= e5.usedMemory, e5.type === E.SYMBOL && this.symbols.delete(s4) && (t5 = true), e5.destroy(), this.layerData.delete(s4));
    }
    this._memCache?.updateSize(this.key.id, this), t5 && (this.featureIndex?.clear(), this.emit("symbols-changed")), this.requestRender();
  }
  processed() {
    return this._processed;
  }
  hasData() {
    return this.layerData.size > 0;
  }
  hasFeatures() {
    const e4 = this.layerData.values();
    for (const t5 of e4) if (t5.hasData()) return true;
    return false;
  }
  dispose() {
    "unloaded" !== this.status && (_m._destroyRenderBuckets(this.layerData), this.layerData.clear(), this.featureIndex = null, this._usedMemory = 0, this.destroy(), this.status = "unloaded");
  }
  release() {
    0 === --this._referenced && (this.dispose(), this.stage = null);
  }
  retain() {
    ++this._referenced;
  }
  get cachedMemory() {
    return this._usedMemory;
  }
  get usedMemory() {
    return this._usedMemory;
  }
  get usedMemoryPerReference() {
    return this._usedMemory / (this._referenced || 1);
  }
  changeDataImpl(e4) {
    this.featureIndex?.clear();
    let t5 = false;
    if (e4) {
      const { bucketsWithData: s4, emptyBuckets: r8 } = e4, a6 = this._createRenderBuckets(s4);
      if (r8 && r8.byteLength > 0) {
        const e5 = new Uint32Array(r8);
        for (const t6 of e5) this._deleteLayerData(t6);
      }
      for (const [e5, i3] of a6) this._deleteLayerData(e5), i3.type === E.SYMBOL && (this.symbols.set(e5, i3.symbols), t5 = true), this._usedMemory += i3.usedMemory, this.layerData.set(e5, i3);
      this._memCache?.updateSize(this.key.id, this);
    }
    this._hasSymbolBuckets = false;
    for (const s4 of this.layerData.values()) s4.type === E.SYMBOL && (this._hasSymbolBuckets = true);
    t5 && this.emit("symbols-changed");
  }
  attachWithContext(e4) {
    this.stage = { context: e4, trashDisplayObject(e5) {
      e5.processDetach();
    }, untrashDisplayObject: () => false };
  }
  setTransform(a6) {
    super.setTransform(a6);
    const i3 = this.resolution / (a6.resolution * a6.pixelRatio), o4 = this.width / this.rangeX * i3, h5 = this.height / this.rangeY * i3, n6 = [0, 0];
    a6.toScreen(n6, [this.x, this.y]);
    const l5 = this.transforms.tileUnitsToPixels;
    o(l5), M(l5, l5, n6), h(l5, l5, Math.PI * a6.rotation / 180), f(l5, l5, [o4, h5, 1]);
  }
  _createTransforms() {
    return { displayViewScreenMat3: e3(), tileMat3: e3(), tileUnitsToPixels: e3() };
  }
  static _destroyRenderBuckets(e4) {
    if (!e4) return;
    const t5 = /* @__PURE__ */ new Set();
    for (const s4 of e4.values()) t5.has(s4) || (s4.destroy(), t5.add(s4));
    e4.clear();
  }
  _createRenderBuckets(e4) {
    const t5 = /* @__PURE__ */ new Map(), s4 = /* @__PURE__ */ new Map();
    for (const r8 of e4) {
      const e5 = this._deserializeBucket(r8, s4);
      for (const s5 of e5.layerUIDs) t5.set(s5, e5);
    }
    return t5;
  }
  _deserializeBucket(e4, t5) {
    let s4 = t5.get(e4);
    if (s4) return s4;
    switch (new Uint32Array(e4)[0]) {
      case E.FILL:
        s4 = new f2(e4, this.styleRepository);
        break;
      case E.LINE:
        s4 = new c3(e4, this.styleRepository);
        break;
      case E.SYMBOL:
        s4 = new l3(e4, this.styleRepository, this);
        break;
      case E.CIRCLE:
        s4 = new u(e4, this.styleRepository);
    }
    return t5.set(e4, s4), s4;
  }
  _deleteLayerData(e4) {
    if (!this.layerData.has(e4)) return;
    const t5 = this.layerData.get(e4);
    this._usedMemory -= t5.usedMemory, t5.destroy(), this.layerData.delete(e4);
  }
};

// node_modules/@arcgis/core/views/2d/engine/vectorTiles/decluttering/CollisionJob.js
var n2 = class {
  constructor(s4, o4, n6, i3, l5, c6) {
    this._symbols = s4, this._styleRepository = i3, this._zoom = l5, this._currentLayerCursor = 0, this._currentSymbolCursor = 0, this._styleProps = /* @__PURE__ */ new Map(), this._allNeededMatrices = /* @__PURE__ */ new Map(), this._gridIndex = new i2(o4, n6, t2), this._si = Math.sin(Math.PI * c6 / 180), this._co = Math.cos(Math.PI * c6 / 180), i3.cachedStyles && (this._styleProps = i3.cachedStyles);
    for (const t5 of s4) for (const r8 of t5.symbols) this._allNeededMatrices.has(r8.tile) || this._allNeededMatrices.set(r8.tile, t3(r8.tile.transforms.tileUnitsToPixels));
  }
  work(e4) {
    const t5 = performance.now();
    for (; this._currentLayerCursor < this._symbols.length; this._currentLayerCursor++, this._currentSymbolCursor = 0) {
      const r8 = this._symbols[this._currentLayerCursor], s4 = this._getProperties(r8.styleLayerUID), o4 = this._styleRepository.layerContexts?.get(r8.styleLayerUID);
      for (; this._currentSymbolCursor < r8.symbols.length; this._currentSymbolCursor++) {
        if (this._currentSymbolCursor % 100 == 99 && performance.now() - t5 > e4) return false;
        const n6 = r8.symbols[this._currentSymbolCursor];
        if (!n6.uniqueSymbol?.show) continue;
        const i3 = this._computeCoordinates(n6, s4, o4), l5 = n6.uniqueSymbol;
        if (!l5.show) continue;
        const { iconAllowOverlap: c6, textAllowOverlap: h5 } = s4;
        for (const e5 of i3) {
          if (!e5.enabled) continue;
          const t6 = l5.parts[e5.partIndex];
          if (!t6.show) continue;
          !(e5.partIndex ? h5 : c6) && this._doesCollide(e5) && (e5.hard ? l5.show = false : t6.show = false);
        }
        l5.show && this._insertColliders(l5.parts, i3, s4);
      }
    }
    return true;
  }
  _insertColliders(e4, t5, r8) {
    const { iconIgnorePlacement: s4, textIgnorePlacement: o4 } = r8;
    for (const n6 of t5) {
      if (!n6.enabled) continue;
      if (n6.partIndex ? o4 : s4) continue;
      if (!e4[n6.partIndex].show) continue;
      const t6 = n6.xScreen + n6.dxScreen, r9 = n6.yScreen + n6.dyScreen, i3 = t6 + n6.width, l5 = r9 + n6.height, [c6, h5, a6, d] = this._gridIndex.getCellSpan(t6, r9, i3, l5);
      for (let e5 = h5; e5 <= d; e5++) for (let t7 = c6; t7 <= a6; t7++) {
        this._gridIndex.cells[e5][t7].push(n6);
      }
    }
  }
  _computeCoordinates(e4, t5, r8) {
    const { iconRotationAlignment: n6, textRotationAlignment: i3, iconTranslate: l5, iconTranslateAnchor: c6, textTranslate: h5, textTranslateAnchor: a6 } = t5, d = this._si, y2 = this._co, u3 = this._zoom, x = this._allNeededMatrices.get(e4.tile), _ = e4.uniqueSymbol, f3 = e4.colliders(r8);
    let m2 = 0;
    for (const S of f3) {
      const [e5, t6] = 0 === S.partIndex ? l5 : h5, r9 = 0 === S.partIndex ? c6 : a6, _2 = S.minLod <= u3 && u3 <= S.maxLod;
      m2 += _2 ? 0 : 1, S.enabled = _2, S.xScreen = S.xTile * x[0] + S.yTile * x[3] + x[6], S.yScreen = S.xTile * x[1] + S.yTile * x[4] + x[7], r9 === r3.MAP ? (S.xScreen += y2 * e5 - d * t6, S.yScreen += d * e5 + y2 * t6) : (S.xScreen += e5, S.yScreen += t6), l.VIEWPORT === (0 === S.partIndex ? n6 : i3) ? (S.dxScreen = S.dxPixels, S.dyScreen = S.dyPixels) : (S.dxScreen = y2 * (S.dxPixels + S.width / 2) - d * (S.dyPixels + S.height / 2) - S.width / 2, S.dyScreen = d * (S.dxPixels + S.width / 2) + y2 * (S.dyPixels + S.height / 2) - S.height / 2);
    }
    return f3.length > 0 && m2 === f3.length && _ && (_.show = false), f3;
  }
  _getProperties(e4) {
    const t5 = this._styleProps.get(e4);
    if (t5) return t5;
    const r8 = this._styleRepository.getLayerStyleProperties?.(e4, this._zoom);
    return this._styleProps.set(e4, r8), r8;
  }
  _doesCollide(e4) {
    const t5 = e4.xScreen + e4.dxScreen, r8 = e4.yScreen + e4.dyScreen, s4 = t5 + e4.width, o4 = r8 + e4.height, [n6, i3, l5, c6] = this._gridIndex.getCellSpan(t5, r8, s4, o4);
    for (let h5 = i3; h5 <= c6; h5++) for (let e5 = n6; e5 <= l5; e5++) {
      const n7 = this._gridIndex.cells[h5][e5];
      for (const e6 of n7) {
        const n8 = e6.xScreen + e6.dxScreen, i4 = e6.yScreen + e6.dyScreen, l6 = n8 + e6.width, c7 = i4 + e6.height;
        if (!(s4 < n8 || t5 > l6 || o4 < i4 || r8 > c7)) return true;
      }
    }
    return false;
  }
};

// node_modules/@arcgis/core/views/2d/engine/vectorTiles/decluttering/SymbolDeclutterer.js
function s3(e4) {
  return (e4.uniqueSymbol?.show && e4.uniqueSymbol?.lastShow) ?? false;
}
function r6(e4, t5) {
  if (e4.priority - t5.priority) return e4.priority - t5.priority;
  if (s3(e4) && !s3(t5)) return -1;
  if (s3(t5) && !s3(e4)) return 1;
  const o4 = e4.tile.key, i3 = t5.tile.key;
  return o4.world - i3.world ? o4.world - i3.world : o4.level - i3.level ? o4.level - i3.level : o4.row - i3.row ? o4.row - i3.row : o4.col - i3.col ? o4.col - i3.col : e4.xTile - t5.xTile ? e4.xTile - t5.xTile : e4.yTile - t5.yTile;
}
var n3 = class {
  get running() {
    return this._running;
  }
  constructor(e4, t5, o4, i3, s4, r8, n6, l5) {
    this.selectionMode = e4, this._visibleTiles = t5, this._symbolRepository = o4, this._styleRepository = i3, this._createCollisionJob = s4, this._assignTileSymbolsOpacity = r8, this._symbolLayerSorter = n6, this._isLayerVisible = l5, this._selectionJob = null, this._selectionJobCompleted = false, this._collisionJob = null, this._collisionJobCompleted = false, this._opacityJob = null, this._opacityJobCompleted = false, this._running = true;
  }
  setScreenSize(e4, t5) {
    this._screenWidth === e4 && this._screenHeight === t5 || this.restart(), this._screenWidth = e4, this._screenHeight = t5;
  }
  restart() {
    this._selectionJob = null, this._selectionJobCompleted = false, this._collisionJob = null, this._collisionJobCompleted = false, this._opacityJob = null, this._opacityJobCompleted = false, this._running = true;
  }
  continue(e4) {
    if (this._selectionJob || (this._selectionJob = this._createSelectionJob()), !this._selectionJobCompleted) {
      const t5 = performance.now();
      if (!this._selectionJob.work(e4)) return false;
      if (this._selectionJobCompleted = true, 0 === (e4 = Math.max(0, e4 - (performance.now() - t5)))) return false;
    }
    if (this._collisionJob || (this._collisionJob = this._createCollisionJob(this._selectionJob.sortedSymbols, this._screenWidth, this._screenHeight)), !this._collisionJobCompleted) {
      const t5 = performance.now();
      if (!this._collisionJob.work(e4)) return false;
      if (this._collisionJobCompleted = true, 0 === (e4 = Math.max(0, e4 - (performance.now() - t5)))) return false;
    }
    if (this._opacityJob || (this._opacityJob = this._createOpacityJob()), !this._opacityJobCompleted) {
      const t5 = performance.now();
      if (!this._opacityJob.work(e4)) return false;
      if (this._opacityJobCompleted = true, 0 === (e4 = Math.max(0, e4 - (performance.now() - t5)))) return false;
    }
    return this._running = false, true;
  }
  _isFeatureFiltered(e4, t5, s4) {
    const r8 = t5.getFilterFlags(e4), n6 = r8 & M2, l5 = null == s4.featureEffect || s4.featureEffect.excludedLabelsVisible || r8 & N;
    return !(n6 && l5);
  }
  _getFilteredByLayer() {
    let e4;
    if (this._styleRepository?.layerContexts) for (const t5 of this._symbolRepository.uniqueSymbols) {
      const o4 = this._styleRepository.layerContexts?.get(t5.styleLayerUID);
      if (o4?.attributeView) for (const i3 of t5.uniqueSymbols) {
        e4 ??= /* @__PURE__ */ new Map(), e4.get(t5.styleLayerUID) || e4.set(t5.styleLayerUID, /* @__PURE__ */ new Set());
        const s4 = e4.get(t5.styleLayerUID), r8 = o4.attributeView, n6 = o4.layerView;
        this._isFeatureFiltered(i3.id, r8, n6) && s4.add(i3.id);
      }
    }
    return e4;
  }
  _resetSelection() {
    for (let e4 = 0; e4 < this._symbolRepository.uniqueSymbols.length; e4++) {
      const t5 = this._symbolRepository.uniqueSymbols[e4];
      for (let e5 = 0; e5 < t5.uniqueSymbols.length; e5++) {
        const o4 = t5.uniqueSymbols[e5];
        for (const e6 of o4.tileSymbols) e6.selectedForRendering = false;
      }
    }
  }
  _createSelectionJob() {
    const e4 = "feature-tile" === this.selectionMode ? c4 : a3, t5 = this._symbolRepository.uniqueSymbols;
    this._resetSelection();
    const o4 = [];
    let i3 = 0, s4 = 0;
    const n6 = this._isLayerVisible, l5 = this._getFilteredByLayer(), y2 = this._styleRepository?.layerContexts;
    function h5(c6) {
      let a6;
      const h6 = performance.now();
      for (; s4 < t5.length; s4++, i3 = 0) {
        const r8 = t5[s4], u4 = r8.styleLayerUID, f3 = l5?.get(u4);
        let b = 0;
        if (y2) {
          const e5 = y2.get(u4).layerView;
          b = e5.view.allLayerViews.items.indexOf(e5);
        }
        if (!n6(u4)) {
          o4[s4] || (o4[s4] = { styleLayerUID: u4, layerOrder: b, symbols: [] });
          continue;
        }
        o4[s4] ||= { styleLayerUID: u4, symbols: [], layerOrder: b };
        const m2 = o4[s4];
        for (; i3 < r8.uniqueSymbols.length; i3++) {
          if (a6 = r8.uniqueSymbols[i3], i3 % 100 == 99 && performance.now() - h6 > c6) return false;
          if (a6.lastShow = a6.show, a6.id && f3?.has(a6.id)) {
            a6.show = false, a6.parts[0].show = false, a6.parts[1].show = false;
            continue;
          }
          const t6 = e4(a6);
          if (t6) {
            t6.selectedForRendering = true, m2.symbols.push(t6), a6.show = true;
            for (const e5 of a6.parts) e5.show = true;
          } else a6.show = false;
        }
      }
      for (const e5 of o4) e5.symbols.sort(r6);
      return o4.sort((e5, t6) => t6.layerOrder - e5.layerOrder), true;
    }
    const u3 = this._symbolLayerSorter;
    return { work: h5, get sortedSymbols() {
      return o4.sort(u3);
    } };
  }
  _createOpacityJob() {
    const t5 = this._assignTileSymbolsOpacity, o4 = this._visibleTiles;
    let i3 = 0;
    function s4(e4, o5) {
      for (const t6 of e4.symbols.values()) l4(t6, o5);
      t5(e4, o5);
      for (const t6 of e4.childrenTiles) s4(t6, o5);
    }
    return { work(r8) {
      const n6 = performance.now();
      for (; i3 < o4.length; i3++) {
        if (performance.now() - n6 > r8) return false;
        const l5 = o4[i3];
        if (null != l5.parentTile) continue;
        const c6 = performance.now();
        l5 instanceof m ? s4(l5, c6) : t5(l5, c6);
      }
      return true;
    } };
  }
};
function l4(e4, o4) {
  for (const i3 of e4) {
    const e5 = i3.uniqueSymbol;
    for (const i4 of e5.parts) {
      const s4 = i4.targetOpacity > 0.5 ? 1 : -1;
      i4.startOpacity += s4 * ((o4 - i4.startTime) / e2), i4.startOpacity = Math.min(Math.max(i4.startOpacity, 0), 1), i4.startTime = o4, i4.targetOpacity = e5.show && i4.show ? 1 : 0;
    }
  }
}
function c4(e4) {
  let t5 = null, o4 = null, i3 = null;
  for (const s4 of e4.tileSymbols) {
    const e5 = s4.tile;
    e5.isReady && e5.isCoverage ? t5 = s4 : e5.isReady ? o4 = s4 : e5.rendering && (i3 = s4);
  }
  return t5 ?? o4 ?? i3;
}
function a3(e4) {
  let t5 = null, o4 = false, i3 = false;
  for (const s4 of e4.tileSymbols) if (!i3 || !o4) {
    const e5 = s4.tile;
    (!t5 || e5.isCoverage || e5.neededForCoverage && !o4) && (t5 = s4, (e5.neededForCoverage || e5.isCoverage) && (i3 = true), e5.isCoverage && (o4 = true));
  }
  return i3 ? t5 : null;
}

// node_modules/@arcgis/core/views/2d/engine/vectorTiles/decluttering/SymbolRepository.js
var o3 = class _o {
  static fromSymbols(e4, t5) {
    let s4 = e4.length;
    if (s4 >= n4) {
      let i3 = t5;
      do {
        i3 /= 2, s4 /= 4;
      } while (s4 > r7 && i3 > y);
      const n6 = new i2(t5, t5, i3);
      for (const t6 of e4) n6.getCell(t6.xTile, t6.yTile).push(t6);
      return new _o(t5, e4, n6);
    }
    return new _o(t5, e4, null);
  }
  constructor(e4, t5, s4) {
    this.tileCoordRange = e4, this._symbols = t5, this._index = s4;
  }
  addSymbols(e4) {
    for (const t5 of e4) this._symbols.push(t5);
    if (this._index) for (const t5 of e4) this._index.getCell(t5.xTile, t5.yTile).push(t5);
  }
  removeSymbols(e4) {
    const t5 = new Set(e4);
    if (this._symbols = this._symbols.filter((e5) => !t5.has(e5)), this._index) for (const s4 of this._index.cells) for (let e5 = 0; e5 < s4.length; e5++) s4[e5] = s4[e5].filter((e6) => !t5.has(e6));
  }
  getSymbols() {
    return this._symbols;
  }
  getCandidate(e4, t5, s4, i3) {
    if (!this._index) {
      for (const l6 of this._symbols) if (s4 === l6.hash && Math.abs(e4 - l6.xTile) <= i3 && Math.abs(t5 - l6.yTile) <= i3) return l6;
      return null;
    }
    const l5 = this._index.getCellSpan(e4 - i3, t5 - i3, e4 + i3, t5 + i3), [o4, n6, r8, y2] = l5;
    for (let a6 = n6; a6 <= y2; a6++) for (let l6 = o4; l6 <= r8; l6++) {
      const o5 = this._index.cells[a6][l6];
      for (const l7 of o5) if (s4 === l7.hash && Math.abs(e4 - l7.xTile) <= i3 && Math.abs(t5 - l7.yTile) <= i3) return l7;
    }
    return null;
  }
};
var n4 = 32;
var r7 = 8;
var y = 64;
var a4 = 20;
var u2 = class {
  constructor(e4, t5) {
    this.tileCoordRange = e4, this._visibleTiles = t5, this._indexMapByTile = /* @__PURE__ */ new Map(), this._uniqueSymbolsByStyleLayerId = /* @__PURE__ */ new Map();
  }
  get uniqueSymbols() {
    return null == this._uniqueSymbolLayerArray && (this._uniqueSymbolLayerArray = this._createUniqueSymbolLayerArray()), this._uniqueSymbolLayerArray;
  }
  registerVectorTile(e4, t5) {
    const s4 = this._ensureIndexMap(e4), i3 = t5?.values() ?? s4.keys();
    for (const l5 of i3) {
      const e5 = s4.get(l5);
      e5 && (this._removeSymbols(l5, e5.getSymbols()), s4.delete(l5));
    }
    this._addSymbols(e4.key, s4, e4.symbols), this._invalidate();
  }
  unregisterVectorTile(e4) {
    this._removeTile(e4), this._invalidate();
  }
  registerFeatureTile(e4) {
    this._ensureIndexMap(e4), this._invalidate();
  }
  unregisterFeatureTile(e4) {
    this._removeTile(e4), this._invalidate();
  }
  insertFeatureTileMetrics(e4, t5) {
    const s4 = this._indexMapByTile.get(e4);
    if (!s4) throw new Error(`tile ${e4.id} not registered!`);
    this._addSymbols(e4.key, s4, h4(t5)), this._invalidate();
  }
  removeFeatureTileMetrics(e4, t5) {
    const s4 = this._indexMapByTile.get(e4);
    if (!s4) return;
    const i3 = h4(t5);
    for (const [l5, o4] of s4.entries()) {
      const e5 = i3.get(l5);
      e5 && (o4.removeSymbols(e5), this._removeSymbols(l5, e5));
    }
    this._invalidate();
  }
  deleteStyleLayers(e4) {
    for (const t5 of this._indexMapByTile.values()) for (const s4 of e4) {
      const e5 = t5.get(s4);
      e5 && (this._removeSymbols(s4, e5.getSymbols()), t5.delete(s4));
    }
    this._invalidate();
  }
  querySymbols(e4, s4, i3, l5) {
    const o4 = [];
    for (const [n6, r8] of this._uniqueSymbolsByStyleLayerId.entries()) for (const l6 of r8) {
      const r9 = l6.tileSymbols.find((e5) => e5.selectedForRendering);
      r9 && h2(r9, e4, s4 * (window.devicePixelRatio || 1), i3) && o4.push({ vtlSymbol: r9, styleLayerUID: n6, tileKey: r9.tile.key });
    }
    return o4;
  }
  _ensureIndexMap(e4) {
    let t5 = this._indexMapByTile.get(e4);
    return t5 || (t5 = /* @__PURE__ */ new Map(), this._indexMapByTile.set(e4, t5)), t5;
  }
  _invalidate() {
    this._uniqueSymbolLayerArray = null;
  }
  _addSymbols(e4, t5, s4) {
    for (const [i3, l5] of s4) {
      let e5 = t5.get(i3);
      e5 ? e5.addSymbols(l5) : (e5 = o3.fromSymbols(l5, this.tileCoordRange), t5.set(i3, e5));
    }
    this._updateUniqueSymbols(e4, s4);
  }
  _removeTile(e4) {
    const t5 = this._indexMapByTile.get(e4);
    if (t5) {
      for (const [e5, s4] of t5.entries()) this._removeSymbols(e5, s4.getSymbols());
      this._indexMapByTile.delete(e4), this._invalidate();
    }
  }
  _removeSymbols(e4, t5) {
    for (const s4 of t5) {
      const t6 = s4.uniqueSymbol;
      if (t6) {
        if (t6.tileSymbols = t6.tileSymbols.filter((e5) => e5 !== s4), 0 === t6.tileSymbols.length) {
          const s5 = this._uniqueSymbolsByStyleLayerId.get(e4);
          s5.delete(t6), 0 === s5.size && this._uniqueSymbolsByStyleLayerId.delete(e4);
        }
        s4.uniqueSymbol = null;
      }
    }
  }
  _updateUniqueSymbols(t5, s4) {
    if (0 !== s4.size) {
      for (const e4 of this._visibleTiles) e4.parentTile || e4.key.world !== t5.world || e4.key.level === t5.level && !e4.key.equals(t5) || this._matchSymbols(e4, t5, s4);
      for (const [t6, i3] of s4) for (const s5 of i3) if (!s5.uniqueSymbol) {
        s5.uniqueSymbol = new s(s5);
        let i4 = this._uniqueSymbolsByStyleLayerId.get(t6);
        i4 || (i4 = /* @__PURE__ */ new Set(), this._uniqueSymbolsByStyleLayerId.set(t6, i4)), i4.add(s5.uniqueSymbol);
      }
    }
  }
  _matchSymbols(e4, t5, l5) {
    if (e4.key.level > t5.level) {
      const s4 = e4.key.level - t5.level;
      if (e4.key.row >> s4 !== t5.row || e4.key.col >> s4 !== t5.col) return;
    }
    if (t5.level > e4.key.level) {
      const s4 = t5.level - e4.key.level;
      if (t5.row >> s4 !== e4.key.row || t5.col >> s4 !== e4.key.col) return;
    }
    const o4 = /* @__PURE__ */ new Map();
    for (const [n6, r8] of l5) {
      const l6 = [], y2 = (e4.key.level < t5.level ? 1 : 1 << e4.key.level - t5.level) + a4, u3 = this._indexMapByTile.get(e4), h5 = u3?.get(n6);
      if (h5) for (const o5 of r8) {
        if (o5.uniqueSymbol) continue;
        const n7 = s2(this.tileCoordRange, o5.xTile, t5, e4.key), r9 = l2(this.tileCoordRange, o5.yTile, t5, e4.key), u4 = -20, c6 = this.tileCoordRange + a4;
        if (!(n7 >= u4 && n7 < c6 && r9 >= u4 && r9 < c6)) {
          l6.push(o5);
          continue;
        }
        const f3 = h5.getCandidate(n7, r9, o5.hash, y2), m2 = f3?.uniqueSymbol;
        m2 ? (o5.uniqueSymbol = m2, m2.tileSymbols.push(o5)) : l6.push(o5);
      }
      l6.length > 0 && o4.set(n6, l6);
    }
    for (const s4 of e4.childrenTiles || []) this._matchSymbols(s4, t5, o4);
  }
  _createUniqueSymbolLayerArray() {
    const e4 = this._uniqueSymbolsByStyleLayerId, t5 = new Array(e4.size);
    let s4, i3 = 0;
    for (const [l5, o4] of e4) {
      const e5 = new Array(o4.size);
      s4 = 0;
      for (const t6 of o4) e5[s4++] = t6;
      t5[i3] = { styleLayerUID: l5, uniqueSymbols: e5 }, i3++;
    }
    return t5;
  }
};
function h4(e4) {
  const t5 = /* @__PURE__ */ new Map();
  for (const s4 of e4) {
    const e5 = s4.labelClassId;
    let i3 = t5.get(e5);
    i3 || (i3 = [], t5.set(e5, i3)), i3.push(s4);
  }
  return t5;
}

// node_modules/@arcgis/core/views/2d/engine/vectorTiles/decluttering/SymbolFader.js
var a5 = 0.5;
var n5 = 1e-6;
var c5 = class {
  constructor(e4, s4, a6, c6, h5, y2 = c) {
    this.styleRepository = s4, this._declutterBudget = y2, this._tileToHandle = /* @__PURE__ */ new Map(), this._viewState = { scale: 0, rotation: 0, center: [0, 0], size: [0, 0] }, this._declutterViewState = { scale: 0, rotation: 0, center: [0, 0], size: [0, 0] }, this._offsetFromScreenCenter = [0, 0], this._completed = false, this._fading = r2(false);
    const _ = (t5, e5, i3) => this._createCollisionJob(t5, e5, i3), u3 = (t5) => {
      const e5 = this.styleRepository.getStyleLayerByUID?.(t5);
      if (e5) {
        if (this._zoom + n5 < e5.minzoom || this._zoom - n5 >= e5.maxzoom) return false;
        const t6 = e5.getLayoutProperty?.("visibility");
        if (t6 && t6.getValue() === a.NONE) return false;
      }
      return true;
    }, m2 = (t5, e5) => (this.styleRepository.getStyleLayerByUID?.(t5.styleLayerUID)?.z ?? 0) - (this.styleRepository.getStyleLayerByUID?.(e5.styleLayerUID)?.z ?? 0);
    this._symbolRepository = new u2(h5, c6), this._symbolDeclutterer = new n3(e4, c6, this._symbolRepository, this.styleRepository, _, a6, m2, u3);
  }
  get symbolRepository() {
    return this._symbolRepository;
  }
  _createCollisionJob(t5, i3, s4) {
    return this.updateDecluttererViewState(), new n2(t5, i3, s4, this.styleRepository, this._zoom, this._viewState.rotation);
  }
  get fading() {
    return this._fading.value;
  }
  get decluttererOffset() {
    return this._offsetFromScreenCenter;
  }
  registerFeatureTile(t5) {
    this.symbolRepository ? (this.symbolRepository.registerFeatureTile(t5), this.restartDeclutter()) : console.error("InternalError: Symbol repository not yet initialized");
  }
  unregisterFeatureTile(t5) {
    this.symbolRepository ? (this._symbolRepository.unregisterFeatureTile(t5), this.restartDeclutter()) : console.error("InternalError: Symbol repository not yet initialized");
  }
  insertFeatureTileMetrics(t5, e4) {
    this.symbolRepository ? (this.symbolRepository.insertFeatureTileMetrics(t5, e4), this.restartDeclutter()) : console.error("InternalError: Symbol repository not yet initialized");
  }
  removeFeatureTileMetrics(t5, e4) {
    this.symbolRepository ? (this.symbolRepository.removeFeatureTileMetrics(t5, e4), this.restartDeclutter()) : console.error("InternalError: Symbol repository not yet initialized");
  }
  addTile(t5) {
    t5.decluttered = false, this._tileToHandle.set(t5, t5.on("symbols-changed", () => {
      this._symbolRepository.registerVectorTile(t5), this.restartDeclutter();
    })), this._symbolRepository.registerVectorTile(t5), this.restartDeclutter();
  }
  removeTile(t5) {
    const e4 = this._tileToHandle.get(t5);
    e4 && (this._symbolRepository.unregisterVectorTile(t5), this.restartDeclutter(), e4.remove(), this._tileToHandle.delete(t5));
  }
  update(t5, e4) {
    this._zoom = t5, this._viewState = { scale: e4.scale, rotation: e4.rotation, center: [e4.center[0], e4.center[1]], size: [e4.size[0], e4.size[1]] };
    const i3 = [0, 0];
    e4.toScreen(i3, e4.center);
    const s4 = [0, 0];
    return e4.toScreen(s4, this._declutterViewState.center), this._offsetFromScreenCenter[0] = i3[0] - s4[0], this._offsetFromScreenCenter[1] = i3[1] - s4[1], this._continueDeclutter(), this._completed;
  }
  restartDeclutter() {
    this._completed = false, this._symbolDeclutterer.restart(), this._notifyUnstable();
  }
  clear() {
    this._completed = false, this._symbolRepository = null, this._symbolDeclutterer.restart(), this._tileToHandle.forEach((t5) => t5.remove()), this._tileToHandle.clear();
  }
  get stale() {
    return this._zoom !== this._declutterZoom || this._viewState.size[0] !== this._declutterViewState.size[0] || this._viewState.size[1] !== this._declutterViewState.size[1] || this._viewState.scale !== this._declutterViewState.scale || this._viewState.rotation !== this._declutterViewState.rotation;
  }
  deleteStyleLayers(t5) {
    this._symbolRepository.deleteStyleLayers(t5);
  }
  _continueDeclutter() {
    this._completed && !this.stale || (this._symbolDeclutterer.running || (this.updateDecluttererViewState(), this._symbolDeclutterer.restart()), this._symbolDeclutterer.setScreenSize(this._viewState.size[0], this._viewState.size[1]), this._completed = this._symbolDeclutterer.continue(this._declutterBudget), this._completed && this._scheduleNotifyStable());
  }
  _scheduleNotifyStable() {
    null != this._stableNotificationHandle && clearTimeout(this._stableNotificationHandle), this._stableNotificationHandle = setTimeout(() => {
      this._stableNotificationHandle = null, this._fading.value = false;
    }, (1 + a5) * e2);
  }
  _notifyUnstable() {
    null != this._stableNotificationHandle && (clearTimeout(this._stableNotificationHandle), this._stableNotificationHandle = null), this._fading.value = true;
  }
  updateDecluttererViewState() {
    this._declutterZoom = this._zoom, this._declutterViewState.center[0] = this._viewState.center[0], this._declutterViewState.center[1] = this._viewState.center[1], this._declutterViewState.rotation = this._viewState.rotation, this._declutterViewState.scale = this._viewState.scale, this._declutterViewState.size[0] = this._viewState.size[0], this._declutterViewState.size[1] = this._viewState.size[1], this._offsetFromScreenCenter[0] = 0, this._offsetFromScreenCenter[1] = 0;
  }
};

export {
  c2 as c,
  m,
  c5 as c2
};
//# sourceMappingURL=chunk-625W4ZH5.js.map
