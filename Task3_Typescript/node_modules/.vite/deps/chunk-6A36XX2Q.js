import {
  i
} from "./chunk-NCLK6YLE.js";
import {
  ht,
  te,
  ut
} from "./chunk-WKCCXG3E.js";
import {
  R,
  T
} from "./chunk-ZWJOMK2U.js";
import {
  v
} from "./chunk-XGWAEOLO.js";
import {
  z
} from "./chunk-DJJNSAUR.js";
import {
  s,
  y
} from "./chunk-N3A2BVTW.js";

// node_modules/@arcgis/core/symbols/cim/CIMSymbolRasterizer.js
var m = 96 / 72;
var g = class {
  constructor(e) {
    this._spatialReference = e, this._imageDataCanvas = null, this._cimResourceManager = new i();
  }
  get _canvas() {
    return this._imageDataCanvas || (this._imageDataCanvas = document.createElement("canvas")), this._imageDataCanvas;
  }
  get resourceManager() {
    return this._cimResourceManager;
  }
  async rasterizeCIMSymbolAsync(i2, r, h, o, m2, g2, c2, d, w, u) {
    if (!i2) return null;
    const { data: p } = i2;
    if (!p || "CIMSymbolReference" !== p.type || !p.symbol) return null;
    const { symbol: f } = p;
    g2 || (g2 = z(f));
    const x = await v.resolveSymbolOverrides(p, r, this._spatialReference, m2, g2, c2, d), b = this._cimResourceManager, M = [];
    te.fetchResources(x, b, M), te.fetchFonts(x, b, M), M.length > 0 && await Promise.all(M);
    const { width: C, height: R2 } = h;
    let v2 = y2(g2, C, R2, o, u);
    const I = te.getEnvelope(x, v2, b);
    if (!I) return null;
    I.x === 1 / 0 && (I.x = C + 2), I.y === 1 / 0 && (I.y = -R2 / 2), I.width === -1 / 0 && (I.width = C), I.height === -1 / 0 && (I.height = R2);
    let S = 1, _ = 0, P = 0;
    switch (f.type) {
      case "CIMPointSymbol":
      case "CIMTextSymbol":
        {
          let e = 1;
          I.width > C && (e = C / I.width);
          let t = 1;
          I.height > R2 && (t = R2 / I.height), "preview" === o && (I.width < C && (e = C / I.width), I.height < R2 && (t = R2 / I.height)), S = Math.min(e, t), _ = I.x + I.width / 2, P = I.y + I.height / 2;
        }
        break;
      case "CIMLineSymbol":
        if (u) {
          P = I.y + I.height / 2, _ = I.x + I.width / 2;
          const e = I.width - C, t = I.height - R2;
          v2 = { paths: T(v2.paths, { xmin: -1 * I.width / 2 + e, xmax: I.width / 2 - e, ymin: -1 * I.height / 2 + t, ymax: I.height / 2 - t, width: I.width - 2 * e, height: I.height - 2 * t }) };
        } else {
          (w || I.height > R2) && (S = R2 / I.height), P = I.y + I.height / 2;
          const i3 = I.x * S + C / 2, r2 = (I.x + I.width) * S + C / 2, h2 = s(v2) ? v2.paths : y(v2) ? v2.rings : null;
          if (null === h2) throw new Error("Bad geometry, can't rasterise symbol!");
          h2[0][0][0] -= i3 / S, h2[0][2][0] -= (r2 - C) / S;
        }
        break;
      case "CIMPolygonSymbol":
        if (u) {
          P = I.y + I.height / 2, _ = I.x + I.width / 2;
          const e = I.width - C, t = I.height - R2;
          v2 = { paths: T(v2.rings, { xmin: -1 * I.width / 2 + e, xmax: I.width / 2 - e, ymin: -1 * I.height / 2 + t, ymax: I.height / 2 - t, width: I.width - 2 * e, height: I.height - 2 * t }) };
        } else {
          _ = I.x + I.width / 2, P = I.y + I.height / 2;
          const e = I.x * S + C / 2, t = (I.x + I.width) * S + C / 2, i3 = I.y * S + R2 / 2, r2 = (I.y + I.height) * S + R2 / 2, { rings: h2 } = v2;
          e < 0 && (h2[0][0][0] -= e, h2[0][3][0] -= e, h2[0][4][0] -= e), i3 < 0 && (h2[0][0][1] += i3, h2[0][1][1] += i3, h2[0][4][1] += i3), t > C && (h2[0][1][0] -= t - C, h2[0][2][0] -= t - C), r2 > R2 && (h2[0][2][1] += r2 - R2, h2[0][3][1] += r2 - R2);
        }
    }
    const j = { type: "cim", data: { type: "CIMSymbolReference", symbol: x } };
    return this.rasterize(j, C, R2, _, P, S, g2, 1, v2);
  }
  rasterize(e, t, i2, s2, n, a, o, g2 = 0, c2 = null, d = window.devicePixelRatio || 1) {
    const { data: w } = e;
    if (!w || "CIMSymbolReference" !== w.type || !w.symbol) return null;
    const { symbol: u } = w, p = this._canvas, f = d * m;
    p.width = t * f, p.height = i2 * f, o || (o = z(u)), c2 || (c2 = y2(o, t, i2, "legend")), p.width += 2 * g2, p.height += 2 * g2;
    const x = p.getContext("2d", { willReadFrequently: true }), b = ht.createIdentity();
    b.translate(-s2, -n), b.scale(a * f, -a * f), b.translate(t * f / 2 + g2, i2 * f / 2 + g2), x.clearRect(0, 0, p.width, p.height);
    return new ut(x, this._cimResourceManager, b, true).drawSymbol(u, c2), x.getImageData(0, 0, p.width, p.height);
  }
};
function c(e, t, i2, r) {
  if ("esriGeometryPolygon" === t) {
    return { rings: R(T(e.rings, { xmin: 0, ymin: 0, width: i2, height: r }), -1 * i2 / 2, -1 * r / 2) };
  }
  if ("esriGeometryPolyline" === t) {
    return { paths: R(T(e.paths, { xmin: 0, ymin: 0, width: i2, height: r }), -1 * i2 / 2, -1 * r / 2) };
  }
  return null;
}
function y2(e, t, i2, r, h) {
  const s2 = 1, n = -t / 2 + s2, a = t / 2 - s2, o = i2 / 2 - s2, l = -i2 / 2 + s2;
  if (h && ("esriGeometryPolygon" === e || "esriGeometryPolyline" === e)) {
    const r2 = c(h, e, t, i2);
    if (r2) return r2;
  }
  switch (e) {
    case "esriGeometryPoint":
      return { x: 0, y: 0 };
    case "esriGeometryPolyline":
      return { paths: [[[n, 0], [0, 0], [a, 0]]] };
    default:
      return "legend" === r ? { rings: [[[n, o], [a, 0], [a, l], [n, l], [n, o]]] } : { rings: [[[n, o], [a, o], [a, l], [n, l], [n, o]]] };
  }
}

export {
  g
};
//# sourceMappingURL=chunk-6A36XX2Q.js.map
