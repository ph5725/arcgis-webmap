import {
  n
} from "./chunk-UWJW6IHR.js";
import {
  s as s2
} from "./chunk-2LU4NAEM.js";
import {
  s
} from "./chunk-NEBU5XJO.js";
import {
  P,
  m as m2
} from "./chunk-52HWRRRQ.js";
import {
  y
} from "./chunk-OGOQOMMV.js";
import {
  o
} from "./chunk-JUAPMINU.js";
import {
  r as r2
} from "./chunk-YFPGM5UE.js";
import {
  l
} from "./chunk-E3KEUGUG.js";
import {
  m
} from "./chunk-N3XLUQJI.js";
import {
  a2 as a
} from "./chunk-JUAD7TJ6.js";
import {
  r
} from "./chunk-5TPMG26T.js";

// node_modules/@arcgis/core/rest/networks/support/AggregatedGeometry.js
var n2 = class extends l {
  constructor(o2) {
    super(o2), this.line = null, this.multipoint = null, this.polygon = null;
  }
};
r([m({ type: y, json: { write: true }, readOnly: true })], n2.prototype, "line", void 0), r([m({ type: m2, json: { read: { source: "point" }, write: { target: "point" } }, readOnly: true })], n2.prototype, "multipoint", void 0), r([m({ type: P, json: { write: true }, readOnly: true })], n2.prototype, "polygon", void 0), n2 = r([a("esri.rest.networks.support.AggregatedGeometry")], n2);
var l2 = n2;

// node_modules/@arcgis/core/rest/networks/support/CircuitPathConnectivityElement.js
var c = class extends l {
  constructor(e) {
    super(e), this.edgeElement = null, this.junctionElement = null;
  }
  readEdgeElement(e, t) {
    return new s2({ networkSourceId: t.edgeNetworkSourceId, globalId: t.edgeGlobalId, objectId: t.edgeObjectId, positionFrom: t.edgePositionFrom, positionTo: t.edgePositionTo, firstUnit: t.edgeFirstUnit, numUnits: t.edgeNumUnits });
  }
  writeEdgeElement(e, t) {
    t.edgeNetworkSourceId = e.networkSourceId, t.edgeGlobalId = e.globalId, t.edgeObjectId = e.objectId, t.edgePositionFrom = e.positionFrom, t.edgePositionTo = e.positionTo, t.edgeFirstUnit = e.firstUnit, t.edgeNumUnits = e.numUnits;
  }
  readJunctionElement(e, t) {
    return new s2({ networkSourceId: t.junctionNetworkSourceId, globalId: t.junctionGlobalId, objectId: t.junctionObjectId, terminalId: t.junctionTerminalId, firstUnit: t.junctionFirstUnit, numUnits: t.junctionNumUnits });
  }
  writeJunctionElement(e, t) {
    t.junctionNetworkSourceId = e.networkSourceId, t.junctionGlobalId = e.globalId, t.junctionObjectId = e.objectId, t.junctionTerminalId = e.terminalId, t.junctionFirstUnit = e.firstUnit, t.junctionNumUnits = e.numUnits;
  }
};
r([m({ type: s2, json: { read: { source: ["edgeNetworkSourceId", "edgeGlobalId", "edgeObjectId", "edgePositionFrom", "edgePositionTo", "edgeFirstUnit", "edgeNumUnits"] }, write: true } })], c.prototype, "edgeElement", void 0), r([o("edgeElement")], c.prototype, "readEdgeElement", null), r([r2("edgeElement")], c.prototype, "writeEdgeElement", null), r([m({ type: s2, json: { read: { source: ["junctionNetworkSourceId", "junctionGlobalId", "junctionObjectId", "junctionTerminalId", "junctionFirstUnit", "junctionNumUnits"] }, write: true } })], c.prototype, "junctionElement", void 0), r([o("junctionElement")], c.prototype, "readJunctionElement", null), r([r2("junctionElement")], c.prototype, "writeJunctionElement", null), c = r([a("esri.rest.networks.support.CircuitPathConnectivityElement")], c);
var s3 = c;

// node_modules/@arcgis/core/rest/networks/support/CircuitPath.js
var n3 = class extends l {
  constructor(t) {
    super(t), this.pathId = null, this.orderId = null, this.startingPoint = null, this.stoppingPoint = null, this.pathConnectivity = [], this.geometry = null;
  }
};
r([m({ type: Number, json: { write: true } })], n3.prototype, "pathId", void 0), r([m({ type: Number, json: { write: true } })], n3.prototype, "orderId", void 0), r([m({ type: n, json: { write: true } })], n3.prototype, "startingPoint", void 0), r([m({ type: n, json: { write: true } })], n3.prototype, "stoppingPoint", void 0), r([m({ type: [s3], json: { write: true } })], n3.prototype, "pathConnectivity", void 0), r([m({ type: y, json: { write: true } })], n3.prototype, "geometry", void 0), n3 = r([a("esri.rest.networks.support.CircuitPath")], n3);
var c2 = n3;

// node_modules/@arcgis/core/rest/networks/support/CircuitTraceResult.js
var a2 = class extends l {
  constructor(t) {
    super(t), this.circuit = null, this.geometry = null, this.path = null;
  }
  readCircuit(t, o2) {
    const r3 = o2.sections?.map((t2) => ({ ...t2, path: c2.fromJSON(t2.path) }));
    return { name: o2.name, globalId: o2.globalId, isSectioned: o2.isSectioned, sectionOrder: o2.sectionOrder, startLocation: o2.startLocation, stopLocation: o2.stopLocation, sections: r3, subcircuits: o2.subcircuits, lastVerifiedTime: o2.lastVerifiedTime ? new Date(o2.lastVerifiedTime) : null, lastExportedTime: o2.lastExportedTime ? new Date(o2.lastExportedTime) : null, circuitType: o2.circuitType, status: o2.status };
  }
};
r([m({ type: Object, json: { write: true, read: { source: ["name", "globalId", "isSectioned", "sectionOrder", "startLocation", "stopLocation", "sections", "subcircuits", "lastVerifiedTime", "lastExportedTime", "circuitType", "status"] } } })], a2.prototype, "circuit", void 0), r([o("circuit")], a2.prototype, "readCircuit", null), r([m({ type: y, json: { write: true } })], a2.prototype, "geometry", void 0), r([m({ type: c2, json: { write: true } })], a2.prototype, "path", void 0), a2 = r([a("esri.rest.networks.support.CircuitTraceResult")], a2);
var p = a2;

// node_modules/@arcgis/core/rest/networks/support/FunctionResult.js
var s4 = class extends l {
  constructor(t) {
    super(t), this.functionType = null, this.networkAttributeName = null, this.result = null;
  }
};
r([m({ type: ["add", "subtract", "average", "count", "min", "max"], json: { write: true }, readOnly: true })], s4.prototype, "functionType", void 0), r([m({ type: String, json: { write: true }, readOnly: true })], s4.prototype, "networkAttributeName", void 0), r([m({ type: Number, json: { write: true }, readOnly: true })], s4.prototype, "result", void 0), s4 = r([a("esri.rest.networks.support.FunctionResult")], s4);
var p2 = s4;

// node_modules/@arcgis/core/rest/networks/support/TraceResult.js
var c3 = class extends l {
  constructor(e) {
    super(e), this.aggregatedGeometry = null, this.circuits = null, this.elements = null, this.globalFunctionResults = null, this.kFeaturesForKNNFound = false, this.paths = null, this.startingPointsIgnored = false, this.warnings = null;
  }
  readNetworkElements(e, t) {
    return null != t.elements ? t.elements.map((e2) => "firstUnit" in e2 && "numUnits" in e2 ? new s2({ ...e2 }) : new s({ ...e2 })) : [];
  }
  writeNetworkElements(e, t) {
    t.elements = e.map((e2) => e2.toJSON());
  }
};
r([m({ type: l2, json: { write: true }, readOnly: true })], c3.prototype, "aggregatedGeometry", void 0), r([m({ type: [p], json: { write: true }, readOnly: true })], c3.prototype, "circuits", void 0), r([m({ type: [s], json: { write: true }, readOnly: true })], c3.prototype, "elements", void 0), r([o("elements")], c3.prototype, "readNetworkElements", null), r([r2("elements")], c3.prototype, "writeNetworkElements", null), r([m({ type: [p2], json: { write: true }, readOnly: true })], c3.prototype, "globalFunctionResults", void 0), r([m({ type: Boolean, json: { write: true }, readOnly: true })], c3.prototype, "kFeaturesForKNNFound", void 0), r([m({ type: [c2], json: { write: true }, readOnly: true })], c3.prototype, "paths", void 0), r([m({ type: Boolean, json: { write: true }, readOnly: true })], c3.prototype, "startingPointsIgnored", void 0), r([m({ type: [String], json: { write: true }, readOnly: true })], c3.prototype, "warnings", void 0), c3 = r([a("esri.rest.networks.support.TraceResult")], c3);

export {
  c3 as c
};
//# sourceMappingURL=chunk-6BVAE5VM.js.map
