import {
  s as s2
} from "./chunk-YSRSL2SU.js";
import {
  o
} from "./chunk-TMFB3DKM.js";
import {
  o as o2
} from "./chunk-TNW4TPNP.js";
import {
  s
} from "./chunk-IVNFIIVI.js";

// node_modules/@arcgis/core/geometry/support/float16.js
var n = globalThis.Float16Array;
function t(...t5) {
  return new (n ?? Float32Array)(...t5);
}
function l() {
  return n;
}
var r = !!n;

// node_modules/@arcgis/core/geometry/support/buffer/internals/Mat3.js
var _t = class _t {
  constructor(t5, e4, r2 = 0, f2, s3) {
    this.TypedArrayConstructor = t5, this.elementCount = 9;
    const i = this.TypedArrayConstructor;
    void 0 === f2 && (f2 = 9 * i.BYTES_PER_ELEMENT);
    const d2 = 0 === e4.byteLength ? 0 : r2;
    this.typedBuffer = null == s3 ? new i(e4, d2) : new i(e4, d2, (s3 - r2) / i.BYTES_PER_ELEMENT), this.typedBufferStride = f2 / i.BYTES_PER_ELEMENT, this.count = Math.ceil(this.typedBuffer.length / this.typedBufferStride), this.stride = this.typedBufferStride * this.TypedArrayConstructor.BYTES_PER_ELEMENT;
  }
  sliceBuffer(t5, e4, r2 = this.count - e4) {
    const f2 = this.typedBuffer.byteOffset + e4 * this.stride;
    return new t5(this.buffer, f2, this.stride, f2 + r2 * this.stride);
  }
  getMat(t5, e4) {
    let r2 = t5 * this.typedBufferStride;
    for (let f2 = 0; f2 < 9; f2++) e4[f2] = this.typedBuffer[r2++];
    return e4;
  }
  setMat(t5, e4) {
    let r2 = t5 * this.typedBufferStride;
    for (let f2 = 0; f2 < 9; f2++) this.typedBuffer[r2++] = e4[f2];
  }
  get(t5, e4) {
    return this.typedBuffer[t5 * this.typedBufferStride + e4];
  }
  set(t5, e4, r2) {
    this.typedBuffer[t5 * this.typedBufferStride + e4] = r2;
  }
  copyFrom(t5, e4, r2) {
    const f2 = this.typedBuffer, s3 = e4.typedBuffer;
    let i = t5 * this.typedBufferStride, d2 = r2 * e4.typedBufferStride;
    for (let u = 0; u < 9; ++u) f2[i++] = s3[d2++];
  }
  get buffer() {
    return this.typedBuffer.buffer;
  }
};
_t.ElementCount = 9;
var t2 = _t;

// node_modules/@arcgis/core/geometry/support/buffer/internals/Mat4.js
var _t2 = class _t2 {
  constructor(t5, e4, r2 = 0, f2, s3) {
    this.TypedArrayConstructor = t5, this.elementCount = 16;
    const i = this.TypedArrayConstructor;
    void 0 === f2 && (f2 = 16 * i.BYTES_PER_ELEMENT);
    const d2 = 0 === e4.byteLength ? 0 : r2;
    this.typedBuffer = null == s3 ? new i(e4, d2) : new i(e4, d2, (s3 - r2) / i.BYTES_PER_ELEMENT), this.typedBufferStride = f2 / i.BYTES_PER_ELEMENT, this.count = Math.ceil(this.typedBuffer.length / this.typedBufferStride), this.stride = this.typedBufferStride * this.TypedArrayConstructor.BYTES_PER_ELEMENT;
  }
  sliceBuffer(t5, e4, r2 = this.count - e4) {
    const f2 = this.typedBuffer.byteOffset + e4 * this.stride;
    return new t5(this.buffer, f2, this.stride, f2 + r2 * this.stride);
  }
  getMat(t5, e4) {
    let r2 = t5 * this.typedBufferStride;
    for (let f2 = 0; f2 < 16; f2++) e4[f2] = this.typedBuffer[r2++];
    return e4;
  }
  setMat(t5, e4) {
    let r2 = t5 * this.typedBufferStride;
    for (let f2 = 0; f2 < 16; f2++) this.typedBuffer[r2++] = e4[f2];
  }
  get(t5, e4) {
    return this.typedBuffer[t5 * this.typedBufferStride + e4];
  }
  set(t5, e4, r2) {
    this.typedBuffer[t5 * this.typedBufferStride + e4] = r2;
  }
  copyFrom(t5, e4, r2) {
    this.copyFromTypedBuffer(t5, e4.typedBuffer, r2 * e4.typedBufferStride);
  }
  copyFromTypedBuffer(t5, e4, r2) {
    const f2 = this.typedBuffer;
    let s3 = t5 * this.typedBufferStride;
    for (let i = 0; i < 16; ++i) f2[s3++] = e4[r2++];
  }
  get buffer() {
    return this.typedBuffer.buffer;
  }
};
_t2.ElementCount = 16;
var t3 = _t2;

// node_modules/@arcgis/core/geometry/support/buffer/internals/Scalar.js
var _t3 = class _t3 {
  constructor(t5, e4, r2 = 0, s3, i) {
    this.TypedArrayConstructor = t5, this.elementCount = 1;
    const f2 = this.TypedArrayConstructor;
    void 0 === s3 && (s3 = f2.BYTES_PER_ELEMENT);
    const u = 0 === e4.byteLength ? 0 : r2;
    this.typedBuffer = null == i ? new f2(e4, u) : new f2(e4, u, (i - r2) / f2.BYTES_PER_ELEMENT), this.stride = s3, this.typedBufferStride = s3 / f2.BYTES_PER_ELEMENT, this.count = Math.ceil(this.typedBuffer.length / this.typedBufferStride);
  }
  sliceBuffer(t5, e4, r2 = this.count - e4) {
    const s3 = this.typedBuffer.byteOffset + e4 * this.stride;
    return new t5(this.buffer, s3, this.stride, s3 + r2 * this.stride);
  }
  get(t5) {
    return this.typedBuffer[t5 * this.typedBufferStride];
  }
  set(t5, e4) {
    this.typedBuffer[t5 * this.typedBufferStride] = e4;
  }
  get buffer() {
    return this.typedBuffer.buffer;
  }
};
_t3.ElementCount = 1;
var t4 = _t3;

// node_modules/@arcgis/core/geometry/support/buffer/internals/Vec2.js
var _e = class _e {
  constructor(t5, e4, r2 = 0, f2, s3) {
    this.TypedArrayConstructor = t5, this.start = r2, this.elementCount = 2;
    const i = this.TypedArrayConstructor;
    void 0 === f2 && (f2 = 2 * i.BYTES_PER_ELEMENT);
    const d2 = 0 === e4.byteLength ? 0 : r2;
    this.typedBuffer = null == s3 ? new i(e4, d2) : new i(e4, d2, (s3 - r2) / i.BYTES_PER_ELEMENT), this.typedBufferStride = f2 / i.BYTES_PER_ELEMENT, this.count = Math.ceil(this.typedBuffer.length / this.typedBufferStride), this.stride = this.typedBufferStride * this.TypedArrayConstructor.BYTES_PER_ELEMENT;
  }
  sliceBuffer(t5, e4, r2 = this.count - e4) {
    const f2 = this.typedBuffer.byteOffset + e4 * this.stride;
    return new t5(this.buffer, f2, this.stride, f2 + r2 * this.stride);
  }
  getVec(e4, r2) {
    return e4 *= this.typedBufferStride, o2(r2, this.typedBuffer[e4], this.typedBuffer[e4 + 1]);
  }
  setVec(t5, e4) {
    t5 *= this.typedBufferStride, this.typedBuffer[t5++] = e4[0], this.typedBuffer[t5] = e4[1];
  }
  get(t5, e4) {
    return this.typedBuffer[t5 * this.typedBufferStride + e4];
  }
  set(t5, e4, r2) {
    this.typedBuffer[t5 * this.typedBufferStride + e4] = r2;
  }
  setValues(t5, e4, r2) {
    t5 *= this.typedBufferStride, this.typedBuffer[t5++] = e4, this.typedBuffer[t5] = r2;
  }
  copyFrom(t5, e4, r2) {
    const f2 = this.typedBuffer, s3 = e4.typedBuffer;
    let i = t5 * this.typedBufferStride, d2 = r2 * e4.typedBufferStride;
    f2[i++] = s3[d2++], f2[i] = s3[d2];
  }
  get buffer() {
    return this.typedBuffer.buffer;
  }
};
_e.ElementCount = 2;
var e = _e;

// node_modules/@arcgis/core/geometry/support/buffer/internals/Vec3.js
var _e2 = class _e2 {
  constructor(t5, e4, r2 = 0, f2, s3) {
    this.TypedArrayConstructor = t5, this.elementCount = 3;
    const i = this.TypedArrayConstructor;
    void 0 === f2 && (f2 = 3 * i.BYTES_PER_ELEMENT);
    const u = 0 === e4.byteLength ? 0 : r2;
    this.typedBuffer = null == s3 ? new i(e4, u) : new i(e4, u, (s3 - r2) / i.BYTES_PER_ELEMENT), this.typedBufferStride = f2 / i.BYTES_PER_ELEMENT, this.count = Math.ceil(this.typedBuffer.length / this.typedBufferStride), this.stride = this.typedBufferStride * this.TypedArrayConstructor.BYTES_PER_ELEMENT;
  }
  sliceBuffer(t5, e4, r2 = this.count - e4) {
    const f2 = this.typedBuffer.byteOffset + e4 * this.stride;
    return new t5(this.buffer, f2, this.stride, f2 + r2 * this.stride);
  }
  getVec(e4, r2) {
    return e4 *= this.typedBufferStride, o(r2, this.typedBuffer[e4], this.typedBuffer[e4 + 1], this.typedBuffer[e4 + 2]);
  }
  setVec(t5, e4) {
    t5 *= this.typedBufferStride, this.typedBuffer[t5++] = e4[0], this.typedBuffer[t5++] = e4[1], this.typedBuffer[t5] = e4[2];
  }
  get(t5, e4) {
    return this.typedBuffer[t5 * this.typedBufferStride + e4];
  }
  set(t5, e4, r2) {
    this.typedBuffer[t5 * this.typedBufferStride + e4] = r2;
  }
  setValues(t5, e4, r2, f2) {
    t5 *= this.typedBufferStride, this.typedBuffer[t5++] = e4, this.typedBuffer[t5++] = r2, this.typedBuffer[t5] = f2;
  }
  copyFrom(t5, e4, r2) {
    const f2 = this.typedBuffer, s3 = e4.typedBuffer;
    let i = t5 * this.typedBufferStride, u = r2 * e4.typedBufferStride;
    f2[i++] = s3[u++], f2[i++] = s3[u++], f2[i] = s3[u];
  }
  get buffer() {
    return this.typedBuffer.buffer;
  }
};
_e2.ElementCount = 3;
var e2 = _e2;

// node_modules/@arcgis/core/geometry/support/buffer/internals/Vec4.js
var _e3 = class _e3 {
  constructor(t5, e4, r2 = 0, f2, s3) {
    this.TypedArrayConstructor = t5, this.start = r2, this.elementCount = 4;
    const i = this.TypedArrayConstructor;
    void 0 === f2 && (f2 = 4 * i.BYTES_PER_ELEMENT);
    const u = 0 === e4.byteLength ? 0 : r2;
    this.typedBuffer = null == s3 ? new i(e4, u) : new i(e4, u, (s3 - r2) / i.BYTES_PER_ELEMENT), this.typedBufferStride = f2 / i.BYTES_PER_ELEMENT, this.count = Math.ceil(this.typedBuffer.length / this.typedBufferStride), this.stride = this.typedBufferStride * this.TypedArrayConstructor.BYTES_PER_ELEMENT;
  }
  sliceBuffer(t5, e4, r2 = this.count - e4) {
    const f2 = this.typedBuffer.byteOffset + e4 * this.stride;
    return new t5(this.buffer, f2, this.stride, f2 + r2 * this.stride);
  }
  getVec(e4, r2) {
    return e4 *= this.typedBufferStride, s(r2, this.typedBuffer[e4++], this.typedBuffer[e4++], this.typedBuffer[e4++], this.typedBuffer[e4]);
  }
  setVec(t5, e4) {
    t5 *= this.typedBufferStride, this.typedBuffer[t5++] = e4[0], this.typedBuffer[t5++] = e4[1], this.typedBuffer[t5++] = e4[2], this.typedBuffer[t5] = e4[3];
  }
  get(t5, e4) {
    return this.typedBuffer[t5 * this.typedBufferStride + e4];
  }
  set(t5, e4, r2) {
    this.typedBuffer[t5 * this.typedBufferStride + e4] = r2;
  }
  setValues(t5, e4, r2, f2, s3) {
    t5 *= this.typedBufferStride, this.typedBuffer[t5++] = e4, this.typedBuffer[t5++] = r2, this.typedBuffer[t5++] = f2, this.typedBuffer[t5] = s3;
  }
  copyFrom(t5, e4, r2) {
    const f2 = this.typedBuffer, s3 = e4.typedBuffer;
    let i = t5 * this.typedBufferStride, u = r2 * e4.typedBufferStride;
    f2[i++] = s3[u++], f2[i++] = s3[u++], f2[i++] = s3[u++], f2[i] = s3[u];
  }
  get buffer() {
    return this.typedBuffer.buffer;
  }
};
_e3.ElementCount = 4;
var e3 = _e3;

// node_modules/@arcgis/core/geometry/support/buffer/BufferView.js
var _a = class _a extends t4 {
  constructor(s3, r2 = 0, i, n2) {
    s2(r), super(l(), s3, r2, i, n2), this.elementType = "f16";
  }
};
_a.ElementType = "f16";
var a = _a;
var _f = class _f extends t4 {
  constructor(e4, t5 = 0, s3, r2) {
    super(Float32Array, e4, t5, s3, r2), this.elementType = "f32";
  }
};
_f.ElementType = "f32";
var f = _f;
var _p = class _p extends e {
  constructor(s3, r2 = 0, i, n2) {
    s2(r), super(l(), s3, r2, i, n2), this.elementType = "f16";
  }
  slice(e4, t5) {
    return this.sliceBuffer(_p, e4, t5);
  }
};
_p.ElementType = "f16";
var p = _p;
var _y = class _y extends e {
  constructor(e4, t5 = 0, s3, r2) {
    super(Float32Array, e4, t5, s3, r2), this.elementType = "f32";
  }
  slice(e4, t5) {
    return this.sliceBuffer(_y, e4, t5);
  }
};
_y.ElementType = "f32";
var y = _y;
var _h = class _h extends e2 {
  constructor(s3, r2 = 0, i, n2) {
    s2(r), super(l(), s3, r2, i, n2), this.elementType = "f16";
  }
  slice(e4, t5) {
    return this.sliceBuffer(_h, e4, t5);
  }
};
_h.ElementType = "f16";
var h = _h;
var _o = class _o extends e2 {
  constructor(e4, t5 = 0, s3, r2) {
    super(Float32Array, e4, t5, s3, r2), this.elementType = "f32";
  }
  slice(e4, t5) {
    return this.sliceBuffer(_o, e4, t5);
  }
  static fromTypedArray(e4, t5) {
    return new _o(e4.buffer, e4.byteOffset, t5, e4.byteOffset + e4.byteLength);
  }
};
_o.ElementType = "f32";
var o3 = _o;
var _m = class _m extends e3 {
  constructor(s3, r2 = 0, i, n2) {
    s2(r), super(l(), s3, r2, i, n2), this.elementType = "f16";
  }
  slice(e4, t5) {
    return this.sliceBuffer(_m, e4, t5);
  }
};
_m.ElementType = "f16";
var m = _m;
var _T = class _T extends e3 {
  constructor(e4, t5 = 0, s3, r2) {
    super(Float32Array, e4, t5, s3, r2), this.elementType = "f32";
  }
  slice(e4, t5) {
    return this.sliceBuffer(_T, e4, t5);
  }
};
_T.ElementType = "f32";
var T = _T;
var _d = class _d extends t2 {
  constructor(e4, t5 = 0, s3, r2) {
    super(Float32Array, e4, t5, s3, r2), this.elementType = "f32";
  }
  slice(e4, t5) {
    return this.sliceBuffer(_d, e4, t5);
  }
};
_d.ElementType = "f32";
var d = _d;
var _x = class _x extends t2 {
  constructor(e4, t5 = 0, s3, r2) {
    super(Float64Array, e4, t5, s3, r2), this.elementType = "f64";
  }
  slice(e4, t5) {
    return this.sliceBuffer(_x, e4, t5);
  }
};
_x.ElementType = "f64";
var x = _x;
var _E = class _E extends t3 {
  constructor(e4, t5 = 0, s3, r2) {
    super(Float32Array, e4, t5, s3, r2), this.elementType = "f32";
  }
  slice(e4, t5) {
    return this.sliceBuffer(_E, e4, t5);
  }
};
_E.ElementType = "f32";
var E = _E;
var _A = class _A extends t3 {
  constructor(e4, t5 = 0, s3, r2) {
    super(Float64Array, e4, t5, s3, r2), this.elementType = "f64";
  }
  slice(e4, t5) {
    return this.sliceBuffer(_A, e4, t5);
  }
};
_A.ElementType = "f64";
var A = _A;
var _B = class _B extends t4 {
  constructor(e4, t5 = 0, s3, r2) {
    super(Float64Array, e4, t5, s3, r2), this.elementType = "f64";
  }
  slice(e4, t5) {
    return this.sliceBuffer(_B, e4, t5);
  }
};
_B.ElementType = "f64";
var B = _B;
var _b = class _b extends e {
  constructor(e4, t5 = 0, s3, r2) {
    super(Float64Array, e4, t5, s3, r2), this.elementType = "f64";
  }
  slice(e4, t5) {
    return this.sliceBuffer(_b, e4, t5);
  }
};
_b.ElementType = "f64";
var b = _b;
var _U = class _U extends e2 {
  constructor(e4, t5 = 0, s3, r2) {
    super(Float64Array, e4, t5, s3, r2), this.elementType = "f64";
  }
  slice(e4, t5) {
    return this.sliceBuffer(_U, e4, t5);
  }
  static fromTypedArray(e4, t5) {
    return new _U(e4.buffer, e4.byteOffset, t5, e4.byteOffset + e4.byteLength);
  }
};
_U.ElementType = "f64";
var U = _U;
var _F = class _F extends e3 {
  constructor(e4, t5 = 0, s3, r2) {
    super(Float64Array, e4, t5, s3, r2), this.elementType = "f64";
  }
  slice(e4, t5) {
    return this.sliceBuffer(_F, e4, t5);
  }
};
_F.ElementType = "f64";
var F = _F;
var _I = class _I extends t4 {
  constructor(e4, t5 = 0, s3, r2) {
    super(Uint8Array, e4, t5, s3, r2), this.elementType = "u8";
  }
  slice(e4, t5) {
    return this.sliceBuffer(_I, e4, t5);
  }
};
_I.ElementType = "u8";
var I = _I;
var _j = class _j extends e {
  constructor(e4, t5 = 0, s3, r2) {
    super(Uint8Array, e4, t5, s3, r2), this.elementType = "u8";
  }
  slice(e4, t5) {
    return this.sliceBuffer(_j, e4, t5);
  }
};
_j.ElementType = "u8";
var j = _j;
var _O = class _O extends e2 {
  constructor(e4, t5 = 0, s3, r2) {
    super(Uint8Array, e4, t5, s3, r2), this.elementType = "u8";
  }
  slice(e4, t5) {
    return this.sliceBuffer(_O, e4, t5);
  }
  static fromTypedArray(e4, t5) {
    return new _O(e4.buffer, e4.byteOffset, t5, e4.byteOffset + e4.byteLength);
  }
};
_O.ElementType = "u8";
var O = _O;
var _g = class _g extends e3 {
  constructor(e4, t5 = 0, s3, r2) {
    super(Uint8Array, e4, t5, s3, r2), this.elementType = "u8";
  }
  slice(e4, t5) {
    return this.sliceBuffer(_g, e4, t5);
  }
};
_g.ElementType = "u8";
var g = _g;
var _w = class _w extends t4 {
  constructor(e4, t5 = 0, s3, r2) {
    super(Uint16Array, e4, t5, s3, r2), this.elementType = "u16";
  }
  slice(e4, t5) {
    return this.sliceBuffer(_w, e4, t5);
  }
};
_w.ElementType = "u16";
var w = _w;
var _L = class _L extends e {
  constructor(e4, t5 = 0, s3, r2) {
    super(Uint16Array, e4, t5, s3, r2), this.elementType = "u16";
  }
  slice(e4, t5) {
    return this.sliceBuffer(_L, e4, t5);
  }
};
_L.ElementType = "u16";
var L = _L;
var _V = class _V extends e2 {
  constructor(e4, t5 = 0, s3, r2) {
    super(Uint16Array, e4, t5, s3, r2), this.elementType = "u16";
  }
  slice(e4, t5) {
    return this.sliceBuffer(_V, e4, t5);
  }
};
_V.ElementType = "u16";
var V = _V;
var _M = class _M extends e3 {
  constructor(e4, t5 = 0, s3, r2) {
    super(Uint16Array, e4, t5, s3, r2), this.elementType = "u16";
  }
  slice(e4, t5) {
    return this.sliceBuffer(_M, e4, t5);
  }
};
_M.ElementType = "u16";
var M = _M;
var _v = class _v extends t4 {
  constructor(e4, t5 = 0, s3, r2) {
    super(Uint32Array, e4, t5, s3, r2), this.elementType = "u32";
  }
  slice(e4, t5) {
    return this.sliceBuffer(_v, e4, t5);
  }
};
_v.ElementType = "u32";
var v = _v;
var _S = class _S extends e {
  constructor(e4, t5 = 0, s3, r2) {
    super(Uint32Array, e4, t5, s3, r2), this.elementType = "u32";
  }
  slice(e4, t5) {
    return this.sliceBuffer(_S, e4, t5);
  }
};
_S.ElementType = "u32";
var S = _S;
var _k = class _k extends e2 {
  constructor(e4, t5 = 0, s3, r2) {
    super(Uint32Array, e4, t5, s3, r2), this.elementType = "u32";
  }
  slice(e4, t5) {
    return this.sliceBuffer(_k, e4, t5);
  }
};
_k.ElementType = "u32";
var k = _k;
var _q = class _q extends e3 {
  constructor(e4, t5 = 0, s3, r2) {
    super(Uint32Array, e4, t5, s3, r2), this.elementType = "u32";
  }
  slice(e4, t5) {
    return this.sliceBuffer(_q, e4, t5);
  }
};
_q.ElementType = "u32";
var q = _q;
var _z = class _z extends t4 {
  constructor(e4, t5 = 0, s3, r2) {
    super(Int8Array, e4, t5, s3, r2), this.elementType = "i8";
  }
  slice(e4, t5) {
    return this.sliceBuffer(_z, e4, t5);
  }
};
_z.ElementType = "i8";
var z = _z;
var _C = class _C extends e {
  constructor(e4, t5 = 0, s3, r2) {
    super(Int8Array, e4, t5, s3, r2), this.elementType = "i8";
  }
  slice(e4, t5) {
    return this.sliceBuffer(_C, e4, t5);
  }
};
_C.ElementType = "i8";
var C = _C;
var _D = class _D extends e2 {
  constructor(e4, t5 = 0, s3, r2) {
    super(Int8Array, e4, t5, s3, r2), this.elementType = "i8";
  }
  slice(e4, t5) {
    return this.sliceBuffer(_D, e4, t5);
  }
};
_D.ElementType = "i8";
var D = _D;
var _G = class _G extends e3 {
  constructor(e4, t5 = 0, s3, r2) {
    super(Int8Array, e4, t5, s3, r2), this.elementType = "i8";
  }
  slice(e4, t5) {
    return this.sliceBuffer(_G, e4, t5);
  }
};
_G.ElementType = "i8";
var G = _G;
var _H = class _H extends t4 {
  constructor(e4, t5 = 0, s3, r2) {
    super(Int16Array, e4, t5, s3, r2), this.elementType = "i16";
  }
  slice(e4, t5) {
    return this.sliceBuffer(_H, e4, t5);
  }
};
_H.ElementType = "i16";
var H = _H;
var _J = class _J extends e {
  constructor(e4, t5 = 0, s3, r2) {
    super(Int16Array, e4, t5, s3, r2), this.elementType = "i16";
  }
  slice(e4, t5) {
    return this.sliceBuffer(_J, e4, t5);
  }
};
_J.ElementType = "i16";
var J = _J;
var _K = class _K extends e2 {
  constructor(e4, t5 = 0, s3, r2) {
    super(Int16Array, e4, t5, s3, r2), this.elementType = "i16";
  }
  slice(e4, t5) {
    return this.sliceBuffer(_K, e4, t5);
  }
};
_K.ElementType = "i16";
var K = _K;
var _N = class _N extends e3 {
  constructor(e4, t5 = 0, s3, r2) {
    super(Int16Array, e4, t5, s3, r2), this.elementType = "i16";
  }
  slice(e4, t5) {
    return this.sliceBuffer(_N, e4, t5);
  }
};
_N.ElementType = "i16";
var N = _N;
var _P = class _P extends t4 {
  constructor(e4, t5 = 0, s3, r2) {
    super(Int32Array, e4, t5, s3, r2), this.elementType = "i32";
  }
  slice(e4, t5) {
    return this.sliceBuffer(_P, e4, t5);
  }
};
_P.ElementType = "i32";
var P = _P;
var _Q = class _Q extends e {
  constructor(e4, t5 = 0, s3, r2) {
    super(Int32Array, e4, t5, s3, r2), this.elementType = "i32";
  }
  slice(e4, t5) {
    return this.sliceBuffer(_Q, e4, t5);
  }
};
_Q.ElementType = "i32";
var Q = _Q;
var _R = class _R extends e2 {
  constructor(e4, t5 = 0, s3, r2) {
    super(Int32Array, e4, t5, s3, r2), this.elementType = "i32";
  }
  slice(e4, t5) {
    return this.sliceBuffer(_R, e4, t5);
  }
};
_R.ElementType = "i32";
var R = _R;
var _W = class _W extends e3 {
  constructor(e4, t5 = 0, s3, r2) {
    super(Int32Array, e4, t5, s3, r2), this.elementType = "i32";
  }
  slice(e4, t5) {
    return this.sliceBuffer(_W, e4, t5);
  }
};
_W.ElementType = "i32";
var W = _W;

export {
  t,
  l,
  r,
  a,
  f,
  p,
  y,
  h,
  o3 as o,
  m,
  T,
  d,
  x,
  E,
  A,
  B,
  b,
  U,
  F,
  I,
  j,
  O,
  g,
  w,
  L,
  V,
  M,
  v,
  S,
  k,
  q,
  z,
  C,
  D,
  G,
  H,
  J,
  K,
  N,
  P,
  Q,
  R,
  W
};
//# sourceMappingURL=chunk-6DBRCIDV.js.map
