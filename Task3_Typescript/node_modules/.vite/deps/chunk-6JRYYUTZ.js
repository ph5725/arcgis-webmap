import {
  L
} from "./chunk-OFHPFWHF.js";
import {
  k
} from "./chunk-MZJEBIXX.js";
import {
  a as a2
} from "./chunk-TVM3SZJR.js";
import {
  P
} from "./chunk-52HWRRRQ.js";
import {
  y
} from "./chunk-OGOQOMMV.js";
import {
  _
} from "./chunk-Q6XRAGMA.js";
import {
  o
} from "./chunk-JUAPMINU.js";
import {
  r as r2
} from "./chunk-YFPGM5UE.js";
import {
  l
} from "./chunk-E3KEUGUG.js";
import {
  m
} from "./chunk-N3XLUQJI.js";
import {
  a2 as a
} from "./chunk-JUAD7TJ6.js";
import {
  r
} from "./chunk-5TPMG26T.js";

// node_modules/@arcgis/core/layers/support/TelemetryData.js
var m2 = class extends a2.ClonableMixin(l) {
  constructor(o2) {
    super(o2), this.frameCenter = null, this.frameOutline = null, this.lineOfSight = null, this.sensorLocation = null, this.sensorTrail = null;
  }
};
r([m({ type: _ })], m2.prototype, "frameCenter", void 0), r([m({ type: P })], m2.prototype, "frameOutline", void 0), r([m({ type: y })], m2.prototype, "lineOfSight", void 0), r([m({ type: _ })], m2.prototype, "sensorLocation", void 0), r([m({ type: y })], m2.prototype, "sensorTrail", void 0), m2 = r([a("esri.layers.support.TelemetryData")], m2);

// node_modules/@arcgis/core/layers/support/TelemetryDisplay.js
var i = { type: Boolean, json: { write: true } };
var p = class extends a2.ClonableMixin(l) {
  constructor(o2) {
    super(o2), this.frame = false, this.frameCenter = false, this.frameOutline = true, this.lineOfSight = true, this.sensorLocation = true, this.sensorTrail = true;
  }
};
r([m(i)], p.prototype, "frame", void 0), r([m(i)], p.prototype, "frameCenter", void 0), r([m(i)], p.prototype, "frameOutline", void 0), r([m(i)], p.prototype, "lineOfSight", void 0), r([m(i)], p.prototype, "sensorLocation", void 0), r([m(i)], p.prototype, "sensorTrail", void 0), p = r([a("esri.layers.support.TelemetryDisplay")], p);

// node_modules/@arcgis/core/layers/support/VideoTimeExtent.js
var n = class extends a2.ClonableMixin(l) {
  constructor(t) {
    super(t), this.duration = null, this.end = null, this.start = null, this.timezone = "UTC";
  }
  readEnd(t, r3) {
    return null != r3.end ? new Date(r3.end) : null;
  }
  writeEnd(t, r3) {
    r3.end = t ? t.getTime() : null;
  }
  readStart(t, r3) {
    return null != r3.start ? new Date(r3.start) : null;
  }
  writeStart(t, r3) {
    r3.start = t ? t.getTime() : null;
  }
};
r([m({ type: Number, json: { write: { allowNull: true } } })], n.prototype, "duration", void 0), r([m({ type: Date, json: { write: { allowNull: true } } })], n.prototype, "end", void 0), r([o("end")], n.prototype, "readEnd", null), r([r2("end")], n.prototype, "writeEnd", null), r([m({ type: Date, json: { write: { allowNull: true } } })], n.prototype, "start", void 0), r([o("start")], n.prototype, "readStart", null), r([r2("start")], n.prototype, "writeStart", null), r([m({ type: String })], n.prototype, "timezone", void 0), n = r([a("esri.layers.support.VideoTimeExtent")], n);
var a3 = n;

// node_modules/@arcgis/core/layers/video/videoUtils.js
var u = "application/x-mpegURL";
var s = "video/mp4";
var l2 = "video/webm";
var d = { UASDatalinkLocalSet: 1e4, PrecisionTimeStamp: 10002, MissionId: 10003, PlatformTailNumber: 10004, PlatformHeadingAngle: 10005, PlatformPitchAngle: 10006, PlatformRollAngle: 10007, PlatformTrueAirspeed: 10008, PlatformIndicatedAirspeed: 10009, PlatformDesignation: 10010, ImageSourceSensor: 10011, ImageCoordinateSystem: 10012, SensorLatitude: 10013, SensorLongitude: 10014, SensorTrueAltitude: 10015, SensorHorizontalFOV: 10016, SensorVerticalFOV: 10017, SensorAzimuthAngle: 10018, SensorElevationAngle: 10019, SensorRollAngle: 10020, PlatformSlantRange: 10021, TargetWidth: 10022, FrameCenterLatitude: 10023, FrameCenterLongitude: 10024, FrameCenterElevation: 10025, OffsetCorner1Latitude: 10026, OffsetCorner1Longitude: 10027, OffsetCorner2Latitude: 10028, OffsetCorner2Longitude: 10029, OffsetCorner3Latitude: 10030, OffsetCorner3Longitude: 10031, OffsetCorner4Latitude: 10032, OffsetCorner4Longitude: 10033, TargetLocationLatitude: 10040, TargetLocationLongitude: 10041, TargetLocationElevation: 10042, TargetTrackGateWidth: 10043, TargetTrackGateHeight: 10044, TargetErrorEstimateHorizontal: 10045, TargetErrorEstimateLateral: 10046, GenericFlagData: 10047, PlatformGroundSpeed: 10056, PlatformGroundRange: 10057, PlatformRemainingFuel: 10058, PlatformCallSign: 10059, SensorFOVName: 10063, PlatformMagneticHeading: 10064, LDSVersionNumber: 10065, AlternatePlatformName: 10070, EventStartTimeUTC: 10072, VMTIDataSet: 10074, SensorEllipsoidHeight: 10075, OperationalMode: 10077, FrameCenterAboveEllipsoid: 10078, CornerLatitudePoint1: 10082, CornerLongitudePoint1: 10083, CornerLatitudePoint2: 10084, CornerLongitudePoint2: 10085, CornerLatitudePoint3: 10086, CornerLongitudePoint3: 10087, CornerLatitudePoint4: 10088, CornerLongitudePoint4: 10089, SARMotionImageryMetadata: 10095, SecurityClassification: 20001, SecurityClassifyingAuthority: 20002, SecurityClassifyingCountry: 20003, SecuritySCI: 20004, SecurityCaveats: 20005, SecurityReleaseInstructions: 20006, SecurityLDSVersion: 20022, EsriVideoWidth: 90001, EsriVideoHeight: 90002, EsriFrameCenterLatitude: 90050, EsriFrameCenterLongitude: 90051, EsriCornerLatitudePt1: 90052, EsriCornerLongitudePt1: 90053, EsriCornerLatitudePt2: 90054, EsriCornerLongitudePt2: 90055, EsriCornerLatitudePt3: 90056, EsriCornerLongitudePt3: 90057, EsriCornerLatitudePt4: 90058, EsriCornerLongitudePt4: 90059, EsriFrameOutline: 90060, EsriSensorPosition: 90061, EsriHorizonPixelPack: 90063, EsriGroundControlPoints: 90064 };
function f(e, t = 1e4) {
  if (!e || !e.length) return [];
  let r3 = [], n2 = [];
  for (let i2 = 0; i2 < e.length; i2++) {
    const t2 = e[i2], n3 = t2?.text ? JSON.parse(t2.text) : null;
    "EsriVideoServer" === n3?.source && (r3 = [...n3.data]);
  }
  const o2 = r3.find((e2) => e2.tagId === t);
  return Array.isArray(o2?.value) && (n2 = [...o2.value]), n2;
}
function g(e) {
  const { duration: t, end: r3, start: n2, timezone: i2 = "UTC" } = e || {};
  return "number" != typeof t ? null : new a3({ duration: t || null, end: "number" == typeof r3 ? new Date(r3) : null, start: "number" == typeof n2 ? new Date(n2) : null, timezone: i2 });
}
function m3(e, t) {
  const r3 = [...t], n2 = r3.findIndex((t2) => t2.equals(e));
  return n2 > -1 && r3.splice(n2), r3.push(e), r3;
}
function C(e) {
  if (!e?.size) return new m2();
  const t = b(e), r3 = P2(e), o2 = O(e), i2 = A(t, r3);
  return new m2({ frameCenter: r3, frameOutline: o2, lineOfSight: i2, sensorLocation: t });
}
function L2(e) {
  if (!e?.size) return null;
  return e.get(d.EsriGroundControlPoints)?.value ?? null ?? null;
}
function c(e) {
  return e?.size ? e.get(d.EsriHorizonPixelPack)?.value ?? null : null;
}
function P2(e) {
  return S(e) ?? y2(e);
}
function E(e) {
  if (!e) return u;
  const t = e.match(/\.(\w{3,4})(?:$|\?)/i);
  if (!t) return u;
  switch (t[1].toLowerCase()) {
    case "mp4":
      return s;
    case "webm":
      return l2;
    default:
      return u;
  }
}
function p2(e) {
  const t = e?.layers;
  return t?.length ? t.map((e2) => ({ layerId: e2.id, posterUrl: e2.poster, sourceType: e2.serviceType, title: e2.name, type: e2.type || "Video Layer" })) : [];
}
function v(e, t, r3) {
  if (!e) return null;
  const n2 = e.clone();
  switch (n2.type) {
    case "simple-fill":
      L(n2, r3), n2.outline.color = t;
      break;
    case "simple-line":
      L(n2, t);
      break;
    case "simple-marker":
      L(n2, t), n2?.outline?.color && (n2.outline.color = t);
      break;
    case "cim":
      k(n2, t);
  }
  return n2;
}
function h(e) {
  const { cameraAzimuth: t, platformHeading: r3, source: n2 = null, symbolOffset: o2 = 0 } = e || {};
  let i2 = 0;
  if (!n2) return i2;
  i2 = "platformHeading" === n2 ? r3 + o2 : r3 + t + o2;
  const a4 = i2 > 360 ? i2 - 360 : i2;
  return Math.round(Math.abs(a4));
}
function S(t) {
  return t && t.has(d.EsriFrameCenterLatitude) && t.has(d.EsriFrameCenterLongitude) ? new _({ x: t.get(d.EsriFrameCenterLongitude).value, y: t.get(d.EsriFrameCenterLatitude).value, z: t.get(d.FrameCenterAboveEllipsoid)?.value ?? t.get(d.FrameCenterElevation)?.value }) : null;
}
function y2(t) {
  return t && t.has(d.FrameCenterLatitude) && t.has(d.FrameCenterLongitude) ? new _({ x: t.get(d.FrameCenterLongitude)?.value, y: t.get(d.FrameCenterLatitude)?.value, z: t.get(d.FrameCenterElevation)?.value }) : null;
}
function O(e) {
  if (!e) return null;
  const r3 = e.get(d.EsriFrameOutline)?.value;
  return r3 ? P.fromJSON(r3.geometry) : F(e) ?? T(e);
}
function F(e) {
  if (!(e.has(d.EsriCornerLatitudePt1) && e.has(d.EsriCornerLongitudePt1) && e.has(d.EsriCornerLatitudePt2) && e.has(d.EsriCornerLongitudePt2) && e.has(d.EsriCornerLatitudePt3) && e.has(d.EsriCornerLongitudePt3) && e.has(d.EsriCornerLatitudePt4) && e.has(d.EsriCornerLongitudePt4))) return null;
  const r3 = [e.get(d.EsriCornerLongitudePt1)?.value, e.get(d.EsriCornerLatitudePt1)?.value], n2 = [e.get(d.EsriCornerLongitudePt2)?.value, e.get(d.EsriCornerLatitudePt2)?.value], o2 = [e.get(d.EsriCornerLongitudePt3)?.value, e.get(d.EsriCornerLatitudePt3)?.value], i2 = [e.get(d.EsriCornerLongitudePt4)?.value, e.get(d.EsriCornerLatitudePt4)?.value];
  return new P({ rings: [[r3, n2, o2, i2]] });
}
function T(e) {
  if (!(e.has(d.OffsetCorner1Latitude) && e.has(d.OffsetCorner1Longitude) && e.has(d.OffsetCorner2Latitude) && e.has(d.OffsetCorner2Longitude) && e.has(d.OffsetCorner3Latitude) && e.has(d.OffsetCorner3Longitude) && e.has(d.OffsetCorner4Latitude) && e.has(d.OffsetCorner4Longitude) && e.has(d.FrameCenterLatitude) && e.has(d.FrameCenterLongitude))) return null;
  const r3 = e.get(d.FrameCenterLatitude)?.value, n2 = e.get(d.FrameCenterLongitude)?.value, o2 = r3 + e.get(d.OffsetCorner1Latitude)?.value, i2 = n2 + e.get(d.OffsetCorner1Longitude)?.value, a4 = r3 + e.get(d.OffsetCorner2Latitude)?.value, u2 = n2 + e.get(d.OffsetCorner2Longitude)?.value, s2 = r3 + e.get(d.OffsetCorner3Latitude)?.value, l3 = n2 + e.get(d.OffsetCorner3Longitude)?.value, f2 = r3 + e.get(d.OffsetCorner4Latitude)?.value, g2 = n2 + e.get(d.OffsetCorner4Longitude)?.value;
  return new P({ rings: [[[i2, o2], [u2, a4], [l3, s2], [g2, f2]]] });
}
function A(e, t) {
  if (!e || !t) return null;
  const n2 = [e.x, e.y, e.z ?? 0], o2 = [t.x, t.y, t.z ?? 0];
  return new y({ paths: [[n2, o2]] });
}
function b(t) {
  if (!t?.size) return null;
  if (t.has(d.EsriSensorPosition)) {
    const r3 = t.get(d.EsriSensorPosition)?.value;
    if (r3) return _.fromJSON(r3.geometry);
  }
  return t.has(d.SensorLongitude) && t.has(d.SensorLatitude) ? new _({ x: t.get(d.SensorLongitude)?.value, y: t.get(d.SensorLatitude)?.value, z: t.get(d.SensorTrueAltitude)?.value }) : null;
}

export {
  m2 as m,
  p,
  a3 as a,
  d,
  f,
  g,
  m3 as m2,
  C,
  L2 as L,
  c,
  E,
  p2,
  v,
  h
};
//# sourceMappingURL=chunk-6JRYYUTZ.js.map
