import {
  c,
  o as o2
} from "./chunk-QFU5COFB.js";
import {
  e
} from "./chunk-LMEOPAGQ.js";
import {
  o
} from "./chunk-JUAPMINU.js";
import {
  r as r2
} from "./chunk-YFPGM5UE.js";
import {
  l
} from "./chunk-E3KEUGUG.js";
import {
  m
} from "./chunk-N3XLUQJI.js";
import {
  a2 as a
} from "./chunk-JUAD7TJ6.js";
import {
  r
} from "./chunk-5TPMG26T.js";

// node_modules/@arcgis/core/chunks/TimeExtent.js
var m2;
var _a;
var u = (_a = class extends l {
  static get allTime() {
    return p;
  }
  static get empty() {
    return d;
  }
  static fromArray(t) {
    return new m2({ start: null != t[0] ? new Date(t[0]) : t[0], end: null != t[1] ? new Date(t[1]) : t[1] });
  }
  constructor(t) {
    super(t), this.end = null, this.start = null;
  }
  readEnd(t, e2) {
    return null != e2.end ? new Date(e2.end) : null;
  }
  writeEnd(t, e2) {
    e2.end = t?.getTime() ?? null;
  }
  get isAllTime() {
    return this.equals(m2.allTime);
  }
  get isEmpty() {
    return this.equals(m2.empty);
  }
  readStart(t, e2) {
    return null != e2.start ? new Date(e2.start) : null;
  }
  writeStart(t, e2) {
    e2.start = t?.getTime() ?? null;
  }
  clone() {
    return new m2({ end: this.end, start: this.start });
  }
  equals(t) {
    if (!t) return false;
    const e2 = this.start?.getTime() ?? this.start, r3 = this.end?.getTime() ?? this.end, s = t.start?.getTime() ?? t.start, n = t.end?.getTime() ?? t.end;
    return e2 === s && r3 === n;
  }
  expandTo(t, e2 = e) {
    if (this.isEmpty || this.isAllTime) return this.clone();
    let n = this.start;
    n && (n = c(n, t, e2));
    let i = this.end;
    if (i) {
      const n2 = c(i, t, e2);
      i = i.getTime() === n2.getTime() ? n2 : o2(n2, 1, t, e2);
    }
    return new m2({ start: n, end: i });
  }
  intersection(t) {
    if (!t) return this.clone();
    if (this.isEmpty || t.isEmpty) return m2.empty;
    if (this.isAllTime) return t.clone();
    if (t.isAllTime) return this.clone();
    const e2 = this.start?.getTime() ?? -1 / 0, r3 = this.end?.getTime() ?? 1 / 0, s = t.start?.getTime() ?? -1 / 0, n = t.end?.getTime() ?? 1 / 0;
    let i, l2;
    return s >= e2 && s <= r3 ? i = s : e2 >= s && e2 <= n && (i = e2), r3 >= s && r3 <= n ? l2 = r3 : n >= e2 && n <= r3 && (l2 = n), null == i || null == l2 || isNaN(i) || isNaN(l2) ? m2.empty : new m2({ start: i === -1 / 0 ? null : new Date(i), end: l2 === 1 / 0 ? null : new Date(l2) });
  }
  offset(t, e2, r3 = e) {
    if (this.isEmpty || this.isAllTime) return this.clone();
    const n = new m2(), { start: i, end: l2 } = this;
    return null != i && (n.start = o2(i, t, e2, r3)), null != l2 && (n.end = o2(l2, t, e2, r3)), n;
  }
  toArray() {
    return this.isEmpty ? [void 0, void 0] : [this.start?.getTime() ?? null, this.end?.getTime() ?? null];
  }
  union(t) {
    if (!t || t.isEmpty) return this.clone();
    if (this.isEmpty) return t.clone();
    if (this.isAllTime || t.isAllTime) return p.clone();
    const e2 = null != this.start && null != t.start ? new Date(Math.min(this.start.getTime(), t.start.getTime())) : null, r3 = null != this.end && null != t.end ? new Date(Math.max(this.end.getTime(), t.end.getTime())) : null;
    return new m2({ start: e2, end: r3 });
  }
}, m2 = _a, _a);
r([m({ type: Date, json: { write: { allowNull: true } } })], u.prototype, "end", void 0), r([o("end")], u.prototype, "readEnd", null), r([r2("end")], u.prototype, "writeEnd", null), r([m({ readOnly: true, json: { read: false } })], u.prototype, "isAllTime", null), r([m({ readOnly: true, json: { read: false } })], u.prototype, "isEmpty", null), r([m({ type: Date, json: { write: { allowNull: true } } })], u.prototype, "start", void 0), r([o("start")], u.prototype, "readStart", null), r([r2("start")], u.prototype, "writeStart", null), u = m2 = r([a("esri.time.TimeExtent")], u);
var p = new u();
var d = new u({ start: void 0, end: void 0 });

export {
  u
};
//# sourceMappingURL=chunk-6QTMK7BB.js.map
