import {
  c
} from "./chunk-2JRCX6DU.js";
import {
  l as l2
} from "./chunk-KE3WBZYL.js";
import {
  a as a2
} from "./chunk-TVM3SZJR.js";
import {
  o
} from "./chunk-JUAPMINU.js";
import {
  r as r2
} from "./chunk-YFPGM5UE.js";
import {
  l
} from "./chunk-E3KEUGUG.js";
import {
  m as m2
} from "./chunk-N3XLUQJI.js";
import {
  a2 as a
} from "./chunk-JUAD7TJ6.js";
import {
  m
} from "./chunk-VHLUKPRH.js";
import {
  r
} from "./chunk-5TPMG26T.js";
import {
  h,
  m as m3
} from "./chunk-ZWFY3WY5.js";

// node_modules/@arcgis/core/geometry/support/MeshTexture.js
var p;
var h2 = /* @__PURE__ */ new WeakMap();
var d = 0;
var _a;
var u = (_a = class extends l {
  constructor(t) {
    super(t), this.wrap = "repeat";
  }
  get url() {
    return this._get("url") || null;
  }
  set url(t) {
    this._set("url", t), t && this._set("data", null);
  }
  get data() {
    return this._get("data") || null;
  }
  set data(t) {
    this._set("data", t), t && this._set("url", null);
  }
  writeData(t, e, a3, r3) {
    if (t instanceof HTMLImageElement) {
      const s = { type: "image-element", src: m3(t.src, r3), crossOrigin: t.crossOrigin };
      e[a3] = s;
    } else if (t instanceof HTMLCanvasElement) {
      const r4 = { type: "canvas-element", imageData: m4(t.getContext("2d").getImageData(0, 0, t.width, t.height)) };
      e[a3] = r4;
    } else if (t instanceof HTMLVideoElement) {
      const s = { type: "video-element", src: m3(t.src, r3), autoplay: t.autoplay, loop: t.loop, muted: t.muted, crossOrigin: t.crossOrigin, preload: t.preload };
      e[a3] = s;
    } else if (t instanceof ImageData) {
      const r4 = { type: "image-data", imageData: m4(t) };
      e[a3] = r4;
    }
  }
  readData(t) {
    switch (t.type) {
      case "image-element": {
        const e = new Image();
        return e.src = t.src, e.crossOrigin = t.crossOrigin, e;
      }
      case "canvas-element": {
        const e = g(t.imageData), a3 = document.createElement("canvas");
        return a3.width = e.width, a3.height = e.height, a3.getContext("2d").putImageData(e, 0, 0), a3;
      }
      case "image-data":
        return g(t.imageData);
      case "video-element": {
        const e = document.createElement("video");
        return e.src = t.src, e.crossOrigin = t.crossOrigin, e.autoplay = t.autoplay, e.loop = t.loop, e.muted = t.muted, e.preload = t.preload, e;
      }
      default:
        return;
    }
  }
  get transparent() {
    const { data: t, url: e } = this, a3 = (t2) => t2?.toLowerCase().endsWith(".png") || t2?.toLocaleLowerCase().startsWith("data:image/png;");
    return t instanceof HTMLCanvasElement ? f(t.getContext("2d").getImageData(0, 0, t.width, t.height)) : t instanceof ImageData ? f(t) : !(!e || !a3(e)) || !!(t instanceof HTMLImageElement && a3(t.src));
  }
  set transparent(t) {
    this._overrideIfSome("transparent", t);
  }
  get contentHash() {
    const t = "string" == typeof this.wrap ? this.wrap : "object" == typeof this.wrap ? `${this.wrap.horizontal}/${this.wrap.vertical}` : "", e = (e2 = "") => `d:${e2},t:${this.transparent},w:${t}`;
    return null != this.url ? e(this.url) : null != this.data ? this.data instanceof HTMLImageElement || this.data instanceof HTMLVideoElement ? e(this.data.src) : (h2.has(this.data) || h2.set(this.data, ++d), e(h2.get(this.data))) : e();
  }
  get memoryUsage() {
    let t = 0;
    if (t += null != this.url ? this.url.length : 0, null != this.data) {
      const e = this.data;
      "data" in e ? t += e.data.byteLength : e instanceof HTMLImageElement ? t += e.naturalWidth * e.naturalHeight * 3 : e instanceof HTMLCanvasElement && (t += e.width * e.height * 3);
    }
    return t;
  }
  clone() {
    const t = { url: this.url, data: this.data, transparent: this.transparent, wrap: this._cloneWrap() };
    return new p(t);
  }
  cloneWithDeduplication(t) {
    const e = t.get(this);
    if (e) return e;
    const a3 = this.clone();
    return t.set(this, a3), a3;
  }
  _cloneWrap() {
    return "string" == typeof this.wrap ? this.wrap : { horizontal: this.wrap.horizontal, vertical: this.wrap.vertical };
  }
  static from(t) {
    return "string" == typeof t ? new p({ url: t }) : t instanceof HTMLImageElement || t instanceof HTMLCanvasElement || t instanceof ImageData || t instanceof HTMLVideoElement ? new p({ data: t }) : m(p, t);
  }
}, p = _a, _a);
function m4(t) {
  let e = "";
  for (let a3 = 0; a3 < t.data.length; a3++) e += String.fromCharCode(t.data[a3]);
  return { data: btoa(e), width: t.width, height: t.height };
}
function g(t) {
  const a3 = atob(t.data), r3 = new Uint8ClampedArray(a3.length);
  for (let e = 0; e < a3.length; e++) r3[e] = a3.charCodeAt(e);
  return c(r3, t.width, t.height);
}
function f(t) {
  for (let e = 3; e < t.data.length; e += 4) if (255 !== t.data[e]) return true;
  return false;
}
r([m2({ type: String, json: { write: h } })], u.prototype, "url", null), r([m2({ json: { write: { overridePolicy() {
  return { enabled: !this.url };
} } } }), m2()], u.prototype, "data", null), r([r2("data")], u.prototype, "writeData", null), r([o("data")], u.prototype, "readData", null), r([m2({ type: Boolean, json: { write: { overridePolicy() {
  return { enabled: this._isOverridden("transparent") };
} } } })], u.prototype, "transparent", null), r([m2({ json: { write: true } })], u.prototype, "wrap", void 0), r([m2({ readOnly: true })], u.prototype, "contentHash", null), u = p = r([a("esri.geometry.support.MeshTexture")], u);

// node_modules/@arcgis/core/geometry/support/MeshTextureTransform.js
var p2 = class extends a2.ClonableMixin(l) {
  constructor(o2) {
    super(o2), this.offset = [0, 0], this.rotation = 0, this.scale = [1, 1];
  }
};
r([m2({ type: [Number], nonNullable: true, json: { write: true } })], p2.prototype, "offset", void 0), r([m2({ type: Number, nonNullable: true, json: { write: true } })], p2.prototype, "rotation", void 0), r([m2({ type: [Number], nonNullable: true, json: { write: true } })], p2.prototype, "scale", void 0), p2 = r([a("esri.geometry.support.MeshTextureTransform")], p2);

// node_modules/@arcgis/core/geometry/support/MeshMaterial.js
var n;
var u2 = n = class extends l {
  constructor(o2) {
    super(o2), this.color = null, this.colorTexture = null, this.colorTextureTransform = null, this.normalTexture = void 0, this.normalTextureTransform = void 0, this.alphaMode = "auto", this.alphaCutoff = 0.5, this.doubleSided = true;
  }
  clone() {
    return this.cloneWithDeduplication(null, /* @__PURE__ */ new Map());
  }
  cloneWithDeduplication(o2, r3) {
    const e = null != o2 ? o2.get(this) : null;
    if (e) return e;
    const t = new n(this.clonePropertiesWithDeduplication(r3));
    return null != o2 && o2.set(this, t), t;
  }
  clonePropertiesWithDeduplication(o2) {
    return { color: null != this.color ? this.color.clone() : null, colorTexture: this.colorTexture?.cloneWithDeduplication(o2), normalTexture: this.normalTexture?.cloneWithDeduplication(o2), alphaMode: this.alphaMode, alphaCutoff: this.alphaCutoff, doubleSided: this.doubleSided, colorTextureTransform: this.colorTextureTransform?.clone(), normalTextureTransform: this.normalTextureTransform?.clone() };
  }
  get memoryUsage() {
    return this.getMemoryUsage();
  }
  getMemoryUsage() {
    let o2 = 0;
    return o2 += null != this.color ? 16 : 0, null != this.colorTexture && (o2 += this.colorTexture.memoryUsage), o2 += null != this.colorTextureTransform ? 20 : 0, null != this.normalTexture && (o2 += this.normalTexture.memoryUsage), o2 += null != this.normalTextureTransform ? 20 : 0, o2;
  }
};
r([m2({ type: l2, json: { write: true } })], u2.prototype, "color", void 0), r([m2({ type: u, json: { write: true } })], u2.prototype, "colorTexture", void 0), r([m2({ type: p2, json: { write: true } })], u2.prototype, "colorTextureTransform", void 0), r([m2({ type: u, json: { write: true } })], u2.prototype, "normalTexture", void 0), r([m2({ type: p2, json: { write: true } })], u2.prototype, "normalTextureTransform", void 0), r([m2({ nonNullable: true, json: { write: true } })], u2.prototype, "alphaMode", void 0), r([m2({ nonNullable: true, json: { write: true } })], u2.prototype, "alphaCutoff", void 0), r([m2({ nonNullable: true, json: { write: true } })], u2.prototype, "doubleSided", void 0), u2 = n = r([a("esri.geometry.support.MeshMaterial")], u2);

// node_modules/@arcgis/core/geometry/support/MeshMaterialMetallicRoughness.js
var n2;
var u3 = n2 = class extends u2 {
  constructor(e) {
    super(e), this.emissiveColor = null, this.emissiveTexture = null, this.emissiveTextureTransform = void 0, this.occlusionTexture = null, this.occlusionTextureTransform = void 0, this.metallic = 1, this.roughness = 1, this.metallicRoughnessTexture = null, this.metallicRoughnessTextureTransform = void 0;
  }
  clone() {
    return this.cloneWithDeduplication(null, /* @__PURE__ */ new Map());
  }
  cloneWithDeduplication(e, s) {
    const o2 = null != e ? e.get(this) : null;
    if (o2) return o2;
    const t = new n2(this.clonePropertiesWithDeduplication(s));
    return null != e && e.set(this, t), t;
  }
  getMemoryUsage() {
    let e = super.getMemoryUsage();
    return e += null != this.emissiveColor ? 16 : 0, null != this.emissiveTexture && (e += this.emissiveTexture.memoryUsage), e += null != this.emissiveTextureTransform ? 20 : 0, null != this.occlusionTexture && (e += this.occlusionTexture.memoryUsage), e += null != this.occlusionTextureTransform ? 20 : 0, null != this.metallicRoughnessTexture && (e += this.metallicRoughnessTexture.memoryUsage), e += null != this.metallicRoughnessTextureTransform ? 20 : 0, e;
  }
  clonePropertiesWithDeduplication(e) {
    return { ...super.clonePropertiesWithDeduplication(e), emissiveColor: this.emissiveColor?.clone(), emissiveTexture: this.emissiveTexture?.cloneWithDeduplication(e), emissiveTextureTransform: this.emissiveTextureTransform?.clone(), occlusionTexture: this.occlusionTexture?.cloneWithDeduplication(e), occlusionTextureTransform: this.occlusionTextureTransform?.clone(), metallic: this.metallic, roughness: this.roughness, metallicRoughnessTexture: this.metallicRoughnessTexture?.cloneWithDeduplication(e), metallicRoughnessTextureTransform: this.metallicRoughnessTextureTransform?.clone() };
  }
};
r([m2({ type: l2, json: { write: true } })], u3.prototype, "emissiveColor", void 0), r([m2({ type: u, json: { write: true } })], u3.prototype, "emissiveTexture", void 0), r([m2({ type: p2, json: { write: true } })], u3.prototype, "emissiveTextureTransform", void 0), r([m2({ type: u, json: { write: true } })], u3.prototype, "occlusionTexture", void 0), r([m2({ type: p2, json: { write: true } })], u3.prototype, "occlusionTextureTransform", void 0), r([m2({ type: Number, nonNullable: true, json: { write: true }, range: { min: 0, max: 1 } })], u3.prototype, "metallic", void 0), r([m2({ type: Number, nonNullable: true, json: { write: true }, range: { min: 0, max: 1 } })], u3.prototype, "roughness", void 0), r([m2({ type: u, json: { write: true } })], u3.prototype, "metallicRoughnessTexture", void 0), r([m2({ type: p2, json: { write: true } })], u3.prototype, "metallicRoughnessTextureTransform", void 0), u3 = n2 = r([a("esri.geometry.support.MeshMaterialMetallicRoughness")], u3);

export {
  u,
  p2 as p,
  u2,
  u3
};
//# sourceMappingURL=chunk-6SLEP34Y.js.map
