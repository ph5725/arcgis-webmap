import {
  y
} from "./chunk-KHEIHGIK.js";
import {
  s,
  u2 as u
} from "./chunk-H6F6O2KE.js";
import {
  N,
  O,
  Y,
  o
} from "./chunk-BZYXFNL4.js";
import {
  r2 as r
} from "./chunk-GZ2P4SCJ.js";
import {
  i2 as i
} from "./chunk-XWG6QGFK.js";
import {
  a,
  c2 as c,
  m,
  t2 as t
} from "./chunk-FXKORAMT.js";

// node_modules/@arcgis/core/views/webgl/BufferObject.js
var h = () => i.getLogger("esri.views.webgl.BufferObject");
var E = class _E {
  static createIndex(t2, e, i2) {
    return new _E(t2, N.ELEMENT_ARRAY_BUFFER, e, i2);
  }
  static createVertex(t2, e, i2) {
    return new _E(t2, N.ARRAY_BUFFER, e, i2);
  }
  static createUniform(t2, e, i2) {
    return new _E(t2, N.UNIFORM_BUFFER, e, i2);
  }
  static createPixelPack(t2, e = Y.STREAM_READ, i2) {
    const s2 = new _E(t2, N.PIXEL_PACK_BUFFER, e);
    return i2 && s2.setSize(i2), s2;
  }
  static createPixelUnpack(t2, e = Y.STREAM_DRAW, i2) {
    return new _E(t2, N.PIXEL_UNPACK_BUFFER, e, i2);
  }
  static createTransformFeedback(t2, e = Y.STATIC_DRAW, i2) {
    const s2 = new _E(t2, N.TRANSFORM_FEEDBACK_BUFFER, e);
    return s2.setSize(i2), s2;
  }
  constructor(t2, e, i2, s2) {
    this._context = t2, this.bufferType = e, this.usage = i2, this._glName = null, this._size = -1, this._indexType = void 0, t2.instanceCounter.increment(o.BufferObject, this), this._glName = this._context.gl.createBuffer(), s(this._context.gl), s2 && this.setData(s2);
  }
  get glName() {
    return this._glName;
  }
  get size() {
    return this._size;
  }
  get indexType() {
    return this._indexType;
  }
  get usedMemory() {
    if (this.bufferType === N.ELEMENT_ARRAY_BUFFER) {
      if (this._indexType === O.UNSIGNED_INT) return 4 * this._size;
      if (this._indexType === O.UNSIGNED_SHORT) return 2 * this._size;
    }
    return this._size;
  }
  get _isVAOAware() {
    return this.bufferType === N.ELEMENT_ARRAY_BUFFER || this.bufferType === N.ARRAY_BUFFER;
  }
  dispose() {
    if (this._context?.gl) {
      if (this._glName) {
        this._context.gl.deleteBuffer(this._glName), this._glName = null;
      }
      this._context.instanceCounter.decrement(o.BufferObject, this), this._context = null;
    } else this._glName && h().warn("Leaked WebGL buffer object");
  }
  setSize(t2, e = null) {
    if (this.bufferType === N.ELEMENT_ARRAY_BUFFER && null != e) switch (this._indexType = e, e) {
      case O.UNSIGNED_SHORT:
        t2 *= 2;
        break;
      case O.UNSIGNED_INT:
        t2 *= 4;
    }
    this._setBufferData(t2);
  }
  setData(t2) {
    if (!t2) return;
    let e = t2.byteLength;
    this.bufferType === N.ELEMENT_ARRAY_BUFFER && (t(t2) ? this._indexType = O.UNSIGNED_BYTE : c(t2) ? (e /= 2, this._indexType = O.UNSIGNED_SHORT) : a(t2) && (e /= 4, this._indexType = O.UNSIGNED_INT)), this._setBufferData(e, t2);
  }
  _setBufferData(t2, e = null) {
    this._size = t2;
    const i2 = this._context.getBoundVAO();
    this._isVAOAware && this._context.bindVAO(null), this._context.bindBuffer(this);
    const s2 = this._context.gl;
    null != e ? s2.bufferData(this.bufferType, e, this.usage) : s2.bufferData(this.bufferType, t2, this.usage), s(s2), this._isVAOAware && this._context.bindVAO(i2);
  }
  setSubData(t2, e, i2, s2) {
    if (!t2) return;
    const r2 = this._context.getBoundVAO();
    this._isVAOAware && this._context.bindVAO(null), this._context.bindBuffer(this);
    const { gl: _ } = this._context;
    _.bufferSubData(this.bufferType, e * t2.BYTES_PER_ELEMENT, t2, i2, s2 - i2), s(_), this._isVAOAware && this._context.bindVAO(r2);
  }
  getSubData(t2, e = 0, i2, s2) {
    if (i2 < 0 || s2 < 0) return;
    const r2 = o2(t2) ? t2.BYTES_PER_ELEMENT : 1;
    if (r2 * ((i2 ?? 0) + (s2 ?? 0)) > t2.byteLength) return;
    e + r2 * (s2 ?? 0) > this.usedMemory && h().warn("Potential problem getting subdata: requested data exceeds buffer size!");
    const n2 = this._context.gl;
    this.bufferType === N.TRANSFORM_FEEDBACK_BUFFER ? (this._context.bindBuffer(this, N.TRANSFORM_FEEDBACK_BUFFER), n2.getBufferSubData(N.TRANSFORM_FEEDBACK_BUFFER, e, t2, i2, s2), this._context.unbindBuffer(N.TRANSFORM_FEEDBACK_BUFFER)) : (this._context.bindBuffer(this, N.COPY_READ_BUFFER), n2.getBufferSubData(N.COPY_READ_BUFFER, e, t2, i2, s2), this._context.unbindBuffer(N.COPY_READ_BUFFER));
  }
  async getSubDataAsync(t2, e = 0, i2, s2) {
    await this._context.clientWaitAsync(), this.getSubData(t2, e, i2, s2);
  }
};
function o2(e) {
  return m(e);
}

// node_modules/@arcgis/core/views/webgl/VertexArrayObject.js
var n = () => i.getLogger("esri.views.webgl.VertexArrayObject");
var o3 = class {
  constructor(e, t2, i2, r2, s2 = null) {
    this._context = e, this._locations = t2, this._layout = i2, this._buffers = r2, this._indexBuffer = s2, this._glName = null, this._initialized = false;
  }
  get glName() {
    return this._glName;
  }
  get context() {
    return this._context;
  }
  get vertexBuffers() {
    return this._buffers;
  }
  get indexBuffer() {
    return this._indexBuffer;
  }
  getByteLength(e) {
    return this._buffers.get(e)?.usedMemory ?? 0;
  }
  get layout() {
    return this._layout;
  }
  get locations() {
    return this._locations;
  }
  get usedMemory() {
    return Array.from(this._buffers.values()).reduce((e, t2) => e + t2.usedMemory, this._indexBuffer?.usedMemory ?? 0 + (this._buffers.size + (this._indexBuffer ? 1 : 0)) * y);
  }
  get cachedMemory() {
    return this.usedMemory;
  }
  dispose() {
    this._context ? (this._context.getBoundVAO() === this && this._context.bindVAO(null), this._buffers.forEach((e) => e.dispose()), this._buffers.clear(), this._indexBuffer = r(this._indexBuffer), this.disposeVAOOnly()) : (this._glName || this._buffers.size > 0) && n().warn("Leaked WebGL VAO");
  }
  disposeVAOOnly() {
    this._glName && (this._context.gl.deleteVertexArray(this._glName), this._glName = null, this._context.instanceCounter.decrement(o.VertexArrayObject, this)), this._context = null;
  }
  initialize() {
    if (this._initialized) return;
    const { gl: e } = this._context, t2 = e.createVertexArray();
    e.bindVertexArray(t2), this._bindLayout(), e.bindVertexArray(null), this._glName = t2, this._context.instanceCounter.increment(o.VertexArrayObject, this), this._initialized = true;
  }
  bind() {
    this.initialize(), this._context.gl.bindVertexArray(this.glName);
  }
  _bindLayout() {
    const { _buffers: e, _layout: t2, _indexBuffer: i2 } = this;
    e || n().error("Vertex buffer dictionary is empty!");
    const r2 = this._context.gl;
    this._buffers.forEach((e2, i3) => {
      const r3 = t2.get(i3);
      r3 ? u(this._context, this._locations, e2, r3) : n().error("Vertex element descriptor is empty!");
    }), null != i2 && r2.bindBuffer(r2.ELEMENT_ARRAY_BUFFER, i2.glName);
  }
  unbind() {
    this.initialize(), this._context.gl.bindVertexArray(null);
  }
};

export {
  E,
  o3 as o
};
//# sourceMappingURL=chunk-733XT7D4.js.map
