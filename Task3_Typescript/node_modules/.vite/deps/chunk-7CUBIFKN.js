import {
  m
} from "./chunk-FEGY3M6U.js";
import {
  d
} from "./chunk-2IMSGFJN.js";
import {
  l
} from "./chunk-KE3WBZYL.js";
import {
  i2 as i
} from "./chunk-XWG6QGFK.js";
import {
  n
} from "./chunk-FXKORAMT.js";

// node_modules/@arcgis/core/renderers/visualVariables/support/sizeVariableUtils.js
var n2;
var i2;
function e(n3) {
  return n3 && "esri.renderers.visualVariables.SizeVariable" === n3.declaredClass;
}
function l2(n3) {
  return null != n3 && !isNaN(n3) && isFinite(n3);
}
function t(i3) {
  return i3.valueExpression ? n2.Expression : i3.field && "string" == typeof i3.field ? n2.Field : n2.Unknown;
}
function a(e2, l3) {
  const a2 = l3 || t(e2), o = e2.valueUnit || "unknown";
  return a2 === n2.Unknown ? i2.Constant : e2.stops ? i2.Stops : null != e2.minSize && null != e2.maxSize && null != e2.minDataValue && null != e2.maxDataValue ? i2.ClampedLinear : "unknown" === o ? null != e2.minSize && null != e2.minDataValue ? e2.minSize && e2.minDataValue ? i2.Proportional : i2.Additive : i2.Identity : i2.RealWorldSize;
}
!function(n3) {
  n3.Unknown = "unknown", n3.Expression = "expression", n3.Field = "field";
}(n2 || (n2 = {})), function(n3) {
  n3.Unknown = "unknown", n3.Stops = "stops", n3.ClampedLinear = "clamped-linear", n3.Proportional = "proportional", n3.Additive = "additive", n3.Constant = "constant", n3.Identity = "identity", n3.RealWorldSize = "real-world-size";
}(i2 || (i2 = {}));

// node_modules/@arcgis/core/renderers/visualVariables/support/visualVariableUtils.js
var c = () => i.getLogger("esri.renderers.visualVariables.support.visualVariableUtils");
var u = (e2) => c().warn(`The visualVariable should be an instance of esri.renderers.visualVariables.${e2}`);
var f = () => c().error("Use of arcade expressions requires an arcade context");
var p = new d();
var d2 = Math.PI;
var v = /^\s*(return\s+)?\$view\.scale\s*(;)?\s*$/i;
function m2(n3, a2, i3) {
  const t2 = "visualVariables" in n3 && n3.visualVariables ? n3.visualVariables.find((e2) => "color" === e2.type) : n3;
  if (!t2) return;
  if ("esri.renderers.visualVariables.ColorVariable" !== t2.declaredClass) return void u("ColorVariable");
  const r = "number" == typeof a2, s = r ? null : a2, o = s?.attributes;
  let c2 = r ? a2 : null;
  const p2 = t2.field, { ipData: d3, hasExpression: v2 } = t2.cache;
  let m3 = t2.cache.compiledFunc;
  if (!p2 && !v2) {
    const e2 = t2.stops;
    return e2 && e2[0] && e2[0].color;
  }
  if ("number" != typeof c2) if (v2) {
    if (null == i3?.arcade) return void f();
    const e2 = { viewingMode: i3.viewingMode, scale: i3.scale, spatialReference: i3.spatialReference }, n4 = i3.arcade.arcadeUtils, a3 = n4.getViewInfo(e2), r2 = n4.createExecContext(s, a3, i3.timeZone);
    if (!m3) {
      const e3 = n4.createSyntaxTree(t2.valueExpression);
      m3 = n4.createFunction(e3), t2.cache.compiledFunc = m3;
    }
    c2 = n4.executeFunction(m3, r2);
  } else o && (c2 = o[p2]);
  const b2 = t2.normalizationField, h2 = null != o && null != b2 ? parseFloat(o[b2]) : void 0;
  if (null != c2 && (!b2 || r || !isNaN(h2) && 0 !== h2)) {
    l2(h2) && !r && (c2 /= h2);
    const n4 = T(c2, d3);
    if (n4) {
      const a3 = n4[0], r2 = n4[1], l3 = a3 === r2 ? t2.stops[a3].color : l.blendColors(t2.stops[a3].color, t2.stops[r2].color, n4[2], null != i3 ? i3.color : void 0);
      return new l(l3);
    }
  }
}
function b(e2, n3, a2) {
  const i3 = "visualVariables" in e2 && e2.visualVariables ? e2.visualVariables.find((e3) => "opacity" === e3.type) : e2;
  if (!i3) return;
  if ("esri.renderers.visualVariables.OpacityVariable" !== i3.declaredClass) return void u("OpacityVariable");
  const t2 = "number" == typeof n3, r = t2 ? null : n3, s = r?.attributes;
  let o = t2 ? n3 : null;
  const c2 = i3.field, { ipData: p2, hasExpression: d3 } = i3.cache;
  let v2 = i3.cache.compiledFunc;
  if (!c2 && !d3) {
    const e3 = i3.stops;
    return e3 && e3[0] && e3[0].opacity;
  }
  if ("number" != typeof o) if (d3) {
    if (null == a2?.arcade) return void f();
    const e3 = { viewingMode: a2.viewingMode, scale: a2.scale, spatialReference: a2.spatialReference }, n4 = a2.arcade.arcadeUtils, t3 = n4.getViewInfo(e3), l3 = n4.createExecContext(r, t3, a2.timeZone);
    if (!v2) {
      const e4 = n4.createSyntaxTree(i3.valueExpression);
      v2 = n4.createFunction(e4), i3.cache.compiledFunc = v2;
    }
    o = n4.executeFunction(v2, l3);
  } else s && (o = s[c2]);
  const m3 = i3.normalizationField, b2 = null != s && null != m3 ? parseFloat(s[m3]) : void 0;
  if (null != o && (!m3 || t2 || !isNaN(b2) && 0 !== b2)) {
    l2(b2) && !t2 && (o /= b2);
    const e3 = T(o, p2);
    if (e3) {
      const n4 = e3[0], a3 = e3[1];
      if (n4 === a3) return i3.stops[n4].opacity;
      {
        const t3 = i3.stops[n4].opacity;
        return t3 + (i3.stops[a3].opacity - t3) * e3[2];
      }
    }
  }
}
function h(e2, n3, a2) {
  const i3 = "visualVariables" in e2 && e2.visualVariables ? e2.visualVariables.find((e3) => "rotation" === e3.type) : e2;
  if (!i3) return;
  if ("esri.renderers.visualVariables.RotationVariable" !== i3.declaredClass) return void u("RotationVariable");
  const t2 = i3.axis || "heading", r = "heading" === t2 && "arithmetic" === i3.rotationType ? 90 : 0, l3 = "heading" === t2 && "arithmetic" === i3.rotationType ? -1 : 1, s = "number" == typeof n3 ? null : n3, o = s?.attributes, c2 = i3.field, { hasExpression: p2 } = i3.cache;
  let d3 = i3.cache.compiledFunc, v2 = null;
  if (!c2 && !p2) return v2;
  if (p2) {
    if (null == a2?.arcade) return void f();
    const e3 = { viewingMode: a2.viewingMode, scale: a2.scale, spatialReference: a2.spatialReference }, n4 = a2.arcade.arcadeUtils, t3 = n4.getViewInfo(e3), r2 = n4.createExecContext(s, t3, a2.timeZone);
    if (!d3) {
      const e4 = n4.createSyntaxTree(i3.valueExpression);
      d3 = n4.createFunction(e4), i3.cache.compiledFunc = d3;
    }
    v2 = n4.executeFunction(d3, r2);
  } else o && (v2 = o[c2]);
  return v2 = "number" != typeof v2 || isNaN(v2) ? null : r + l3 * v2, v2;
}
function V(e2, n3, a2) {
  const i3 = "number" == typeof n3, t2 = i3 ? null : n3, s = t2?.attributes;
  let o = i3 ? n3 : null;
  const { isScaleDriven: c2 } = e2.cache;
  let u2 = e2.cache.compiledFunc;
  if (c2) {
    const n4 = null != a2 ? a2.scale : void 0, i4 = null != a2 ? a2.view : void 0;
    o = null == n4 || "3d" === i4 ? x(e2) : n4;
  } else if (!i3) switch (e2.inputValueType) {
    case n2.Expression: {
      if (null == a2?.arcade) return void f();
      const n4 = { viewingMode: a2.viewingMode, scale: a2.scale, spatialReference: a2.spatialReference }, i4 = a2.arcade.arcadeUtils, r = i4.getViewInfo(n4), l3 = i4.createExecContext(t2, r, a2.timeZone);
      if (!u2) {
        const n5 = i4.createSyntaxTree(e2.valueExpression);
        u2 = i4.createFunction(n5), e2.cache.compiledFunc = u2;
      }
      o = i4.executeFunction(u2, l3);
      break;
    }
    case n2.Field:
      s && (o = s[e2.field]);
      break;
    case n2.Unknown:
      o = null;
  }
  if (!l2(o)) return null;
  if (i3 || !e2.normalizationField) return o;
  const p2 = s ? parseFloat(s[e2.normalizationField]) : null;
  return l2(p2) && 0 !== p2 ? o / p2 : null;
}
function x(e2) {
  let n3 = null, a2 = null;
  const i3 = e2.stops;
  return i3 ? (n3 = i3[0].value, a2 = i3[i3.length - 1].value) : (n3 = e2.minDataValue || 0, a2 = e2.maxDataValue || 0), (n3 + a2) / 2;
}
function y(e2, n3, a2) {
  const i3 = "visualVariables" in e2 && e2.visualVariables ? e2.visualVariables.find((e3) => "size" === e3.type) : e2;
  if (!i3) return;
  if ("esri.renderers.visualVariables.SizeVariable" !== i3.declaredClass) return void u("SizeVariable");
  const t2 = R(V(i3, n3, a2), i3, n3, a2, i3.cache.ipData);
  return null == t2 || isNaN(t2) ? void 0 : t2;
}
function g(e2, n3, a2) {
  return null == e2 ? null : e(e2) ? y(e2, n3, a2) : l2(e2) ? e2 : null;
}
function w(e2, n3, a2) {
  return l2(a2) && e2 > a2 ? a2 : l2(n3) && e2 < n3 ? n3 : e2;
}
function z(e2, n3, a2, i3) {
  const t2 = g(n3.minSize, a2, i3) || n3.minDataValue;
  return null == e2 && null == t2 ? null : (e2 ?? 0) + (t2 ?? 0);
}
function F(e2, n3, a2) {
  const i3 = e2.stops;
  let t2 = i3?.length && i3[0].size;
  return null == t2 && (t2 = e2.minSize), g(t2, n3, a2);
}
function S(e2, n3, a2, i3) {
  const t2 = g(n3.minSize, a2, i3);
  if (null == e2) return t2;
  const { minDataValue: r, maxDataValue: l3 } = n3;
  if (null == r || null == l3) return null;
  const s = (e2 - r) / (l3 - r), o = g(n3.maxSize, a2, i3), c2 = null != i3 ? i3.shape : void 0;
  if (e2 <= r) return t2;
  if (e2 >= l3) return o;
  if (null == t2 || null == o) return null;
  if ("area" === n3.scaleBy && c2) {
    const e3 = "circle" === c2, n4 = e3 ? d2 * (t2 / 2) ** 2 : t2 * t2, a3 = n4 + s * ((e3 ? d2 * (o / 2) ** 2 : o * o) - n4);
    return e3 ? 2 * Math.sqrt(a3 / d2) : Math.sqrt(a3);
  }
  return t2 + s * (o - t2);
}
function E(e2, n3, a2, i3) {
  const t2 = g(n3.minSize, a2, i3);
  if (null == e2 || null == t2) return t2;
  const r = null != i3 ? i3.shape : void 0, { minDataValue: l3 } = n3;
  if (null == l3) return null;
  const s = e2 / l3, o = g(n3.maxSize, a2, i3);
  let c2 = null;
  return c2 = "circle" === r ? 2 * Math.sqrt(s * (t2 / 2) ** 2) : "square" === r || "diamond" === r || "image" === r ? Math.sqrt(s * t2 ** 2) : s * t2, w(c2, t2, o);
}
function C(e2, n3, a2, i3, t2) {
  if (null == e2) return null;
  const [r, l3, s] = T(e2, t2);
  if (r === l3) return g(n3.stops?.[r].size, a2, i3);
  {
    const e3 = g(n3.stops?.[r].size, a2, i3), t3 = g(n3.stops?.[l3].size, a2, i3);
    return null == e3 || null == t3 ? null : e3 + (t3 - e3) * s;
  }
}
function M(e2, n3, a2, i3) {
  const r = (i3?.resolution ?? 1) * m[n3.valueUnit], l3 = g(n3.minSize, a2, i3), s = g(n3.maxSize, a2, i3), { valueRepresentation: o } = n3;
  if (null == e2) return l3;
  let c2 = null;
  return c2 = "area" === o ? 2 * Math.sqrt(e2 / d2) / r : "radius" === o || "distance" === o ? 2 * e2 / r : e2 / r, w(c2, l3, s);
}
function k(e2) {
  return e2;
}
function R(e2, n3, a2, i3, t2) {
  switch (n3.transformationType) {
    case i2.Additive:
      return z(e2, n3, a2, i3);
    case i2.Constant:
      return F(n3, a2, i3);
    case i2.ClampedLinear:
      return S(e2, n3, a2, i3);
    case i2.Proportional:
      return E(e2, n3, a2, i3);
    case i2.Stops:
      return C(e2, n3, a2, i3, t2);
    case i2.RealWorldSize:
      return M(e2, n3, a2, i3);
    case i2.Identity:
      return k(e2);
    case i2.Unknown:
      return null;
  }
}
function U(e2, n3, a2) {
  const { isScaleDriven: i3 } = e2.cache;
  if (!(i3 && "3d" === a2 || n3)) return null;
  const t2 = { scale: n3, view: a2 };
  let r = g(e2.minSize, p, t2), l3 = g(e2.maxSize, p, t2);
  if (null != r || null != l3) {
    if (r > l3) {
      const e3 = l3;
      l3 = r, r = e3;
    }
    return { minSize: r, maxSize: l3 };
  }
}
function D(e2, n3, a2) {
  if (!e2.visualVariables) return;
  const i3 = [], t2 = [], r = [], l3 = [], s = [];
  for (const o of e2.visualVariables) switch (o.type) {
    case "color":
      t2.push(o);
      break;
    case "opacity":
      r.push(o);
      break;
    case "rotation":
      s.push(o);
      break;
    case "size":
      l3.push(o);
  }
  return t2.forEach((e3) => {
    const t3 = m2(e3, n3, a2);
    i3.push({ variable: e3, value: t3 });
  }), r.forEach((e3) => {
    const t3 = b(e3, n3, a2);
    i3.push({ variable: e3, value: t3 });
  }), s.forEach((e3) => {
    const t3 = h(e3, n3, a2);
    i3.push({ variable: e3, value: t3 });
  }), l3.forEach((e3) => {
    const t3 = y(e3, n3, a2);
    i3.push({ variable: e3, value: t3 });
  }), i3;
}
function T(e2, n3) {
  if (!n3) return;
  let a2 = 0, i3 = n3.length - 1;
  return n3.some((n4, t2) => e2 < n4 ? (i3 = t2, true) : (a2 = t2, false)), [a2, i3, (e2 - n3[a2]) / (n3[i3] - n3[a2])];
}
function N(e2, n3, i3) {
  const t2 = ["proportional", "proportional", "proportional"];
  for (const r of e2) {
    const e3 = r.useSymbolValue ? "symbol-value" : y(r, n3, i3) ?? "proportional";
    switch (r.axis) {
      case "width":
        t2[0] = e3;
        break;
      case "depth":
        t2[1] = e3;
        break;
      case "height":
        t2[2] = e3;
        break;
      case "width-and-depth":
        t2[0] = e3, t2[1] = e3;
        break;
      case "all":
      case void 0:
      case null:
        t2[0] = e3, t2[1] = e3, t2[2] = e3;
        break;
      default:
        n(r.axis);
    }
  }
  return t2;
}

export {
  i2 as i,
  e,
  t,
  a,
  v,
  m2 as m,
  b,
  h,
  y,
  g,
  R,
  U,
  D,
  N
};
//# sourceMappingURL=chunk-7CUBIFKN.js.map
