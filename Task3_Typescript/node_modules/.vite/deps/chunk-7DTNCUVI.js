import {
  S as S3
} from "./chunk-ULQQXQG7.js";
import {
  o as o2
} from "./chunk-MXSL6LZA.js";
import {
  n as n4
} from "./chunk-RNXMAHSA.js";
import {
  c as c3
} from "./chunk-VD4HSDHE.js";
import {
  i as i2
} from "./chunk-WBSGKMRV.js";
import {
  n as n6
} from "./chunk-SBFMUXL3.js";
import {
  i as i3
} from "./chunk-E7YVYF37.js";
import {
  n as n5
} from "./chunk-E76L26GR.js";
import {
  A,
  c as c4
} from "./chunk-GG4VLKUY.js";
import {
  p as p4
} from "./chunk-OQ76WPLD.js";
import {
  oe,
  p as p3
} from "./chunk-UTU6N7VJ.js";
import {
  c,
  l as l3,
  u as u2
} from "./chunk-G4PMFSAZ.js";
import {
  S
} from "./chunk-OTCYHWWG.js";
import {
  a as a3
} from "./chunk-UGXCZZ7N.js";
import {
  m as m4,
  u as u3
} from "./chunk-AGDHKBKD.js";
import {
  Z
} from "./chunk-JEYXDNAT.js";
import {
  R as R2
} from "./chunk-7ZMGKXLG.js";
import {
  R,
  c as c2
} from "./chunk-LL73CCBG.js";
import {
  m as m3
} from "./chunk-6TS2ZJL4.js";
import {
  f as f2
} from "./chunk-SYPTUUSZ.js";
import {
  l as l2
} from "./chunk-4OESBQFK.js";
import {
  r as r4
} from "./chunk-KHRHKYU2.js";
import {
  q
} from "./chunk-YX2VTIZR.js";
import {
  S as S2
} from "./chunk-LYSDGL5S.js";
import {
  g
} from "./chunk-VCRP2PLV.js";
import {
  r as r3
} from "./chunk-BDLVUYG2.js";
import {
  n as n3
} from "./chunk-HWKQJUGY.js";
import {
  V as V2
} from "./chunk-X3R5OB6L.js";
import {
  y
} from "./chunk-IGYEHOTB.js";
import {
  U,
  l
} from "./chunk-A3VAC24F.js";
import {
  p as p2
} from "./chunk-SRQCQD63.js";
import {
  z
} from "./chunk-O5TPFXRT.js";
import {
  o
} from "./chunk-JUAPMINU.js";
import {
  f
} from "./chunk-PK2ZR2SJ.js";
import {
  r as r2
} from "./chunk-YFPGM5UE.js";
import {
  s as s4
} from "./chunk-KTUX3OKX.js";
import {
  e,
  m as m2,
  n2,
  t2 as t
} from "./chunk-N3XLUQJI.js";
import {
  a2
} from "./chunk-JUAD7TJ6.js";
import {
  m,
  s,
  w,
  x
} from "./chunk-VHLUKPRH.js";
import {
  r
} from "./chunk-5TPMG26T.js";
import {
  n
} from "./chunk-FGWIXJQY.js";
import {
  H,
  p2 as p
} from "./chunk-ZWFY3WY5.js";
import {
  V,
  v
} from "./chunk-LQFTAGIV.js";
import {
  u
} from "./chunk-S7IJH524.js";
import {
  s as s3
} from "./chunk-GZ2P4SCJ.js";
import {
  i2 as i,
  s as s2
} from "./chunk-XWG6QGFK.js";
import {
  a
} from "./chunk-GWNLQRNM.js";
import {
  has
} from "./chunk-FXKORAMT.js";

// node_modules/@arcgis/core/layers/mixins/ArcGISMapService.js
var f3 = (f5) => {
  let b = class extends f5 {
    constructor() {
      super(...arguments), this.capabilities = void 0, this.copyright = null, this.fullExtent = null, this.legendEnabled = true, this.spatialReference = null, this.version = void 0, this._allLayersAndTablesMap = null;
    }
    readCapabilities(e2, r5) {
      const t2 = r5.capabilities && r5.capabilities.split(",").map((e3) => e3.toLowerCase().trim());
      if (!t2) return { operations: { supportsExportMap: false, supportsExportTiles: false, supportsIdentify: false, supportsQuery: false, supportsTileMap: false }, exportMap: null, exportTiles: null };
      const s5 = this.type, o3 = "tile" !== s5 && !!r5.supportsDynamicLayers, a4 = t2.includes("query"), p5 = t2.includes("map"), l4 = !!r5.exportTilesAllowed, n7 = t2.includes("tilemap"), c5 = t2.includes("data"), u4 = "tile" !== s5 && (!r5.tileInfo || o3), y2 = "tile" !== s5 && (!r5.tileInfo || o3), m6 = "tile" !== s5, d = "tile" !== s5 && o3 && r5.currentVersion >= 11.1, h2 = r5.cimVersion ? r4.parse(r5.cimVersion) : null, f6 = h2?.greaterEqual(1, 4) ?? false, b2 = h2?.greaterEqual(2, 0) ?? false;
      return { operations: { supportsExportMap: p5, supportsExportTiles: l4, supportsIdentify: a4, supportsQuery: c5, supportsTileMap: n7 }, exportMap: p5 ? { supportsArcadeExpressionForLabeling: f6, supportsCIMSymbols: b2, supportsDynamicLayers: o3, supportsSublayerOrderBy: d, supportsSublayerDefinitionExpression: y2, supportsSublayerVisibility: u4, supportsSublayersChanges: m6 } : null, exportTiles: l4 ? { maxExportTilesCount: +r5.maxExportTilesCount } : null };
    }
    readVersion(e2, r5) {
      let t2 = r5.currentVersion;
      return t2 || (t2 = r5.hasOwnProperty("capabilities") || r5.hasOwnProperty("tables") ? 10 : r5.hasOwnProperty("supportedImageFormatTypes") ? 9.31 : 9.3), t2;
    }
    async fetchRelatedService(e2) {
      const r5 = this.portalItem;
      if (!r5 || !a3(r5)) return null;
      this._relatedFeatureServicePromise || (this._relatedFeatureServicePromise = r5.fetchRelatedItems({ relationshipType: "Service2Service", direction: "reverse" }, e2).then((e3) => e3.find((e4) => "Feature Service" === e4.type) ?? null, () => null));
      const t2 = await this._relatedFeatureServicePromise;
      return s3(e2), t2 ? { itemId: t2.id, url: t2.url } : null;
    }
    async fetchSublayerInfo(e2, t2) {
      const { source: s5 } = e2;
      if (this?.portalItem && "tile" === this.type && "map-layer" === s5?.type && a3(this.portalItem) && e2.originIdOf("url") < e.SERVICE) {
        const r5 = await this.fetchRelatedService(t2);
        r5 && (e2.url = V(r5.url, s5.mapLayerId.toString()), e2.layerItemId = r5.itemId);
      }
      const { url: i4 } = e2;
      let a4;
      if ("data-layer" === s5.type) {
        a4 = (await H(i4, { responseType: "json", query: { f: "json", ...this.customParameters, token: this.apiKey }, ...t2 })).data;
      } else if (i4 && e2.originIdOf("url") > e.SERVICE) try {
        const e3 = await this._fetchAllLayersAndTablesFromService(i4), r5 = p(i4)?.sublayer ?? s5.mapLayerId;
        a4 = e3.get(r5);
      } catch {
      }
      else {
        let r5 = e2.id;
        "map-layer" === s5?.type && (r5 = s5.mapLayerId);
        try {
          a4 = (await this.fetchAllLayersAndTables(t2)).get(r5);
        } catch {
        }
      }
      return a4;
    }
    async fetchAllLayersAndTables(e2) {
      return this._fetchAllLayersAndTablesFromService(this.parsedUrl?.path, e2);
    }
    async _fetchAllLayersAndTablesFromService(e2, i4) {
      await this.load(i4), this._allLayersAndTablesMap ||= /* @__PURE__ */ new Map();
      const a4 = p(e2), p5 = u(this._allLayersAndTablesMap, a4?.url.path, () => H(V(a4?.url.path, "/layers"), { responseType: "json", query: { f: "json", ...this.customParameters, token: this.apiKey } }).then((e3) => {
        const r5 = /* @__PURE__ */ new Map(), { layers: t2, tables: s5 } = e3.data, o3 = [...t2 ?? [], ...s5 ?? []];
        for (const i5 of o3) r5.set(i5.id, i5);
        return { result: r5 };
      }, (e3) => ({ error: e3 }))), l4 = await p5;
      if (s3(i4), "result" in l4) return l4.result;
      throw l4.error;
    }
  };
  return r([m2({ readOnly: true })], b.prototype, "capabilities", void 0), r([o("service", "capabilities", ["capabilities", "cimVersion", "currentVersion", "exportTilesAllowed", "maxExportTilesCount", "supportsDynamicLayers", "tileInfo"])], b.prototype, "readCapabilities", null), r([m2({ json: { read: { source: "copyrightText" } } })], b.prototype, "copyright", void 0), r([m2({ type: z })], b.prototype, "fullExtent", void 0), r([m2(u2)], b.prototype, "id", void 0), r([m2({ type: Boolean, json: { origins: { service: { read: { enabled: false } } }, read: { source: "showLegend" }, write: { target: "showLegend" } } })], b.prototype, "legendEnabled", void 0), r([m2(l3)], b.prototype, "popupEnabled", void 0), r([m2({ type: f })], b.prototype, "spatialReference", void 0), r([m2({ readOnly: true })], b.prototype, "version", void 0), r([o("service", "version", ["currentVersion", "capabilities", "tables", "supportedImageFormatTypes"])], b.prototype, "readVersion", null), b = r([a2("esri.layers.mixins.ArcGISMapService")], b), b;
};

// node_modules/@arcgis/core/layers/support/Sublayer.js
var W;
function X(e2) {
  return "esriSMS" === e2?.type;
}
function Y(e2, r5, t2) {
  const i4 = t2.minimumWritableOrigin || t2.origin;
  return !!i4 && e2.originIdOf(r5) >= n2(i4);
}
function Z2(e2, r5, t2) {
  const i4 = Y(this, r5, t2);
  return { ignoreOrigin: true, allowNull: i4, enabled: !!t2 && ("map-image" === t2.layer?.type && (t2.writeSublayerStructure || i4)) };
}
function ee(e2, r5, t2) {
  return { enabled: !!t2 && ("tile" === t2.layer?.type && (Y(this, r5, t2) || this._isOverridden(r5))) };
}
function re(e2, r5, t2) {
  return { ignoreOrigin: true, enabled: t2 && t2.writeSublayerStructure || false };
}
function te(e2, r5, t2) {
  return { ignoreOrigin: true, enabled: !!t2?.writeSublayerStructure && this.originIdOf(r5) > e.SERVICE };
}
function ie(e2, r5, t2) {
  return { ignoreOrigin: true, enabled: !!t2 && (t2.writeSublayerStructure || Y(this, r5, t2)) };
}
var oe2 = 0;
var se = /* @__PURE__ */ new Set(["layer", "parent", "loaded", "loadStatus", "loadError", "loadWarnings"]);
var _a;
var ae = (_a = class extends S(n3.IdentifiableMixin(p2)) {
  constructor(e2) {
    super(e2), this.attributeTableTemplate = null, this.capabilities = void 0, this.maxScaleRange = { minScale: 0, maxScale: 0 }, this.fields = null, this.fullExtent = null, this.geometryType = null, this.globalIdField = null, this.isTable = false, this.legendEnabled = true, this.objectIdField = null, this.parent = null, this.popupEnabled = true, this.popupTemplate = null, this.relationships = null, this.sourceJSON = null, this.spatialReference = null, this.title = null, this.typeIdField = null, this.type = "sublayer", this.types = null, this._lastParsedUrl = null;
  }
  async load(e2) {
    return this.addResolvingPromise((async () => {
      const { layer: r5, url: i4 } = this;
      if (!r5 && !i4) throw new s2("sublayer:missing-layer", "Sublayer can't be loaded without being part of a layer", { sublayer: this });
      const s5 = r5 ? await r5.fetchSublayerInfo(this, e2) : (await H(i4, { responseType: "json", query: { f: "json" }, ...e2 })).data;
      s5 && (this.sourceJSON = s5, this.read({ layerDefinition: s5 }, { origin: "service", layer: r5, url: f2(i4) }));
    })()), this;
  }
  readCapabilities(e2, r5) {
    r5 = r5.layerDefinition || r5;
    const { attachment: t2, operations: { supportsQuery: i4, supportsQueryAttachments: o3 }, query: { supportsFormatPBF: s5, supportsOrderBy: a4, supportsPagination: l4 }, data: { supportsAttachment: n7 }, queryRelated: p5 } = c3(r5, this.url);
    return { attachment: { supportsOrderByFields: t2?.supportsOrderByFields ?? false, supportsResize: t2?.supportsResize ?? false }, exportMap: { supportsModification: !!r5.canModifyLayer }, operations: { supportsQuery: i4, supportsQueryAttachments: o3 }, data: { supportsAttachment: n7 }, query: { supportsFormatPBF: s5, supportsOrderBy: a4, supportsPagination: l4 }, queryRelated: p5 };
  }
  get defaultPopupTemplate() {
    return this.createPopupTemplate();
  }
  set definitionExpression(e2) {
    this._setAndNotifyLayer("definitionExpression", e2);
  }
  get effectiveScaleRange() {
    const { minScale: e2, maxScale: r5 } = this;
    return { minScale: e2, maxScale: r5 };
  }
  readMaxScaleRange(e2, r5) {
    return { minScale: (r5 = r5.layerDefinition || r5).minScale ?? 0, maxScale: r5.maxScale ?? 0 };
  }
  get fieldsIndex() {
    return new Z(this.fields || []);
  }
  set floorInfo(e2) {
    this._setAndNotifyLayer("floorInfo", e2);
  }
  readGlobalIdFieldFromService(e2, r5) {
    if ((r5 = r5.layerDefinition || r5).globalIdField) return r5.globalIdField;
    if (r5.fields) {
      for (const t2 of r5.fields) if ("esriFieldTypeGlobalID" === t2.type) return t2.name;
    }
  }
  get id() {
    const e2 = this._get("id");
    return e2 ?? oe2++;
  }
  set id(e2) {
    this._get("id") !== e2 && (false !== this.layer?.capabilities?.exportMap?.supportsDynamicLayers ? this._set("id", e2) : this._logLockedError("id", "capability not available 'layer.capabilities.exportMap.supportsDynamicLayers'"));
  }
  readIsTable(e2, r5) {
    return "Table" === r5.type;
  }
  set labelingInfo(e2) {
    this._setAndNotifyLayer("labelingInfo", e2);
  }
  writeLabelingInfo(e2, r5, t2, i4) {
    e2 && e2.length && (r5.layerDefinition = { drawingInfo: { labelingInfo: e2.map((e3) => e3.write({}, i4)) } });
  }
  set labelsVisible(e2) {
    this._setAndNotifyLayer("labelsVisible", e2);
  }
  set layer(e2) {
    this._set("layer", e2), this.sublayers?.forEach((r5) => r5.layer = e2);
  }
  set listMode(e2) {
    this._set("listMode", e2);
  }
  set minScale(e2) {
    this._setAndNotifyLayer("minScale", e2);
  }
  readMinScale(e2, r5) {
    return r5.minScale || r5.layerDefinition?.minScale || 0;
  }
  set maxScale(e2) {
    this._setAndNotifyLayer("maxScale", e2);
  }
  readMaxScale(e2, r5) {
    return r5.maxScale || r5.layerDefinition?.maxScale || 0;
  }
  readObjectIdFieldFromService(e2, r5) {
    if ((r5 = r5.layerDefinition || r5).objectIdField) return r5.objectIdField;
    const t2 = r5.fields?.find((e3) => "esriFieldTypeOID" === e3.type);
    return t2?.name;
  }
  set opacity(e2) {
    this._setAndNotifyLayer("opacity", e2);
  }
  readOpacity(e2, r5) {
    const { layerDefinition: t2 } = r5;
    return 1 - 0.01 * (t2?.transparency ?? t2?.drawingInfo?.transparency ?? 0);
  }
  writeOpacity(e2, r5, t2, i4) {
    r5.layerDefinition = { drawingInfo: { transparency: 100 - 100 * e2 } };
  }
  set orderBy(e2) {
    this._setAndNotifyLayer("orderBy", e2);
  }
  writeParent(e2, r5) {
    this.parent && this.parent !== this.layer ? r5.parentLayerId = s(this.parent.id) : r5.parentLayerId = -1;
  }
  get queryTask() {
    if (!this.layer) return null;
    const { capabilities: e2, fieldsIndex: r5, layer: t2, url: i4 } = this, { spatialReference: o3 } = t2, s5 = "gdbVersion" in t2 ? t2.gdbVersion : void 0, a4 = has("featurelayer-pbf") && e2?.query.supportsFormatPBF;
    return new S3({ fieldsIndex: r5, gdbVersion: s5, pbfSupported: a4, queryAttachmentsSupported: e2?.operations?.supportsQueryAttachments ?? false, sourceSpatialReference: o3, url: i4 });
  }
  set renderer(e2) {
    if (g(e2, this.fieldsIndex), e2) {
      for (const r5 of e2.symbols) if (S2(r5)) {
        i.getLogger(this).warn("Sublayer renderer should use 2D symbols");
        break;
      }
    }
    this._setAndNotifyLayer("renderer", e2);
  }
  get source() {
    return this._get("source") || new c2({ mapLayerId: this.id });
  }
  set source(e2) {
    this._setAndNotifyLayer("source", e2);
  }
  set sublayers(e2) {
    this._handleSublayersChange(e2, this._get("sublayers")), this._set("sublayers", e2);
  }
  castSublayers(e2) {
    return w(V2.ofType(W), e2);
  }
  writeSublayers(e2, r5, t2) {
    this.sublayers?.length && (r5[t2] = this.sublayers.map((e3) => e3.id).toArray().reverse());
  }
  readTitle(e2, r5) {
    return r5.layerDefinition?.name ?? r5.name;
  }
  readTypeIdField(e2, r5) {
    let t2 = (r5 = r5.layerDefinition || r5).typeIdField;
    if (t2 && r5.fields) {
      t2 = t2.toLowerCase();
      const e3 = r5.fields.find((e4) => e4.name.toLowerCase() === t2);
      e3 && (t2 = e3.name);
    }
    return t2;
  }
  get url() {
    const e2 = this.layer?.parsedUrl ?? this._lastParsedUrl, r5 = this.source;
    if (!e2) return null;
    if (this._lastParsedUrl = e2, "map-layer" === r5?.type) return `${e2.path}/${r5.mapLayerId}`;
    const t2 = { layer: JSON.stringify({ source: this.source }) };
    return `${e2.path}/dynamicLayer?${v(t2)}`;
  }
  set url(e2) {
    this._overrideIfSome("url", e2);
  }
  set visible(e2) {
    this._setAndNotifyLayer("visible", e2);
  }
  writeVisible(e2, r5, t2, i4) {
    r5[t2] = this.getAtOrigin("defaultVisibility", "service") || e2;
  }
  clone() {
    const { store: e2 } = n(this), r5 = new W();
    return n(r5).store = e2.clone(se), this.commitProperty("url"), r5._lastParsedUrl = this._lastParsedUrl, r5;
  }
  createPopupTemplate(e2) {
    return p4(this, e2);
  }
  createQuery() {
    return new R2({ returnGeometry: true, where: this.definitionExpression || "1=1" });
  }
  async createFeatureLayer() {
    if (this.hasOwnProperty("sublayers")) return null;
    const e2 = (await import("./FeatureLayer-5JKXWSL3.js")).default, { layer: r5, url: t2 } = this;
    let i4;
    if (t2 && this.originIdOf("url") > e.SERVICE) i4 = new e2({ url: t2 });
    else {
      if (!r5?.parsedUrl) throw new s2("createFeatureLayer:missing-information", "Cannot create a FeatureLayer without a url or a parent layer");
      {
        const t3 = r5.parsedUrl;
        i4 = new e2({ url: t3.path }), t3 && this.source && ("map-layer" === this.source.type ? i4.layerId = this.source.mapLayerId : i4.dynamicDataSource = this.source);
      }
    }
    return null != r5?.refreshInterval && (i4.refreshInterval = r5.refreshInterval), this.definitionExpression && (i4.definitionExpression = this.definitionExpression), this.floorInfo && (i4.floorInfo = a(this.floorInfo)), this.originIdOf("labelingInfo") > e.SERVICE && (i4.labelingInfo = a(this.labelingInfo)), this.originIdOf("labelsVisible") > e.DEFAULTS && (i4.labelsVisible = this.labelsVisible), this.originIdOf("legendEnabled") > e.DEFAULTS && (i4.legendEnabled = this.legendEnabled), this.originIdOf("visible") > e.DEFAULTS && (i4.visible = this.visible), this.originIdOf("minScale") > e.DEFAULTS && (i4.minScale = this.minScale), this.originIdOf("maxScale") > e.DEFAULTS && (i4.maxScale = this.maxScale), this.originIdOf("opacity") > e.DEFAULTS && (i4.opacity = this.opacity), this.originIdOf("popupTemplate") > e.DEFAULTS && (i4.popupTemplate = a(this.popupTemplate)), this.originIdOf("renderer") > e.SERVICE && (i4.renderer = a(this.renderer)), "data-layer" === this.source?.type && (i4.dynamicDataSource = this.source.clone()), this.originIdOf("title") > e.DEFAULTS && (i4.title = this.title), "map-image" === r5?.type && r5.originIdOf("customParameters") > e.DEFAULTS && (i4.customParameters = r5.customParameters), "tile" === r5?.type && r5.originIdOf("customParameters") > e.DEFAULTS && (i4.customParameters = r5.customParameters), i4;
  }
  getField(e2) {
    return this.fieldsIndex.get(e2);
  }
  getFeatureType(e2) {
    return oe(this.types, this.typeIdField, e2);
  }
  getFieldDomain(e2, r5) {
    const t2 = r5?.feature, i4 = this.getFeatureType(t2);
    if (i4) {
      const r6 = i4.domains && i4.domains[e2];
      if (r6 && "inherited" !== r6.type) return r6;
    }
    return this._getLayerDomain(e2);
  }
  async queryAttachments(e2, r5) {
    await this.load(), e2 = p3.from(e2);
    const t2 = this.capabilities;
    if (!t2?.data?.supportsAttachment) throw new s2("queryAttachments:not-supported", "this layer doesn't support attachments");
    const { attachmentTypes: i4, objectIds: s5, globalIds: a4, num: l4, size: n7, start: p5, where: u4 } = e2;
    if (!t2?.operations?.supportsQueryAttachments) {
      if (i4?.length > 0 || a4?.length > 0 || n7?.length > 0 || l4 || p5 || u4) throw new s2("queryAttachments:option-not-supported", "when 'capabilities.operations.supportsQueryAttachments' is false, only objectIds is supported", e2);
    }
    if (!(s5?.length || a4?.length || u4)) throw new s2("queryAttachments:invalid-query", "'objectIds', 'globalIds', or 'where' are required to perform attachment query", e2);
    return !t2?.attachment?.supportsOrderByFields && e2.orderByFields?.length && ((e2 = e2.clone()).orderByFields = null), this.queryTask.executeAttachmentQuery(e2, r5);
  }
  async queryFeatureCount(e2 = this.createQuery(), r5) {
    if (await this.load(), !this.capabilities.operations.supportsQuery) throw new s2("queryFeatureCount:not-supported", "this layer doesn't support queries.");
    if (!this.url) throw new s2("queryFeatureCount:not-supported", "this layer has no url.");
    const t2 = this.layer?.apiKey;
    return await this.queryTask.executeForCount(e2, { ...r5, query: { ...this.layer?.customParameters, token: t2 } });
  }
  async queryFeatures(e2 = this.createQuery(), r5) {
    if (await this.load(), !this.capabilities.operations.supportsQuery) throw new s2("queryFeatures:not-supported", "this layer doesn't support queries.");
    if (!this.url) throw new s2("queryFeatures:not-supported", "this layer has no url.");
    const t2 = await this.queryTask.execute(e2, { ...r5, query: { ...this.layer?.customParameters, token: this.layer?.apiKey } });
    if (t2?.features) for (const i4 of t2.features) i4.sourceLayer = this;
    return t2;
  }
  async queryObjectIds(e2 = this.createQuery(), r5) {
    if (await this.load(), !this.capabilities.operations.supportsQuery) throw new s2("queryObjectIds:not-supported", "this layer doesn't support queries.");
    if (!this.url) throw new s2("queryObjectIds:not-supported", "this layer has no url.");
    const t2 = this.layer?.apiKey;
    return await this.queryTask.executeForIds(e2, { ...r5, query: { ...this.layer?.customParameters, token: t2 } });
  }
  async queryRelatedFeatures(e2, r5) {
    if (await this.load(), !this.capabilities.operations.supportsQuery) throw new s2("queryRelatedFeatures:not-supported", "this layer doesn't support queries.");
    if (!this.url) throw new s2("queryRelatedFeatures:not-supported", "this layer has no url.");
    const t2 = this.layer?.apiKey;
    return await this.queryTask.executeRelationshipQuery(e2, { ...r5, query: { ...this.layer?.customParameters, token: t2 } });
  }
  async queryRelatedFeaturesCount(e2, r5) {
    if (await this.load(), !this.capabilities.operations.supportsQuery) throw new s2("queryRelatedFeaturesCount:not-supported", "this layer doesn't support queries.");
    if (!this.capabilities.queryRelated.supportsCount) throw new s2("queryRelatedFeaturesCount:not-supported", "this layer doesn't support query related counts.");
    if (!this.url) throw new s2("queryRelatedFeaturesCount:not-supported", "this layer has no url.");
    const t2 = this.layer?.apiKey;
    return await this.queryTask.executeRelationshipQueryForCount(e2, { ...r5, query: { ...this.layer?.customParameters, token: t2 } });
  }
  toExportImageJSON(e2) {
    const r5 = { id: this.id, source: this.source?.toJSON() || { mapLayerId: this.id, type: "mapLayer" } }, t2 = r3(e2, this.definitionExpression);
    null != t2 && (r5.definitionExpression = t2);
    const i4 = ["renderer", "labelingInfo", "opacity", "labelsVisible"].reduce((e3, r6) => (e3[r6] = this.originIdOf(r6), e3), {}), o3 = Object.keys(i4).some((e3) => i4[e3] > e.SERVICE);
    if (o3) {
      const e3 = r5.drawingInfo = {};
      if (i4.renderer > e.SERVICE && (e3.renderer = this.renderer ? this.renderer.toJSON() : null), i4.labelsVisible > e.SERVICE && (e3.showLabels = this.labelsVisible), this.labelsVisible && i4.labelingInfo > e.SERVICE) if (this.labelingInfo) {
        !this.loaded && this.labelingInfo?.some((e4) => !e4.labelPlacement) && i.getLogger(this).warnOnce(`A Sublayer (title: ${this.title}, id: ${this.id}) has an undefined 'labelPlacement' and so labels cannot be displayed. Either define a valid 'labelPlacement' or call Sublayer.load() to use a default value based on geometry type.`, { sublayer: this });
        let r6 = this.labelingInfo;
        null != this.geometryType && (r6 = c4(this.labelingInfo, y.toJSON(this.geometryType))), e3.showLabels = true, e3.labelingInfo = r6.filter((e4) => e4.labelPlacement).map((e4) => e4.toJSON({ origin: "service", layer: this.layer }));
      } else e3.showLabels = false;
      i4.opacity > e.SERVICE && (e3.transparency = 100 - 100 * this.opacity), this._assignDefaultSymbolColors(e3.renderer);
    }
    return (this.layer?.capabilities?.exportMap?.supportsSublayerOrderBy ?? false) && this.originIdOf("orderBy") > e.SERVICE && (r5.orderBy = this.orderBy?.map((e3) => e3.toJSON()) ?? null), r5;
  }
  _assignDefaultSymbolColors(e2) {
    this._forEachSimpleMarkerSymbols(e2, (e3) => {
      e3.color || "esriSMSX" !== e3.style && "esriSMSCross" !== e3.style || (e3.outline?.color ? e3.color = e3.outline.color : e3.color = [0, 0, 0, 0]);
    });
  }
  _forEachSimpleMarkerSymbols(e2, r5) {
    if (e2) {
      const t2 = ("uniqueValueInfos" in e2 ? e2.uniqueValueInfos : "classBreakInfos" in e2 ? e2.classBreakInfos : null) ?? [];
      for (const e3 of t2) X(e3.symbol) && r5(e3.symbol);
      "symbol" in e2 && X(e2.symbol) && r5(e2.symbol), "defaultSymbol" in e2 && X(e2.defaultSymbol) && r5(e2.defaultSymbol);
    }
  }
  _setAndNotifyLayer(e2, r5) {
    const t2 = this.layer, i4 = this._get(e2);
    let o3, s5;
    switch (e2) {
      case "definitionExpression":
      case "floorInfo":
        o3 = "supportsSublayerDefinitionExpression";
        break;
      case "minScale":
      case "maxScale":
      case "visible":
        o3 = "supportsSublayerVisibility";
        break;
      case "labelingInfo":
      case "labelsVisible":
      case "opacity":
      case "renderer":
      case "source":
        o3 = "supportsDynamicLayers", s5 = "supportsModification";
        break;
      case "orderBy":
        o3 = "supportsSublayerOrderBy", s5 = "supportsModification";
    }
    const a4 = n(this).getDefaultOrigin();
    if ("service" !== a4) {
      if (o3 && false === this.layer?.capabilities?.exportMap?.[o3]) return void this._logLockedError(e2, `capability not available 'layer.capabilities.exportMap.${o3}'`);
      if (s5 && false === this.capabilities?.exportMap[s5]) return void this._logLockedError(e2, `capability not available 'capabilities.exportMap.${s5}'`);
    }
    "source" !== e2 || "not-loaded" === this.loadStatus ? (this._set(e2, r5), "service" !== a4 && i4 !== r5 && t2 && t2.emit && t2.emit("sublayer-update", { propertyName: e2, target: this })) : this._logLockedError(e2, "'source' can't be changed after calling sublayer.load()");
  }
  _handleSublayersChange(e2, r5) {
    r5 && (r5.forEach((e3) => {
      e3.parent = null, e3.layer = null;
    }), this.removeAllHandles()), e2 && (e2.forEach((e3) => {
      e3.parent = this, e3.layer = this.layer;
    }), this.addHandles([e2.on("after-add", ({ item: e3 }) => {
      e3.parent = this, e3.layer = this.layer;
    }), e2.on("after-remove", ({ item: e3 }) => {
      e3.parent = null, e3.layer = null;
    }), e2.on("before-changes", (e3) => {
      (this.layer?.capabilities?.exportMap?.supportsSublayersChanges ?? 1) || (i.getLogger(this).error(new s2("sublayer:sublayers-non-modifiable", "Sublayer can't be added, moved, or removed from the layer's sublayers", { sublayer: this, layer: this.layer })), e3.preventDefault());
    })]));
  }
  _logLockedError(e2, r5) {
    const { layer: t2, declaredClass: i4 } = this;
    i.getLogger(i4).error(new s2("sublayer:locked", `Property '${String(e2)}' can't be changed on Sublayer from the layer '${t2?.id}'`, { reason: r5, sublayer: this, layer: t2 }));
  }
  _getLayerDomain(e2) {
    return this.fieldsIndex.get(e2)?.domain ?? null;
  }
}, W = _a, _a.test = { isMapImageLayerOverridePolicy: (e2) => e2 === te || e2 === re || e2 === Z2, isTileImageLayerOverridePolicy: (e2) => e2 === ee }, _a);
r([m2({ type: c, json: { name: "attributeTableInfo", write: { overridePolicy: Z2 }, origins: { "web-scene": { write: false } } } })], ae.prototype, "attributeTableTemplate", void 0), r([m2({ readOnly: true })], ae.prototype, "capabilities", void 0), r([o("service", "capabilities", ["layerDefinition.canModifyLayer", "layerDefinition.capabilities"])], ae.prototype, "readCapabilities", null), r([m2()], ae.prototype, "defaultPopupTemplate", null), r([m2({ type: String, value: null, json: { name: "layerDefinition.definitionExpression", write: { allowNull: true, overridePolicy: Z2 } } })], ae.prototype, "definitionExpression", null), r([m2({ readOnly: true })], ae.prototype, "effectiveScaleRange", null), r([o("service", "maxScaleRange", ["minScale", "maxScale"])], ae.prototype, "readMaxScaleRange", null), r([m2({ type: [m3], json: { origins: { service: { read: { source: "layerDefinition.fields" } } } } })], ae.prototype, "fields", void 0), r([m2({ readOnly: true })], ae.prototype, "fieldsIndex", null), r([m2({ type: i2, value: null, json: { name: "layerDefinition.floorInfo", read: { source: "layerDefinition.floorInfo" }, write: { target: "layerDefinition.floorInfo", overridePolicy: Z2 }, origins: { "web-scene": { read: false, write: false } } } })], ae.prototype, "floorInfo", null), r([m2({ type: z, json: { read: { source: "layerDefinition.extent" } } })], ae.prototype, "fullExtent", void 0), r([m2({ type: y.apiValues, json: { origins: { service: { name: "layerDefinition.geometryType", read: { reader: y.read } } } } })], ae.prototype, "geometryType", void 0), r([m2({ type: String })], ae.prototype, "globalIdField", void 0), r([o("service", "globalIdField", ["layerDefinition.globalIdField", "layerDefinition.fields"])], ae.prototype, "readGlobalIdFieldFromService", null), r([m2({ type: x, json: { write: { ignoreOrigin: true } } })], ae.prototype, "id", null), r([m2({ readOnly: true })], ae.prototype, "isTable", void 0), r([o("service", "isTable", ["type"])], ae.prototype, "readIsTable", null), r([m2({ value: null, type: [A], json: { read: { source: "layerDefinition.drawingInfo.labelingInfo" }, write: { target: "layerDefinition.drawingInfo.labelingInfo", overridePolicy: te } } })], ae.prototype, "labelingInfo", null), r([r2("labelingInfo")], ae.prototype, "writeLabelingInfo", null), r([m2({ type: Boolean, value: true, json: { read: { source: "layerDefinition.drawingInfo.showLabels" }, write: { target: "layerDefinition.drawingInfo.showLabels", overridePolicy: re } } })], ae.prototype, "labelsVisible", null), r([m2({ value: null })], ae.prototype, "layer", null), r([m2({ type: String, json: { write: { overridePolicy: ee } } })], ae.prototype, "layerItemId", void 0), r([m2({ type: Boolean, value: true, json: { origins: { service: { read: { enabled: false } } }, read: { source: "showLegend" }, write: { target: "showLegend", overridePolicy: ie } } })], ae.prototype, "legendEnabled", void 0), r([m2({ type: ["show", "hide", "hide-children"], value: "show", json: { read: false, write: false, origins: { "web-scene": { read: true, write: true } } } })], ae.prototype, "listMode", null), r([m2({ type: Number, value: 0, json: { write: { overridePolicy: re } } })], ae.prototype, "minScale", null), r([o("minScale", ["minScale", "layerDefinition.minScale"])], ae.prototype, "readMinScale", null), r([m2({ type: Number, value: 0, json: { write: { overridePolicy: re } } })], ae.prototype, "maxScale", null), r([o("maxScale", ["maxScale", "layerDefinition.maxScale"])], ae.prototype, "readMaxScale", null), r([m2()], ae.prototype, "objectIdField", void 0), r([o("service", "objectIdField", ["layerDefinition.objectIdField", "layerDefinition.fields"])], ae.prototype, "readObjectIdFieldFromService", null), r([m2({ type: Number, value: 1, json: { write: { target: "layerDefinition.drawingInfo.transparency", overridePolicy: re } } })], ae.prototype, "opacity", null), r([o("opacity", ["layerDefinition.drawingInfo.transparency", "layerDefinition.transparency"])], ae.prototype, "readOpacity", null), r([r2("opacity")], ae.prototype, "writeOpacity", null), r([m2({ value: null, type: [n5], json: { name: "layerDefinition.orderBy", read: { reader: i3 }, write: { overridePolicy: Z2 }, origins: { "web-scene": { read: false, write: false } } } })], ae.prototype, "orderBy", null), r([m2({ json: { type: x, write: { target: "parentLayerId", writerEnsuresNonNull: true, overridePolicy: re } } })], ae.prototype, "parent", void 0), r([r2("parent")], ae.prototype, "writeParent", null), r([m2({ type: Boolean, value: true, json: { read: { source: "disablePopup", reader: (e2, r5) => !r5.disablePopup }, write: { target: "disablePopup", overridePolicy: ie, writer(e2, r5, t2) {
  r5[t2] = !e2;
} } } })], ae.prototype, "popupEnabled", void 0), r([m2({ type: q, json: { read: { source: "popupInfo" }, write: { target: "popupInfo", overridePolicy: ie } } })], ae.prototype, "popupTemplate", void 0), r([m2({ readOnly: true })], ae.prototype, "queryTask", null), r([m2({ type: [n4], readOnly: true, json: { origins: { service: { read: { source: "layerDefinition.relationships" } } } } })], ae.prototype, "relationships", void 0), r([m2({ types: m4, value: null, json: { name: "layerDefinition.drawingInfo.renderer", write: { overridePolicy: te }, origins: { "web-scene": { types: u3, name: "layerDefinition.drawingInfo.renderer", write: { overridePolicy: te } } } } })], ae.prototype, "renderer", null), r([m2({ types: { key: "type", base: null, typeMap: { "data-layer": R, "map-layer": c2 } }, cast(e2) {
  if (e2) {
    if ("mapLayerId" in e2) return m(c2, e2);
    if ("dataSource" in e2) return m(R, e2);
  }
  return e2;
}, json: { name: "layerDefinition.source", write: { overridePolicy: re } } })], ae.prototype, "source", null), r([m2()], ae.prototype, "sourceJSON", void 0), r([m2({ type: f, json: { origins: { service: { read: { source: "layerDefinition.extent.spatialReference" } } } } })], ae.prototype, "spatialReference", void 0), r([m2({ value: null, json: { type: [x], write: { target: "subLayerIds", allowNull: true, overridePolicy: re } } })], ae.prototype, "sublayers", null), r([s4("sublayers")], ae.prototype, "castSublayers", null), r([r2("sublayers")], ae.prototype, "writeSublayers", null), r([m2({ type: String, json: { name: "name", write: { overridePolicy: ie } } })], ae.prototype, "title", void 0), r([o("service", "title", ["name", "layerDefinition.name"])], ae.prototype, "readTitle", null), r([m2({ type: String })], ae.prototype, "typeIdField", void 0), r([m2({ json: { read: false }, readOnly: true, value: "sublayer" })], ae.prototype, "type", void 0), r([o("typeIdField", ["layerDefinition.typeIdField"])], ae.prototype, "readTypeIdField", null), r([m2({ type: [n6], json: { origins: { service: { read: { source: "layerDefinition.types" } } } } })], ae.prototype, "types", void 0), r([m2({ type: String, json: { name: "layerUrl", write: { overridePolicy: ee } } })], ae.prototype, "url", null), r([m2({ type: Boolean, value: true, json: { read: { source: "defaultVisibility" }, write: { target: "defaultVisibility", overridePolicy: re } } })], ae.prototype, "visible", null), r([r2("visible")], ae.prototype, "writeVisible", null), ae = W = r([a2("esri.layers.support.Sublayer")], ae);

// node_modules/@arcgis/core/layers/mixins/SublayersOwner.js
function h(e2, r5) {
  const s5 = [], t2 = {};
  return e2 ? (e2.forEach((e3) => {
    const o3 = new ae();
    if (o3.read(e3, r5), t2[o3.id] = o3, null != e3.parentLayerId && -1 !== e3.parentLayerId) {
      const r6 = t2[e3.parentLayerId];
      r6.sublayers || (r6.sublayers = []), r6.sublayers.unshift(o3);
    } else s5.unshift(o3);
  }), s5) : s5;
}
var f4 = V2.ofType(ae);
function S4(e2, r5) {
  e2 && e2.forEach((e3) => {
    r5(e3), e3.sublayers && e3.sublayers.length && S4(e3.sublayers, r5);
  });
}
var m5 = (m6) => {
  let E = class extends m6 {
    constructor(...e2) {
      super(...e2), this.allSublayers = new l2({ getCollections: () => [this.sublayers], getChildrenFunction: (e3) => e3.sublayers }), this.sublayersSourceJSON = { [e.SERVICE]: {}, [e.PORTAL_ITEM]: {}, [e.WEB_SCENE]: {}, [e.WEB_MAP]: {}, [e.LINK_CHART]: {} }, this.subtables = null, this.addHandles([l(() => this.sublayers, (e3, r5) => this._handleSublayersChange(e3, r5), U), l(() => this.subtables, (e3, r5) => this._handleSublayersChange(e3, r5), U)]);
    }
    destroy() {
      this.allSublayers.destroy();
    }
    readSublayers(e2, r5) {
      if (!r5 || !e2) return;
      const { sublayersSourceJSON: s5 } = this, t2 = n2(r5.origin);
      if (t2 < e.SERVICE) return;
      if (s5[t2] = { context: r5, visibleLayers: e2.visibleLayers || s5[t2].visibleLayers, layers: e2.layers || s5[t2].layers }, t2 > e.SERVICE) return;
      this._set("serviceSublayers", this.createSublayersForOrigin("service").sublayers);
      const { sublayers: o3, origin: a4 } = this.createSublayersForOrigin("web-document"), l4 = n(this);
      l4.setDefaultOrigin(a4), this._set("sublayers", new f4(o3)), l4.setDefaultOrigin("user");
    }
    findSublayerById(e2) {
      return this.allSublayers.find((r5) => r5.id === e2);
    }
    createServiceSublayers() {
      return this.createSublayersForOrigin("service").sublayers;
    }
    createSublayersForOrigin(e2) {
      let r5;
      const s5 = n2("web-document" === e2 ? "web-map" : e2);
      let t2 = e.SERVICE, o3 = this.sublayersSourceJSON[e.SERVICE].layers, a4 = this.sublayersSourceJSON[e.SERVICE].context, l4 = null;
      const i4 = [e.PORTAL_ITEM, e.WEB_SCENE, e.WEB_MAP].filter((e3) => e3 <= s5);
      for (const y2 of i4) {
        const e3 = this.sublayersSourceJSON[y2];
        o2(e3.layers) && (t2 = y2, o3 = e3.layers, a4 = e3.context, e3.visibleLayers && (l4 = { visibleLayers: e3.visibleLayers, context: e3.context }));
      }
      const n7 = [e.PORTAL_ITEM, e.WEB_SCENE, e.WEB_MAP].filter((e3) => e3 > t2 && e3 <= s5);
      let u4 = null;
      for (const y2 of n7) {
        const { layers: e3, visibleLayers: s6, context: t3 } = this.sublayersSourceJSON[y2];
        e3 && (u4 = { layers: e3, context: t3 }, r5 ??= y2), s6 && (l4 = { visibleLayers: s6, context: t3 });
      }
      const d = h(o3, a4), m7 = /* @__PURE__ */ new Map(), E2 = /* @__PURE__ */ new Set();
      if (u4) for (const y2 of u4.layers) m7.set(y2.id, y2);
      if (l4?.visibleLayers) for (const y2 of l4.visibleLayers) E2.add(y2);
      return S4(d, (e3) => {
        u4 && e3.read(m7.get(e3.id), u4.context), l4 && e3.read({ defaultVisibility: E2.has(e3.id) }, l4.context);
      }), { origin: t(t2), originWithPartialOverrides: r5 ? t(r5) : null, sublayers: new f4({ items: d }) };
    }
    read(e2, r5) {
      super.read(e2, r5), this.readSublayers(e2, r5);
    }
    _handleSublayersChange(e2, r5) {
      r5 && (r5.forEach((e3) => {
        e3.parent = null, e3.layer = null;
      }), this.removeHandles("sublayers-owner")), e2 && (e2.forEach((e3) => {
        e3.parent = this, e3.layer = this;
      }), this.addHandles([e2.on("after-add", ({ item: e3 }) => {
        e3.parent = this, e3.layer = this;
      }), e2.on("after-remove", ({ item: e3 }) => {
        e3.parent = null, e3.layer = null;
      })], "sublayers-owner"), "tile" === this.type && this.addHandles(e2.on("before-changes", (e3) => {
        i.getLogger("esri.layers.TileLayer").error(new s2("tilelayer:sublayers-non-modifiable", "ISublayer can't be added, moved, or removed from the layer's sublayers", { layer: this })), e3.preventDefault();
      }), "sublayers-owner"));
    }
  };
  return r([m2({ readOnly: true })], E.prototype, "allSublayers", void 0), r([m2({ readOnly: true, type: V2.ofType(ae) })], E.prototype, "serviceSublayers", void 0), r([m2({ value: null, type: f4, json: { read: false, write: { allowNull: true, ignoreOrigin: true } } })], E.prototype, "sublayers", void 0), r([m2({ readOnly: true })], E.prototype, "sublayersSourceJSON", void 0), r([m2({ type: f4, json: { read: { source: "tables" } } })], E.prototype, "subtables", void 0), E = r([a2("esri.layers.mixins.SublayersOwner")], E), E;
};

export {
  f3 as f,
  ae,
  m5 as m
};
//# sourceMappingURL=chunk-7DTNCUVI.js.map
