import {
  n
} from "./chunk-DBZ575A6.js";
import {
  Fe,
  Ie,
  Se,
  Ue,
  ge,
  ve
} from "./chunk-VCRP2PLV.js";
import {
  N
} from "./chunk-OXSERRAR.js";

// node_modules/@arcgis/core/layers/graphics/sources/support/sourceUtils.js
var l = class {
  constructor(t) {
    this.description = t, this.code = null;
  }
};
var a = class {
  constructor(t) {
    this.globalId = null, this.objectId = null, this.success = false, this.uniqueId = null, this.error = new l(t);
  }
};
function p(t) {
  return new a(t);
}
var c = class {
  constructor(t) {
    this.globalId = null, this.success = true, this.objectId = this.uniqueId = t;
  }
};
function f(t) {
  return new c(t);
}
var g = /* @__PURE__ */ new Set();
function d(t, e, o, s = false) {
  g.clear();
  for (const i in o) {
    const u = t.get(i);
    if (!u) continue;
    const l2 = m(u, o[i]);
    if (g.add(u.name), u && (s || u.editable)) {
      const t2 = Se(u, l2);
      if (t2) return p(Ue(t2, u, l2));
      e[u.name] = l2;
    }
  }
  for (const n2 of t.requiredFields ?? []) if (!g.has(n2.name)) return p(`missing required field "${n2.name}"`);
  return null;
}
function m(e, n2) {
  let r = n2;
  return ge(e) && "string" == typeof n2 ? r = parseFloat(n2) : Fe(e) && null != n2 && "string" != typeof n2 ? r = String(n2) : Ie(e) && "string" == typeof n2 && (r = n(n2)), ve(r);
}
var y;
function h(t, n2) {
  if (!t || !N(n2)) return t;
  if ("rings" in t || "paths" in t) {
    if (null == y) throw new TypeError("geometry engine not loaded");
    return y.simplify(n2, t);
  }
  return t;
}
async function I() {
  return null == y && (y = await import("./geometryEngineJSON-MSK3YET3.js")), y;
}
async function E(t, n2) {
  !N(t) || "esriGeometryPolygon" !== n2 && "esriGeometryPolyline" !== n2 || await I();
}
var S = { supportsAutoIntervalBin: true, supportsFixedIntervalBin: true, supportsFixedBoundariesBin: true, supportsDateBin: true, supportsStackBy: true, supportsSplitBy: true, supportsNormalization: true, supportedStatisticTypes: ["COUNT", "SUM", "AVG", "VAR", "STDDEV", "MIN", "MAX", "PERCENTILE_CONT", "PERCENTILE_DISC", "CentroidAggregate", "EnvelopeAggregate", "ConvexHullAggregate"], supportedNormalizationTypes: ["field", "log", "naturalLog", "percentOfTotal", "squareRoot"] };

export {
  p,
  f,
  d,
  h,
  E,
  S
};
//# sourceMappingURL=chunk-7U7T3Q43.js.map
