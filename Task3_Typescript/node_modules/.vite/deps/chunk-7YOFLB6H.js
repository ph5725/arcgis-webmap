import {
  n as n2,
  o as o2,
  r as r2,
  t as t2
} from "./chunk-SO2VFJCA.js";
import {
  C,
  I,
  J,
  L,
  M,
  O,
  S,
  T,
  V,
  g as g3,
  j,
  o,
  v as v2,
  w,
  y
} from "./chunk-6DBRCIDV.js";
import {
  v
} from "./chunk-FQ4JUVCN.js";
import {
  e as e2
} from "./chunk-3LL6ALVC.js";
import {
  e,
  t
} from "./chunk-NZPABYQQ.js";
import {
  L as L2,
  O as O2,
  P,
  R
} from "./chunk-BZYXFNL4.js";
import {
  r
} from "./chunk-KHRHKYU2.js";
import {
  b,
  c,
  f,
  g as g2,
  i as i2
} from "./chunk-DNZK6PPI.js";
import {
  _,
  nt,
  ot,
  tt
} from "./chunk-LQFTAGIV.js";
import {
  u
} from "./chunk-S7IJH524.js";
import {
  g
} from "./chunk-GZ2P4SCJ.js";
import {
  i2 as i,
  s
} from "./chunk-XWG6QGFK.js";
import {
  n
} from "./chunk-FXKORAMT.js";

// node_modules/@arcgis/core/views/3d/glTF/LoaderResult.js
function r3(e4 = {}) {
  return { color: [1, 1, 1], opacity: 1, alphaMode: "OPAQUE", alphaCutoff: 0.5, doubleSided: false, castShadows: true, receiveShadows: true, receiveAmbientOcclusion: true, colorTexture: null, normalTexture: null, occlusionTexture: null, emissiveTexture: null, metallicRoughnessTexture: null, colorTextureTransform: null, normalTextureTransform: null, occlusionTextureTransform: null, emissiveTextureTransform: null, metallicRoughnessTextureTransform: null, emissiveFactor: [0, 0, 0], metallicFactor: 1, roughnessFactor: 1, colorMixMode: "multiply", ...e4 };
}
function l(r5, l4 = {}) {
  return { data: r5, parameters: { wrap: { s: P.REPEAT, t: P.REPEAT, ...l4.wrap }, noUnpackFlip: true, mipmap: false, ...l4 } };
}

// node_modules/@arcgis/core/chunks/scalar.js
function e3(e4, t6) {
  const o3 = e4.count;
  t6 || (t6 = new e4.TypedArrayConstructor(o3));
  for (let r5 = 0; r5 < o3; r5++) t6[r5] = e4.get(r5);
  return t6;
}
var t3 = Object.freeze(Object.defineProperty({ __proto__: null, makeDense: e3 }, Symbol.toStringTag, { value: "Module" }));

// node_modules/@arcgis/core/views/3d/glTF/internal/BinaryStreamReader.js
var t4 = class {
  constructor(t6) {
    this._data = t6, this._offset4 = 0, this._dataUint32 = new Uint32Array(this._data, 0, Math.floor(this._data.byteLength / 4));
  }
  readUint32() {
    const t6 = this._offset4;
    return this._offset4 += 1, this._dataUint32[t6];
  }
  readUint8Array(t6) {
    const s3 = 4 * this._offset4;
    return this._offset4 += t6 / 4, new Uint8Array(this._data, s3, t6);
  }
  remainingBytes() {
    return this._data.byteLength - 4 * this._offset4;
  }
};

// node_modules/@arcgis/core/views/3d/glTF/internal/enums.js
var A;
var E;
!function(A2) {
  A2.SCALAR = "SCALAR", A2.VEC2 = "VEC2", A2.VEC3 = "VEC3", A2.VEC4 = "VEC4", A2.MAT2 = "MAT2", A2.MAT3 = "MAT3", A2.MAT4 = "MAT4";
}(A || (A = {})), function(A2) {
  A2[A2.ARRAY_BUFFER = 34962] = "ARRAY_BUFFER", A2[A2.ELEMENT_ARRAY_BUFFER = 34963] = "ELEMENT_ARRAY_BUFFER";
}(E || (E = {}));

// node_modules/@arcgis/core/views/3d/glTF/internal/fillDefaults.js
var t5 = { baseColorFactor: [1, 1, 1, 1], metallicFactor: 1, roughnessFactor: 1 };
var a = { pbrMetallicRoughness: t5, emissiveFactor: [0, 0, 0], alphaMode: "OPAQUE", alphaCutoff: 0.5, doubleSided: false };
var l2 = { ESRI_externalColorMixMode: "tint", ESRI_receiveShadows: true, ESRI_receiveAmbientOcclusion: true };
var i3 = (e4 = {}) => {
  const o3 = { ...t5, ...e4.pbrMetallicRoughness }, r5 = s2({ ...l2, ...e4.extras });
  return { ...a, ...e4, pbrMetallicRoughness: o3, extras: r5 };
};
function s2(o3) {
  switch (o3.ESRI_externalColorMixMode) {
    case "multiply":
    case "tint":
    case "ignore":
    case "replace":
      break;
    default:
      n(o3.ESRI_externalColorMixMode), o3.ESRI_externalColorMixMode = "tint";
  }
  return o3;
}
var c2 = { magFilter: L2.LINEAR, minFilter: L2.LINEAR_MIPMAP_LINEAR, wrapS: P.REPEAT, wrapT: P.REPEAT };
var n3 = (e4) => ({ ...c2, ...e4 });

// node_modules/@arcgis/core/views/3d/glTF/internal/pathUtils.js
function r4(r5) {
  let e4, t6;
  return r5.replace(/^(.*\/)?([^/]*)$/, (r6, a2, i5) => (e4 = a2 || "", t6 = i5 || "", "")), { dirPart: e4, filePart: t6 };
}

// node_modules/@arcgis/core/views/3d/glTF/internal/Resource.js
var k = { MAGIC: 1179937895, CHUNK_TYPE_JSON: 1313821514, CHUNK_TYPE_BIN: 5130562 };
var Y = class _Y {
  constructor(t6, r5, o3, n4) {
    if (this._context = t6, this.uri = r5, this.json = o3, this._glbBuffer = n4, this._bufferLoaders = /* @__PURE__ */ new Map(), this._textureLoaders = /* @__PURE__ */ new Map(), this._textureCache = /* @__PURE__ */ new Map(), this._materialCache = /* @__PURE__ */ new Map(), this._nodeParentMap = /* @__PURE__ */ new Map(), this._nodeTransformCache = /* @__PURE__ */ new Map(), this._supportedExtensions = ["KHR_texture_basisu", "KHR_texture_transform"], this._baseUri = r4(this.uri).dirPart, this._checkVersionSupported(), this._checkRequiredExtensionsSupported(), null == o3.scenes) throw new s("gltf-loader-unsupported-feature", "Scenes must be defined.");
    if (null == o3.meshes) throw new s("gltf-loader-unsupported-feature", "Meshes must be defined");
    if (null == o3.nodes) throw new s("gltf-loader-unsupported-feature", "Nodes must be defined.");
    this._computeNodeParents();
  }
  static async load(t6, r5, o3) {
    if (tt(r5)) {
      const e4 = ot(r5);
      if (e4 && "model/gltf-binary" !== e4.mediaType) try {
        const o5 = JSON.parse(e4.isBase64 ? atob(e4.data) : e4.data);
        return new _Y(t6, r5, o5);
      } catch {
      }
      const o4 = nt(r5);
      if (_Y._isGLBData(o4)) return this._fromGLBData(t6, r5, o4);
    }
    if (ee.test(r5) || "gltf" === o3?.expectedType) {
      const e4 = await t6.loadJSON(r5, o3);
      return new _Y(t6, r5, e4);
    }
    const i5 = await t6.loadBinary(r5, o3);
    if (_Y._isGLBData(i5)) return this._fromGLBData(t6, r5, i5);
    if (te.test(r5) || "glb" === o3?.expectedType) throw new s("gltf-loader-invalid-glb", "This is not a valid glb file.");
    const u3 = await t6.loadJSON(r5, o3);
    return new _Y(t6, r5, u3);
  }
  static _isGLBData(e4) {
    if (null == e4) return false;
    const t6 = new t4(e4);
    return t6.remainingBytes() >= 4 && t6.readUint32() === k.MAGIC;
  }
  static async _fromGLBData(e4, t6, r5) {
    const o3 = await _Y._parseGLBData(r5);
    return new _Y(e4, t6, o3.json, o3.binaryData);
  }
  static async _parseGLBData(r5) {
    const o3 = new t4(r5);
    if (o3.remainingBytes() < 12) throw new s("gltf-loader-error", "glb binary data is insufficiently large.");
    const n4 = o3.readUint32(), s3 = o3.readUint32(), a2 = o3.readUint32();
    if (n4 !== k.MAGIC) throw new s("gltf-loader-error", "Magic first 4 bytes do not fit to expected glb value.");
    if (r5.byteLength < a2) throw new s("gltf-loader-error", "glb binary data is smaller than header specifies.");
    if (2 !== s3) throw new s("gltf-loader-unsupported-feature", "An unsupported glb container version was detected. Only version 2 is supported.");
    let i5, u3, f2 = 0;
    for (; o3.remainingBytes() >= 8; ) {
      const r6 = o3.readUint32(), n5 = o3.readUint32();
      if (0 === f2) {
        if (n5 !== k.CHUNK_TYPE_JSON) throw new s("gltf-loader-error", "First glb chunk must be JSON.");
        if (r6 < 0) throw new s("gltf-loader-error", "No JSON data found.");
        i5 = await r2(o3.readUint8Array(r6));
      } else if (1 === f2) {
        if (n5 !== k.CHUNK_TYPE_BIN) throw new s("gltf-loader-unsupported-feature", "Second glb chunk expected to be BIN.");
        u3 = o3.readUint8Array(r6);
      } else i.getLogger("esri.views.3d.glTF").warn("[Unsupported Feature] More than 2 glb chunks detected. Skipping.");
      f2 += 1;
    }
    if (!i5) throw new s("gltf-loader-error", "No glb JSON chunk detected.");
    return { json: i5, binaryData: u3 };
  }
  async getBuffer(t6, r5) {
    const o3 = this.json.buffers[t6];
    if (null == o3.uri) {
      if (null == this._glbBuffer) throw new s("gltf-loader-error", "glb buffer not present");
      return this._glbBuffer;
    }
    const n4 = await this._getBufferLoader(t6, r5);
    if (n4.byteLength !== o3.byteLength) throw new s("gltf-loader-error", "Buffer byte lengths should match.");
    return n4;
  }
  async _getBufferLoader(e4, t6) {
    const r5 = this._bufferLoaders.get(e4);
    if (r5) return r5;
    const o3 = this.json.buffers[e4].uri, n4 = this._context.loadBinary(this._resolveUri(o3), t6).then((e5) => new Uint8Array(e5));
    return this._bufferLoaders.set(e4, n4), n4;
  }
  async getAccessor(t6, r5) {
    if (!this.json.accessors) throw new s("gltf-loader-unsupported-feature", "Accessors missing.");
    const o3 = this.json.accessors[t6];
    if (null == o3?.bufferView) throw new s("gltf-loader-unsupported-feature", "Some accessor does not specify a bufferView.");
    if (o3.type in [A.MAT2, A.MAT3, A.MAT4]) throw new s("gltf-loader-unsupported-feature", `AttributeType ${o3.type} is not supported`);
    const n4 = this.json.bufferViews[o3.bufferView], s3 = await this.getBuffer(n4.buffer, r5), a2 = X[o3.type], i5 = $[o3.componentType], u3 = a2 * i5, f2 = n4.byteStride || u3;
    return { raw: s3.buffer, byteStride: f2, byteOffset: s3.byteOffset + (n4.byteOffset || 0) + (o3.byteOffset || 0), entryCount: o3.count, isDenselyPacked: f2 === u3, componentCount: a2, componentByteSize: i5, componentType: o3.componentType, min: o3.min, max: o3.max, normalized: !!o3.normalized };
  }
  async getIndexData(e4, t6) {
    if (null == e4.indices) return;
    const r5 = await this.getAccessor(e4.indices, t6);
    if (r5.isDenselyPacked) switch (r5.componentType) {
      case O2.UNSIGNED_BYTE:
        return new Uint8Array(r5.raw, r5.byteOffset, r5.entryCount);
      case O2.UNSIGNED_SHORT:
        return new Uint16Array(r5.raw, r5.byteOffset, r5.entryCount);
      case O2.UNSIGNED_INT:
        return new Uint32Array(r5.raw, r5.byteOffset, r5.entryCount);
    }
    else switch (r5.componentType) {
      case O2.UNSIGNED_BYTE:
        return e3(Q(I, r5));
      case O2.UNSIGNED_SHORT:
        return e3(Q(w, r5));
      case O2.UNSIGNED_INT:
        return e3(Q(v2, r5));
    }
  }
  async getPositionData(t6, r5) {
    if (null == t6.attributes.POSITION) throw new s("gltf-loader-unsupported-feature", "No POSITION vertex data found.");
    const o3 = await this.getAccessor(t6.attributes.POSITION, r5);
    if (o3.componentType !== O2.FLOAT) throw new s("gltf-loader-unsupported-feature", "Expected type FLOAT for POSITION vertex attribute, but found " + O2[o3.componentType]);
    if (3 !== o3.componentCount) throw new s("gltf-loader-unsupported-feature", "POSITION vertex attribute must have 3 components, but found " + o3.componentCount.toFixed());
    return Q(o, o3);
  }
  async getNormalData(t6, r5) {
    if (null == t6.attributes.NORMAL) throw new s("gltf-loader-error", "No NORMAL vertex data found.");
    const o3 = await this.getAccessor(t6.attributes.NORMAL, r5);
    if (o3.componentType !== O2.FLOAT) throw new s("gltf-loader-unsupported-feature", "Expected type FLOAT for NORMAL vertex attribute, but found " + O2[o3.componentType]);
    if (3 !== o3.componentCount) throw new s("gltf-loader-unsupported-feature", "NORMAL vertex attribute must have 3 components, but found " + o3.componentCount.toFixed());
    return Q(o, o3);
  }
  async getTangentData(t6, r5) {
    if (null == t6.attributes.TANGENT) throw new s("gltf-loader-error", "No TANGENT vertex data found.");
    const o3 = await this.getAccessor(t6.attributes.TANGENT, r5);
    if (o3.componentType !== O2.FLOAT) throw new s("gltf-loader-unsupported-feature", "Expected type FLOAT for TANGENT vertex attribute, but found " + O2[o3.componentType]);
    if (4 !== o3.componentCount) throw new s("gltf-loader-unsupported-feature", "TANGENT vertex attribute must have 4 components, but found " + o3.componentCount.toFixed());
    return Q(T, o3);
  }
  async getTextureCoordinates(t6, r5) {
    if (null == t6.attributes.TEXCOORD_0) throw new s("gltf-loader-error", "No TEXCOORD_0 vertex data found.");
    const o3 = await this.getAccessor(t6.attributes.TEXCOORD_0, r5);
    if (2 !== o3.componentCount) throw new s("gltf-loader-unsupported-feature", "TEXCOORD_0 vertex attribute must have 2 components, but found " + o3.componentCount.toFixed());
    if (o3.componentType === O2.FLOAT) return Q(y, o3);
    if (!o3.normalized) throw new s("gltf-loader-unsupported-feature", "Integer component types are only supported for a normalized accessor for TEXCOORD_0.");
    return W(o3);
  }
  async getVertexColors(t6, r5) {
    if (null == t6.attributes.COLOR_0) throw new s("gltf-loader-error", "No COLOR_0 vertex data found.");
    const o3 = await this.getAccessor(t6.attributes.COLOR_0, r5);
    if (4 !== o3.componentCount && 3 !== o3.componentCount) throw new s("gltf-loader-unsupported-feature", "COLOR_0 attribute must have 3 or 4 components, but found " + o3.componentCount.toFixed());
    if (4 === o3.componentCount) {
      if (o3.componentType === O2.FLOAT) return Q(T, o3);
      if (o3.componentType === O2.UNSIGNED_BYTE) return Q(g3, o3);
      if (o3.componentType === O2.UNSIGNED_SHORT) return Q(M, o3);
    } else if (3 === o3.componentCount) {
      if (o3.componentType === O2.FLOAT) return Q(o, o3);
      if (o3.componentType === O2.UNSIGNED_BYTE) return Q(O, o3);
      if (o3.componentType === O2.UNSIGNED_SHORT) return Q(V, o3);
    }
    throw new s("gltf-loader-unsupported-feature", "Unsupported component type for COLOR_0 attribute: " + O2[o3.componentType]);
  }
  hasPositions(e4) {
    return void 0 !== e4.attributes.POSITION;
  }
  hasNormals(e4) {
    return void 0 !== e4.attributes.NORMAL;
  }
  hasVertexColors(e4) {
    return void 0 !== e4.attributes.COLOR_0;
  }
  hasTextureCoordinates(e4) {
    return void 0 !== e4.attributes.TEXCOORD_0;
  }
  hasTangents(e4) {
    return void 0 !== e4.attributes.TANGENT;
  }
  async getMaterial(e4, t6, r5) {
    let o3 = e4.material ? this._materialCache.get(e4.material) : void 0;
    if (!o3) {
      const n4 = null != e4.material ? i3(this.json.materials[e4.material]) : i3(), s3 = n4.pbrMetallicRoughness, a2 = this.hasVertexColors(e4), i5 = this.getTexture(s3.baseColorTexture, t6), u3 = this.getTexture(n4.normalTexture, t6), f2 = r5 ? this.getTexture(n4.occlusionTexture, t6) : void 0, l4 = r5 ? this.getTexture(n4.emissiveTexture, t6) : void 0, d2 = r5 ? this.getTexture(s3.metallicRoughnessTexture, t6) : void 0, c4 = null != e4.material ? e4.material : -1;
      o3 = { alphaMode: n4.alphaMode, alphaCutoff: n4.alphaCutoff, color: s3.baseColorFactor, doubleSided: !!n4.doubleSided, colorTexture: await i5, normalTexture: await u3, name: n4.name, id: c4, occlusionTexture: await f2, emissiveTexture: await l4, emissiveFactor: n4.emissiveFactor, metallicFactor: s3.metallicFactor, roughnessFactor: s3.roughnessFactor, metallicRoughnessTexture: await d2, hasVertexColors: a2, ESRI_externalColorMixMode: n4.extras.ESRI_externalColorMixMode, colorTextureTransform: s3?.baseColorTexture?.extensions?.KHR_texture_transform, normalTextureTransform: n4.normalTexture?.extensions?.KHR_texture_transform, occlusionTextureTransform: n4.occlusionTexture?.extensions?.KHR_texture_transform, emissiveTextureTransform: n4.emissiveTexture?.extensions?.KHR_texture_transform, metallicRoughnessTextureTransform: s3?.metallicRoughnessTexture?.extensions?.KHR_texture_transform, receiveAmbientOcclusion: n4.extras.ESRI_receiveAmbientOcclusion, receiveShadows: n4.extras.ESRI_receiveShadows };
    }
    return o3;
  }
  async getTexture(t6, o3) {
    if (!t6) return;
    if (0 !== (t6.texCoord || 0)) throw new s("gltf-loader-unsupported-feature", "Only TEXCOORD with index 0 is supported.");
    const n4 = t6.index, s3 = this.json.textures[n4], a2 = n3(null != s3.sampler ? this.json.samplers[s3.sampler] : {}), i5 = Z(s3), u3 = this.json.images[i5], f2 = await this._loadTextureImageData(n4, s3, o3);
    return u(this._textureCache, n4, () => {
      const t7 = (e4) => 33071 === e4 || 33648 === e4 || 10497 === e4, r5 = (t8) => {
        throw new s("gltf-loader-error", `Unexpected TextureSampler WrapMode: ${t8}`);
      };
      return { data: f2, wrapS: t7(a2.wrapS) ? a2.wrapS : r5(a2.wrapS), wrapT: t7(a2.wrapT) ? a2.wrapT : r5(a2.wrapT), minFilter: a2.minFilter, name: u3.name, id: n4 };
    });
  }
  getNodeTransform(e4) {
    if (void 0 === e4) return q;
    let t6 = this._nodeTransformCache.get(e4);
    if (!t6) {
      const r5 = this.getNodeTransform(this._getNodeParent(e4)), o3 = this.json.nodes[e4];
      o3.matrix ? t6 = c(e(), r5, o3.matrix) : o3.translation || o3.rotation || o3.scale ? (t6 = t(r5), o3.translation && i2(t6, t6, o3.translation), o3.rotation && (z[3] = v(z, o3.rotation), b(t6, t6, z[3], z)), o3.scale && f(t6, t6, o3.scale)) : t6 = t(r5), this._nodeTransformCache.set(e4, t6);
    }
    return t6;
  }
  _resolveUri(e4) {
    return _(e4, this._baseUri);
  }
  _getNodeParent(e4) {
    return this._nodeParentMap.get(e4);
  }
  _checkVersionSupported() {
    const e4 = r.parse(this.json.asset.version, "glTF");
    J2.validate(e4);
  }
  _checkRequiredExtensionsSupported() {
    const t6 = this.json;
    if (t6.extensionsRequired) {
      if (!t6.extensionsRequired.every((e4) => this._supportedExtensions.includes(e4))) throw new s("gltf-loader-unsupported-feature", "gltf loader was not able to load unsupported feature. Required extensions: " + t6.extensionsRequired.join(", "));
    }
  }
  _computeNodeParents() {
    this.json.nodes.forEach((e4, t6) => {
      e4.children && e4.children.forEach((e5) => {
        this._nodeParentMap.set(e5, t6);
      });
    });
  }
  async _loadTextureImageData(e4, t6, r5) {
    const o3 = this._textureLoaders.get(e4);
    if (o3) return o3;
    const n4 = this._createTextureLoader(t6, r5);
    return this._textureLoaders.set(e4, n4), n4;
  }
  async _createTextureLoader(t6, r5) {
    const o3 = Z(t6), n4 = this.json.images[o3];
    if (n4.uri) {
      if (n4.uri.endsWith(".ktx2")) {
        const e4 = await this._context.loadBinary(this._resolveUri(n4.uri), r5);
        return new t2(new Uint8Array(e4));
      }
      return this._context.loadImage(this._resolveUri(n4.uri), r5);
    }
    if (null == n4.bufferView) throw new s("gltf-loader-unsupported-feature", "Image bufferView must be defined.");
    if (null == n4.mimeType) throw new s("gltf-loader-unsupported-feature", "Image mimeType must be defined.");
    const s3 = this.json.bufferViews[n4.bufferView], a2 = await this.getBuffer(s3.buffer, r5);
    if (null != s3.byteStride) throw new s("gltf-loader-unsupported-feature", "byteStride not supported for image buffer");
    const i5 = a2.byteOffset + (s3.byteOffset || 0);
    return o2(new Uint8Array(a2.buffer, i5, s3.byteLength), n4.mimeType);
  }
  async getLoadedBuffersSize() {
    if (this._glbBuffer) return this._glbBuffer.byteLength;
    const e4 = await g(Array.from(this._bufferLoaders.values())), t6 = await g(Array.from(this._textureLoaders.values()));
    return e4.reduce((e5, t7) => e5 + (t7?.byteLength ?? 0), 0) + t6.reduce((e5, t7) => e5 + (t7 ? n2(t7) ? t7.data.byteLength : t7.width * t7.height * 4 : 0), 0);
  }
};
var q = g2(e(), Math.PI / 2);
var J2 = new r(2, 0, "glTF");
var z = e2();
var X = { SCALAR: 1, VEC2: 2, VEC3: 3, VEC4: 4, MAT2: 4, MAT3: 9, MAT4: 16 };
var $ = { [O2.BYTE]: 1, [O2.UNSIGNED_BYTE]: 1, [O2.SHORT]: 2, [O2.UNSIGNED_SHORT]: 2, [O2.HALF_FLOAT]: 2, [O2.FLOAT]: 4, [O2.INT]: 4, [O2.UNSIGNED_INT]: 4 };
function W(e4) {
  switch (e4.componentType) {
    case O2.BYTE:
      return new C(e4.raw, e4.byteOffset, e4.byteStride, e4.byteOffset + e4.byteStride * e4.entryCount);
    case O2.UNSIGNED_BYTE:
      return new j(e4.raw, e4.byteOffset, e4.byteStride, e4.byteOffset + e4.byteStride * e4.entryCount);
    case O2.SHORT:
      return new J(e4.raw, e4.byteOffset, e4.byteStride, e4.byteOffset + e4.byteStride * e4.entryCount);
    case O2.UNSIGNED_SHORT:
      return new L(e4.raw, e4.byteOffset, e4.byteStride, e4.byteOffset + e4.byteStride * e4.entryCount);
    case O2.UNSIGNED_INT:
      return new S(e4.raw, e4.byteOffset, e4.byteStride, e4.byteOffset + e4.byteStride * e4.entryCount);
    case O2.FLOAT:
      return new y(e4.raw, e4.byteOffset, e4.byteStride, e4.byteOffset + e4.byteStride * e4.entryCount);
  }
}
function Q(e4, t6) {
  return new e4(t6.raw, t6.byteOffset, t6.byteStride, t6.byteOffset + t6.byteStride * (t6.entryCount - 1) + t6.componentByteSize * t6.componentCount);
}
function Z(t6) {
  if (null != t6.extensions?.KHR_texture_basisu) return t6.extensions.KHR_texture_basisu.source;
  if (null !== t6.source) return t6.source;
  throw new s("gltf-loader-unsupported-feature", "Source is expected to be defined for a texture. It can also be omitted in favour of an KHR_texture_basisu extension tag.");
}
var ee = /\.gltf$/i;
var te = /\.glb$/i;

// node_modules/@arcgis/core/views/3d/glTF/loader.js
var i4 = 0;
async function l3(t6, r5, n4 = {}, l4 = true) {
  const m2 = await Y.load(t6, r5, n4), T3 = "gltf_" + i4++, p = { lods: [], materials: /* @__PURE__ */ new Map(), textures: /* @__PURE__ */ new Map(), meta: u2(m2) }, f2 = !(!m2.json.asset.extras || "symbolResource" !== m2.json.asset.extras.ESRI_type), x = m2.json.asset.extras?.ESRI_webstyleSymbol?.webstyle, g4 = /* @__PURE__ */ new Map();
  await c3(m2, async (t7, r6, s3, i5) => {
    const u3 = g4.get(s3) ?? 0;
    g4.set(s3, u3 + 1);
    const c4 = void 0 !== t7.mode ? t7.mode : R.TRIANGLES, f3 = c4 === R.TRIANGLES || c4 === R.TRIANGLE_STRIP || c4 === R.TRIANGLE_FAN ? c4 : null;
    if (null == f3) return void i.getLogger("esri.views.3d.glTF").warn("[Unsupported Feature] Unsupported primitive mode (" + R[c4] + "). Skipping primitive.");
    if (!m2.hasPositions(t7)) return void i.getLogger("esri.views.3d.glTF").warn("Skipping primitive without POSITION vertex attribute.");
    const x2 = m2.getPositionData(t7, n4), h2 = m2.getMaterial(t7, n4, l4), w2 = m2.hasNormals(t7) ? m2.getNormalData(t7, n4) : null, v3 = m2.hasTangents(t7) ? m2.getTangentData(t7, n4) : null, S2 = m2.hasTextureCoordinates(t7) ? m2.getTextureCoordinates(t7, n4) : null, R2 = m2.hasVertexColors(t7) ? m2.getVertexColors(t7, n4) : null, _2 = m2.getIndexData(t7, n4), E2 = { name: i5, transform: t(r6), attributes: { position: await x2, normal: w2 ? await w2 : null, texCoord0: S2 ? await S2 : null, color: R2 ? await R2 : null, tangent: v3 ? await v3 : null }, indices: await _2, primitiveType: f3, material: d(p, await h2, T3) };
    let I2 = null;
    null != p.meta?.ESRI_lod && "screenSpaceRadius" === p.meta.ESRI_lod.metric && (I2 = p.meta.ESRI_lod.thresholds[s3]), p.lods[s3] = p.lods[s3] || { parts: [], name: i5, lodThreshold: I2 }, p.lods[s3].parts[u3] = E2;
  });
  for (const e4 of p.lods) e4.parts = e4.parts.filter((e5) => !!e5);
  const h = await m2.getLoadedBuffersSize();
  return { model: p, meta: { isEsriSymbolResource: f2, uri: m2.uri, ESRI_webstyle: x }, customMeta: {}, cachedMemory: h };
}
function u2(e4) {
  const o3 = e4.json;
  let t6 = null;
  return o3.nodes.forEach((e5) => {
    const o4 = e5.extras;
    null != o4 && (o4.ESRI_proxyEllipsoid || o4.ESRI_lod) && (t6 = o4);
  }), t6;
}
async function c3(o3, t6) {
  const r5 = o3.json, s3 = r5.scenes[r5.scene || 0].nodes, a2 = s3.length > 1, n4 = [];
  for (const e4 of s3) {
    const o4 = r5.nodes[e4];
    if (n4.push(i5(e4, 0)), m(o4) && !a2) {
      o4.extensions.MSFT_lod.ids.forEach((e5, o5) => i5(e5, o5 + 1));
    }
  }
  async function i5(s4, a3) {
    const l4 = r5.nodes[s4], u3 = o3.getNodeTransform(s4);
    if (null != l4.weights && i.getLogger("esri.views.3d.glTF").warn("[Unsupported Feature] Morph targets are not supported."), null != l4.mesh) {
      const e4 = r5.meshes[l4.mesh];
      for (const o4 of e4.primitives) n4.push(t6(o4, u3, a3, e4.name));
    }
    for (const e4 of l4.children || []) n4.push(i5(e4, a3));
  }
  await Promise.all(n4);
}
function m(e4) {
  return e4.extensions?.MSFT_lod && Array.isArray(e4.extensions.MSFT_lod.ids);
}
function d(e4, o3, s3) {
  const a2 = (o4) => {
    const t6 = `${s3}_tex_${o4 && o4.id}${o4?.name ? "_" + o4.name : ""}`;
    if (o4 && !e4.textures.has(t6)) {
      const s4 = l(o4.data, { wrap: { s: o4.wrapS, t: o4.wrapT }, mipmap: T2.has(o4.minFilter), noUnpackFlip: true });
      e4.textures.set(t6, s4);
    }
    return t6;
  }, n4 = `${s3}_mat_${o3.id}_${o3.name}`;
  if (!e4.materials.has(n4)) {
    const r5 = r3({ color: [o3.color[0], o3.color[1], o3.color[2]], opacity: o3.color[3], alphaMode: o3.alphaMode, alphaCutoff: o3.alphaCutoff, doubleSided: o3.doubleSided, colorMixMode: o3.ESRI_externalColorMixMode, colorTexture: o3.colorTexture ? a2(o3.colorTexture) : void 0, normalTexture: o3.normalTexture ? a2(o3.normalTexture) : void 0, occlusionTexture: o3.occlusionTexture ? a2(o3.occlusionTexture) : void 0, emissiveTexture: o3.emissiveTexture ? a2(o3.emissiveTexture) : void 0, metallicRoughnessTexture: o3.metallicRoughnessTexture ? a2(o3.metallicRoughnessTexture) : void 0, emissiveFactor: [o3.emissiveFactor[0], o3.emissiveFactor[1], o3.emissiveFactor[2]], colorTextureTransform: o3.colorTextureTransform, normalTextureTransform: o3.normalTextureTransform, occlusionTextureTransform: o3.occlusionTextureTransform, emissiveTextureTransform: o3.emissiveTextureTransform, metallicRoughnessTextureTransform: o3.metallicRoughnessTextureTransform, metallicFactor: o3.metallicFactor, roughnessFactor: o3.roughnessFactor, receiveShadows: o3.receiveShadows, receiveAmbientOcclusion: o3.receiveAmbientOcclusion });
    e4.materials.set(n4, r5);
  }
  return n4;
}
var T2 = /* @__PURE__ */ new Set([L2.LINEAR_MIPMAP_LINEAR, L2.LINEAR_MIPMAP_NEAREST]);

export {
  l3 as l
};
//# sourceMappingURL=chunk-7YOFLB6H.js.map
