import {
  s as s2
} from "./chunk-OC2XWDW2.js";
import {
  a as a6,
  c,
  e as e2
} from "./chunk-C3JHRSMA.js";
import {
  j
} from "./chunk-M2UZRY7C.js";
import {
  m as m4
} from "./chunk-HUVZEBBO.js";
import {
  $
} from "./chunk-VLPG2W66.js";
import {
  a as a4,
  a2 as a5,
  f,
  g,
  n as n2,
  u as u3,
  v as v2
} from "./chunk-GH7GZNY6.js";
import {
  u as u4
} from "./chunk-7DFHXN7Z.js";
import {
  _
} from "./chunk-I6IIPG56.js";
import {
  J
} from "./chunk-DJJNSAUR.js";
import {
  e
} from "./chunk-RWRC6JKB.js";
import {
  n
} from "./chunk-LYSDGL5S.js";
import {
  m as m3,
  u as u2
} from "./chunk-HNQNVI5C.js";
import {
  m as m2
} from "./chunk-G34OBNLT.js";
import {
  l as l2
} from "./chunk-KE3WBZYL.js";
import {
  r as r3
} from "./chunk-EOMIFMDH.js";
import {
  E,
  x as x2
} from "./chunk-VCRP2PLV.js";
import {
  o
} from "./chunk-MUKDJQWB.js";
import {
  v
} from "./chunk-N3A2BVTW.js";
import {
  a as a3
} from "./chunk-TVM3SZJR.js";
import {
  r as r2
} from "./chunk-YFPGM5UE.js";
import {
  s
} from "./chunk-KTUX3OKX.js";
import {
  l
} from "./chunk-E3KEUGUG.js";
import {
  m
} from "./chunk-N3XLUQJI.js";
import {
  a2
} from "./chunk-JUAD7TJ6.js";
import {
  u,
  x
} from "./chunk-VHLUKPRH.js";
import {
  r
} from "./chunk-5TPMG26T.js";
import {
  H
} from "./chunk-ZWFY3WY5.js";
import {
  i2 as i
} from "./chunk-XWG6QGFK.js";
import {
  a
} from "./chunk-GWNLQRNM.js";
import {
  L
} from "./chunk-FXKORAMT.js";

// node_modules/@arcgis/core/renderers/support/DictionaryControlString.js
var t = class _t {
  static parse(e4, r5, n4) {
    const l3 = [], o2 = [], u8 = e4.split(";");
    for (let t2 = 0; t2 < u8.length; t2++) {
      const e5 = u8[t2];
      if (e5) {
        if (e5.includes("po:")) {
          const t3 = e5.slice(3).split("|");
          if (3 === t3.length) {
            const [e6, r6, i6] = t3, n5 = s3(e6, r6, i6);
            n5 && o2.push(n5);
          }
        } else if (e5.includes("|")) {
          for (const t3 of e5.split("|")) if (r5.has(t3)) {
            l3.push(t3);
            break;
          }
        } else if (r5.has(e5)) l3.push(e5);
        else if (0 === t2) {
          l3.length = 0, l3.push(i2(n4));
          break;
        }
      }
    }
    return new _t(l3, o2);
  }
  constructor(e4, t2) {
    this.partNames = e4, this.overrides = t2;
  }
};
function r4(t2, r5) {
  if ("DashTemplate" === t2) return r5.split(" ").map((e4) => Number(e4));
  if ("Color" === t2) {
    const t3 = new l2(r5).toRgba();
    return [t3[0], t3[1], t3[2], 255 * t3[3]];
  }
  return Number(r5);
}
function s3(e4, t2, s4) {
  return { primitiveName: e4, propertyName: t2, value: r4(t2, s4), defaultValue: null };
}
function i2(e4) {
  switch (e4) {
    case "esriGeometryPolyline":
      return "Invalid_L";
    case "esriGeometryPolygon":
      return "Invalid_A";
    default:
      return "Invalid_P";
  }
}

// node_modules/@arcgis/core/renderers/support/DictionaryLoader.js
var m5 = { type: "CIMSimpleLineCallout", lineSymbol: { type: "CIMLineSymbol", symbolLayers: [{ type: "CIMSolidStroke", width: 0.5, color: [0, 0, 0, 255] }] } };
var c2 = class {
  constructor(t2, e4, o2, s4) {
    this.url = t2, this.fieldMap = o2, this.dictionaryInfo = s4, this._symbolPartCache = new e(100);
    const a7 = async () => s2.from(await s4, e4, o2);
    this._evaluator = a7();
  }
  async getSymbolAsync(t2, e4, r5 = true) {
    const i6 = await this._evaluator, l3 = e4?.fields ?? _(t2.attributes), n4 = i6.createDictionaryFieldsIndex(l3), m8 = i6.evaluate(t2, e4?.scale ?? 0, n4, e4?.spatialReference);
    if (null == m8) return null;
    const c6 = v(t2.geometry), y3 = t.parse(m8, i6.itemNames, c6), f4 = "esriGeometryPoint" === c6 && !t2.geometry?.hasZ;
    return await this._cimPartsToCIMSymbol(t2, y3.partNames, y3.overrides, f4, e4, r5, n4);
  }
  async getSymbolForControlString(t2, e4, r5) {
    const o2 = await this._evaluator, i6 = t.parse(t2, o2.itemNames, e4), a7 = "esriGeometryPoint" === e4 && !r5, n4 = y(await Promise.all(i6.partNames.map((t3) => this._getSymbolPart(t3))), i6.overrides, a7);
    return new n({ data: n4 });
  }
  async _cimPartsToCIMSymbol(t2, r5, o2, s4, i6, a7, m8) {
    const c6 = r5.map((t3) => this._getSymbolPart(t3, i6));
    let f4 = await Promise.all(c6);
    if (a7 && this.fieldMap && f4.length > 0) {
      const { OverrideHelper: r6 } = await import("./OverrideHelper-GP3G2IUV.js");
      f4 = a(f4);
      for (const e4 of f4) r6.applyDictionaryTextOverrides(e4, t2, this.fieldMap, m8, J(e4));
    }
    const p4 = y(f4, o2, s4);
    return new n({ data: p4 });
  }
  async _fetchSymbolPart(e4, r5) {
    const o2 = await this.dictionaryInfo, s4 = (this.url + "/" + o2.cimRefTemplateUrl).replaceAll(/\{itemName\}/gi, e4), { data: i6 } = await H(s4, { responseType: "json", query: { f: "json" }, ...r5 });
    return i6;
  }
  async _getSymbolPart(t2, e4) {
    let r5 = this._symbolPartCache.get(t2);
    return r5 || (r5 = this._fetchSymbolPart(t2, e4), this._symbolPartCache.put(t2, r5)), r5;
  }
};
function y(t2, e4, r5) {
  if (!t2 || 0 === t2.length) return null;
  const o2 = { ...t2[0] };
  if (t2.length > 1) {
    o2.effects = null, o2.symbolLayers = [];
    for (const e5 of t2) {
      const t3 = e5;
      if (null != t3.effects) for (const e6 of t3.symbolLayers) null == e6.effects ? e6.effects = t3.effects : e6.effects.unshift(...t3.effects);
      o2.symbolLayers.unshift(...t3.symbolLayers);
    }
  }
  return r5 && (o2.callout = m5), { type: "CIMSymbolReference", symbol: o2, primitiveOverrides: e4 };
}

// node_modules/@arcgis/core/renderers/DictionaryRenderer.js
var p;
var u5 = p = class extends v2(a4) {
  constructor(r5) {
    super(r5), this.config = null, this.fieldMap = null, this.scaleExpression = null, this.scaleExpressionTitle = null, this.url = null, this.type = "dictionary";
  }
  get _loader() {
    const r5 = this.getDictionaryInfo();
    return new c2(this.url, this.config, this.fieldMap ?? {}, r5);
  }
  writeData(r5, e4) {
    r5 && (e4.scalingExpressionInfo = { expression: r5, returnType: "number" });
  }
  writeVisualVariables(r5, e4, s4, t2) {
    t2?.origin || super.writeVisualVariables(r5, e4, s4, t2);
  }
  clone() {
    return new p({ config: a(this.config), scaleExpression: this.scaleExpression, scaleExpressionTitle: this.scaleExpressionTitle, fieldMap: a(this.fieldMap), url: a(this.url), visualVariables: a(this.visualVariables) });
  }
  async getSymbolAsync(r5, e4, s4 = true) {
    return this._loader.getSymbolAsync(r5, e4, s4);
  }
  async getSymbolForControlString(r5, e4, s4) {
    return this._loader.getSymbolForControlString(r5, e4, s4);
  }
  getDictionaryInfo() {
    return this._dictionaryInfoPromise || (this._dictionaryInfoPromise = this._fetchDictionaryInfo()), this._dictionaryInfoPromise;
  }
  async collectRequiredFields(r5, e4) {
    await this.collectVVRequiredFields(r5, e4), this.scaleExpression && await E(r5, e4, this.scaleExpression);
    for (const s4 in this.fieldMap) {
      const t2 = this.fieldMap[s4];
      e4.has(t2) && r5.add(t2);
    }
  }
  get arcadeRequired() {
    return true;
  }
  getSymbol() {
    return null;
  }
  get symbols() {
    return [];
  }
  getAttributeHash() {
    return this.visualVariables?.reduce((r5, e4) => r5 + e4.getAttributeHash(), "") ?? "";
  }
  getMeshHash() {
    return `${this.url}-${JSON.stringify(this.fieldMap)}`;
  }
  async _fetchDictionaryInfo() {
    const { data: r5 } = await H(this.url + "/resources/styles/dictionary-info.json", { responseType: "json", query: { f: "json" } });
    return r5;
  }
};
r([m({ type: c2 })], u5.prototype, "_loader", null), r([m({ type: Object, json: { read: { source: "configuration" }, write: { target: "configuration" } } })], u5.prototype, "config", void 0), r([m({ type: Object, json: { write: true } })], u5.prototype, "fieldMap", void 0), r([m({ type: String, json: { read: { source: "scalingExpressionInfo.expression" }, write: true } })], u5.prototype, "scaleExpression", void 0), r([r2("scaleExpression")], u5.prototype, "writeData", null), r([m({ type: String, json: { read: { source: "scalingExpressionInfo.title" }, write: { target: "scalingExpressionInfo.title", overridePolicy(r5) {
  return { enabled: !!r5 && !!this.scaleExpression };
} } } })], u5.prototype, "scaleExpressionTitle", void 0), r([m({ type: String, json: { write: true } })], u5.prototype, "url", void 0), r([r2("visualVariables")], u5.prototype, "writeVisualVariables", null), u5 = p = r([a2("esri.renderers.DictionaryRenderer")], u5);

// node_modules/@arcgis/core/renderers/support/AttributeColorInfo.js
var n3;
var u6 = n3 = class extends l {
  constructor(e4) {
    super(e4), this.color = null, this.field = null, this.label = null, this.valueExpression = null, this.valueExpressionTitle = null;
  }
  castField(e4) {
    return null == e4 ? e4 : "function" == typeof e4 ? (i.getLogger(this).error(".field: field must be a string value"), null) : u(e4);
  }
  getAttributeHash() {
    return `${this.field}-${this.valueExpression}`;
  }
  clone() {
    return new n3({ color: this.color?.clone(), field: this.field, label: this.label, valueExpression: this.valueExpression, valueExpressionTitle: this.valueExpressionTitle });
  }
};
r([m({ type: l2, json: { type: [Number], write: true } })], u6.prototype, "color", void 0), r([m({ type: String, json: { write: true } })], u6.prototype, "field", void 0), r([s("field")], u6.prototype, "castField", null), r([m({ type: String, json: { write: true } })], u6.prototype, "label", void 0), r([m({ type: String, json: { write: true } })], u6.prototype, "valueExpression", void 0), r([m({ type: String, json: { write: true } })], u6.prototype, "valueExpressionTitle", void 0), u6 = n3 = r([a2("esri.renderers.support.AttributeColorInfo")], u6);
var c3 = u6;

// node_modules/@arcgis/core/renderers/support/DotDensityLegendOptions.js
var e3;
var p2 = e3 = class extends l {
  constructor() {
    super(...arguments), this.unit = null;
  }
  clone() {
    return new e3({ unit: this.unit });
  }
};
r([m({ type: String, json: { write: true } })], p2.prototype, "unit", void 0), p2 = e3 = r([a2("esri.renderers.support.DotDensityLegendOptions")], p2);
var i3 = p2;

// node_modules/@arcgis/core/renderers/DotDensityRenderer.js
var h;
var m6 = h = class extends v2(a4) {
  constructor(t2) {
    super(t2), this.attributes = null, this.backgroundColor = new l2([0, 0, 0, 0]), this.dotBlendingEnabled = true, this.dotShape = "square", this.dotSize = 1, this.legendOptions = null, this.outline = new m2(), this.dotValue = null, this.referenceScale = null, this.seed = 1, this.type = "dot-density";
  }
  calculateDotValue(t2) {
    if (null == this.referenceScale) return this.dotValue;
    const e4 = t2 / this.referenceScale * this.dotValue;
    return e4 < 1 ? 1 : e4;
  }
  getSymbol() {
    return new m3({ outline: this.outline });
  }
  async getSymbolAsync() {
    return this.getSymbol();
  }
  get symbols() {
    return [this.getSymbol()];
  }
  getAttributeHash() {
    return this.attributes?.reduce((t2, e4) => t2 + e4.getAttributeHash(), "") ?? "";
  }
  getMeshHash() {
    return JSON.stringify(this.outline);
  }
  clone() {
    return new h({ attributes: a(this.attributes), backgroundColor: a(this.backgroundColor), dotBlendingEnabled: a(this.dotBlendingEnabled), dotShape: a(this.dotShape), dotSize: a(this.dotSize), dotValue: a(this.dotValue), legendOptions: a(this.legendOptions), outline: a(this.outline), referenceScale: a(this.referenceScale), seed: a(this.seed), visualVariables: a(this.visualVariables), authoringInfo: a(this.authoringInfo) });
  }
  getControllerHash() {
    const t2 = this.attributes?.map((t3) => t3.field || t3.valueExpression || "");
    return `${t2}-${this.outline && JSON.stringify(this.outline.toJSON()) || ""}`;
  }
  async collectRequiredFields(t2, e4) {
    await this.collectVVRequiredFields(t2, e4);
    for (const o2 of this.attributes ?? []) o2.valueExpression && await E(t2, e4, o2.valueExpression), o2.field && t2.add(o2.field);
  }
};
r([m({ type: [c3], json: { write: true } })], m6.prototype, "attributes", void 0), r([m({ type: l2, json: { write: true } })], m6.prototype, "backgroundColor", void 0), r([m({ type: Boolean, json: { write: true } })], m6.prototype, "dotBlendingEnabled", void 0), r([m({ type: String, json: { write: false } })], m6.prototype, "dotShape", void 0), r([m({ type: Number, json: { write: true } })], m6.prototype, "dotSize", void 0), r([m({ type: i3, json: { write: true } })], m6.prototype, "legendOptions", void 0), r([m({ type: m2, json: { default: null, write: true } })], m6.prototype, "outline", void 0), r([m({ type: Number, json: { write: true } })], m6.prototype, "dotValue", void 0), r([m({ type: Number, json: { write: true } })], m6.prototype, "referenceScale", void 0), r([m({ type: Number, json: { write: true } })], m6.prototype, "seed", void 0), r([r3({ dotDensity: "dot-density" })], m6.prototype, "type", void 0), m6 = h = r([a2("esri.renderers.DotDensityRenderer")], m6);

// node_modules/@arcgis/core/renderers/support/HeatmapColorStop.js
var i4;
var c4 = i4 = class extends l {
  constructor(o2) {
    super(o2), this.color = null, this.ratio = null;
  }
  clone() {
    return new i4({ color: this.color && this.color.clone(), ratio: this.ratio });
  }
};
r([m({ type: l2, json: { type: [x], default: null, write: { isRequired: true } } })], c4.prototype, "color", void 0), r([m({ type: Number, json: { write: { isRequired: true } } })], c4.prototype, "ratio", void 0), c4 = i4 = r([a2("esri.renderers.support.HeatmapColorStop")], c4);

// node_modules/@arcgis/core/renderers/support/HeatmapLegendOptions.js
var p3 = class extends a3.ClonableMixin(l) {
  constructor() {
    super(...arguments), this.minLabel = null, this.maxLabel = null, this.title = null;
  }
};
r([m({ type: String, json: { write: true } })], p3.prototype, "minLabel", void 0), r([m({ type: String, json: { write: true } })], p3.prototype, "maxLabel", void 0), r([m({ type: String, json: { write: true } })], p3.prototype, "title", void 0), p3 = r([a2("esri.renderers.support.HeatmapLegendOptions")], p3);

// node_modules/@arcgis/core/renderers/HeatmapRenderer.js
var g2;
function f2(t2) {
  if (null != t2) {
    const { maxDensity: e4, minDensity: i6, radius: s4 } = t2;
    if (null != e4 || null != i6 || null != s4) {
      const { blurRadius: e5, maxPixelIntensity: i7, minPixelIntensity: s5, ...r5 } = t2;
      return r5;
    }
  }
  return t2;
}
var w = g2 = class extends a4 {
  constructor(t2) {
    super(t2), this.authoringInfo = null, this.colorStops = [new c4({ ratio: 0, color: new l2("rgba(255, 140, 0, 0)") }), new c4({ ratio: 0.75, color: new l2("rgba(255, 140, 0, 1)") }), new c4({ ratio: 0.9, color: new l2("rgba(255, 0,   0, 1)") })], this.field = null, this.legendOptions = null, this.maxDensity = 0.04, this.minDensity = 0, this.radius = 18, this.referenceScale = 0, this.type = "heatmap", this.valueExpression = null, this.valueExpressionTitle = null;
  }
  normalizeCtorArgs(t2) {
    return f2(t2);
  }
  get blurRadius() {
    return a6(this.radius);
  }
  set blurRadius(t2) {
    const e4 = this.maxPixelIntensity, i6 = this.minPixelIntensity;
    this._set("radius", e2(t2)), this._set("maxDensity", e4 * this._pixelIntensityToDensity), this._set("minDensity", i6 * this._pixelIntensityToDensity);
  }
  get maxPixelIntensity() {
    return this.maxDensity / this._pixelIntensityToDensity;
  }
  set maxPixelIntensity(t2) {
    this._set("maxDensity", t2 * this._pixelIntensityToDensity);
  }
  get minPixelIntensity() {
    return this.minDensity / this._pixelIntensityToDensity;
  }
  set minPixelIntensity(t2) {
    this._set("minDensity", t2 * this._pixelIntensityToDensity);
  }
  get _pixelIntensityToDensity() {
    return 24 / (c ** 2 * this.blurRadius ** 4);
  }
  read(t2, e4) {
    t2 = f2(t2), super.read(t2, e4);
  }
  getSymbol() {
    return new u2();
  }
  async getSymbolAsync() {
    return this.getSymbol();
  }
  get symbols() {
    return [this.getSymbol()];
  }
  async collectRequiredFields(t2, e4) {
    const i6 = this.field, s4 = this.valueExpression;
    i6 && "string" == typeof i6 && x2(t2, e4, i6), s4 && "string" == typeof s4 && await E(t2, e4, s4);
  }
  getAttributeHash() {
    return "";
  }
  getMeshHash() {
    return `${JSON.stringify(this.colorStops)}.${this.blurRadius}.${this.field}`;
  }
  clone() {
    return new g2({ authoringInfo: this.authoringInfo && this.authoringInfo.clone(), colorStops: a(this.colorStops), field: this.field, legendOptions: a(this.legendOptions), maxDensity: this.maxDensity, minDensity: this.minDensity, radius: this.radius, referenceScale: this.referenceScale, valueExpression: this.valueExpression, valueExpressionTitle: this.valueExpressionTitle });
  }
};
r([m({ type: g, json: { write: true, origins: { "web-scene": { write: false, read: false } } } })], w.prototype, "authoringInfo", void 0), r([m({ type: Number, json: { origins: { "portal-item": { write: true }, "web-map": { write: true } } } })], w.prototype, "blurRadius", null), r([m({ type: [c4], json: { write: { isRequired: true } } })], w.prototype, "colorStops", void 0), r([m({ type: String, json: { write: true } })], w.prototype, "field", void 0), r([m({ type: p3, json: { write: true } })], w.prototype, "legendOptions", void 0), r([m({ type: Number, json: { write: true } })], w.prototype, "maxDensity", void 0), r([m({ type: Number, json: { origins: { "portal-item": { write: true }, "web-map": { write: true } } } })], w.prototype, "maxPixelIntensity", null), r([m({ type: Number, json: { write: true } })], w.prototype, "minDensity", void 0), r([m({ type: Number, json: { origins: { "portal-item": { write: true }, "web-map": { write: true } } } })], w.prototype, "minPixelIntensity", null), r([m({ type: Number, cast: o, json: { write: true } })], w.prototype, "radius", void 0), r([m({ type: Number, range: { min: 0 }, json: { default: 0, write: true } })], w.prototype, "referenceScale", void 0), r([r3({ heatmap: "heatmap" })], w.prototype, "type", void 0), r([m({ type: String, json: { write: true, origins: { "web-document": { write: false }, "portal-item": { write: false } } } })], w.prototype, "valueExpression", void 0), r([m({ type: String })], w.prototype, "valueExpressionTitle", void 0), r([m({ readOnly: true })], w.prototype, "_pixelIntensityToDensity", null), w = g2 = r([a2("esri.renderers.HeatmapRenderer")], w);

// node_modules/@arcgis/core/renderers/support/OthersCategory.js
var i5 = class extends a3.ClonableMixin(l) {
  constructor() {
    super(...arguments), this.color = new l2([0, 0, 0, 0]), this.label = null, this.threshold = 0;
  }
};
r([m({ type: l2, json: { write: true } })], i5.prototype, "color", void 0), r([m({ type: String, json: { write: true } })], i5.prototype, "label", void 0), r([m({ type: Number, range: { min: 0, max: 1 }, json: { write: true } })], i5.prototype, "threshold", void 0), i5 = r([a2("esri.renderers.support.OthersCategory")], i5);

// node_modules/@arcgis/core/renderers/PieChartRenderer.js
var v3 = { base: u3, key: "type", typeMap: { size: f, opacity: a5 } };
var S = class extends v2(a3.ClonableMixin(a4)) {
  constructor(e4) {
    super(e4), this.attributes = null, this.backgroundFillSymbol = null, this.defaultColor = new l2([0, 0, 0, 0]), this.defaultLabel = null, this.holePercentage = 0, this.othersCategory = new i5(), this.legendOptions = null, this.outline = null, this.size = 12, this.type = "pie-chart", this.visualVariables = null;
  }
  getSymbol() {
    return new u2({ size: this.size ? this.size / 2 + (this.outline?.width || 0) : 0 });
  }
  async getSymbolAsync() {
    return this.getSymbol();
  }
  get symbols() {
    return [this.getSymbol(), this.backgroundFillSymbol].filter(L);
  }
  getAttributeHash() {
    return this.visualVariables?.reduce((e4, t2) => e4 + t2.getAttributeHash(), "") ?? "";
  }
  getMeshHash() {
    return this.symbols.reduce((e4, t2) => e4 + JSON.stringify(t2), "");
  }
  async collectRequiredFields(e4, t2) {
    await this.collectVVRequiredFields(e4, t2);
    for (const r5 of this.attributes) r5.valueExpression && await E(e4, t2, r5.valueExpression), r5.field && e4.add(r5.field);
  }
};
r([m({ type: [c3], json: { write: true } })], S.prototype, "attributes", void 0), r([m(n2)], S.prototype, "backgroundFillSymbol", void 0), r([m({ type: l2, json: { write: true } })], S.prototype, "defaultColor", void 0), r([m({ type: String, json: { write: true } })], S.prototype, "defaultLabel", void 0), r([m({ type: Number, range: { min: 0, max: 1 }, json: { write: true } })], S.prototype, "holePercentage", void 0), r([m({ type: i5, json: { write: true } })], S.prototype, "othersCategory", void 0), r([m({ type: u4, json: { write: true } })], S.prototype, "legendOptions", void 0), r([m({ type: m2, json: { default: null, write: true } })], S.prototype, "outline", void 0), r([m({ type: Number, cast: o, json: { write: true } })], S.prototype, "size", void 0), r([r3({ pieChart: "pie-chart" })], S.prototype, "type", void 0), r([m({ types: [v3] })], S.prototype, "visualVariables", void 0), S = r([a2("esri.renderers.PieChartRenderer")], S);

// node_modules/@arcgis/core/renderers/support/typeUtils.js
var m7 = { key: "type", base: a4, typeMap: { heatmap: w, simple: m4, "unique-value": $, "class-breaks": j, "dot-density": m6, dictionary: u5, "pie-chart": S }, errorContext: "renderer" };
var u7 = { key: "type", base: a4, typeMap: { simple: m4, "unique-value": $, "class-breaks": j, heatmap: w }, errorContext: "renderer", validate: c5 };
function c5(e4) {
  switch (e4.type) {
    case "simple":
      return f3(e4);
    case "unique-value":
      return d(e4);
    case "class-breaks":
      return y2(e4);
    case "heatmap":
      return e4;
  }
}
function f3(r5) {
  if (r5.symbol) return r5;
  i.getLogger("esri.renderers.support.types").error("Removed invalid 'simple' renderer without a symbol from web scene.");
}
function d(r5) {
  const t2 = r5.uniqueValueInfos, s4 = t2?.filter(({ symbol: r6, label: t3 }, s5) => (r6 || i.getLogger("esri.renderers.support.types").error(`Removed invalid unique value info ([${s5}] ${t3}) without a symbol from web scene.`), !!r6));
  return s4?.length !== t2?.length && (r5.uniqueValueInfos = s4), r5;
}
function y2(r5) {
  const t2 = r5.classBreakInfos, s4 = t2?.filter(({ symbol: r6, label: t3 }, s5) => (r6 || i.getLogger("esri.renderers.support.types").error(`Removed invalid class break info ([${s5}] ${t3}) without a symbol from web scene.`), !!r6));
  return s4?.length !== t2?.length && (r5.classBreakInfos = s4), r5;
}

export {
  c4 as c,
  m7 as m,
  u7 as u
};
//# sourceMappingURL=chunk-AGDHKBKD.js.map
