import {
  t
} from "./chunk-WEBPFKVW.js";
import {
  A,
  D as D2,
  E as E2,
  F,
  I,
  L,
  O as O2,
  S as S2,
  S2 as S3,
  T as T2,
  a as a2,
  f as f4,
  g as g2,
  h as h2,
  l as l2,
  m as m3,
  p as p4,
  s as s4,
  t as t2,
  t2 as t3,
  w,
  w2
} from "./chunk-WNIXFBZS.js";
import {
  j
} from "./chunk-XMAXGUBN.js";
import {
  K,
  Pe,
  qe
} from "./chunk-Q7K6M7G6.js";
import {
  D,
  E,
  J,
  M,
  O,
  T,
  d,
  f as f3,
  g,
  l,
  m as m2,
  o as o2,
  s as s3,
  x
} from "./chunk-EK343S5L.js";
import {
  R,
  a,
  i as i2,
  n as n2,
  u
} from "./chunk-F5BDMX7A.js";
import {
  Xe
} from "./chunk-KXFCAOWK.js";
import {
  n as n4
} from "./chunk-SBFMUXL3.js";
import {
  p as p3
} from "./chunk-UTU6N7VJ.js";
import {
  c as c3
} from "./chunk-7WKBQS4R.js";
import {
  Z
} from "./chunk-JEYXDNAT.js";
import {
  i,
  o,
  r
} from "./chunk-NY6S6EMV.js";
import {
  e
} from "./chunk-AQGMTI4V.js";
import {
  n as n3,
  x as x2
} from "./chunk-YSCIEMYQ.js";
import {
  R as R2
} from "./chunk-7ZMGKXLG.js";
import {
  p as p2
} from "./chunk-JMXPE5PE.js";
import {
  m
} from "./chunk-6TS2ZJL4.js";
import {
  h
} from "./chunk-L7EN54WK.js";
import {
  k
} from "./chunk-F4KXGA4J.js";
import {
  d as d2
} from "./chunk-2IMSGFJN.js";
import {
  r as r2
} from "./chunk-BDLVUYG2.js";
import {
  f as f2
} from "./chunk-N3A2BVTW.js";
import {
  p
} from "./chunk-SRQCQD63.js";
import {
  c as c2
} from "./chunk-Q6XRAGMA.js";
import {
  f
} from "./chunk-PK2ZR2SJ.js";
import {
  c
} from "./chunk-OXSERRAR.js";
import {
  H,
  s as s2
} from "./chunk-ZWFY3WY5.js";
import {
  S,
  n
} from "./chunk-GZ2P4SCJ.js";
import {
  s
} from "./chunk-FXKORAMT.js";

// node_modules/@arcgis/core/arcade/featureSetCollection.js
var e2 = class {
  constructor() {
    this.declaredRootClass = "esri.arcade.featureSetCollection", this._layerById = {}, this._layerByName = {};
  }
  add(e4, t5, a6) {
    this._layerById[t5] = a6, this._layerByName[e4] = a6;
  }
  async featureSetByName(e4, t5 = true, a6 = ["*"]) {
    return void 0 === this._layerByName[e4] ? null : this._layerByName[e4];
  }
  async featureSetById(e4, t5 = true, a6 = ["*"]) {
    return void 0 === this._layerById[e4] ? null : this._layerById[e4];
  }
  castToText(e4 = false) {
    return "object, FeatureSetCollection";
  }
};

// node_modules/@arcgis/core/arcade/featureset/actions/AttributeFilter.js
var c4 = class _c extends S3 {
  constructor(e4) {
    super(e4), this.declaredClass = "esri.arcade.featureset.actions.AttributeFilter", this._maxProcessing = 1e3, this._parent = e4.parentfeatureset, e4.whereclause instanceof R ? (this._whereclause = e4.whereclause, this._whereClauseFunction = null) : (this._whereClauseFunction = e4.whereclause, this._whereclause = null);
  }
  _initialiseFeatureSet() {
    null !== this._parent ? (this.fields = this._parent.fields.slice(), this.geometryType = this._parent.geometryType, this.objectIdField = this._parent.objectIdField, this.globalIdField = this._parent.globalIdField, this.spatialReference = this._parent.spatialReference, this.hasM = this._parent.hasM, this.hasZ = this._parent.hasZ, this.typeIdField = this._parent.typeIdField, this.types = this._parent.types, this.subtypeField = this._parent.subtypeField, this.subtypes = this._parent.subtypes) : (this.fields = [], this.typeIdField = "", this.subtypeField = "", this.objectIdField = "", this.globalIdField = "", this.spatialReference = new f({ wkid: 4326 }), this.geometryType = D.point);
  }
  async _getSet(e4) {
    if (null === this._wset) {
      await this._ensureLoaded();
      const t5 = await this._parent._getFilteredSet("", null, this._whereclause, null, e4);
      return this._checkCancelled(e4), null !== this._whereClauseFunction ? this._wset = new t3(t5._candidates.slice().concat(t5._known.slice()), [], t5._ordered, this._clonePageDefinition(t5.pagesDefinition)) : this._wset = new t3(t5._candidates.slice(), t5._known.slice(), t5._ordered, this._clonePageDefinition(t5.pagesDefinition)), this._wset;
    }
    return this._wset;
  }
  _isInFeatureSet(e4) {
    let t5 = this._parent?._isInFeatureSet(e4);
    return t5 === l.NotInFeatureSet ? t5 : (t5 = this._idstates[e4], void 0 === t5 ? l.Unknown : t5);
  }
  _getFeature(e4, t5, s6) {
    return this._parent._getFeature(e4, t5, s6);
  }
  _getFeatures(e4, t5, s6, i3) {
    return this._parent._getFeatures(e4, t5, s6, i3);
  }
  _featureFromCache(e4) {
    return this._parent._featureFromCache(e4);
  }
  executeWhereClause(e4) {
    return this._whereclause?.testFeature(e4) ?? false;
  }
  async executeWhereClauseDeferred(e4) {
    if (null !== this._whereClauseFunction) {
      const t5 = this._whereClauseFunction(e4);
      return S(t5), t5;
    }
    return this.executeWhereClause(e4);
  }
  async _fetchAndRefineFeatures(e4, t5, s6) {
    const r3 = new t3([], e4, false, null), a6 = Math.min(t5, e4.length);
    if (await this._parent?._getFeatures(r3, -1, a6, s6), this._checkCancelled(s6), null == this._whereClauseFunction) {
      for (let t6 = 0; t6 < a6; t6++) {
        const s7 = this._parent?._featureFromCache(e4[t6]);
        true === this.executeWhereClause(s7) ? this._idstates[e4[t6]] = l.InFeatureSet : this._idstates[e4[t6]] = l.NotInFeatureSet;
      }
      return "success";
    }
    const l3 = [];
    for (let i3 = 0; i3 < a6; i3++) {
      const t6 = this._parent?._featureFromCache(e4[i3]);
      l3.push(await this.executeWhereClauseDeferred(t6));
    }
    for (let i3 = 0; i3 < t5; i3++) true === l3[i3] ? this._idstates[e4[i3]] = l.InFeatureSet : this._idstates[e4[i3]] = l.NotInFeatureSet;
    return "success";
  }
  async _getFilteredSet(e4, t5, s6, r3, n5) {
    null !== this._whereClauseFunction || (null !== s6 ? null !== this._whereclause && (s6 = g2(this._whereclause, s6)) : s6 = this._whereclause), await this._ensureLoaded();
    const l3 = await this._parent._getFilteredSet(e4, t5, s6, r3, n5);
    let h3;
    return this._checkCancelled(n5), h3 = null !== this._whereClauseFunction ? new t3(l3._candidates.slice().concat(l3._known.slice()), [], l3._ordered, this._clonePageDefinition(l3.pagesDefinition)) : new t3(l3._candidates.slice(), l3._known.slice(), l3._ordered, this._clonePageDefinition(l3.pagesDefinition)), h3;
  }
  async _stat(e4, t5, s6, i3, r3, n5, l3) {
    if (null !== this._whereClauseFunction) return null === r3 && "" === s6 && null === i3 ? this._manualStat(e4, t5, n5, l3) : { calculated: false };
    let h3 = this._whereclause;
    null !== r3 && null !== this._whereclause && (h3 = g2(this._whereclause, r3));
    const u2 = await this._parent._stat(e4, t5, s6, i3, h3, n5, l3);
    return false === u2.calculated ? null === r3 && "" === s6 && null === i3 ? this._manualStat(e4, t5, n5, l3) : { calculated: false } : u2;
  }
  async _canDoAggregates(e4, t5, s6, i3, r3) {
    return null === this._whereClauseFunction && (null !== r3 ? null !== this._whereclause && (r3 = g2(this._whereclause, r3)) : r3 = this._whereclause, null !== this._parent && this._parent._canDoAggregates(e4, t5, s6, i3, r3));
  }
  async _getAggregatePagesDataSourceDefinition(s6, i3, r3, n5, l3, h3, u2) {
    if (null === this._parent) throw new s4(t2.NeverReach);
    return null !== l3 ? null !== this._whereclause && (l3 = g2(this._whereclause, l3)) : l3 = this._whereclause, this._parent._getAggregatePagesDataSourceDefinition(s6, i3, r3, n5, l3, h3, u2);
  }
  static registerAction() {
    S3._featuresetFunctions.filter = function(e4) {
      if ("function" == typeof e4) return new _c({ parentfeatureset: this, whereclause: e4 });
      let t5 = null;
      return e4 instanceof R && (t5 = e4), new _c({ parentfeatureset: this, whereclause: t5 });
    };
  }
  getFieldsIndex() {
    return this._parent.getFieldsIndex();
  }
};

// node_modules/@arcgis/core/arcade/featureset/actions/Adapted.js
var I2 = class {
  constructor(e4) {
    this.field = e4, this.sqlRewritable = false;
  }
  postInitialization(e4, t5) {
  }
};
var k2 = class extends I2 {
  constructor(e4) {
    super(e4), this.sqlRewritable = true;
  }
  extractValue(e4) {
    return e4.attributes[this.field.name];
  }
  rewriteSql(e4) {
    return { rewritten: this.sqlRewritable, where: e4 };
  }
};
var b = class extends I2 {
  constructor(e4, t5, r3) {
    super(s3(e4)), this.originalField = e4, this.sqlRewritable = true, this.field.name = t5, this.field.alias = r3;
  }
  rewriteSql(e4, t5) {
    return { rewritten: this.sqlRewritable, where: p4(e4, this.field.name, this.originalField.name, t5.getFieldsIndex()) };
  }
  extractValue(e4) {
    return e4.attributes[this.originalField.name];
  }
};
var _B = class _B extends I2 {
  constructor(e4, t5, r3) {
    super(e4), this.codefield = t5, this.lkp = r3, this.reverseLkp = {};
    for (const s6 in r3) this.reverseLkp[r3[s6]] = s6;
    this.sqlRewritable = true;
  }
  rewriteSql(e4, t5) {
    const r3 = this.evaluateNodeToWhereClause(e4.parseTree, o2.Standardised, this.field.name, this.codefield instanceof R ? f4(this.codefield, o2.Standardised) : this.codefield, e4.parameters);
    return r3.includes(_B.BADNESS) ? { rewritten: false, where: e4 } : { rewritten: this.sqlRewritable, where: R.create(r3, { fieldsIndex: t5._parent.getFieldsIndex(), timeZone: t5.dateFieldsTimeZoneDefaultUTC }) };
  }
  evaluateNodeToWhereClause(e4, t5, r3 = null, s6 = null, a6) {
    let i3, l3, d4, p6;
    switch (e4.type) {
      case "interval":
        return F(this.evaluateNodeToWhereClause(e4.value, t5, r3, s6, a6), e4.qualifier, e4.op);
      case "case-expression": {
        let s7 = " CASE ";
        "simple" === e4.format && (s7 += this.evaluateNodeToWhereClause(e4.operand, t5, r3, _B.BADNESS, a6));
        for (let i4 = 0; i4 < e4.clauses.length; i4++) s7 += " WHEN " + this.evaluateNodeToWhereClause(e4.clauses[i4].operand, t5, r3, _B.BADNESS, a6) + " THEN " + this.evaluateNodeToWhereClause(e4.clauses[i4].value, t5, r3, _B.BADNESS, a6);
        return null !== e4.else && (s7 += " ELSE " + this.evaluateNodeToWhereClause(e4.else, t5, r3, _B.BADNESS, a6)), s7 += " END ", s7;
      }
      case "parameter": {
        const r4 = a6[e4.value.toLowerCase()];
        if ("string" == typeof r4) return "'" + r4.toString().replaceAll("'", "''") + "'";
        if (d(r4)) return I(r4, t5);
        if (m2(r4)) return I(r4, t5);
        if (T(r4)) return A(r4, t5);
        if (f3(r4)) return S2(r4, t5);
        if (g(r4)) return E2(r4, t5);
        if (Array.isArray(r4)) {
          const e5 = [];
          for (let s7 = 0; s7 < r4.length; s7++) "string" == typeof r4[s7] ? e5.push("'" + r4[s7].toString().replaceAll("'", "''") + "'") : d(r4[s7]) || m2(r4[s7]) ? e5.push(I(r4[s7], t5)) : T(r4[s7]) ? e5.push(A(r4[s7], t5)) : f3(r4[s7]) ? e5.push(S2(r4[s7], t5)) : g(r4[s7]) ? e5.push(E2(r4[s7], t5)) : e5.push(r4[s7].toString());
          return e5;
        }
        return r4.toString();
      }
      case "expression-list":
        l3 = [];
        for (const i4 of e4.value) l3.push(this.evaluateNodeToWhereClause(i4, t5, r3, s6, a6));
        return l3;
      case "unary-expression":
        return " ( NOT " + this.evaluateNodeToWhereClause(e4.expr, t5, r3, _B.BADNESS, a6) + " ) ";
      case "binary-expression":
        switch (e4.operator) {
          case "AND":
            return " (" + this.evaluateNodeToWhereClause(e4.left, t5, r3, s6, a6) + " AND " + this.evaluateNodeToWhereClause(e4.right, t5, r3, s6, a6) + ") ";
          case "OR":
            return " (" + this.evaluateNodeToWhereClause(e4.left, t5, r3, s6, a6) + " OR " + this.evaluateNodeToWhereClause(e4.right, t5, r3, s6, a6) + ") ";
          case "IS":
            if ("null" !== e4.right.type) throw new n2(a.UnsupportedIsRhs);
            return " (" + this.evaluateNodeToWhereClause(e4.left, t5, r3, s6, a6) + " IS NULL )";
          case "ISNOT":
            if ("null" !== e4.right.type) throw new n2(a.UnsupportedIsRhs);
            return " (" + this.evaluateNodeToWhereClause(e4.left, t5, r3, s6, a6) + " IS NOT NULL )";
          case "IN":
            if (i3 = [], "expression-list" === e4.right.type) {
              if ("column-reference" === e4.left.type && e4.left.column.toUpperCase() === this.field.name.toUpperCase()) {
                const i4 = [];
                let l4 = true;
                for (const t6 of e4.right.value) {
                  if ("string" !== t6.type) {
                    l4 = false;
                    break;
                  }
                  if (void 0 === this.lkp[t6.value]) {
                    l4 = false;
                    break;
                  }
                  i4.push(this.lkp[t6.value].toString());
                }
                if (l4) return " (" + this.evaluateNodeToWhereClause(e4.left, t5, r3, s6, a6) + " IN (" + i4.join(",") + ")) ";
              }
              return i3 = this.evaluateNodeToWhereClause(e4.right, t5, r3, s6, a6), " (" + this.evaluateNodeToWhereClause(e4.left, t5, r3, s6, a6) + " IN (" + i3.join(",") + ")) ";
            }
            return p6 = this.evaluateNodeToWhereClause(e4.right, t5, r3, s6, a6), Array.isArray(p6) ? " (" + this.evaluateNodeToWhereClause(e4.left, t5, r3, s6, a6) + " IN (" + p6.join(",") + ")) " : " (" + this.evaluateNodeToWhereClause(e4.left, t5, r3, s6, a6) + " IN (" + p6 + ")) ";
          case "NOT IN":
            if (i3 = [], "expression-list" === e4.right.type) {
              if ("column-reference" === e4.left.type && e4.left.column.toUpperCase() === this.field.name.toUpperCase()) {
                const i4 = [];
                let l4 = true;
                for (const t6 of e4.right.value) {
                  if ("string" !== t6.type) {
                    l4 = false;
                    break;
                  }
                  if (void 0 === this.lkp[t6.value]) {
                    l4 = false;
                    break;
                  }
                  i4.push(this.lkp[t6.value].toString());
                }
                if (l4) return " (" + this.evaluateNodeToWhereClause(e4.left, t5, r3, s6, a6) + " NOT IN (" + i4.join(",") + ")) ";
              }
              return i3 = this.evaluateNodeToWhereClause(e4.right, t5, r3, s6, a6), " (" + this.evaluateNodeToWhereClause(e4.left, t5, r3, s6, a6) + " NOT IN (" + i3.join(",") + ")) ";
            }
            return p6 = this.evaluateNodeToWhereClause(e4.right, t5, r3, s6, a6), Array.isArray(p6) ? " (" + this.evaluateNodeToWhereClause(e4.left, t5, r3, s6, a6) + " NOT IN (" + p6.join(",") + ")) " : " (" + this.evaluateNodeToWhereClause(e4.left, t5, r3, s6, a6) + " NOT IN (" + p6 + ")) ";
          case "BETWEEN":
            return d4 = this.evaluateNodeToWhereClause(e4.right, t5, r3, _B.BADNESS, a6), " (" + this.evaluateNodeToWhereClause(e4.left, t5, r3, _B.BADNESS, a6) + " BETWEEN " + d4[0] + " AND " + d4[1] + " ) ";
          case "NOTBETWEEN":
            return d4 = this.evaluateNodeToWhereClause(e4.right, t5, r3, _B.BADNESS, a6), " (" + this.evaluateNodeToWhereClause(e4.left, t5, r3, _B.BADNESS, a6) + " NOT BETWEEN " + d4[0] + " AND " + d4[1] + " ) ";
          case "LIKE":
            return "" !== e4.escape ? " (" + this.evaluateNodeToWhereClause(e4.left, t5, r3, _B.BADNESS, a6) + " LIKE " + this.evaluateNodeToWhereClause(e4.right, t5, r3, _B.BADNESS, a6) + " ESCAPE '" + e4.escape + "') " : " (" + this.evaluateNodeToWhereClause(e4.left, t5, r3, _B.BADNESS, a6) + " LIKE " + this.evaluateNodeToWhereClause(e4.right, t5, r3, _B.BADNESS, a6) + ") ";
          case "NOT LIKE":
            return "" !== e4.escape ? " (" + this.evaluateNodeToWhereClause(e4.left, t5, r3, _B.BADNESS, a6) + " NOT LIKE " + this.evaluateNodeToWhereClause(e4.right, t5, r3, _B.BADNESS, a6) + " ESCAPE '" + e4.escape + "') " : " (" + this.evaluateNodeToWhereClause(e4.left, t5, r3, _B.BADNESS, a6) + " NOT LIKE " + this.evaluateNodeToWhereClause(e4.right, t5, r3, _B.BADNESS, a6) + ") ";
          case "<>":
          case "=":
            if ("column-reference" === e4.left.type && "string" === e4.right.type) {
              if (e4.left.column.toUpperCase() === this.field.name.toUpperCase() && void 0 !== this.lkp[e4.right.value.toString()]) return " (" + s6 + " " + e4.operator + " " + this.lkp[e4.right.value.toString()].toString() + ") ";
            } else if ("column-reference" === e4.right.type && "string" === e4.left.type && e4.right.column.toUpperCase() === this.field.name.toUpperCase()) return " (" + this.lkp[e4.right.value.toString()].toString() + " " + e4.operator + " " + s6 + ") ";
            return " (" + this.evaluateNodeToWhereClause(e4.left, t5, r3, _B.BADNESS, a6) + " " + e4.operator + " " + this.evaluateNodeToWhereClause(e4.right, t5, r3, _B.BADNESS, a6) + ") ";
          case "<":
          case ">":
          case ">=":
          case "<=":
          case "*":
          case "-":
          case "+":
          case "/":
          case "||":
            return " (" + this.evaluateNodeToWhereClause(e4.left, t5, r3, _B.BADNESS, a6) + " " + e4.operator + " " + this.evaluateNodeToWhereClause(e4.right, t5, r3, _B.BADNESS, a6) + ") ";
        }
      case "null":
        return "null";
      case "boolean":
        return true === e4.value ? "1" : "0";
      case "string":
        return "'" + e4.value.toString().replaceAll("'", "''") + "'";
      case "timestamp":
        return `timestamp '${e4.value}'`;
      case "date":
        return `date '${e4.value}'`;
      case "time":
        return `time '${e4.value}'`;
      case "number":
        return e4.value.toString();
      case "current-time":
        return L(e4.mode, t5);
      case "current-user":
        return "CURRENT_USER";
      case "column-reference":
        return r3 && r3.toLowerCase() === e4.column.toLowerCase() ? "(" + s6 + ")" : h2(e4.column);
      case "data-type":
        return e4.value;
      case "function": {
        const s7 = this.evaluateNodeToWhereClause(e4.args, t5, r3, _B.BADNESS, a6);
        return T2(e4.name, s7, t5);
      }
    }
    throw new n2(a.UnsupportedSyntax, { node: e4.type });
  }
  extractValue(e4) {
    return this.codefield instanceof R ? this.reverseLkp[R.convertValueToStorageFormat(this.codefield.calculateValueCompiled(e4))] : this.reverseLkp[e4.attributes[this.codefield]];
  }
};
_B.BADNESS = "_!!!_BAD_LKP_!!!!";
var B = _B;
var L2 = class extends I2 {
  constructor(e4, t5) {
    super(e4), this._sql = t5;
  }
  rewriteSql(e4, t5) {
    return { rewritten: true, where: p4(e4, this.field.name, f4(this._sql, o2.Standardised), t5.getFieldsIndex()) };
  }
  extractValue(e4) {
    return R.convertValueToStorageFormat(this._sql.calculateValueCompiled(e4), this.field.type);
  }
};
var R3 = class extends S3 {
  static findField(e4, t5) {
    for (const r3 of e4) if (r3.name.toLowerCase() === t5.toString().toLowerCase()) return r3;
    return null;
  }
  constructor(e4) {
    super(e4), this._calcFunc = null, this.declaredClass = "esri.arcade.featureset.actions.Adapted", this.adaptedFields = [], this._extraFilter = null, this._extraFilter = e4.extraFilter, this._parent = e4.parentfeatureset, this._maxProcessing = 30, this.adaptedFields = e4.adaptedFields;
  }
  _initialiseFeatureSet() {
    null !== this._parent ? (this.geometryType = this._parent.geometryType, this.objectIdField = this._parent.objectIdField, this.globalIdField = this._parent.globalIdField, this.spatialReference = this._parent.spatialReference, this.hasM = this._parent.hasM, this.hasZ = this._parent.hasZ, this.typeIdField = this._parent.typeIdField, this.types = this._parent.types) : (this.spatialReference = new f({ wkid: 4326 }), this.objectIdField = "", this.globalIdField = "", this.geometryType = D.point, this.typeIdField = "", this.types = null, this.subtypeField = null, this.subtypes = null), this.fields = [];
    for (const e4 of this.adaptedFields) e4.postInitialization(this, this._parent), this.fields.push(e4.field);
  }
  async _getSet(e4) {
    if (null === this._wset) {
      await this._ensureLoaded();
      let t5 = null;
      return t5 = this._extraFilter ? await this._getFilteredSet("", null, null, null, e4) : await this._parent?._getSet(e4), this._checkCancelled(e4), n(t5), this._wset = new t3(t5._candidates.slice(), t5._known.slice(), t5._ordered, this._clonePageDefinition(t5.pagesDefinition)), this._wset;
    }
    return this._wset;
  }
  _isInFeatureSet(e4) {
    return this._parent._isInFeatureSet(e4);
  }
  async _getFeatures(r3, s6, a6, l3) {
    const n5 = [];
    -1 !== s6 && void 0 === this._featureCache[s6] && n5.push(s6);
    const o3 = this._maxQueryRate();
    if (true === this._checkIfNeedToExpandKnownPage(r3, o3)) return await this._expandPagedSet(r3, o3, 0, 0, l3), this._getFeatures(r3, s6, a6, l3);
    let u2 = 0;
    for (let e4 = r3._lastFetchedIndex; e4 < r3._known.length && (u2++, u2 <= a6 && (r3._lastFetchedIndex += 1), !(void 0 === this._featureCache[r3._known[e4]] && (r3._known[e4] !== s6 && n5.push(r3._known[e4]), n5.length >= o3))); e4++) ;
    if (0 === n5.length) return "success";
    r3 = new t3([], n5, r3._ordered, null);
    const h3 = Math.min(n5.length, a6);
    await this._parent?._getFeatures(r3, -1, h3, l3), this._checkCancelled(l3);
    const c5 = [];
    for (let e4 = 0; e4 < h3; e4++) {
      const t5 = this._parent?._featureFromCache(n5[e4]);
      void 0 !== t5 && c5.push({ geometry: t5.geometry, attributes: t5.attributes, id: n5[e4] });
    }
    for (const i3 of c5) {
      const r4 = [];
      for (const e4 of this.adaptedFields) r4[e4.field.name] = e4.extractValue(i3);
      this._featureCache[i3.id] = new d2({ attributes: r4, geometry: o(i3.geometry) });
    }
    return "success";
  }
  async _fetchAndRefineFeatures() {
    throw new s4(t2.NeverReach);
  }
  async _getFilteredSet(e4, t5, r3, s6, a6) {
    let l3 = false;
    const n5 = this._reformulateWithoutAdaptions(r3);
    l3 = n5.cannot, r3 = n5.where;
    let o3 = false;
    if (null !== s6) {
      o3 = true;
      const e5 = [];
      for (const t6 of this.adaptedFields) if (!(t6 instanceof k2) && true === s6.scanForField(t6.field.name)) {
        if (!(t6 instanceof b)) {
          s6 = null, o3 = false;
          break;
        }
        e5.push({ field: t6.field.name, newfield: t6.originalField.name });
      }
      s6 && e5.length > 0 && (s6 = s6.replaceFields(e5));
    }
    null !== r3 ? null !== this._extraFilter && (r3 = g2(this._extraFilter, r3)) : r3 = this._extraFilter, await this._ensureLoaded();
    const u2 = await this._parent._getFilteredSet(e4, t5, r3, s6, a6);
    let h3;
    return this._checkCancelled(a6), h3 = true === l3 ? new t3(u2._candidates.slice().concat(u2._known.slice()), [], true === o3 && u2._ordered, this._clonePageDefinition(u2.pagesDefinition)) : new t3(u2._candidates.slice(), u2._known.slice(), true === o3 && u2._ordered, this._clonePageDefinition(u2.pagesDefinition)), h3;
  }
  _reformulateWithoutAdaptions(e4) {
    const t5 = { cannot: false, where: e4 };
    if (null !== e4) {
      for (const r3 of this.adaptedFields) if (true === D2(e4, r3.field.name)) {
        const s6 = r3.rewriteSql(e4, this);
        if (true !== s6.rewritten) {
          t5.cannot = true, t5.where = null;
          break;
        }
        t5.where = s6.where;
      }
    }
    return t5;
  }
  async _stat(e4, t5, r3, s6, a6, i3, l3) {
    let n5 = false, o3 = this._reformulateWithoutAdaptions(t5);
    if (n5 = o3.cannot, t5 = o3.where, o3 = this._reformulateWithoutAdaptions(a6), n5 = n5 || o3.cannot, null !== (a6 = o3.where) ? null !== this._extraFilter && (a6 = g2(this._extraFilter, a6)) : a6 = this._extraFilter, true === n5) return null === a6 && "" === r3 && null === s6 ? this._manualStat(e4, t5, i3, l3) : { calculated: false };
    const u2 = await this._parent._stat(e4, t5, r3, s6, a6, i3, l3);
    return false === u2.calculated ? null === a6 && "" === r3 && null === s6 ? this._manualStat(e4, t5, i3, l3) : { calculated: false } : u2;
  }
  async _canDoAggregates(e4, t5, r3, s6, a6) {
    if (null === this._parent) return false;
    for (let n5 = 0; n5 < e4.length; n5++) for (const t6 of this.adaptedFields) if (e4[n5].toLowerCase() === t6.field.name.toLowerCase() && !(t6 instanceof k2)) return false;
    const i3 = [];
    for (let n5 = 0; n5 < t5.length; n5++) {
      const e5 = t5[n5];
      if (null !== e5.workingexpr) {
        const t6 = this._reformulateWithoutAdaptions(e5.workingexpr);
        if (t6.cannot) return false;
        const r4 = e5.clone();
        r4.workingexpr = t6.where, i3.push(r4);
      } else i3.push(e5);
    }
    const l3 = this._reformulateWithoutAdaptions(a6);
    return !l3.cannot && (null !== (a6 = l3.where) ? null !== this._extraFilter && (a6 = g2(this._extraFilter, a6)) : a6 = this._extraFilter, this._parent._canDoAggregates(e4, i3, r3, s6, a6));
  }
  async _getAggregatePagesDataSourceDefinition(e4, t5, a6, i3, l3, n5, o3) {
    if (null === this._parent) throw new s4(t2.NeverReach);
    const u2 = [];
    for (let c5 = 0; c5 < t5.length; c5++) {
      const e5 = t5[c5];
      if (null !== e5.workingexpr) {
        const t6 = this._reformulateWithoutAdaptions(e5.workingexpr);
        if (t6.cannot) throw new s4(t2.NeverReach);
        const a7 = e5.clone();
        a7.workingexpr = t6.where, u2.push(a7);
      } else u2.push(e5);
    }
    const h3 = this._reformulateWithoutAdaptions(l3);
    if (h3.cannot) throw new s4(t2.NeverReach);
    return null !== (l3 = h3.where) ? null !== this._extraFilter && (l3 = g2(this._extraFilter, l3)) : l3 = this._extraFilter, this._parent._getAggregatePagesDataSourceDefinition(e4, u2, a6, i3, l3, n5, o3);
  }
};

// node_modules/@arcgis/core/arcade/featureset/support/OrderbyClause.js
function t4(t5, e4) {
  return t5 === e4 ? 0 : null === t5 ? -1 : null === e4 ? 1 : t5 < e4 ? -1 : 1;
}
var e3 = class _e {
  constructor(t5) {
    const e4 = t5.split(",");
    this._fields = [], this._directions = [];
    for (let s6 = 0; s6 < e4.length; s6++) {
      const t6 = e4[s6].match(/\S+/g);
      this._fields.push(t6[0]), 2 === t6.length ? "asc" === t6[1].toLowerCase() ? this._directions.push(1) : this._directions.push(0) : this._directions.push(1);
    }
  }
  constructClause() {
    let t5 = "";
    for (let e4 = 0; e4 < this._fields.length; e4++) 0 !== e4 && (t5 += ","), t5 += this._fields[e4], 1 === this._directions[e4] ? t5 += " ASC" : t5 += " DESC";
    return t5;
  }
  order(e4) {
    e4.sort((e5, s6) => {
      for (let i3 = 0; i3 < this._fields.length; i3++) {
        const r3 = this.featureValue(e5.feature, this._fields[i3], i3), l3 = this.featureValue(s6.feature, this._fields[i3], i3);
        let o3 = 0;
        if (o3 = 1 === this._directions[i3] ? t4(r3, l3) : -1 * t4(r3, l3), 0 !== o3) return o3;
      }
      return 0;
    });
  }
  scanForField(t5) {
    for (let e4 = 0; e4 < this._fields.length; e4++) if (this._fields[e4].toLowerCase().trim() === t5.toLowerCase().trim()) return true;
    return false;
  }
  replaceFields(t5) {
    let s6 = "";
    for (let e4 = 0; e4 < this._fields.length; e4++) {
      0 !== e4 && (s6 += ",");
      let i3 = this._fields[e4];
      for (const e5 of t5) if (i3.toLowerCase() === e5.field.toLowerCase()) {
        i3 = e5.newfield;
        break;
      }
      s6 += i3, 1 === this._directions[e4] ? s6 += " ASC" : s6 += " DESC";
    }
    return new _e(s6);
  }
  featureValue(t5, e4, s6) {
    const i3 = t5.attributes[e4];
    if (void 0 !== i3) return i3;
    for (const r3 in t5.attributes) if (e4.toLowerCase() === r3.toLowerCase()) return this._fields[s6] = r3, t5.attributes[r3];
    return null;
  }
};

// node_modules/@arcgis/core/arcade/featureset/actions/OrderBy.js
var a3 = class _a extends S3 {
  constructor(e4) {
    super(e4), this._orderbyclause = null, this.declaredClass = "esri.arcade.featureset.actions.OrderBy", this._maxProcessing = 100, this._orderbyclause = e4.orderbyclause, this._parent = e4.parentfeatureset;
  }
  async _getSet(e4) {
    if (null === this._wset) {
      await this._ensureLoaded();
      const t5 = await this._getFilteredSet("", null, null, this._orderbyclause, e4);
      return this._checkCancelled(e4), this._wset = t5, this._wset;
    }
    return this._wset;
  }
  async manualOrderSet(e4, t5) {
    const r3 = await this.getIdColumnDictionary(e4, [], -1, t5);
    this._orderbyclause?.order(r3);
    const n5 = new t3([], [], true, null);
    for (let s6 = 0; s6 < r3.length; s6++) n5._known.push(r3[s6].id);
    return n5;
  }
  async getIdColumnDictionary(t5, r3, n5, s6) {
    if (n5 < t5._known.length - 1) {
      const i3 = this._maxQueryRate();
      if ("GETPAGES" === t5._known[n5 + 1]) return await Pe(this._parent._expandPagedSet(t5, i3, 0, 0, s6)), this.getIdColumnDictionary(t5, r3, n5, s6);
      let a6 = n5 + 1;
      const o3 = [];
      for (; a6 < t5._known.length && "GETPAGES" !== t5._known[a6]; ) o3.push(t5._known[a6]), a6++;
      n5 += o3.length;
      const u2 = await Pe(this._parent._getFeatureBatch(o3, s6));
      this._checkCancelled(s6);
      for (const e4 of u2) r3.push({ id: e4.attributes[this.objectIdField], feature: e4 });
      return this.getIdColumnDictionary(t5, r3, n5, s6);
    }
    return t5._candidates.length > 0 ? (await Pe(this._refineSetBlock(t5, this._maxProcessingRate(), s6)), this._checkCancelled(s6), this.getIdColumnDictionary(t5, r3, n5, s6)) : r3;
  }
  _isInFeatureSet(e4) {
    return this._parent._isInFeatureSet(e4);
  }
  _getFeatures(e4, t5, r3, n5) {
    return this._parent._getFeatures(e4, t5, r3, n5);
  }
  _featureFromCache(e4) {
    if (void 0 === this._featureCache[e4]) {
      const t5 = this._parent._featureFromCache(e4);
      if (void 0 === t5) return;
      return null === t5 ? null : (this._featureCache[e4] = t5, t5);
    }
    return this._featureCache[e4];
  }
  async _fetchAndRefineFeatures() {
    throw new s4(t2.NeverReach);
  }
  async _getFilteredSet(e4, t5, r3, n5, i3) {
    await this._ensureLoaded();
    const a6 = await this._parent._getFilteredSet(e4, t5, r3, null === n5 ? this._orderbyclause : n5, i3);
    this._checkCancelled(i3);
    const o3 = new t3(a6._candidates.slice(), a6._known.slice(), a6._ordered, this._clonePageDefinition(a6.pagesDefinition));
    let u2 = true;
    if (a6._candidates.length > 0 && (u2 = false), false === o3._ordered) {
      let e5 = await this.manualOrderSet(o3, i3);
      return false === u2 && (null === t5 && null === r3 || (e5 = new t3(e5._candidates.slice().concat(e5._known.slice()), [], e5._ordered, this._clonePageDefinition(e5.pagesDefinition)))), e5;
    }
    return o3;
  }
  static registerAction() {
    S3._featuresetFunctions.orderBy = function(e4) {
      return "" === e4 ? this : new _a({ parentfeatureset: this, orderbyclause: new e3(e4) });
    };
  }
  getFieldsIndex() {
    return this._parent.getFieldsIndex();
  }
};

// node_modules/@arcgis/core/arcade/featureset/support/StatsField.js
function s5(s6) {
  if ("function" === s6.parseTree.type) {
    if (0 === s6.parseTree.args.value.length) return { name: s6.parseTree.name, expr: null };
    if (s6.parseTree.args.value.length > 1) throw new n2(a.MissingStatisticParameters);
    const a6 = R.create(m3(s6.parseTree.args.value[0], o2.Standardised, s6.parameters), { fieldsIndex: s6.fieldsIndex, timeZone: s6.timeZone, currentUser: s6.currentUser });
    return { name: s6.parseTree.name, expr: a6 };
  }
  return null;
}
var a4 = class _a {
  constructor() {
    this.field = "", this.tofieldname = "", this.typeofstat = "MIN", this.workingexpr = null;
  }
  clone() {
    const e4 = new _a();
    return e4.field = this.field, e4.tofieldname = this.tofieldname, e4.typeofstat = this.typeofstat, e4.workingexpr = this.workingexpr, e4;
  }
  static parseStatField(e4, t5, o3, l3) {
    const f5 = new _a();
    f5.field = e4;
    const u2 = R.create(t5, { fieldsIndex: o3, timeZone: l3 }), p6 = s5(u2);
    if (null === p6) throw new n2(a.UnsupportedSqlFunction, { function: "" });
    const c5 = p6.name.toUpperCase().trim();
    if ("MIN" === c5) {
      if (f5.typeofstat = "MIN", f5.workingexpr = p6.expr, null === u2) throw new n2(a.InvalidFunctionParameters, { function: "min" });
    } else if ("MAX" === c5) {
      if (f5.typeofstat = "MAX", f5.workingexpr = p6.expr, null === u2) throw new n2(a.InvalidFunctionParameters, { function: "max" });
    } else if ("COUNT" === c5) f5.typeofstat = "COUNT", f5.workingexpr = p6.expr;
    else if ("STDEV" === c5) {
      if (f5.typeofstat = "STDDEV", f5.workingexpr = p6.expr, null === u2) throw new n2(a.InvalidFunctionParameters, { function: "stdev" });
    } else if ("SUM" === c5) {
      if (f5.typeofstat = "SUM", f5.workingexpr = p6.expr, null === u2) throw new n2(a.InvalidFunctionParameters, { function: "sum" });
    } else if ("MEAN" === c5) {
      if (f5.typeofstat = "AVG", f5.workingexpr = p6.expr, null === u2) throw new n2(a.InvalidFunctionParameters, { function: c5 });
    } else if ("AVG" === c5) {
      if (f5.typeofstat = "AVG", f5.workingexpr = p6.expr, null === u2) throw new n2(a.InvalidFunctionParameters, { function: "avg" });
    } else {
      if ("VAR" !== c5) throw new n2(a.UnsupportedSqlFunction, { function: c5 });
      if (f5.typeofstat = "VAR", f5.workingexpr = p6.expr, null === u2) throw new n2(a.InvalidFunctionParameters, { function: "var" });
    }
    return f5;
  }
  toStatisticsName() {
    switch (this.typeofstat.toUpperCase()) {
      case "MIN":
        return "min";
      case "MAX":
        return "max";
      case "SUM":
        return "sum";
      case "COUNT":
      default:
        return "count";
      case "VAR":
        return "var";
      case "STDDEV":
        return "stddev";
      case "AVG":
        return "avg";
    }
  }
};

// node_modules/@arcgis/core/arcade/featureset/actions/GroupBy.js
var R4 = new e(["MIN", "MAX", "VAR", "STDDEV", "COUNT", "SUM", "AVG"], [["VARIANCE", "VAR"], ["AVERAGE", "AVG"], ["MEAN", "AVG"], ["STDEV", "STDDEV"]]);
var q = class _q extends S3 {
  constructor(e4) {
    super(e4), this._decodedStatsfield = [], this._decodedGroupbyfield = [], this._candosimplegroupby = true, this.phsyicalgroupbyfields = [], this.objectIdField = "ROW__ID", this._internalObjectIdField = "ROW__ID", this._adaptedFields = [], this.declaredClass = "esri.arcade.featureset.actions.Aggregate", this._uniqueIds = 1, this._maxQuery = 10, this._maxProcessing = 10, this._parent = e4.parentfeatureset, this._config = e4;
  }
  isTable() {
    return true;
  }
  async _getSet(e4) {
    if (null === this._wset) {
      const t5 = await this._getFilteredSet("", null, null, null, e4);
      return this._wset = t5, this._wset;
    }
    return this._wset;
  }
  _isInFeatureSet() {
    return l.InFeatureSet;
  }
  _nextUniqueName(e4) {
    for (; 1 === e4["T" + this._uniqueIds.toString()]; ) this._uniqueIds++;
    const t5 = "T" + this._uniqueIds.toString();
    return e4[t5] = 1, t5;
  }
  _convertToEsriFieldType(e4) {
    return e4;
  }
  _initialiseFeatureSet() {
    const e4 = {};
    let t5 = false, i3 = 1;
    const r3 = this._parent ? this._parent.getFieldsIndex() : new Z([]);
    for (this.objectIdField = "ROW__ID", this.globalIdField = ""; false === t5; ) {
      let e5 = false;
      for (let t6 = 0; t6 < this._config.groupbyfields.length; t6++) if (this._config.groupbyfields[t6].name.toLowerCase() === this.objectIdField.toLowerCase()) {
        e5 = true;
        break;
      }
      if (false === e5) {
        for (let t6 = 0; t6 < this._config.statsfields.length; t6++) if (this._config.statsfields[t6].name.toLowerCase() === this.objectIdField.toLowerCase()) {
          e5 = true;
          break;
        }
      }
      false === e5 ? t5 = true : (this.objectIdField = "ROW__ID" + i3.toString(), i3++);
    }
    for (const s6 of this._config.statsfields) {
      const e5 = new a4();
      e5.field = s6.name, e5.tofieldname = s6.name, e5.workingexpr = s6.expression instanceof R ? s6.expression : R.create(s6.expression, { fieldsIndex: r3, timeZone: this.dateFieldsTimeZoneDefaultUTC }), e5.typeofstat = R4.lookup(s6.statistic) ?? "COUNT", this._decodedStatsfield.push(e5);
    }
    this._decodedGroupbyfield = [];
    for (const s6 of this._config.groupbyfields) {
      const e5 = { name: s6.name, singlefield: null, tofieldname: s6.name, expression: s6.expression instanceof R ? s6.expression : R.create(s6.expression, { fieldsIndex: r3, timeZone: this.dateFieldsTimeZoneDefaultUTC }), sqlType: null };
      this._decodedGroupbyfield.push(e5);
    }
    if (null !== this._parent) {
      this.geometryType = this._parent.geometryType, this.spatialReference = this._parent.spatialReference, this.hasM = this._parent.hasM, this.hasZ = this._parent.hasZ, this.typeIdField = "";
      for (const t6 of this._parent.fields) e4[t6.name.toUpperCase()] = 1;
      this.types = null, this.subtypes = null, this.subtypeField = "";
    } else this.geometryType = D.point, this.typeIdField = "", this.types = null, this.subtypes = null, this.subtypeField = "", this.spatialReference = new f({ wkid: 4326 });
    this.fields = [];
    const a6 = new a4();
    a6.field = this._nextUniqueName(e4), a6.tofieldname = this.objectIdField, a6.workingexpr = R.create(this._parent.objectIdField, { fieldsIndex: this._parent.getFieldsIndex(), timeZone: this.dateFieldsTimeZoneDefaultUTC }), a6.typeofstat = "MIN", this._decodedStatsfield.push(a6);
    for (const n5 of this._decodedGroupbyfield) {
      const t6 = new m();
      if (n5.name = this._nextUniqueName(e4), t6.name = n5.tofieldname, t6.alias = t6.name, O2(n5.expression)) {
        const e5 = this._parent.getField(f4(n5.expression, o2.Standardised));
        if (!e5) throw new s4(t2.AggregationFieldNotFound);
        n5.name = e5.name, n5.singlefield = e5.name, this.phsyicalgroupbyfields.push(e5.name), t6.type = e5.type, n5.sqlType = e5.type;
      } else {
        t6.type = this._convertToEsriFieldType(w(n5.expression, this._parent.fields));
        const e5 = new m();
        e5.name = n5.name, e5.alias = e5.name, this.phsyicalgroupbyfields.push(n5.name), this._adaptedFields.push(new L2(e5, n5.expression)), this._candosimplegroupby = false, n5.sqlType = t6.type;
      }
      this.fields.push(t6);
    }
    if (this._adaptedFields.length > 0) for (const s6 of this._parent.fields) this._adaptedFields.push(new k2(s6));
    for (let s6 = 0; s6 < this._decodedStatsfield.length; s6++) {
      const t6 = new m();
      let i4 = null;
      const n5 = this._decodedStatsfield[s6];
      n5.field = this._nextUniqueName(e4), n5.tofieldname === this.objectIdField && (this._internalObjectIdField = n5.field), t6.name = n5.tofieldname, t6.alias = t6.name;
      const r4 = null !== n5.workingexpr && O2(n5.workingexpr) ? f4(n5.workingexpr, o2.Standardised) : "";
      switch (this._decodedStatsfield[s6].typeofstat) {
        case "SUM":
          if ("" !== r4) {
            if (i4 = this._parent.getField(r4), !i4) throw new s4(t2.AggregationFieldNotFound);
            t6.type = i4.type;
          } else t6.type = "double";
          break;
        case "MIN":
        case "MAX":
          if ("" !== r4) {
            if (i4 = this._parent.getField(r4), !i4) throw new s4(t2.AggregationFieldNotFound);
            t6.type = i4.type;
          } else t6.type = "double";
          break;
        case "COUNT":
          t6.type = "integer";
          break;
        case "STDDEV":
        case "VAR":
        case "AVG":
          if ("" !== r4 && (i4 = this._parent.getField(r4), !i4)) throw new s4(t2.AggregationFieldNotFound);
          t6.type = "double";
      }
      this.fields.push(t6);
    }
  }
  async _canDoAggregates() {
    return false;
  }
  async _getFeatures(e4, t5, i3, s6) {
    -1 !== t5 && this._featureCache[t5];
    const n5 = this._maxQuery;
    return true === this._checkIfNeedToExpandKnownPage(e4, n5) ? (await this._expandPagedSet(e4, n5, 0, 0, s6), this._getFeatures(e4, t5, i3, s6)) : "success";
  }
  async _getFilteredSet(e4, t5, i3, s6, n5) {
    if ("" !== e4) return new t3([], [], true, null);
    let l3 = null;
    const d4 = { ordered: false, nowhereclause: false };
    if (await this._ensureLoaded(), null !== i3) {
      for (let r3 = 0; r3 < this._decodedStatsfield.length; r3++) if (true === D2(i3, this._decodedStatsfield[r3].tofieldname)) {
        d4.nowhereclause = true, i3 = null;
        break;
      }
    }
    if (null !== s6) {
      d4.ordered = true;
      for (let e5 = 0; e5 < this._decodedStatsfield.length; e5++) if (true === s6.scanForField(this._decodedStatsfield[e5].tofieldname)) {
        s6 = null, d4.ordered = false;
        break;
      }
      if (null !== s6) {
        for (const e5 of this._decodedGroupbyfield) if (null === e5.singlefield && true === s6.scanForField(e5.tofieldname)) {
          s6 = null, d4.ordered = false;
          break;
        }
      }
    }
    if (false !== this._candosimplegroupby && await this._parent._canDoAggregates(this.phsyicalgroupbyfields, this._decodedStatsfield, "", null, null)) {
      let e5 = null;
      i3 && (e5 = this._reformulateWhereClauseWithoutGroupByFields(i3));
      let t6 = null;
      s6 && (t6 = this._reformulateOrderClauseWithoutGroupByFields(s6));
      const r3 = await this._parent._getAggregatePagesDataSourceDefinition(this.phsyicalgroupbyfields, this._decodedStatsfield, "", null, e5, t6, this._internalObjectIdField);
      return this._checkCancelled(n5), l3 = true === d4.nowhereclause ? new t3(r3._candidates.slice().concat(r3._known.slice()), [], true === d4.ordered && r3._ordered, this._clonePageDefinition(r3.pagesDefinition)) : new t3(r3._candidates.slice(), r3._known.slice(), true === d4.ordered && r3._ordered, this._clonePageDefinition(r3.pagesDefinition)), l3;
    }
    let u2 = this._parent;
    if (this._adaptedFields.length > 0 && (u2 = new R3({ parentfeatureset: this._parent, adaptedFields: this._adaptedFields, extraFilter: null })), true === d4.nowhereclause) l3 = new t3(["GETPAGES"], [], false, { aggregatefeaturesetpagedefinition: true, resultOffset: 0, resultRecordCount: this._maxQuery, internal: { fullyResolved: false, workingItem: null, type: "manual", iterator: null, set: [], subfeatureset: new a3({ parentfeatureset: u2, orderbyclause: new e3(this.phsyicalgroupbyfields.join(",") + "," + this._parent.objectIdField + " ASC") }) } });
    else {
      let e5 = u2;
      if (null !== i3) {
        let t6 = null;
        i3 && (t6 = this._reformulateWhereClauseWithoutGroupByFields(i3)), e5 = new c4({ parentfeatureset: e5, whereclause: t6 });
      }
      l3 = new t3(["GETPAGES"], [], false, { aggregatefeaturesetpagedefinition: true, resultOffset: 0, resultRecordCount: this._maxQuery, internal: { fullyResolved: false, workingItem: null, type: "manual", iterator: null, set: [], subfeatureset: new a3({ parentfeatureset: e5, orderbyclause: new e3(this.phsyicalgroupbyfields.join(",") + "," + this._parent.objectIdField + " ASC") }) } });
    }
    return l3;
  }
  _reformulateWhereClauseWithoutStatsFields(e4) {
    for (const t5 of this._decodedStatsfield) e4 = p4(e4, t5.tofieldname, f4(t5.workingexpr, o2.Standardised), this._parent.getFieldsIndex());
    return e4;
  }
  _reformulateWhereClauseWithoutGroupByFields(e4) {
    for (const t5 of this._decodedGroupbyfield) t5.tofieldname !== t5.name && (e4 = p4(e4, t5.tofieldname, f4(t5.expression, o2.Standardised), this._parent.getFieldsIndex()));
    return e4;
  }
  _reformulateOrderClauseWithoutGroupByFields(e4) {
    const t5 = [];
    for (const i3 of this._decodedGroupbyfield) i3.tofieldname !== i3.name && t5.push({ field: i3.tofieldname, newfield: i3.name });
    return t5.length > 0 ? e4.replaceFields(t5) : e4;
  }
  _clonePageDefinition(e4) {
    return null === e4 ? null : true === e4.aggregatefeaturesetpagedefinition ? { aggregatefeaturesetpagedefinition: true, resultRecordCount: e4.resultRecordCount, resultOffset: e4.resultOffset, internal: e4.internal } : this._parent._clonePageDefinition(e4);
  }
  async _refineSetBlock(e4, t5, i3) {
    if (true === this._checkIfNeedToExpandCandidatePage(e4, this._maxQuery)) return await this._expandPagedSet(e4, this._maxQuery, 0, 0, i3), this._refineSetBlock(e4, t5, i3);
    this._checkCancelled(i3);
    const s6 = e4._candidates.length;
    this._refineKnowns(e4, t5);
    e4._candidates.length;
    return e4._candidates.length, e4;
  }
  _expandPagedSet(e4, t5, i3, s6, n5) {
    return this._expandPagedSetFeatureSet(e4, t5, i3, s6, n5);
  }
  async _getPhysicalPage(t5, i3, s6) {
    if (true === t5.pagesDefinition.aggregatefeaturesetpagedefinition) return this._sequentialGetPhysicalItem(t5, t5.pagesDefinition.resultRecordCount, s6, []);
    const n5 = await this._getAgregagtePhysicalPage(t5, i3, s6);
    for (const r3 of n5) {
      const t6 = { geometry: r3.geometry, attributes: {} }, i4 = {};
      for (const e4 in r3.attributes) i4[e4.toLowerCase()] = r3.attributes[e4];
      for (const e4 of this._decodedGroupbyfield) t6.attributes[e4.tofieldname] = i4[e4.name.toLowerCase()];
      for (const e4 of this._decodedStatsfield) t6.attributes[e4.tofieldname] = i4[e4.field.toLowerCase()];
      this._featureCache[t6.attributes[this.objectIdField]] = new d2(t6);
    }
    return n5.length;
  }
  _sequentialGetPhysicalItem(e4, t5, i3, s6) {
    return new Promise((n5, r3) => {
      null === e4.pagesDefinition.internal.iterator && (e4.pagesDefinition.internal.iterator = e4.pagesDefinition.internal.subfeatureset.iterator(i3)), true === e4.pagesDefinition.internal.fullyResolved || 0 === t5 ? n5(s6.length) : this._nextAggregateItem(e4, t5, i3, s6, (r4) => {
        null === r4 ? n5(s6.length) : (t5 -= 1, n5(this._sequentialGetPhysicalItem(e4, t5, i3, s6)));
      }, r3);
    });
  }
  _nextAggregateItem(e4, t5, s6, n5, r3, a6) {
    try {
      Pe(e4.pagesDefinition.internal.iterator.next()).then((i3) => {
        if (null === i3) if (null !== e4.pagesDefinition.internal.workingItem) {
          const t6 = this._calculateAndAppendAggregateItem(e4.pagesDefinition.internal.workingItem);
          n5.push(t6), e4.pagesDefinition.internal.workingItem = null, e4.pagesDefinition.internal.set.push(t6.attributes[this.objectIdField]), e4.pagesDefinition.internal.fullyResolved = true, r3(null);
        } else e4.pagesDefinition.internal.fullyResolved = true, r3(null);
        else {
          const o3 = this._generateAggregateHash(i3);
          if (null === e4.pagesDefinition.internal.workingItem) e4.pagesDefinition.internal.workingItem = { features: [i3], id: o3 };
          else {
            if (o3 !== e4.pagesDefinition.internal.workingItem.id) {
              const s7 = this._calculateAndAppendAggregateItem(e4.pagesDefinition.internal.workingItem);
              return n5.push(s7), e4.pagesDefinition.internal.workingItem = null, e4.pagesDefinition.internal.set.push(s7.attributes[this.objectIdField]), t5 -= 1, e4.pagesDefinition.internal.workingItem = { features: [i3], id: o3 }, void r3(s7);
            }
            e4.pagesDefinition.internal.workingItem.features.push(i3);
          }
          this._nextAggregateItem(e4, t5, s6, n5, r3, a6);
        }
      }, a6);
    } catch (o3) {
      a6(o3);
    }
  }
  _calculateFieldStat(e4, t5, i3) {
    const s6 = [];
    for (const n5 of e4.features) if (null !== t5.workingexpr) {
      const e5 = t5.workingexpr.calculateValue(n5);
      null !== e5 && (e5 instanceof i || e5 instanceof r ? s6.push(e5.toNumber()) : e5 instanceof i2 ? s6.push(e5.toMilliseconds()) : s6.push(e5));
    } else s6.push(null);
    i3.attributes[t5.tofieldname] = u(t5.typeofstat, [s6]);
  }
  _calculateAndAppendAggregateItem(t5) {
    const i3 = { attributes: {}, geometry: null };
    for (const e4 of this._decodedGroupbyfield) {
      const s7 = e4.singlefield ? t5.features[0].attributes[e4.singlefield] : R.convertValueToStorageFormat(e4.expression.calculateValue(t5.features[0]), e4.sqlType);
      i3.attributes[e4.tofieldname] = s7;
    }
    for (const e4 of this._decodedStatsfield) this._calculateFieldStat(t5, e4, i3);
    const s6 = [];
    for (let e4 = 0; e4 < this._decodedStatsfield.length; e4++) s6.push(this._calculateFieldStat(t5, this._decodedStatsfield[e4], i3));
    return this._featureCache[i3.attributes[this.objectIdField]] = new d2({ attributes: i3.attributes, geometry: i3.geometry }), i3;
  }
  _generateAggregateHash(e4) {
    let t5 = "";
    for (const i3 of this._decodedGroupbyfield) {
      const s6 = i3.singlefield ? e4.attributes[i3.singlefield] : i3.expression.calculateValue(e4);
      t5 += null == s6 ? ":" : ":" + s6.toString();
    }
    return x2(t5, n3.String);
  }
  async _stat() {
    return { calculated: false };
  }
  async getFeatureByObjectId() {
    return null;
  }
  static registerAction() {
    S3._featuresetFunctions.groupby = function(e4, t5) {
      return new _q({ parentfeatureset: this, groupbyfields: e4, statsfields: t5 });
    };
  }
};

// node_modules/@arcgis/core/arcade/featureset/actions/Top.js
var a5 = class _a extends S3 {
  constructor(t5) {
    super(t5), this._topnum = 0, this.declaredClass = "esri.arcade.featureset.actions.Top", this._countedin = 0, this._maxProcessing = 100, this._topnum = t5.topnum, this._parent = t5.parentfeatureset;
  }
  async _getSet(t5) {
    if (null === this._wset) {
      await this._ensureLoaded();
      const e4 = await this._parent._getSet(t5);
      return this._wset = new t3(e4._candidates.slice(), e4._known.slice(), false, this._clonePageDefinition(e4.pagesDefinition)), this._setKnownLength(this._wset) > this._topnum && (this._wset._known = this._wset._known.slice(0, this._topnum)), this._setKnownLength(this._wset) >= this._topnum && (this._wset._candidates = []), this._wset;
    }
    return this._wset;
  }
  _setKnownLength(t5) {
    return t5._known.length > 0 && "GETPAGES" === t5._known[t5._known.length - 1] ? t5._known.length - 1 : t5._known.length;
  }
  _isInFeatureSet(t5) {
    const e4 = this._parent._isInFeatureSet(t5);
    if (e4 === l.NotInFeatureSet) return e4;
    const n5 = this._idstates[t5];
    return n5 === l.InFeatureSet || n5 === l.NotInFeatureSet ? n5 : e4 === l.InFeatureSet && void 0 === n5 ? this._countedin < this._topnum ? (this._idstates[t5] = l.InFeatureSet, this._countedin++, l.InFeatureSet) : (this._idstates[t5] = l.NotInFeatureSet, l.NotInFeatureSet) : l.Unknown;
  }
  async _expandPagedSet(n5, s6, i3, a6, o3) {
    if (null === this._parent) throw new s4(t2.NotImplemented);
    if (s6 > this._topnum && (s6 = this._topnum), this._countedin >= this._topnum && n5.pagesDefinition.internal.set.length <= n5.pagesDefinition.resultOffset) {
      let t5 = n5._known.length;
      return t5 > 0 && "GETPAGES" === n5._known[t5 - 1] && (n5._known.length = t5 - 1), t5 = n5._candidates.length, t5 > 0 && "GETPAGES" === n5._candidates[t5 - 1] && (n5._candidates.length = t5 - 1), "success";
    }
    const r3 = await this._parent._expandPagedSet(n5, s6, i3, a6, o3);
    return this._setKnownLength(n5) > this._topnum && (n5._known.length = this._topnum), this._setKnownLength(n5) >= this._topnum && (n5._candidates.length = 0), r3;
  }
  async _getFeatures(t5, e4, n5, i3) {
    const a6 = [], o3 = this._maxQueryRate();
    if (true === this._checkIfNeedToExpandKnownPage(t5, o3)) return await this._expandPagedSet(t5, o3, 0, 0, i3), this._getFeatures(t5, e4, n5, i3);
    -1 !== e4 && void 0 === this._featureCache[e4] && a6.push(e4);
    let r3 = 0;
    for (let s6 = t5._lastFetchedIndex; s6 < t5._known.length && (r3++, r3 <= n5 && (t5._lastFetchedIndex += 1), !(void 0 === this._featureCache[t5._known[s6]] && (t5._known[s6] !== e4 && a6.push(t5._known[s6]), a6.length > o3))); s6++) ;
    if (0 === a6.length) return "success";
    const _ = new t3([], a6, false, null), h3 = Math.min(a6.length, n5);
    await this._parent._getFeatures(_, -1, h3, i3);
    for (let s6 = 0; s6 < h3; s6++) {
      const t6 = this._parent._featureFromCache(a6[s6]);
      void 0 !== t6 && (this._featureCache[a6[s6]] = t6);
    }
    return "success";
  }
  async _getFilteredSet(t5, e4, n5, i3, a6) {
    await this._ensureLoaded();
    const o3 = await this._getSet(a6);
    return new t3(o3._candidates.slice().concat(o3._known.slice()), [], false, this._clonePageDefinition(o3.pagesDefinition));
  }
  _refineKnowns(t5, e4) {
    let n5 = 0, s6 = null;
    const a6 = [];
    for (let o3 = 0; o3 < t5._candidates.length; o3++) {
      const r3 = this._isInFeatureSet(t5._candidates[o3]);
      if (r3 === l.InFeatureSet) {
        if (t5._known.push(t5._candidates[o3]), n5 += 1, null === s6 ? s6 = { start: o3, end: o3 } : s6.end === o3 - 1 ? s6.end = o3 : (a6.push(s6), s6 = { start: o3, end: o3 }), t5._known.length >= this._topnum) break;
      } else if (r3 === l.NotInFeatureSet) null === s6 ? s6 = { start: o3, end: o3 } : s6.end === o3 - 1 ? s6.end = o3 : (a6.push(s6), s6 = { start: o3, end: o3 }), n5 += 1;
      else if (r3 === l.Unknown) break;
      if (n5 >= e4) break;
    }
    null !== s6 && a6.push(s6);
    for (let i3 = a6.length - 1; i3 >= 0; i3--) t5._candidates.splice(a6[i3].start, a6[i3].end - a6[i3].start + 1);
    this._setKnownLength(t5) > this._topnum && (t5._known = t5._known.slice(0, this._topnum)), this._setKnownLength(t5) >= this._topnum && (t5._candidates = []);
  }
  async _stat() {
    return { calculated: false };
  }
  async _canDoAggregates() {
    return false;
  }
  static registerAction() {
    S3._featuresetFunctions.top = function(t5) {
      return new _a({ parentfeatureset: this, topnum: t5 });
    };
  }
  getFieldsIndex() {
    return this._parent.getFieldsIndex();
  }
};

// node_modules/@arcgis/core/arcade/featureset/sources/FeatureLayerDynamic.js
function v(e4) {
  if (0 === e4.length) throw new s4(t2.NeverReach);
  const t5 = [];
  for (let i3 = 0; i3 < e4.length; i3++) {
    const r4 = e4[i3], s6 = [`"${r4.name.replaceAll('"', '""')}" ${r4.asc ? ">" : "<"} @last_${i3}`];
    for (let t6 = 0; t6 < i3; t6++) {
      const r5 = e4[t6];
      s6.push(`"${r5.name.replaceAll('"', '""')}" = @last_${t6}`);
    }
    t5.push(s6.join(" AND "));
  }
  const r3 = t5.join(" OR ");
  return R.create(r3);
}
function T3(e4, t5) {
  null == e4.clause && (e4.clause = v(e4.keyFields));
  for (let r3 = 0; r3 < e4.keyFields.length; r3++) {
    const i3 = e4.keyFields[r3].name;
    e4.clause.parameters[`last_${r3}`] = t5.attributes[i3];
  }
}
var k3 = class _k extends S3 {
  constructor(e4) {
    super(e4), this.declaredClass = "esri.arcade.featureset.sources.FeatureLayerDynamic", this._removeGeometry = false, this._overrideFields = null, this.formulaCredential = null, this._pageJustIds = false, this._requestStandardised = false, this._useDefinitionExpression = true, e4.spatialReference && (this.spatialReference = e4.spatialReference), this._transparent = true, this._maxProcessing = 1e3, this._layer = e4.layer, this._wset = null, void 0 !== e4.outFields && (this._overrideFields = e4.outFields), void 0 !== e4.includeGeometry && (this._removeGeometry = false === e4.includeGeometry);
  }
  _maxQueryRate() {
    return O;
  }
  end() {
    return this._layer;
  }
  optimisePagingFeatureQueries(e4) {
    this._pageJustIds = e4;
  }
  get urlQueryPath() {
    return this._layer.parsedUrl.path || "";
  }
  convertQueryToLruCacheKey(e4) {
    const t5 = this.urlQueryPath + "," + J(e4.toJSON());
    return x2(t5, n3.String);
  }
  async loadImpl() {
    return true === this._layer.loaded ? (this._initialiseFeatureSet(), this) : (await this._layer.load(), this._initialiseFeatureSet(), this);
  }
  _initialiseFeatureSet() {
    if (null == this.spatialReference && (this.spatialReference = this._layer.spatialReference), this.geometryType = this._layer.geometryType ?? "", this.fields = this._layer.fields.slice(), this.hasZ = true === this._layer?.capabilities?.data?.supportsZ, this.hasM = true === this._layer?.capabilities?.data?.supportsM, null !== this._overrideFields) if (1 === this._overrideFields.length && "*" === this._overrideFields[0]) this._overrideFields = null;
    else {
      const e4 = [], t5 = [];
      for (const r3 of this.fields) if ("oid" === r3.type) e4.push(r3), t5.push(r3.name);
      else for (const i3 of this._overrideFields) if (i3.toLowerCase() === r3.name.toLowerCase()) {
        e4.push(r3), t5.push(r3.name);
        break;
      }
      this.fields = e4, this._overrideFields = t5;
    }
    if (this._layer.source && this._layer.source.sourceJSON) {
      const e4 = this._layer.source.sourceJSON.currentVersion;
      true === this._layer.source.sourceJSON.useStandardizedQueries ? (this._databaseType = o2.StandardisedNoInterval, null != e4 && e4 >= 10.61 && (this._databaseType = o2.Standardised)) : null != e4 && (e4 >= 10.5 && (this._databaseType = o2.StandardisedNoInterval, this._requestStandardised = true), e4 >= 10.61 && (this._databaseType = o2.Standardised));
    }
    this.objectIdField = this._layer.objectIdField;
    for (const e4 of this.fields) "global-id" === e4.type && (this.globalIdField = e4.name);
    this.subtypeField = this._layer.subtypeField ?? "", this.subtypes = this._layer.subtypes, this.typeIdField = ("typeIdField" in this._layer ? this._layer.typeIdField : null) ?? "", this.types = "types" in this._layer ? this._layer.types : null;
  }
  _isInFeatureSet() {
    return l.InFeatureSet;
  }
  async _refineSetBlock(e4) {
    return e4;
  }
  _candidateIdTransform(e4) {
    return e4;
  }
  async _getSet(e4) {
    if (null === this._wset) {
      await this._ensureLoaded();
      const t5 = await this._getFilteredSet("", null, null, null, e4);
      return this._wset = t5, t5;
    }
    return this._wset;
  }
  async _runDatabaseProbe(e4) {
    await this._ensureLoaded();
    const t5 = new R2();
    this.datesInUnknownTimezone && (t5.timeReferenceUnknownClient = true), t5.where = e4.replace("OBJECTID", this._layer.objectIdField);
    try {
      return await this._layer.queryObjectIds(t5), true;
    } catch (r3) {
      return false;
    }
  }
  _canUsePagination() {
    return !(!this._layer.capabilities || !this._layer.capabilities.query || true !== this._layer.capabilities.query.supportsPagination);
  }
  _cacheableFeatureSetSourceKey() {
    return this._layer.url;
  }
  get gdbVersion() {
    return this._layer && this._layer.capabilities && this._layer.capabilities.data && this._layer.capabilities.data.isVersioned ? this._layer.gdbVersion || "SDE.DEFAULT" : "";
  }
  nativeCapabilities() {
    return { title: this._layer.title ?? "", source: this, canQueryRelated: true, capabilities: this._layer.capabilities, databaseType: this._databaseType, requestStandardised: this._requestStandardised };
  }
  _createQuery() {
    const e4 = this._layer.createQuery();
    return e4.returnZ = this.hasZ, e4.returnM = this.hasM, this.datesInUnknownTimezone && (e4.timeReferenceUnknownClient = true), this._requestStandardised && (e4.sqlFormat = "standard"), this._useDefinitionExpression ? "subtype-group" === this._layer.type && (e4.where = this._layer.definitionExpression) : e4.where = null, e4;
  }
  executeQuery(e4, t5) {
    const r3 = "execute" === t5 ? this._layer.queryFeatures.bind(this._layer) : "executeForCount" === t5 ? this._layer.queryFeatureCount.bind(this._layer) : this._layer.queryObjectIds.bind(this._layer);
    let i3 = null;
    if (this.recentlyUsedQueries) {
      const t6 = this.convertQueryToLruCacheKey(e4);
      i3 = this.recentlyUsedQueries.getFromCache(t6), null === i3 && (i3 = r3(e4), this.recentlyUsedQueries.addToCache(t6, i3), i3 = i3.catch((e5) => {
        throw this.recentlyUsedQueries?.removeFromCache(t6), e5;
      }));
    }
    return this.featureSetQueryInterceptor && this.featureSetQueryInterceptor.preLayerQueryCallback({ layer: this._layer, query: e4, method: t5 }), null === i3 && (i3 = r3(e4)), i3;
  }
  async _getFilteredSet(e4, t5, r3, i3, s6) {
    const a6 = await this.databaseType();
    if (this.isTable() && t5 && null !== e4 && "" !== e4) {
      return new t3([], [], true, null);
    }
    if (this._canUsePagination()) return this._getFilteredSetUsingPaging(e4, t5, r3, i3, s6);
    let n5 = "", l3 = false;
    null !== i3 && this._layer.capabilities && this._layer.capabilities.query && true === this._layer.capabilities.query.supportsOrderBy && (n5 = i3.constructClause(), l3 = true);
    const u2 = this._createQuery();
    u2.where = r2(u2.where, null === r3 ? null === t5 ? "1=1" : "" : f4(r3, a6)), u2.spatialRelationship = this._makeRelationshipEnum(e4), u2.outSpatialReference = this.spatialReference, u2.orderByFields = "" !== n5 ? n5.split(",") : null, u2.geometry = null === t5 ? null : t5, u2.relationParameter = this._makeRelationshipParam(e4);
    let d4 = await this.executeQuery(u2, "executeForIds");
    null === d4 && (d4 = []), this._checkCancelled(s6);
    return new t3([], d4, l3, null);
  }
  _expandPagedSet(e4, t5, r3, i3, s6) {
    return this._expandPagedSetFeatureSet(e4, t5, r3, i3, s6);
  }
  async _getFilteredSetUsingPaging(e4, t5, r3, i3, s6) {
    let a6 = "", n5 = false;
    null !== i3 && this._layer.capabilities && this._layer.capabilities.query && true === this._layer.capabilities.query.supportsOrderBy && (a6 = i3.constructClause(), n5 = true);
    const l3 = await this.databaseType(), u2 = null === r3 ? null === t5 ? "1=1" : "" : f4(r3, l3);
    let d4 = this._maxQueryRate();
    const c5 = this._layer.capabilities?.query.maxRecordCount;
    null != c5 && c5 < d4 && (d4 = c5);
    let h3 = null;
    if (true === this._pageJustIds) h3 = new t3([], ["GETPAGES"], n5, { spatialRel: this._makeRelationshipEnum(e4), relationParam: this._makeRelationshipParam(e4), outFields: this._layer.objectIdField, resultRecordCount: d4, resultOffset: 0, geometry: null === t5 ? null : t5, where: u2, orderByFields: a6, returnGeometry: false, returnIdsOnly: "false", internal: { set: [], lastRetrieved: 0, lastPage: 0, fullyResolved: false } });
    else {
      let r4 = true;
      true === this._removeGeometry && (r4 = false);
      const i4 = this._overrideFields ?? this._fieldsIncludingObjectId(["*"]);
      h3 = new t3([], ["GETPAGES"], n5, { spatialRel: this._makeRelationshipEnum(e4), relationParam: this._makeRelationshipParam(e4), outFields: i4.join(","), resultRecordCount: d4, resultOffset: 0, geometry: null === t5 ? null : t5, where: u2, orderByFields: a6, returnGeometry: r4, returnIdsOnly: "false", internal: { set: [], lastRetrieved: 0, lastPage: 0, fullyResolved: false } });
    }
    return await this._expandPagedSet(h3, d4, 0, 1, s6), h3;
  }
  _clonePageDefinition(e4) {
    return null === e4 ? null : true !== e4.groupbypage ? { groupbypage: false, spatialRel: e4.spatialRel, relationParam: e4.relationParam, outFields: e4.outFields, resultRecordCount: e4.resultRecordCount, resultOffset: e4.resultOffset, geometry: e4.geometry, where: e4.where, orderByFields: e4.orderByFields, returnGeometry: e4.returnGeometry, returnIdsOnly: e4.returnIdsOnly, internal: e4.internal } : { groupbypage: true, spatialRel: e4.spatialRel, relationParam: e4.relationParam, outFields: e4.outFields, resultRecordCount: e4.resultRecordCount, useOIDpagination: e4.useOIDpagination, generatedOid: e4.generatedOid, groupByFieldsForStatistics: e4.groupByFieldsForStatistics, resultOffset: e4.resultOffset, outStatistics: e4.outStatistics, geometry: e4.geometry, where: e4.where, orderByFields: e4.orderByFields, returnGeometry: e4.returnGeometry, returnIdsOnly: e4.returnIdsOnly, internal: e4.internal };
  }
  async _getPhysicalPage(e4, t5, r3) {
    const i3 = e4.pagesDefinition.internal.lastRetrieved, s6 = i3, a6 = e4.pagesDefinition.internal.lastPage, n5 = this._createQuery();
    n5.spatialRelationship = e4.pagesDefinition.spatialRel, n5.relationParameter = e4.pagesDefinition.relationParam, n5.outFields = e4.pagesDefinition.outFields.split(","), n5.num = e4.pagesDefinition.resultRecordCount, n5.start = e4.pagesDefinition.internal.lastPage, n5.geometry = e4.pagesDefinition.geometry, n5.where = r2(n5.where, e4.pagesDefinition.where), n5.orderByFields = "" !== e4.pagesDefinition.orderByFields ? e4.pagesDefinition.orderByFields.split(",") : null, n5.returnGeometry = e4.pagesDefinition.returnGeometry, n5.outSpatialReference = this.spatialReference;
    const l3 = await this.executeQuery(n5, "execute");
    if (this._checkCancelled(r3), e4.pagesDefinition.internal.lastPage !== a6) return "done";
    const o3 = this._layer.objectIdField;
    for (let u2 = 0; u2 < l3.features.length; u2++) e4.pagesDefinition.internal.set[s6 + u2] = l3.features[u2].attributes[o3];
    if (false === this._pageJustIds) for (let u2 = 0; u2 < l3.features.length; u2++) this._featureCache[l3.features[u2].attributes[o3]] = l3.features[u2];
    return (void 0 === l3.exceededTransferLimit && l3.features.length !== e4.pagesDefinition.resultRecordCount || false === l3.exceededTransferLimit) && (e4.pagesDefinition.internal.fullyResolved = true), e4.pagesDefinition.internal.lastRetrieved = i3 + l3.features.length, e4.pagesDefinition.internal.lastPage += e4.pagesDefinition.resultRecordCount, "done";
  }
  _fieldsIncludingObjectId(e4) {
    if (null === e4) return [this.objectIdField];
    const t5 = e4.slice();
    if (t5.includes("*")) return t5;
    let r3 = false;
    for (const i3 of t5) if (i3.toUpperCase() === this.objectIdField.toUpperCase()) {
      r3 = true;
      break;
    }
    return false === r3 && t5.push(this.objectIdField), t5;
  }
  async _getFeatures(e4, t5, r3, i3) {
    const s6 = [];
    if (-1 !== t5 && void 0 === this._featureCache[t5] && s6.push(t5), true === this._checkIfNeedToExpandKnownPage(e4, this._maxProcessingRate())) return await this._expandPagedSet(e4, this._maxProcessingRate(), 0, 0, i3), this._getFeatures(e4, t5, r3, i3);
    let l3 = 0;
    for (let a6 = e4._lastFetchedIndex; a6 < e4._known.length; a6++) {
      if (e4._lastFetchedIndex += 1, l3++, void 0 === this._featureCache[e4._known[a6]]) {
        let r4 = false;
        if (null !== this._layer._mode && void 0 !== this._layer._mode) {
          const t6 = this._layer._mode;
          if (void 0 !== t6._featureMap[e4._known[a6]]) {
            const i4 = t6._featureMap[e4._known[a6]];
            null !== i4 && (r4 = true, this._featureCache[e4._known[a6]] = i4);
          }
        }
        if (false === r4 && (e4._known[a6] !== t5 && s6.push(e4._known[a6]), s6.length >= this._maxProcessingRate() - 1)) break;
      }
      if (l3 >= r3 && 0 === s6.length) break;
    }
    if (0 === s6.length) return "success";
    const o3 = this._createQuery();
    o3.objectIds = s6, o3.outFields = this._overrideFields ?? this._fieldsIncludingObjectId(["*"]), o3.returnGeometry = true, true === this._removeGeometry && (o3.returnGeometry = false), o3.outSpatialReference = this.spatialReference;
    const u2 = await this.executeQuery(o3, "execute");
    if (this._checkCancelled(i3), void 0 !== u2.error) throw new s4(t2.RequestFailed, { reason: u2.error });
    const d4 = this._layer.objectIdField;
    for (let a6 = 0; a6 < u2.features.length; a6++) this._featureCache[u2.features[a6].attributes[d4]] = u2.features[a6];
    return "success";
  }
  async _getDistinctPages(e4, t5, r3, i3, s6, l3, o3, u2, d4) {
    await this._ensureLoaded();
    const c5 = await this.databaseType();
    let h3 = r3.parseTree.column;
    const p6 = this._layer.fields ?? [];
    for (let a6 = 0; a6 < p6.length; a6++) if (p6[a6].name.toLowerCase() === h3.toLowerCase()) {
      h3 = p6[a6].name;
      break;
    }
    const f5 = this._createQuery();
    f5.where = r2(f5.where, null === l3 ? null === s6 ? "1=1" : "" : f4(l3, c5)), f5.spatialRelationship = this._makeRelationshipEnum(i3), f5.relationParameter = this._makeRelationshipParam(i3), f5.geometry = null === s6 ? null : s6, f5.returnDistinctValues = true, f5.returnGeometry = false, f5.outFields = [h3];
    const g4 = await this.executeQuery(f5, "execute");
    if (this._checkCancelled(d4), !g4.hasOwnProperty("features")) throw new s4(t2.InvalidStatResponse);
    let _ = false;
    for (let a6 = 0; a6 < p6.length; a6++) if (p6[a6].name === h3) {
      "date" === p6[a6].type && (_ = true);
      break;
    }
    for (let a6 = 0; a6 < g4.features.length; a6++) {
      if (_) {
        const e5 = g4.features[a6].attributes[h3];
        null !== e5 ? u2.push(new Date(e5)) : u2.push(e5);
      } else u2.push(g4.features[a6].attributes[h3]);
      if (u2.length >= o3) break;
    }
    if (0 === g4.features.length) return u2;
    if (g4.features.length === this._layer.capabilities?.query.maxRecordCount && u2.length < o3) {
      return { calculated: true, result: await this._getDistinctPages(e4 + g4.features.length, t5, r3, i3, s6, l3, o3, u2, d4) };
    }
    return u2;
  }
  async _distinctStat(e4, t5, r3, i3, s6, a6, n5) {
    return { calculated: true, result: await this._getDistinctPages(0, e4, t5, r3, i3, s6, a6, [], n5) };
  }
  isTable() {
    return this._layer.isTable || null === this._layer.geometryType || "table" === this._layer.type || "" === this._layer.geometryType || "esriGeometryNull" === this._layer.geometryType;
  }
  async _countstat(e4, t5, r3, i3) {
    const s6 = await this.databaseType();
    if (this.isTable() && r3 && null !== t5 && "" !== t5) return { calculated: true, result: 0 };
    const a6 = this._createQuery();
    a6.where = r2(a6.where, null === i3 ? null === r3 ? "1=1" : "" : f4(i3, s6)), a6.spatialRelationship = this._makeRelationshipEnum(t5), a6.relationParameter = this._makeRelationshipParam(t5), a6.geometry = null === r3 ? null : r3, a6.returnGeometry = false;
    return { calculated: true, result: await this.executeQuery(a6, "executeForCount") };
  }
  async _stats(e4, t5, r3, i3, s6, l3, o3) {
    await this._ensureLoaded();
    const u2 = this._layer.capabilities?.query, d4 = !!u2?.supportsSqlExpression, c5 = !!u2?.supportsStatistics, h3 = !!u2?.supportsDistinct;
    if ("count" === e4) return h3 ? this._countstat(e4, r3, i3, s6) : { calculated: false };
    if (false === c5 || false === O2(t5) && false === d4 || false === t5.isStandardized) return "" !== r3 || null !== s6 ? { calculated: false } : this._manualStat(e4, t5, l3, o3);
    if ("distinct" === e4) return false === h3 ? "" !== r3 || null !== s6 ? { calculated: false } : this._manualStat(e4, t5, l3, o3) : this._distinctStat(e4, t5, r3, i3, s6, l3, o3);
    const p6 = await this.databaseType();
    if (this.isTable() && i3 && null !== r3 && "" !== r3) return { calculated: true, result: null };
    const _ = this._createQuery();
    _.where = r2(_.where, null === s6 ? null === i3 ? "1=1" : "" : f4(s6, p6)), _.spatialRelationship = this._makeRelationshipEnum(r3), _.relationParameter = this._makeRelationshipParam(r3), _.geometry = null === i3 ? null : i3;
    const m4 = new p2();
    m4.statisticType = w2(e4), m4.onStatisticField = f4(t5, p6), m4.outStatisticFieldName = "ARCADE_STAT_RESULT", _.returnGeometry = false;
    let w3 = "ARCADE_STAT_RESULT";
    _.outStatistics = [m4];
    const F3 = await this.executeQuery(_, "execute");
    if (!F3.hasOwnProperty("features") || 0 === F3.features.length) throw new s4(t2.InvalidStatResponse);
    let S4 = false;
    const b3 = F3.fields ?? [];
    for (let a6 = 0; a6 < b3.length; a6++) if ("ARCADE_STAT_RESULT" === b3[a6].name.toUpperCase()) {
      w3 = b3[a6].name, "date" === b3[a6].type && (S4 = true);
      break;
    }
    if (S4) {
      let e5 = F3.features[0].attributes[w3];
      return null !== e5 && (e5 = new Date(F3.features[0].attributes[w3])), { calculated: true, result: e5 };
    }
    return { calculated: true, result: F3.features[0].attributes[w3] };
  }
  _stat(e4, t5, r3, i3, s6, a6, n5) {
    return this._stats(e4, t5, r3, i3, s6, a6, n5);
  }
  async _canDoAggregates(e4, t5) {
    await this._ensureLoaded();
    let r3 = false;
    const i3 = this._layer.capabilities?.query, s6 = true === i3?.supportsSqlExpression;
    if (null != i3 && true === i3.supportsStatistics && true === i3.supportsOrderBy && (r3 = true), r3) for (let a6 = 0; a6 < t5.length - 1; a6++) (false === t5[a6].workingexpr?.isStandardized || false === O2(t5[a6].workingexpr) && false === s6) && (r3 = false);
    return false !== r3;
  }
  _makeRelationshipEnum(e4) {
    if (e4.includes("esriSpatialRelRelation")) return "relation";
    switch (e4) {
      case "esriSpatialRelRelation":
        return "relation";
      case "esriSpatialRelIntersects":
        return "intersects";
      case "esriSpatialRelContains":
        return "contains";
      case "esriSpatialRelOverlaps":
        return "overlaps";
      case "esriSpatialRelWithin":
        return "within";
      case "esriSpatialRelTouches":
        return "touches";
      case "esriSpatialRelCrosses":
        return "crosses";
      case "esriSpatialRelEnvelopeIntersects":
        return "envelope-intersects";
    }
    return e4;
  }
  _makeRelationshipParam(e4) {
    return e4.includes("esriSpatialRelRelation") ? e4.split(":")[1] : "";
  }
  async _getAggregatePagesDataSourceDefinition(e4, t5, r3, i3, s6, a6, n5) {
    await this._ensureLoaded();
    const l3 = await this.databaseType();
    let u2 = null;
    if (!this._layer.capabilities.query.supportsPaginationOnAggregatedQueries) {
      const t6 = this.getFieldsIndex();
      u2 = { keyFields: e4.map((e5, r4) => ({ name: t6.normalizeFieldName(e5) ?? e5, asc: null == a6 || 1 === a6._directions[r4] })) };
    }
    let d4 = "", c5 = false;
    null != a6 && true === this._layer.capabilities?.query?.supportsOrderBy && (null == u2 || s(e4, 0, e4.length, a6._fields, 0, Math.min(a6._fields.length, e4.length), (e5, t6) => e5.toLowerCase() === t6.toLowerCase())) && (d4 = a6.constructClause(), c5 = true), "" === d4 && (d4 = e4.join(","));
    const h3 = [];
    for (let o3 = 0; o3 < t5.length; o3++) {
      const e5 = new p2();
      e5.onStatisticField = null !== t5[o3].workingexpr ? f4(t5[o3].workingexpr, l3) : "", e5.outStatisticFieldName = t5[o3].field, e5.statisticType = t5[o3].toStatisticsName(), h3.push(e5);
    }
    let p6 = this._maxQueryRate();
    const f5 = this._layer.capabilities?.query.maxRecordCount;
    null != f5 && f5 < p6 && (p6 = f5);
    const g4 = null === s6 ? null === i3 ? "1=1" : "" : f4(s6, l3);
    return new t3([], ["GETPAGES"], c5, { groupbypage: true, spatialRel: this._makeRelationshipEnum(r3), relationParam: this._makeRelationshipParam(r3), outFields: ["*"], useOIDpagination: false, generatedOid: n5, resultRecordCount: p6, resultOffset: 0, groupByFieldsForStatistics: e4, outStatistics: h3, geometry: null === i3 ? null : i3, where: g4, orderByFields: d4, returnGeometry: false, returnIdsOnly: false, internal: { lastMaxId: -1, set: [], lastRetrieved: 0, lastPage: 0, fullyResolved: false, keysetPagination: u2 } });
  }
  async _getAgregagtePhysicalPage(t5, r3, i3) {
    let s6 = t5.pagesDefinition.where;
    if (true === t5.pagesDefinition.useOIDpagination && (s6 = r2(s6, t5.pagesDefinition.generatedOid + ">" + t5.pagesDefinition.internal.lastMaxId.toString())), null != t5.pagesDefinition.internal.keysetPagination?.clause) {
      if (!this._layer.capabilities.query.supportsOrderBy) throw new s4(t2.NotImplemented);
      s6 = r2(s6, f4(t5.pagesDefinition.internal.keysetPagination.clause, await this.databaseType()));
    }
    const l3 = t5.pagesDefinition.internal.lastRetrieved, o3 = l3, u2 = t5.pagesDefinition.internal.lastPage, d4 = this._createQuery();
    if (d4.where = r2(d4.where, s6), d4.spatialRelationship = t5.pagesDefinition.spatialRel, d4.relationParameter = t5.pagesDefinition.relationParam, d4.outFields = t5.pagesDefinition.outFields, d4.outStatistics = t5.pagesDefinition.outStatistics, d4.geometry = t5.pagesDefinition.geometry, d4.groupByFieldsForStatistics = t5.pagesDefinition.groupByFieldsForStatistics, d4.num = t5.pagesDefinition.resultRecordCount, d4.start = t5.pagesDefinition.internal.lastPage, d4.returnGeometry = t5.pagesDefinition.returnGeometry, d4.orderByFields = "" !== t5.pagesDefinition.orderByFields ? t5.pagesDefinition.orderByFields.split(",") : null, this.isTable() && d4.geometry && d4.spatialRelationship) return [];
    const c5 = await this.executeQuery(d4, "execute");
    if (this._checkCancelled(i3), !c5.hasOwnProperty("features")) throw new s4(t2.InvalidStatResponse);
    const h3 = [];
    if (t5.pagesDefinition.internal.lastPage !== u2) return [];
    c5.features.length > 0 && void 0 === c5.features[0].attributes[t5.pagesDefinition.generatedOid] && (t5.pagesDefinition.generatedOid = t5.pagesDefinition.generatedOid.toLowerCase());
    for (let e4 = 0; e4 < c5.features.length; e4++) t5.pagesDefinition.internal.set[o3 + e4] = c5.features[e4].attributes[t5.pagesDefinition.generatedOid];
    for (let a6 = 0; a6 < c5.features.length; a6++) h3.push(new d2({ attributes: c5.features[a6].attributes, geometry: null }));
    return t5.pagesDefinition.internal.keysetPagination ? 0 !== c5.features.length && c5.exceededTransferLimit ? T3(t5.pagesDefinition.internal.keysetPagination, h3.at(-1)) : t5.pagesDefinition.internal.fullyResolved = true : true === t5.pagesDefinition.useOIDpagination ? 0 === c5.features.length ? t5.pagesDefinition.internal.fullyResolved = true : t5.pagesDefinition.internal.lastMaxId = c5.features[c5.features.length - 1].attributes[t5.pagesDefinition.generatedOid] : (void 0 === c5.exceededTransferLimit && c5.features.length !== t5.pagesDefinition.resultRecordCount || false === c5.exceededTransferLimit) && (t5.pagesDefinition.internal.fullyResolved = true), t5.pagesDefinition.internal.lastRetrieved = l3 + c5.features.length, t5.pagesDefinition.internal.lastPage += t5.pagesDefinition.resultRecordCount, h3;
  }
  static create(e4, t5, r3, i3, s6) {
    const a6 = new Xe({ url: e4, outFields: null === t5 ? ["*"] : t5 });
    return new _k({ layer: a6, spatialReference: r3, lrucache: i3, interceptor: s6 });
  }
  relationshipMetaData() {
    return this._layer && this._layer.source && this._layer.source.sourceJSON?.relationships ? this._layer.source.sourceJSON.relationships : [];
  }
  serviceUrl() {
    return E(this._layer.parsedUrl.path);
  }
  async queryAttachments(e4, t5, r3, a6, n5) {
    function l3(e5) {
      const t6 = e5.capabilities;
      return t6?.data.supportsAttachment && t6?.operations.supportsQueryAttachments;
    }
    const o3 = this._layer;
    if (l3(o3)) {
      const l4 = { objectIds: [e4], returnMetadata: n5 };
      (t5 && t5 > 0 || r3 && r3 > 0) && (l4.size = [t5 && t5 > 0 ? t5 : 0, r3 && r3 > 0 ? r3 : t5 + 1]), a6 && a6.length > 0 && (l4.attachmentTypes = a6), this.featureSetQueryInterceptor && this.featureSetQueryInterceptor.preLayerQueryCallback({ layer: o3, query: l4, method: "attachments" });
      const u2 = await o3.queryAttachments(new p3(l4)), d4 = [];
      return u2 && u2[e4] && u2[e4].forEach((t6) => {
        const r4 = this._layer.parsedUrl.path + "/" + e4.toString() + "/attachments/" + t6.id.toString();
        let a7 = null;
        n5 && t6.exifInfo && (a7 = j.convertJsonToArcade(t6.exifInfo, "system", true)), d4.push(new t(t6.id, t6.name, t6.contentType, t6.size, r4, a7, t6.keywords ?? null));
      }), d4;
    }
    return [];
  }
  async queryRelatedFeatures(t5) {
    const i3 = { f: "json", relationshipId: t5.relationshipId.toString(), definitionExpression: t5.where, outFields: t5.outFields?.join(","), returnGeometry: t5.returnGeometry.toString() };
    void 0 !== t5.resultOffset && null !== t5.resultOffset && (i3.resultOffset = t5.resultOffset.toString()), void 0 !== t5.resultRecordCount && null !== t5.resultRecordCount && (i3.resultRecordCount = t5.resultRecordCount.toString()), t5.orderByFields && (i3.orderByFields = t5.orderByFields.join(",")), t5.objectIds && t5.objectIds.length > 0 && (i3.objectIds = t5.objectIds.join(",")), t5.outSpatialReference && (i3.outSR = c(t5.outSpatialReference)), this.featureSetQueryInterceptor && this.featureSetQueryInterceptor.preRequestCallback({ layer: this._layer, queryPayload: i3, method: "relatedrecords", url: this._layer.parsedUrl.path + "/queryRelatedRecords" });
    const s6 = await H(this._layer.parsedUrl.path + "/queryRelatedRecords", { responseType: "json", query: i3 });
    if (s6.data) {
      const t6 = {}, r3 = s6.data;
      if (r3?.relatedRecordGroups) {
        const i4 = r3.spatialReference;
        for (const s7 of r3.relatedRecordGroups) {
          const a6 = s7.objectId, n5 = [];
          for (const t7 of s7.relatedRecords) {
            t7.geometry && (t7.geometry.spatialReference = i4);
            const r4 = new d2({ geometry: t7.geometry ? f2(t7.geometry) : null, attributes: t7.attributes });
            n5.push(r4);
          }
          t6[a6] = { features: n5, exceededTransferLimit: true === r3.exceededTransferLimit };
        }
      }
      return t6;
    }
    throw new s4(t2.InvalidRequest);
  }
  async getFeatureByObjectId(e4, t5) {
    const r3 = this._createQuery();
    r3.outFields = t5, r3.returnGeometry = false, r3.outSpatialReference = this.spatialReference, r3.where = r2(r3.where, this.objectIdField + "=" + e4.toString()), this.featureSetQueryInterceptor && this.featureSetQueryInterceptor.preLayerQueryCallback({ layer: this._layer, query: r3, method: "execute" });
    const i3 = await this._layer.queryFeatures(r3);
    return 1 === i3.features.length ? i3.features[0] : null;
  }
  async getIdentityUser() {
    await this.load();
    const e4 = s2?.findCredential(this._layer.url);
    return e4 ? e4.userId : null;
  }
  async getOwningSystemUrl() {
    await this.load();
    const e4 = s2?.findServerInfo(this._layer.url);
    if (e4) return e4.owningSystemUrl;
    let i3 = this._layer.url;
    const s6 = i3.toLowerCase().indexOf("/rest/services");
    if (i3 = s6 > -1 ? i3.slice(0, s6) : i3, i3) {
      i3 += "/rest/info";
      try {
        const e5 = await H(i3, { query: { f: "json" } });
        let t5 = "";
        return e5.data?.owningSystemUrl && (t5 = e5.data.owningSystemUrl), t5;
      } catch (a6) {
        return "";
      }
    }
    return "";
  }
  getDataSourceFeatureSet() {
    const e4 = new _k({ layer: this._layer, spatialReference: this.spatialReference ?? void 0, outFields: this._overrideFields ?? void 0, includeGeometry: !this._removeGeometry, lrucache: this.recentlyUsedQueries ?? void 0, interceptor: this.featureSetQueryInterceptor ?? void 0 });
    return e4._useDefinitionExpression = false, e4;
  }
  get preferredTimeZone() {
    return this._layer.preferredTimeZone ?? null;
  }
  get dateFieldsTimeZone() {
    return this._layer.dateFieldsTimeZone ?? null;
  }
  get datesInUnknownTimezone() {
    return this._layer.datesInUnknownTimezone ?? false;
  }
  get editFieldsInfo() {
    return this._layer.editFieldsInfo ?? null;
  }
  get timeInfo() {
    return this._layer.timeInfo ?? null;
  }
  async getFeatureSetInfo() {
    if (this.fsetInfo) return this.fsetInfo;
    let e4 = null, t5 = "serviceItemId" in this._layer ? this._layer.serviceItemId : null;
    const i3 = this._layer.parsedUrl?.path ?? null;
    if (i3) {
      const s7 = await H(i3, { responseType: "json", query: { f: "json" } });
      e4 = s7?.data?.name ?? null, t5 = s7?.data?.serviceItemId ?? null;
    }
    const s6 = this._layer.title && null !== (this._layer.parent ?? null);
    return this.featureSetInfo = { layerId: this._layer.layerId, layerName: "" === e4 ? null : e4, itemId: "" === t5 ? null : t5, serviceLayerUrl: "" === i3 ? null : i3, webMapLayerId: s6 ? this._layer.id ?? null : null, webMapLayerTitle: s6 ? this._layer.title ?? null : null, className: null, objectClassId: null }, this.fsetInfo;
  }
};

// node_modules/@arcgis/core/arcade/featureset/sources/FeatureLayerMemory.js
var p5 = class _p extends S3 {
  constructor(e4) {
    super(e4), this.declaredClass = "esri.arcade.featureset.sources.FeatureLayerMemory", this._removeGeometry = false, this._overrideFields = null, this._forceIsTable = false, e4.spatialReference && (this.spatialReference = e4.spatialReference), this._transparent = true, this._maxProcessing = 1e3, this._layer = e4.layer, this._wset = null, true === e4.isTable && (this._forceIsTable = true), void 0 !== e4.outFields && (this._overrideFields = e4.outFields), void 0 !== e4.includeGeometry && (this._removeGeometry = false === e4.includeGeometry);
  }
  _maxQueryRate() {
    return O;
  }
  end() {
    return this._layer;
  }
  optimisePagingFeatureQueries() {
  }
  async loadImpl() {
    return true === this._layer.loaded ? (this._initialiseFeatureSet(), this) : (await this._layer.load(), this._initialiseFeatureSet(), this);
  }
  get gdbVersion() {
    return "";
  }
  _initialiseFeatureSet() {
    if (null == this.spatialReference && (this.spatialReference = this._layer.spatialReference), this.geometryType = this._layer.geometryType ?? "", this.fields = this._layer.fields.slice(), null !== this._overrideFields) if (1 === this._overrideFields.length && "*" === this._overrideFields[0]) this._overrideFields = null;
    else {
      const e4 = [], t5 = [];
      for (const s6 of this.fields) if ("oid" === s6.type || this._layer.objectIdField === s6.name) e4.push(s6), t5.push(s6.name);
      else for (const r3 of this._overrideFields) if (r3.toLowerCase() === s6.name.toLowerCase()) {
        e4.push(s6), t5.push(s6.name);
        break;
      }
      this.fields = e4, this._overrideFields = t5;
    }
    this.objectIdField = this._layer.objectIdField;
    for (const e4 of this.fields) "global-id" === e4.type && (this.globalIdField = e4.name);
    this._databaseType = o2.Standardised, this.hasZ = true === this._layer?.capabilities?.data?.supportsZ, this.hasM = true === this._layer?.capabilities?.data?.supportsM, this.subtypeField = ("subtypeField" in this._layer ? this._layer.subtypeField : null) ?? "", this.subtypes = "subtypes" in this._layer ? this._layer.subtypes : null, this.typeIdField = ("typeIdField" in this._layer ? this._layer.typeIdField : null) ?? "", this.types = "types" in this._layer ? this._layer.types : null;
  }
  isTable() {
    return this._forceIsTable || "isTable" in this._layer && this._layer.isTable || "table" === this._layer.type || !this._layer.geometryType;
  }
  _isInFeatureSet() {
    return l.InFeatureSet;
  }
  _candidateIdTransform(e4) {
    return e4;
  }
  async _getSet(e4) {
    if (null === this._wset) {
      await this._ensureLoaded();
      const t5 = await this._getFilteredSet("", null, null, null, e4);
      return this._wset = t5, t5;
    }
    return this._wset;
  }
  _createQuery() {
    const e4 = this._layer.createQuery();
    return e4.returnZ = this.hasZ, e4.returnM = this.hasM, e4.outFields = this._overrideFields ?? ["*"], e4.returnGeometry = !this._removeGeometry, e4;
  }
  _changeFeature(t5) {
    const s6 = {};
    for (const e4 of this.fields) s6[e4.name] = t5.attributes[e4.name];
    return new d2({ geometry: true === this._removeGeometry ? null : t5.geometry, attributes: s6 });
  }
  async _getFilteredSet(e4, t5, s6, r3, a6) {
    let n5 = "", h3 = false;
    if (null !== r3 && (n5 = r3.constructClause(), h3 = true), this.isTable() && t5 && null !== e4 && "" !== e4) {
      return new t3([], [], true, null);
    }
    const y = this._createQuery();
    y.where = r2(y.where, null === s6 ? null === t5 ? "1=1" : "" : f4(s6, o2.Standardised)), y.spatialRelationship = this._makeRelationshipEnum(e4), y.outSpatialReference = this.spatialReference, y.orderByFields = "" !== n5 ? n5.split(",") : null, y.geometry = null === t5 ? null : t5, y.relationParameter = this._makeRelationshipParam(e4);
    const c5 = await this._layer.queryFeatures(y);
    if (null === c5) return new t3([], [], h3, null);
    this._checkCancelled(a6);
    const d4 = [];
    c5.features.forEach((e5) => {
      const t6 = e5.attributes[this._layer.objectIdField];
      d4.push(t6), this._featureCache[t6] = this._changeFeature(e5);
    });
    return new t3([], d4, h3, null);
  }
  _makeRelationshipEnum(e4) {
    if (e4.includes("esriSpatialRelRelation")) return "relation";
    switch (e4) {
      case "esriSpatialRelRelation":
        return "relation";
      case "esriSpatialRelIntersects":
        return "intersects";
      case "esriSpatialRelContains":
        return "contains";
      case "esriSpatialRelOverlaps":
        return "overlaps";
      case "esriSpatialRelWithin":
        return "within";
      case "esriSpatialRelTouches":
        return "touches";
      case "esriSpatialRelCrosses":
        return "crosses";
      case "esriSpatialRelEnvelopeIntersects":
        return "envelope-intersects";
    }
    return e4;
  }
  _makeRelationshipParam(e4) {
    return e4.includes("esriSpatialRelRelation") ? e4.split(":")[1] : "";
  }
  async _queryAllFeatures() {
    if (this._wset) return this._wset;
    if (await this._ensureLoaded(), this._layer.source && this._layer.source.items) {
      const e5 = [];
      return this._layer.source.items.forEach((t6) => {
        const s7 = t6.attributes[this._layer.objectIdField];
        e5.push(s7), this._featureCache[s7] = this._changeFeature(t6);
      }), this._wset = new t3([], e5, false, null), this._wset;
    }
    const e4 = this._createQuery();
    e4.where = "1=1";
    const t5 = await this._layer.queryFeatures(e4), s6 = [];
    return t5.features.forEach((e5) => {
      const t6 = e5.attributes[this._layer.objectIdField];
      s6.push(t6), this._featureCache[t6] = this._changeFeature(e5);
    }), this._wset = new t3([], s6, false, null), this._wset;
  }
  async _getFeatures(e4, r3, i3) {
    const a6 = [];
    -1 !== r3 && void 0 === this._featureCache[r3] && a6.push(r3);
    for (let t5 = e4._lastFetchedIndex; t5 < e4._known.length && (e4._lastFetchedIndex += 1, !(void 0 === this._featureCache[e4._known[t5]] && (e4._known[t5] !== r3 && a6.push(e4._known[t5]), a6.length > i3))); t5++) ;
    if (0 === a6.length) return "success";
    throw new s4(t2.MissingFeatures);
  }
  async _refineSetBlock(e4) {
    return e4;
  }
  async _stat() {
    return { calculated: false };
  }
  async _canDoAggregates() {
    return false;
  }
  relationshipMetaData() {
    return [];
  }
  static _cloneAttr(e4) {
    const t5 = {};
    for (const s6 in e4) t5[s6] = e4[s6];
    return t5;
  }
  nativeCapabilities() {
    return { title: this._layer.title ?? "", canQueryRelated: false, source: this, capabilities: this._layer.capabilities, databaseType: this._databaseType, requestStandardised: true };
  }
  static create(e4, t5) {
    let s6 = e4.layerDefinition.objectIdField;
    const r3 = e4.layerDefinition.typeIdField ?? "", i3 = [];
    if (e4.layerDefinition.types) for (const h3 of e4.layerDefinition.types) i3.push(n4.fromJSON(h3));
    let a6 = e4.layerDefinition.geometryType;
    void 0 === a6 && (a6 = e4.featureSet.geometryType || "");
    let l3 = e4.featureSet.features;
    const n5 = t5.toJSON();
    if (!s6) {
      let t6 = false;
      for (const r4 of e4.layerDefinition.fields) if ("oid" === r4.type || "esriFieldTypeOID" === r4.type) {
        s6 = r4.name, t6 = true;
        break;
      }
      if (false === t6) {
        let t7 = "FID", r4 = true, i4 = 0;
        for (; r4; ) {
          let s7 = true;
          for (const r5 of e4.layerDefinition.fields) if (r5.name === t7) {
            s7 = false;
            break;
          }
          true === s7 ? r4 = false : (i4++, t7 = "FID" + i4.toString());
        }
        e4.layerDefinition.fields.push({ type: "esriFieldTypeOID", name: t7, alias: t7 });
        const a7 = [];
        for (let s7 = 0; s7 < l3.length; s7++) a7.push({ geometry: e4.featureSet.features[s7].geometry, attributes: e4.featureSet.features[s7].attributes ? this._cloneAttr(e4.featureSet.features[s7].attributes) : {} }), a7[s7].attributes[t7] = s7;
        l3 = a7, s6 = t7;
      }
    }
    const o3 = [];
    for (const h3 of e4.layerDefinition.fields) h3 instanceof m ? o3.push(h3) : o3.push(m.fromJSON(h3));
    let u2 = a6;
    switch (u2 || (u2 = ""), u2) {
      case "esriGeometryPoint":
        u2 = "point";
        break;
      case "esriGeometryPolyline":
        u2 = "polyline";
        break;
      case "esriGeometryPolygon":
        u2 = "polygon";
        break;
      case "esriGeometryEnvelope":
        u2 = "extent";
        break;
      case "esriGeometryMultipoint":
        u2 = "multipoint";
        break;
      case "":
      case "esriGeometryNull":
        u2 = "esriGeometryNull";
    }
    if ("esriGeometryNull" !== u2) for (const y of l3) y.geometry && y.geometry instanceof c2 == false && (y.geometry.type = u2, void 0 === y.geometry.spatialReference && (y.geometry.spatialReference = n5));
    else for (const h3 of l3) h3.geometry && (h3.geometry = null);
    const f5 = { outFields: ["*"], source: l3, fields: o3, hasZ: true === e4?.layerDefinition?.hasZ || true === e4?.featureSet?.hasZ, hasM: true === e4?.layerDefinition?.hasM || true === e4?.featureSet?.hasM, types: i3, typeIdField: r3, objectIdField: s6, spatialReference: t5 }, _ = "esriGeometryNull" === u2 || null === u2;
    _ || (f5.geometryType = u2);
    const m4 = new Xe(f5);
    e4?.layerDefinition?.subtypeField && e4?.layerDefinition?.subtypes && m4.read({ subtypes: e4.layerDefinition.subtypes, subtypeField: e4.layerDefinition.subtypeField });
    return new _p({ layer: m4, spatialReference: t5, isTable: _ });
  }
  async queryAttachments() {
    return [];
  }
  async getFeatureByObjectId(e4) {
    const t5 = this._createQuery();
    t5.where = this.objectIdField + "=" + e4.toString();
    const s6 = await this._layer.queryFeatures(t5);
    return 1 === s6.features.length ? s6.features[0] : null;
  }
  async getOwningSystemUrl() {
    return "";
  }
  async getIdentityUser() {
    return "";
  }
  get preferredTimeZone() {
    return "preferredTimeZone" in this._layer ? this._layer.preferredTimeZone : null;
  }
  get dateFieldsTimeZone() {
    return "dateFieldsTimeZone" in this._layer ? this._layer.dateFieldsTimeZone : null;
  }
  get datesInUnknownTimezone() {
    return "datesInUnknownTimezone" in this._layer && this._layer.datesInUnknownTimezone;
  }
  get editFieldsInfo() {
    return "editFieldsInfo" in this._layer ? this._layer.editFieldsInfo : null;
  }
  get timeInfo() {
    return this._layer?.timeInfo;
  }
  async getFeatureSetInfo() {
    const e4 = this._layer.title && this._layer.parent;
    return this.fsetInfo ?? { layerId: null, layerName: null, itemId: null, serviceLayerUrl: null, webMapLayerId: e4 ? this._layer.id ?? null : null, webMapLayerTitle: e4 ? this._layer.title ?? null : null, className: null, objectClassId: null };
  }
};

// node_modules/@arcgis/core/arcade/featureset/sources/FeatureLayerRelated.js
var d3 = class extends S3 {
  constructor(e4) {
    super(e4), this.declaredClass = "esri.arcade.featureset.sources.FeatureLayerRelated", this._findObjectId = -1, this._requestStandardised = false, this._removeGeometry = false, this._overrideFields = null, this.featureObjectId = null, e4.spatialReference && (this.spatialReference = e4.spatialReference), this._transparent = true, this._maxProcessing = 1e3, this._layer = e4.layer, this._wset = null, this._findObjectId = e4.objectId, this.featureObjectId = e4.objectId, this.relationship = e4.relationship, this._relatedLayer = e4.relatedLayer, void 0 !== e4.outFields && (this._overrideFields = e4.outFields), void 0 !== e4.includeGeometry && (this._removeGeometry = false === e4.includeGeometry);
  }
  _maxQueryRate() {
    return O;
  }
  end() {
    return this._layer;
  }
  optimisePagingFeatureQueries() {
  }
  async loadImpl() {
    return await Promise.all([this._layer.load(), this._relatedLayer?.load()]), this._initialiseFeatureSet(), this;
  }
  nativeCapabilities() {
    return this._relatedLayer.nativeCapabilities();
  }
  _initialiseFeatureSet() {
    if (null == this.spatialReference && (this.spatialReference = this._layer.spatialReference), this.geometryType = this._relatedLayer.geometryType, this.fields = this._relatedLayer.fields.slice(), this.hasZ = this._relatedLayer.hasZ, this.hasM = this._relatedLayer.hasM, null !== this._overrideFields) if (1 === this._overrideFields.length && "*" === this._overrideFields[0]) this._overrideFields = null;
    else {
      const e5 = [], t5 = [];
      for (const r3 of this.fields) if ("oid" === r3.type) e5.push(r3), t5.push(r3.name);
      else for (const i3 of this._overrideFields) if (i3.toLowerCase() === r3.name.toLowerCase()) {
        e5.push(r3), t5.push(r3.name);
        break;
      }
      this.fields = e5, this._overrideFields = t5;
    }
    const e4 = this._layer.nativeCapabilities();
    e4 && (this._databaseType = e4.databaseType, this._requestStandardised = e4.requestStandardised), this.objectIdField = this._relatedLayer.objectIdField, this.globalIdField = this._relatedLayer.globalIdField, this.hasM = this._relatedLayer.supportsM, this.hasZ = this._relatedLayer.supportsZ, this.typeIdField = this._relatedLayer.typeIdField, this.types = this._relatedLayer.types, this.subtypeField = this._relatedLayer.subtypeField, this.subtypes = this._relatedLayer.subtypes;
  }
  async databaseType() {
    return await this._relatedLayer.databaseType(), this._databaseType = this._relatedLayer._databaseType, this._databaseType;
  }
  isTable() {
    return this._relatedLayer.isTable();
  }
  _isInFeatureSet() {
    return l.InFeatureSet;
  }
  _candidateIdTransform(e4) {
    return e4;
  }
  async _getSet(e4) {
    if (null === this._wset) {
      await this._ensureLoaded();
      const t5 = await this._getFilteredSet("", null, null, null, e4);
      return this._wset = t5, t5;
    }
    return this._wset;
  }
  _changeFeature(t5) {
    const r3 = {};
    for (const e4 of this.fields) r3[e4.name] = t5.attributes[e4.name];
    return new d2({ geometry: true === this._removeGeometry ? null : t5.geometry, attributes: r3 });
  }
  async _getFilteredSet(e4, t5, r3, i3, a6) {
    if (await this.databaseType(), this.isTable() && t5 && null !== e4 && "" !== e4) {
      return new t3([], [], true, null);
    }
    const n5 = this._layer.nativeCapabilities();
    if (false === n5.canQueryRelated) {
      return new t3([], [], true, null);
    }
    if (n5.capabilities?.queryRelated.supportsPagination) return this._getFilteredSetUsingPaging(e4, t5, r3, i3, a6);
    let d4 = "", o3 = false;
    null !== i3 && true === n5.capabilities?.queryRelated.supportsOrderBy && (d4 = i3.constructClause(), o3 = true);
    const u2 = new c3();
    u2.objectIds = [this._findObjectId];
    const h3 = null !== this._overrideFields ? this._overrideFields : this._fieldsIncludingObjectId(this._relatedLayer.fields ? this._relatedLayer.fields.map((e5) => e5.name) : ["*"]);
    u2.outFields = h3, u2.relationshipId = this.relationship.id, u2.where = "1=1";
    let c5 = true;
    true === this._removeGeometry && (c5 = false), u2.returnGeometry = c5, this._requestStandardised && (u2.sqlFormat = "standard"), u2.outSpatialReference = this.spatialReference, u2.orderByFields = "" !== d4 ? d4.split(",") : null;
    const y = await n5.source.queryRelatedFeatures(u2);
    this._checkCancelled(a6);
    const p6 = y[this._findObjectId] ? y[this._findObjectId].features : [], _ = [];
    for (let s6 = 0; s6 < p6.length; s6++) this._featureCache[p6[s6].attributes[this._relatedLayer.objectIdField]] = p6[s6], _.push(p6[s6].attributes[this._relatedLayer.objectIdField]);
    const f5 = t5 && null !== e4 && "" !== e4, g4 = null != r3;
    return new t3(f5 || g4 ? _ : [], f5 || g4 ? [] : _, o3, null);
  }
  _fieldsIncludingObjectId(e4) {
    if (null === e4) return [this.objectIdField];
    const t5 = e4.slice();
    if (t5.includes("*")) return t5;
    let r3 = false;
    for (const i3 of t5) if (i3.toUpperCase() === this.objectIdField.toUpperCase()) {
      r3 = true;
      break;
    }
    return false === r3 && t5.push(this.objectIdField), t5;
  }
  async _getFilteredSetUsingPaging(e4, t5, r3, i3, a6) {
    let n5 = "", l3 = false;
    const d4 = this._layer.nativeCapabilities();
    null !== i3 && true === d4.capabilities?.queryRelated.supportsOrderBy && (n5 = i3.constructClause(), l3 = true), await this.databaseType();
    const o3 = "1=1";
    let u2 = this._maxQueryRate();
    const h3 = d4.capabilities?.query.maxRecordCount;
    null != h3 && h3 < u2 && (u2 = h3);
    const c5 = t5 && null !== e4 && "" !== e4, y = null != r3;
    let p6 = null, _ = true;
    true === this._removeGeometry && (_ = false);
    const f5 = null !== this._overrideFields ? this._overrideFields : this._fieldsIncludingObjectId(this._relatedLayer.fields ? this._relatedLayer.fields.map((e5) => e5.name) : ["*"]);
    return p6 = new t3(c5 || y ? ["GETPAGES"] : [], c5 || y ? [] : ["GETPAGES"], l3, { outFields: f5.join(","), resultRecordCount: u2, resultOffset: 0, objectIds: [this._findObjectId], where: o3, orderByFields: n5, returnGeometry: _, returnIdsOnly: "false", internal: { set: [], lastRetrieved: 0, lastPage: 0, fullyResolved: false } }), await this._expandPagedSet(p6, u2, 0, 0, a6), p6;
  }
  _expandPagedSet(e4, t5, r3, i3, s6) {
    return this._expandPagedSetFeatureSet(e4, t5, r3, i3, s6);
  }
  _clonePageDefinition(e4) {
    return null === e4 ? null : true !== e4.groupbypage ? { groupbypage: false, outFields: e4.outFields, resultRecordCount: e4.resultRecordCount, resultOffset: e4.resultOffset, where: e4.where, objectIds: e4.objectIds, orderByFields: e4.orderByFields, returnGeometry: e4.returnGeometry, returnIdsOnly: e4.returnIdsOnly, internal: e4.internal } : { groupbypage: true, outFields: e4.outFields, resultRecordCount: e4.resultRecordCount, useOIDpagination: e4.useOIDpagination, generatedOid: e4.generatedOid, groupByFieldsForStatistics: e4.groupByFieldsForStatistics, resultOffset: e4.resultOffset, outStatistics: e4.outStatistics, geometry: e4.geometry, where: e4.where, objectIds: e4.objectIds, orderByFields: e4.orderByFields, returnGeometry: e4.returnGeometry, returnIdsOnly: e4.returnIdsOnly, internal: e4.internal };
  }
  async _getPhysicalPage(e4, t5, r3) {
    const i3 = e4.pagesDefinition.internal.lastRetrieved, s6 = i3, a6 = e4.pagesDefinition.internal.lastPage, n5 = this._layer.nativeCapabilities(), d4 = new c3();
    true === this._requestStandardised && (d4.sqlFormat = "standard"), d4.relationshipId = this.relationship.id, d4.objectIds = e4.pagesDefinition.objectIds, d4.resultOffset = e4.pagesDefinition.internal.lastPage, d4.resultRecordCount = e4.pagesDefinition.resultRecordCount, d4.outFields = e4.pagesDefinition.outFields.split(","), d4.where = e4.pagesDefinition.where, d4.orderByFields = "" !== e4.pagesDefinition.orderByFields ? e4.pagesDefinition.orderByFields.split(",") : null, d4.returnGeometry = e4.pagesDefinition.returnGeometry, d4.outSpatialReference = this.spatialReference;
    const o3 = await n5.source.queryRelatedFeatures(d4);
    if (this._checkCancelled(r3), e4.pagesDefinition.internal.lastPage !== a6) return 0;
    const u2 = o3[this._findObjectId] ? o3[this._findObjectId].features : [];
    for (let l3 = 0; l3 < u2.length; l3++) e4.pagesDefinition.internal.set[s6 + l3] = u2[l3].attributes[this._relatedLayer.objectIdField];
    for (let l3 = 0; l3 < u2.length; l3++) this._featureCache[u2[l3].attributes[this._relatedLayer.objectIdField]] = u2[l3];
    const h3 = !o3[this._findObjectId] || false === o3[this._findObjectId].exceededTransferLimit;
    return u2.length !== e4.pagesDefinition.resultRecordCount && h3 && (e4.pagesDefinition.internal.fullyResolved = true), e4.pagesDefinition.internal.lastRetrieved = i3 + u2.length, e4.pagesDefinition.internal.lastPage += e4.pagesDefinition.resultRecordCount, u2.length;
  }
  async _getFeatures(e4, i3, s6, a6) {
    const n5 = [];
    -1 !== i3 && void 0 === this._featureCache[i3] && n5.push(i3);
    const l3 = this._maxQueryRate();
    if (true === this._checkIfNeedToExpandKnownPage(e4, l3)) return await this._expandPagedSet(e4, l3, 0, 0, a6), this._getFeatures(e4, i3, s6, a6);
    let d4 = 0;
    for (let t5 = e4._lastFetchedIndex; t5 < e4._known.length && (d4++, d4 <= s6 && (e4._lastFetchedIndex += 1), !("GETPAGES" !== e4._known[t5] && void 0 === this._featureCache[e4._known[t5]] && (e4._known[t5] !== i3 && n5.push(e4._known[t5]), n5.length > s6))) && !(d4 >= s6 && 0 === n5.length); t5++) ;
    if (0 === n5.length) return "success";
    throw new s4(t2.MissingFeatures);
  }
  async _refineSetBlock(e4, t5, r3) {
    return e4;
  }
  async _stat(e4, t5, r3, i3, s6, a6, n5) {
    return { calculated: false };
  }
  get gdbVersion() {
    return this._relatedLayer.gdbVersion;
  }
  async _canDoAggregates(e4, t5, r3, i3, s6) {
    return false;
  }
  relationshipMetaData() {
    return this._relatedLayer.relationshipMetaData();
  }
  serviceUrl() {
    return this._relatedLayer.serviceUrl();
  }
  queryAttachments(e4, t5, r3, i3, s6) {
    return this._relatedLayer.queryAttachments(e4, t5, r3, i3, s6);
  }
  getFeatureByObjectId(e4, t5) {
    return this._relatedLayer.getFeatureByObjectId(e4, t5);
  }
  getOwningSystemUrl() {
    return this._relatedLayer.getOwningSystemUrl();
  }
  getIdentityUser() {
    return this._relatedLayer.getIdentityUser();
  }
  getDataSourceFeatureSet() {
    return this._relatedLayer;
  }
  get preferredTimeZone() {
    return this._relatedLayer?.preferredTimeZone ?? null;
  }
  get dateFieldsTimeZone() {
    return this._relatedLayer?.dateFieldsTimeZone ?? null;
  }
  get datesInUnknownTimezone() {
    return this._relatedLayer?.datesInUnknownTimezone;
  }
  get editFieldsInfo() {
    return this._relatedLayer?.editFieldsInfo ?? null;
  }
  get timeInfo() {
    return this._relatedLayer?.timeInfo ?? null;
  }
  async getFeatureSetInfo() {
    return this.fsetInfo ?? this._layer.featureSetInfo;
  }
};

// node_modules/@arcgis/core/arcade/featureSetUtils.js
function g3() {
  null === a2.applicationCache && (a2.applicationCache = new a2());
}
async function k4(e4, t5, a6) {
  if (a2.applicationCache) {
    const a7 = a2.applicationCache.getLayerInfo(e4);
    if (a7) {
      const r3 = await a7;
      return new Xe({ url: e4, outFields: t5, sourceJSON: r3 });
    }
    const n5 = new Xe({ url: e4, outFields: t5 }), l3 = (async () => (await n5.load(), n5.sourceJSON))();
    if (a2.applicationCache) {
      a2.applicationCache.setLayerInfo(e4, l3);
      try {
        return await l3, n5;
      } catch (r3) {
        throw a2.applicationCache.clearLayerInfo(e4), r3;
      }
    }
    return await l3, n5;
  }
  if (null != a6) {
    const r3 = a6.getCachedLayerMetadata(e4);
    if (r3) {
      const a7 = await r3;
      return new Xe({ url: e4, outFields: t5, sourceJSON: a7 });
    }
    const l3 = new Xe({ url: e4, outFields: t5 }), s6 = (async () => (await l3.load(), l3.sourceJSON))();
    a6.setCachedLayerMetadata(e4, s6);
    try {
      return await s6, l3;
    } catch (n5) {
      throw a6.removeCachedLayerMetadata(e4, s6), n5;
    }
  }
  return new Xe({ url: e4, outFields: t5 });
}
async function F2(e4, t5, a6, r3, n5, l3 = null) {
  return N(await k4(e4, ["*"], n5), t5, a6, r3, n5, l3);
}
function N(e4, t5 = null, a6 = null, r3 = true, n5 = null, l3 = null) {
  switch (e4.type) {
    case "catalog-footprint":
      return N(e4.parent, t5, a6, r3, n5, l3);
    case "subtype-sublayer": {
      const s6 = N(e4.parent, t5, a6, r3, n5, l3);
      return s6.filter(R.create(e4.parent.subtypeField + "=" + e4.subtypeCode.toString(), { fieldsIndex: e4.parent.fieldsIndex, timeZone: s6.dateFieldsTimeZoneDefaultUTC }));
    }
    case "csv":
    case "geojson":
    case "knowledge-graph-sublayer":
    case "wfs":
      return new p5({ layer: e4, spatialReference: t5, outFields: a6, includeGeometry: r3, lrucache: n5, interceptor: l3 });
    case "catalog":
    case "feature":
    case "oriented-imagery":
    case "subtype-group": {
      const s6 = { layer: e4, spatialReference: t5, outFields: a6, includeGeometry: r3, lrucache: n5, interceptor: l3 };
      return !e4.url && e4.source ? new p5(s6) : new k3(s6);
    }
    default:
      throw new Error(`Unsupported layer type: ${e4.type}`);
  }
}
async function T4(t5) {
  if (null !== a2.applicationCache) {
    const e4 = a2.applicationCache.getLayerInfo(t5);
    if (null !== e4) return e4;
  }
  const a6 = (async () => {
    const a7 = await H(t5, { responseType: "json", query: { f: "json" } });
    return a7.data ? a7.data : null;
  })();
  if (null !== a2.applicationCache) {
    a2.applicationCache.setLayerInfo(t5, a6);
    try {
      return await a6;
    } catch (r3) {
      throw a2.applicationCache.clearLayerInfo(t5), r3;
    }
  }
  return a6;
}
async function A2(t5, a6) {
  const r3 = "QUERYDATAELEMTS:" + a6.toString() + ":" + t5;
  if (null !== a2.applicationCache) {
    const e4 = a2.applicationCache.getLayerInfo(r3);
    if (null !== e4) return e4;
  }
  const n5 = (async () => {
    const r4 = await H(t5 + "/queryDataElements", { method: "post", responseType: "json", query: { layers: JSON.stringify([a6.toString()]), f: "json" } });
    if (r4.data) {
      const e4 = r4.data;
      if (e4.layerDataElements?.[0]) return e4.layerDataElements[0];
    }
    throw new s4(t2.DataElementsNotFound);
  })();
  if (null !== a2.applicationCache) {
    a2.applicationCache.setLayerInfo(r3, n5);
    try {
      return await n5;
    } catch (l3) {
      throw a2.applicationCache.clearLayerInfo(r3), l3;
    }
  }
  return n5;
}
async function O3(t5, a6) {
  if (null !== a2.applicationCache) {
    const e4 = a2.applicationCache.getLayerInfo(t5);
    if (null !== e4) return e4;
  }
  if (null != a6) {
    const e4 = a6.getCachedServiceMetadata(t5);
    if (null != e4) return e4;
  }
  const r3 = (async () => {
    const a7 = await H(t5, { responseType: "json", query: { f: "json" } });
    if (a7.data) {
      const e4 = a7.data;
      return e4.layers || (e4.layers = []), e4.tables || (e4.tables = []), e4;
    }
    return { layers: [], tables: [] };
  })();
  if (null !== a2.applicationCache) {
    a2.applicationCache.setLayerInfo(t5, r3);
    try {
      return await r3;
    } catch (n5) {
      throw a2.applicationCache.clearLayerInfo(t5), n5;
    }
  }
  if (null != a6) {
    a6.setCachedServiceMetadata(t5, r3);
    try {
      return await r3;
    } catch (l3) {
      throw a6.removeCachedServiceMetadata(t5, r3), l3;
    }
  }
  return r3;
}
async function E3(e4, t5, a6) {
  const r3 = { metadata: null, networkId: -1, unVersion: 3, terminals: [], layerIdLookup: /* @__PURE__ */ new Map(), sourceIdLookup: /* @__PURE__ */ new Map(), queryelem: null, layerNameLkp: {}, lkp: null }, n5 = await O3(e4, null);
  if (r3.metadata = n5, void 0 !== n5.controllerDatasetLayers?.utilityNetworkLayerId && null !== n5.controllerDatasetLayers.utilityNetworkLayerId) {
    if (n5.layers) for (const e5 of n5.layers) r3.layerNameLkp[e5.id] = e5.name;
    if (n5.tables) for (const e5 of n5.tables) r3.layerNameLkp[e5.id] = e5.name;
    const l3 = n5.controllerDatasetLayers.utilityNetworkLayerId;
    r3.networkId = l3;
    const s6 = await A2(e4, l3);
    if (s6) {
      r3.queryelem = s6, r3.queryelem?.dataElement && void 0 !== r3.queryelem.dataElement.schemaGeneration && (r3.unVersion = r3.queryelem.dataElement.schemaGeneration), r3.lkp = {}, r3.queryelem.dataElement.domainNetworks || (r3.queryelem.dataElement.domainNetworks = []);
      for (const e5 of r3.queryelem.dataElement.domainNetworks) {
        for (const t6 of e5.edgeSources ?? []) {
          const e6 = { layerId: t6.layerId, sourceId: t6.sourceId, className: r3.layerNameLkp[t6.layerId] ?? null };
          r3.layerIdLookup.set(e6.layerId, e6), r3.sourceIdLookup.set(e6.sourceId, e6), e6.className && (r3.lkp[e6.className] = e6);
        }
        for (const t6 of e5.junctionSources ?? []) {
          const e6 = { layerId: t6.layerId, sourceId: t6.sourceId, className: r3.layerNameLkp[t6.layerId] ?? null };
          r3.layerIdLookup.set(e6.layerId, e6), r3.sourceIdLookup.set(e6.sourceId, e6), e6.className && (r3.lkp[e6.className] = e6);
        }
      }
      if (r3.queryelem.dataElement.terminalConfigurations) for (const e5 of r3.queryelem.dataElement.terminalConfigurations) for (const t6 of e5.terminals) r3.terminals.push({ terminalId: t6.terminalId, terminalName: t6.terminalName });
      const n6 = await T4(e4 + "/" + l3);
      if (void 0 !== n6.systemLayers?.associationsTableId && null !== n6.systemLayers.associationsTableId) {
        let l4 = null;
        if (a6 && r3.unVersion < 8) {
          const a7 = [];
          r3.unVersion >= 4 && (a7.push("STATUS"), a7.push("PERCENTALONG")), l4 = await F2(e4 + "/" + n6.systemLayers.associationsTableId, t5, ["OBJECTID", "FROMNETWORKSOURCEID", "TONETWORKSOURCEID", "FROMGLOBALID", "TOGLOBALID", "TOTERMINALID", "FROMTERMINALID", "ASSOCIATIONTYPE", "ISCONTENTVISIBLE", "GLOBALID", ...a7], false, null, null), await l4.load(), r3.unVersion >= 4 && (l4 = l4.filter(R.create("STATUS NOT IN (1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63)", { fieldsIndex: l4.getFieldsIndex(), timeZone: l4.dateFieldsTimeZoneDefaultUTC })), await l4.load());
        }
        return { lkp: r3.lkp, associations: l4, unVersion: r3.unVersion, terminals: r3.terminals, layerIdLookup: r3.layerIdLookup, sourceIdLookup: r3.sourceIdLookup };
      }
      return { associations: null, unVersion: r3.unVersion, lkp: null, terminals: [], layerIdLookup: /* @__PURE__ */ new Map(), sourceIdLookup: /* @__PURE__ */ new Map() };
    }
    return { associations: null, unVersion: r3.unVersion, lkp: null, terminals: [], layerIdLookup: /* @__PURE__ */ new Map(), sourceIdLookup: /* @__PURE__ */ new Map() };
  }
  return { associations: null, unVersion: r3.unVersion, lkp: null, terminals: [], layerIdLookup: /* @__PURE__ */ new Map(), sourceIdLookup: /* @__PURE__ */ new Map() };
}
async function j2(e4, t5, a6, r3 = null, n5 = null, l3 = true, s6 = null, i3 = null) {
  let o3 = e4.serviceUrl();
  if (!o3) return null;
  o3 = "/" === o3.charAt(o3.length - 1) ? o3 + t5.relatedTableId.toString() : o3 + "/" + t5.relatedTableId.toString();
  const u2 = await F2(o3, r3, n5, l3, s6, i3);
  return new d3({ layer: e4, relatedLayer: u2, relationship: t5, objectId: a6, spatialReference: r3, outFields: n5, includeGeometry: l3, lrucache: s6, interceptor: i3 });
}
c4.registerAction(), q.registerAction(), a3.registerAction(), l2.registerAction(), a5.registerAction();
var b2 = class extends e2 {
  constructor(e4, t5 = null, a6 = null, r3 = null) {
    super(), this._map = e4, this._overrideSpatialReference = t5, this._lrucache = a6, this._interceptor = r3, this._instantLayers = [];
  }
  _makeAndAddFeatureSet(e4, t5 = true, a6 = null) {
    const r3 = N(e4, this._overrideSpatialReference, null === a6 ? ["*"] : a6, t5, this._lrucache, this._interceptor);
    return this._instantLayers.push({ featureset: r3, opitem: e4, includeGeometry: t5, outFields: JSON.stringify(a6) }), r3;
  }
  async featureSetByName(e4, t5 = true, a6 = null) {
    if (p.isLoadable(this._map) && !this._map.loaded) return await this._map.load(), this.featureSetByName(e4, t5, a6);
    null === a6 && (a6 = ["*"]), a6 = (a6 = a6.slice()).sort();
    const r3 = JSON.stringify(a6);
    for (let l3 = 0; l3 < this._instantLayers.length; l3++) {
      const a7 = this._instantLayers[l3];
      if (a7.opitem.title === e4 && a7.includeGeometry === t5 && a7.outFields === r3) return this._instantLayers[l3].featureset;
    }
    const n5 = this._map.allLayers.find((t6) => x(t6) && t6.title === e4);
    if (null != n5) return this._makeAndAddFeatureSet(n5, t5, a6);
    if (this._map.allTables) {
      const r4 = this._map.allTables.find((t6) => x(t6) && t6.title === e4);
      if (null != r4) return this._makeAndAddFeatureSet(r4, t5, a6);
    }
    return null;
  }
  async featureSetById(e4, t5 = true, a6 = ["*"]) {
    if (p.isLoadable(this._map) && !this._map.loaded) return await this._map.load(), this.featureSetById(e4, t5, a6);
    null === a6 && (a6 = ["*"]), a6 = (a6 = a6.slice()).sort();
    const r3 = JSON.stringify(a6);
    for (let l3 = 0; l3 < this._instantLayers.length; l3++) {
      const a7 = this._instantLayers[l3];
      if (a7.opitem.id === e4 && a7.includeGeometry === t5 && a7.outFields === r3) return this._instantLayers[l3].featureset;
    }
    const n5 = this._map.allLayers.find((t6) => x(t6) && t6.id === e4);
    if (n5) return this._makeAndAddFeatureSet(n5, t5, a6);
    if (this._map.allTables) {
      const r4 = this._map.allTables.find((t6) => x(t6) && t6.id === e4);
      if (null != r4) return this._makeAndAddFeatureSet(r4, t5, a6);
    }
    return null;
  }
};
var D3 = class _D extends e2 {
  constructor(e4, t5 = null, a6 = null, r3 = null) {
    super(), this._url = e4, this._overrideSpatialReference = t5, this._lrucache = a6, this._interceptor = r3, this.metadata = null, this._instantLayers = [];
  }
  get url() {
    return this._url;
  }
  _makeAndAddFeatureSet(e4, t5 = true, a6 = null) {
    const r3 = N(e4, this._overrideSpatialReference, null === a6 ? ["*"] : a6, t5, this._lrucache);
    return this._instantLayers.push({ featureset: r3, opitem: e4, includeGeometry: t5, outFields: JSON.stringify(a6) }), r3;
  }
  async _loadMetaData() {
    const e4 = await O3(this._url, this._lrucache);
    return this.metadata = e4, e4;
  }
  load() {
    return this._loadMetaData();
  }
  clone() {
    return new _D(this._url, this._overrideSpatialReference, this._lrucache, this._interceptor);
  }
  async featureSetByName(e4, t5 = true, a6 = null) {
    null === a6 && (a6 = ["*"]), a6 = (a6 = a6.slice()).sort();
    const r3 = JSON.stringify(a6);
    for (let s6 = 0; s6 < this._instantLayers.length; s6++) {
      const a7 = this._instantLayers[s6];
      if (a7.opitem.title === e4 && a7.includeGeometry === t5 && a7.outFields === r3) return this._instantLayers[s6].featureset;
    }
    const n5 = await this._loadMetaData();
    let l3 = null;
    for (const s6 of n5.layers ?? []) s6.name === e4 && (l3 = s6);
    if (!l3) for (const s6 of n5.tables ?? []) s6.name === e4 && (l3 = s6);
    if (l3) {
      const e5 = await k4(this._url + "/" + l3.id, ["*"], this._lrucache);
      return this._makeAndAddFeatureSet(e5, t5, a6);
    }
    return null;
  }
  async featureSetById(e4, t5 = true, a6 = ["*"]) {
    null === a6 && (a6 = ["*"]), a6 = (a6 = a6.slice()).sort();
    const r3 = JSON.stringify(a6);
    e4 = null != e4 ? e4.toString() : "";
    for (let s6 = 0; s6 < this._instantLayers.length; s6++) {
      const a7 = this._instantLayers[s6];
      if (a7.opitem.id === e4 && a7.includeGeometry === t5 && a7.outFields === r3) return this._instantLayers[s6].featureset;
    }
    const n5 = await this._loadMetaData();
    let l3 = null;
    for (const s6 of n5.layers ?? []) null !== s6.id && void 0 !== s6.id && s6.id.toString() === e4 && (l3 = s6);
    if (!l3) for (const s6 of n5.tables ?? []) null !== s6.id && void 0 !== s6.id && s6.id.toString() === e4 && (l3 = s6);
    if (l3) {
      const e5 = await k4(this._url + "/" + l3.id, ["*"], this._lrucache);
      return this._makeAndAddFeatureSet(e5, t5, a6);
    }
    return null;
  }
};
function M2(e4, t5, a6 = null, r3 = null) {
  return new b2(e4, t5, a6, r3);
}
function v2(e4, t5, a6 = null, r3 = null) {
  return new D3(e4, t5, a6, r3);
}
function R5(e4, t5, n5, l3, s6) {
  if (null === e4) return null;
  if (K(e4)) {
    switch (t5) {
      case "datasource":
        return e4.getDataSourceFeatureSet();
      case "parent":
        return e4;
      case "root":
        return e4.getRootFeatureSet();
    }
    return null;
  }
  if (e4 instanceof h && M(e4)) {
    const a6 = e4;
    switch (t5) {
      case "datasource":
        return N(a6, s6, "outFields" in a6 ? a6.outFields : null, true, n5, l3).getDataSourceFeatureSet();
      case "parent":
      case "root":
        return N(a6, s6, "outFields" in a6 ? a6.outFields : null, true, n5, l3);
    }
    return null;
  }
  if (qe(e4)) {
    switch (t5) {
      case "datasource":
        return N(e4.parent, s6, e4.parent.outFields, true, n5, l3).getDataSourceFeatureSet();
      case "parent":
      case "root":
        return N(e4, s6, e4.parent.outFields, true, n5, l3);
    }
    return null;
  }
  return null;
}
async function q2(e4, t5, a6, r3, n5, l3, s6, i3 = null) {
  if (a2.applicationCache) {
    const o4 = a2.applicationCache.getLayerInfo(e4 + ":" + l3.url);
    if (o4) return G(await o4, t5, a6, r3, n5, s6, i3);
  }
  if (null != s6) {
    const o4 = s6.getCachedPortalItem(l3.url, e4);
    if (null != o4) return await G(await o4, t5, a6, r3, n5, s6, i3);
  }
  const o3 = new k({ id: e4, portal: l3 }).load();
  a2.applicationCache ? a2.applicationCache.setLayerInfo(e4 + ":" + l3.url, o3) : null != s6 && s6.setCachedPortalItem(l3.url, e4, o3);
  try {
    return await G(await o3, t5, a6, r3, n5, s6, i3);
  } catch (u2) {
    throw a2.applicationCache && a2.applicationCache.clearLayerInfo(e4 + ":" + l3.url), null != s6 && s6.removeCachedPortalItem(l3.url, e4, o3), u2;
  }
}
async function G(e4, t5, a6, r3, n5, l3, s6) {
  let i3;
  if ("Feature Service" === e4.type || "Map Service" === e4.type) i3 = await k4(E(e4.url ?? "") + "/" + t5, ["*"], l3);
  else {
    if (t5) throw new Error(`layerId=${t5} provided for ${e4.type} item`);
    if (null != l3) {
      const t6 = l3.getCachedPortalItemLayer(e4.portal.url, e4.id);
      if (null != t6) i3 = await t6;
      else {
        const t7 = h.fromPortalItem(e4);
        l3.setCachedPortalItemLayer(e4.portal.url, e4.id, t7);
        try {
          i3 = await t7;
        } catch (o3) {
          throw l3.removeCachedPortalItemLayer(e4.portal.url, e4.id, t7), o3;
        }
      }
    } else i3 = await h.fromPortalItem(e4);
  }
  return N(i3, a6, r3, n5, l3, s6);
}

export {
  c4 as c,
  k2 as k,
  b,
  B,
  L2 as L,
  R3 as R,
  e3 as e,
  a3 as a,
  a5 as a2,
  p5 as p,
  g3 as g,
  F2 as F,
  N,
  E3 as E,
  j2 as j,
  M2 as M,
  v2 as v,
  R5 as R2,
  q2 as q
};
//# sourceMappingURL=chunk-ANGM5VGL.js.map
