import {
  B,
  m
} from "./chunk-NLQ5JBZ3.js";
import {
  j
} from "./chunk-AAC6XSCN.js";
import {
  $
} from "./chunk-Z7VYTTYM.js";
import {
  l,
  u as u2
} from "./chunk-C3JHRSMA.js";
import {
  r
} from "./chunk-QFU5COFB.js";
import {
  Te,
  e2 as e
} from "./chunk-VCRP2PLV.js";
import {
  u
} from "./chunk-MUKDJQWB.js";
import {
  _
} from "./chunk-Q6XRAGMA.js";
import {
  f
} from "./chunk-PK2ZR2SJ.js";
import {
  d,
  g
} from "./chunk-OXSERRAR.js";
import {
  s
} from "./chunk-XWG6QGFK.js";

// node_modules/@arcgis/core/smartMapping/statistics/support/utils.js
var $2 = null;
var g2 = /^(?<hh>([0-1][0-9])|([2][0-3])):(?<mm>[0-5][0-9])(:(?<ss>[0-5][0-9]))?([.](?<ms>\d+))?$/;
function j2(e2, t, n) {
  return e2.x < 0 ? e2.x += t : e2.x > n && (e2.x -= t), e2;
}
function x(e2, t, n, o) {
  const a = g(n) ? d(n) : null, u3 = a ? Math.round((a.valid[1] - a.valid[0]) / t.scale[0]) : null;
  return e2.map((e3) => {
    const n2 = new _(e3.geometry);
    return j(t, n2, n2), e3.geometry = a ? j2(n2, u3 ?? 0, o[0]) : n2, e3;
  });
}
function w(e2, n = 18, r2, o, i) {
  const s2 = new Float64Array(o * i);
  n = Math.round(u(n));
  let l2 = Number.POSITIVE_INFINITY, a = Number.NEGATIVE_INFINITY;
  const u3 = u2(r2);
  for (const { geometry: t, attributes: f2 } of e2) {
    const { x: e3, y: r3 } = t, c = Math.max(0, e3 - n), p = Math.max(0, r3 - n), d2 = Math.min(i, r3 + n), h = Math.min(o, e3 + n), y = +u3(f2);
    for (let t2 = p; t2 < d2; t2++) for (let i2 = c; i2 < h; i2++) {
      const u4 = t2 * o + i2, f3 = l(i2 - e3, t2 - r3, n) * y, c2 = s2[u4] += f3;
      l2 = Math.min(l2, c2), a = Math.max(a, c2);
    }
  }
  return { min: l2, max: a };
}
function I(e2) {
  const t = g2.exec(e2);
  if (!t) return null;
  const { hh: r2, mm: o, ss: i, ms: s2 } = t.groups;
  return Number(r2) * r.hours + Number(o) * r.minutes + Number(i) * r.seconds + Number(s2 || 0);
}
async function b(e2, t, n = true) {
  if (!t) return [];
  const { field: r2, field2: i, field3: s2, fieldDelimiter: l2, fieldInfos: u3, timeZone: f2 } = e2, c = r2 && u3?.find((e3) => e3.name.toLowerCase() === r2.toLowerCase()), m2 = !!c && Te(c), g3 = !!c && $(c), j3 = e2.valueExpression, x2 = e2.normalizationType, w2 = e2.normalizationField, b2 = e2.normalizationTotal, F2 = [], N2 = e2.viewInfoParams;
  let E = null, v = null;
  if (j3) {
    if (!$2) {
      const { arcadeUtils: e3 } = await e();
      $2 = e3;
    }
    $2.hasGeometryOperations(j3) && await $2.enableGeometryOperations(), E = $2.createFunction(j3), v = N2 ? $2.getViewInfo({ viewingMode: N2.viewingMode, scale: N2.scale, spatialReference: new f(N2.spatialReference) }) : null;
  }
  const U2 = e2.fieldInfos, M2 = !(t[0] && "declaredClass" in t[0] && "esri.Graphic" === t[0].declaredClass) && U2 ? { fields: U2 } : null;
  return t.forEach((e3) => {
    const t2 = e3.attributes;
    let o;
    if (j3) {
      const t3 = M2 ? { ...e3, layer: M2 } : e3, n2 = $2.createExecContext(t3, v, f2);
      o = $2.executeFunction(E, n2);
    } else t2 && (o = t2[r2], i ? (o = `${m(o)}${l2}${m(t2[i])}`, s2 && (o = `${o}${l2}${m(t2[s2])}`)) : "string" == typeof o && n && (g3 ? o = o ? new Date(o).getTime() : null : m2 && (o = o ? I(o) : null)));
    if (x2 && "number" == typeof o && isFinite(o)) {
      const e4 = t2 && parseFloat(t2[w2]);
      o = B(o, x2, e4, b2);
    }
    F2.push(o);
  }), F2;
}
function F(e2) {
  const t = e2.field, n = e2.normalizationType, r2 = e2.normalizationField;
  let o;
  return "field" === n ? o = "(NOT " + r2 + " = 0)" : "log" !== n && "natural-log" !== n && "square-root" !== n || (o = `(${t} > 0)`), o;
}
function N(e2, t, n) {
  const r2 = null != t ? e2 + " >= " + t : "", o = null != n ? e2 + " <= " + n : "";
  let i = "";
  return i = r2 && o ? U(r2, o) : r2 || o, i ? "(" + i + ")" : "";
}
function U(e2, t) {
  let n = null != e2 ? e2 : "";
  return null != t && t && (n = n ? "(" + n + ") AND (" + t + ")" : t), n;
}
function M(t, n) {
  if (t && "intersects" !== t.spatialRelationship) return new s(n, "Only 'intersects' spatialRelationship is supported for featureFilter");
}
function T(t, n, r2) {
  const o = z({ layer: t, fields: n });
  if (o.length) return new s(r2, "Unknown fields: " + o.join(", ") + ". You can only use fields defined in the layer schema");
  const i = R({ layer: t, fields: n });
  return i.length ? new s(r2, "Unsupported fields: " + i.join(", ") + ". You can only use fields that can be fetched i.e. AdapterFieldUsageInfo.supportsStatistics must be true") : void 0;
}
function z(e2) {
  const t = e2.layer;
  return e2.fields.filter((e3) => !t.getField(e3));
}
function R(e2) {
  const t = e2.layer;
  return e2.fields.filter((e3) => {
    const n = t.getFieldUsageInfo(e3);
    return !n || !n.supportsStatistics;
  });
}

export {
  x,
  w,
  I,
  b,
  F,
  N,
  U,
  M,
  T
};
//# sourceMappingURL=chunk-APGIAJ3M.js.map
