import {
  e
} from "./chunk-IMFGC5DS.js";
import {
  A,
  B,
  C,
  D,
  E,
  F,
  G,
  H,
  I,
  J,
  K,
  L,
  M,
  N,
  O,
  P,
  Q,
  R,
  S,
  T,
  U,
  V,
  W,
  a,
  b,
  d,
  f,
  g,
  h,
  j,
  k,
  m,
  o,
  p,
  q,
  r,
  v,
  w,
  x,
  y as y2,
  z
} from "./chunk-6DBRCIDV.js";
import {
  s
} from "./chunk-YSRSL2SU.js";
import {
  y2 as y
} from "./chunk-FXKORAMT.js";

// node_modules/@arcgis/core/geometry/support/FloatArray.js
function n(n2, t = false) {
  return n2 <= y ? t ? new Array(n2).fill(0) : new Array(n2) : new Float32Array(n2);
}
function a2(n2) {
  return (Array.isArray(n2) ? n2.length : n2.byteLength / 8) <= y ? Array.from(n2) : new Float32Array(n2);
}
function e2(r2, n2, t) {
  return Array.isArray(r2) ? r2.slice(n2, n2 + t) : r2.subarray(n2, n2 + t);
}

// node_modules/@arcgis/core/views/3d/support/buffer/InterleavedLayout.js
var K2 = class _K {
  constructor(e3, t) {
    this.layout = e3, this.buffer = "number" == typeof t ? new ArrayBuffer(t * e3.stride) : t;
    for (const i of e3.fields.keys()) {
      const t2 = e3.fields.get(i);
      this[i] = new t2.constructor(this.buffer, t2.offset, this.stride);
    }
  }
  get stride() {
    return this.layout.stride;
  }
  get count() {
    return this.buffer.byteLength / this.stride;
  }
  get byteLength() {
    return this.buffer.byteLength;
  }
  getField(e3, t) {
    const i = this[e3];
    return i && i.elementCount === t.ElementCount && i.elementType === t.ElementType ? i : null;
  }
  slice(e3, t) {
    return new _K(this.layout, this.buffer.slice(e3 * this.stride, t * this.stride));
  }
  copyFrom(e3, t = 0, i = 0, s2 = e3.count) {
    const r2 = this.stride;
    if (r2 % 4 == 0) {
      const n2 = new Uint32Array(e3.buffer, t * r2, s2 * r2 / 4);
      new Uint32Array(this.buffer, i * r2, s2 * r2 / 4).set(n2);
    } else {
      const n2 = new Uint8Array(e3.buffer, t * r2, s2 * r2);
      new Uint8Array(this.buffer, i * r2, s2 * r2).set(n2);
    }
    return this;
  }
  get cachedMemory() {
    return this.byteLength;
  }
  dispose() {
  }
};
var N2 = class _N {
  constructor(e3) {
    this._stride = 0, this._fields = /* @__PURE__ */ new Map(), e3 && (this._stride = e3.stride, e3.fields.forEach((e4) => this._fields.set(e4[0], { ...e4[1], constructor: S2(e4[1].constructor) })));
  }
  freeze() {
    return this;
  }
  vec2f16(s2, r2) {
    return this._appendField(s2, r ? p : y2, r2), this;
  }
  vec2f(e3, t) {
    return this._appendField(e3, y2, t), this;
  }
  vec2f64(e3, t) {
    return this._appendField(e3, b, t), this;
  }
  vec3f16(t, i) {
    return this._appendField(t, r ? h : o, i), this;
  }
  vec3f(e3, t) {
    return this._appendField(e3, o, t), this;
  }
  vec3f64(e3, t) {
    return this._appendField(e3, U, t), this;
  }
  vec4f16(t, i) {
    return this._appendField(t, r ? m : T, i), this;
  }
  vec4f(e3, t) {
    return this._appendField(e3, T, t), this;
  }
  vec4f64(e3, t) {
    return this._appendField(e3, F, t), this;
  }
  mat3f(e3, t) {
    return this._appendField(e3, d, t), this;
  }
  mat3f64(e3, t) {
    return this._appendField(e3, x, t), this;
  }
  mat4f(e3, t) {
    return this._appendField(e3, E, t), this;
  }
  mat4f64(e3, t) {
    return this._appendField(e3, A, t), this;
  }
  vec4u8(e3, t) {
    return this._appendField(e3, g, t), this;
  }
  f16(t, i) {
    return this._appendField(t, r ? a : f, i), this;
  }
  f32(e3, t) {
    return this._appendField(e3, f, t), this;
  }
  f64(e3, t) {
    return this._appendField(e3, B, t), this;
  }
  u8(e3, t) {
    return this._appendField(e3, I, t), this;
  }
  u16(e3, t) {
    return this._appendField(e3, w, t), this;
  }
  i8(e3, t) {
    return this._appendField(e3, z, t), this;
  }
  vec2i8(e3, t) {
    return this._appendField(e3, C, t), this;
  }
  vec2i16(e3, t) {
    return this._appendField(e3, J, t), this;
  }
  vec2u8(e3, t) {
    return this._appendField(e3, j, t), this;
  }
  vec2u16(e3, t) {
    return this._appendField(e3, L, t), this;
  }
  vec4u16(e3, t) {
    return this._appendField(e3, M, t), this;
  }
  u32(e3, t) {
    return this._appendField(e3, v, t), this;
  }
  _appendField(e3, t, i) {
    this._fields.has(e3) && s(false, `${e3} already added to vertex buffer layout`);
    const s2 = t.ElementCount * e(t.ElementType), r2 = this._stride;
    this._fields.set(e3, { constructor: t, size: s2, offset: r2, optional: i }), this._alignFields();
  }
  _alignFields() {
    let e3 = 0, t = 1;
    this._fields.forEach((i) => {
      const s2 = e(i.constructor.ElementType);
      e3 = Math.floor((e3 + s2 - 1) / s2) * s2, i.offset = e3, e3 += i.size, t = Math.max(t, s2);
    }), e3 = Math.floor((e3 + t - 1) / t) * t, this._stride = e3;
  }
  createBuffer(e3) {
    return new K2(this, e3);
  }
  createView(e3) {
    return new K2(this, e3);
  }
  clone() {
    const e3 = new _N();
    return e3._stride = this._stride, e3._fields = /* @__PURE__ */ new Map(), this._fields.forEach((t, i) => e3._fields.set(i, t)), e3.BufferType = this.BufferType, e3;
  }
  get stride() {
    return this._stride;
  }
  get fields() {
    return this._fields;
  }
};
function O2() {
  return new N2();
}
var P2 = class {
  constructor(e3) {
    this.fields = new Array(), e3.fields.forEach((e4, t) => {
      const i = { ...e4, constructor: R2(e4.constructor) };
      this.fields.push([t, i]);
    }), this.stride = e3.stride;
  }
};
var Q2 = [f, y2, o, T, d, E, B, b, U, F, x, A, I, j, O, g, w, L, V, M, v, S, k, q, z, C, D, G, H, J, K, N, P, Q, R, W];
function R2(e3) {
  return `${e3.ElementType}_${e3.ElementCount}`;
}
function S2(e3) {
  return W2.get(e3);
}
var W2 = /* @__PURE__ */ new Map();
Q2.forEach((e3) => W2.set(R2(e3), e3));

export {
  n,
  a2 as a,
  e2 as e,
  N2 as N,
  O2 as O,
  P2 as P
};
//# sourceMappingURL=chunk-B7AMZ4LC.js.map
