import {
  e2 as e,
  h,
  ke
} from "./chunk-VCRP2PLV.js";
import {
  r
} from "./chunk-BDLVUYG2.js";
import {
  s
} from "./chunk-GZ2P4SCJ.js";

// node_modules/@arcgis/core/layers/support/featurePopupQueryUtils.js
async function s2(n, s3, l, u) {
  const c = new Array(s3.length), a = /* @__PURE__ */ new Map(), d = /* @__PURE__ */ new Map(), p = h(n.fieldsIndex, l.outFields), f = u?.hasRequiredFields ?? ke;
  for (let t = 0; t < s3.length; t++) {
    const o = s3[t];
    if (o.isAggregate) {
      c[t] = o;
      continue;
    }
    let i = false;
    if (u?.getPopupTemplate) {
      const t2 = o.origin?.layer ?? o.sourceLayer ?? o.layer, n2 = u.getPopupTemplate(t2);
      if (null == n2) continue;
      const s4 = await r2(n2);
      s(u), i = s4 && s4.arcadeUtils.hasGeometryOperations(n2);
    }
    if (i || !f(o, p)) {
      const e2 = o.getObjectId();
      if (null != e2) {
        a.set(e2, { graphic: o, index: t });
        continue;
      }
      const i2 = o.getGlobalId();
      if (null != i2) {
        d.set(i2, { graphic: o, index: t });
        continue;
      }
    }
    c[t] = o;
  }
  if (!n.queryFeatures || 0 === a.size && 0 === d.size) return c.filter(Boolean);
  const g = [], y = (e2, t) => {
    t && (e2.outFields ??= [], e2.outFields.includes(t) || e2.outFields.push(t));
  };
  if (a.size > 0) {
    const e2 = l.clone();
    y(e2, n.objectIdField), "uniqueIdFields" in n && n.uniqueIdFields?.length && (e2.outFields ??= [], e2.outFields.push(...n.uniqueIdFields)), e2.objectIds = Array.from(a.keys()), g.push({ type: "object-id", query: e2, map: a });
  }
  const m = "globalIdField" in n ? n.globalIdField : null;
  if (null != m && d.size > 0) {
    const e2 = l.clone();
    y(e2, m);
    const o = Array.from(d.keys());
    e2.where = r(l.where, `${m} IN (${o.map((e3) => `'${e3}'`).join(",")})`), g.push({ type: "global-id", query: e2, map: d });
  }
  const b = u?.updateSourceAttributes ?? false;
  for (const { type: e2, query: t, map: o } of g) try {
    const i = await n.queryFeatures(t, u);
    for (const t2 of i.features) {
      const i2 = "object-id" === e2 ? t2.getObjectId() : t2.getGlobalId();
      if (null == i2) continue;
      const n2 = o.get(i2);
      if (!n2) continue;
      const { graphic: s4, index: r3 } = n2;
      if (b && t2.attributes) {
        s4.attributes ??= {};
        for (const e3 of p) e3 in t2.attributes && (s4.attributes[e3] = t2.attributes[e3]);
      }
      const { geometry: l2, origin: u2 } = s4;
      t2.geometry ||= l2, t2.origin = u2, c[r3] = t2;
    }
  } catch {
  }
  return c.filter(Boolean);
}
async function r2(e2) {
  if (e2.expressionInfos?.length || Array.isArray(e2.content) && e2.content.some((e3) => "expression" === e3.type)) return e();
}

export {
  s2 as s,
  r2 as r
};
//# sourceMappingURL=chunk-C6WRFAXG.js.map
