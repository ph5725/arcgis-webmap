import {
  Os,
  Sr,
  cs,
  ee,
  ur,
  vr,
  wr,
  yr
} from "./chunk-XOCYWQ7P.js";
import {
  s,
  t
} from "./chunk-XZOH57EG.js";
import {
  n as n2
} from "./chunk-LSL2QL5U.js";
import {
  N,
  P,
  a,
  f,
  j,
  n,
  y
} from "./chunk-DDDUQRA2.js";

// node_modules/@arcgis/core/geometry/operators/gx/operatorConvexHull.js
var C = class {
  getOperatorType() {
    return 10102;
  }
  supportsCurves() {
    return true;
  }
  accelerateGeometry(e, t2, n3) {
    return false;
  }
  canAccelerateGeometry(e) {
    return false;
  }
  executeMany(e, t2, n3) {
    return new P2(t2, e, n3);
  }
  execute(e, t2) {
    return d(e);
  }
  isConvex(e, t2) {
    if (j(e), e.isEmpty()) return true;
    const u = e.getGeometryType();
    if (u === a.enumPoint) return true;
    if (u === a.enumEnvelope) {
      const t3 = e;
      return t3.getXMin() !== t3.getXMax() && t3.getYMin() !== t3.getYMax();
    }
    if (f(u)) {
      const t3 = e;
      return !t3.getStartXY().equals(t3.getEndXY());
    }
    if (u === a.enumMultiPoint) {
      return 1 === e.getPointCount();
    }
    if (u === a.enumPolyline) {
      const t3 = e;
      return 1 === t3.getPathCount() && 2 === t3.getPointCount() && !t3.getXY(0).equals(t3.getXY(1));
    }
    if (u === a.enumGeometryCollection) {
      const n3 = e;
      return 1 === n3.getGeometryCount() && this.isConvex(n3.getGeometry(0), t2);
    }
    const i = e;
    return !(1 !== i.getPathCount() || i.getPointCount() < 3) && vr(i, 0);
  }
  constructOrientedMinimumBoundingBox(e, t2, n3, r, o) {
    Sr(e, t2, n3, r, o);
  }
};
var P2 = class extends t {
  constructor(e, t2, n3) {
    super(), t2 || P(""), this.m_progressTracker = n3, this.m_index = -1, this.m_bMerge = e, this.m_bDone = false, this.m_inputGeometryCursor = t2;
  }
  getGeometryID() {
    return this.m_index;
  }
  tock() {
    return true;
  }
  getRank() {
    return 1;
  }
  next() {
    if (this.m_bMerge) {
      if (!this.m_bDone) {
        const e = G(this.m_inputGeometryCursor);
        return this.m_bDone = true, e;
      }
      return null;
    }
    if (!this.m_bDone) {
      const e = this.m_inputGeometryCursor.next();
      if (null !== e) return N(e), j(e), this.m_index = this.m_inputGeometryCursor.getGeometryID(), d(e);
      this.m_bDone = true;
    }
    return null;
  }
};
function G(e, t2) {
  const r = new wr();
  let o;
  for (; o = e.next(); ) N(o), j(o), r.addGeometry(o);
  return r.getBoundingGeometry();
}
function d(e, t2) {
  if (j(e), e.isEmpty()) return e.createInstance();
  const u = e.getGeometryType();
  if (f(u)) {
    const t3 = e;
    if (t3.isDegenerate(0)) {
      const e2 = new ee();
      return t3.queryStart(e2), e2;
    }
    if (t3.getGeometryType() === a.enumLine) {
      const n3 = new ee(), r = new Os({ vd: e.getDescription() });
      return t3.queryStart(n3), r.startPathPoint(n3), t3.queryEnd(n3), r.lineToPoint(n3), r;
    }
    {
      const n3 = new Os({ vd: e.getDescription() });
      return n3.addSegment(t3, true), d(n3);
    }
  }
  if (u === a.enumEnvelope) {
    const t3 = e, n3 = new n2();
    if (t3.queryEnvelope(n3), n3.xmin === n3.xmax && n3.ymin === n3.ymax) {
      const e2 = new ee();
      return t3.queryCornerByVal(0, e2), e2;
    }
    if (n3.xmin === n3.xmax || n3.ymin === n3.ymax) {
      const n4 = new ee(), r = new Os({ vd: e.getDescription() });
      return t3.queryCornerByVal(0, n4), r.startPathPoint(n4), t3.queryCornerByVal(1, n4), r.lineToPoint(n4), r;
    }
    {
      const n4 = new ur({ vd: e.getDescription() });
      return n4.addEnvelope(t3, false), n4;
    }
  }
  if (u === a.enumGeometryCollection) return G(cs(e, -1));
  if (M(e)) {
    if (u === a.enumMultiPoint) {
      const t3 = e, n3 = new ee();
      return t3.getPointByVal(0, n3), n3;
    }
    return e;
  }
  n(y(u));
  return yr(e);
}
function M(e, t2) {
  if (j(e), e.isEmpty()) return true;
  const u = e.getGeometryType();
  if (u === a.enumPoint) return true;
  if (u === a.enumEnvelope) {
    const t3 = e;
    return t3.getXMin() !== t3.getXMax() && t3.getYMin() !== t3.getYMax();
  }
  if (f(u)) {
    const t3 = e;
    if (t3.isDegenerate(0)) return false;
    if (u === a.enumLine) return true;
    const n3 = new Os();
    return n3.addSegment(t3, true), M(n3);
  }
  if (u === a.enumMultiPoint) {
    return 1 === e.getPointCount();
  }
  if (u === a.enumPolyline) {
    const t3 = e;
    return !t3.hasNonLinearSegments() && (1 === t3.getPathCount() && 2 === t3.getPointCount() && !t3.getXY(0).equals(t3.getXY(1)));
  }
  if (u === a.enumGeometryCollection) {
    const t3 = e;
    return 1 === t3.getGeometryCount() && M(t3.getGeometry(0));
  }
  const i = e;
  return !(1 !== i.getPathCount() || i.getPointCount() < 3) && vr(i, 0);
}
var v = new C();
function w(e) {
  return v.execute(e, null);
}
function _(e, n3) {
  const r = v.executeMany(new s(e), n3, null);
  return Array.from(r);
}
function D(e) {
  return v.isConvex(e, null);
}
function q() {
  return v.supportsCurves();
}

export {
  w,
  _,
  D,
  q
};
//# sourceMappingURL=chunk-CNITLLXG.js.map
