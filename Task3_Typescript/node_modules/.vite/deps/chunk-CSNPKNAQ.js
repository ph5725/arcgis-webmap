import {
  B2 as B,
  C,
  at,
  et,
  ft,
  mt,
  st
} from "./chunk-JSKJKRHP.js";
import {
  s
} from "./chunk-NKOCAN7K.js";
import {
  E,
  i as i2,
  p
} from "./chunk-VOIQQS36.js";
import {
  e
} from "./chunk-UZRZVWLE.js";
import {
  i,
  y
} from "./chunk-KHEIHGIK.js";
import {
  c
} from "./chunk-FXKORAMT.js";

// node_modules/@arcgis/core/views/3d/webgl-engine/lib/lodRendering/LodResources.js
var m = class {
  constructor(e2, t, r, s2) {
    this.material = e2, this.bufferWriter = e2.createBufferWriter(), this.vertexBufferLayout = this.bufferWriter.vertexBufferLayout, this.buffer = t, this.elementCount = r, this.boundingInfo = s2;
  }
  get numTriangles() {
    return this.elementCount / 3;
  }
  get numVertices() {
    return this.elementCount;
  }
  computeUsedMemory() {
    return this.buffer.byteLength + y;
  }
  getRenderGeometry() {
    return this;
  }
  intersect(e2, t, r, s2, n, i3, o, u) {
    const m3 = this.bufferWriter, a2 = this.buffer;
    m3.intersect(a2, this.material.parameters, null, e2, r, s2, (r2, s3, m4) => c2(r2, s3, m4, e2, t, i3, o, n, u));
  }
};
var a = class {
  constructor(e2) {
    this.engineGeometry = e2;
  }
  get material() {
    return this.engineGeometry.material;
  }
  get numVertices() {
    return this.engineGeometry.attributes.get(e.POSITION).indices.length;
  }
  get numTriangles() {
    return this.engineGeometry.indexCount / 3;
  }
  get boundingInfo() {
    return this.engineGeometry.boundingInfo;
  }
  computeUsedMemory() {
    return Array.from(this.engineGeometry.attributes.values()).reduce((e2, r) => e2 + i(r.data, r.indices), 0);
  }
  getRenderGeometry() {
    const e2 = this.material, t = this.engineGeometry, r = t.attributes, s2 = t.boundingInfo, n = e2.createBufferWriter(), i3 = n.vertexBufferLayout, o = n.elementCount(r), u = i3.createBuffer(o);
    return n.write(null, null, r, null, u, 0), new m(e2, u.buffer, o, s2);
  }
  intersect(e2, t, r, s2, n, i3, o, u) {
    const m3 = this.engineGeometry;
    this.material.intersect(m3, e2.transform.transform, e2, r, s2, (r2, s3, m4) => c2(r2, s3, m4, e2, t, i3, o, n, u));
  }
};
function c2(e2, t, r, o, m3, a2, c3, l3, f2) {
  if (e2 < 0) return;
  if (m3 && !m3(o.rayBegin, o.rayEnd, e2)) return;
  const h2 = new s(a2.layerViewUid, a2.graphicUid(l3), r, c3, f2);
  if ((null == o.results.min.distance || e2 < o.results.min.distance) && o.results.min.set(E.LOD, h2, e2, t, o.transform.transform), (null == o.results.max.distance || e2 > o.results.max.distance) && o.results.max.set(E.LOD, h2, e2, t, o.transform.transform), o.options.store === i2.ALL) {
    const r2 = new p(o.results.min.ray);
    r2.set(E.LOD, h2, e2, t, o.transform.transform), o.results.all.push(r2);
  }
}
var l = class {
  constructor(e2, t = null) {
    this.geometry = e2, this.textures = t;
  }
  get material() {
    return this.geometry.material;
  }
  get numTriangles() {
    return this.geometry.numTriangles;
  }
};
var f = class {
  constructor(t, r, s2) {
    this.components = t, this.minScreenSpaceRadius = r, this.pivotOffset = s2;
    const n = c(this.components.map((e2) => e2.geometry));
    this.numVertices = n.reduce((e2, t2) => e2 + t2.numVertices, 0);
  }
};
var h = class {
  constructor(e2) {
    this.levels = e2, this.levels.sort((e3, t) => e3.minScreenSpaceRadius === t.minScreenSpaceRadius ? e3.numVertices - t.numVertices : e3.minScreenSpaceRadius - t.minScreenSpaceRadius);
  }
  getMaterials() {
    const t = [];
    return this.levels.forEach((e2) => e2.components.forEach((e3) => t.push(e3.geometry.material))), c(t);
  }
  getTextures() {
    const t = new Array();
    return this.levels.forEach((e2) => e2.components.forEach((e3) => {
      null != e3.textures && t.push(...e3.textures);
    })), c(t);
  }
  getGeometries() {
    const t = new Array();
    return this.levels.forEach((e2) => e2.components.forEach((e3) => {
      t.push(e3.geometry);
    })), c(t);
  }
  getEngineGeometries() {
    return this.getGeometries().map((e2) => e2.engineGeometry).filter((e2) => null != e2);
  }
  computeUsedMemory() {
    const e2 = this.getGeometries(), t = this.getTextures(), r = e2.reduce((e3, t2) => e3 + t2.computeUsedMemory(), 0);
    return t.reduce((e3, t2) => e3 + t2.usedMemory, 0) + r;
  }
};

// node_modules/@arcgis/core/views/3d/layers/graphics/primitiveObjectSymbolUtils.js
function S(e2) {
  switch (e2) {
    case "sphere":
    case "cube":
    case "diamond":
    case "cylinder":
    case "cone":
    case "inverted-cone":
    case "tetrahedron":
      return true;
  }
  return false;
}
function l2(S2, l3) {
  const p2 = (n, s2, a2 = false) => new h(n.map((n2) => {
    const c3 = s2(n2.tesselation);
    return a2 && mt(c3), new f([new l(new a(c3))], n2.minScreenSpaceRadius);
  }));
  switch (S2) {
    case "sphere":
      return p2([{ tesselation: 0, minScreenSpaceRadius: 0 }, { tesselation: 1, minScreenSpaceRadius: 8 }, { tesselation: 2, minScreenSpaceRadius: 16 }, { tesselation: 3, minScreenSpaceRadius: 50 }, { tesselation: 4, minScreenSpaceRadius: 250 }], (e2) => st(l3, 0.5, e2, true));
    case "cube":
      return p2([{ tesselation: 0, minScreenSpaceRadius: 0 }], () => C(l3, 1));
    case "cone":
      return p2(m2, (e2) => at(l3, 1, 0.5, e2, false), true);
    case "inverted-cone":
      return p2(m2, (e2) => at(l3, 1, 0.5, e2, true), true);
    case "cylinder":
      return p2(m2, (e2) => ft(l3, 1, 0.5, e2, [0, 0, 1], [0, 0, 0.5]));
    case "tetrahedron":
      return p2([{ tesselation: 0, minScreenSpaceRadius: 0 }], () => et(l3, 1), true);
    case "diamond":
      return p2([{ tesselation: 0, minScreenSpaceRadius: 0 }], () => B(l3, 1), true);
    default:
      return;
  }
}
var m2 = [{ tesselation: 6, minScreenSpaceRadius: 0 }, { tesselation: 18, minScreenSpaceRadius: 7 }, { tesselation: 64, minScreenSpaceRadius: 65 }];

export {
  a,
  l,
  f,
  h,
  S,
  l2
};
//# sourceMappingURL=chunk-CSNPKNAQ.js.map
