import {
  f,
  t as t4,
  t2 as t5
} from "./chunk-OOBS22NY.js";
import {
  n2 as n5
} from "./chunk-GEY3MNEN.js";
import {
  n as n4,
  s as s2
} from "./chunk-KRZJ7TLV.js";
import {
  R as R3
} from "./chunk-YEQJ7SMN.js";
import {
  E as E2,
  o as o2
} from "./chunk-733XT7D4.js";
import {
  t2 as t3
} from "./chunk-TAPCW5Z5.js";
import {
  t as t2
} from "./chunk-5WTH3GBK.js";
import {
  B as B2,
  Q,
  a as a2
} from "./chunk-56ZY2WLU.js";
import {
  n as n2
} from "./chunk-6EOJZ6DP.js";
import {
  n as n3
} from "./chunk-CHTPXQAG.js";
import {
  R as R2,
  S as S2,
  a,
  c as c2,
  s
} from "./chunk-H6F6O2KE.js";
import {
  A as A2,
  B,
  C,
  D,
  E,
  G,
  I,
  L,
  M,
  N,
  O,
  P,
  R,
  S,
  T,
  X,
  Y,
  _,
  __,
  c,
  e,
  o,
  t,
  u,
  w,
  z
} from "./chunk-BZYXFNL4.js";
import {
  n
} from "./chunk-PSZLDJJA.js";
import {
  A,
  r2 as r
} from "./chunk-GZ2P4SCJ.js";
import {
  has
} from "./chunk-FXKORAMT.js";

// node_modules/@arcgis/core/views/2d/engine/webgl/shaders/MaterialPrograms.js
var t6 = (e7) => {
  let r3 = "";
  r3 += e7[0].toUpperCase();
  for (let t9 = 1; t9 < e7.length; t9++) {
    const s4 = e7[t9];
    s4 === s4.toUpperCase() ? (r3 += "_", r3 += s4) : r3 += s4.toUpperCase();
  }
  return r3;
};
var s3 = (e7) => {
  const s4 = {};
  for (const r3 in e7) {
    s4[t6(r3)] = e7[r3];
  }
  return n4(s4);
};
var o3 = (r3, t9, o4, a3) => {
  const n9 = r3 + r3.slice(Math.max(0, r3.lastIndexOf("/"))), l = t9 + t9.slice(Math.max(0, t9.lastIndexOf("/"))), p = s3(a3);
  return { attributes: o4, shaders: { vertexShader: p + n5(`${n9}.vert`), fragmentShader: p + n5(`${l}.frag`) } };
};

// node_modules/@arcgis/core/views/2d/engine/webgl/VertexStream.js
var n6 = class {
  constructor(i, n9) {
    this._rctx = i, this._attributes = [{ name: "position", offset: 0, type: O.SHORT, count: 2 }], this.layout = { hash: t3(this._attributes), attributes: this._attributes, stride: 4 }, this._vertexBuffer = E2.createVertex(i, Y.STATIC_DRAW, new Uint16Array(n9)), this._vao = new o2(i, /* @__PURE__ */ new Map([["a_position", 0]]), /* @__PURE__ */ new Map([["geometry", [new t2("a_position", 2, O.SHORT, 0, 4)]]]), /* @__PURE__ */ new Map([["geometry", this._vertexBuffer]])), this._count = n9.length / 2;
  }
  bind() {
    this._rctx.bindVAO(this._vao);
  }
  unbind() {
    this._rctx.bindVAO(null);
  }
  dispose() {
    this._vao.dispose();
  }
  draw() {
    this._rctx.bindVAO(this._vao), this._rctx.drawArrays(R.TRIANGLE_STRIP, 0, this._count);
  }
};

// node_modules/@arcgis/core/views/webgl/ContextState.js
var h = class {
  constructor() {
    this.blend = false, this.blendColor = { r: 0, g: 0, b: 0, a: 0 }, this.blendFunction = { srcRGB: A2.ONE, dstRGB: A2.ZERO, srcAlpha: A2.ONE, dstAlpha: A2.ZERO }, this.blendEquation = { mode: T.ADD, modeAlpha: T.ADD }, this.colorMask = { r: true, g: true, b: true, a: true }, this.faceCulling = false, this.cullFace = S.BACK, this.frontFace = I.CCW, this.scissorTest = false, this.scissorRect = { x: 0, y: 0, width: 0, height: 0 }, this.depthTest = false, this.depthFunction = C.LESS, this.clearDepth = 1, this.depthWrite = true, this.depthRange = { zNear: 0, zFar: 1 }, this.viewport = null, this.stencilTest = false, this.polygonOffsetFill = false, this.polygonOffset = [0, 0], this.stencilFunction = { face: S.FRONT_AND_BACK, func: C.ALWAYS, ref: 0, mask: 1 }, this.clearStencil = 0, this.stencilWriteMask = 1, this.stencilOperation = { face: S.FRONT_AND_BACK, fail: D.KEEP, zFail: D.KEEP, zPass: D.KEEP }, this.clearColor = { r: 0, g: 0, b: 0, a: 0 }, this.program = null, this.vertexBuffer = null, this.indexBuffer = null, this.uniformBuffer = null, this.pixelPackBuffer = null, this.pixelUnpackBuffer = null, this.copyReadBuffer = null, this.copyWriteBuffer = null, this.transformFeedbackBuffer = null, this.uniformBufferBindingPoints = new Array(), this.transformBufferBindingPoints = new Array(), this.readFramebuffer = null, this.drawFramebuffer = null, this.drawBuffers = { defaultFramebuffer: [u.BACK], fbos: /* @__PURE__ */ new WeakMap() }, this.renderbuffer = null, this.activeTexture = 0, this.textureUnitMap = new Array(), this.vertexArrayObject = null;
  }
};

// node_modules/@arcgis/core/views/webgl/AllocationTracer.js
var e2 = class {
  constructor(e7) {
    this._objectType = e7, this._active = /* @__PURE__ */ new Map();
  }
  get _stack() {
    const e7 = new Error().stack.split("\n");
    return e7.shift(), e7.shift(), e7.shift(), e7.join("\n");
  }
  add(e7) {
    this._active.set(e7, new t7(this._stack));
  }
  remove(e7) {
    this._active.delete(e7);
  }
  addReference(e7) {
    const t9 = this._active.get(e7);
    t9 && t9.retains.push(this._stack);
  }
  removeReference(e7) {
    const t9 = this._active.get(e7);
    t9 && t9.releases.push(this._stack);
  }
  resetLog() {
    const e7 = /* @__PURE__ */ new Map();
    let t9 = "";
    this._active.forEach((s5, { usedMemory: r4 }) => {
      e7.has(s5.from) || (e7.set(s5.from, /* @__PURE__ */ new Map()), s5.retains.length > 0 && (t9 += `  First reference count mismatch:
  Retain:
    ${s5.retains.join("\n\n    ")}

  Release:    ${s5.releases.join("\n\n    ")}
`));
      const n9 = e7.get(s5.from);
      n9.set(r4 ?? 0, n9.get(r4 ?? 0) ?? 1);
    }), this._active.clear();
    let s4 = 0;
    const r3 = new Array();
    return e7.forEach((e8, t10) => {
      let n9 = 0;
      e8.forEach((e9, t11) => n9 += e9 * t11), e8.set(-1, n9), s4 += n9, r3.push([t10, e8]);
    }), e7.clear(), r3.sort((e8, t10) => t10[1].get(-1) - e8[1].get(-1)), r3.reduce((e8, [t10, s5]) => {
      const r4 = Math.round(s5.get(-1) / 1024);
      s5.delete(-1);
      return e8 += `  ${r4}KB from ${Array.from(s5.values()).reduce((e9, t11) => e9 + t11, 0)} allocations at ${t10}
`;
    }, `Total ${this._objectType} memory: ${Math.round(s4 / 1024)}KB
${t9}`);
  }
};
var t7 = class {
  constructor(e7) {
    this.from = e7, this.retains = new Array(), this.releases = new Array();
  }
};

// node_modules/@arcgis/core/views/webgl/InstanceCounter.js
var e3 = { RECORD_ALLOCATIONS: false };
var n7 = class {
  constructor() {
    for (this._current = new Array(), this._allocations = e3.RECORD_ALLOCATIONS ? new e2("WebGLObject") : null; this._current.length < o.COUNT; ) this._current.push(0);
  }
  increment(t9, r3, e7 = 1) {
    this._current[t9] += e7, this._allocations?.add(r3);
  }
  decrement(t9, r3, e7 = 1) {
    this._current[t9] -= e7, this._allocations?.remove(r3);
  }
  get current() {
    return this._current;
  }
  get total() {
    return this.current.reduce((t9, e7, n9) => t9 + (n9 < o.UNCOUNTED ? e7 : 0), 0);
  }
  get resourceInformation() {
    let t9 = "";
    if (this.total > 0) {
      t9 += "Live objects:\n";
      for (let e7 = 0; e7 < o.COUNT; ++e7) {
        const n9 = this._current[e7];
        n9 > 0 && (t9 += `${o[e7]}: ${n9}
`);
      }
    }
    return t9 += this._allocations?.resetLog(), t9;
  }
};

// node_modules/@arcgis/core/views/webgl/Parameters.js
var e4 = class {
  constructor(e7, t9, r3) {
    const a3 = t9.textureFilterAnisotropic;
    this.versionString = e7.getParameter(e7.VERSION), this.maxVertexTextureImageUnits = e7.getParameter(e7.MAX_VERTEX_TEXTURE_IMAGE_UNITS), this.maxVertexAttributes = e7.getParameter(e7.MAX_VERTEX_ATTRIBS);
    const m = r3.maxAnisotropy ?? 1 / 0;
    this.maxMaxAnisotropy = a3 ? Math.min(e7.getParameter(a3.MAX_TEXTURE_MAX_ANISOTROPY), m) : 1, this.maxTextureImageUnits = e7.getParameter(e7.MAX_TEXTURE_IMAGE_UNITS), this.maxTextureSize = e7.getParameter(e7.MAX_TEXTURE_SIZE), this.maxPreferredTexturePixels = r3.maxPreferredTexturePixels ?? 1 / 0, this.maxRenderbufferSize = e7.getParameter(e7.MAX_RENDERBUFFER_SIZE), this.maxViewportDims = e7.getParameter(e7.MAX_VIEWPORT_DIMS), this.maxUniformBufferBindings = e7.getParameter(e7.MAX_UNIFORM_BUFFER_BINDINGS), this.maxVertexUniformBlocks = e7.getParameter(e7.MAX_VERTEX_UNIFORM_BLOCKS), this.maxFragmentUniformBlocks = e7.getParameter(e7.MAX_FRAGMENT_UNIFORM_BLOCKS), this.maxUniformBlockSize = e7.getParameter(e7.MAX_UNIFORM_BLOCK_SIZE), this.uniformBufferOffsetAlignment = e7.getParameter(e7.UNIFORM_BUFFER_OFFSET_ALIGNMENT), this.maxArrayTextureLayers = e7.getParameter(e7.MAX_ARRAY_TEXTURE_LAYERS), this.maxSamples = e7.getParameter(e7.MAX_SAMPLES), this.maxDrawBuffers = e7.getParameter(e7.MAX_DRAW_BUFFERS);
  }
};

// node_modules/@arcgis/core/views/webgl/AppleAmdDriverHelper.js
var n8 = class _n {
  constructor(r3) {
    this._rctx = r3, this._indexBuffer = this._createIndexbuffer(), this._program = this._createHelperProgram();
  }
  static getShaderSources() {
    return { vertex: "#version 300 es\n    precision highp float;\n\n    void main(void) {\n      gl_Position = vec4(0.0, 0.0, float(gl_VertexID)-2.0, 1.0);\n    }", fragment: "#version 300 es\n    precision highp float;\n\n    out vec4 fragColor;\n\n    void main(void) {\n      fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n    }" };
  }
  _createHelperProgram() {
    const r3 = _n.getShaderSources();
    return this._rctx.programCache.acquire(r3.vertex, r3.fragment, /* @__PURE__ */ new Map([]));
  }
  _createIndexbuffer() {
    return E2.createIndex(this._rctx, Y.STATIC_DRAW, new Uint32Array([0]));
  }
  run() {
    this._program.compiled && this._indexBuffer && (this._rctx.bindVAO(null), this._rctx.useProgram(this._program), this._rctx.bindBuffer(this._indexBuffer, N.ELEMENT_ARRAY_BUFFER), this._rctx.drawElements(R.POINTS, 1, O.UNSIGNED_INT, 0));
  }
  dispose() {
    this._program.dispose(), this._indexBuffer.dispose();
  }
  get test() {
  }
};

// node_modules/@arcgis/core/views/webgl/testAppleAmdDrawArrays.js
var d = class extends t5 {
  constructor(e7) {
    super(), this._rctx = e7, this._helperProgram = null, has("mac") && has("chrome") && (this._program = this._prepareProgram(), this._helperProgram = this._prepareHelperProgram());
  }
  dispose() {
    super.dispose(), this._helperProgram?.dispose(), this._helperProgram = null;
  }
  _test(e7) {
    const r3 = this._rctx, f2 = r3.getBoundFramebufferObject(), { x: d2, y: h2, width: u2, height: _4 } = r3.getViewport();
    r3.resetState();
    const v2 = new a(1);
    v2.wrapMode = P.CLAMP_TO_EDGE, v2.samplingMode = L.NEAREST;
    const P2 = new R3(r3, v2), w2 = E2.createIndex(this._rctx, Y.STATIC_DRAW, new Uint8Array([0]));
    r3.bindFramebuffer(P2), r3.setViewport(0, 0, 1, 1), r3.useProgram(this._helperProgram), r3.bindBuffer(w2, N.ELEMENT_ARRAY_BUFFER), r3.drawElements(R.POINTS, 1, O.UNSIGNED_BYTE, 0), r3.useProgram(e7), r3.bindVAO(null), r3.drawArrays(R.TRIANGLES, 0, 258);
    const x = new Uint8Array(4);
    return P2.readPixels(0, 0, 1, 1, M.RGBA, X.UNSIGNED_BYTE, x), r3.setViewport(d2, h2, u2, _4), r3.bindFramebuffer(f2), P2.dispose(), w2.dispose(), 255 === x[0];
  }
  _prepareProgram() {
    const r3 = 85, t9 = `#version 300 es
    precision highp float;

    out float triangleId;

    const vec3 triangleVertices[3] = vec3[3](vec3(-0.5, -0.5, 0.0), vec3(0.5, -0.5, 0.0), vec3(0.0, 0.5, 0.0));

    void main(void) {
      triangleId = floor(float(gl_VertexID)/3.0);

      vec3 position = triangleVertices[gl_VertexID % 3];
      float offset = triangleId / ${n2.float(r3)};
      position.z = 0.5 - offset;

      gl_Position = vec4(position, 1.0);
    }
    `, o4 = `#version 300 es
    precision highp float;

    in float triangleId;

    out vec4 fragColor;

    void main(void) {
      fragColor = triangleId == ${n2.float(r3)} ? vec4(0.0, 1.0, 0.0, 1.0) : vec4(1.0, 0.0, 0.0, 1.0);
    }
    `;
    return this._rctx.programCache.acquire(t9, o4, /* @__PURE__ */ new Map([]));
  }
  _prepareHelperProgram() {
    const e7 = n8.getShaderSources();
    return this._rctx.programCache.acquire(e7.vertex, e7.fragment, /* @__PURE__ */ new Map([]));
  }
};

// node_modules/@arcgis/core/views/webgl/testFloatBufferBlend.js
var g = class extends t5 {
  constructor(e7) {
    if (super(), this._rctx = e7, !e7.gl) return;
    if (!(e7.capabilities.colorBufferFloat?.textureFloat && e7.capabilities.colorBufferFloat?.floatBlend)) return;
    const r3 = "\n    precision highp float;\n    attribute vec2 a_pos;\n\n    void main() {\n      gl_Position = vec4(a_pos * 2.0 - 1.0, 0.0, 1.0);\n    }\n    ", t9 = "\n     precision highp float;\n\n     void main() {\n      gl_FragColor = vec4(0.5, 0.5, 0.5, 0.5);\n     }\n    ";
    this._program = e7.programCache.acquire(r3, t9, /* @__PURE__ */ new Map([["a_pos", 0]]));
  }
  _test(d2) {
    const g2 = this._rctx, _4 = new a(1);
    _4.wrapMode = P.CLAMP_TO_EDGE, _4.dataType = X.FLOAT, _4.internalFormat = B.RGBA32F, _4.samplingMode = L.NEAREST;
    const w2 = new R3(g2, _4), A3 = E2.createVertex(g2, Y.STATIC_DRAW, new Uint16Array([0, 0, 1, 0, 0, 1, 1, 1])), T2 = new o2(g2, /* @__PURE__ */ new Map([["a_pos", 0]]), /* @__PURE__ */ new Map([["geometry", [new t2("a_pos", 2, O.UNSIGNED_SHORT, 0, 4)]]]), /* @__PURE__ */ new Map([["geometry", A3]]));
    g2.gl.getError(), g2.useProgram(d2);
    const j = g2.getBoundFramebufferObject(), { x, y: E4, width: h2, height: F } = g2.getViewport();
    g2.bindFramebuffer(w2), g2.setViewport(0, 0, 1, 1), g2.bindVAO(T2), g2.drawArrays(R.TRIANGLE_STRIP, 0, 4);
    const O2 = B2({ blending: a2 });
    g2.setPipelineState(O2), g2.drawArrays(R.TRIANGLE_STRIP, 0, 4);
    const y = g2.gl.getError();
    return g2.setViewport(x, E4, h2, F), g2.bindFramebuffer(j), T2.dispose(), w2.dispose(), y !== __.INVALID_OPERATION || (console.warn("Device claims support for WebGL extension EXT_float_blend but does not support it. Using fall back."), false);
  }
};

// node_modules/@arcgis/core/views/webgl/WebGLDriverTest.js
var r2 = class {
  constructor(r3) {
    this.rctx = r3, this.floatBufferBlend = new g(r3), this.svgPremultipliesAlpha = new f(r3), this.drawArraysRequiresIndicesTypeReset = new d(r3);
  }
  dispose() {
    this.svgPremultipliesAlpha.dispose(), this.floatBufferBlend.dispose(), this.drawArraysRequiresIndicesTypeReset.dispose();
  }
};

// node_modules/@arcgis/core/views/webgl/capabilities/load.js
function _2(_4, E4) {
  if (E4.compressedTextureETC) return null;
  const R5 = _4.getExtension("WEBGL_compressed_texture_etc");
  return R5 ? { COMPRESSED_R11_EAC: R5.COMPRESSED_R11_EAC, COMPRESSED_SIGNED_R11_EAC: R5.COMPRESSED_SIGNED_R11_EAC, COMPRESSED_RG11_EAC: R5.COMPRESSED_RG11_EAC, COMPRESSED_SIGNED_RG11_EAC: R5.COMPRESSED_SIGNED_RG11_EAC, COMPRESSED_RGB8_ETC2: R5.COMPRESSED_RGB8_ETC2, COMPRESSED_SRGB8_ETC2: R5.COMPRESSED_SRGB8_ETC2, COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2: R5.COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2, COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2: R5.COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2, COMPRESSED_RGBA8_ETC2_EAC: R5.COMPRESSED_RGBA8_ETC2_EAC, COMPRESSED_SRGB8_ALPHA8_ETC2_EAC: R5.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC } : null;
}
function E3(_4, E4) {
  if (E4.compressedTextureS3TC) return null;
  const R5 = _4.getExtension("WEBGL_compressed_texture_s3tc");
  return R5 ? { COMPRESSED_RGB_S3TC_DXT1: R5.COMPRESSED_RGB_S3TC_DXT1_EXT, COMPRESSED_RGBA_S3TC_DXT1: R5.COMPRESSED_RGBA_S3TC_DXT1_EXT, COMPRESSED_RGBA_S3TC_DXT3: R5.COMPRESSED_RGBA_S3TC_DXT3_EXT, COMPRESSED_RGBA_S3TC_DXT5: R5.COMPRESSED_RGBA_S3TC_DXT5_EXT } : null;
}
function R4(_4, E4) {
  if (E4.textureFilterAnisotropic) return null;
  const R5 = _4.getExtension("EXT_texture_filter_anisotropic") || _4.getExtension("MOZ_EXT_texture_filter_anisotropic") || _4.getExtension("WEBKIT_EXT_texture_filter_anisotropic");
  return R5 ? { MAX_TEXTURE_MAX_ANISOTROPY: R5.MAX_TEXTURE_MAX_ANISOTROPY_EXT, TEXTURE_MAX_ANISOTROPY: R5.TEXTURE_MAX_ANISOTROPY_EXT } : null;
}
function t8(_4, E4) {
  const R5 = !E4.colorBufferHalfFloat && _4.getExtension("EXT_color_buffer_half_float") || !E4.colorBufferFloat && _4.getExtension("EXT_color_buffer_float"), t9 = !E4.colorBufferFloat && _4.getExtension("EXT_color_buffer_float"), S4 = !E4.floatBlend && !E4.colorBufferFloat && _4.getExtension("EXT_float_blend");
  return R5 || t9 || S4 ? { textureFloat: !!t9, textureHalfFloat: !!R5, floatBlend: !!S4, R16F: _4.R16F, RG16F: _4.RG16F, RGBA16F: _4.RGBA16F, R32F: _4.R32F, RG32F: _4.RG32F, RGBA32F: _4.RGBA32F, R11F_G11F_B10F: _4.R11F_G11F_B10F, RGB16F: _4.RGB16F } : null;
}
function S3(_4, E4, R5, t9, S4) {
  if (t9) return true;
  if (E4[R5]) return false;
  for (const e7 of S4) if (_4.getExtension(e7)) return true;
  return false;
}
function e5(_4, E4) {
  if (E4.textureNorm16) return null;
  const R5 = _4.getExtension("EXT_texture_norm16");
  return R5 ? { R16: R5.R16_EXT, RG16: R5.RG16_EXT, RGB16: R5.RGB16_EXT, RGBA16: R5.RGBA16_EXT, R16_SNORM: R5.R16_SNORM_EXT, RG16_SNORM: R5.RG16_SNORM_EXT, RGB16_SNORM: R5.RGB16_SNORM_EXT, RGBA16_SNORM: R5.RGBA16_SNORM_EXT } : null;
}

// node_modules/@arcgis/core/views/webgl/capabilities/LoseContext.js
function e6(e7, t9) {
  const n9 = t9.loseContext && e7.getExtension("WEBGL_lose_context");
  return n9 ? { loseRenderingContext: () => n9.loseContext() } : null;
}

// node_modules/@arcgis/core/views/webgl/capabilities/Capabilities.js
var _3 = class {
  constructor(e7, t9) {
    this._gl = e7, this._compressedTextureETC = null, this._compressedTextureS3TC = null, this._textureFilterAnisotropic = null, this._colorBufferFloat = null, this._loseContext = null, this._textureNorm16 = null, this._textureFloatLinear = null, this._parallelShaderCompile = null, this._rendererInfo = null, this._disabledExtensions = t9.disabledExtensions || {}, this._debugWebGLExtensions = t9.debugWebGLExtensions || {};
  }
  get compressedTextureETC() {
    return this._compressedTextureETC ??= _2(this._gl, this._disabledExtensions), this._compressedTextureETC;
  }
  get compressedTextureS3TC() {
    return this._compressedTextureS3TC ??= E3(this._gl, this._disabledExtensions), this._compressedTextureS3TC;
  }
  get textureFilterAnisotropic() {
    return this._textureFilterAnisotropic ??= R4(this._gl, this._disabledExtensions), this._textureFilterAnisotropic;
  }
  get disjointTimerQuery() {
    return this._disjointTimerQuery ??= t4(this._gl, this._disabledExtensions), this._disjointTimerQuery;
  }
  get colorBufferFloat() {
    return this._colorBufferFloat ??= t8(this._gl, this._disabledExtensions), this._colorBufferFloat;
  }
  get textureNorm16() {
    return this._textureNorm16 ??= e5(this._gl, this._disabledExtensions), this._textureNorm16;
  }
  get textureFloatLinear() {
    return this._textureFloatLinear ??= S3(this._gl, this._disabledExtensions, "textureFloatLinear", false, ["OES_texture_float_linear"]), this._textureFloatLinear;
  }
  get parallelShaderCompile() {
    return this._parallelShaderCompile ??= S3(this._gl, this._disabledExtensions, "parallelShaderCompile", false, ["KHR_parallel_shader_compile"]), this._parallelShaderCompile;
  }
  get loseContext() {
    return this._loseContext ??= e6(this._gl, this._debugWebGLExtensions), this._loseContext;
  }
  get rendererInfo() {
    return this._rendererInfo ??= n3(this._gl), this._rendererInfo;
  }
  enable(e7) {
    return this[e7];
  }
};

// node_modules/@arcgis/core/views/webgl/RenderingContext.js
var v = class {
  constructor(t9, e7) {
    this.gl = t9, this.instanceCounter = new n7(), this.programCache = new s2(this), this._transformFeedbackRequestInfo = null, this._state = new h(), this._numOfDrawCalls = 0, this._numOfTriangles = 0, this.configure(e7);
  }
  configure(e7) {
    this._capabilities = new _3(this.gl, e7), this._parameters = new e4(this.gl, this._capabilities, e7), S2.TEXTURE_UNIT_FOR_UPDATES = this._parameters.maxTextureImageUnits - 1;
    const s4 = this.gl.getParameter(this.gl.VIEWPORT);
    this._state = new h(), this._state.viewport = { x: s4[0], y: s4[1], width: s4[2], height: s4[3] }, this._stateTracker = new Q({ setBlending: (t9) => {
      if (t9) {
        this.setBlendingEnabled(true), this.setBlendEquationSeparate(t9.opRgb, t9.opAlpha), this.setBlendFunctionSeparate(t9.srcRgb, t9.dstRgb, t9.srcAlpha, t9.dstAlpha);
        const e8 = t9.color;
        this.setBlendColor(e8.r, e8.g, e8.b, e8.a);
      } else this.setBlendingEnabled(false);
    }, setCulling: (t9) => {
      t9 ? (this.setFaceCullingEnabled(true), this.setCullFace(t9.face), this.setFrontFace(t9.mode)) : this.setFaceCullingEnabled(false);
    }, setPolygonOffset: (t9) => {
      t9 ? (this.setPolygonOffsetFillEnabled(true), this.setPolygonOffset(t9.factor, t9.units)) : this.setPolygonOffsetFillEnabled(false);
    }, setDepthTest: (t9) => {
      t9 ? (this.setDepthTestEnabled(true), this.setDepthFunction(t9.func)) : this.setDepthTestEnabled(false);
    }, setStencilTest: (t9) => {
      if (t9) {
        this.setStencilTestEnabled(true);
        const e8 = t9.function;
        this.setStencilFunction(e8.func, e8.ref, e8.mask);
        const s5 = t9.operation;
        this.setStencilOp(s5.fail, s5.zFail, s5.zPass);
      } else this.setStencilTestEnabled(false);
    }, setDepthWrite: (t9) => {
      t9 ? (this.setDepthWriteEnabled(true), this.setDepthRange(t9.zNear, t9.zFar)) : this.setDepthWriteEnabled(false);
    }, setColorWrite: (t9) => {
      t9 ? this.setColorMask(t9.r, t9.g, t9.b, t9.a) : this.setColorMask(false, false, false, false);
    }, setStencilWrite: (t9) => {
      t9 ? this.setStencilWriteMask(t9.mask) : this.setStencilWriteMask(0);
    }, setDrawBuffers: (t9) => {
      if (t9) this.setDrawBuffers(t9.buffers);
      else {
        const { drawFramebuffer: t10 } = this._state;
        null === t10 ? this.setDrawBuffers([u.BACK]) : 0 === t10.colorAttachments.length ? this.setDrawBuffers([u.NONE]) : this.setDrawBuffers([e]);
      }
    } }), this.enforceState(), r(this._driverTest), this._driverTest = new r2(this);
  }
  updateOptions(t9) {
    this._parameters = new e4(this.gl, this._capabilities, t9);
  }
  dispose() {
    r(this._driverTest), this.programCache.dispose(), this.bindVAO(null), this.unbindBuffer(N.ARRAY_BUFFER), this.unbindBuffer(N.ELEMENT_ARRAY_BUFFER), this.unbindBuffer(N.UNIFORM_BUFFER), this._state.uniformBufferBindingPoints.length = 0, this.unbindBuffer(N.PIXEL_PACK_BUFFER), this.unbindBuffer(N.PIXEL_UNPACK_BUFFER), this.unbindBuffer(N.COPY_READ_BUFFER), this.unbindBuffer(N.COPY_WRITE_BUFFER), this._state.textureUnitMap.length = 0, c2() && console.log(this.instanceCounter.resourceInformation);
  }
  get driverTest() {
    return this._driverTest;
  }
  get contextAttributes() {
    return this.gl.getContextAttributes();
  }
  get parameters() {
    return this._parameters;
  }
  setPipelineState(t9) {
    this._stateTracker.setPipeline(t9);
  }
  setBlendingEnabled(t9) {
    this._state.blend !== t9 && (true === t9 ? this.gl.enable(this.gl.BLEND) : this.gl.disable(this.gl.BLEND), this._state.blend = t9, this._stateTracker.invalidateBlending());
  }
  externalProgramUpdate() {
    this._state.program?.stop(), this._state.program = null;
  }
  externalTextureUnitUpdate(t9, e7) {
    for (let s4 = 0; s4 < t9.length; ++s4) this._state.textureUnitMap[t9[s4]] = null;
    e7 >= 0 && (this._state.activeTexture = e7);
  }
  externalVertexArrayObjectUpdate() {
    this.gl.bindVertexArray(null), this._state.vertexArrayObject = null, this._state.vertexBuffer = null, this._state.indexBuffer = null;
  }
  externalVertexBufferUpdate() {
    this._state.vertexBuffer = null;
  }
  externalIndexBufferUpdate() {
    this._state.indexBuffer = null;
  }
  setBlendColor(t9, e7, s4, i) {
    t9 === this._state.blendColor.r && e7 === this._state.blendColor.g && s4 === this._state.blendColor.b && i === this._state.blendColor.a || (this.gl.blendColor(t9, e7, s4, i), this._state.blendColor.r = t9, this._state.blendColor.g = e7, this._state.blendColor.b = s4, this._state.blendColor.a = i, this._stateTracker.invalidateBlending());
  }
  setBlendFunction(t9, e7) {
    t9 === this._state.blendFunction.srcRGB && e7 === this._state.blendFunction.dstRGB || (this.gl.blendFunc(t9, e7), this._state.blendFunction.srcRGB = t9, this._state.blendFunction.srcAlpha = t9, this._state.blendFunction.dstRGB = e7, this._state.blendFunction.dstAlpha = e7, this._stateTracker.invalidateBlending());
  }
  setBlendFunctionSeparate(t9, e7, s4, i) {
    this._state.blendFunction.srcRGB === t9 && this._state.blendFunction.srcAlpha === s4 && this._state.blendFunction.dstRGB === e7 && this._state.blendFunction.dstAlpha === i || (this.gl.blendFuncSeparate(t9, e7, s4, i), this._state.blendFunction.srcRGB = t9, this._state.blendFunction.srcAlpha = s4, this._state.blendFunction.dstRGB = e7, this._state.blendFunction.dstAlpha = i, this._stateTracker.invalidateBlending());
  }
  setBlendEquation(t9) {
    this._state.blendEquation.mode !== t9 && (this.gl.blendEquation(t9), this._state.blendEquation.mode = t9, this._state.blendEquation.modeAlpha = t9, this._stateTracker.invalidateBlending());
  }
  setBlendEquationSeparate(t9, e7) {
    this._state.blendEquation.mode === t9 && this._state.blendEquation.modeAlpha === e7 || (this.gl.blendEquationSeparate(t9, e7), this._state.blendEquation.mode = t9, this._state.blendEquation.modeAlpha = e7, this._stateTracker.invalidateBlending());
  }
  setColorMask(t9, e7, s4, i) {
    this._state.colorMask.r === t9 && this._state.colorMask.g === e7 && this._state.colorMask.b === s4 && this._state.colorMask.a === i || (this.gl.colorMask(t9, e7, s4, i), this._state.colorMask.r = t9, this._state.colorMask.g = e7, this._state.colorMask.b = s4, this._state.colorMask.a = i, this._stateTracker.invalidateColorWrite());
  }
  setClearColor(t9, e7, s4, i) {
    this._state.clearColor.r === t9 && this._state.clearColor.g === e7 && this._state.clearColor.b === s4 && this._state.clearColor.a === i || (this.gl.clearColor(t9, e7, s4, i), this._state.clearColor.r = t9, this._state.clearColor.g = e7, this._state.clearColor.b = s4, this._state.clearColor.a = i);
  }
  setFaceCullingEnabled(t9) {
    this._state.faceCulling !== t9 && (true === t9 ? this.gl.enable(this.gl.CULL_FACE) : this.gl.disable(this.gl.CULL_FACE), this._state.faceCulling = t9, this._stateTracker.invalidateCulling());
  }
  setPolygonOffsetFillEnabled(t9) {
    this._state.polygonOffsetFill !== t9 && (true === t9 ? this.gl.enable(this.gl.POLYGON_OFFSET_FILL) : this.gl.disable(this.gl.POLYGON_OFFSET_FILL), this._state.polygonOffsetFill = t9, this._stateTracker.invalidatePolygonOffset());
  }
  setPolygonOffset(t9, e7) {
    this._state.polygonOffset[0] === t9 && this._state.polygonOffset[1] === e7 || (this._state.polygonOffset[0] = t9, this._state.polygonOffset[1] = e7, this.gl.polygonOffset(t9, e7), this._stateTracker.invalidatePolygonOffset());
  }
  setCullFace(t9) {
    this._state.cullFace !== t9 && (this.gl.cullFace(t9), this._state.cullFace = t9, this._stateTracker.invalidateCulling());
  }
  setFrontFace(t9) {
    this._state.frontFace !== t9 && (this.gl.frontFace(t9), this._state.frontFace = t9, this._stateTracker.invalidateCulling());
  }
  setScissorTestEnabled(t9) {
    this._state.scissorTest !== t9 && (true === t9 ? this.gl.enable(this.gl.SCISSOR_TEST) : this.gl.disable(this.gl.SCISSOR_TEST), this._state.scissorTest = t9);
  }
  setScissorRect(t9, e7, s4, i) {
    this._state.scissorRect.x === t9 && this._state.scissorRect.y === e7 && this._state.scissorRect.width === s4 && this._state.scissorRect.height === i || (this.gl.scissor(t9, e7, s4, i), this._state.scissorRect.x = t9, this._state.scissorRect.y = e7, this._state.scissorRect.width = s4, this._state.scissorRect.height = i);
  }
  setDepthTestEnabled(t9) {
    this._state.depthTest !== t9 && (true === t9 ? this.gl.enable(this.gl.DEPTH_TEST) : this.gl.disable(this.gl.DEPTH_TEST), this._state.depthTest = t9, this._stateTracker.invalidateDepthTest());
  }
  setClearDepth(t9) {
    this._state.clearDepth !== t9 && (this.gl.clearDepth(t9), this._state.clearDepth = t9);
  }
  setDepthFunction(t9) {
    this._state.depthFunction !== t9 && (this.gl.depthFunc(t9), this._state.depthFunction = t9, this._stateTracker.invalidateDepthTest());
  }
  setDepthWriteEnabled(t9) {
    this._state.depthWrite !== t9 && (this.gl.depthMask(t9), this._state.depthWrite = t9, this._stateTracker.invalidateDepthWrite());
  }
  setDepthRange(t9, e7) {
    this._state.depthRange.zNear === t9 && this._state.depthRange.zFar === e7 || (this.gl.depthRange(t9, e7), this._state.depthRange.zNear = t9, this._state.depthRange.zFar = e7, this._stateTracker.invalidateDepthWrite());
  }
  setStencilTestEnabled(t9) {
    this._state.stencilTest !== t9 && (true === t9 ? this.gl.enable(this.gl.STENCIL_TEST) : this.gl.disable(this.gl.STENCIL_TEST), this._state.stencilTest = t9, this._stateTracker.invalidateStencilTest());
  }
  setClearStencil(t9) {
    t9 !== this._state.clearStencil && (this.gl.clearStencil(t9), this._state.clearStencil = t9);
  }
  setStencilFunction(t9, e7, s4) {
    this._state.stencilFunction.func === t9 && this._state.stencilFunction.ref === e7 && this._state.stencilFunction.mask === s4 || (this.gl.stencilFunc(t9, e7, s4), this._state.stencilFunction.face = S.FRONT_AND_BACK, this._state.stencilFunction.func = t9, this._state.stencilFunction.ref = e7, this._state.stencilFunction.mask = s4, this._stateTracker.invalidateStencilTest());
  }
  setStencilFunctionSeparate(t9, e7, s4, i) {
    this._state.stencilFunction.face === t9 && this._state.stencilFunction.func === e7 && this._state.stencilFunction.ref === s4 && this._state.stencilFunction.mask === i || (this.gl.stencilFuncSeparate(t9, e7, s4, i), this._state.stencilFunction.face = t9, this._state.stencilFunction.func = e7, this._state.stencilFunction.ref = s4, this._state.stencilFunction.mask = i, this._stateTracker.invalidateStencilTest());
  }
  setStencilWriteMask(t9) {
    this._state.stencilWriteMask !== t9 && (this.gl.stencilMask(t9), this._state.stencilWriteMask = t9, this._stateTracker.invalidateStencilWrite());
  }
  setStencilOp(t9, e7, s4) {
    this._state.stencilOperation.face === S.FRONT_AND_BACK && this._state.stencilOperation.fail === t9 && this._state.stencilOperation.zFail === e7 && this._state.stencilOperation.zPass === s4 || (this.gl.stencilOp(t9, e7, s4), this._state.stencilOperation.face = S.FRONT_AND_BACK, this._state.stencilOperation.fail = t9, this._state.stencilOperation.zFail = e7, this._state.stencilOperation.zPass = s4, this._stateTracker.invalidateStencilTest());
  }
  setStencilOpSeparate(t9, e7, s4, i) {
    this._state.stencilOperation.face === t9 && this._state.stencilOperation.fail === e7 && this._state.stencilOperation.zFail === s4 && this._state.stencilOperation.zPass === i || (this.gl.stencilOpSeparate(t9, e7, s4, i), this._state.stencilOperation.face = t9, this._state.stencilOperation.fail = e7, this._state.stencilOperation.zFail = s4, this._state.stencilOperation.zPass = i, this._stateTracker.invalidateStencilTest());
  }
  setActiveTexture(t9, e7 = false) {
    const s4 = this._state.activeTexture;
    return t9 >= 0 && (e7 || t9 !== this._state.activeTexture) && (this.gl.activeTexture(c + t9), this._state.activeTexture = t9), s4;
  }
  setDrawBuffers(t9) {
    const { drawFramebuffer: e7 } = this._state, s4 = null === e7, i = s4 ? this._state.drawBuffers.defaultFramebuffer : this._state.drawBuffers.fbos.get(e7);
    if (i?.length !== t9.length || !i.every((e8, s5) => e8 === t9[s5])) if (t9.length > this.parameters.maxDrawBuffers) console.error("Setting more active draw buffers than GL.MAX_DRAW_BUFFERS allows.");
    else {
      if (s4) {
        if (t9.length > 1) return void console.error("The default framebuffer can only have one active draw buffer.");
        if (t9[0] !== u.BACK && t9[0] !== u.NONE) return void console.error("The default framebuffer can only use the constants GL.BACK or GL.NONE as draw buffers.");
      }
      s4 || !t9.includes(u.BACK) ? (this.gl.drawBuffers(t9), s4 ? this._state.drawBuffers.defaultFramebuffer = t9 : this._state.drawBuffers.fbos.set(e7, t9), this._stateTracker.invalidateDrawBuffers()) : console.error("A framebuffer object can only use the constants GL.COLOR_ATTACHMENTi or GL.NONE as draw buffers.");
    }
  }
  clear(t9, e7 = 255) {
    if (t9) {
      if (t9 & _.COLOR) {
        const t10 = this._state.drawFramebuffer?.colorAttachments;
        t10 && this.setDrawBuffers(t10), this.setColorMask(true, true, true, true);
      }
      t9 & _.DEPTH && this.setDepthWriteEnabled(true), t9 & _.STENCIL && this.setStencilWriteMask(e7), this.gl.clear(t9);
    }
  }
  clearFramebuffer(t9, e7 = false, s4 = false) {
    let i = 0;
    if (t9) {
      const e8 = 1e-13, s5 = Math.max(e8, t9[3]);
      this.setClearColor(t9[0], t9[1], t9[2], s5), i |= _.COLOR;
    }
    e7 && (i |= _.DEPTH), false === s4 ? s4 = 0 : (true === s4 && (s4 = 255), i |= _.STENCIL), i && this.clear(i, s4);
  }
  clearBuffer(t9, e7, s4 = E.COLOR, i = void 0) {
    this.gl.clearBufferfv(s4, t9, e7, i);
  }
  clearBufferInteger(t9, e7, s4 = E.COLOR, i = void 0) {
    this.gl.clearBufferiv(s4, t9, e7, i);
  }
  clearBufferUnsignedInteger(t9, e7, s4 = E.COLOR, i = void 0) {
    this.gl.clearBufferuiv(s4, t9, e7, i);
  }
  drawArrays(t9, e7, s4) {
    if (this._transformFeedbackRequestInfo) {
      if (t9 !== this._transformFeedbackRequestInfo.primitiveType) throw new Error("DrawArrays called during transform feedback, but primitiveType does not match that of the current transform feedback request");
      if (null == this._state.program?.hasTransformFeedbackVaryings) throw new Error("DrawArrays called during transform feedback, but the shader program was not linked with a transform feedback varying");
    }
    if (c2() && (this._numOfDrawCalls++, this._numOfTriangles += D2(t9, s4), has("enable-feature:webgl-debug:textureReadWrite"))) {
      const t10 = this._state.textureUnitMap;
      for (let e8 = 0; e8 < t10.length; e8++) {
        const s5 = t10[e8];
        if (null != s5 && s5 === this._state.drawFramebuffer?.colorTexture) throw new Error(`Detected readWrite. Texture already bound at index ${e8}`);
      }
    }
    this.gl.drawArrays(t9, e7, s4), s(this.gl);
  }
  drawArraysInstanced(t9, e7, s4, i) {
    this.gl.drawArraysInstanced(t9, e7, s4, i), s(this.gl);
  }
  drawElements(t9, e7, s4, a3) {
    if (this._transformFeedbackRequestInfo) throw new Error("Cannot called drawElements during a transform feedback request");
    if (c2() && (this._numOfDrawCalls++, this._numOfTriangles += D2(t9, e7)), this.gl.drawElements(t9, e7, s4, a3), c2()) {
      const i = R2(this);
      if (i) {
        const r3 = this.getBoundVAO(), n9 = r3?.indexBuffer, l = r3?.vertexBuffers, h2 = { indexBuffer: n9, vertexBuffers: l }, f2 = { mode: t9, count: e7, type: s4, offset: a3 }, o4 = n9?.size ?? 0, u2 = a3 + e7, c3 = o4 < u2 ? `. Buffer is too small. Attempted to draw index ${u2} of ${o4}` : "";
        console.error(`drawElements: ${i}${c3}`, { args: f2, vao: h2 });
      }
    }
  }
  drawElementsInstanced(t9, e7, s4, i, r3) {
    this.gl.drawElementsInstanced(t9, e7, s4, i, r3), s(this.gl);
  }
  logInfo() {
    c2() && console.log(`DrawCalls: ${this._numOfDrawCalls}, Triangles: ${this._numOfTriangles}`);
  }
  resetInfo() {
    c2() && (this._numOfDrawCalls = 0, this._numOfTriangles = 0);
  }
  get capabilities() {
    return this._capabilities;
  }
  setViewport(t9, e7, s4, i) {
    s4 = Math.max(Math.round(s4), 1), i = Math.max(Math.round(i), 1);
    const a3 = this._state.viewport;
    a3.x === t9 && a3.y === e7 && a3.width === s4 && a3.height === i || (a3.x = t9, a3.y = e7, a3.width = s4, a3.height = i, this.gl.viewport(t9, e7, s4, i));
  }
  setViewport4fv(t9) {
    this.setViewport(t9[0], t9[1], t9[2], t9[3]);
  }
  restoreViewport({ x: t9, y: e7, width: s4, height: i }) {
    this.setViewport(t9, e7, s4, i);
  }
  getViewport() {
    const t9 = this._state.viewport;
    return { x: t9.x, y: t9.y, width: t9.width, height: t9.height };
  }
  useProgram(t9) {
    this._state.program !== t9 && (this._state.program?.stop(), this._state.program = t9, this.gl.useProgram(t9?.glName ?? null));
  }
  bindTexture(t9, e7, s4 = false) {
    (e7 >= this.parameters.maxTextureImageUnits || e7 < 0) && console.error("Input texture unit is out of range of available units!");
    const i = this._state.textureUnitMap[e7];
    return null == t9?.glName ? (null != i && (this.setActiveTexture(e7, s4), this.gl.bindTexture(i.descriptor.target, null)), this._state.textureUnitMap[e7] = null, i) : s4 || i !== t9 ? (this.setActiveTexture(e7, s4), this.gl.bindTexture(t9.descriptor.target, t9.glName), t9.applyChanges(), this._state.textureUnitMap[e7] = t9, i) : (t9.isDirty && (this.setActiveTexture(e7, s4), t9.applyChanges()), i);
  }
  unbindTexture(t9) {
    if (null != t9) for (let e7 = 0; e7 < this.parameters.maxTextureImageUnits; e7++) this._state.textureUnitMap[e7] === t9 && (this.bindTexture(null, e7), this._state.textureUnitMap[e7] = null);
  }
  bindFramebuffer(t9, e7 = false) {
    if (e7 || this._state.readFramebuffer !== t9 || this._state.drawFramebuffer !== t9) {
      if (this._stateTracker.invalidateDrawBuffers(), null == t9) return this.gl.bindFramebuffer(t.FRAMEBUFFER, null), void (this._state.readFramebuffer = this._state.drawFramebuffer = null);
      t9.initializeAndBind(t.FRAMEBUFFER), this._state.readFramebuffer = t9, this._state.drawFramebuffer = t9;
    }
  }
  bindFramebufferSeparate(t9, e7, s4 = false) {
    const i = e7 === t.READ_FRAMEBUFFER, a3 = i ? this._state.readFramebuffer : this._state.drawFramebuffer;
    (s4 || a3 !== t9) && (null == t9 ? this.gl.bindFramebuffer(e7, null) : t9.initializeAndBind(e7), i ? this._state.readFramebuffer = t9 ?? null : (this._stateTracker.invalidateDrawBuffers(), this._state.drawFramebuffer = t9 ?? null));
  }
  blitFramebuffer(t9, e7, s4 = _.COLOR, i = L.NEAREST, a3 = 0, r3 = 0, n9 = t9.width, l = t9.height, h2 = 0, f2 = 0, o4 = e7.width, c3 = e7.height) {
    this.bindFramebufferSeparate(t9, t.READ_FRAMEBUFFER, true), this.bindFramebufferSeparate(e7, t.DRAW_FRAMEBUFFER, true), this.gl.blitFramebuffer(a3, r3, n9, l, h2, f2, o4, c3, s4, i);
  }
  bindBuffer(t9, e7) {
    if (t9) switch (e7 ??= t9.bufferType, e7) {
      case N.ARRAY_BUFFER:
        this._state.vertexBuffer = N2(this.gl, t9, e7, this._state.vertexBuffer);
        break;
      case N.ELEMENT_ARRAY_BUFFER:
        this._state.indexBuffer = N2(this.gl, t9, e7, this._state.indexBuffer);
        break;
      case N.UNIFORM_BUFFER:
        this._state.uniformBuffer = N2(this.gl, t9, e7, this._state.uniformBuffer);
        break;
      case N.PIXEL_PACK_BUFFER:
        this._state.pixelPackBuffer = N2(this.gl, t9, e7, this._state.pixelPackBuffer);
        break;
      case N.PIXEL_UNPACK_BUFFER:
        this._state.pixelUnpackBuffer = N2(this.gl, t9, e7, this._state.pixelUnpackBuffer);
        break;
      case N.COPY_READ_BUFFER:
        this._state.copyReadBuffer = N2(this.gl, t9, e7, this._state.copyReadBuffer);
        break;
      case N.COPY_WRITE_BUFFER:
        this._state.copyWriteBuffer = N2(this.gl, t9, e7, this._state.copyWriteBuffer);
        break;
      case N.TRANSFORM_FEEDBACK_BUFFER:
        this._state.transformFeedbackBuffer = N2(this.gl, t9, e7, this._state.transformFeedbackBuffer);
    }
  }
  bindRenderbuffer(t9) {
    const e7 = this.gl;
    t9 || (e7.bindRenderbuffer(e7.RENDERBUFFER, null), this._state.renderbuffer = null), this._state.renderbuffer !== t9 && (e7.bindRenderbuffer(e7.RENDERBUFFER, t9.glName), this._state.renderbuffer = t9);
  }
  _getBufferBinding(t9, e7) {
    if (e7 >= this.parameters.maxUniformBufferBindings || e7 < 0) return console.error("Uniform buffer binding point is out of range!"), null;
    const s4 = t9 === N.UNIFORM_BUFFER ? this._state.uniformBufferBindingPoints : this._state.transformBufferBindingPoints;
    let i = s4[e7];
    return null == i && (i = { buffer: null, offset: 0, size: 0 }, s4[e7] = i), i;
  }
  bindBufferBase(t9, e7, s4) {
    const i = this._getBufferBinding(t9, e7);
    null != i && (i.buffer === s4 && 0 === i.offset && 0 === i.size || (this.gl.bindBufferBase(t9, e7, s4 ? s4.glName : null), i.buffer = s4, i.offset = 0, i.size = 0));
  }
  bindBufferRange(t9, e7, s4, i, a3) {
    const r3 = this._getBufferBinding(t9, e7);
    null != r3 && (r3.buffer === s4 && r3.offset === i && r3.size === a3 || (i % this._parameters.uniformBufferOffsetAlignment === 0 ? (this.gl.bindBufferRange(t9, e7, s4.glName, i, a3), r3.buffer = s4, r3.offset = i, r3.size = a3) : console.error("Uniform buffer binding offset is not a multiple of the context offset alignment")));
  }
  bindUBO(t9, e7, s4, a3) {
    null != e7 ? (c2() && (a3 ?? e7.byteLength) > this._parameters.maxUniformBlockSize && console.error("Attempting to bind more data than the maximum uniform block size"), e7.initialize(), void 0 !== s4 && void 0 !== a3 ? this.bindBufferRange(N.UNIFORM_BUFFER, t9, e7.buffer, s4, a3) : this.bindBufferBase(N.UNIFORM_BUFFER, t9, e7.buffer)) : this.bindBufferBase(N.UNIFORM_BUFFER, t9, null);
  }
  unbindUBO(t9) {
    for (let e7 = 0, s4 = this._state.uniformBufferBindingPoints.length; e7 < s4; e7++) {
      const s5 = this._state.uniformBufferBindingPoints[e7];
      null != s5 && s5.buffer === t9.buffer && this.bindBufferBase(N.UNIFORM_BUFFER, e7, null);
    }
  }
  unbindBuffer(t9) {
    switch (t9) {
      case N.ARRAY_BUFFER:
        this._state.vertexBuffer = N2(this.gl, null, t9, this._state.vertexBuffer);
        break;
      case N.ELEMENT_ARRAY_BUFFER:
        this._state.indexBuffer = N2(this.gl, null, t9, this._state.indexBuffer);
        break;
      case N.UNIFORM_BUFFER:
        this._state.uniformBuffer = N2(this.gl, null, t9, this._state.uniformBuffer);
        break;
      case N.PIXEL_PACK_BUFFER:
        this._state.pixelPackBuffer = N2(this.gl, null, t9, this._state.pixelPackBuffer);
        break;
      case N.PIXEL_UNPACK_BUFFER:
        this._state.pixelUnpackBuffer = N2(this.gl, null, t9, this._state.pixelUnpackBuffer);
        break;
      case N.COPY_READ_BUFFER:
        this._state.copyReadBuffer = N2(this.gl, null, t9, this._state.copyReadBuffer);
        break;
      case N.COPY_WRITE_BUFFER:
        this._state.copyWriteBuffer = N2(this.gl, null, t9, this._state.copyWriteBuffer);
    }
  }
  bindVAO(t9 = null) {
    null != t9 ? this._state.vertexArrayObject !== t9 && (t9.bind(), this._state.vertexArrayObject = t9) : this._state.vertexArrayObject && (this._state.vertexArrayObject.unbind(), this._state.vertexArrayObject = null);
  }
  bindTransformFeedback(t9) {
    const { gl: e7 } = this;
    e7.bindTransformFeedback(e7.TRANSFORM_FEEDBACK, t9.glName);
  }
  beginTransformFeedback(t9, e7) {
    if (this._transformFeedbackRequestInfo) throw new Error("Already in a transform feedback request");
    const { gl: s4 } = this;
    s4.bindTransformFeedback(s4.TRANSFORM_FEEDBACK, t9.glName), s4.beginTransformFeedback(e7), this._transformFeedbackRequestInfo = { primitiveType: e7 };
  }
  endTransformFeedback() {
    if (!this._transformFeedbackRequestInfo) throw new Error("Not in a transform feedback request");
    const { gl: t9 } = this;
    t9.endTransformFeedback(), t9.bindTransformFeedback(t9.TRANSFORM_FEEDBACK, null), this._transformFeedbackRequestInfo = null;
  }
  async clientWaitAsync(t9 = n(10)) {
    const { gl: i } = this, a3 = i.fenceSync(z.SYNC_GPU_COMMANDS_COMPLETE, 0);
    if (!a3) throw new Error("Client wait failed, could not create sync object");
    let r3;
    this.instanceCounter.increment(o.Sync, a3), i.flush();
    do {
      await A(t9), r3 = i.clientWaitSync(a3, 0, 0);
    } while (r3 === w.TIMEOUT_EXPIRED);
    if (this.instanceCounter.decrement(o.Sync, a3), i.deleteSync(a3), r3 === w.WAIT_FAILED) throw new Error("Client wait failed");
  }
  getBoundFramebufferObject(t9 = t.FRAMEBUFFER) {
    return t9 === t.READ_FRAMEBUFFER ? this._state.readFramebuffer : this._state.drawFramebuffer;
  }
  temporaryBindFramebufferObject(t9, e7, s4 = false) {
    const i = this.getBoundFramebufferObject();
    try {
      this.bindFramebuffer(t9, s4), e7();
    } finally {
      this.bindFramebuffer(i, s4);
    }
  }
  getBoundVAO() {
    return this._state.vertexArrayObject;
  }
  resetState() {
    this.useProgram(null), this.bindVAO(null), this.bindFramebuffer(null, true), this.unbindBuffer(N.ARRAY_BUFFER), this.unbindBuffer(N.ELEMENT_ARRAY_BUFFER), this.unbindBuffer(N.UNIFORM_BUFFER), this._state.uniformBufferBindingPoints.length = 0, this.unbindBuffer(N.PIXEL_PACK_BUFFER), this.unbindBuffer(N.PIXEL_UNPACK_BUFFER), this.unbindBuffer(N.COPY_READ_BUFFER), this.unbindBuffer(N.COPY_WRITE_BUFFER);
    for (let t9 = 0; t9 < this.parameters.maxTextureImageUnits; ++t9) this.bindTexture(null, t9);
    this.setBlendingEnabled(false), this.setBlendFunction(A2.ONE, A2.ZERO), this.setBlendEquation(T.ADD), this.setBlendColor(0, 0, 0, 0), this.setFaceCullingEnabled(false), this.setCullFace(S.BACK), this.setFrontFace(I.CCW), this.setPolygonOffsetFillEnabled(false), this.setPolygonOffset(0, 0), this.setScissorTestEnabled(false), this.setScissorRect(0, 0, this.gl.canvas.width, this.gl.canvas.height), this.setDepthTestEnabled(false), this.setDepthFunction(C.LESS), this.setDepthRange(0, 1), this.setStencilTestEnabled(false), this.setStencilFunction(C.ALWAYS, 0, 0), this.setStencilOp(D.KEEP, D.KEEP, D.KEEP), this.setClearColor(0, 0, 0, 0), this.setClearDepth(1), this.setClearStencil(0), this.setColorMask(true, true, true, true), this.setStencilWriteMask(4294967295), this.setDepthWriteEnabled(true), this.setDrawBuffers([u.BACK]), this.setViewport(0, 0, this.gl.canvas.width, this.gl.canvas.height);
  }
  enforceState() {
    const { gl: t9 } = this;
    t9.bindVertexArray(null);
    for (let s4 = 0; s4 < this.parameters.maxVertexAttributes; s4++) t9.disableVertexAttribArray(s4);
    this._state.vertexBuffer ? t9.bindBuffer(this._state.vertexBuffer.bufferType, this._state.vertexBuffer.glName) : t9.bindBuffer(N.ARRAY_BUFFER, null), this._state.indexBuffer ? t9.bindBuffer(this._state.indexBuffer.bufferType, this._state.indexBuffer.glName) : t9.bindBuffer(N.ELEMENT_ARRAY_BUFFER, null), this._state.uniformBuffer ? t9.bindBuffer(this._state.uniformBuffer.bufferType, this._state.uniformBuffer.glName) : t9.bindBuffer(N.UNIFORM_BUFFER, null);
    for (let s4 = 0; s4 < this._parameters.maxUniformBufferBindings; s4++) {
      const e8 = this._state.uniformBufferBindingPoints[s4];
      if (null != e8) {
        const { buffer: i, offset: a3, size: r3 } = e8;
        null !== i ? 0 === a3 && 0 === r3 ? t9.bindBufferBase(N.UNIFORM_BUFFER, s4, i.glName) : t9.bindBufferRange(N.UNIFORM_BUFFER, s4, i.glName, a3, r3) : t9.bindBufferBase(N.UNIFORM_BUFFER, s4, null);
      }
    }
    if (this._state.pixelPackBuffer ? t9.bindBuffer(this._state.pixelPackBuffer.bufferType, this._state.pixelPackBuffer.glName) : t9.bindBuffer(N.PIXEL_PACK_BUFFER, null), this._state.pixelUnpackBuffer ? t9.bindBuffer(this._state.pixelUnpackBuffer.bufferType, this._state.pixelUnpackBuffer.glName) : t9.bindBuffer(N.PIXEL_UNPACK_BUFFER, null), this._state.copyReadBuffer ? t9.bindBuffer(this._state.copyReadBuffer.bufferType, this._state.copyReadBuffer.glName) : t9.bindBuffer(N.COPY_READ_BUFFER, null), this._state.copyWriteBuffer ? t9.bindBuffer(this._state.copyWriteBuffer.bufferType, this._state.copyWriteBuffer.glName) : t9.bindBuffer(N.COPY_WRITE_BUFFER, null), t9.bindFramebuffer(t.READ_FRAMEBUFFER, null), t9.readBuffer(t9.BACK), this._state.readFramebuffer && (t9.bindFramebuffer(t.READ_FRAMEBUFFER, this._state.readFramebuffer.glName), t9.readBuffer(e)), t9.bindFramebuffer(t.DRAW_FRAMEBUFFER, this._state.drawFramebuffer?.glName ?? null), null === this._state.drawFramebuffer) {
      const e8 = this._state.drawBuffers.defaultFramebuffer;
      t9.drawBuffers(e8 ?? [u.BACK]);
    } else {
      const e8 = this._state.drawBuffers.fbos.get(this._state.drawFramebuffer);
      t9.drawBuffers(e8 ?? [e]);
    }
    if (this._state.vertexArrayObject) {
      const t10 = this._state.vertexArrayObject;
      this._state.vertexArrayObject && (this._state.vertexArrayObject.unbind(), this._state.vertexArrayObject = null), this.bindVAO(t10);
    }
    t9.useProgram(this._state.program?.glName ?? null), t9.blendColor(this._state.blendColor.r, this._state.blendColor.g, this._state.blendColor.b, this._state.blendColor.a), t9.bindRenderbuffer(t9.RENDERBUFFER, this._state.renderbuffer?.glName ?? null), true === this._state.blend ? t9.enable(this.gl.BLEND) : t9.disable(this.gl.BLEND), t9.blendEquationSeparate(this._state.blendEquation.mode, this._state.blendEquation.modeAlpha), t9.blendFuncSeparate(this._state.blendFunction.srcRGB, this._state.blendFunction.dstRGB, this._state.blendFunction.srcAlpha, this._state.blendFunction.dstAlpha), t9.clearColor(this._state.clearColor.r, this._state.clearColor.g, this._state.clearColor.b, this._state.clearColor.a), t9.clearDepth(this._state.clearDepth), t9.clearStencil(this._state.clearStencil), t9.colorMask(this._state.colorMask.r, this._state.colorMask.g, this._state.colorMask.b, this._state.colorMask.a), t9.cullFace(this._state.cullFace), t9.depthFunc(this._state.depthFunction), t9.depthRange(this._state.depthRange.zNear, this._state.depthRange.zFar), true === this._state.depthTest ? t9.enable(t9.DEPTH_TEST) : t9.disable(t9.DEPTH_TEST), t9.depthMask(this._state.depthWrite), t9.frontFace(this._state.frontFace), t9.lineWidth(1), true === this._state.faceCulling ? t9.enable(t9.CULL_FACE) : t9.disable(t9.CULL_FACE), t9.polygonOffset(this._state.polygonOffset[0], this._state.polygonOffset[1]), true === this._state.polygonOffsetFill ? t9.enable(t9.POLYGON_OFFSET_FILL) : t9.disable(t9.POLYGON_OFFSET_FILL), t9.scissor(this._state.scissorRect.x, this._state.scissorRect.y, this._state.scissorRect.width, this._state.scissorRect.height), true === this._state.scissorTest ? t9.enable(t9.SCISSOR_TEST) : t9.disable(t9.SCISSOR_TEST), t9.stencilFunc(this._state.stencilFunction.func, this._state.stencilFunction.ref, this._state.stencilFunction.mask), t9.stencilOpSeparate(this._state.stencilOperation.face, this._state.stencilOperation.fail, this._state.stencilOperation.zFail, this._state.stencilOperation.zPass), true === this._state.stencilTest ? t9.enable(t9.STENCIL_TEST) : t9.disable(t9.STENCIL_TEST), t9.stencilMask(this._state.stencilWriteMask);
    for (let s4 = 0; s4 < this.parameters.maxTextureImageUnits; s4++) {
      t9.activeTexture(c + s4), t9.bindTexture(G.TEXTURE_2D, null), t9.bindTexture(G.TEXTURE_CUBE_MAP, null), t9.bindTexture(G.TEXTURE_3D, null), t9.bindTexture(G.TEXTURE_2D_ARRAY, null);
      const e8 = this._state.textureUnitMap[s4];
      null != e8 && t9.bindTexture(e8.descriptor.target, e8.glName);
    }
    t9.activeTexture(c + this._state.activeTexture);
    const e7 = this._state.viewport;
    t9.viewport(e7.x, e7.y, e7.width, e7.height), this.resetInfo();
  }
};
function N2(t9, e7, s4, i) {
  return e7 ? i !== e7 && t9.bindBuffer(s4, e7.glName) : t9.bindBuffer(s4, null), e7;
}
function D2(t9, e7) {
  switch (t9) {
    case R.POINTS:
      return 2 * e7;
    case R.TRIANGLES:
      return e7 / 3;
    case R.TRIANGLE_STRIP:
    case R.TRIANGLE_FAN:
      return e7 - 2;
    default:
      return 0;
  }
}

export {
  o3 as o,
  n6 as n,
  v
};
//# sourceMappingURL=chunk-D7N3R33W.js.map
