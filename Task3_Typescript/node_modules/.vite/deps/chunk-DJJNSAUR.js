import {
  i,
  n
} from "./chunk-PZBXBPVO.js";

// node_modules/@arcgis/core/symbols/cim/utils.js
function r(e) {
  return "function" == typeof e;
}
function n2(e, t, n3, o2) {
  return r(e) ? e(t, n3, o2) : e;
}
function o(e) {
  return [e.r, e.g, e.b, e.a];
}
var l = " /-,\n";
function i2(e) {
  let t = e.length;
  for (; t--; ) if (!l.includes(e.charAt(t))) return false;
  return true;
}
function a(e, t) {
  const r2 = [];
  let n3 = 0, o2 = -1;
  do {
    if (o2 = e.indexOf("[", n3), o2 >= n3) {
      if (o2 > n3) {
        const t2 = e.slice(n3, o2);
        r2.push([t2, null, i2(t2)]);
      }
      if (n3 = o2 + 1, o2 = e.indexOf("]", n3), o2 >= n3) {
        if (o2 > n3) {
          const l2 = t[e.slice(n3, o2)];
          l2 && r2.push([null, l2, false]);
        }
        n3 = o2 + 1;
      }
    }
  } while (-1 !== o2);
  if (n3 < e.length) {
    const t2 = e.slice(n3);
    r2.push([t2, null, i2(t2)]);
  }
  return r2;
}
function c(e, t, r2) {
  let n3 = "", o2 = null;
  for (const l2 of t) {
    const [t2, r3, i3] = l2;
    if (null != t2 && "" !== t2) i3 ? o2 = t2 : (null != o2 && (n3 += o2, o2 = null), n3 += t2);
    else {
      const t3 = e.readAttribute(r3);
      null != t3 && "" !== t3 && (null !== o2 && (n3 += o2, o2 = null), n3 += t3);
    }
  }
  return u(n3, r2);
}
function s(e, t, r2, n3) {
  let o2 = "", l2 = null;
  for (const i3 of t) {
    const [t2, n4, a2] = i3;
    if (null != t2 && "" !== t2) a2 ? l2 = t2 : (null != l2 && (o2 += l2, l2 = null), o2 += t2);
    else {
      let t3 = n4;
      null != r2 && (t3 = W(n4, r2));
      const i4 = e.attributes[t3];
      null != i4 && "" !== i4 && (null != l2 && (o2 += l2, l2 = null), o2 += i4);
    }
  }
  return u(o2, n3);
}
function u(e, t) {
  switch ("string" != typeof e && (e = String(e)), t) {
    case "LowerCase":
      return e.toLowerCase();
    case "Allcaps":
      return e.toUpperCase();
    default:
      return e;
  }
}
function f(e, t, r2, n3, o2, l2, i3 = true) {
  const a2 = t / o2, c2 = r2 / l2, s2 = Math.ceil(a2 / 2), u2 = Math.ceil(c2 / 2);
  for (let f2 = 0; f2 < l2; f2++) for (let r3 = 0; r3 < o2; r3++) {
    const M2 = 4 * (r3 + (i3 ? l2 - f2 - 1 : f2) * o2);
    let y2 = 0, m2 = 0, C2 = 0, I2 = 0, p2 = 0, h2 = 0, b2 = 0;
    const d2 = (f2 + 0.5) * c2;
    for (let n4 = Math.floor(f2 * c2); n4 < (f2 + 1) * c2; n4++) {
      const o3 = Math.abs(d2 - (n4 + 0.5)) / u2, l3 = (r3 + 0.5) * a2, i4 = o3 * o3;
      for (let c3 = Math.floor(r3 * a2); c3 < (r3 + 1) * a2; c3++) {
        let r4 = Math.abs(l3 - (c3 + 0.5)) / s2;
        const o4 = Math.sqrt(i4 + r4 * r4);
        o4 >= -1 && o4 <= 1 && (y2 = 2 * o4 * o4 * o4 - 3 * o4 * o4 + 1, y2 > 0 && (r4 = 4 * (c3 + n4 * t), b2 += y2 * e[r4 + 3], C2 += y2, e[r4 + 3] < 255 && (y2 = y2 * e[r4 + 3] / 250), I2 += y2 * e[r4], p2 += y2 * e[r4 + 1], h2 += y2 * e[r4 + 2], m2 += y2));
      }
    }
    n3[M2] = I2 / m2, n3[M2 + 1] = p2 / m2, n3[M2 + 2] = h2 / m2, n3[M2 + 3] = b2 / C2;
  }
}
function M(e) {
  return e ? [e[0], e[1], e[2], e[3] / 255] : [0, 0, 0, 0];
}
function y(e) {
  return e.data?.symbol ?? null;
}
function m(e) {
  return "CIMVectorMarker" === e.type || "CIMPictureMarker" === e.type || "CIMBarChartMarker" === e.type || "CIMCharacterMarker" === e.type || "CIMPieChartMarker" === e.type || "CIMStackedBarChartMarker" === e.type;
}
function C(e) {
  return "CIMGradientStroke" === e.type || "CIMPictureStroke" === e.type || "CIMSolidStroke" === e.type;
}
function I(e) {
  return null != e && ("CIMGradientFill" === e.type || "CIMHatchFill" === e.type || "CIMPictureFill" === e.type || "CIMSolidFill" === e.type || "CIMWaterFill" === e.type);
}
function p(e) {
  return null != e && ("CIMMarkerPlacementAlongLineRandomSize" === e.type || "CIMMarkerPlacementAlongLineSameSize" === e.type || "CIMMarkerPlacementAlongLineVariableSize" === e.type || "CIMMarkerPlacementAtExtremities" === e.type || "CIMMarkerPlacementAtMeasuredUnits" === e.type || "CIMMarkerPlacementAtRatioPositions" === e.type || "CIMMarkerPlacementOnLine" === e.type || "CIMMarkerPlacementOnVertices" === e.type);
}
var h = (e, t = 0) => null == e || isNaN(e) ? t : e;
var b = (e, t) => null != e ? e : t;
var d = (e, t) => e ?? t;
var k = (e) => e.tintColor ? M(e.tintColor) : [255, 255, 255, 1];
var S = (e) => {
  if (!e) return false;
  for (const t of e) switch (t.type) {
    case "CIMGeometricEffectBuffer":
    case "CIMGeometricEffectDonut":
    case "CIMGeometricEffectOffset":
    case "CIMGeometricEffectTaperedPolygon":
    case "CIMGeometricEffectEnclosingPolygon":
      return true;
  }
  return false;
};
function g() {
  return import("./geometryEngineJSON-MSK3YET3.js");
}
function P(e) {
  if (!e) return "normal";
  switch (e.toLowerCase()) {
    case "italic":
      return "italic";
    case "oblique":
      return "oblique";
    default:
      return "normal";
  }
}
function w(e) {
  if (!e) return "normal";
  switch (e.toLowerCase()) {
    case "bold":
      return "bold";
    case "bolder":
      return "bolder";
    case "lighter":
      return "lighter";
    default:
      return "normal";
  }
}
function L(e) {
  let t = "normal", r2 = "normal";
  if (e) {
    const n3 = e.toLowerCase();
    n3.includes("italic") ? t = "italic" : n3.includes("oblique") && (t = "oblique"), n3.includes("bold") ? r2 = "bold" : n3.includes("light") && (r2 = "lighter");
  }
  return { style: t, weight: r2 };
}
function T(e) {
  return e.underline ? "underline" : e.strikethrough ? "line-through" : "none";
}
function A(e) {
  if (!e) return null;
  switch (e.type) {
    case "CIMPolygonSymbol":
      if (e.symbolLayers) for (const t of e.symbolLayers) {
        const e2 = A(t);
        if (null != e2) return e2;
      }
      break;
    case "CIMTextSymbol":
      return A(e.symbol);
    case "CIMSolidFill":
      return e.color;
  }
  return null;
}
function N(e) {
  if (e) switch (e.type) {
    case "CIMPolygonSymbol":
    case "CIMLineSymbol": {
      const t = e.symbolLayers;
      if (t) for (const e2 of t) {
        const t2 = N(e2);
        if (null != t2) return t2;
      }
      break;
    }
    case "CIMTextSymbol":
      return N(e.symbol);
    case "CIMSolidStroke":
      return e.color;
  }
}
function x(e) {
  for (const t of e) if (t.enable) switch (t.type) {
    case "CIMSolidStroke":
    case "CIMGradientStroke":
    case "CIMPictureStroke":
      return true;
  }
  return false;
}
function G(e) {
  if (e) switch (e.type) {
    case "CIMPolygonSymbol":
    case "CIMLineSymbol":
      if (e.symbolLayers) for (const t of e.symbolLayers) {
        const e2 = G(t);
        if (void 0 !== e2) return e2;
      }
      break;
    case "CIMTextSymbol":
      return G(e.symbol);
    case "CIMSolidStroke":
    case "CIMGradientStroke":
    case "CIMPictureStroke":
      return e.width;
  }
}
function v(e) {
  switch (e) {
    case "Left":
    default:
      return "left";
    case "Right":
      return "right";
    case "Center":
    case "Justify":
      return "center";
  }
}
function E(e) {
  switch (e) {
    case "Top":
    default:
      return "top";
    case "Center":
      return "middle";
    case "Baseline":
      return "baseline";
    case "Bottom":
      return "bottom";
  }
}
function F(e) {
  return (e ? Object.keys(e) : []).map((t) => ({ name: t, alias: t, type: "string" == typeof e[t] ? "esriFieldTypeString" : "esriFieldTypeDouble" }));
}
var V = (e) => e.includes("data:image/svg+xml");
function z(e) {
  if (!e) return null;
  switch (e.type) {
    case "CIMPointSymbol":
    case "CIMTextSymbol":
      return "esriGeometryPoint";
    case "CIMLineSymbol":
      return "esriGeometryPolyline";
    case "CIMPolygonSymbol":
      return "esriGeometryPolygon";
    default:
      return null;
  }
}
function O(e) {
  return e ? e.charAt(0).toLowerCase() + e.slice(1) : e;
}
function D(e, t, r2, n3, o2, l2, i3 = true) {
  const { infos: a2 } = l2;
  let c2 = 1, s2 = 0, u2 = 0, f2 = 0, M2 = 1;
  for (const { absoluteAnchorPoint: C2, offsetX: I2, offsetY: p2, rotation: h2, size: b2, frameHeight: d2, rotateClockWise: k2, scaleSymbolsProportionally: S2 } of a2) {
    M2 = C2 ? 1 : c2;
    u2 = K(I2, p2, s2, M2, u2), f2 = $(I2, p2, s2, M2, f2), d2 && (S2 || i3) && (c2 *= b2 / d2), s2 = Q(h2, k2, s2);
  }
  const y2 = K(n3, o2, s2, M2, u2), m2 = $(n3, o2, s2, M2, f2);
  return { size: e * c2, rotation: Q(t, r2, s2), offsetX: y2, offsetY: m2 };
}
function j(e) {
  if (null == e) return false;
  if (Array.isArray(e)) return e.every((e2) => j(e2));
  switch (typeof e) {
    case "string":
      return !!e;
    case "number":
      return !isNaN(e);
  }
}
function q(r2, n3) {
  if ("color" === n3 || "outlinecolor" === n3 || "backgroundcolor" === n3 || "borderlinecolor" === n3 || "tintcolor" === n3) return [...i[n3]];
  const o2 = n[r2];
  if (!o2) throw new Error(`InternalError: default value for type ${r2}.`);
  return o2[n3];
}
function B(e) {
  return e.split(" ").map((e2) => Number(e2));
}
function R(e) {
  return "string" == typeof e ? B(e) : e;
}
function H(e) {
  return e?.dashTemplate && (e.dashTemplate = R(e.dashTemplate)), e;
}
function J(e) {
  if (null == e) return "Normal";
  switch (e.type) {
    case "CIMTextSymbol":
      return e.textCase ?? "Normal";
    case "CIMPointSymbol":
    case "CIMLineSymbol":
    case "CIMPolygonSymbol":
      {
        const t = e.symbolLayers;
        if (!t) return "Normal";
        for (const e2 of t) if ("CIMVectorMarker" === e2.type) return J(e2);
      }
      break;
    case "CIMVectorMarker": {
      const t = e.markerGraphics;
      if (!t) return "Normal";
      for (const e2 of t) if (e2.symbol) return J(e2.symbol);
    }
  }
  return "Normal";
}
function U(t) {
  if (t) switch (t.type) {
    case "CIMTextSymbol":
      return t.height;
    case "CIMPointSymbol": {
      let r2 = 0;
      if (t.symbolLayers) {
        for (const n3 of t.symbolLayers) if (n3) switch (n3.type) {
          case "CIMCharacterMarker":
          case "CIMPictureMarker":
          case "CIMVectorMarker":
          case "CIMObjectMarker3D":
          case "CIMglTFMarker3D": {
            const t2 = n3.size ?? n.CIMVectorMarker.size;
            t2 > r2 && (r2 = t2);
            break;
          }
        }
      }
      return r2;
    }
    case "CIMLineSymbol":
    case "CIMPolygonSymbol": {
      let r2 = 0;
      if (t.symbolLayers) {
        for (const n3 of t.symbolLayers) if (n3) switch (n3.type) {
          case "CIMSolidStroke":
          case "CIMPictureStroke":
          case "CIMGradientStroke": {
            const e = n3.width;
            null != e && e > r2 && (r2 = e);
            break;
          }
          case "CIMCharacterMarker":
          case "CIMPictureMarker":
          case "CIMVectorMarker":
          case "CIMObjectMarker3D":
          case "CIMglTFMarker3D":
            if (n3.markerPlacement && p(n3.markerPlacement)) {
              const t2 = n3.size ?? n.CIMVectorMarker.size;
              t2 > r2 && (r2 = t2);
            }
            break;
          case "CIMPictureFill": {
            const e = n3.height;
            null != e && e > r2 && (r2 = e);
          }
        }
      }
      return r2;
    }
  }
}
function W(e, t) {
  if (null !== t) {
    const r2 = t.get(e);
    return r2 ? r2.name : e;
  }
  return e;
}
function X(e) {
  return e.map((e2) => ({ ...e2, propertyName: O(e2.propertyName) }));
}
function Y(e) {
  const t = {};
  for (const r2 in e) {
    const n3 = e[r2];
    t[O(r2)] = n3;
  }
  return t;
}
function $(e, t, r2, n3, o2) {
  const l2 = r2 * Math.PI / 180;
  if (l2) {
    const r3 = Math.cos(l2);
    return (Math.sin(l2) * e + r3 * t) * n3 + o2;
  }
  return t * n3 + o2;
}
function K(e, t, r2, n3, o2) {
  const l2 = r2 * Math.PI / 180;
  if (l2) {
    return (Math.cos(l2) * e - Math.sin(l2) * t) * n3 + o2;
  }
  return e * n3 + o2;
}
function Q(e, t, r2) {
  return t ? r2 - e : r2 + e;
}
function Z(e, t, r2) {
  const n3 = "Color" === r2 || "TintColor" === r2 || "ToColor" === r2, o2 = "Rotation" === r2 || "Angle" === r2 || "ToRotation" === r2;
  let l2 = t[O(r2)];
  if (null != l2 && (n3 ? l2 = [l2[0] / 255, l2[1] / 255, l2[2] / 255, l2[3] / 255] : o2 && (l2 *= Math.PI / 180)), null == l2 && (l2 = q(t.type, r2.toLowerCase()), null != l2 && (n3 ? l2 = [l2[0] / 255, l2[1] / 255, l2[2] / 255, l2[3]] : o2 && (l2 *= Math.PI / 180))), null != t.primitiveName) {
    const i3 = e[t.primitiveName];
    if (null != i3) {
      const e2 = i3[r2];
      null == e2 || ("string" == typeof e2 || "number" == typeof e2 || Array.isArray(e2) ? (l2 = e2, null != l2 && (n3 ? l2 = [l2[0] / 255, l2[1] / 255, l2[2] / 255, l2[3] / 255] : o2 && (l2 *= Math.PI / 180))) : (l2 = { valueExpressionInfo: e2, defaultValue: l2 }, null != l2 && (n3 ? l2 = { type: "Process", op: "ArcadeColor", value: l2 } : o2 && (l2 = { type: "Process", op: "Divide", left: l2, right: 180 / Math.PI }))));
    }
  }
  if (null == l2) throw new Error(`Failed to derive a value or an expression for "${r2}".`);
  return l2;
}
function _(e, t, r2) {
  if (null != t[O(r2)]) return true;
  if (null != t.primitiveName) {
    const n3 = e[t.primitiveName];
    if (null != n3) {
      if (null != n3[r2]) return true;
    }
  }
  return false;
}
function ee(e, t) {
  return Math.max(Math.min((e ?? t) / 100, 1), 0);
}

export {
  n2 as n,
  o,
  a,
  c,
  s,
  f,
  M,
  y,
  m,
  C,
  I,
  p,
  h,
  b,
  d,
  k,
  S,
  g,
  P,
  w,
  L,
  T,
  A,
  N,
  x,
  G,
  v,
  E,
  F,
  V,
  z,
  O,
  D,
  j,
  q,
  R,
  H,
  J,
  U,
  X,
  Y,
  Z,
  _,
  ee
};
//# sourceMappingURL=chunk-DJJNSAUR.js.map
