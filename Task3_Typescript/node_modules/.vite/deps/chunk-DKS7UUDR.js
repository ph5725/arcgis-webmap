import {
  e as e3
} from "./chunk-KDQWOWXR.js";
import {
  s as s3
} from "./chunk-JOVQBCRD.js";
import {
  e as e2
} from "./chunk-VNLFNBKT.js";
import {
  e as e4
} from "./chunk-VHTQ5H2C.js";
import {
  D,
  v
} from "./chunk-FKFXOPPT.js";
import {
  l,
  s as s2,
  u,
  y
} from "./chunk-N3A2BVTW.js";
import {
  e
} from "./chunk-6GWORUT3.js";
import {
  n
} from "./chunk-GZ2P4SCJ.js";
import {
  i2 as i,
  s
} from "./chunk-XWG6QGFK.js";

// node_modules/@arcgis/core/layers/graphics/featureConversionUtils.js
function g(t, e5) {
  return t ? e5 ? 4 : 3 : e5 ? 3 : 2;
}
var d = () => i.getLogger("esri.layers.graphics.featureConversionUtils");
var y2 = { esriGeometryPoint: 0, esriGeometryPolyline: 2, esriGeometryPolygon: 3, esriGeometryMultipoint: 0, esriGeometryMultiPatch: 3, esriGeometryEnvelope: 0 };
var p = (t, e5, n2, o, r, s4) => {
  t[n2] = r, t[n2 + 1] = s4;
};
var M = (t, e5, n2, o, r, s4) => {
  t[n2] = r, t[n2 + 1] = s4, t[n2 + 2] = e5[o + 2];
};
var I = (t, e5, n2, o, r, s4) => {
  t[n2] = r, t[n2 + 1] = s4, t[n2 + 2] = e5[o + 3];
};
var w = (t, e5, n2, o, r, s4) => {
  t[n2] = r, t[n2 + 1] = s4, t[n2 + 2] = e5[o + 2], t[n2 + 3] = e5[o + 3];
};
function G(t, e5, n2, o) {
  if (t) {
    if (n2) return e5 && o ? w : M;
    if (e5 && o) return I;
  } else if (e5 && o) return M;
  return p;
}
function b({ scale: t, translate: e5 }, n2) {
  return Math.round((n2 - e5[0]) / t[0]);
}
function T({ scale: t, translate: e5 }, n2) {
  return Math.round((e5[1] - n2) / t[1]);
}
function N({ scale: t, translate: e5 }, n2) {
  return Math.round((n2 - e5[0]) / t[0]);
}
function P({ scale: t, translate: e5 }, n2) {
  return Math.round((n2 - e5[1]) / t[1]);
}
function Z({ scale: t, translate: e5 }, n2, o) {
  return n2 * t[o] + e5[o];
}
function E(t, e5, n2) {
  return t ? e5 ? n2 ? v2(t) : z(t) : n2 ? Y(t) : j(t) : null;
}
function j(t) {
  const e5 = t.coords;
  return { x: e5[0], y: e5[1] };
}
function k(t, e5) {
  return t.coords[0] = e5.x, t.coords[1] = e5.y, t;
}
function z(t) {
  const e5 = t.coords;
  return { x: e5[0], y: e5[1], z: e5[2] };
}
function V(t, e5) {
  return t.coords[0] = e5.x, t.coords[1] = e5.y, t.coords[2] = e5.z, t;
}
function Y(t) {
  const e5 = t.coords;
  return { x: e5[0], y: e5[1], m: e5[2] };
}
function _(t, e5) {
  return t.coords[0] = e5.x, t.coords[1] = e5.y, t.coords[2] = e5.m, t;
}
function v2(t) {
  const e5 = t.coords;
  return { x: e5[0], y: e5[1], z: e5[2], m: e5[3] };
}
function L(t, e5) {
  return t.coords[0] = e5.x, t.coords[1] = e5.y, t.coords[2] = e5.z, t.coords[3] = e5.m, t;
}
function O(t, e5, n2, o) {
  let r = j;
  n2 && o ? r = v2 : n2 ? r = z : o && (r = Y);
  for (const s4 of e5) {
    const { geometry: e6, attributes: n3 } = s4, o2 = null != e6 ? r(e6) : null;
    t.push({ attributes: n3, geometry: o2 });
  }
  return t;
}
function S(t, e5) {
  return t && e5 ? L : t ? V : e5 ? _ : k;
}
function U(t, e5, n2, o, r) {
  const s4 = S(n2, o);
  for (const u2 of e5) {
    const e6 = null != u2.geometry ? s4(new e2(), u2.geometry) : null;
    t.push(new s3(e6, u2.attributes, null, e4(u2, r)));
  }
  return t;
}
function R(t, e5, n2 = S(null != e5.z, null != e5.m)) {
  return n2(t, e5);
}
function A(t, e5, n2, o) {
  for (const { geometry: r, attributes: s4 } of e5) t.push({ attributes: s4, geometry: null != r ? $(r, n2, o) : null });
  return t;
}
function $(t, e5, n2) {
  if (null == t) return null;
  const o = g(e5, n2), r = [];
  for (let s4 = 0; s4 < t.coords.length; s4 += o) {
    const e6 = [];
    for (let n3 = 0; n3 < o; n3++) e6.push(t.coords[s4 + n3]);
    r.push(e6);
  }
  return e5 ? n2 ? { points: r, hasZ: e5, hasM: n2 } : { points: r, hasZ: e5 } : n2 ? { points: r, hasM: n2 } : { points: r };
}
function q(t, e5, n2, o, r) {
  const s4 = g(n2, o);
  for (const u2 of e5) {
    const e6 = null != u2.geometry ? B(new e2(), u2.geometry, s4) : null;
    t.push(new s3(e6, u2.attributes, null, e4(u2, r)));
  }
  return t;
}
function B(t, e5, n2 = g(e5.hasZ, e5.hasM)) {
  t.lengths[0] = e5.points.length;
  const o = t.coords;
  let r = 0;
  for (const s4 of e5.points) for (let t2 = 0; t2 < n2; t2++) o[r++] = s4[t2];
  return t;
}
function C(t, e5, n2, o) {
  for (const { geometry: r, attributes: s4 } of e5) t.push({ attributes: s4, geometry: null != r ? D2(r, n2, o) : null });
  return t;
}
function D2(t, e5, n2) {
  if (!t) return null;
  const o = g(e5, n2), { coords: r, lengths: s4 } = t, u2 = [];
  let l2 = 0;
  for (const c of s4) {
    const t2 = [];
    for (let e6 = 0; e6 < c; e6++) {
      const e7 = [];
      for (let t3 = 0; t3 < o; t3++) e7.push(r[l2++]);
      t2.push(e7);
    }
    u2.push(t2);
  }
  return e5 ? n2 ? { paths: u2, hasZ: e5, hasM: n2 } : { paths: u2, hasZ: e5 } : n2 ? { paths: u2, hasM: n2 } : { paths: u2 };
}
function H(t, e5, n2, o, r) {
  const s4 = g(n2, o);
  for (const u2 of e5) {
    const e6 = null != u2.geometry ? J(new e2(), u2.geometry, s4) : null, n3 = null != u2.centroid ? R(new e2(), u2.centroid) : null;
    t.push(new s3(e6, u2.attributes, n3, e4(u2, r)));
  }
  return t;
}
function J(t, e5, n2 = g(e5.hasZ, e5.hasM)) {
  const { lengths: o, coords: r } = t;
  let s4 = 0;
  for (const u2 of e5.paths) {
    for (const t2 of u2) for (let e6 = 0; e6 < n2; e6++) r[s4++] = t2[e6];
    o.push(u2.length);
  }
  return t;
}
function K(t, e5, n2, o) {
  for (const { geometry: r, attributes: s4, centroid: u2 } of e5) {
    const e6 = null != r ? Q(r, n2, o) : null;
    if (null != u2) {
      const n3 = j(u2);
      t.push({ attributes: s4, centroid: n3, geometry: e6 });
    } else t.push({ attributes: s4, geometry: e6 });
  }
  return t;
}
function Q(t, e5, n2) {
  if (!t) return null;
  const o = g(e5, n2), { coords: r, lengths: s4 } = t, u2 = [];
  let l2 = 0;
  for (const c of s4) {
    const t2 = [];
    for (let e6 = 0; e6 < c; e6++) {
      const e7 = [];
      for (let t3 = 0; t3 < o; t3++) e7.push(r[l2++]);
      t2.push(e7);
    }
    u2.push(t2);
  }
  return e5 ? n2 ? { rings: u2, hasZ: e5, hasM: n2 } : { rings: u2, hasZ: e5 } : n2 ? { rings: u2, hasM: n2 } : { rings: u2 };
}
function W(t, e5, n2, o, r) {
  for (const s4 of e5) {
    const e6 = null != s4.geometry ? X(new e2(), s4.geometry, n2, o) : null, u2 = e4(s4, r);
    null != s4.centroid ? t.push(new s3(e6, s4.attributes, k(new e2(), s4.centroid), u2)) : t.push(new s3(e6, s4.attributes, null, u2));
  }
  return t;
}
function X(t, e5, n2 = e5.hasZ, o = e5.hasM) {
  return tt(t, e5.rings, n2, o);
}
function tt(t, e5, n2, o) {
  const r = g(n2, o), { lengths: s4, coords: u2 } = t;
  let l2 = 0;
  Ft(t);
  for (const c of e5) {
    for (const t2 of c) for (let e6 = 0; e6 < r; e6++) u2[l2++] = t2[e6];
    s4.push(c.length);
  }
  return t;
}
var et = [];
var nt = [];
function ot(t, e5, n2, o, r) {
  et[0] = t;
  const [s4] = rt(nt, et, e5, n2, o, r);
  return Zt(et), Zt(nt), s4;
}
function rt(e5, n2, o, r, s4, u2) {
  if (Zt(e5), !o) {
    for (const t of n2) {
      const n3 = e4(t, u2);
      e5.push(new s3(null, t.attributes, null, n3));
    }
    return e5;
  }
  switch (o) {
    case "esriGeometryPoint":
      return U(e5, n2, r, s4, u2);
    case "esriGeometryMultipoint":
      return q(e5, n2, r, s4, u2);
    case "esriGeometryPolyline":
      return H(e5, n2, r, s4, u2);
    case "esriGeometryPolygon":
    case "esriGeometryMultiPatch":
      return W(e5, n2, r, s4, u2);
    default:
      d().error("convertToFeatureSet:unknown-geometry", new s("internal:geometry", `Unable to parse unknown geometry type '${o}'`)), Zt(e5);
  }
  return e5;
}
function st(t, e5, n2, o) {
  nt[0] = t, it(et, nt, e5, n2, o);
  const r = et[0];
  return Zt(et), Zt(nt), r;
}
function ut(e5, n2, o) {
  if (null == e5) return null;
  const r = new e2();
  if ("hasZ" in e5 && null == n2 && (n2 = e5.hasZ), "hasM" in e5 && null == o && (o = e5.hasM), l(e5)) {
    return S(null != n2 ? n2 : null != e5.z, null != o ? o : null != e5.m)(r, e5);
  }
  return y(e5) ? X(r, e5, n2, o) : s2(e5) ? J(r, e5, g(n2, o)) : u(e5) ? B(r, e5, g(n2, o)) : void d().error("convertFromGeometry:unknown-geometry", new s("internal:geometry", `Unable to parse unknown geometry type '${e5}'`));
}
function lt(e5, n2, o, r) {
  const s4 = e5 && ("coords" in e5 ? e5 : e5.geometry);
  if (null == s4) return null;
  switch (n2) {
    case "esriGeometryPoint": {
      let t = j;
      return o && r ? t = v2 : o ? t = z : r && (t = Y), t(s4);
    }
    case "esriGeometryMultipoint":
      return $(s4, o, r);
    case "esriGeometryPolyline":
      return D2(s4, o, r);
    case "esriGeometryPolygon":
      return Q(s4, o, r);
    default:
      return d().error("convertToGeometry:unknown-geometry", new s("internal:geometry", `Unable to parse unknown geometry type '${n2}'`)), null;
  }
}
function ct(t, e5) {
  for (const n2 of e5) t.push({ attributes: n2.attributes });
  return t;
}
function it(e5, n2, o, r, s4) {
  if (Zt(e5), null == o) return ct(e5, n2);
  switch (o) {
    case "esriGeometryPoint":
      return O(e5, n2, r, s4);
    case "esriGeometryMultipoint":
      return A(e5, n2, r, s4);
    case "esriGeometryPolyline":
      return C(e5, n2, r, s4);
    case "esriGeometryPolygon":
      return K(e5, n2, r, s4);
    default:
      d().error("convertToFeatureSet:unknown-geometry", new s("internal:geometry", `Unable to parse unknown geometry type '${o}'`));
  }
  return e5;
}
function ft(t) {
  const { spatialReference: e5, transform: n2, fields: o, hasM: r, hasZ: s4, features: u2, geometryType: l2, exceededTransferLimit: c, queryGeometry: i2, queryGeometryType: f } = t, a = { features: it([], u2, l2, s4, r), fields: o, geometryType: l2, spatialReference: e5, queryGeometry: lt(i2, f, false, false) };
  return n2 && (a.transform = n2), c && (a.exceededTransferLimit = c), r && (a.hasM = r), s4 && (a.hasZ = s4), a;
}
function at(t, e5) {
  const n2 = new e3(), { hasM: o, hasZ: r, features: s4, spatialReference: u2, geometryType: l2, exceededTransferLimit: c, transform: i2, fields: f } = t;
  return f && (n2.fields = f), n2.geometryType = l2 ?? null, n2.spatialReference = u2 ?? null, s4 && rt(n2.features, s4, l2, r, o, e5), c && (n2.exceededTransferLimit = c), o && (n2.hasM = o), r && (n2.hasZ = r), i2 && (n2.transform = i2), n2;
}
function ht(t) {
  const { transform: e5, features: n2, hasM: o, hasZ: r } = t;
  if (!e5) return t;
  for (const s4 of n2) null != s4.geometry && wt(s4.geometry, s4.geometry, o, r, e5), null != s4.centroid && wt(s4.centroid, s4.centroid, o, r, e5);
  return t.transform = null, t;
}
function mt(t, e5) {
  const { geometryType: n2, features: o, hasM: r, hasZ: s4 } = e5;
  if (!t) return e5;
  for (let u2 = 0; u2 < o.length; u2++) {
    const e6 = o[u2], l2 = e6.weakClone();
    l2.geometry = new e2(), gt(l2.geometry, e6.geometry, r, s4, n2, t), e6.centroid && (l2.centroid = new e2(), gt(l2.centroid, e6.centroid, r, s4, "esriGeometryPoint", t)), o[u2] = l2;
  }
  return e5.transform = t, e5;
}
function gt(t, e5, n2, o, r, s4, u2 = n2, l2 = o) {
  if (Ft(t), !e5?.coords.length) return null;
  const c = y2[r], { coords: i2, lengths: f } = e5, a = g(n2, o), h = g(n2 && u2, o && l2), m = G(n2, o, u2, l2);
  if (!f.length) return m(t.coords, i2, 0, 0, b(s4, i2[0]), T(s4, i2[1])), Ft(t, a, 0), t;
  let d2, p2, M2, I2, w2 = 0, N2 = 0, P2 = N2;
  for (const g2 of f) {
    if (g2 < c) continue;
    let e6 = 0;
    N2 = P2, M2 = d2 = b(s4, i2[w2]), I2 = p2 = T(s4, i2[w2 + 1]), m(t.coords, i2, N2, w2, M2, I2), e6++, w2 += a, N2 += h;
    for (let n3 = 1; n3 < g2; n3++, w2 += a) M2 = b(s4, i2[w2]), I2 = T(s4, i2[w2 + 1]), M2 === d2 && I2 === p2 || (m(t.coords, i2, N2, w2, M2 - d2, I2 - p2), N2 += h, e6++, d2 = M2, p2 = I2);
    e6 >= c && (t.lengths.push(e6), P2 = N2);
  }
  return Zt(t.coords, P2), t.coords.length ? t : null;
}
function dt(t, e5, n2, o, r, s4, u2 = n2, l2 = o) {
  if (Ft(t), !e5?.coords.length) return null;
  const c = y2[r], { coords: i2, lengths: f } = e5, a = g(n2, o), h = g(n2 && u2, o && l2), m = G(n2, o, u2, l2);
  if (!f.length) return m(t.coords, i2, 0, 0, i2[0], i2[1]), Ft(t, a, 0), t;
  let d2 = 0;
  const p2 = s4 * s4;
  for (const g2 of f) {
    if (g2 < c) {
      d2 += g2 * a;
      continue;
    }
    const e6 = t.coords.length / h, n3 = d2, o2 = d2 + (g2 - 1) * a;
    m(t.coords, i2, t.coords.length, n3, i2[n3], i2[n3 + 1]), pt(t.coords, i2, a, p2, m, n3, o2), m(t.coords, i2, t.coords.length, o2, i2[o2], i2[o2 + 1]);
    const r2 = t.coords.length / h - e6;
    r2 >= c ? t.lengths.push(r2) : Zt(t.coords, e6 * h), d2 += g2 * a;
  }
  return t.coords.length ? t : null;
}
function yt(t, e5, n2, o) {
  const r = t[e5], s4 = t[e5 + 1], u2 = t[n2], l2 = t[n2 + 1], c = t[o], i2 = t[o + 1];
  let f = u2, a = l2, h = c - f, m = i2 - a;
  if (0 !== h || 0 !== m) {
    const t2 = ((r - f) * h + (s4 - a) * m) / (h * h + m * m);
    t2 > 1 ? (f = c, a = i2) : t2 > 0 && (f += h * t2, a += m * t2);
  }
  return h = r - f, m = s4 - a, h * h + m * m;
}
function pt(t, e5, n2, o, r, s4, u2) {
  let l2, c = o, i2 = 0;
  for (let f = s4 + n2; f < u2; f += n2) l2 = yt(e5, f, s4, u2), l2 > c && (i2 = f, c = l2);
  c > o && (i2 - s4 > n2 && pt(t, e5, n2, o, r, s4, i2), r(t, e5, t.length, i2, e5[i2], e5[i2 + 1]), u2 - i2 > n2 && pt(t, e5, n2, o, r, i2, u2));
}
function Mt(t, e5, n2, u2) {
  if (!e5?.coords?.length) return null;
  const l2 = g(n2, u2);
  let c = Number.POSITIVE_INFINITY, i2 = Number.POSITIVE_INFINITY, f = Number.NEGATIVE_INFINITY, a = Number.NEGATIVE_INFINITY;
  if (e5 && e5.coords) {
    const t2 = e5.coords;
    for (let e6 = 0; e6 < t2.length; e6 += l2) {
      const n3 = t2[e6], o = t2[e6 + 1];
      c = Math.min(c, n3), f = Math.max(f, n3), i2 = Math.min(i2, o), a = Math.max(a, o);
    }
  }
  return v(t) ? D(t, c, i2, f, a) : e(c, i2, f, a, t), t;
}
function wt(t, e5, o, r, s4) {
  const { coords: u2, lengths: l2 } = e5, c = g(o, r);
  if (!u2.length) return t !== e5 && Ft(t), t;
  n(s4);
  const { originPosition: i2, scale: f, translate: a } = s4, h = Et;
  h.originPosition = i2;
  const m = h.scale;
  m[0] = f[0] ?? 1, m[1] = -(f[1] ?? 1), m[2] = f[2] ?? 1, m[3] = f[3] ?? 1;
  const d2 = h.translate;
  if (d2[0] = a[0] ?? 0, d2[1] = a[1] ?? 0, d2[2] = a[2] ?? 0, d2[3] = a[3] ?? 0, !l2.length) {
    for (let e6 = 0; e6 < c; ++e6) t.coords[e6] = Z(h, u2[e6], e6);
    return t !== e5 && Ft(t, c, 0), t;
  }
  let y3 = 0;
  for (let n2 = 0; n2 < l2.length; n2++) {
    const e6 = l2[n2];
    t.lengths[n2] = e6;
    for (let n3 = 0; n3 < c; ++n3) t.coords[y3 + n3] = Z(h, u2[y3 + n3], n3);
    let o2 = t.coords[y3], r2 = t.coords[y3 + 1];
    y3 += c;
    for (let n3 = 1; n3 < e6; n3++, y3 += c) {
      o2 += u2[y3] * m[0], r2 += u2[y3 + 1] * m[1], t.coords[y3] = o2, t.coords[y3 + 1] = r2;
      for (let e7 = 2; e7 < c; ++e7) t.coords[y3 + e7] = Z(h, u2[y3 + e7], e7);
    }
  }
  return t !== e5 && Ft(t, u2.length, l2.length), t;
}
function Gt(t, e5, n2, o, r, s4) {
  if (Ft(t), t.lengths.push(...e5.lengths), n2 === r && o === s4) for (let u2 = 0; u2 < e5.coords.length; u2++) t.coords.push(e5.coords[u2]);
  else {
    const u2 = g(n2, o), l2 = G(n2, o, r, s4), c = e5.coords;
    for (let e6 = 0; e6 < c.length; e6 += u2) l2(t.coords, c, t.coords.length, e6, c[e6], c[e6 + 1]);
  }
  return t;
}
function Tt(t, e5, n2, o) {
  let r = 0, s4 = t[o * e5], u2 = t[o * (e5 + 1)];
  for (let l2 = 1; l2 < n2; l2++) {
    const n3 = s4 + t[o * (e5 + l2)], c = u2 + t[o * (e5 + l2) + 1], i2 = (n3 - s4) * (c + u2);
    s4 = n3, u2 = c, r += i2;
  }
  return 0.5 * r;
}
function Nt(t, e5) {
  const { coords: n2, lengths: o } = t;
  let r = 0, s4 = 0;
  for (let u2 = 0; u2 < o.length; u2++) {
    const t2 = o[u2];
    s4 += Tt(n2, r, t2, e5), r += t2;
  }
  return Math.abs(s4);
}
function Pt(t, e5, n2, o) {
  return 0 === t * o - n2 * e5 && t * n2 + e5 * o > 0;
}
function xt(t, e5, n2, o, r) {
  const s4 = g(o, r);
  if (!t.lengths.length) {
    if (t.coords.length < 2) return null;
    const [n3, o2] = t.coords, r2 = N(e5, n3), s5 = P(e5, o2);
    return new e2([], [r2, s5]);
  }
  const u2 = new e2([], [0, 0]), l2 = y2[n2], c = "esriGeometryPolygon" === n2 || "esriGeometryPolyline" === n2;
  let i2 = 0, f = 0;
  for (let a = 0; a < t.lengths.length; a++) {
    const n3 = t.lengths[a], o2 = f;
    let r2 = N(e5, t.coords[s4 * i2]), h = P(e5, t.coords[s4 * i2 + 1]);
    u2.coords[f++] = r2, u2.coords[f++] = h;
    let m = 0, g2 = 0, d2 = 1;
    for (let l3 = 1; l3 < n3; l3++) {
      const n4 = N(e5, t.coords[s4 * (l3 + i2)]), o3 = P(e5, t.coords[s4 * (l3 + i2) + 1]);
      if (n4 !== r2 || o3 !== h) {
        const t2 = n4 - r2, e6 = o3 - h;
        c && Pt(m, g2, t2, e6) ? (u2.coords[f - 2] += t2, u2.coords[f - 1] += e6, r2 += t2, h += e6) : (u2.coords[f++] = n4, u2.coords[f++] = o3, r2 = n4, h = o3, m = t2, g2 = e6, d2 += 1);
      }
    }
    d2 < l2 ? f = o2 : u2.lengths.push(d2), i2 += n3;
  }
  return 0 === u2.lengths.length ? null : u2;
}
function Ft(t, e5 = 0, n2 = 0) {
  Zt(t.lengths, n2), Zt(t.coords, e5);
}
function Zt(t, e5 = 0) {
  t.length !== e5 && (t.length = e5);
}
var Et = { originPosition: "lowerLeft", scale: [1, 1, 1, 1], translate: [0, 0, 0, 0] };

export {
  b,
  T,
  E,
  R,
  $,
  D2 as D,
  Q,
  X,
  tt,
  ot,
  rt,
  st,
  ut,
  lt,
  ft,
  at,
  ht,
  mt,
  gt,
  dt,
  Mt,
  wt,
  Gt,
  Nt,
  xt
};
//# sourceMappingURL=chunk-DKS7UUDR.js.map
