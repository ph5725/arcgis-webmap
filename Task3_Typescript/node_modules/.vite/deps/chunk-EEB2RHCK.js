import {
  a as a2
} from "./chunk-IAKXH7PU.js";
import {
  h
} from "./chunk-YIXK32VF.js";
import {
  n
} from "./chunk-HWKQJUGY.js";
import {
  o
} from "./chunk-YIV2QKTZ.js";
import {
  m as m2
} from "./chunk-FIRNXFAH.js";
import {
  b,
  m
} from "./chunk-N3XLUQJI.js";
import {
  a2 as a
} from "./chunk-JUAD7TJ6.js";
import {
  r
} from "./chunk-5TPMG26T.js";
import {
  u2 as u
} from "./chunk-GZ2P4SCJ.js";
import {
  i2 as i
} from "./chunk-XWG6QGFK.js";

// node_modules/@arcgis/core/views/layers/LayerView.js
var u2 = class extends n.IdentifiableMixin(m2.EsriPromiseMixin(o.EventedMixin(b))) {
  get spatialReferenceSupported() {
    return true;
  }
  constructor(e) {
    super(e), this._updatingHandles = new h(), this.layer = null, this.parent = null;
  }
  initialize() {
    this.when().catch((e) => {
      if ("layerview:create-error" !== e.name) {
        const t = this.layer && this.layer.id || "no id", r2 = this.layer?.title || "no title";
        i.getLogger(this).error("#resolve()", `Failed to resolve layer view (layer title: '${r2}', id: '${t}')`, e);
      }
    });
  }
  destroy() {
    this._updatingHandles = u(this._updatingHandles);
  }
  get fullOpacity() {
    return (this.layer?.opacity ?? 1) * (this.parent?.fullOpacity ?? 1);
  }
  get suspended() {
    return this.destroyed || !this.canResume();
  }
  get suspendInfo() {
    return this.getSuspendInfo();
  }
  get legendEnabled() {
    return !this.suspended && true === this.layer?.legendEnabled;
  }
  get updating() {
    return !(!this._updatingHandles?.updating && !this.isUpdating());
  }
  get updatingProgress() {
    return this.updating ? 0 : 1;
  }
  get updateSuspended() {
    return this.suspended;
  }
  get visible() {
    return true === this.layer?.visible;
  }
  set visible(e) {
    this._overrideIfSome("visible", e);
  }
  get visibleAtCurrentScale() {
    return true;
  }
  get visibleAtCurrentTimeExtent() {
    const e = this.view.timeExtent, t = this.layer?.visibilityTimeExtent;
    return !e || !t || !e.intersection(t).isEmpty;
  }
  canResume() {
    const e = this.layer && "effectiveScaleRange" in this.layer ? this.layer.effectiveScaleRange : null;
    return this.visible && this.layer?.loaded && this.parent && !this.parent.suspended && this.view?.ready && a2(e) && this.visibleAtCurrentScale && this.visibleAtCurrentTimeExtent || false;
  }
  getSuspendInfo() {
    const e = this.parent?.suspended ? this.parent.suspendInfo : {}, t = this;
    t.view?.ready || (e.viewNotReady = true), this.layer && this.layer.loaded || (e.layerNotLoaded = true);
    const r2 = this.layer && "effectiveScaleRange" in this.layer ? this.layer.effectiveScaleRange : null;
    return a2(r2) && this.visibleAtCurrentScale || (e.outsideScaleRange = true), this.visibleAtCurrentTimeExtent || (e.outsideVisibilityTimeExtent = true), this.visible || (e.layerInvisible = true), e;
  }
  isUpdating() {
    return false;
  }
};
r([m({ readOnly: true })], u2.prototype, "spatialReferenceSupported", null), r([m()], u2.prototype, "view", void 0), r([m()], u2.prototype, "fullOpacity", null), r([m()], u2.prototype, "layer", void 0), r([m()], u2.prototype, "parent", void 0), r([m({ readOnly: true })], u2.prototype, "suspended", null), r([m({ readOnly: true })], u2.prototype, "suspendInfo", null), r([m({ readOnly: true })], u2.prototype, "legendEnabled", null), r([m({ type: Boolean, readOnly: true })], u2.prototype, "updating", null), r([m({ readOnly: true })], u2.prototype, "updatingProgress", null), r([m()], u2.prototype, "updateSuspended", null), r([m()], u2.prototype, "visible", null), r([m({ readOnly: true })], u2.prototype, "visibleAtCurrentScale", null), r([m({ readOnly: true })], u2.prototype, "visibleAtCurrentTimeExtent", null), u2 = r([a("esri.views.layers.LayerView")], u2);

export {
  u2 as u
};
//# sourceMappingURL=chunk-EEB2RHCK.js.map
