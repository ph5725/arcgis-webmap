import {
  e as e4,
  e2 as e5,
  o,
  r as r3,
  y
} from "./chunk-VZRBHAHT.js";
import {
  B,
  C,
  D as D2,
  E,
  F,
  H,
  K,
  L,
  M,
  q
} from "./chunk-73JRZP7E.js";
import {
  a2 as a4,
  o as o2,
  s2 as s6,
  t2
} from "./chunk-TAPCW5Z5.js";
import {
  a as a5,
  c,
  i as i7
} from "./chunk-ORKTLG2L.js";
import {
  O as O2,
  R as R2,
  S as S2,
  Z,
  a as a2,
  i as i4,
  i3 as i6,
  s as s3,
  s2 as s5
} from "./chunk-WKCCXG3E.js";
import {
  r as r2
} from "./chunk-ZWJOMK2U.js";
import {
  e as e3,
  i as i3,
  l as l3
} from "./chunk-JQSXFLSD.js";
import {
  e
} from "./chunk-VNLFNBKT.js";
import {
  O
} from "./chunk-BZYXFNL4.js";
import {
  n as n2
} from "./chunk-NMP7ZOVG.js";
import {
  a as a3,
  i as i5,
  s as s4
} from "./chunk-YHYQP7QX.js";
import {
  A,
  Bi,
  G as G2,
  R,
  a,
  ci,
  si,
  ti,
  zi
} from "./chunk-RP7FUW55.js";
import {
  S
} from "./chunk-TNW4TPNP.js";
import {
  D
} from "./chunk-DJJNSAUR.js";
import {
  G,
  e as e2,
  i as i2,
  n,
  ne,
  w
} from "./chunk-TMC6HYGQ.js";
import {
  l as l2
} from "./chunk-KE3WBZYL.js";
import {
  u
} from "./chunk-MUKDJQWB.js";
import {
  t
} from "./chunk-52HWRRRQ.js";
import {
  r,
  s as s2
} from "./chunk-FPSA4NFH.js";
import {
  i2 as i,
  l,
  s
} from "./chunk-XWG6QGFK.js";
import {
  has
} from "./chunk-FXKORAMT.js";

// node_modules/@arcgis/core/views/2d/engine/webgl/grouping.js
function e6(e12, o13) {
  let r13;
  if ("string" == typeof e12) r13 = l(e12 + `-seed(${o13})`);
  else {
    let t5 = 12;
    r13 = e12 ^ o13;
    do {
      r13 = 107 * (r13 >> 8 ^ r13) + t5 | 0;
    } while (0 !== --t5);
  }
  return (1 + r13 / (1 << 31)) / 2;
}
function o3(t5) {
  return Math.floor(e6(t5, r4) * n3);
}
var r4 = 53290320;
var n3 = 10;

// node_modules/@arcgis/core/views/2d/engine/webgl/animations/infos.js
function n4(t5) {
  return t5 instanceof i8 ? t5 : "object" == typeof t5 && "type" in t5 ? c2[t5.type].hydrate(t5) : new o4(t5);
}
var i8 = class {
  constructor(t5) {
    this.inputs = t5;
  }
  encode() {
    const t5 = [];
    for (const n13 of this.inputs) t5.push(...n13.encode());
    return t5.push(...this.instructions), t5;
  }
};
var o4 = class extends i8 {
  constructor(t5) {
    super([]), this.value = t5;
  }
  simplify() {
    return this;
  }
  get instructions() {
    if (Array.isArray(this.value)) {
      const [n13, i17, o13, s18] = this.value;
      return null != s18 ? y.vector4.encode([n13, i17 || 0, o13 || 0, s18]) : y.vector3.encode([n13, i17 || 0, o13 || 0]);
    }
    return y.scalar.encode(this.value);
  }
};
var s7 = class _s extends i8 {
  constructor(t5, n13) {
    super([n13]), this._config = t5, this._parent = n13;
  }
  static hydrate(t5) {
    return new _s(t5, n4(t5.parent));
  }
  simplify() {
    if (this._config.relativeTranslation || this._config.absoluteScale) return this;
    const t5 = this._parent.simplify();
    if (!(t5 instanceof o4)) return this;
    const [n13, i17, r13, e12] = t5.value, c9 = this._config.translation.from[0], a14 = this._config.translation.from[1], f9 = this._config.rotation.from, h8 = this._config.scale.from;
    if (c9 === this._config.translation.to[0] && a14 === this._config.translation.to[1] && f9 === this._config.rotation.to && h8 === this._config.scale.to) {
      const t6 = r13 + f9, s18 = e12 * h8, u8 = Math.sin(r13), l13 = Math.cos(r13);
      return new o4([l13 * e12 * c9 - u8 * e12 * a14 + n13, u8 * e12 * c9 + l13 * e12 * a14 + i17, t6, s18]);
    }
    return new _s(this._config, t5);
  }
  get instructions() {
    return y.animatedTransform.encode(this._config);
  }
};
var r5 = class _r extends i8 {
  constructor(t5, n13) {
    super([n13]), this._config = t5, this._parent = n13;
  }
  static hydrate(t5) {
    return new _r(t5, n4(t5.parent));
  }
  simplify() {
    const t5 = this._parent.simplify();
    if (!(t5 instanceof o4)) return this;
    const [n13, i17, s18, e12] = t5.value, c9 = this._config.color.from[0], a14 = this._config.color.from[1], f9 = this._config.color.from[2];
    let h8 = this._config.color.from[3];
    const u8 = this._config.opacity.from;
    return c9 === this._config.color.to[0] && a14 === this._config.color.to[1] && f9 === this._config.color.to[2] && h8 === this._config.color.to[3] && u8 === this._config.opacity.to ? (h8 *= u8, new o4([n13 * c9, i17 * a14, s18 * f9, e12 * h8])) : new _r(this._config, t5);
  }
  get instructions() {
    return y.animatedColor.encode(this._config);
  }
};
var e7 = class _e extends i8 {
  constructor(t5, n13) {
    super([n13]), this._config = t5, this._parent = n13;
  }
  static hydrate(t5) {
    return new _e(t5, n4(t5.parent));
  }
  simplify() {
    const t5 = this._parent.simplify();
    return t5 instanceof o4 ? new _e(this._config, t5) : this;
  }
  get instructions() {
    return y.animatedShift.encode(this._config);
  }
};
var c2 = { AnimatedTransform: s7, AnimatedColor: r5, AnimatedShift: e7 };

// node_modules/@arcgis/core/views/2d/engine/webgl/animations/utils.js
function s8(e12) {
  return a6(e12.map((e13) => l4(e13)).map((e13) => n4(e13).simplify()));
}
function r6(e12) {
  const t5 = [];
  return t5.push(e12.transform), t5.push(e12.fromColor), t5.push(e12.toColor), t5.push(e12.colorMix), t5.push(e12.toOpacity), t5.push(e12.opacityMix), e12?.shift ? t5.push(e12?.shift) : t5.push([1, 1, 1, 1]), t5;
}
function a6(e12) {
  const t5 = [], o13 = [];
  let i17 = 0;
  for (const s18 of e12) {
    const r13 = [...s18.encode(), ...y.ret.encode()];
    t5.push([i17 + e12.length, 0, 0, 0]), o13.push(...r13), i17 += r13.length;
  }
  return [...t5, ...o13];
}
async function c3(e12, t5) {
  const o13 = e12;
  let i17;
  if ("number" == typeof o13 || "string" == typeof o13 || "boolean" == typeof o13) i17 = o13;
  else if (Array.isArray(o13)) i17 = await Promise.all(o13.map((e13) => c3(e13, t5)));
  else if ("object" == typeof o13) if ("valueExpressionInfo" in o13) {
    const { valueExpressionInfo: e13 } = o13, { expression: n13 } = e13;
    i17 = { ...o13, computed: await t5.createComputedField({ expression: n13 }) };
  } else {
    i17 = {};
    for (const e13 in o13) i17[e13] = await c3(o13[e13], t5);
  }
  return i17;
}
function l4(i17, n13, s18) {
  function r13(t5) {
    if (!("computed" in t5)) return t5;
    let o13 = t5.computed.readWithDefault(n13, s18, [255 * t5.defaultValue[0], 255 * t5.defaultValue[1], 255 * t5.defaultValue[2], t5.defaultValue[3]]);
    if ("string" == typeof o13) {
      const t6 = l2.fromString(o13);
      t6 && (o13 = [t6.r, t6.g, t6.b, t6.a]);
    }
    return o13;
  }
  const a14 = i17;
  let c9;
  if ("number" == typeof a14 || "string" == typeof a14 || "boolean" == typeof a14) c9 = a14;
  else if (Array.isArray(a14)) c9 = a14.map((e12) => l4(e12, n13, s18));
  else if ("object" == typeof a14) if ("type" in a14 && null != a14.type && "Process" === a14.type) switch (a14.op) {
    case "ArcadeColor":
      {
        const e12 = l4(a14.value, n13, s18);
        p(Array.isArray(e12) && 4 === e12.length);
        c9 = [e12[0] / 255, e12[1] / 255, e12[2] / 255, e12[3]];
      }
      break;
    case "Transparency":
      {
        const e12 = l4(a14.value, n13, s18);
        p("number" == typeof e12), c9 = 1 - e12 / 100;
      }
      break;
    case "Divide":
    case "Multiply":
    case "Add":
      {
        const e12 = l4(a14.left, n13, s18);
        p("number" == typeof e12);
        const t5 = l4(a14.right, n13, s18);
        switch (p("number" == typeof t5), a14.op) {
          case "Divide":
            c9 = e12 / t5;
            break;
          case "Multiply":
            c9 = e12 * t5;
            break;
          case "Add":
            c9 = e12 + t5;
        }
      }
      break;
    case "Random":
      {
        const e12 = l4(a14.seed, n13, s18), i18 = l4(a14.min, n13, s18), r14 = l4(a14.max, n13, s18), f9 = n13.getObjectId(), p9 = o3(f9 || 0);
        c9 = i18 + e6(p9, e12) * (r14 - i18);
      }
      break;
    case "Cond":
      {
        const e12 = l4(a14.condition, n13, s18), t5 = l4(a14.ifTrue, n13, s18), o13 = l4(a14.ifFalse, n13, s18);
        c9 = e12 ? t5 : o13;
      }
      break;
    case "MatchWinding": {
      const e12 = l4(a14.sign, n13, s18);
      let t5 = l4(a14.angle, n13, s18);
      if (e12 > 0) for (; t5 < 0; ) t5 += 2 * Math.PI;
      else for (; t5 > 0; ) t5 -= 2 * Math.PI;
      c9 = t5;
    }
  }
  else if ("computed" in a14) c9 = r13(a14);
  else {
    c9 = {};
    for (const e12 in a14) c9[e12] = l4(a14[e12], n13, s18);
  }
  return c9;
}
function* f(e12) {
  const t5 = e12;
  if (Array.isArray(t5)) for (const o13 of t5) yield* f(o13);
  else if ("object" == typeof t5) if ("type" in t5 && null != t5.type && "Process" === t5.type) switch (t5.op) {
    case "ArcadeColor":
    case "Transparency":
      yield* f(t5.value);
      break;
    case "Divide":
    case "Multiply":
    case "Add":
      yield* f(t5.left), yield* f(t5.right);
      break;
    case "Random":
      yield* f(t5.seed), yield* f(t5.min), yield* f(t5.max);
      break;
    case "Cond":
      yield* f(t5.condition), yield* f(t5.ifTrue), yield* f(t5.ifFalse);
      break;
    case "MatchWinding":
      yield* f(t5.sign), yield* f(t5.angle);
  }
  else if ("computed" in t5) yield t5.computed;
  else for (const o13 in t5) yield* f(t5[o13]);
}
function p(e12) {
  if (!e12) throw new Error("Assertion failed.");
}

// node_modules/@arcgis/core/views/2d/engine/webgl/shaderGraph/techniques/fill/meshWriterUtils.js
var i9 = () => i.getLogger("esri.views.2d.engine.webgl.shaderGraph.techniques.meshWriterUtils");
var u2 = 0;
var a7 = 100;
function m(r13, e12) {
  return [!!r13?.minScale && e12.scaleToZoom(r13.minScale) || u2, !!r13?.maxScale && e12.scaleToZoom(r13.maxScale) || a7];
}
function f2(r13) {
  return 1 << r13;
}
function l5(r13) {
  let e12 = 0;
  for (const [t5, n13] of r13) n13 && (e12 |= 1 << t5);
  return e12;
}
function g(t5) {
  let n13;
  if (!t5) return [0, 0, 0, 0];
  if ("string" == typeof t5) {
    const o14 = l2.fromString(t5);
    if (!o14) return i9().errorOnce(new s("mapview:mesh-processing", "Unable to parse string into color", { color: t5 })), [0, 0, 0, 0];
    n13 = o14.toArray();
  } else n13 = t5;
  const [o13, s18, c9, u8] = n13;
  return [o13 * (u8 / 255), s18 * (u8 / 255), c9 * (u8 / 255), u8];
}
function h(r13) {
  switch (r13) {
    case "butt":
    case w.Butt:
      return e2.BUTT;
    case "round":
    case w.Round:
      return e2.ROUND;
    case "square":
    case w.Square:
      return e2.SQUARE;
  }
}
function p2(r13) {
  switch (r13) {
    case "bevel":
    case G.Bevel:
      return n.BEVEL;
    case "miter":
    case G.Miter:
      return n.MITER;
    case "round":
    case G.Round:
      return n.ROUND;
  }
}
function d(r13, e12) {
  return Math.round(Math.min(Math.sqrt(r13 * e12), 255));
}
function S3(r13, e12) {
  return Math.round(r13 * e12) / e12;
}

// node_modules/@arcgis/core/symbols/cim/effects/CIMEffectHelper.js
var n5 = 96 / 72;
var l6 = class {
  static executeEffects(t5, e12, l13, c9, f9) {
    const m9 = n5, p9 = Z(t5);
    let u8 = new s3(e12);
    for (const o13 of t5) {
      const t6 = R2(o13);
      t6 && (u8 = t6.execute(u8, o13, m9, l13, c9, p9, f9));
    }
    return u8;
  }
  static applyEffects(n13, l13, c9) {
    if (!n13) return l13;
    const f9 = Z(n13);
    let m9, p9 = new s3(a2.fromJSONCIM(l13));
    for (const t5 of n13) {
      const e12 = R2(t5);
      e12 && (p9 = e12.execute(p9, t5, 1, null, c9, f9, false));
    }
    const u8 = [];
    let i17 = null;
    for (; m9 = p9.next(); ) u8.push(...t(m9)), i17 = m9.geometryType;
    return 0 === u8.length || null === i17 ? null : "esriGeometryPolygon" === i17 ? { rings: u8 } : { paths: u8 };
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/shaderGraph/techniques/mesh/loadGeometryEngine.js
var n6 = null;
function t3() {
  return n6;
}
async function e8() {
  n6 = await import("./geometryEngineJSON-MSK3YET3.js");
}

// node_modules/@arcgis/core/views/2d/engine/webgl/shaderGraph/techniques/mesh/AlignedVertexSpec.js
function s9(t5) {
  switch (t5) {
    case O.BYTE:
    case O.UNSIGNED_BYTE:
      return 1;
    case O.SHORT:
    case O.UNSIGNED_SHORT:
    case O.HALF_FLOAT:
      return 2;
    case O.FLOAT:
    case O.INT:
    case O.UNSIGNED_INT:
      return 4;
  }
}
function o5(t5) {
  const e12 = [], o13 = [], n13 = [];
  for (const i17 of t5) {
    const t6 = s9(i17.type) * i17.count;
    switch (t6 % 2 || t6 % 4 || 4) {
      case 4:
        e12.push(i17);
        continue;
      case 2:
        o13.push(i17);
        continue;
      case 1:
        n13.push(i17);
        continue;
      default:
        throw new Error("Found unexpected dataType byte count");
    }
  }
  return e12.push(...o13), e12.push(...n13), e12;
}
var n7 = class _n {
  static fromVertexSpec(t5, e12) {
    const { attributes: i17, optionalAttributes: r13 } = t5;
    let a14, c9, u8;
    const p9 = [];
    for (const s18 in i17) {
      if (i17[s18].otherSource) continue;
      const t6 = i17[s18];
      "position" === t6.pack ? a14 = { ...t6, name: s18, offset: 0 } : "id" === t6.pack ? c9 = { ...t6, name: s18, offset: 4 } : "bitset" === s18 ? u8 = { ...t6, name: s18, offset: 7 } : p9.push({ ...t6, name: s18 });
    }
    for (const s18 in r13) if (true === e12[s18]) {
      const t6 = r13[s18];
      p9.push({ ...t6, name: s18 });
    }
    const h8 = o5(p9), f9 = [];
    let m9 = 8, b4 = 1;
    for (const o13 of h8) f9.push({ ...o13, offset: m9 }), m9 += s9(o13.type) * o13.count, o13.packAlternating && (b4 = Math.max(o13.packAlternating.count, b4));
    const d7 = Uint32Array.BYTES_PER_ELEMENT, _3 = m9 % d7;
    return new _n(a14, c9, u8, f9, m9 + (_3 ? d7 - _3 : 0), b4);
  }
  constructor(t5, e12, s18, o13, n13, i17) {
    this.position = t5, this.id = e12, this.bitset = s18, this.standardAttributes = o13, this.stride = n13, this.packVertexCount = i17, o13.push(s18), this._attributes = [t5, e12, s18, ...o13];
  }
  get attributeLayout() {
    if (!this._attributeLayout) {
      const e12 = t2(this._attributes), s18 = this._attributes.map((t5) => ({ name: t5.name, count: t5.count, offset: t5.offset, type: t5.type, packPrecisionFactor: t5.packPrecisionFactor, normalized: t5.normalized ?? false }));
      this._attributeLayout = { attributes: s18, hash: e12, stride: this.stride };
    }
    return this._attributeLayout;
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/shaderGraph/techniques/mesh/MeshWriterVertexPack.js
var i10 = class _i {
  static fromVertexSpec(t5, s18) {
    const c9 = n7.fromVertexSpec(t5, s18);
    return new _i(c9);
  }
  constructor(t5) {
    this._spec = t5, this._packed = new Uint8Array(this._spec.stride * this._spec.packVertexCount), this._packedU32View = new Uint32Array(this._packed.buffer), this._dataView = new DataView(this._packed.buffer);
  }
  get attributeLayout() {
    return this._spec.attributeLayout;
  }
  get stride() {
    return this._spec.stride;
  }
  writeVertex(t5, e12, s18, i17, c9, a14) {
    for (let p9 = 0; p9 < this._spec.packVertexCount; p9++) {
      const t6 = p9 * this._spec.stride;
      this._packPosition(s18, i17, t6), this._packId(e12, t6);
      const r13 = this._spec.bitset;
      if (a14) {
        if (r13.packTessellation) {
          const e13 = r13.packTessellation(a14, c9, s18, i17);
          this._pack(e13, r13, t6);
        }
        for (const e13 of this._spec.standardAttributes) if (null != e13.packTessellation) {
          const p10 = e13.packTessellation(a14, c9, s18, i17);
          this._pack(p10, e13, t6);
        } else if (e13.packAlternating?.packTessellation) {
          const t7 = e13.packAlternating.packTessellation(a14, c9, s18, i17);
          for (let s19 = 0; s19 < this._spec.packVertexCount; s19++) {
            const i18 = t7[s19];
            this._pack(i18, e13, s19 * this._spec.stride);
          }
        }
      }
    }
    t5.vertexWriteRegion(this._packedU32View);
  }
  pack(t5, e12) {
    for (const s18 of this._spec.standardAttributes) if (s18.pack && "string" != typeof s18.pack) {
      const i17 = s18.pack(t5, e12);
      for (let t6 = 0; t6 < this._spec.packVertexCount; t6++) this._pack(i17, s18, t6 * this._spec.stride);
    } else if (s18.packAlternating?.pack) {
      const i17 = s18.packAlternating.pack(t5, e12);
      for (let t6 = 0; t6 < this._spec.packVertexCount; t6++) {
        const e13 = i17[t6];
        this._pack(e13, s18, t6 * this._spec.stride);
      }
    }
  }
  _packPosition(e12, s18, i17) {
    const { offset: c9 } = this._spec.position, a14 = this._spec.position.packPrecisionFactor ?? 1, p9 = s6(e12 * a14, s18 * a14);
    this._dataView.setUint32(i17 + c9, p9, true);
  }
  _packId(t5, e12) {
    const s18 = t5 * (this._spec.id.packPrecisionFactor ?? 1), i17 = 4278190080 & this._dataView.getUint32(e12 + this._spec.id.offset, true);
    this._dataView.setUint32(e12 + this._spec.id.offset, s18 | i17, true);
  }
  _pack(t5, e12, i17) {
    o2(this._dataView, t5, e12, i17);
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/shaderGraph/techniques/mesh/MeshWriter.js
function i11(e12) {
  if (!e12) return false;
  for (const t5 of e12) switch (t5.effect.type) {
    case "CIMGeometricEffectBuffer":
    case "CIMGeometricEffectDonut":
    case "CIMGeometricEffectOffset":
    case "CIMGeometricEffectTaperedPolygon":
    case "CIMGeometricEffectEnclosingPolygon":
      return true;
  }
  return false;
}
var c4 = class {
  constructor(e12, t5, r13, s18) {
    this._instanceId = e12, this._evaluator = t5, this._enabledOptionalAttributes = r13, this._viewParams = s18, this._evaluator.evaluator = (e13) => this.vertexSpec.createComputedParams(e13);
  }
  get _vertexPack() {
    if (!this._cachedVertexPack) {
      const e12 = i10.fromVertexSpec(this.vertexSpec, this._enabledOptionalAttributes);
      this._evaluator.hasDynamicProperties || e12.pack(this._evaluator.evaluatedMeshParams, this._viewParams), this._cachedVertexPack = e12;
    }
    return this._cachedVertexPack;
  }
  get evaluatedMeshParams() {
    return this._evaluator.evaluatedMeshParams;
  }
  get hasEffects() {
    return !!this.evaluatedMeshParams.effects;
  }
  get effectInfos() {
    return this._evaluator.inputMeshParams.effects?.effectInfos;
  }
  get instanceId() {
    return this._instanceId;
  }
  get attributeLayout() {
    return this._vertexPack.attributeLayout;
  }
  get _preventEffectClipping() {
    return false;
  }
  setReferences(e12) {
    this._references = e12;
  }
  getBoundsInfo() {
    return null;
  }
  getTileInfo() {
    return this._viewParams.tileInfo;
  }
  async loadDependencies() {
    i11(this.effectInfos) && await e8();
  }
  enqueueRequest(e12, t5, r13) {
    this._evaluator.hasDynamicProperties && this._evaluator.enqueueRequest(e12, t5, r13);
  }
  write(e12, t5, r13, s18, a14) {
    this.ensurePacked(t5, r13, s18);
    const i17 = this.evaluatedMeshParams.effects;
    if (!i17 || 0 === i17.length) return void this._write(e12, r13, void 0, a14);
    const c9 = this.getEffectCursor(e12, r13, i17);
    if (!c9) return;
    let n13;
    for (; n13 = c9.next(); ) n13.invertY(), this._write(e12, r13, n13, a14);
  }
  ensurePacked(e12, t5, r13) {
    if (!this._evaluator.hasDynamicProperties) return;
    const s18 = this._evaluator.evaluateMeshParams(e12, t5, r13);
    this._vertexPack.pack(s18, this._viewParams);
  }
  hasArcadeDependency(e12) {
    return this._evaluator.hasArcadeDependency(e12);
  }
  _writeVertex(e12, t5, r13, s18, a14) {
    const i17 = this.evaluatedMeshParams;
    this._vertexPack.writeVertex(e12, t5, r13, s18, i17, a14);
  }
  getEffectCursor(r13, a14, i17) {
    const c9 = a14.readGeometryForDisplay()?.clone();
    if (!c9) return;
    const n13 = a2.fromOptimizedCIM(c9, a14.geometryType), o13 = t3();
    n13.invertY();
    const f9 = r13.id || "";
    return l6.executeEffects(i17, n13, f9, o13, this._preventEffectClipping);
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/shaderGraph/techniques/animated/AnimatedMeshWriter.js
var o6 = class extends c4 {
};
function r7(e12) {
  const { sprite: o13, isMapAligned: r13, colorLocked: i17, scaleSymbolsProportionally: l13, isStroke: m9 } = e12;
  let n13 = 0;
  return r13 && (n13 |= f2(o.bitset.isMapAligned)), i17 && (n13 |= f2(o.bitset.colorLocked)), o13.sdf && (n13 |= f2(o.bitset.isSDF)), l13 && (n13 |= f2(o.bitset.scaleSymbolsProportionally)), m9 && (n13 |= f2(o.bitset.isStroke)), n13;
}

// node_modules/@arcgis/core/views/2d/engine/webgl/shaderGraph/techniques/animated/attributes.js
var a8 = { type: O.SHORT, count: 2, packPrecisionFactor: si, pack: ({ scaleInfo: t5 }, { tileInfo: e12 }) => m(t5, e12) };
var s10 = { type: O.FLOAT, count: 4, packPrecisionFactor: 1, packTessellation: ({ value1Position2Value2: t5 }) => (p(t5), t5) };
var p3 = { type: O.FLOAT, count: 4, packPrecisionFactor: 1, packTessellation: () => [0, 0, 0, 1] };
var r8 = { type: O.FLOAT, count: 1, packPrecisionFactor: 1, pack: () => 0 };
var l7 = { type: O.FLOAT, count: 1, packPrecisionFactor: 1, packTessellation: ({ lineLength: t5 }) => t5 };
var k = { type: O.UNSIGNED_SHORT, count: 1, packTessellation: ({ distance: t5 }) => t5 };
var u3 = { type: O.BYTE, count: 2, packPrecisionFactor: 16, packTessellation: ({ directionX: t5, directionY: e12 }) => [t5, e12] };
var T = { type: O.FLOAT, count: 2, packPrecisionFactor: 16, packTessellation: ({ normalX: t5, normalY: e12 }) => [t5, e12] };
var m2 = { type: O.UNSIGNED_BYTE, count: 3, pack: "id" };
var y2 = { type: O.UNSIGNED_BYTE, count: 1, pack: r7 };
var F2 = { type: O.SHORT, count: 2, pack: "position", packPrecisionFactor: 1 };
var f3 = { marker: { type: O.FLOAT, count: 2, packAlternating: { count: 4, pack: ({ texelDimensions: t5 }) => [[-0.5 * t5[0], -0.5 * t5[1]], [0.5 * t5[0], -0.5 * t5[1]], [-0.5 * t5[0], 0.5 * t5[1]], [0.5 * t5[0], 0.5 * t5[1]]] } }, line: { type: O.FLOAT, count: 2, packTessellation: ({ extrusionOffsetX: t5, extrusionOffsetY: e12 }, { baseSize: o13 }) => [t5 * o13 / 2, e12 * o13 / 2] }, fill: { type: O.FLOAT, count: 2, packTessellation: () => [0, 0] } };
var O3 = { marker: { type: O.SHORT, count: 2, packPrecisionFactor: 1, packAlternating: { count: 4, packTessellation: ({ texXmax: t5, texXmin: e12, texYmax: o13, texYmin: i17 }) => [[e12, i17], [t5, i17], [e12, o13], [t5, o13]] } } };
var S4 = { type: O.UNSIGNED_SHORT, count: 4, pack: ({ sprite: t5 }) => {
  const { rect: o13, width: i17, height: c9 } = t5, n13 = o13.x + ti, a14 = o13.y + ti;
  return [n13 + 1, a14 + 1, n13 + i17 - 1, a14 + c9 - 1];
} };
var d2 = { type: O.UNSIGNED_SHORT, count: 4, packPrecisionFactor: 4, pack: ({ animations: t5, baseSize: e12, referenceSize: o13 }) => [t5.dataColumn, t5.dataRow, e12, o13] };
var x = { type: O.UNSIGNED_SHORT, count: 4, packPrecisionFactor: 8, pack: ({ strokeWidth: t5, pixelDimensions: e12, baseSize: o13, sprite: i17, sizeRatio: c9 }) => {
  const n13 = Math.max(o13 * i17.width / i17.height, o13), a14 = i17.sdfDecodeCoeff * n13 * c9;
  return [e12[0], e12[1], t5, a14];
} };
var N = { type: O.BYTE, count: 1, packTessellation: ({ angle: t5 }) => t5 };

// node_modules/@arcgis/core/views/2d/engine/webgl/mesh/bufcut.js
function e9(e12, t5, r13, i17, u8, o13, l13) {
  D3 = 0;
  const y4 = (i17 - r13) * o13, p9 = u8 && u8.length, c9 = p9 ? (u8[0] - r13) * o13 : y4;
  let v3, s18, h8, d7, Z3, a14 = n8(t5, r13, i17, 0, c9, o13, true);
  if (a14 && a14.next !== a14.prev) {
    if (p9 && (a14 = f4(t5, r13, i17, u8, a14, o13)), y4 > 80 * o13) {
      v3 = h8 = t5[0 + r13 * o13], s18 = d7 = t5[1 + r13 * o13];
      for (let e13 = o13; e13 < c9; e13 += o13) {
        const n13 = t5[e13 + r13 * o13], x7 = t5[e13 + 1 + r13 * o13];
        v3 = Math.min(v3, n13), s18 = Math.min(s18, x7), h8 = Math.max(h8, n13), d7 = Math.max(d7, x7);
      }
      Z3 = Math.max(h8 - v3, d7 - s18), Z3 = 0 !== Z3 ? 1 / Z3 : 0;
    }
    x2(a14, e12, o13, v3, s18, Z3, l13, 0);
  }
}
function n8(e12, n13, t5, x7, r13, i17, l13) {
  let f9;
  if (l13 === Z2(e12, n13, t5, x7, r13, i17) > 0) for (let o13 = x7; o13 < r13; o13 += i17) f9 = u4(o13 + n13 * i17, e12[o13 + n13 * i17], e12[o13 + 1 + n13 * i17], f9);
  else for (let o13 = r13 - i17; o13 >= x7; o13 -= i17) f9 = u4(o13 + n13 * i17, e12[o13 + n13 * i17], e12[o13 + 1 + n13 * i17], f9);
  return f9 && m3(f9, f9.next) && (o7(f9), f9 = f9.next), f9;
}
function t4(e12, n13 = e12) {
  if (!e12) return e12;
  let t5, x7 = e12;
  do {
    if (t5 = false, x7.steiner || !m3(x7, x7.next) && 0 !== s11(x7.prev, x7, x7.next)) x7 = x7.next;
    else {
      if (o7(x7), x7 = n13 = x7.prev, x7 === x7.next) break;
      t5 = true;
    }
  } while (t5 || x7 !== n13);
  return n13;
}
function x2(e12, n13, u8, l13, f9, y4, p9, v3) {
  if (!e12) return;
  !v3 && y4 && (e12 = c5(e12, l13, f9, y4));
  let s18 = e12;
  for (; e12.prev !== e12.next; ) {
    const c9 = e12.prev, h8 = e12.next;
    if (y4 ? i12(e12, l13, f9, y4) : r9(e12)) n13.push(c9.index / u8 + p9), n13.push(e12.index / u8 + p9), n13.push(h8.index / u8 + p9), o7(e12), e12 = h8.next, s18 = h8.next;
    else if ((e12 = h8) === s18) {
      v3 ? 1 === v3 ? x2(e12 = b(e12, n13, u8, p9), n13, u8, l13, f9, y4, p9, 2) : 2 === v3 && g2(e12, n13, u8, l13, f9, y4, p9) : x2(t4(e12), n13, u8, l13, f9, y4, p9, 1);
      break;
    }
  }
}
function r9(e12) {
  const n13 = e12.prev, t5 = e12, x7 = e12.next;
  if (s11(n13, t5, x7) >= 0) return false;
  let r13 = e12.next.next;
  const i17 = r13;
  let u8 = 0;
  for (; r13 !== e12.prev && (0 === u8 || r13 !== i17); ) {
    if (u8++, a9(n13.x, n13.y, t5.x, t5.y, x7.x, x7.y, r13.x, r13.y) && s11(r13.prev, r13, r13.next) >= 0) return false;
    r13 = r13.next;
  }
  return true;
}
function i12(e12, n13, t5, x7) {
  const r13 = e12.prev, i17 = e12, u8 = e12.next;
  if (s11(r13, i17, u8) >= 0) return false;
  const o13 = r13.x < i17.x ? r13.x < u8.x ? r13.x : u8.x : i17.x < u8.x ? i17.x : u8.x, l13 = r13.y < i17.y ? r13.y < u8.y ? r13.y : u8.y : i17.y < u8.y ? i17.y : u8.y, f9 = r13.x > i17.x ? r13.x > u8.x ? r13.x : u8.x : i17.x > u8.x ? i17.x : u8.x, y4 = r13.y > i17.y ? r13.y > u8.y ? r13.y : u8.y : i17.y > u8.y ? i17.y : u8.y, p9 = z(o13, l13, n13, t5, x7), c9 = z(f9, y4, n13, t5, x7);
  let v3 = e12.prevZ, h8 = e12.nextZ;
  for (; v3 && v3.z >= p9 && h8 && h8.z <= c9; ) {
    if (v3 !== e12.prev && v3 !== e12.next && a9(r13.x, r13.y, i17.x, i17.y, u8.x, u8.y, v3.x, v3.y) && s11(v3.prev, v3, v3.next) >= 0) return false;
    if (v3 = v3.prevZ, h8 !== e12.prev && h8 !== e12.next && a9(r13.x, r13.y, i17.x, i17.y, u8.x, u8.y, h8.x, h8.y) && s11(h8.prev, h8, h8.next) >= 0) return false;
    h8 = h8.nextZ;
  }
  for (; v3 && v3.z >= p9; ) {
    if (v3 !== e12.prev && v3 !== e12.next && a9(r13.x, r13.y, i17.x, i17.y, u8.x, u8.y, v3.x, v3.y) && s11(v3.prev, v3, v3.next) >= 0) return false;
    v3 = v3.prevZ;
  }
  for (; h8 && h8.z <= c9; ) {
    if (h8 !== e12.prev && h8 !== e12.next && a9(r13.x, r13.y, i17.x, i17.y, u8.x, u8.y, h8.x, h8.y) && s11(h8.prev, h8, h8.next) >= 0) return false;
    h8 = h8.nextZ;
  }
  return true;
}
function u4(e12, n13, t5, x7) {
  const r13 = q2.create(e12, n13, t5);
  return x7 ? (r13.next = x7.next, r13.prev = x7, x7.next.prev = r13, x7.next = r13) : (r13.prev = r13, r13.next = r13), r13;
}
function o7(e12) {
  e12.next.prev = e12.prev, e12.prev.next = e12.next, e12.prevZ && (e12.prevZ.nextZ = e12.nextZ), e12.nextZ && (e12.nextZ.prevZ = e12.prevZ);
}
function l8(e12) {
  let n13 = e12, t5 = e12;
  do {
    (n13.x < t5.x || n13.x === t5.x && n13.y < t5.y) && (t5 = n13), n13 = n13.next;
  } while (n13 !== e12);
  return t5;
}
function f4(e12, t5, x7, r13, i17, u8) {
  const o13 = new Array();
  for (let f9 = 0, y4 = r13.length; f9 < y4; f9++) {
    const i18 = n8(e12, t5, x7, r13[f9] * u8, f9 < y4 - 1 ? r13[f9 + 1] * u8 : x7 * u8, u8, false);
    i18 === i18.next && (i18.steiner = true), o13.push(l8(i18));
  }
  o13.sort(M2);
  for (const n13 of o13) i17 = y3(n13, i17);
  return i17;
}
function y3(e12, n13) {
  const x7 = p4(e12, n13);
  if (!x7) return n13;
  const r13 = A2(x7, e12);
  return t4(r13, r13.next), t4(x7, x7.next);
}
function p4(e12, n13) {
  let t5 = n13;
  const x7 = e12.x, r13 = e12.y;
  let i17, u8 = -1 / 0;
  do {
    if (r13 <= t5.y && r13 >= t5.next.y && t5.next.y !== t5.y) {
      const e13 = t5.x + (r13 - t5.y) * (t5.next.x - t5.x) / (t5.next.y - t5.y);
      if (e13 <= x7 && e13 > u8) {
        if (u8 = e13, e13 === x7) {
          if (r13 === t5.y) return t5;
          if (r13 === t5.next.y) return t5.next;
        }
        i17 = t5.x < t5.next.x ? t5 : t5.next;
      }
    }
    t5 = t5.next;
  } while (t5 !== n13);
  if (!i17) return null;
  if (x7 === u8) return i17.prev;
  const o13 = i17, l13 = i17.x, f9 = i17.y;
  let y4, p9 = 1 / 0;
  for (t5 = i17.next; t5 !== o13; ) x7 >= t5.x && t5.x >= l13 && x7 !== t5.x && a9(r13 < f9 ? x7 : u8, r13, l13, f9, r13 < f9 ? u8 : x7, r13, t5.x, t5.y) && (y4 = Math.abs(r13 - t5.y) / (x7 - t5.x), (y4 < p9 || y4 === p9 && t5.x > i17.x) && w2(t5, e12) && (i17 = t5, p9 = y4)), t5 = t5.next;
  return i17;
}
function c5(e12, n13, t5, x7) {
  let r13;
  for (; r13 !== e12; r13 = r13.next) {
    if (r13 = r13 || e12, null === r13.z && (r13.z = z(r13.x, r13.y, n13, t5, x7)), r13.prev.next !== r13 || r13.next.prev !== r13) return r13.prev.next = r13, r13.next.prev = r13, c5(e12, n13, t5, x7);
    r13.prevZ = r13.prev, r13.nextZ = r13.next;
  }
  return e12.prevZ.nextZ = null, e12.prevZ = null, v(e12);
}
function v(e12) {
  let n13, t5 = 1;
  for (; ; ) {
    let x7, r13 = e12;
    e12 = null, n13 = null;
    let i17 = 0;
    for (; r13; ) {
      i17++, x7 = r13;
      let u8 = 0;
      for (; u8 < t5 && x7; u8++) x7 = x7.nextZ;
      let o13 = t5;
      for (; u8 > 0 || o13 > 0 && x7; ) {
        let t6;
        0 === u8 ? (t6 = x7, x7 = x7.nextZ, o13--) : 0 !== o13 && x7 ? r13.z <= x7.z ? (t6 = r13, r13 = r13.nextZ, u8--) : (t6 = x7, x7 = x7.nextZ, o13--) : (t6 = r13, r13 = r13.nextZ, u8--), n13 ? n13.nextZ = t6 : e12 = t6, t6.prevZ = n13, n13 = t6;
      }
      r13 = x7;
    }
    if (n13.nextZ = null, t5 *= 2, i17 < 2) return e12;
  }
}
function s11(e12, n13, t5) {
  return (n13.y - e12.y) * (t5.x - n13.x) - (n13.x - e12.x) * (t5.y - n13.y);
}
function h2(e12, n13, t5, x7) {
  return !!(m3(e12, n13) && m3(t5, x7) || m3(e12, x7) && m3(t5, n13)) || s11(e12, n13, t5) > 0 != s11(e12, n13, x7) > 0 && s11(t5, x7, e12) > 0 != s11(t5, x7, n13) > 0;
}
function d3(e12, n13) {
  let t5 = e12;
  do {
    if (t5.index !== e12.index && t5.next.index !== e12.index && t5.index !== n13.index && t5.next.index !== n13.index && h2(t5, t5.next, e12, n13)) return true;
    t5 = t5.next;
  } while (t5 !== e12);
  return false;
}
function Z2(e12, n13, t5, x7, r13, i17) {
  let u8 = 0;
  for (let o13 = x7, l13 = r13 - i17; o13 < r13; o13 += i17) u8 += (e12[l13 + n13 * i17] - e12[o13 + n13 * i17]) * (e12[o13 + 1 + n13 * i17] + e12[l13 + 1 + n13 * i17]), l13 = o13;
  return u8;
}
function a9(e12, n13, t5, x7, r13, i17, u8, o13) {
  return (r13 - u8) * (n13 - o13) - (e12 - u8) * (i17 - o13) >= 0 && (e12 - u8) * (x7 - o13) - (t5 - u8) * (n13 - o13) >= 0 && (t5 - u8) * (i17 - o13) - (r13 - u8) * (x7 - o13) >= 0;
}
function w2(e12, n13) {
  return s11(e12.prev, e12, e12.next) < 0 ? s11(e12, n13, e12.next) >= 0 && s11(e12, e12.prev, n13) >= 0 : s11(e12, n13, e12.prev) < 0 || s11(e12, e12.next, n13) < 0;
}
function z(e12, n13, t5, x7, r13) {
  return (e12 = 1431655765 & ((e12 = 858993459 & ((e12 = 252645135 & ((e12 = 16711935 & ((e12 = 32767 * (e12 - t5) * r13) | e12 << 8)) | e12 << 4)) | e12 << 2)) | e12 << 1)) | (n13 = 1431655765 & ((n13 = 858993459 & ((n13 = 252645135 & ((n13 = 16711935 & ((n13 = 32767 * (n13 - x7) * r13) | n13 << 8)) | n13 << 4)) | n13 << 2)) | n13 << 1)) << 1;
}
function m3(e12, n13) {
  return e12.x === n13.x && e12.y === n13.y;
}
function M2(e12, n13) {
  return e12.x - n13.x;
}
function b(e12, n13, t5, x7) {
  let r13 = e12;
  do {
    const i17 = r13.prev, u8 = r13.next.next;
    !m3(i17, u8) && h2(i17, r13, r13.next, u8) && w2(i17, u8) && w2(u8, i17) && (n13.push(i17.index / t5 + x7), n13.push(r13.index / t5 + x7), n13.push(u8.index / t5 + x7), o7(r13), o7(r13.next), r13 = e12 = u8), r13 = r13.next;
  } while (r13 !== e12);
  return r13;
}
function g2(e12, n13, r13, i17, u8, o13, l13) {
  let f9 = e12;
  do {
    let e13 = f9.next.next;
    for (; e13 !== f9.prev; ) {
      if (f9.index !== e13.index && k2(f9, e13)) {
        let y4 = A2(f9, e13);
        return f9 = t4(f9, f9.next), y4 = t4(y4, y4.next), x2(f9, n13, r13, i17, u8, o13, l13, 0), void x2(y4, n13, r13, i17, u8, o13, l13, 0);
      }
      e13 = e13.next;
    }
    f9 = f9.next;
  } while (f9 !== e12);
}
function k2(e12, n13) {
  return e12.next.index !== n13.index && e12.prev.index !== n13.index && !d3(e12, n13) && w2(e12, n13) && w2(n13, e12) && j(e12, n13);
}
function j(e12, n13) {
  let t5 = e12, x7 = false;
  const r13 = (e12.x + n13.x) / 2, i17 = (e12.y + n13.y) / 2;
  do {
    t5.y > i17 != t5.next.y > i17 && t5.next.y !== t5.y && r13 < (t5.next.x - t5.x) * (i17 - t5.y) / (t5.next.y - t5.y) + t5.x && (x7 = !x7), t5 = t5.next;
  } while (t5 !== e12);
  return x7;
}
function A2(e12, n13) {
  const t5 = q2.create(e12.index, e12.x, e12.y), x7 = q2.create(n13.index, n13.x, n13.y), r13 = e12.next, i17 = n13.prev;
  return e12.next = n13, n13.prev = e12, t5.next = r13, r13.prev = t5, x7.next = t5, t5.prev = x7, i17.next = x7, x7.prev = i17, x7;
}
var q2 = class _q {
  constructor() {
    this.index = 0, this.x = 0, this.y = 0, this.prev = null, this.next = null, this.z = null, this.prevZ = null, this.nextZ = null, this.steiner = false;
  }
  static create(e12, n13, t5) {
    const x7 = D3 < B2.length ? B2[D3++] : new _q();
    return x7.index = e12, x7.x = n13, x7.y = t5, x7.prev = null, x7.next = null, x7.z = null, x7.prevZ = null, x7.nextZ = null, x7.steiner = false, x7;
  }
};
var B2 = [];
var C2 = 8096;
var D3 = 0;
for (let E4 = 0; E4 < C2; E4++) B2.push(new q2());

// node_modules/@arcgis/core/views/2d/engine/webgl/mesh/templates/templateUtils.js
var i13 = 1e-5;
var f5 = new e3(0, 0, 0, 1, 0);
var c6 = new e3(0, 0, 0, 1, 0);
function u5(t5, e12, n13) {
  let o13 = 0;
  for (let r13 = 1; r13 < n13; r13++) {
    const n14 = t5[2 * (e12 + r13 - 1)], s18 = t5[2 * (e12 + r13 - 1) + 1];
    o13 += (t5[2 * (e12 + r13)] - n14) * (t5[2 * (e12 + r13) + 1] + s18);
  }
  return o13;
}
function h3(t5, e12, n13, o13, r13) {
  let s18 = 0;
  const l13 = 2;
  for (let i17 = n13; i17 < o13; i17 += 3) {
    const n14 = (t5[i17] - r13) * l13, o14 = (t5[i17 + 1] - r13) * l13, f9 = (t5[i17 + 2] - r13) * l13;
    s18 += Math.abs((e12[n14] - e12[f9]) * (e12[o14 + 1] - e12[n14 + 1]) - (e12[n14] - e12[o14]) * (e12[f9 + 1] - e12[n14 + 1]));
  }
  return s18;
}
function a10(t5, e12) {
  const { coords: n13, lengths: o13 } = e12, r13 = 0, s18 = t5;
  let f9 = 0;
  for (let c9 = 0; c9 < o13.length; ) {
    let t6 = c9, e13 = o13[c9], a14 = u5(n13, f9, e13);
    const g3 = [];
    for (; ++t6 < o13.length; ) {
      const r14 = o13[t6], s19 = u5(n13, f9 + e13, r14);
      if (!(s19 > 0)) break;
      a14 += s19, g3.push(f9 + e13), e13 += r14;
    }
    const p9 = s18.length;
    e9(s18, n13, f9, f9 + e13, g3, 2, r13);
    const m9 = h3(s18, n13, p9, s18.length, r13), x7 = Math.abs(a14);
    if (Math.abs((m9 - x7) / Math.max(1e-7, x7)) > i13) return s18.length = 0, false;
    c9 = t6, f9 += e13;
  }
  return true;
}
function p5(t5) {
  const { coords: n13, lengths: o13 } = t5, { buffer: r13 } = a5(n13, o13);
  return r13;
}
function m4(t5, e12, n13) {
  let o13 = 0;
  for (let r13 = 0; r13 < t5.lengths.length; r13++) {
    const s18 = t5.lengths[r13];
    for (let r14 = 0; r14 < s18; r14++) {
      const s19 = t5.coords[2 * (r14 + o13)], l13 = t5.coords[2 * (r14 + o13) + 1];
      if (s19 < e12 || s19 > n13 || l13 < e12 || l13 > n13) return true;
    }
    o13 += s18;
  }
  return false;
}
function x3(t5, e12) {
  if (null == t5) return null;
  if (!m4(t5, -128, a + 128)) return t5;
  f5.setPixelMargin(e12), f5.reset(i3.Polygon);
  let n13 = 0;
  for (let o13 = 0; o13 < t5.lengths.length; o13++) {
    const e13 = t5.lengths[o13];
    let r13 = t5.coords[2 * (0 + n13)], s18 = t5.coords[2 * (0 + n13) + 1];
    f5.moveTo(r13, s18);
    for (let o14 = 1; o14 < e13; o14++) r13 = t5.coords[2 * (o14 + n13)], s18 = t5.coords[2 * (o14 + n13) + 1], f5.lineTo(r13, s18);
    f5.close(), n13 += e13;
  }
  const l13 = f5.result(false);
  if (!l13) return null;
  const i17 = [], c9 = [];
  for (const o13 of l13) {
    let t6 = 0;
    for (const e13 of o13) c9.push(e13.x), c9.push(e13.y), t6++;
    i17.push(t6);
  }
  return new e(i17, c9);
}
function d4(t5, e12) {
  c6.setPixelMargin(e12);
  const n13 = c6, r13 = -e12, l13 = a + e12;
  let i17 = [], f9 = false;
  if (!t5.nextPath()) return null;
  let u8 = t5.pathLength(), h8 = true;
  for (; h8; ) {
    t5.seekPathStart();
    const e13 = [];
    if (!t5.pathSize) return null;
    n13.reset(i3.LineString), t5.nextPoint();
    let s18 = t5.x, c9 = t5.y;
    if (f9) n13.moveTo(s18, c9);
    else {
      if (s18 < r13 || s18 > l13 || c9 < r13 || c9 > l13) {
        f9 = true;
        continue;
      }
      e13.push({ x: s18, y: c9 });
    }
    let a14 = false;
    for (; t5.nextPoint(); ) if (s18 = t5.x, c9 = t5.y, f9) n13.lineTo(s18, c9);
    else {
      if (s18 < r13 || s18 > l13 || c9 < r13 || c9 > l13) {
        a14 = true;
        break;
      }
      e13.push({ x: s18, y: c9 });
    }
    if (a14) f9 = true;
    else {
      if (f9) {
        const t6 = n13.resultWithStarts();
        if (t6) for (const e14 of t6) i17.push({ ...e14, pathLength: u8 });
      } else i17.push({ line: e13, start: 0, pathLength: u8 });
      h8 = t5.nextPath(), u8 = h8 ? t5.pathLength() : 0, f9 = false;
    }
  }
  return i17 = i17.filter((t6) => t6.line.length > 1), 0 === i17.length ? null : i17;
}
f5.setExtent(a), c6.setExtent(a);

// node_modules/@arcgis/core/views/2d/engine/webgl/shaderGraph/techniques/line/LineMeshWriter.js
var d5 = class {
  constructor() {
    this.extrusionOffsetX = 0, this.extrusionOffsetY = 0, this.normalX = 0, this.normalY = 0, this.directionX = 0, this.directionY = 0, this.distance = 0, this.pathLength = 0, this.distanceOffset = 0, this.lineLength = 0;
  }
};
var f6 = { createComputedParams: (t5) => t5, optionalAttributes: { zoomRange: { type: O.SHORT, count: 2, packPrecisionFactor: si, pack: ({ scaleInfo: t5 }, { tileInfo: e12 }) => m(t5, e12) } }, attributes: { id: { type: O.UNSIGNED_BYTE, count: 3, pack: "id" }, pos: { type: O.SHORT, count: 2, pack: "position", packPrecisionFactor: 10 }, bitset: { type: O.UNSIGNED_BYTE, count: 1 }, color: { type: O.UNSIGNED_BYTE, count: 4, normalized: true, pack: ({ color: t5 }) => g(t5) }, offset: { type: O.BYTE, count: 2, packPrecisionFactor: 16, packTessellation: ({ extrusionOffsetX: t5, extrusionOffsetY: e12 }) => [S3(t5, 16), S3(e12, 16)] }, normal: { type: O.BYTE, count: 2, packPrecisionFactor: 16, packTessellation: ({ normalX: t5, normalY: e12 }) => [S3(t5, 16), S3(e12, 16)] }, halfWidth: { type: O.HALF_FLOAT, count: 1, pack: ({ width: e12 }) => u(0.5 * e12) }, referenceHalfWidth: { type: O.HALF_FLOAT, count: 1, pack: ({ referenceWidth: e12 }) => u(0.5 * e12) } } };
var _ = class {
  constructor() {
    this.id = 0, this.bitset = 0, this.indexCount = 0, this.vertexCount = 0, this.vertexFrom = 0, this.vertexBounds = 0, this.pathLength = 0, this.distanceOffset = 0;
  }
};
var x4 = 65535;
var T2 = class extends c4 {
  constructor(t5, e12, s18, i17) {
    super(t5, e12, s18, i17), this.vertexSpec = f6, this._currentWrite = new _(), this._tessellationOptions = { halfWidth: 0, pixelCoordRatio: 1, offset: 0, wrapDistance: x4, textured: false }, this._tessParams = new d5(), this._initializeTessellator();
  }
  writeLineVertices(t5, e12, s18) {
    const i17 = this._getLines(e12);
    null != i17 && this._writeVertices(t5, s18, i17);
  }
  _initializeTessellator() {
    this._lineTessellator = new c(this._writeTesselatedVertex.bind(this), this._writeTriangle.bind(this), true);
  }
  _write(t5, s18, i17) {
    const r13 = i17 ?? a2.fromFeatureSetReaderCIM(s18);
    r13 && this._writeGeometry(t5, s18, r13);
  }
  _writeGeometry(t5, e12, s18, i17) {
    t5.recordStart(this.instanceId, this.attributeLayout, i17), this.writeLineVertices(t5, s18, e12), t5.recordEnd();
  }
  _getLines(t5) {
    return d4(t5, a4(this.evaluatedMeshParams));
  }
  _writeVertices(e12, s18, r13) {
    const { _currentWrite: o13, _tessellationOptions: n13, evaluatedMeshParams: a14 } = this, { width: c9, capType: m9, joinType: u8, miterLimit: p9, hasSizeVV: d7 } = a14, f9 = u(0.5 * c9);
    n13.halfWidth = f9, n13.capType = h(m9), n13.joinType = p2(u8), n13.miterLimit = p9;
    const _3 = !d7;
    o13.out = e12, o13.id = s18.getDisplayId(), o13.vertexCount = 0, o13.indexCount = 0, o13.vertexFrom = e12.vertexCount(), o13.vertexBounds = _3 && f9 < R ? 0 : 1;
    for (const { line: t5, start: i17, pathLength: h8 } of r13) n13.initialDistance = i17 % x4, o13.pathLength = h8, o13.distanceOffset = Math.floor(i17 / x4) * x4, this._lineTessellator.tessellate(t5, n13, _3);
  }
  _writeTesselatedVertex(t5, e12, s18, i17, r13, o13, n13, a14, c9, h8, l13) {
    const { out: m9, id: u8, vertexBounds: p9, pathLength: d7, distanceOffset: f9 } = this._currentWrite;
    return this.hasEffects && m9.recordBounds(t5, e12, p9, p9), this._tessParams.extrusionOffsetX = n13, this._tessParams.extrusionOffsetY = a14, this._tessParams.normalX = c9, this._tessParams.normalY = h8, this._tessParams.directionX = r13, this._tessParams.directionY = o13, this._tessParams.distance = l13, this._tessParams.pathLength = d7, this._tessParams.distanceOffset = f9, this._writeVertex(m9, u8, t5, e12, this._tessParams), this._currentWrite.vertexFrom + this._currentWrite.vertexCount++;
  }
  _writeTriangle(t5, e12, s18) {
    const { out: i17 } = this._currentWrite;
    i17.indexEnsureSize(3), i17.indexWrite(t5), i17.indexWrite(e12), i17.indexWrite(s18), this._currentWrite.indexCount += 3;
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/shaderGraph/techniques/fill/AFillMeshWriter.js
var o8 = 100;
var n9 = has("featurelayer-fast-triangulation-enabled");
var a11 = class extends c4 {
  async loadDependencies() {
    await Promise.all([super.loadDependencies(), i7()]);
  }
  _write(e12, t5, r13) {
    const s18 = r13?.asOptimized() ?? t5.readGeometryForDisplay(), i17 = this._clip(s18);
    i17 && (e12.recordStart(this.instanceId, this.attributeLayout), this._writeGeometry(e12, t5, i17), e12.recordEnd());
  }
  _clip(e12) {
    if (!e12) return null;
    const r13 = this.hasEffects;
    return x3(e12, r13 ? 256 : 8);
  }
  _writeGeometry(e12, t5, i17) {
    const a14 = i17.maxLength > o8, c9 = [], l13 = this.createTesselationParams(t5);
    if (!a14 && n9 && a10(c9, i17)) return void (c9.length && this._writeVertices(e12, t5, i17.coords, l13, c9));
    const d7 = p5(i17);
    this._writeVertices(e12, t5, d7, l13);
  }
  _writeVertices(e12, t5, r13, s18, i17) {
    const o13 = t5.getDisplayId(), n13 = e12.vertexCount(), a14 = this.hasEffects;
    let c9 = 0;
    if (i17) for (const l13 of i17) {
      const t6 = r13[2 * l13], i18 = r13[2 * l13 + 1];
      a14 && e12.recordBounds(t6, i18, 0, 0), this._writeVertex(e12, o13, t6, i18, s18), c9++;
    }
    else for (let l13 = 0; l13 < r13.length; l13 += 2) {
      const t6 = Math.round(r13[l13]), i18 = Math.round(r13[l13 + 1]);
      a14 && e12.recordBounds(t6, i18, 0, 0), this._writeVertex(e12, o13, t6, i18, s18), c9++;
    }
    e12.indexEnsureSize(c9);
    for (let l13 = 0; l13 < c9; l13++) e12.indexWrite(l13 + n13);
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/shaderGraph/techniques/dotDensity/DotDensityMeshWriter.js
var r10 = { createComputedParams: (e12) => e12, optionalAttributes: {}, attributes: { id: { type: O.UNSIGNED_BYTE, count: 3, pack: "id" }, bitset: { type: O.UNSIGNED_BYTE, count: 1 }, pos: { type: O.SHORT, count: 2, pack: "position", packPrecisionFactor: 10 }, inverseArea: { type: O.FLOAT, count: 1, packTessellation: ({ inverseArea: e12 }) => e12 } } };
var s12 = class extends a11 {
  constructor() {
    super(...arguments), this.vertexSpec = r10;
  }
  createTesselationParams(e12) {
    return { inverseArea: 1 / e12.readGeometryArea() };
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/shaderGraph/techniques/fill/FillMeshWriter.js
var i14 = { createComputedParams: (t5) => t5, optionalAttributes: { zoomRange: { type: O.SHORT, count: 2, packPrecisionFactor: si, pack: ({ scaleInfo: t5 }, { tileInfo: o13 }) => m(t5, o13) } }, attributes: { id: { type: O.UNSIGNED_BYTE, count: 3, pack: "id" }, bitset: { type: O.UNSIGNED_BYTE, count: 1 }, pos: { type: O.SHORT, count: 2, pack: "position", packPrecisionFactor: 10 }, color: { type: O.UNSIGNED_BYTE, count: 4, normalized: true, pack: ({ color: t5 }) => g(t5) } } };
var c7 = class extends a11 {
  constructor() {
    super(...arguments), this.vertexSpec = i14;
  }
  createTesselationParams(t5) {
    return null;
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/shaderGraph/techniques/fill/PatternFillMeshWriter.js
var s13 = { createComputedParams: (t5) => t5, optionalAttributes: i14.optionalAttributes, attributes: { ...i14.attributes, tlbr: { count: 4, type: O.UNSIGNED_SHORT, pack: ({ sprite: e12 }) => {
  const { rect: r13, width: i17, height: s18 } = e12, o13 = r13.x + ti, a14 = r13.y + ti;
  return [o13, a14, o13 + i17, a14 + s18];
} }, inverseRasterizationScale: { count: 1, type: O.BYTE, packPrecisionFactor: 16, pack: ({ sprite: t5 }) => 1 / t5.rasterizationScale } } };
var o9 = class extends c7 {
  constructor() {
    super(...arguments), this.vertexSpec = s13;
  }
  _write(t5, e12, r13) {
    const i17 = r13?.asOptimized() ?? e12.readGeometryForDisplay(), s18 = this._clip(i17);
    if (!s18) return;
    const o13 = this.evaluatedMeshParams.sprite?.textureBinding;
    t5.recordStart(this.instanceId, this.attributeLayout, o13), this._writeGeometry(t5, e12, s18), t5.recordEnd();
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/shaderGraph/techniques/fill/ComplexFillMeshWriter.js
function p6(e12) {
  const { sprite: o13, aspectRatio: s18, scaleProportionally: r13 } = e12, i17 = u(e12.height), c9 = i17 > 0 ? i17 : o13.height;
  let a14 = i17 * s18;
  return a14 <= 0 ? a14 = o13.width : r13 && (a14 *= o13.width / o13.height), { width: a14, height: c9 };
}
function n10(t5) {
  const { applyRandomOffset: e12, sampleAlphaOnly: s18 } = t5;
  return l5([[C, e12], [q, s18]]);
}
var l9 = { createComputedParams: (t5) => t5, optionalAttributes: s13.optionalAttributes, attributes: { ...s13.attributes, bitset: { count: 1, type: O.UNSIGNED_BYTE, pack: n10 }, width: { count: 1, type: O.HALF_FLOAT, pack: (t5) => p6(t5).width }, height: { count: 1, type: O.HALF_FLOAT, pack: (t5) => p6(t5).height }, offset: { count: 2, type: O.HALF_FLOAT, pack: ({ offsetX: e12, offsetY: o13 }) => [u(e12), -u(o13)] }, scale: { count: 2, type: O.UNSIGNED_BYTE, packPrecisionFactor: 16, pack: ({ scaleX: t5, scaleY: e12 }) => [t5, e12] }, angle: { count: 1, type: O.UNSIGNED_BYTE, pack: ({ angle: t5 }) => l3(t5) } } };
var h4 = class extends o9 {
  constructor() {
    super(...arguments), this.vertexSpec = l9;
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/shaderGraph/techniques/fill/OutlineFillMeshWriter.js
var h5 = { createComputedParams: (e12) => e12, optionalAttributes: f6.optionalAttributes, attributes: { ...f6.attributes, bitset: { type: O.UNSIGNED_BYTE, count: 1, pack: (e12) => 0 }, color: { type: O.UNSIGNED_BYTE, count: 4, normalized: true, pack: ({ color: e12 }) => g(e12) } } };
var m5 = { createComputedParams: (e12) => e12, optionalAttributes: f6.optionalAttributes, attributes: { ...f6.attributes, bitset: { type: O.UNSIGNED_BYTE, count: 1, pack: (e12) => l5([[B, true], [M, e12.outlineUsesColorVV]]) }, color: { type: O.UNSIGNED_BYTE, count: 4, normalized: true, pack: ({ outlineColor: e12 }) => g(e12) } } };
var p7 = class extends T2 {
  constructor() {
    super(...arguments), this.vertexSpec = m5;
  }
};
var f7 = class extends c7 {
  constructor(e12, t5, i17, r13) {
    super(e12, t5, i17, r13), this.vertexSpec = h5, this._lineMeshWriter = this._createOutlineWriter(e12, t5, i17, r13);
  }
  _createOutlineWriter(e12, t5, i17, r13) {
    return new p7(e12, t5, i17, r13);
  }
  _write(e12, t5) {
    const i17 = this.evaluatedMeshParams.effects, r13 = this.evaluatedMeshParams.outlineEffects;
    if (i17?.length || r13?.length) {
      if (i17?.length) {
        const r14 = this.getEffectCursor(e12, t5, i17);
        if (r14) {
          let i18;
          for (; i18 = r14?.next(); ) i18.invertY(), this._writeFill(e12, t5, i18);
        }
      } else this._writeFill(e12, t5);
      if (r13?.length) {
        const i18 = this.getEffectCursor(e12, t5, r13);
        if (i18) {
          let r14;
          for (; r14 = i18?.next(); ) r14.invertY(), this._writeOutline(e12, t5, r14);
        }
      } else this._writeOutline(e12, t5);
    } else this._writeSimpleOutlineFill(e12, t5);
  }
  _writeSimpleOutlineFill(t5, i17) {
    const r13 = i17.readGeometryForDisplay(), s18 = this._clip(r13);
    s18 && (this._writeGeometry(t5, i17, s18), this._lineMeshWriter.writeLineVertices(t5, a2.fromOptimizedCIM(s18, "esriGeometryPolyline"), i17));
  }
  _writeFill(e12, t5, i17) {
    const r13 = i17?.asOptimized() ?? t5.readGeometryForDisplay(), s18 = this._clip(r13);
    s18 && this._writeGeometry(e12, t5, s18);
  }
  _writeOutline(t5, i17, r13) {
    const s18 = r13?.asOptimized() ?? i17.readGeometryForDisplay(), o13 = this._clip(s18);
    o13 && this._lineMeshWriter.writeLineVertices(t5, a2.fromOptimizedCIM(o13, "esriGeometryPolyline"), i17);
  }
  _clip(e12) {
    return e12 ? x3(e12, a4(this.evaluatedMeshParams)) : null;
  }
  get effectInfos() {
    return [...this._evaluator.inputMeshParams.effects?.effectInfos ?? [], ...this._evaluator.inputMeshParams.outlineEffects?.effectInfos ?? []];
  }
  write(e12, t5, i17, r13, s18) {
    this.ensurePacked(t5, i17, r13), e12.recordStart(this.instanceId, this.attributeLayout), this._write(e12, i17), e12.recordEnd();
  }
  ensurePacked(e12, t5, i17) {
    super.ensurePacked(e12, t5, i17), this._lineMeshWriter.ensurePacked(e12, t5, i17);
  }
  enqueueRequest(e12, t5, i17) {
    super.enqueueRequest(e12, t5, i17), this._lineMeshWriter.enqueueRequest(e12, t5, i17);
  }
  async loadDependencies() {
    await Promise.all([super.loadDependencies(), this._lineMeshWriter.loadDependencies()]);
  }
  get hasEffects() {
    return !!this.evaluatedMeshParams.outlineEffects;
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/shaderGraph/techniques/fill/ComplexOutlineFillMeshWriter.js
var d6 = l9;
var h6 = m5;
var m6 = { createComputedParams: (e12) => e12, optionalAttributes: d6.optionalAttributes, attributes: { ...d6.attributes, bitset: { type: O.UNSIGNED_BYTE, count: 1, pack: (e12) => n10(e12) }, aux1: { count: 1, type: O.HALF_FLOAT, pack: (e12) => p6(e12).width }, aux2: { count: 1, type: O.HALF_FLOAT, pack: (e12) => p6(e12).height }, aux3: { count: 2, type: O.HALF_FLOAT, pack: ({ offsetX: t5, offsetY: s18 }) => [u(t5), u(s18)] }, aux4: { count: 2, type: O.UNSIGNED_BYTE, pack: ({ scaleX: e12, scaleY: t5 }) => [e12 * K, t5 * K] } } };
var x5 = { createComputedParams: (e12) => e12, optionalAttributes: d6.optionalAttributes, attributes: { ...d6.attributes, color: h6.attributes.color, bitset: { type: O.UNSIGNED_BYTE, count: 1, pack: (e12) => l5([[B, true]]) }, aux1: { count: 1, type: O.HALF_FLOAT, pack: (t5) => u(0.5 * t5.width) }, aux2: { count: 1, type: O.HALF_FLOAT, pack: (t5) => u(0.5 * t5.referenceWidth) }, aux3: { count: 2, type: O.HALF_FLOAT, packTessellation: ({ extrusionOffsetX: e12, extrusionOffsetY: t5 }) => [e12, t5] }, aux4: { count: 2, type: O.UNSIGNED_BYTE, packTessellation: ({ normalX: e12, normalY: t5 }) => [e12 * K + L, t5 * K + L] } } };
var A3 = class extends p7 {
  constructor() {
    super(...arguments), this.vertexSpec = x5;
  }
};
var f8 = class extends f7 {
  constructor() {
    super(...arguments), this.vertexSpec = m6;
  }
  _createOutlineWriter(e12, t5, s18, r13) {
    return new A3(e12, t5, s18, r13);
  }
  write(e12, t5, s18, r13, i17) {
    this.ensurePacked(t5, s18, r13);
    const a14 = this.evaluatedMeshParams.sprite?.textureBinding;
    e12.recordStart(this.instanceId, this.attributeLayout, a14), this._write(e12, s18), e12.recordEnd();
  }
  ensurePacked(e12, t5, s18) {
    super.ensurePacked(e12, t5, s18), this._lineMeshWriter.ensurePacked(e12, t5, s18);
  }
  enqueueRequest(e12, t5, s18) {
    super.enqueueRequest(e12, t5, s18), this._lineMeshWriter.enqueueRequest(e12, t5, s18);
  }
  async loadDependencies() {
    await Promise.all([super.loadDependencies(), this._lineMeshWriter.loadDependencies()]);
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/shaderGraph/techniques/fill/GradientSizeHelper.js
var a12 = () => i.getLogger("esri.views.2d.engine.webgl.shaderGraph.techniques.fill.GradientSizeHelper");
var n11 = class {
  constructor(t5, i17) {
    this._size = t5, this._sizeUnits = i17, this._relativeSize = null;
  }
  get relativeSize() {
    return this._relativeSize ??= this.calculateRelativeSize(), this._relativeSize;
  }
  calculateRelativeSize() {
    if (this._sizeUnits === ne.Relative) {
      const t5 = Math.min(this._size / 100, 1);
      return [t5, t5];
    }
    return this.calculateRelativeSizeFromAbsolute();
  }
};
var s14 = class extends n11 {
  constructor(t5, i17, e12, r13) {
    super(i17, e12), this.rotationMatrix00 = 1, this.rotationMatrix01 = 0, this.rotationMatrix10 = 0, this.rotationMatrix11 = 1, this.bounds = { xmin: 1 / 0, ymin: 1 / 0, xmax: -1 / 0, ymax: -1 / 0 }, this.rotationMatrix00 = Math.cos(r13), this.rotationMatrix01 = -Math.sin(r13), this.rotationMatrix10 = -this.rotationMatrix01, this.rotationMatrix11 = this.rotationMatrix00;
    const { bounds: a14, rotationMatrix00: n13, rotationMatrix01: s18, rotationMatrix10: o13, rotationMatrix11: c9 } = this;
    t5.forEachVertex((t6, i18) => {
      const e13 = t6 * n13 + i18 * s18, r14 = t6 * o13 + i18 * c9;
      a14.xmin = Math.min(a14.xmin, e13), a14.ymin = Math.min(a14.ymin, r14), a14.xmax = Math.max(a14.xmax, e13), a14.ymax = Math.max(a14.ymax, r14);
    }), this.center = [(a14.xmin + a14.xmax) / 2, (a14.ymin + a14.ymax) / 2];
  }
};
var o10 = class extends s14 {
  constructor(t5, i17, e12, r13) {
    super(t5, i17, e12, r13), this.method = "linear";
  }
  getRelativePosition(t5, i17) {
    const { rotationMatrix00: e12, rotationMatrix01: r13, bounds: a14 } = this, { xmin: n13, xmax: s18 } = a14;
    return [(t5 * e12 + i17 * r13 - n13) / (s18 - n13), 0];
  }
  calculateRelativeSizeFromAbsolute() {
    const { _size: t5, bounds: i17 } = this, { xmin: r13, xmax: a14 } = i17;
    return [u(t5) / (a14 - r13), 0];
  }
};
var c8 = class extends s14 {
  constructor(t5, i17, e12, r13) {
    super(t5, i17, e12, r13), this.method = "rectangular";
  }
  getRelativePosition(t5, i17) {
    const { bounds: e12, center: r13, rotationMatrix00: a14, rotationMatrix01: n13, rotationMatrix10: s18, rotationMatrix11: o13 } = this, c9 = t5 * s18 + i17 * o13, x7 = t5 * a14 + i17 * n13 - r13[0], l13 = c9 - r13[1];
    return [x7 * (2 / (e12.xmax - e12.xmin)), -l13 * (2 / (e12.ymax - e12.ymin))];
  }
  calculateRelativeSizeFromAbsolute() {
    const { _size: t5, bounds: i17 } = this, { xmin: r13, ymin: a14, xmax: n13, ymax: s18 } = i17;
    return [u(2 * t5) / (n13 - r13), u(2 * t5) / (s18 - a14)];
  }
};
var x6 = class extends s14 {
  constructor(t5, i17, e12) {
    super(t5, i17, e12, 0), this.method = "circular";
    const { xmin: r13, xmax: a14, ymin: n13, ymax: s18 } = this.bounds, o13 = a14 - r13, c9 = s18 - n13;
    this.radius = Math.sqrt(o13 * o13 + c9 * c9) / 2;
  }
  getRelativePosition(t5, i17) {
    const { center: e12, radius: r13 } = this;
    return [(t5 - e12[0]) / r13, -((i17 - e12[1]) / r13)];
  }
  calculateRelativeSizeFromAbsolute() {
    const { _size: t5 } = this;
    return [u(t5) / this.radius, 0];
  }
};
function l10(t5, e12) {
  if (null == t5) return null;
  const r13 = s2(e12.angle), n13 = e12.gradientSize, s18 = e12.gradientSizeUnits;
  switch (e12.gradientMethod.toLowerCase()) {
    case "linear":
      return new o10(t5, n13, s18, r13);
    case "rectangular":
      return new c8(t5, n13, s18, r13);
    case "circular":
      return new x6(t5, n13, s18);
    default:
      return a12().errorOnce(`Gradient fill method "${e12.gradientMethod}" currently unsupported.`), null;
  }
}

// node_modules/@arcgis/core/views/2d/engine/webgl/shaderGraph/techniques/fill/GradientFillMeshWriter.js
var p8 = { createComputedParams: (t5) => t5, optionalAttributes: i14.optionalAttributes, attributes: { ...i14.attributes, bitset: { type: O.UNSIGNED_BYTE, count: 1, pack: ({ gradientSizeUnits: e12, gradientType: r13 }) => {
  let i17 = 0;
  return e12 === ne.Absolute && (i17 |= f2(e4.isAbsolute)), "discrete" === r13.toLowerCase() && (i17 |= f2(e4.isDiscrete)), i17;
} }, tlbr: { count: 4, type: O.UNSIGNED_SHORT, pack: ({ sprite: t5 }) => {
  const { rect: i17, width: s18, height: a14 } = t5, o13 = i17.x + ti + ci, n13 = i17.y + ti;
  return [o13, n13, o13 + s18 - 2 * ci, n13 + a14];
} }, relativePosition: { count: 2, type: O.HALF_FLOAT, packTessellation: ({ gradientStats: t5 }, e12, r13, i17) => t5?.getRelativePosition(r13, i17) ?? [0, 0] }, relativeGradientSize: { count: 2, type: O.HALF_FLOAT, packTessellation: ({ gradientStats: t5 }) => t5?.relativeSize ?? [1, 1] }, gradientMethod: { count: 1, type: O.UNSIGNED_BYTE, pack: ({ gradientMethod: t5 }) => {
  switch (t5.toLowerCase()) {
    case "rectangular":
      return r3.rectangular;
    case "circular":
      return r3.circular;
    default:
      return r3.linear;
  }
} } } };
var u6 = class extends a11 {
  constructor() {
    super(...arguments), this.vertexSpec = p8;
  }
  get _preventEffectClipping() {
    return true;
  }
  createTesselationParams(t5) {
    return { gradientStats: l10(this._unclippedGeometry, this.evaluatedMeshParams) };
  }
  _write(t5, e12, r13) {
    const i17 = r13?.asOptimized() ?? e12.readGeometryForDisplay();
    this._unclippedGeometry = i17;
    const s18 = this._clip(i17);
    if (!s18) return void (this._unclippedGeometry = null);
    const a14 = this.evaluatedMeshParams.sprite?.textureBinding;
    t5.recordStart(this.instanceId, this.attributeLayout, a14), this._writeGeometry(t5, e12, s18), this._unclippedGeometry = null, t5.recordEnd();
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/shaderGraph/techniques/fill/PatternOutlineFillMeshWriter.js
var a13 = { optionalAttributes: s13.optionalAttributes, createComputedParams: (e12) => e12, attributes: { ...s13.attributes, ...h5.attributes } };
var u7 = { optionalAttributes: s13.optionalAttributes, createComputedParams: (e12) => e12, attributes: { ...s13.attributes, ...m5.attributes } };
var n12 = class extends p7 {
  constructor() {
    super(...arguments), this.vertexSpec = u7;
  }
};
var o11 = class extends f7 {
  constructor() {
    super(...arguments), this.vertexSpec = a13;
  }
  _createOutlineWriter(e12, t5, r13, s18) {
    return new n12(e12, t5, r13, s18);
  }
  write(e12, t5, r13, s18, i17) {
    this.ensurePacked(t5, r13, s18);
    const a14 = this.evaluatedMeshParams.sprite?.textureBinding;
    e12.recordStart(this.instanceId, this.attributeLayout, a14), this._write(e12, r13), e12.recordEnd();
  }
  ensurePacked(e12, t5, r13) {
    super.ensurePacked(e12, t5, r13), this._lineMeshWriter.ensurePacked(e12, t5, r13);
  }
  enqueueRequest(e12, t5, r13) {
    super.enqueueRequest(e12, t5, r13), this._lineMeshWriter.enqueueRequest(e12, t5, r13);
  }
  async loadDependencies() {
    await Promise.all([super.loadDependencies(), this._lineMeshWriter.loadDependencies()]);
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/shaderGraph/techniques/heatmap/HeatmapMeshWriter.js
var r11 = { createComputedParams: (t5) => t5, optionalAttributes: {}, attributes: { pos: { type: O.SHORT, count: 2, pack: "position", packPrecisionFactor: 10 }, id: { type: O.UNSIGNED_BYTE, count: 3, pack: "id" }, bitset: { type: O.UNSIGNED_BYTE, count: 1 }, offset: { type: O.BYTE, count: 2, packAlternating: { count: 4, pack: () => [[-1, -1], [1, -1], [-1, 1], [1, 1]] } } } };
var i15 = class extends c4 {
  constructor() {
    super(...arguments), this.vertexSpec = r11;
  }
  _write(t5, e12) {
    t5.recordStart(this.instanceId, this.attributeLayout);
    const r13 = e12.getDisplayId();
    if ("esriGeometryPoint" === e12.geometryType) {
      const i17 = e12.readXForDisplay(), o13 = e12.readYForDisplay();
      this._writeQuad(t5, r13, i17, o13);
    } else if ("esriGeometryMultipoint" === e12.geometryType) {
      const i17 = e12.readGeometryForDisplay();
      i17?.forEachVertex((e13, i18) => {
        e13 >= 0 && e13 <= 512 && i18 >= 0 && i18 <= 512 && this._writeQuad(t5, r13, e13, i18);
      });
    }
    t5.recordEnd();
  }
  _writeQuad(t5, e12, r13, i17) {
    const o13 = t5.vertexCount();
    this._writeVertex(t5, e12, r13, i17), t5.indexWrite(o13 + 0), t5.indexWrite(o13 + 1), t5.indexWrite(o13 + 2), t5.indexWrite(o13 + 1), t5.indexWrite(o13 + 3), t5.indexWrite(o13 + 2);
  }
};

// node_modules/@arcgis/core/symbols/cim/placements/CIMMarkerPlacementHelper.js
var e11 = class {
  static getPlacement(e12, r13, n13, s18, c9, o13) {
    const a14 = S2(n13);
    if (!a14) return null;
    -1 === r13 && e12.invertY();
    return a14.execute(e12, n13, s18, c9, o13);
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/shaderGraph/techniques/text/TextParams.js
var s15 = 96;
var i16 = class {
  constructor(i17) {
    const { offsetX: o13, offsetY: e12, postAngle: f9, fontSize: h8, haloSize: n13, outlineSize: l13, scaleFactor: z3, transforms: a14 } = i17;
    if (this.offsetX = o13, this.offsetY = e12, this.postAngle = f9, this.fontSize = Math.min(h8, s15), this.haloSize = n13 ?? 0, this.outlineSize = l13 ?? 0, this.transforms = a14, a14 && a14.infos.length > 1) {
      const i18 = D(h8, f9, false, o13, e12, a14, false);
      this.fontSize = Math.min(i18.size, s15);
      const n14 = i18.size / h8;
      this.haloSize *= n14, this.outlineSize *= n14, this.postAngle = i18.rotation, this.offsetX = i18.offsetX, this.offsetY = i18.offsetY;
    }
    z3 && (this.fontSize *= z3, this.offsetX *= z3, this.offsetY *= z3);
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/shaderGraph/techniques/text/TextMeshWriter.js
var P = 28;
var b2 = [4, 4];
var T3 = [16, 4];
var k3 = { topLeft: T3, topRight: T3, bottomLeft: T3, bottomRight: T3 };
var z2 = [4, 2];
var B3 = [4, 6];
var R3 = { topLeft: z2, topRight: z2, bottomLeft: B3, bottomRight: B3 };
var M3 = { topLeft: z2, topRight: B3, bottomLeft: z2, bottomRight: B3 };
var L2 = { topLeft: B3, topRight: B3, bottomLeft: b2, bottomRight: b2 };
var w3 = { topLeft: b2, topRight: b2, bottomLeft: B3, bottomRight: B3 };
var I = { topLeft: B3, topRight: b2, bottomLeft: B3, bottomRight: b2 };
var E2 = { topLeft: b2, topRight: B3, bottomLeft: b2, bottomRight: B3 };
var G3 = { createComputedParams: (t5) => t5, optionalAttributes: { zoomRange: { type: O.UNSIGNED_SHORT, count: 2, packPrecisionFactor: si, packTessellation: ({ minZoom: t5, maxZoom: e12 }) => [t5 || 0, e12 || P] }, clipAngle: { type: O.UNSIGNED_BYTE, count: 1, packTessellation: ({ clipAngle: t5 }) => N2(t5 || 0) }, referenceSymbol: { type: O.BYTE, count: 4, packPrecisionFactor: 1, packTessellation: (t5, o13) => {
  const r13 = t5.isLineLabel || !t5.referenceBounds, n13 = i6(r13 ? "center" : o13.horizontalAlignment), a14 = s5(r13 ? "middle" : o13.verticalAlignment), { offsetX: c9, offsetY: l13, size: h8 } = r13 ? { offsetX: 0, offsetY: 0, size: 0 } : t5.referenceBounds;
  return [u(c9), -u(l13), Math.round(u(h8)), n13 + 1 << 2 | a14 + 1];
} }, visibility: { type: O.FLOAT, count: 1, otherSource: true } }, attributes: { pos: { type: O.SHORT, count: 2, pack: "position", packPrecisionFactor: 10 }, id: { type: O.UNSIGNED_BYTE, count: 3, pack: "id" }, bitset: { type: O.UNSIGNED_BYTE, count: 1, packTessellation: ({ isBackground: t5, mapAligned: e12 }) => l5([[F, t5], [H, !!e12]]) }, offset: { type: O.SHORT, count: 2, packPrecisionFactor: 8, packAlternating: { count: 4, packTessellation: ({ offsets: t5 }) => {
  const { bottomLeft: e12, bottomRight: o13, topLeft: r13, topRight: i17 } = t5;
  return [r13, i17, e12, o13];
} } }, textureUV: { type: O.SHORT, count: 2, packPrecisionFactor: 4, packAlternating: { count: 4, packTessellation: ({ texcoords: t5 }) => {
  const { bottomLeft: e12, bottomRight: o13, topLeft: r13, topRight: i17 } = t5;
  return [r13, i17, e12, o13];
} } }, color: { type: O.UNSIGNED_BYTE, count: 4, normalized: true, packTessellation: ({ color: t5 }) => t5 }, fontAndReferenceSize: { type: O.UNSIGNED_SHORT, count: 2, packPrecisionFactor: 4, packTessellation: ({ fontSize: t5 }, { referenceSize: o13 }) => [Math.round(u(t5)), Math.round(u(o13 ?? t5))] }, outlineColor: { type: O.UNSIGNED_BYTE, count: 4, normalized: true, pack: ({ outlineColor: t5 }) => g(t5) }, haloColor: { type: O.UNSIGNED_BYTE, count: 4, normalized: true, pack: ({ haloColor: t5 }) => g(t5) }, outlineAndHaloSize: { type: O.UNSIGNED_SHORT, count: 2, packPrecisionFactor: 4, packTessellation: ({ outlineSize: t5, haloSize: o13 }) => [Math.round(u(t5)), Math.round(u(o13))] } } };
var A4 = class extends c4 {
  constructor() {
    super(...arguments), this.vertexSpec = G3, this._textMeshParamsPropsInitialized = false;
  }
  ensurePacked(t5, e12, o13) {
    super.ensurePacked(t5, e12, o13), this._textMeshParamsPropsInitialized && !this._evaluator.hasDynamicProperties || (this._textMeshTransformProps = new i16(this.evaluatedMeshParams), this._textMeshParamsPropsInitialized = true);
  }
  _write(t5, e12, o13) {
    const r13 = this._getShaping();
    if (!r13) return;
    const i17 = e12.getDisplayId();
    if (null != this.evaluatedMeshParams.placement) return this._writePlacedTextMarkers(t5, e12, r13, o13);
    if (o13?.nextPath()) return o13.nextPoint(), this._writeGlyphs(t5, i17, o13.x, o13.y, r13, 0);
    if ("esriGeometryPolygon" === e12.geometryType) {
      const o14 = e12.readCentroidForDisplay();
      if (!o14) return;
      const [s19, n14] = o14.coords;
      return this._writeGlyphs(t5, i17, s19, n14, r13, 0);
    }
    if ("esriGeometryMultipoint" === e12.geometryType) {
      const o14 = e12.readGeometryForDisplay();
      return void o14?.forEachVertex((e13, o15) => this._writeGlyphs(t5, i17, e13, o15, r13, 0));
    }
    const s18 = e12.readXForDisplay(), n13 = e12.readYForDisplay();
    return this._writeGlyphs(t5, i17, s18, n13, r13, 0);
  }
  _writePlacedTextMarkers(t5, i17, s18, n13) {
    const a14 = n13 ?? a2.fromFeatureSetReaderCIM(i17);
    if (!a14) return;
    const c9 = -1, l13 = e11.getPlacement(a14, c9, this.evaluatedMeshParams.placement, u(1), t5.id, t3());
    if (!l13) return;
    const h8 = i17.getDisplayId();
    let f9 = l13.next();
    for (; null != f9; ) {
      const e12 = f9.tx, o13 = -f9.ty, r13 = -f9.getAngle();
      this._writeGlyphs(t5, h8, e12, o13, s18, r13), f9 = l13.next();
    }
  }
  _getShaping(o13) {
    const r13 = this._textMeshTransformProps, i17 = this.evaluatedMeshParams;
    if (!i17.glyphs?.glyphs.length) return null;
    const s18 = u(r13.fontSize), n13 = u(r13.offsetX), p9 = u(r13.offsetY), m9 = r(u(i17.lineWidth), zi, Bi), d7 = G2 * r(i17.lineHeightRatio, 0.25, 4);
    return O2(i17.glyphs, { scale: s18 / A, angle: r13.postAngle, xOffset: n13, yOffset: p9, horizontalAlignment: i17.horizontalAlignment, verticalAlignment: o13 || i17.verticalAlignment, maxLineWidth: m9, lineHeight: d7, decoration: i17.decoration, borderLineSizePx: u(i17.boxBorderLineSize), hasBackground: !!i17.boxBackgroundColor, useCIMAngleBehavior: i17.useCIMAngleBehavior });
  }
  _writeGlyphs(t5, o13, r13, i17, s18, n13, a14, c9, l13 = true) {
    const h8 = this.evaluatedMeshParams, f9 = this._textMeshTransformProps, m9 = u(f9.fontSize), u8 = f9.haloSize, g3 = f9.outlineSize, x7 = u(f9.offsetX), y4 = u(f9.offsetY), [S6, _3] = m(h8.scaleInfo, this.getTileInfo());
    0 !== n13 && s18.setRotation(n13);
    const P2 = s18.bounds, b4 = r13 + P2.x + x7, T4 = i17 + P2.y - y4, k5 = 2 * (h8.minPixelBuffer ? h8.minPixelBuffer / m9 : 1), z3 = Math.max(P2.width, P2.height) * k5;
    s18.textBox && (t5.recordStart(this.instanceId, this.attributeLayout, s18.glyphs[0].textureBinding), l13 && t5.recordBounds(b4, T4, z3, z3), this._writeTextBox(t5, o13, r13, i17, s18.textBox, a14, c9), t5.recordEnd());
    for (const e12 of s18.glyphs) {
      t5.recordStart(this.instanceId, this.attributeLayout, e12.textureBinding), l13 && t5.recordBounds(b4, T4, z3, z3);
      const { texcoords: s19, offsets: n14 } = e12;
      this._writeQuad(t5, o13, r13, i17, { texcoords: s19, offsets: n14, fontSize: m9, haloSize: u8, outlineSize: g3, color: g(h8.color), isBackground: false, referenceBounds: a14, minZoom: S6, maxZoom: _3, ...c9 }), t5.recordEnd();
    }
    0 !== n13 && s18.setRotation(-n13);
  }
  _writeTextBox(t5, e12, o13, r13, i17, s18, n13) {
    const a14 = this.evaluatedMeshParams, { fontSize: c9, haloSize: l13, outlineSize: h8 } = this._textMeshTransformProps, { boxBackgroundColor: f9, boxBorderLineColor: m9 } = a14, d7 = { isBackground: true, fontSize: c9, haloSize: l13, outlineSize: h8, referenceBounds: s18, ...n13 };
    f9 && (this._writeQuad(t5, e12, o13, r13, { texcoords: k3, offsets: i17.main, color: g(f9), ...d7 }), m9 || (this._writeQuad(t5, e12, o13, r13, { texcoords: L2, offsets: i17.top, color: g(f9), ...d7 }), this._writeQuad(t5, e12, o13, r13, { texcoords: w3, offsets: i17.bot, color: g(f9), ...d7 }), this._writeQuad(t5, e12, o13, r13, { texcoords: I, offsets: i17.left, color: g(f9), ...d7 }), this._writeQuad(t5, e12, o13, r13, { texcoords: E2, offsets: i17.right, color: g(f9), ...d7 }))), m9 && (this._writeQuad(t5, e12, o13, r13, { texcoords: R3, offsets: i17.top, color: g(m9), ...d7 }), this._writeQuad(t5, e12, o13, r13, { texcoords: R3, offsets: i17.bot, color: g(m9), ...d7 }), this._writeQuad(t5, e12, o13, r13, { texcoords: M3, offsets: i17.left, color: g(m9), ...d7 }), this._writeQuad(t5, e12, o13, r13, { texcoords: M3, offsets: i17.right, color: g(m9), ...d7 }));
  }
  _writeQuad(t5, e12, o13, r13, i17) {
    const s18 = t5.vertexCount();
    this._writeVertex(t5, e12, o13, r13, i17), t5.indexWrite(s18 + 0), t5.indexWrite(s18 + 1), t5.indexWrite(s18 + 2), t5.indexWrite(s18 + 1), t5.indexWrite(s18 + 3), t5.indexWrite(s18 + 2);
  }
};
var N2 = (t5) => Math.round(t5 * (254 / 360));

// node_modules/@arcgis/core/views/2d/engine/webgl/shaderGraph/techniques/line/GradientStrokeMeshWriter.js
var m7 = { createComputedParams: (t5) => t5, optionalAttributes: f6.optionalAttributes, attributes: { ...f6.attributes, bitset: { type: O.UNSIGNED_BYTE, count: 1, pack: ({ gradientMethod: t5, gradientSizeUnits: e12, gradientType: r13 }) => l5([[e5.isAlongLine, "alongline" === t5.toLowerCase()], [e5.isAbsoluteSize, e12 === ne.Absolute], [e5.isDiscrete, "discrete" === r13.toLowerCase()]]) }, tlbr: { type: O.UNSIGNED_SHORT, count: 4, pack: ({ sprite: t5 }) => {
  const { rect: e12, width: i17, height: o13 } = t5, n13 = e12.x + ti + ci, a14 = e12.y + ti;
  return [n13, a14, n13 + i17 - 2 * ci, a14 + o13];
} }, accumulatedDistance: { type: O.HALF_FLOAT, count: 1, packTessellation: ({ distance: t5, pathLength: e12, distanceOffset: i17 }) => (i17 + t5) / e12 }, gradientSize: { type: O.HALF_FLOAT, count: 1, pack: ({ gradientSize: e12, gradientSizeUnits: r13 }) => r13 === ne.Relative ? e12 / 100 : u(e12) }, totalLength: { type: O.HALF_FLOAT, count: 1, packTessellation: ({ pathLength: t5 }) => t5 }, segmentDirection: { type: O.BYTE, count: 2, packPrecisionFactor: 16, packTessellation: ({ directionX: t5, directionY: e12 }) => [t5, e12] } } };
var l11 = class extends T2 {
  get _preventEffectClipping() {
    return true;
  }
  constructor(t5, e12, i17, r13) {
    super(t5, e12, i17, r13), this.vertexSpec = m7, this._tessellationOptions.textured = true;
  }
  _write(t5, i17, r13) {
    const s18 = r13 ?? a2.fromFeatureSetReaderCIM(i17);
    if (!s18) return;
    const { sprite: o13 } = this.evaluatedMeshParams;
    this._writeGeometry(t5, i17, s18, o13?.textureBinding);
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/shaderGraph/techniques/line/TexturedLineMeshWriter.js
var m8 = { createComputedParams: (t5) => t5, optionalAttributes: f6.optionalAttributes, attributes: { ...f6.attributes, bitset: { type: O.UNSIGNED_BYTE, count: 1, pack: ({ shouldSampleAlphaOnly: t5, shouldScaleDash: e12, isSDF: r13 }) => l5([[q, t5], [D2, e12], [E, r13]]) }, tlbr: { type: O.UNSIGNED_SHORT, count: 4, pack: ({ sprite: t5 }) => {
  const { rect: e12, width: r13, height: o13 } = t5, i17 = e12.x + ti, n13 = e12.y + ti;
  return [i17, n13, i17 + r13, n13 + o13];
} }, accumulatedDistance: { type: O.UNSIGNED_SHORT, count: 1, packTessellation: ({ distance: t5 }) => t5 }, segmentDirection: { type: O.BYTE, count: 2, packPrecisionFactor: 16, packTessellation: ({ directionX: t5, directionY: e12 }) => [t5, e12] }, offsetAlongLine: { type: O.HALF_FLOAT, count: 1, pack: ({ offsetAlongLine: e12 }) => u(e12) }, capType: { type: O.UNSIGNED_BYTE, count: 1, pack: ({ capType: t5 }) => {
  switch (t5) {
    case w.Butt:
    case "butt":
      return 0;
    case w.Square:
    case "square":
      return 1;
    case w.Round:
    case "round":
      return 2;
    default:
      return 0;
  }
} } } };
var l12 = class extends T2 {
  constructor(t5, e12, r13, s18) {
    super(t5, e12, r13, s18), this.vertexSpec = m8, this._tessellationOptions.textured = true;
  }
  _write(t5, r13, s18) {
    const o13 = s18 ?? a2.fromFeatureSetReaderCIM(r13);
    if (!o13) return;
    const { sprite: i17 } = this.evaluatedMeshParams;
    this._writeGeometry(t5, r13, o13, i17?.textureBinding);
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/shaderGraph/techniques/markers/ComputedMarkerParams.js
var s16 = class _s {
  static from(t5) {
    return "width" in t5 ? this.fromSimpleMeshParams(t5) : this.fromComplexMeshParams(t5);
  }
  static fromSimpleMeshParams(e12) {
    const i17 = new _s(e12.sprite, e12.color, e12.outlineColor, e12.minPixelBuffer, e12.placement, e12.scaleInfo, e12.effects), { type: o13, width: h8, height: r13, angle: n13, alignment: c9, outlineSize: a14, referenceSize: f9, sprite: l13, overrideOutlineColor: m9 } = e12;
    return i17.rawWidth = u(h8), i17.rawHeight = u(r13), i17.angle = n13, i17.alignment = c9, i17.outlineSize = u(a14), i17.referenceSize = u(f9), i17.overrideOutlineColor = m9, i17.offsetX = u(e12.offsetX), i17.offsetY = u(e12.offsetY), "simple" !== o13 || l13.sdf || (i17.rawWidth = l13.width, i17.rawHeight = l13.height), i17._computeSize(e12, false), i17;
  }
  static fromComplexMeshParams(e12) {
    const o13 = new _s(e12.sprite, e12.color, e12.outlineColor, e12.minPixelBuffer, e12.placement, e12.scaleInfo, e12.effects);
    let { alignment: h8, transforms: r13, size: n13, scaleX: c9, anchorX: a14, anchorY: f9, angle: l13, colorLocked: m9, frameHeight: d7, widthRatio: u8, offsetX: p9, offsetY: g3, outlineSize: x7, referenceSize: w4, scaleFactor: z3, sizeRatio: S6, isAbsoluteAnchorPoint: X, rotateClockwise: Y, scaleSymbolsProportionally: C3, sprite: H2 } = e12;
    if (r13 && r13.infos.length > 0) {
      const t5 = D(n13, l13, Y, p9, g3, r13);
      n13 = t5.size, l13 = t5.rotation, p9 = t5.offsetX, g3 = t5.offsetY, Y = false;
    }
    z3 && (n13 *= z3, p9 *= z3, g3 *= z3);
    const M4 = c9 * (H2.width / H2.height);
    o13.alignment = h8, o13.rawHeight = u(n13), o13.rawWidth = o13.rawHeight * M4, o13.referenceSize = u(w4), o13.sizeRatio = S6, o13.sdfDecodeCoeff = (H2.sdfDecodeCoeff ?? 1) * S6, o13.angle = l13, o13.rotateClockwise = Y, o13.anchorX = a14, o13.anchorY = f9, o13.offsetX = u(p9), o13.offsetY = u(g3), X && n13 && (H2.sdf ? o13.anchorX = a14 / (n13 * u8) : o13.anchorX = a14 / (n13 * M4), o13.anchorY = f9 / n13);
    const W = C3 && d7 ? n13 / d7 : 1;
    return o13.outlineSize = 0 === x7 || isNaN(x7) ? 0 : u(x7) * W, o13.scaleSymbolsProportionally = C3, o13.colorLocked = m9, o13._computeSize(e12, true), o13;
  }
  constructor(t5, i17, o13, s18, h8, r13, n13) {
    this.sprite = t5, this.color = i17, this.outlineColor = o13, this.minPixelBuffer = s18, this.placement = h8, this.scaleInfo = r13, this.effects = n13, this.rawWidth = 0, this.rawHeight = 0, this.angle = 0, this.outlineSize = 0, this.referenceSize = 0, this.sizeRatio = 1, this.sdfDecodeCoeff = 1, this.alignment = i2.SCREEN, this.scaleSymbolsProportionally = false, this.overrideOutlineColor = false, this.colorLocked = false, this.anchorX = 0, this.anchorY = 0, this.computedWidth = 0, this.computedHeight = 0, this.texXmin = 0, this.texYmin = 0, this.texXmax = 0, this.texYmax = 0, this.offsetX = 0, this.offsetY = 0, this.rotateClockwise = true;
  }
  get boundsInfo() {
    return { size: Math.max(this.computedHeight, this.computedWidth), offsetX: this.offsetX, offsetY: this.offsetY };
  }
  _computeSize(t5, e12) {
    const { sprite: i17, hasSizeVV: s18 } = t5, n13 = !!i17.sdf, c9 = i17.sdfPaddingRatio ?? 0.5, { rawWidth: a14, rawHeight: f9, sizeRatio: l13, outlineSize: m9 } = this, d7 = i17.rect;
    let u8 = a14 * l13, p9 = f9 * l13, g3 = 0, x7 = 0;
    if (n13) {
      const t6 = 1 / (1 - c9);
      if (u8 *= t6, p9 *= t6, s18) this.computedWidth = u8, this.computedHeight = p9;
      else {
        const t7 = e12 && a14 > f9 ? u8 : a14, o13 = f9, s19 = m9 + 2 * 1;
        this.computedWidth = Math.min(t7 + s19, u8), this.computedHeight = Math.min(o13 + s19, p9);
        const h8 = Math.max(i17.width, i17.height) / Math.max(u8, p9);
        g3 = (this.computedWidth - u8) * h8, x7 = (this.computedHeight - p9) * h8;
      }
    } else this.computedWidth = u8 * (d7.width / i17.width), this.computedHeight = p9 * (d7.height / i17.height), g3 = 2 * ti, x7 = 2 * ti;
    const w4 = d7.x + ti - g3 / 2, z3 = d7.y + ti - x7 / 2, S6 = w4 + i17.width + g3, X = z3 + i17.height + x7;
    this.texXmin = h7(w4), this.texYmin = h7(z3), this.texXmax = r12(S6), this.texYmax = r12(X), this.computedWidth *= (this.texXmax - this.texXmin) / (S6 - w4), this.computedHeight *= (this.texYmax - this.texYmin) / (X - z3), this.anchorX *= u8 / this.computedWidth, this.anchorY *= p9 / this.computedHeight;
  }
};
function h7(t5, e12 = 1e-7) {
  const i17 = Math.ceil(t5);
  return i17 - t5 < e12 ? i17 : Math.floor(t5);
}
function r12(t5, e12 = 1e-7) {
  const i17 = Math.floor(t5);
  return t5 - i17 < e12 ? i17 : Math.ceil(t5);
}

// node_modules/@arcgis/core/views/2d/engine/webgl/shaderGraph/techniques/markers/MarkerMeshWriter.js
var b3 = 3.14159265359 / 180;
var k4 = 128 / Math.PI;
function v2(e12, t5) {
  return e12 %= t5, Math.abs(e12 >= 0 ? e12 : e12 + t5);
}
function S5(e12) {
  return v2(e12 * k4, 256);
}
function I2(e12, a14, i17, n13, c9 = false) {
  const m9 = n2(), l13 = c9 ? 1 : -1;
  return a3(m9), (a14 || i17) && i5(m9, m9, [a14, -i17]), n13 && s4(m9, m9, l13 * b3 * -n13), m9;
}
var _2 = { createComputedParams: (e12) => s16.from(e12), optionalAttributes: { zoomRange: { type: O.SHORT, count: 2, packPrecisionFactor: si, pack: ({ scaleInfo: e12 }, { tileInfo: t5 }) => m(e12, t5) } }, attributes: { pos: { type: O.SHORT, count: 2, pack: "position", packPrecisionFactor: 10 }, id: { type: O.UNSIGNED_BYTE, count: 3, pack: "id" }, bitset: { type: O.UNSIGNED_BYTE, count: 1, pack: ({ sprite: e12, alignment: t5, scaleSymbolsProportionally: r13, overrideOutlineColor: o13, colorLocked: s18 }) => {
  let a14 = 0;
  return e12.sdf && (a14 |= f2(o.bitset.isSDF)), t5 === i2.MAP && (a14 |= f2(o.bitset.isMapAligned)), r13 && (a14 |= f2(o.bitset.scaleSymbolsProportionally)), o13 && (a14 |= f2(o.bitset.overrideOutlineColor)), s18 && (a14 |= f2(o.bitset.colorLocked)), a14;
} }, offset: { type: O.HALF_FLOAT, count: 2, packAlternating: { count: 4, pack: ({ angle: e12, computedWidth: t5, computedHeight: r13, anchorX: o13, anchorY: s18, offsetX: i17, offsetY: n13, rotateClockwise: c9 }) => {
  const m9 = I2(0, i17, n13, -e12, c9), l13 = -(0.5 + o13) * t5, u8 = -(0.5 - s18) * r13, d7 = [l13, u8], p9 = [l13 + t5, u8], h8 = [l13, u8 + r13], f9 = [l13 + t5, u8 + r13];
  return S(d7, d7, m9), S(p9, p9, m9), S(h8, h8, m9), S(f9, f9, m9), [d7, p9, h8, f9];
} } }, textureUV: { type: O.SHORT, count: 2, packPrecisionFactor: 4, packAlternating: { count: 4, pack: ({ texXmax: e12, texXmin: t5, texYmax: r13, texYmin: o13 }) => [[t5, o13], [e12, o13], [t5, r13], [e12, r13]] } }, color: { type: O.UNSIGNED_BYTE, count: 4, normalized: true, pack: ({ color: e12 }) => g(e12) }, outlineColor: { type: O.UNSIGNED_BYTE, count: 4, normalized: true, pack: ({ outlineColor: e12 }) => g(e12) }, sizing: { type: O.UNSIGNED_BYTE, count: 4, pack: ({ rawWidth: e12, rawHeight: t5, outlineSize: r13, referenceSize: o13 }) => {
  const s18 = Math.max(e12, t5);
  return [d(s18, 128), d(r13, 128), d(o13, 128), 0];
} }, placementAngle: { type: O.UNSIGNED_BYTE, count: 1, packTessellation: ({ placementAngle: e12 }) => S5(e12) }, sdfDecodeCoeff: { type: O.UNSIGNED_SHORT, count: 1, packPrecisionFactor: 64, pack: ({ sdfDecodeCoeff: e12 }) => e12 } } };
var E3 = class extends c4 {
  constructor() {
    super(...arguments), this.vertexSpec = _2;
  }
  getBoundsInfo() {
    return this.evaluatedMeshParams.boundsInfo;
  }
  _write(e12, t5, r13) {
    const o13 = this.evaluatedMeshParams.sprite?.textureBinding, s18 = t5.getDisplayId();
    e12.recordStart(this.instanceId, this.attributeLayout, o13);
    const a14 = this.evaluatedMeshParams.minPixelBuffer, i17 = Math.max(this.evaluatedMeshParams.computedWidth, a14), m9 = Math.max(this.evaluatedMeshParams.computedHeight, a14), l13 = -this.evaluatedMeshParams.anchorX * this.evaluatedMeshParams.computedWidth, u8 = this.evaluatedMeshParams.anchorY * this.evaluatedMeshParams.computedHeight, d7 = this.evaluatedMeshParams.offsetX + l13, p9 = -this.evaluatedMeshParams.offsetY + u8;
    if (null != this.evaluatedMeshParams.placement) {
      let o14 = null;
      if (null != r13) {
        const e13 = Math.max(this.evaluatedMeshParams.computedWidth, this.evaluatedMeshParams.computedHeight);
        if (o14 = i4(r13, 2 * e13, false), null === o14) return;
      }
      this._writePlacedMarkers(e12, t5, o14, i17, m9);
    } else if (r13?.nextPath()) {
      r13.nextPoint();
      const t6 = r13.x, o14 = r13.y;
      e12.recordBounds(t6 + d7, o14 + p9, i17, m9), this._writeQuad(e12, s18, t6, o14);
    } else if ("esriGeometryPolygon" === t5.geometryType) {
      const r14 = t5.readCentroidForDisplay();
      if (!r14) return;
      const [o14, a15] = r14.coords;
      e12.recordBounds(o14 + d7, a15 + p9, i17, m9), this._writeQuad(e12, s18, o14, a15);
    } else if ("esriGeometryPoint" === t5.geometryType) {
      const r14 = t5.readXForDisplay(), o14 = t5.readYForDisplay();
      e12.recordBounds(r14 + d7, o14 + p9, i17, m9), this._writeQuad(e12, s18, r14, o14);
    } else {
      const r14 = t5.readGeometryForDisplay();
      r14?.forEachVertex((t6, r15) => {
        e12.recordBounds(t6 + d7, r15 + p9, i17, m9), Math.abs(t6) > r2 || Math.abs(r15) > r2 || this._writeQuad(e12, s18, t6, r15);
      });
    }
    e12.recordEnd();
  }
  _writePlacedMarkers(t5, r13, o13, s18, a14) {
    const n13 = o13 ?? a2.fromFeatureSetReaderCIM(r13);
    if (!n13) return;
    const m9 = -1, u8 = e11.getPlacement(n13, m9, this.evaluatedMeshParams.placement, u(1), t5.id, t3());
    if (!u8) return;
    const d7 = r13.getDisplayId();
    let p9 = u8.next();
    const h8 = this.evaluatedMeshParams.offsetX, f9 = -this.evaluatedMeshParams.offsetY;
    for (; null != p9; ) {
      const e12 = p9.tx, r14 = -p9.ty;
      if (Math.abs(e12) > r2 || Math.abs(r14) > r2) {
        p9 = u8.next();
        continue;
      }
      const o14 = -p9.getAngle();
      t5.recordBounds(e12 + h8, r14 + f9, s18, a14), this._writeQuad(t5, d7, e12, r14, o14), p9 = u8.next();
    }
  }
  _writeQuad(e12, t5, r13, o13, s18) {
    const a14 = e12.vertexCount(), i17 = null == s18 ? null : { placementAngle: s18 };
    this._writeVertex(e12, t5, r13, o13, i17), e12.indexWrite(a14 + 0), e12.indexWrite(a14 + 1), e12.indexWrite(a14 + 2), e12.indexWrite(a14 + 1), e12.indexWrite(a14 + 3), e12.indexWrite(a14 + 2);
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/shaderGraph/techniques/pieChart/PieChartMeshWriter.js
var o12 = { createComputedParams: (e12) => e12, optionalAttributes: {}, attributes: { pos: { type: O.SHORT, count: 2, packPrecisionFactor: 10, pack: "position" }, id: { type: O.UNSIGNED_BYTE, count: 3, pack: "id" }, bitset: { type: O.UNSIGNED_BYTE, count: 1, pack: (e12) => 0 }, offset: { type: O.SHORT, count: 2, packPrecisionFactor: 16, packAlternating: { count: 4, pack: ({ size: t5 }) => {
  const r13 = u(t5), i17 = -r13 / 2, o13 = -r13 / 2;
  return [[i17, o13], [i17 + r13, o13], [i17, o13 + r13], [i17 + r13, o13 + r13]];
} } }, texCoords: { type: O.SHORT, count: 2, packPrecisionFactor: 4, packAlternating: { count: 4, pack: () => [[0, 1], [1, 1], [0, 0], [1, 0]] } }, size: { type: O.UNSIGNED_BYTE, count: 2, pack: ({ size: e12 }) => [e12, e12] }, referenceSize: { type: O.UNSIGNED_BYTE, count: 1, pack: ({ size: t5 }) => u(t5) }, zoomRange: { type: O.UNSIGNED_BYTE, count: 2, pack: ({ scaleInfo: e12 }, { tileInfo: r13 }) => m(e12, r13) } } };
var s17 = class extends c4 {
  constructor() {
    super(...arguments), this.vertexSpec = o12;
  }
  _write(t5, r13) {
    const i17 = r13.getDisplayId(), o13 = this.evaluatedMeshParams.minPixelBuffer, s18 = Math.max(u(this.evaluatedMeshParams.size), o13);
    let c9, n13;
    if ("esriGeometryPoint" === r13.geometryType) c9 = r13.readXForDisplay(), n13 = r13.readYForDisplay();
    else {
      const e12 = r13.readCentroidForDisplay();
      if (!e12) return;
      c9 = e12?.coords[0], n13 = e12?.coords[1];
    }
    t5.recordStart(this.instanceId, this.attributeLayout), t5.recordBounds(c9, n13, s18, s18);
    const a14 = t5.vertexCount();
    this._writeVertex(t5, i17, c9, n13), t5.indexWrite(a14 + 0), t5.indexWrite(a14 + 1), t5.indexWrite(a14 + 2), t5.indexWrite(a14 + 1), t5.indexWrite(a14 + 3), t5.indexWrite(a14 + 2), t5.recordEnd();
  }
};

export {
  e11 as e,
  m,
  g,
  h,
  p2 as p,
  l6 as l,
  t3 as t,
  o6 as o,
  e6 as e2,
  o3 as o2,
  n4 as n,
  s8 as s,
  r6 as r,
  a6 as a,
  c3 as c,
  l4 as l2,
  f,
  a8 as a2,
  s10 as s2,
  p3 as p2,
  r8 as r2,
  l7 as l3,
  k,
  u3 as u,
  T,
  m2,
  y2 as y,
  F2 as F,
  f3 as f2,
  O3 as O,
  S4 as S,
  d2 as d,
  x,
  N,
  a10 as a3,
  d4 as d2,
  d5 as d3,
  T2,
  s12 as s3,
  c7 as c2,
  o9 as o3,
  h4 as h2,
  f7 as f3,
  f8 as f4,
  u6 as u2,
  o11 as o4,
  i15 as i,
  P,
  A4 as A,
  l11 as l4,
  l12 as l5,
  E3 as E,
  s17 as s4
};
//# sourceMappingURL=chunk-EGNOBZZN.js.map
