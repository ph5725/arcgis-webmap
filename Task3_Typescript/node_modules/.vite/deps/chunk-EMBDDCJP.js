import {
  g as g3,
  l as l2,
  o as o3,
  t as t2,
  t2 as t3,
  u
} from "./chunk-SMESMUA5.js";
import {
  m as m2
} from "./chunk-MDCTPMKN.js";
import {
  a as a4,
  e as e2,
  n2 as n5,
  n3 as n6,
  o2 as o4,
  o3 as o5,
  o4 as o6,
  t2 as t4
} from "./chunk-KQMSRGRD.js";
import {
  t as t5
} from "./chunk-BQVMDMIB.js";
import {
  B,
  g as g2
} from "./chunk-56ZY2WLU.js";
import {
  e as e3
} from "./chunk-HSRD3P5Q.js";
import {
  o as o2
} from "./chunk-SWINDW7X.js";
import {
  c
} from "./chunk-2ZADANKQ.js";
import {
  f
} from "./chunk-VEXXJH4E.js";
import {
  g as g4,
  v
} from "./chunk-4NFGT2KA.js";
import {
  n as n4
} from "./chunk-ZPAWXU2P.js";
import {
  e
} from "./chunk-LWV5GP6V.js";
import {
  n as n3,
  t
} from "./chunk-6EOJZ6DP.js";
import {
  a as a2
} from "./chunk-67CCONUO.js";
import {
  S,
  a as a3
} from "./chunk-H6F6O2KE.js";
import {
  M,
  P,
  _,
  g
} from "./chunk-BZYXFNL4.js";
import {
  n as n2
} from "./chunk-VNTS5E5O.js";
import {
  o
} from "./chunk-TNW4TPNP.js";
import {
  p
} from "./chunk-6KFXWKZZ.js";
import {
  l
} from "./chunk-A3VAC24F.js";
import {
  r as r3
} from "./chunk-FPSA4NFH.js";
import {
  m
} from "./chunk-N3XLUQJI.js";
import {
  a2 as a
} from "./chunk-JUAD7TJ6.js";
import {
  r
} from "./chunk-5TPMG26T.js";
import {
  n
} from "./chunk-PSZLDJJA.js";
import {
  r2
} from "./chunk-GZ2P4SCJ.js";

// node_modules/@arcgis/core/views/3d/webgl-engine/core/shaderLibrary/output/OutputDepth.glsl.js
function e4(e6, o8) {
  switch (o8.output) {
    case n4.Shadow:
    case n4.ShadowHighlight:
    case n4.ShadowExcludeHighlight:
    case n4.ViewshedShadow:
      e6.fragment.code.add(n3`float _calculateFragDepth(const in float depth) {
const float SLOPE_SCALE = 2.0;
const float BIAS = 20.0 * .000015259;
float m = max(abs(dFdx(depth)), abs(dFdy(depth)));
return depth + SLOPE_SCALE * m + BIAS;
}
void outputDepth(float _linearDepth){
float fragDepth = _calculateFragDepth(_linearDepth);
gl_FragDepth = fragDepth;
}`);
  }
}

// node_modules/@arcgis/core/views/3d/webgl-engine/effects/ssao/SSAOBlurTechnique.js
var l3 = class extends g3 {
  constructor(r5, s) {
    super(r5, s, new t2(f, () => import("./SSAOBlur.glsl-WZN3NBO7.js")));
  }
  initializePipeline() {
    return B({ colorWrite: g2 });
  }
};

// node_modules/@arcgis/core/views/3d/webgl-engine/effects/ssao/SSAONoiseData.js
var e5 = "eXKEvZaUc66cjIKElE1jlJ6MjJ6Ufkl+jn2fcXp5jBx7c6KEflSGiXuXeW6OWs+tfqZ2Yot2Y7Zzfo2BhniEj3xoiXuXj4eGZpqEaHKDWjSMe7palFlzc3BziYOGlFVzg6Zzg7CUY5JrjFF7eYJ4jIKEcyyEonSXe7qUfqZ7j3xofqZ2c4R5lFZ5Y0WUbppoe1l2cIh2ezyUho+BcHN2cG6DbpqJhqp2e1GcezhrdldzjFGUcyxjc3aRjDyEc1h7Sl17c6aMjH92pb6Mjpd4dnqBjMOEhqZleIOBYzB7gYx+fnqGjJuEkWlwnCx7fGl+c4hjfGyRe5qMlNOMfnqGhIWHc6OMi4GDc6aMfqZuc6aMzqJzlKZ+lJ6Me3qRfoFue0WUhoR5UraEa6qMkXiPjMOMlJOGe7JrUqKMjK6MeYRzdod+Sl17boiPc6qEeYBlcIh2c1WEe7GDiWCDa0WMjEmMdod+Y0WcdntzhmN8WjyMjKJjiXtzgYxYaGd+a89zlEV7e2GJfnd+lF1rcK5zc4p5cHuBhL6EcXp5eYB7fnh8iX6HjIKEeaxuiYOGc66RfG2Ja5hzjlGMjEmMe9OEgXuPfHyGhPeEdl6JY02McGuMfnqGhFiMa3WJfnx2l4hwcG1uhmN8c0WMc39og1GBbrCEjE2EZY+JcIh2cIuGhIWHe0mEhIVrc09+gY5+eYBlnCyMhGCDl3drfmmMgX15aGd+gYx+fnuRfnhzY1SMsluJfnd+hm98WtNrcIuGh4SEj0qPdkqOjFF7jNNjdnqBgaqUjMt7boeBhnZ4jDR7c5pze4GGjEFrhLqMjHyMc0mUhKZze4WEa117kWlwbpqJjHZ2eX2Bc09zeId+e0V7WlF7jHJ2l72BfId8l3eBgXyBe897jGl7c66cgW+Xc76EjKNbgaSEjGx4fId8jFFjgZB8cG6DhlFziZhrcIh2fH6HgUqBgXiPY8dahGFzjEmMhEFre2dxhoBzc5SGfleGe6alc7aUeYBlhKqUdlp+cH5za4OEczxza0Gcc4J2jHZ5iXuXjH2Jh5yRjH2JcFx+hImBjH+MpddCl3dreZeJjIt8ZW18bm1zjoSEeIOBlF9oh3N7hlqBY4+UeYFwhLJjeYFwaGd+gUqBYxiEYot2fqZ2ondzhL6EYyiEY02Ea0VjgZB8doaGjHxoc66cjEGEiXuXiXWMiZhreHx8frGMe75rY02Ec5pzfnhzlEp4a3VzjM+EhFFza3mUY7Zza1V5e2iMfGyRcziEhDyEkXZ2Y4OBnCx7g5t2eyBjgV6EhEFrcIh2dod+c4Z+nJ5zjm15jEmUeYxijJp7nL6clIpjhoR5WrZraGd+fnuRa6pzlIiMg6ZzfHx5foh+eX1ufnB5eX1ufnB5aJt7UqKMjIh+e3aBfm5lbYSBhGFze6J4c39oc0mUc4Z+e0V7fKFVe0WEdoaGY02Ec4Z+Y02EZYWBfH6HgU1+gY5+hIWUgW+XjJ57ebWRhFVScHuBfJ6PhBx7WqJzlM+Ujpd4gHZziX6HjHmEgZN+lJt5boiPe2GJgX+GjIGJgHZzeaxufnB5hF2JtdN7jJ57hp57hK6ElFVzg6ZzbmiEbndzhIWHe3uJfoFue3qRhJd2j3xoc65zlE1jc3p8lE1jhniEgXJ7e657vZaUc3qBh52BhIF4aHKDa9drgY5+c52GWqZzbpqJe8tjnM+UhIeMfo2BfGl+hG1zSmmMjKJjZVaGgX15c1lze0mEp4OHa3mUhIWHhDyclJ6MeYOJkXiPc0VzhFiMlKaEboSJa5Jze41re3qRhn+HZYWBe0mEc4p5fnORbox5lEp4hGFjhGGEjJuEc1WEhLZjeHeGa7KlfHx2hLaMeX1ugY5+hIWHhKGPjMN7c1WEho1zhoBzZYx7fnhzlJt5exyUhFFziXtzfmmMa6qMYyiEiXxweV12kZSMeWqXSl17fnhzxmmMrVGEe1mcc4p5eHeGjK6MgY5+doaGa6pzlGV7g1qBh4KHkXiPeW6OaKqafqZ2eXZ5e1V7jGd7boSJc3BzhJd2e0mcYot2h1RoY8dahK6EQmWEWjx7e1l2lL6UgXyBdnR4eU9zc0VreX1umqaBhld7fo2Bc6KEc5Z+hDyEcIeBWtNrfHyGe5qMhMuMe5qMhEGEbVVupcNzg3aHhIF4boeBe0mEdlptc39ofFl5Y8uUlJOGiYt2UmGEcyxjjGx4jFF7a657ZYWBnElzhp57iXtrgZN+tfOEhIOBjE2HgU1+e8tjjKNbiWCDhE15gUqBgYN7fnqGc66ce9d7iYSBj0qPcG6DnGGcT3eGa6qMZY+JlIiMl4hwc3aRdnqBlGV7eHJ2hLZjfnuRhDyEeX6MSk17g6Z+c6aUjHmEhIF4gXyBc76EZW18fGl+fkl+jCxrhoVwhDyUhIqGlL2DlI6EhJd2tdN7eYORhEGMa2Faa6pzc3Bzc4R5lIRznM+UY9eMhDycc5Z+c4p5c4iGY117pb6MgXuPrbJafnx2eYOJeXZ5e657hDyEcziElKZjfoB5eHeGj4WRhGGEe6KGeX1utTStc76EhFGJnCyMa5hzfH6HnNeceYB7hmN8gYuMhIVrczSMgYF8h3N7c5pza5hzjJqEYIRdgYuMlL2DeYRzhGGEeX1uhLaEc4iGeZ1zdl6JhrVteX6Me2iMfm5lWqJzSpqEa6pzdnmchHx2c6OMhNdrhoR5g3aHczxzeW52gV6Ejm15frGMc0Vzc4Z+l3drfniJe+9rWq5rlF1rhGGEhoVwe9OEfoh+e7pac09+c3qBY0lrhDycdnp2lJ6MiYOGhGCDc3aRlL2DlJt5doaGdnp2gYF8gWeOjF2Uc4R5c5Z+jEmMe7KEc4mEeYJ4dmyBe0mcgXiPbqJ7eYB7fmGGiYSJjICGlF1reZ2PnElzbpqJfH6Hc39oe4WEc5eJhK6EhqyJc3qBgZB8c09+hEmEaHKDhFGJc5SGiXWMUpaEa89zc6OMnCyMiXtrho+Be5qMc7KEjJ57dmN+hKGPjICGbmiEe7prdod+hGCDdnmchBx7eX6MkXZ2hGGEa657hm98jFFjY5JreYOJgY2EjHZ2a295Y3FajJ6Mc1J+YzB7e4WBjF2Uc4R5eV12gYxzg1qBeId+c9OUc5pzjFFjgY5+hFiMlIaPhoR5lIpjjIKBlNdSe7KEeX2BfrGMhIqGc65zjE2UhK6EklZ+QmWEeziMWqZza3VzdnR4foh+gYF8n3iJiZhrnKp7gYF8eId+lJ6Me1lrcIuGjKJjhmN8c66MjFF7a6prjJ6UnJ5zezyUfruRWlF7nI5zfHyGe657h4SEe8tjhBx7jFFjc09+c39ojICMeZeJeXt+YzRzjHZ2c0WEcIeBeXZ5onSXkVR+gYJ+eYFwdldzgYF7eX2BjJ6UiXuXlE1jh4SEe1mchLJjc4Z+hqZ7eXZ5bm1zlL6Ue5p7iWeGhKqUY5pzjKJjcIeBe8t7gXyBYIRdlEp4a3mGnK6EfmmMZpqEfFl5gYxzjKZuhGFjhoKGhHx2fnx2eXuMe3aBiWeGvbKMe6KGa5hzYzB7gZOBlGV7hmN8hqZlYot2Y117a6pzc6KEfId8foB5rctrfneJfJ6PcHN2hFiMc5pzjH92c0VzgY2EcElzdmCBlFVzg1GBc65zY4OBboeBcHiBeYJ4ewxzfHx5lIRzlEmEnLKEbk1zfJ6PhmN8eYBljBiEnMOEiXxwezyUcIeBe76EdsKEeX2BdnR4jGWUrXWMjGd7fkl+j4WRlEGMa5Jzho+BhDyEfnqMeXt+g3aHlE1jczClhNN7ZW18eHx8hGFjZW18iXWMjKJjhH57gYuMcIuGWjyMe4ZtjJuExmmMj4WRdntzi4GDhFFzYIRdnGGcjJp7Y0F7e4WEkbCGiX57fnSHa657a6prhBCMe3Z+SmmMjH92eHJ2hK6EY1FzexhrvbKMnI5za4OEfnd+eXuMhImBe897hLaMjN+EfG+BeIOBhF1+eZeJi4GDkXZ2eXKEgZ6Ejpd4c2GHa1V5e5KUfqZuhCx7jKp7lLZrg11+hHx2hFWUoot2nI5zgbh5mo9zvZaUe3qRbqKMfqZ2kbCGhFiM";

// node_modules/@arcgis/core/views/3d/webgl-engine/effects/ssao/SSAOParameters.js
var r4 = class extends c {
  constructor() {
    super(...arguments), this.projScale = 1;
  }
};
var t6 = class extends r4 {
  constructor() {
    super(...arguments), this.intensity = 1;
  }
};
var o7 = class extends c {
};
var c2 = class extends o7 {
  constructor() {
    super(...arguments), this.blurSize = n2();
  }
};

// node_modules/@arcgis/core/views/3d/webgl-engine/effects/ssao/SSAOTechnique.js
var t7 = class extends g3 {
  constructor(r5, s) {
    super(r5, s, new t2(g4, () => import("./SSAO.glsl-DVG5ZWR3.js")));
  }
  initializePipeline() {
    return B({ colorWrite: g2 });
  }
};

// node_modules/@arcgis/core/views/3d/webgl-engine/effects/ssao/SSAO.js
var O = 2;
var A = class extends u {
  constructor(e6) {
    super(e6), this.consumes = { required: ["normals"] }, this.produces = t3.SSAO, this.isEnabled = () => false, this._enableTime = n(0), this._passParameters = new t6(), this._drawParameters = new c2();
  }
  initialize() {
    const e6 = Uint8Array.from(atob(e5), (e7) => e7.charCodeAt(0)), r5 = new a3();
    r5.wrapMode = P.CLAMP_TO_EDGE, r5.pixelFormat = M.RGB, r5.wrapMode = P.REPEAT, r5.hasMipmap = true, r5.width = 32, r5.height = 32, this._passParameters.noiseTexture = new S(this.renderingContext, r5, e6), this.techniques.precompile(t7), this.techniques.precompile(l3), this.addHandles(l(() => this.isEnabled(), () => this._enableTime = n(0)));
  }
  destroy() {
    this._passParameters.noiseTexture = r2(this._passParameters.noiseTexture);
  }
  render(e6) {
    const s = e6.find(({ name: e7 }) => "normals" === e7), t9 = s?.getTexture(), o8 = s?.getTexture(g);
    if (!t9 || !o8) return;
    const a6 = this.techniques.get(t7), c3 = this.techniques.get(l3);
    if (!a6.compiled || !c3.compiled) return this._enableTime = n(performance.now()), void this.requestRender(a2.UPDATE);
    0 === this._enableTime && (this._enableTime = n(performance.now()));
    const d = this.renderingContext, f3 = this.view.qualitySettings.fadeDuration, b = this.bindParameters, P2 = b.camera, S2 = P2.relativeElevation, x = r3((o4 - S2) / (o4 - e2), 0, 1), q = f3 > 0 ? Math.min(f3, performance.now() - this._enableTime) / f3 : 1, A2 = q * x;
    this._passParameters.normalTexture = t9, this._passParameters.depthTexture = o8, this._passParameters.projScale = 1 / P2.computeScreenPixelSizeAtDist(1), this._passParameters.intensity = 4 * C / v(P2) ** 6 * A2;
    const R = P2.fullViewport[2], v3 = P2.fullViewport[3], y = this.fboCache.acquire(R, v3, "ssao input", o3.RG8UNORM);
    d.bindFramebuffer(y.fbo), d.setViewport(0, 0, R, v3), d.bindTechnique(a6, b, this._passParameters, this._drawParameters), d.screen.draw();
    const E = Math.round(R / O), M2 = Math.round(v3 / O), U = this.fboCache.acquire(E, M2, "ssao blur", o3.R8UNORM);
    d.bindFramebuffer(U.fbo), this._drawParameters.colorTexture = y.getTexture(), o(this._drawParameters.blurSize, 0, O / v3), d.bindTechnique(c3, b, this._passParameters, this._drawParameters), d.setViewport(0, 0, E, M2), d.screen.draw(), y.release();
    const V = this.fboCache.acquire(E, M2, t3.SSAO, o3.R8UNORM);
    return d.bindFramebuffer(V.fbo), d.setViewport(0, 0, R, v3), d.setClearColor(1, 1, 1, 0), d.clear(_.COLOR), this._drawParameters.colorTexture = U.getTexture(), o(this._drawParameters.blurSize, O / R, 0), d.bindTechnique(c3, b, this._passParameters, this._drawParameters), d.setViewport(0, 0, E, M2), d.screen.draw(), d.setViewport4fv(P2.fullViewport), U.release(), q < 1 && this.requestRender(a2.UPDATE), V;
  }
};
r([m()], A.prototype, "consumes", void 0), r([m()], A.prototype, "produces", void 0), r([m({ constructOnly: true })], A.prototype, "isEnabled", void 0), A = r([a("esri.views.3d.webgl-engine.effects.ssao.SSAO")], A);
var C = 0.5;

// node_modules/@arcgis/core/views/3d/webgl-engine/core/shaderLibrary/shading/EvaluateAmbientOcclusion.glsl.js
function t8(t9, o8) {
  o8.receiveAmbientOcclusion ? (t9.uniforms.add(new o2("ssaoTex", (e6) => e6.ssao?.getTexture())), t9.constants.add("blurSizePixelsInverse", "float", 1 / O), t9.code.add(n3`float evaluateAmbientOcclusionInverse() {
vec2 ssaoTextureSizeInverse = 1.0 / vec2(textureSize(ssaoTex, 0));
return texture(ssaoTex, gl_FragCoord.xy * blurSizePixelsInverse * ssaoTextureSizeInverse).r;
}
float evaluateAmbientOcclusion() {
return 1.0 - evaluateAmbientOcclusionInverse();
}`)) : t9.code.add(n3`float evaluateAmbientOcclusionInverse() { return 1.0; }
float evaluateAmbientOcclusion() { return 0.0; }`);
}

// node_modules/@arcgis/core/views/3d/webgl-engine/shaders/BlackLevelLightSoftCompression.glsl.js
function a5(a6) {
  a6.code.add(n3`float mapChannel(float x, vec2 p) {
return (x < p.x) ? mix(0.0, p.y, x/p.x) : mix(p.y, 1.0, (x - p.x) / (1.0 - p.x) );
}`), a6.code.add(n3`vec3 blackLevelSoftCompression(vec3 color, float averageAmbientRadiance) {
vec2 p = vec2(0.02, 0.0075) * averageAmbientRadiance;
return vec3(mapChannel(color.x, p), mapChannel(color.y, p), mapChannel(color.z, p));
}`);
}

// node_modules/@arcgis/core/views/3d/webgl-engine/core/shaderLibrary/shading/EvaluateSceneLighting.glsl.js
function v2(i) {
  i.constants.add("ambientBoostFactor", "float", l2);
}
function f2(i) {
  i.uniforms.add(new e("lightingGlobalFactor", (i2) => i2.lighting.globalFactor));
}
function L(h, L2) {
  const b = h.fragment, { pbrMode: C2, spherical: N, hasColorTexture: R } = L2;
  b.include(t8, L2), C2 !== n5.Disabled && b.include(n6, L2), h.include(m2, L2), b.include(t5), b.include(o6, L2);
  const D = !(C2 === n5.Schematic && !R);
  switch (D && b.include(a5), b.code.add(n3`
    const float GAMMA_SRGB = ${n3.float(p)};
    const float INV_GAMMA_SRGB = 0.4761904;
    ${t(C2 !== n5.Disabled, "const float GROUND_REFLECTANCE = 0.2;")}
  `), v2(b), f2(b), t4(b), b.code.add(n3`
    float additionalDirectedAmbientLight(vec3 vPosWorld) {
      float vndl = dot(${N ? n3`normalize(vPosWorld)` : n3`vec3(0.0, 0.0, 1.0)`}, mainLightDirection);
      return smoothstep(0.0, 1.0, clamp(vndl * 2.5, 0.0, 1.0));
    }
  `), a4(b), b.code.add(n3`vec3 evaluateAdditionalLighting(float ambientOcclusion, vec3 vPosWorld) {
float additionalAmbientScale = additionalDirectedAmbientLight(vPosWorld);
return (1.0 - ambientOcclusion) * additionalAmbientScale * ambientBoostFactor * lightingGlobalFactor * mainLightIntensity;
}`), C2) {
    case n5.Disabled:
    case n5.WaterOnIntegratedMesh:
    case n5.Water:
      h.include(o5), b.code.add(n3`vec3 evaluateSceneLighting(vec3 normalWorld, vec3 albedo, float shadow, float ssao, vec3 additionalLight) {
vec3 mainLighting = applyShading(normalWorld, shadow);
vec3 ambientLighting = calculateAmbientIrradiance(normalWorld, ssao);
vec3 albedoLinear = pow(albedo, vec3(GAMMA_SRGB));
vec3 totalLight = mainLighting + ambientLighting + additionalLight;
totalLight = min(totalLight, vec3(PI));
vec3 outColor = vec3((albedoLinear / PI) * totalLight);
return pow(outColor, vec3(INV_GAMMA_SRGB));
}`);
      break;
    case n5.Normal:
    case n5.Schematic:
      b.code.add(n3`const float fillLightIntensity = 0.25;
const float horizonLightDiffusion = 0.4;
const float additionalAmbientIrradianceFactor = 0.02;
vec3 evaluateSceneLightingPBR(vec3 normal, vec3 albedo, float shadow, float ssao, vec3 additionalLight,
vec3 viewDir, vec3 groundNormal, vec3 mrr, vec4 _emission,
float additionalAmbientIrradiance) {
vec3 viewDirection = -viewDir;
vec3 h = normalize(viewDirection + mainLightDirection);
PBRShadingInfo inputs;
inputs.NdotV = clamp(abs(dot(normal, viewDirection)), 0.001, 1.0);
inputs.NdotNG = clamp(dot(normal, groundNormal), -1.0, 1.0);
vec3 reflectedView = normalize(reflect(viewDirection, normal));
inputs.RdotNG = clamp(dot(reflectedView, groundNormal), -1.0, 1.0);
inputs.albedoLinear = pow(albedo, vec3(GAMMA_SRGB));
inputs.ssao = ssao;
inputs.metalness = mrr[0];
inputs.roughness = clamp(mrr[1] * mrr[1], 0.001, 0.99);`), b.code.add(n3`inputs.f0 = (0.16 * mrr[2] * mrr[2]) * (1.0 - inputs.metalness) + inputs.albedoLinear * inputs.metalness;
inputs.f90 = vec3(clamp(dot(inputs.f0, vec3(50.0 * 0.33)), 0.0, 1.0));
inputs.diffuseColor = inputs.albedoLinear * (vec3(1.0) - inputs.f0) * (1.0 - inputs.metalness);`), L2.useFillLights ? b.uniforms.add(new e3("hasFillLights", (i) => i.enableFillLights)) : b.constants.add("hasFillLights", "bool", false), b.code.add(n3`vec3 ambientDir = vec3(5.0 * groundNormal[1] - groundNormal[0] * groundNormal[2], - 5.0 * groundNormal[0] - groundNormal[2] * groundNormal[1], groundNormal[1] * groundNormal[1] + groundNormal[0] * groundNormal[0]);
ambientDir = ambientDir != vec3(0.0) ? normalize(ambientDir) : normalize(vec3(5.0, -1.0, 0.0));
inputs.NdotAmbDir = hasFillLights ? abs(dot(normal, ambientDir)) : 1.0;
float NdotL = clamp(dot(normal, mainLightDirection), 0.001, 1.0);
vec3 mainLightIrradianceComponent = NdotL * (1.0 - shadow) * mainLightIntensity;
vec3 fillLightsIrradianceComponent = inputs.NdotAmbDir * mainLightIntensity * fillLightIntensity;
vec3 ambientLightIrradianceComponent = calculateAmbientIrradiance(normal, ssao) + additionalLight;
inputs.skyIrradianceToSurface = ambientLightIrradianceComponent + mainLightIrradianceComponent + fillLightsIrradianceComponent ;
inputs.groundIrradianceToSurface = GROUND_REFLECTANCE * ambientLightIrradianceComponent + mainLightIrradianceComponent + fillLightsIrradianceComponent ;`), b.uniforms.add(new e("lightingSpecularStrength", (i) => i.lighting.mainLight.specularStrength), new e("lightingEnvironmentStrength", (i) => i.lighting.mainLight.environmentStrength)).code.add(n3`vec3 horizonRingDir = inputs.RdotNG * groundNormal - reflectedView;
vec3 horizonRingH = normalize(viewDirection + horizonRingDir);
inputs.NdotH_Horizon = dot(normal, horizonRingH);
float NdotH = clamp(dot(normal, h), 0.0, 1.0);
vec3 mainLightRadianceComponent = lightingSpecularStrength * normalDistribution(NdotH, inputs.roughness) * mainLightIntensity * (1.0 - shadow);
vec3 horizonLightRadianceComponent = lightingEnvironmentStrength * normalDistribution(inputs.NdotH_Horizon, min(inputs.roughness + horizonLightDiffusion, 1.0)) * mainLightIntensity * fillLightIntensity;
vec3 ambientLightRadianceComponent = lightingEnvironmentStrength * calculateAmbientRadiance(ssao) + additionalLight;
float normalDirectionModifier = mix(1., min(mix(0.1, 2.0, (inputs.NdotNG + 1.) * 0.5), 1.0), clamp(inputs.roughness * 5.0, 0.0 , 1.0));
inputs.skyRadianceToSurface = (ambientLightRadianceComponent + horizonLightRadianceComponent) * normalDirectionModifier + mainLightRadianceComponent;
inputs.groundRadianceToSurface = 0.5 * GROUND_REFLECTANCE * (ambientLightRadianceComponent + horizonLightRadianceComponent) * normalDirectionModifier + mainLightRadianceComponent;
inputs.averageAmbientRadiance = ambientLightIrradianceComponent[1] * (1.0 + GROUND_REFLECTANCE);`), b.code.add(n3`
        vec3 reflectedColorComponent = evaluateEnvironmentIllumination(inputs);
        vec3 additionalMaterialReflectanceComponent = inputs.albedoLinear * additionalAmbientIrradiance;
        vec3 emissionComponent = _emission.rgb == vec3(0.0) ? _emission.rgb : tonemapACES(pow(_emission.rgb, vec3(GAMMA_SRGB)));
        vec3 outColorLinear = reflectedColorComponent + additionalMaterialReflectanceComponent + emissionComponent;
        ${D ? n3`vec3 outColor = pow(blackLevelSoftCompression(outColorLinear, inputs.averageAmbientRadiance), vec3(INV_GAMMA_SRGB));` : n3`vec3 outColor = pow(max(vec3(0.0), outColorLinear - 0.005 * inputs.averageAmbientRadiance), vec3(INV_GAMMA_SRGB));`}
        return outColor;
      }
    `);
      break;
    case n5.Simplified:
    case n5.TerrainWithWater:
      t4(b), a4(b), b.code.add(n3`const float roughnessTerrain = 0.5;
const float specularityTerrain = 0.5;
const vec3 fresnelReflectionTerrain = vec3(0.04);
vec3 evaluatePBRSimplifiedLighting(vec3 n, vec3 c, float shadow, float ssao, vec3 al, vec3 vd, vec3 nup) {
vec3 viewDirection = -vd;
vec3 h = normalize(viewDirection + mainLightDirection);
float NdotL = clamp(dot(n, mainLightDirection), 0.001, 1.0);
float NdotV = clamp(abs(dot(n, viewDirection)), 0.001, 1.0);
float NdotH = clamp(dot(n, h), 0.0, 1.0);
float NdotNG = clamp(dot(n, nup), -1.0, 1.0);
vec3 albedoLinear = pow(c, vec3(GAMMA_SRGB));
float lightness = 0.3 * albedoLinear[0] + 0.5 * albedoLinear[1] + 0.2 * albedoLinear[2];
vec3 f0 = (0.85 * lightness + 0.15) * fresnelReflectionTerrain;
vec3 f90 =  vec3(clamp(dot(f0, vec3(50.0 * 0.33)), 0.0, 1.0));
vec3 mainLightIrradianceComponent = (1. - shadow) * NdotL * mainLightIntensity;
vec3 ambientLightIrradianceComponent = calculateAmbientIrradiance(n, ssao) + al;
vec3 ambientSky = ambientLightIrradianceComponent + mainLightIrradianceComponent;
vec3 indirectDiffuse = ((1.0 - NdotNG) * mainLightIrradianceComponent + (1.0 + NdotNG ) * ambientSky) * 0.5;
vec3 outDiffColor = albedoLinear * (1.0 - f0) * indirectDiffuse / PI;
vec3 mainLightRadianceComponent = normalDistribution(NdotH, roughnessTerrain) * mainLightIntensity;
vec2 dfg = prefilteredDFGAnalytical(roughnessTerrain, NdotV);
vec3 specularColor = f0 * dfg.x + f90 * dfg.y;
vec3 specularComponent = specularityTerrain * specularColor * mainLightRadianceComponent;
vec3 outColorLinear = outDiffColor + specularComponent;
vec3 outColor = pow(outColorLinear, vec3(INV_GAMMA_SRGB));
return outColor;
}`);
    default:
    case n5.COUNT:
  }
}

export {
  e4 as e,
  t8 as t,
  v2 as v,
  f2 as f,
  L
};
//# sourceMappingURL=chunk-EMBDDCJP.js.map
