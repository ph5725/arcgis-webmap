import {
  s
} from "./chunk-XZOH57EG.js";
import {
  G,
  _,
  r
} from "./chunk-ZX46THLM.js";

// node_modules/@arcgis/core/geometry/operators/gx/operatorProject.js
var o;
function u() {
  return !!o && r();
}
async function i() {
  if (!u()) {
    const [n2, e] = await Promise.all([import("./ProjectionTransformation-C52QHNIF.js").then((n3) => n3.aH), import("./ProjectionTransformation-C52QHNIF.js").then((n3) => n3.aG).then(({ injectPe: n3 }) => n3), _()]);
    o = new n2.OperatorProject(), e(G);
  }
}
function a(n2, r2) {
  return o.execute(n2, r2, null);
}
function s2(r2, t) {
  const e = o.executeMany(new s(r2), t, null);
  return Array.from(e);
}
function p() {
  return o.supportsCurves();
}

// node_modules/@arcgis/core/geometry/operators/projectOperator.js
var n;
var s3;
var c;
var i2;
var m;
var f;
var p2;
var u2;
var h;
var l;
var x;
var j;
function T() {
  return !!s3 && u();
}
async function d() {
  if (!T()) {
    const [t, o2, a2, T2] = await Promise.all([import("./apiConverter-OEQWXNM7.js"), import("./ProjectionTransformation-C52QHNIF.js").then((e) => e.aI).then(({ CompositeGeographicTransformationEditor: e }) => e), import("./ProjectionTransformation-C52QHNIF.js").then((e) => e.aJ).then(({ create: e, createFromWKT: t2 }) => ({ create: e, createFromWKT: t2 })), import("./ProjectionTransformation-C52QHNIF.js").then((e) => e.aK).then(({ create: e, createEx: t2, createFromAoi: r2 }) => ({ create: e, createEx: t2, createFromAoi: r2 })), i()]);
    n = t.fromExtent, s3 = t.fromGeometry, c = t.fromSpatialReference, i2 = t.getSpatialReference, m = t.toGeometry, f = o2, p2 = a2.create, u2 = a2.createFromWKT, h = T2.createEx, l = T2.createFromAoi, x = T2.create, j = p();
  }
}
function E(e, t, r2 = {}) {
  const a2 = k(i2(e), t, r2);
  return m(a(s3(e), a2), t);
}
function g(e, t, r2 = {}) {
  const o2 = e.map(s3), n2 = k(i2(e), t, r2);
  return s2(o2, n2).map((e2) => m(e2, t));
}
function k(e, t, r2 = {}) {
  let o2;
  const a2 = c(e), s4 = c(t);
  if (r2?.geographicTransformation) {
    const e2 = new f();
    e2.setInputSpatialReference(a2), e2.setOutputSpatialReference(s4);
    for (const t2 of r2.geographicTransformation.steps) {
      let r3;
      r3 = t2.wkid ? p2(t2.wkid, t2.isInverse) : u2(t2.wkt, t2.isInverse), e2.add(r3);
    }
    o2 = e2.create();
  } else if (r2?.areaOfInterestExtent) return l(a2, s4, n(r2.areaOfInterestExtent).asEnvelope2D());
  return o2 ? h(a2, s4, o2) : x(a2, s4);
}

export {
  j,
  T,
  d,
  E,
  g
};
//# sourceMappingURL=chunk-EOP2TXCS.js.map
