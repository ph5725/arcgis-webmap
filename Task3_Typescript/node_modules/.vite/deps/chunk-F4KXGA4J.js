import {
  C
} from "./chunk-6PV45IYU.js";
import {
  p
} from "./chunk-SRQCQD63.js";
import {
  z
} from "./chunk-O5TPFXRT.js";
import {
  o
} from "./chunk-JUAPMINU.js";
import {
  s as s2
} from "./chunk-KTUX3OKX.js";
import {
  l as l2
} from "./chunk-E3KEUGUG.js";
import {
  b,
  m as m2
} from "./chunk-N3XLUQJI.js";
import {
  a2
} from "./chunk-JUAD7TJ6.js";
import {
  m
} from "./chunk-VHLUKPRH.js";
import {
  r
} from "./chunk-5TPMG26T.js";
import {
  n
} from "./chunk-VOLWOTEG.js";
import {
  R
} from "./chunk-ZWFY3WY5.js";
import {
  G,
  Y,
  _,
  tt
} from "./chunk-LQFTAGIV.js";
import {
  i2 as i,
  s
} from "./chunk-XWG6QGFK.js";
import {
  a,
  l
} from "./chunk-GWNLQRNM.js";

// node_modules/@arcgis/core/portal/PortalItemResource.js
var c = class extends b {
  constructor(t) {
    super(t), this.portalItem = null;
  }
  normalizeCtorArgs(t) {
    return t?.portalItem && t.path ? { ...t, path: n2(t.path, t.portalItem) } : t;
  }
  set path(t) {
    null != t && Y(t) ? i.getLogger(this).error("portalitemresource:invalid-path", "A portal item resource path must be relative") : this._set("path", t);
  }
  _castPath(t) {
    return n2(t, this.portalItem);
  }
  get url() {
    return this.portalItem && this.path ? `${this.portalItem.itemUrl}/resources/${this.path}` : null;
  }
  get cdnUrl() {
    return this.portalItem && this.path ? `${this.portalItem.itemCdnUrl}/resources/${this.path}` : null;
  }
  get itemRelativeUrl() {
    return this.portalItem && this.path ? `./resources/${this.path}` : null;
  }
  fetch(t = "json", r2) {
    const o2 = this.cdnUrl;
    if (null == o2) throw new s("portal-item-resource:fetch", "Portal item resource does not refer to a valid item or path");
    return this.portalItem.portal.request(o2, { responseType: t, query: { token: this.portalItem.apiKey, _ts: r2?.cacheBust ? Date.now() : null }, signal: r2?.signal });
  }
  async update(t, r2) {
    const { addOrUpdateResources: e2 } = await import("./resourceUtils-UUQZMPLE.js");
    return await e2(this.portalItem, [{ resource: this, content: t, compress: r2?.compress, access: r2?.access }], "update", r2), this;
  }
  hasPath() {
    return null != this.path;
  }
};
function n2(t, r2) {
  return null == t ? t : (t = t.replace(/^\/+/, ""), null != r2 && Y(t) && (t = G(t, r2.itemUrl)), t?.replace(/^\/+/, "").replace(/^(\.\/)?resources\//, ""));
}
r([m2()], c.prototype, "portalItem", void 0), r([m2({ type: String, value: null })], c.prototype, "path", null), r([s2("path")], c.prototype, "_castPath", null), r([m2({ type: String, readOnly: true })], c.prototype, "url", null), r([m2({ type: String, readOnly: true })], c.prototype, "cdnUrl", null), r([m2({ type: String, readOnly: true })], c.prototype, "itemRelativeUrl", null), c = r([a2("esri.portal.PortalItemResource")], c);

// node_modules/@arcgis/core/portal/PortalRating.js
var e = class extends b {
  constructor(r2) {
    super(r2), this.created = null, this.rating = null;
  }
};
r([m2({ type: Date })], e.prototype, "created", void 0), r([m2()], e.prototype, "rating", void 0), e = r([a2("esri.portal.PortalRating")], e);

// node_modules/@arcgis/core/portal/PortalItem.js
var v;
var f = /* @__PURE__ */ new Set(["3DTiles Service", "CSV", "Feature Collection", "Feature Service", "Feed", "GeoJson", "Group Layer", "Image Service", "KML", "Knowledge Graph Layer", "Map Service", "Media Layer", "Scene Service", "Stream Service", "Video Service", "Vector Tile Service", "WCS", "WFS", "WMS", "WMTS"]);
var b2 = /* @__PURE__ */ new Set(["KML", "GeoJson", "CSV"]);
var k = v = class extends l2.JSONSupportMixin(p) {
  static from(e2) {
    return m(v, e2);
  }
  constructor(e2) {
    super(e2), this.access = null, this.accessInformation = null, this.apiKey = null, this.applicationProxies = null, this.avgRating = null, this.categories = null, this.classification = null, this.created = null, this.culture = null, this.description = null, this.extent = null, this.groupCategories = null, this.id = null, this.isOrgItem = false, this.itemControl = null, this.licenseInfo = null, this.modified = null, this.name = null, this.numComments = null, this.numRatings = null, this.numViews = null, this.owner = null, this.ownerFolder = null, this.portal = null, this.screenshots = null, this.size = null, this.snippet = null, this.sourceJSON = null, this.sourceUrl = null, this.spatialReference = null, this.tags = null, this.title = null, this.type = null, this.typeKeywords = null, this.url = null;
  }
  destroy() {
    this.portal = null;
  }
  get displayName() {
    const e2 = this.type, t = this.typeKeywords || [];
    let i2 = e2;
    return "Feature Service" === e2 || "Feature Collection" === e2 ? i2 = t.includes("Table") ? "Table" : t.includes("Route Layer") ? "Route Layer" : t.includes("Markup") ? "Markup" : "Feature Layer" : "Image Service" === e2 ? i2 = t.includes("Elevation 3D Layer") ? "Elevation Layer" : t.includes("Tiled Imagery") ? "Tiled Imagery Layer" : "Imagery Layer" : "Scene Service" === e2 ? i2 = "Scene Layer" : "Video Service" === e2 ? i2 = "Video Layer" : "Scene Package" === e2 ? i2 = "Scene Layer Package" : "Stream Service" === e2 ? i2 = "Feature Layer" : "Geoprocessing Service" === e2 ? i2 = t.includes("Web Tool") ? "Tool" : "Geoprocessing Service" : "Geoenrichment Service" === e2 ? i2 = "GeoEnrichment Service" : "Geocoding Service" === e2 ? i2 = "Locator" : "Microsoft Powerpoint" === e2 ? i2 = "Microsoft PowerPoint" : "GeoJson" === e2 ? i2 = "GeoJSON" : "Globe Service" === e2 ? i2 = "Globe Layer" : "Vector Tile Service" === e2 ? i2 = "Tile Layer" : "netCDF" === e2 ? i2 = "NetCDF" : "Map Service" === e2 ? i2 = t.includes("Spatiotemporal") || !t.includes("Hosted Service") && !t.includes("Tiled") || t.includes("Relational") ? "Map Image Layer" : "Tile Layer" : e2?.toLowerCase().includes("add in") ? i2 = e2.replaceAll(/(add in)/gi, "Add-In") : "datastore catalog service" === e2 ? i2 = "Big Data File Share" : "Compact Tile Package" === e2 ? i2 = "Tile Package (tpkx)" : "Raster function template" === e2 ? i2 = "Raster Function Template" : "OGCFeatureServer" === e2 ? i2 = "OGC Feature Layer" : "web mapping application" === e2 && t.includes("configurableApp") ? i2 = "Instant App" : "Insights Page" === e2 ? i2 = "Insights Report" : "Excalibur Imagery Project" === e2 ? i2 = "Excalibur Project" : "3DTiles Service" === e2 ? i2 = "3D tiles layer" : "3DTiles Package" === e2 && (i2 = "3D tiles package"), i2;
  }
  readExtent(e2) {
    return e2 && e2.length ? new z(e2[0][0], e2[0][1], e2[1][0], e2[1][1]) : null;
  }
  get iconUrl() {
    const e2 = this.type?.toLowerCase() || "", i2 = this.typeKeywords || [], r2 = "esri/images/portal/", o2 = "16";
    let s3, a3 = false, n3 = false, l3 = false, p2 = false, c2 = false, d = false, u = false, m3 = false;
    return e2.indexOf("service") > 0 || "feature collection" === e2 || "kml" === e2 || "wms" === e2 || "wmts" === e2 || "wfs" === e2 ? (a3 = i2.includes("Hosted Service"), "feature service" === e2 || "feature collection" === e2 || "kml" === e2 || "wfs" === e2 ? (n3 = i2.includes("Table"), l3 = i2.includes("Route Layer"), p2 = i2.includes("Markup"), c2 = i2.includes("Spatiotemporal"), d = i2.includes("UtilityNetwork"), s3 = c2 && n3 ? "spatiotemporaltable" : n3 ? "table" : l3 ? "routelayer" : p2 ? "markup" : c2 ? "spatiotemporal" : d ? "utilitynetwork" : a3 ? "featureshosted" : "features") : "map service" === e2 || "wms" === e2 || "wmts" === e2 ? (c2 = i2.includes("Spatiotemporal"), u = i2.includes("Relational"), s3 = c2 || u ? "mapimages" : a3 || i2.includes("Tiled") || "wmts" === e2 ? "maptiles" : "mapimages") : s3 = "scene service" === e2 ? i2.includes("Line") ? "sceneweblayerline" : i2.includes("3DObject") ? "sceneweblayermultipatch" : i2.includes("Point") ? "sceneweblayerpoint" : i2.includes("IntegratedMesh") ? "sceneweblayermesh" : i2.includes("PointCloud") ? "sceneweblayerpointcloud" : i2.includes("Polygon") ? "sceneweblayerpolygon" : i2.includes("Building") ? "sceneweblayerbuilding" : i2.includes("Voxel") ? "sceneweblayervoxel" : "sceneweblayer" : "image service" === e2 ? i2.includes("Elevation 3D Layer") ? "elevationlayer" : i2.includes("Tiled Imagery") ? "tiledimagerylayer" : "imagery" : "stream service" === e2 ? "streamlayer" : "vector tile service" === e2 ? "vectortile" : "datastore catalog service" === e2 ? "datastorecollection" : "geocoding service" === e2 ? "geocodeservice" : "video service" === e2 ? i2.includes("Live Stream") ? "livestreamvideolayer" : "videolayer" : "geoprocessing service" === e2 ? i2.includes("Web Tool") ? "tool" : "layers" : "geodata service" === e2 ? "geodataservice" : "3dtiles service" === e2 ? i2.includes("3DObject") ? "3dobjecttileslayer" : i2.includes("IntegratedMesh") ? "integratedmeshtileslayer" : "3dtileslayer" : "layers") : "web map" === e2 || "cityengine web scene" === e2 ? s3 = "maps" : "web scene" === e2 ? s3 = i2.includes("ViewingMode-Local") ? "webscenelocal" : "websceneglobal" : "web mapping application" === e2 && i2.includes("configurableApp") ? s3 = "instantapps" : "web mapping application" === e2 || "mobile application" === e2 || "application" === e2 || "operation view" === e2 || "desktop application" === e2 ? s3 = "apps" : "map document" === e2 || "map package" === e2 || "published map" === e2 || "scene document" === e2 || "globe document" === e2 || "basemap package" === e2 || "mobile basemap package" === e2 || "mobile map package" === e2 || "project package" === e2 || "project template" === e2 || "pro map" === e2 || "layout" === e2 || "layer" === e2 && i2.includes("ArcGIS Pro") || "explorer map" === e2 && i2.indexOf("Explorer Document") ? s3 = "mapsgray" : "service definition" === e2 || "shapefile" === e2 || "cad drawing" === e2 || "geojson" === e2 || "netcdf" === e2 || "administrative report" === e2 ? s3 = "datafiles" : "360 vr experience" === e2 ? s3 = "360vr" : "explorer add in" === e2 || "desktop add in" === e2 || "windows viewer add in" === e2 || "windows viewer configuration" === e2 ? s3 = "appsgray" : "arcgis pro add in" === e2 || "arcgis pro configuration" === e2 ? s3 = "addindesktop" : "pdf" === e2 ? s3 = "pdf" : "microsoft word" === e2 ? s3 = "word" : "microsoft excel" === e2 ? s3 = "excel" : "microsoft powerpoint" === e2 ? s3 = "ppt" : "rule package" === e2 || "file geodatabase" === e2 || "sqlite geodatabase" === e2 || "csv collection" === e2 || "kml collection" === e2 || "windows mobile package" === e2 || "map template" === e2 || "desktop application template" === e2 || "gml" === e2 || "arcpad package" === e2 || "code sample" === e2 || "document link" === e2 || "earth configuration" === e2 || "operations dashboard add in" === e2 || "rules package" === e2 || "workflow manager package" === e2 || "explorer map" === e2 && i2.includes("Explorer Mapping Application") || i2.includes("Document") ? s3 = "datafilesgray" : "network analysis service" === e2 || "geoprocessing service" === e2 || "geodata service" === e2 || "geometry service" === e2 || "geoprocessing package" === e2 || "locator package" === e2 || "geoprocessing sample" === e2 || "workflow manager service" === e2 ? s3 = "toolsgray" : "layer" === e2 || "layer package" === e2 || "explorer layer" === e2 ? s3 = "layersgray" : "analysis model" === e2 ? s3 = "analysismodel" : "scene package" === e2 ? s3 = "scenepackage" : "3dtiles package" === e2 ? s3 = "3dtileslayerpackage" : "3dtiles service" === e2 ? s3 = "3dtileslayer" : "mobile scene package" === e2 ? s3 = "mobilescenepackage" : "tile package" === e2 || "compact tile package" === e2 ? s3 = "tilepackage" : "task file" === e2 ? s3 = "taskfile" : "report template" === e2 ? s3 = "report-template" : "statistical data collection" === e2 ? s3 = "statisticaldatacollection" : "insights workbook" === e2 ? s3 = "workbook" : "insights model" === e2 ? s3 = "insightsmodel" : "insights page" === e2 ? s3 = "insightspage" : "insights theme" === e2 ? s3 = "insightstheme" : "hub initiative" === e2 ? s3 = "hubinitiative" : "hub page" === e2 ? s3 = "hubpage" : "hub site application" === e2 ? s3 = "hubsite" : "hub event" === e2 ? s3 = "hubevent" : "hub project" === e2 ? s3 = "hubproject" : "relational database connection" === e2 ? s3 = "relationaldatabaseconnection" : "big data file share" === e2 ? s3 = "datastorecollection" : "image collection" === e2 ? s3 = "imagecollection" : "desktop style" === e2 ? s3 = "desktopstyle" : "style" === e2 ? s3 = i2.includes("Dictionary") ? "dictionarystyle" : "style" : "dashboard" === e2 ? s3 = "dashboard" : "raster function template" === e2 ? s3 = "rasterprocessingtemplate" : "vector tile package" === e2 ? s3 = "vectortilepackage" : "ortho mapping project" === e2 ? s3 = "orthomappingproject" : "ortho mapping template" === e2 ? s3 = "orthomappingtemplate" : "solution" === e2 ? s3 = "solutions" : "geopackage" === e2 ? s3 = "geopackage" : "deep learning package" === e2 ? s3 = "deeplearningpackage" : "real time analytic" === e2 ? s3 = "realtimeanalytics" : "reality mapping project" === e2 ? s3 = "realitymappingproject" : "big data analytic" === e2 ? s3 = "bigdataanalytics" : "feed" === e2 ? s3 = "feed" : "excalibur imagery project" === e2 ? s3 = "excaliburimageryproject" : "notebook" === e2 ? s3 = "notebook" : "storymap" === e2 ? s3 = "storymap" : "survey123 add in" === e2 ? s3 = "survey123addin" : "mission" === e2 ? s3 = "mission" : "mission report" === e2 ? s3 = "missionreport" : "mission template" === e2 ? s3 = "missiontemplate" : "quickcapture project" === e2 ? s3 = "quickcaptureproject" : "pro report" === e2 ? s3 = "proreport" : "pro report template" === e2 ? s3 = "proreporttemplate" : "urban model" === e2 ? s3 = "urbanmodel" : "urban project" === e2 ? s3 = "urbanproject" : "web experience" === e2 ? s3 = "experiencebuilder" : "web experience template" === e2 ? s3 = "webexperiencetemplate" : "experience builder widget" === e2 ? s3 = "experiencebuilderwidget" : "experience builder widget package" === e2 ? s3 = "experiencebuilderwidgetpackage" : "workflow" === e2 ? s3 = "workflow" : "kernel gateway connection" === e2 ? s3 = "kernelgatewayconnection" : "insights script" === e2 ? s3 = "insightsscript" : "hub initiative template" === e2 ? s3 = "hubinitiativetemplate" : "storymap theme" === e2 ? s3 = "storymaptheme" : "knowledge graph" === e2 ? s3 = "knowledgegraph" : "knowledge graph layer" === e2 ? s3 = "knowledgegraphlayer" : "knowledge studio project" === e2 ? s3 = "knowledgestudio" : "native application" === e2 ? s3 = "nativeapp" : "native application installer" === e2 ? s3 = "nativeappinstaller" : "web link chart" === e2 ? s3 = "linkchart" : "knowledge graph web investigation" === e2 ? s3 = "investigation" : "ogcfeatureserver" === e2 ? s3 = "features" : "pro presentation" === e2 ? s3 = "propresentation" : "pro project" === e2 ? s3 = "proproject" : "insights workbook package" === e2 ? s3 = "insightsworkbookpackage" : "apache parquet" === e2 ? s3 = "apacheparquet" : "notebook code snippet library" === e2 ? s3 = "notebookcodesnippets" : "suitability model" === e2 ? s3 = "suitabilitymodel" : "esri classifier definition" === e2 ? s3 = "classifierdefinition" : "esri classification schema" === e2 ? s3 = "classificationschema" : "insights data engineering workbook" === e2 ? s3 = "dataengineeringworkbook" : "insights data engineering model" === e2 ? s3 = "dataengineeringmodel" : "deep learning studio project" === e2 ? s3 = "deeplearningproject" : "discussion" === e2 ? s3 = "discussion" : "allsource project" === e2 ? s3 = "allsourceproject" : "api key" === e2 ? s3 = "apikey" : "data pipeline" === e2 ? s3 = "datapipelines" : "group layer" === e2 ? (m3 = i2.includes("Map"), s3 = m3 ? "layergroup2d" : "layergroup") : s3 = "media layer" === e2 ? "onlinemedialayer" : "form" === e2 ? i2.includes("Survey123") ? "survey" : "datafilesgray" : "csv" === e2 ? "csv" : "image" === e2 ? "image" : "maps", s3 ? n(r2 + s3 + o2 + ".png") : null;
  }
  get isLayer() {
    return null != this.type && f.has(this.type);
  }
  get itemCdnUrl() {
    return R(this.itemUrl);
  }
  get itemPageUrl() {
    const e2 = this.portal?.itemPageUrl;
    return e2 && this.id ? `${e2}?id=${this.id}` : null;
  }
  get itemUrl() {
    const e2 = this.portal?.restUrl;
    return e2 && this.id ? `${e2}/content/items/${this.id}` : null;
  }
  get thumbnailUrl() {
    const e2 = this.itemUrl, t = this.thumbnail;
    return e2 && t ? this.portal?.normalizeUrl(`${e2}/info/${t}?f=json`) ?? null : null;
  }
  get userItemUrl() {
    const e2 = this.portal?.restUrl;
    if (!e2) return null;
    const t = this.owner || this.portal?.user?.id;
    if (!t) return null;
    return `${e2}/content/users/${this.ownerFolder ? `${t}/${this.ownerFolder}` : t}/items/${this.id}`;
  }
  load(e2) {
    const t = this.portal ?? (this.portal = C.getDefault()), i2 = t.load(e2).then(() => this.sourceJSON ? this.sourceJSON : this.id && this.itemUrl ? t.request(this.itemUrl, { signal: null != e2 ? e2.signal : null, query: { token: this.apiKey } }) : {}).then((e3) => {
      this.sourceJSON = e3, this.read(e3);
    });
    return this.addResolvingPromise(i2), Promise.resolve(this);
  }
  async addRating(e2) {
    const t = { method: "post", query: {} }, i2 = e2 instanceof e ? e2.rating : e2;
    return null == i2 || isNaN(i2) || "number" != typeof e2 || (t.query.rating = i2), this.portal ? (await this.portal.request(this.itemUrl + "/addRating", t), new e({ rating: i2, created: /* @__PURE__ */ new Date() })) : null;
  }
  clone() {
    const e2 = { access: this.access, accessInformation: this.accessInformation, applicationProxies: a(this.applicationProxies), avgRating: this.avgRating, categories: a(this.categories), classification: a(this.classification), created: a(this.created), culture: this.culture, description: this.description, extent: a(this.extent), groupCategories: a(this.groupCategories), id: this.id, itemControl: this.itemControl, licenseInfo: this.licenseInfo, modified: a(this.modified), name: this.name, numComments: this.numComments, numRatings: this.numRatings, numViews: this.numViews, owner: this.owner, ownerFolder: this.ownerFolder, portal: this.portal, screenshots: a(this.screenshots), size: this.size, snippet: this.snippet, sourceUrl: this.sourceUrl, spatialReference: this.spatialReference, tags: a(this.tags), thumbnail: this.thumbnail, title: this.title, type: this.type, typeKeywords: a(this.typeKeywords), url: this.url };
    this.loaded && (e2.loadStatus = "loaded");
    const t = new v({ sourceJSON: this.sourceJSON }).set(e2);
    return t._set("isOrgItem", this.isOrgItem), t;
  }
  createPostQuery() {
    const e2 = this.toJSON();
    for (const t of ["tags", "typeKeywords", "categories"]) e2[t] = e2[t]?.join(", ");
    for (const t of ["extent", "classification"]) {
      const i2 = e2[t];
      i2 && (e2[t] = JSON.stringify(i2));
    }
    return e2;
  }
  async deleteRating() {
    await this.portal.request(this.itemUrl + "/deleteRating", { method: "post" });
  }
  fetchData(e2 = "json", t) {
    return this.portal.request(this.itemUrl + "/data", { responseType: e2, ...t, query: { token: this.apiKey } });
  }
  async fetchRating(e2) {
    const t = await this.portal.request(this.itemUrl + "/rating", { query: { token: this.apiKey }, ...e2 });
    return null != t.rating ? (t.created = new Date(t.created), new e(t)) : null;
  }
  fetchRelatedItems(e2, t) {
    return this.portal.requestToTypedArray(this.itemUrl + "/relatedItems", { query: { ...e2, token: this.apiKey }, ...t }, v);
  }
  getThumbnailUrl(e2) {
    let t = this.thumbnailUrl;
    return t && e2 && (t += `&w=${e2}`), t;
  }
  reload() {
    return this.portal.request(this.itemUrl ?? "", { cacheBust: true, query: { token: this.apiKey } }).then((e2) => (this.applicationProxies && !Object.hasOwn(e2, "appProxies") && (this.applicationProxies = null), this.sourceJSON = e2, this.read(e2), this));
  }
  update(e2) {
    return this.id ? this.load().then(() => this.portal.signIn()).then(() => {
      const t = e2?.data, i2 = { method: "post" };
      i2.query = this.createPostQuery();
      for (const e3 in i2.query) null === i2.query[e3] && (i2.query[e3] = "");
      return i2.query.clearEmptyFields = true, null != t && ("string" == typeof t ? i2.query.text = t : "object" == typeof t && (i2.query.text = JSON.stringify(t))), this.portal.request(`${this.userItemUrl}/update`, i2).then(() => this.reload());
    }) : Promise.reject(new s("portal:item-does-not-exist", "The item does not exist yet and cannot be updated"));
  }
  async copy(e2) {
    if (!this.id) throw new s("portal:item-does-not-exist", "The item does not exist yet");
    await this.load();
    const { portal: t, itemUrl: r2 } = this;
    await t.signIn();
    const { copyResources: o2, folder: s3, tags: a3, title: n3 } = e2 || {}, l3 = { method: "post", query: { copyPrivateResources: "all" === o2, folder: "string" == typeof s3 ? s3 : s3?.id, includeResources: !!o2, tags: a3?.join(","), title: n3 } }, { itemId: p2 } = await t.request(`${r2}/copy`, l3);
    return new v({ id: p2, portal: t });
  }
  updateThumbnail(e2) {
    return this.id ? this.load().then(() => this.portal.signIn()).then(() => {
      const t = e2.thumbnail, i2 = e2.filename, r2 = { method: "post" };
      if ("string" == typeof t) tt(t) ? r2.query = { data: t } : r2.query = { url: _(t) }, null != i2 && (r2.query.filename = i2);
      else {
        const e3 = new FormData();
        null != i2 ? e3.append("file", t, i2) : e3.append("file", t), r2.body = e3;
      }
      return this.portal.request(`${this.userItemUrl}/updateThumbnail`, r2).then(() => this.reload());
    }) : Promise.reject(new s("portal:item-does-not-exist", "The item does not exist yet and cannot be updated"));
  }
  async fetchResources(e2 = {}, t) {
    const { fetchResources: i2 } = await import("./resourceUtils-UUQZMPLE.js");
    return i2(this, e2, t);
  }
  async addResource(e2, t, i2) {
    const { addOrUpdateResources: r2 } = await import("./resourceUtils-UUQZMPLE.js");
    return e2.portalItem = this, await r2(this, [{ resource: e2, content: t, compress: i2?.compress, access: i2?.access }], "add", i2), e2;
  }
  async removeResource(e2, t) {
    const { removeResource: r2 } = await import("./resourceUtils-UUQZMPLE.js");
    if (e2.portalItem && e2.portalItem.itemUrl !== this.itemUrl) throw new s("removeresource:portal-item-mismatch", "The portal item associated with the provided resource does not match the item");
    return r2(this, e2, t);
  }
  async removeAllResources(e2) {
    const { removeAllResources: t } = await import("./resourceUtils-UUQZMPLE.js");
    return t(this, e2);
  }
  resourceFromPath(e2) {
    return new c({ portalItem: this, path: e2 });
  }
  toJSON() {
    const e2 = this.extent, t = { accessInformation: this.accessInformation, categories: a(this.categories), classification: a(this.classification), created: this.created?.getTime(), description: this.description, extent: e2 && [[e2.xmin, e2.ymin], [e2.xmax, e2.ymax]], id: this.id, isOrgItem: this.isOrgItem, licenseInfo: this.licenseInfo, modified: this.modified?.getTime(), name: this.name, owner: this.owner, ownerFolder: this.ownerFolder, snippet: this.snippet, sourceUrl: this.sourceUrl, spatialReference: this.spatialReference, tags: a(this.tags), thumbnail: this.thumbnail, title: this.title, type: this.type, typeKeywords: a(this.typeKeywords), url: this.url };
    return l(t);
  }
  static fromJSON(e2) {
    if (!e2) return null;
    if (e2.declaredClass) throw new Error("JSON object is already hydrated");
    return new v({ sourceJSON: e2 });
  }
  _getPostQuery() {
    const e2 = this.toJSON();
    for (const t in e2) "tags" === t && null !== e2[t] && (e2[t] = e2[t].join(", ")), "typeKeywords" === t && null !== e2[t] && (e2[t] = e2[t].join(", ")), "extent" === t && e2[t] && (e2[t] = JSON.stringify(e2[t]));
    return e2;
  }
};
r([m2({ type: ["private", "shared", "org", "public"] })], k.prototype, "access", void 0), r([m2()], k.prototype, "accessInformation", void 0), r([m2({ type: String })], k.prototype, "apiKey", void 0), r([m2({ json: { read: { source: "appProxies" } } })], k.prototype, "applicationProxies", void 0), r([m2()], k.prototype, "avgRating", void 0), r([m2()], k.prototype, "categories", void 0), r([m2()], k.prototype, "classification", void 0), r([m2({ type: Date })], k.prototype, "created", void 0), r([m2()], k.prototype, "culture", void 0), r([m2()], k.prototype, "description", void 0), r([m2({ readOnly: true })], k.prototype, "displayName", null), r([m2({ type: z })], k.prototype, "extent", void 0), r([o("extent")], k.prototype, "readExtent", null), r([m2()], k.prototype, "groupCategories", void 0), r([m2({ readOnly: true })], k.prototype, "iconUrl", null), r([m2()], k.prototype, "id", void 0), r([m2({ readOnly: true })], k.prototype, "isLayer", null), r([m2({ type: Boolean, readOnly: true })], k.prototype, "isOrgItem", void 0), r([m2()], k.prototype, "itemControl", void 0), r([m2({ readOnly: true })], k.prototype, "itemPageUrl", null), r([m2({ readOnly: true })], k.prototype, "itemUrl", null), r([m2()], k.prototype, "licenseInfo", void 0), r([m2({ type: Date })], k.prototype, "modified", void 0), r([m2()], k.prototype, "name", void 0), r([m2()], k.prototype, "numComments", void 0), r([m2()], k.prototype, "numRatings", void 0), r([m2()], k.prototype, "numViews", void 0), r([m2()], k.prototype, "owner", void 0), r([m2()], k.prototype, "ownerFolder", void 0), r([m2({ type: C })], k.prototype, "portal", void 0), r([m2()], k.prototype, "screenshots", void 0), r([m2()], k.prototype, "size", void 0), r([m2()], k.prototype, "snippet", void 0), r([m2()], k.prototype, "sourceJSON", void 0), r([m2({ type: String })], k.prototype, "sourceUrl", void 0), r([m2({ type: String })], k.prototype, "spatialReference", void 0), r([m2()], k.prototype, "tags", void 0), r([m2()], k.prototype, "thumbnail", void 0), r([m2({ readOnly: true })], k.prototype, "thumbnailUrl", null), r([m2()], k.prototype, "title", void 0), r([m2()], k.prototype, "type", void 0), r([m2()], k.prototype, "typeKeywords", void 0), r([m2({ type: String, json: { read(e2, t) {
  if (b2.has(t.type)) {
    const t2 = this.portal?.restUrl;
    e2 ||= t2 && this.id ? `${t2}/content/items/${this.id}/data` : null;
  }
  return e2;
} } })], k.prototype, "url", void 0), r([m2({ readOnly: true })], k.prototype, "userItemUrl", null), k = v = r([a2("esri.portal.PortalItem")], k);

export {
  k
};
//# sourceMappingURL=chunk-F4KXGA4J.js.map
