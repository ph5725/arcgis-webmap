import {
  l as l2
} from "./chunk-KE3WBZYL.js";
import {
  r as r3
} from "./chunk-EOMIFMDH.js";
import {
  o as o3
} from "./chunk-MUKDJQWB.js";
import {
  o
} from "./chunk-JUAPMINU.js";
import {
  r as r2
} from "./chunk-YFPGM5UE.js";
import {
  l
} from "./chunk-E3KEUGUG.js";
import {
  m
} from "./chunk-N3XLUQJI.js";
import {
  a2
} from "./chunk-JUAD7TJ6.js";
import {
  r
} from "./chunk-5TPMG26T.js";
import {
  o as o2
} from "./chunk-3NBBZ43U.js";
import {
  a
} from "./chunk-GWNLQRNM.js";

// node_modules/@arcgis/core/symbols/Symbol.js
var p = new o2({ esriSMS: "simple-marker", esriPMS: "picture-marker", esriSLS: "simple-line", esriSFS: "simple-fill", esriPFS: "picture-fill", esriTS: "text", esriSHD: "shield-label-symbol", PointSymbol3D: "point-3d", LineSymbol3D: "line-3d", PolygonSymbol3D: "polygon-3d", WebStyleSymbol: "web-style", MeshSymbol3D: "mesh-3d", LabelSymbol3D: "label-3d", CIMSymbolReference: "cim" });
var m2 = 0;
var c = class extends l {
  constructor(o4) {
    super(o4), this.id = "sym" + m2++, this.type = null, this.color = new l2([0, 0, 0, 1]);
  }
  readColor(o4) {
    return null != o4?.[0] ? [o4[0], o4[1], o4[2], o4[3] / 255] : o4;
  }
  async collectRequiredFields(o4, r4) {
  }
  hash() {
    return JSON.stringify(this.toJSON());
  }
  clone() {
  }
};
r([m({ type: p.apiValues, readOnly: true, json: { read: false, write: { ignoreOrigin: true, writer: p.write, isRequired: true } } })], c.prototype, "type", void 0), r([m({ type: l2, json: { write: { allowNull: true } } })], c.prototype, "color", void 0), r([o("color")], c.prototype, "readColor", null), c = r([a2("esri.symbols.Symbol")], c);

// node_modules/@arcgis/core/symbols/LineSymbol.js
var p2 = class extends c {
  constructor(r4) {
    super(r4), this.type = "simple-line", this.width = 0.75;
  }
  hash() {
    return `${this.type}.${this.width}`;
  }
};
r([r3({ esriSLS: "simple-line" }, { readOnly: true })], p2.prototype, "type", void 0), r([m({ type: Number, cast: o3, json: { write: true } })], p2.prototype, "width", void 0), p2 = r([a2("esri.symbols.LineSymbol")], p2);

// node_modules/@arcgis/core/symbols/support/lineMarkers.js
var e = ["begin", "end", "begin-end"];
var n = ["arrow", "circle", "square", "diamond", "cross", "x"];

// node_modules/@arcgis/core/symbols/LineSymbolMarker.js
var n2;
var m3 = n2 = class extends l {
  constructor(r4) {
    super(r4), this.placement = "begin-end", this.type = "line-marker", this.style = "arrow";
  }
  writeStyle(r4, o4, e2, t) {
    o4[e2] = "web-map" === t?.origin ? "arrow" : r4;
  }
  set color(r4) {
    this._set("color", r4);
  }
  readColor(r4) {
    return null != r4?.[0] ? [r4[0], r4[1], r4[2], r4[3] / 255] : r4;
  }
  writeColor(r4, o4, e2, t) {
    "web-map" === t?.origin || (o4[e2] = r4);
  }
  clone() {
    return new n2({ color: a(this.color), placement: this.placement, style: this.style });
  }
  hash() {
    return `${this.placement}.${this.color?.hash()}.${this.style}`;
  }
};
r([m({ type: ["begin", "end", "begin-end"], json: { write: true } })], m3.prototype, "placement", void 0), r([r3({ "line-marker": "line-marker" }, { readOnly: true }), m({ json: { origins: { "web-map": { write: false } } } })], m3.prototype, "type", void 0), r([m({ type: n })], m3.prototype, "style", void 0), r([r2("style")], m3.prototype, "writeStyle", null), r([m({ type: l2, value: null, json: { write: { allowNull: true } } })], m3.prototype, "color", null), r([o("color")], m3.prototype, "readColor", null), r([r2("color")], m3.prototype, "writeColor", null), m3 = n2 = r([a2("esri.symbols.LineSymbolMarker")], m3);
var u = m3;

// node_modules/@arcgis/core/symbols/SimpleLineSymbol.js
var h;
var p3 = new o2({ esriSLSSolid: "solid", esriSLSDash: "dash", esriSLSDot: "dot", esriSLSDashDot: "dash-dot", esriSLSDashDotDot: "long-dash-dot-dot", esriSLSNull: "none", esriSLSShortDash: "short-dash", esriSLSShortDot: "short-dot", esriSLSShortDashDot: "short-dash-dot", esriSLSShortDashDotDot: "short-dash-dot-dot", esriSLSLongDash: "long-dash", esriSLSLongDashDot: "long-dash-dot" });
var m4 = h = class extends p2 {
  constructor(...r4) {
    super(...r4), this.type = "simple-line", this.style = "solid", this.cap = "round", this.join = "round", this.marker = null, this.miterLimit = 2;
  }
  normalizeCtorArgs(r4, o4, t, s, i, l3) {
    if (r4 && "string" != typeof r4) return r4;
    const n3 = {};
    return null != r4 && (n3.style = r4), null != o4 && (n3.color = o4), null != t && (n3.width = o3(t)), null != s && (n3.cap = s), null != i && (n3.join = i), null != l3 && (n3.miterLimit = o3(l3)), n3;
  }
  clone() {
    return new h({ color: a(this.color), style: this.style, width: this.width, cap: this.cap, join: this.join, miterLimit: this.miterLimit, marker: this.marker?.clone() });
  }
  hash() {
    return `${super.hash()}.${this.color?.hash()}.${this.style}.${this.cap}.${this.join}.${this.miterLimit}.${this.marker?.hash()}`;
  }
};
r([r3({ esriSLS: "simple-line" }, { readOnly: true })], m4.prototype, "type", void 0), r([m({ type: p3.apiValues, json: { read: p3.read, write: p3.write } })], m4.prototype, "style", void 0), r([m({ type: ["butt", "round", "square"], json: { write: { overridePolicy: (r4, o4, t) => ({ enabled: "round" !== r4 && null == t?.origin }) } } })], m4.prototype, "cap", void 0), r([m({ type: ["miter", "round", "bevel"], json: { write: { overridePolicy: (r4, o4, t) => ({ enabled: "round" !== r4 && null == t?.origin }) } } })], m4.prototype, "join", void 0), r([m({ types: { key: "type", base: null, defaultKeyValue: "line-marker", typeMap: { "line-marker": u } }, json: { write: true, origins: { "web-scene": { write: false } } } })], m4.prototype, "marker", void 0), r([m({ type: Number, json: { read: false, write: false } })], m4.prototype, "miterLimit", void 0), m4 = h = r([a2("esri.symbols.SimpleLineSymbol")], m4);

export {
  c,
  e,
  n,
  m4 as m
};
//# sourceMappingURL=chunk-G34OBNLT.js.map
