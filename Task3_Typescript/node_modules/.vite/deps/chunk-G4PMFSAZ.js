import {
  a as a4
} from "./chunk-MX5VW6PC.js";
import {
  c
} from "./chunk-JJNHUYXK.js";
import {
  u
} from "./chunk-6QTMK7BB.js";
import {
  r as r3
} from "./chunk-45ILJ6ZH.js";
import {
  a as a3
} from "./chunk-TVM3SZJR.js";
import {
  z
} from "./chunk-O5TPFXRT.js";
import {
  o
} from "./chunk-JUAPMINU.js";
import {
  f
} from "./chunk-PK2ZR2SJ.js";
import {
  r as r2
} from "./chunk-YFPGM5UE.js";
import {
  d,
  g,
  l
} from "./chunk-E3KEUGUG.js";
import {
  m
} from "./chunk-N3XLUQJI.js";
import {
  a2
} from "./chunk-JUAD7TJ6.js";
import {
  D,
  x
} from "./chunk-VHLUKPRH.js";
import {
  r
} from "./chunk-5TPMG26T.js";
import {
  h
} from "./chunk-ZWFY3WY5.js";
import {
  Z
} from "./chunk-LQFTAGIV.js";
import {
  s
} from "./chunk-XWG6QGFK.js";
import {
  a
} from "./chunk-GWNLQRNM.js";

// node_modules/@arcgis/core/tables/elements/AttributeTableElement.js
var s2 = class extends l {
  constructor(t) {
    super(t), this.description = null, this.label = null, this.type = null;
  }
};
r([m({ type: String, json: { write: true } })], s2.prototype, "description", void 0), r([m({ type: String, json: { write: true } })], s2.prototype, "label", void 0), r([m()], s2.prototype, "type", void 0), s2 = r([a2("esri.tables.elements.AttributeTableElement")], s2);
var p = s2;

// node_modules/@arcgis/core/tables/elements/AttributeTableAttachmentElement.js
var p2 = class extends a3.ClonableMixin(p) {
  constructor(e2) {
    super(e2), this.displayType = "auto", this.type = "attachment";
  }
  clone() {
    return super.clone();
  }
};
r([m({ type: ["auto"], json: { write: true } })], p2.prototype, "displayType", void 0), r([m({ type: ["attachment"], readOnly: true, json: { read: false, write: { enabled: true, isRequired: true } } })], p2.prototype, "type", void 0), p2 = r([a2("esri.tables.elements.AttributeTableAttachmentElement")], p2);
var a5 = p2;

// node_modules/@arcgis/core/tables/elements/AttributeTableFieldElement.js
var i = class extends a3.ClonableMixin(p) {
  constructor(e2) {
    super(e2), this.description = null, this.fieldName = null, this.label = null, this.type = "field";
  }
  clone() {
    return super.clone();
  }
};
r([m({ type: String, json: { read: false, write: false } })], i.prototype, "description", void 0), r([m({ type: String, json: { write: { enabled: true, isRequired: true } } })], i.prototype, "fieldName", void 0), r([m({ type: String, json: { read: false, write: false } })], i.prototype, "label", void 0), r([m({ type: ["field"], readOnly: true, json: { read: false, write: { enabled: true, isRequired: true } } })], i.prototype, "type", void 0), i = r([a2("esri.tables.elements.AttributeTableFieldElement")], i);
var l2 = i;

// node_modules/@arcgis/core/tables/elements/AttributeTableRelationshipElement.js
var p3 = class extends a3.ClonableMixin(p) {
  constructor(e2) {
    super(e2), this.relationshipId = null, this.type = "relationship";
  }
  clone() {
    return super.clone();
  }
};
r([m({ type: Number, json: { type: x, write: { enabled: true, isRequired: true } } })], p3.prototype, "relationshipId", void 0), r([m({ type: ["relationship"], readOnly: true, json: { read: false, write: { enabled: true, isRequired: true } } })], p3.prototype, "type", void 0), p3 = r([a2("esri.tables.elements.AttributeTableRelationshipElement")], p3);
var l3 = p3;

// node_modules/@arcgis/core/tables/support/tablesUtils.js
var n = { base: p, key: "type", typeMap: { attachment: a5, field: l2, relationship: l3 } };
function i2(t) {
  return { typesWithGroup: { base: p, key: "type", typeMap: { attachment: a5, field: l2, group: t, relationship: l3 } }, typesWithoutGroup: n };
}

// node_modules/@arcgis/core/tables/elements/AttributeTableGroupElement.js
var p4 = class extends a3.ClonableMixin(p) {
  constructor(e2) {
    super(e2), this.elements = null, this.type = "group";
  }
  clone() {
    return super.clone();
  }
};
r([m({ types: [n], json: { name: "attributeTableElements", write: true } })], p4.prototype, "elements", void 0), r([m({ type: ["group"], readOnly: true, json: { read: false, write: { enabled: true, isRequired: true } } })], p4.prototype, "type", void 0), p4 = r([a2("esri.tables.elements.AttributeTableGroupElement")], p4);
var i3 = p4;

// node_modules/@arcgis/core/tables/support/FieldOrder.js
var p5 = class extends a3.ClonableMixin(l) {
  constructor(o2) {
    super(o2), this.field = null, this.order = null;
  }
};
r([m({ type: String, json: { write: true } })], p5.prototype, "field", void 0), r([m({ type: ["asc", "desc"], json: { write: true } })], p5.prototype, "order", void 0), p5 = r([a2("esri.tables.support.FieldOrder")], p5);
var i4 = p5;

// node_modules/@arcgis/core/tables/AttributeTableTemplate.js
var m2;
var n2 = i2(i3);
var a6 = m2 = class extends l {
  constructor(e2) {
    super(e2), this.elements = null, this.orderByFields = null;
  }
  clone() {
    return new m2({ elements: a(this.elements), orderByFields: a(this.orderByFields) });
  }
};
r([m({ types: [n2.typesWithGroup], json: { name: "attributeTableElements", write: true } })], a6.prototype, "elements", void 0), r([m({ type: [i4], json: { write: true } })], a6.prototype, "orderByFields", void 0), a6 = m2 = r([a2("esri.tables.AttributeTableTemplate")], a6);
var c2 = a6;

// node_modules/@arcgis/core/layers/support/commonProperties.js
var s3 = { type: Boolean, value: true, json: { origins: { service: { read: false, write: false }, "web-map": { read: false, write: false } }, name: "screenSizePerspective", write: { enabled: true, layerContainerTypes: a4 } } };
var l4 = { type: Boolean, value: true, json: { name: "disablePopup", read: { reader: (e2, r5) => !r5.disablePopup }, write: { enabled: true, writer(e2, r5, n3) {
  r5[n3] = !e2;
} } } };
var p6 = { type: Boolean, value: true, nonNullable: true, json: { name: "showLabels", write: { enabled: true, layerContainerTypes: a4 } } };
var y = { type: String, json: { origins: { "portal-item": { write: false } }, write: { isRequired: true, ignoreOrigin: true, writer: h } } };
var d2 = { type: Boolean, value: true, nonNullable: true, json: { origins: { service: { read: { enabled: false } } }, name: "showLegend", write: { enabled: true, layerContainerTypes: a4 } } };
var m3 = { value: null, type: c, json: { origins: { service: { name: "elevationInfo", write: true } }, name: "layerDefinition.elevationInfo", write: { enabled: true, layerContainerTypes: a4 } } };
function c3(e2) {
  return { type: e2, readOnly: true, json: { origins: { service: { read: true } }, read: false } };
}
var f2 = { write: { enabled: true, layerContainerTypes: a4 }, read: true };
var w = { type: Number, json: { origins: { "web-document": f2, "portal-item": { write: { layerContainerTypes: a4 } } } } };
var b = { ...w, json: { ...w.json, origins: { "web-document": { ...f2, write: { enabled: true, layerContainerTypes: a4, target: { opacity: { type: Number }, "layerDefinition.drawingInfo.transparency": { type: Number } } } } }, read: { source: ["layerDefinition.drawingInfo.transparency", "drawingInfo.transparency"], reader: (e2, r5, n3) => n3 && "service" !== n3.origin || !r5.drawingInfo || void 0 === r5.drawingInfo.transparency ? r5.layerDefinition?.drawingInfo && void 0 !== r5.layerDefinition.drawingInfo.transparency ? r3(r5.layerDefinition.drawingInfo.transparency) : void 0 : r3(r5.drawingInfo.transparency) } } };
var g2 = { type: z, readOnly: true, json: { origins: { service: { read: { source: ["fullExtent", "spatialReference"], reader: (e2, i5) => {
  const a8 = z.fromJSON(e2);
  return null != i5.spatialReference && "object" == typeof i5.spatialReference && (a8.spatialReference = f.fromJSON(i5.spatialReference)), a8;
} } } }, read: false } };
var u2 = { type: String, json: { origins: { service: { read: false }, "portal-item": { read: false } } } };
var j = { type: Number, json: { origins: { service: { write: { enabled: false } } }, name: "layerDefinition.minScale", write: { layerContainerTypes: a4 } } };
var v = { type: Number, json: { origins: { service: { write: { enabled: false } } }, name: "layerDefinition.maxScale", write: { layerContainerTypes: a4 } } };
var T = { json: { write: { ignoreOrigin: true, layerContainerTypes: a4 }, origins: { "web-map": { read: false, write: false } } } };
var I = { type: c2, json: { name: "attributeTableInfo", write: true } };

// node_modules/@arcgis/core/layers/mixins/operationalLayers.js
var e = { ArcGISAnnotationLayer: true, ArcGISDimensionLayer: true, ArcGISFeatureLayer: true, ArcGISImageServiceLayer: true, ArcGISImageServiceVectorLayer: true, ArcGISMapServiceLayer: true, ArcGISStreamLayer: true, ArcGISTiledImageServiceLayer: true, ArcGISTiledMapServiceLayer: true, ArcGISVideoLayer: true, BingMapsAerial: true, BingMapsHybrid: true, BingMapsRoad: true, CatalogLayer: true, CSV: true, GeoJSON: true, GeoRSS: true, GroupLayer: true, KML: true, KnowledgeGraphLayer: true, MediaLayer: true, OGCFeatureLayer: true, OrientedImageryLayer: true, SubtypeGroupLayer: true, VectorTileLayer: true, WCS: true, WFS: true, WMS: true, WebTiledLayer: true };
var r4 = { ArcGISImageServiceLayer: true, ArcGISImageServiceVectorLayer: true, ArcGISMapServiceLayer: true, ArcGISTiledImageServiceLayer: true, ArcGISTiledMapServiceLayer: true, BingMapsAerial: true, BingMapsHybrid: true, BingMapsRoad: true, OpenStreetMap: true, VectorTileLayer: true, WCS: true, WMS: true, WebTiledLayer: true };
var a7 = { ArcGISFeatureLayer: true, SubtypeGroupTable: true };
var S2 = { "web-scene/operational-layers": { ArcGISDimensionLayer: true, ArcGISFeatureLayer: true, ArcGISImageServiceLayer: true, ArcGISMapServiceLayer: true, ArcGISSceneServiceLayer: true, ArcGISTiledElevationServiceLayer: true, ArcGISTiledImageServiceLayer: true, ArcGISTiledMapServiceLayer: true, BuildingSceneLayer: true, CatalogLayer: true, CSV: true, GeoJSON: true, GroupLayer: true, IntegratedMesh3DTilesLayer: true, Object3DTilesLayer: true, IntegratedMeshLayer: true, KML: true, LineOfSightLayer: true, MediaLayer: true, OGCFeatureLayer: true, OrientedImageryLayer: true, PointCloudLayer: true, RasterDataLayer: true, VectorTileLayer: true, ViewshedLayer: true, Voxel: true, WCS: true, WFS: true, WMS: true, WebTiledLayer: true }, "web-scene/basemap": { ArcGISImageServiceLayer: true, ArcGISMapServiceLayer: true, ArcGISSceneServiceLayer: true, ArcGISTiledImageServiceLayer: true, ArcGISTiledMapServiceLayer: true, OpenStreetMap: true, VectorTileLayer: true, WCS: true, WMS: true, WebTiledLayer: true }, "web-scene/ground": { ArcGISTiledElevationServiceLayer: true, RasterDataElevationLayer: true }, "web-scene/tables": { ArcGISFeatureLayer: true }, "web-map/operational-layers": e, "web-map/basemap": r4, "web-map/tables": a7, "link-chart/operational-layers": { ...e, LinkChartLayer: true }, "link-chart/basemap": r4, "link-chart/tables": a7, "portal-item/operational-layers": { ArcGISFeatureLayer: true, ArcGISImageServiceLayer: true, ArcGISMapServiceLayer: true, ArcGISSceneServiceLayer: true, ArcGISStreamLayer: true, ArcGISTiledImageServiceLayer: true, BuildingSceneLayer: true, IntegratedMesh3DTilesLayer: true, IntegratedMeshLayer: true, MediaLayer: true, OrientedImageryLayer: true, PointCloudLayer: true, SubtypeGroupLayer: true, WCS: true }, "portal-item/tables": { ArcGISFeatureLayer: true, SubtypeGroupTable: true } };

// node_modules/@arcgis/core/layers/mixins/OperationalLayer.js
var b2 = (b3) => {
  let T2 = class extends b3 {
    constructor() {
      super(...arguments), this.persistenceEnabled = true, this.title = null;
    }
    readId(e2, r5, t) {
      return "Group Layer" === t?.portalItem?.type ? void 0 : e2;
    }
    writeListMode(e2, r5, t, i5) {
      (i5 && "ground" === i5.layerContainerType || e2 && g(this, t, {}, i5)) && (r5[t] = e2);
    }
    writeOperationalLayerType(e2, r5, t) {
      e2 && (r5[t] = e2);
    }
    writeTitle(e2, r5) {
      r5.title = e2 ?? "Layer";
    }
    readVisibilityTimeExtent(e2) {
      return e2 ? u.fromArray(e2) : null;
    }
    writeVisibilityTimeExtent(e2, t, i5, o2) {
      e2 && "tables" !== o2.layerContainerType && (e2.isEmpty ? o2?.messages && o2.messages.push(new s("layer:invalid-visibilityTimeExtent", "visibilityTimeExtent cannot be empty")) : t[i5] = e2.toArray());
    }
    read(e2, r5) {
      r5 && (r5.layer = this), d(this, e2, (r6) => super.read(e2, r6), r5);
    }
    write(e2, i5) {
      if (!this.persistenceEnabled && !i5?.ignorePersistenceEnabled) return null;
      if (i5?.origin) {
        const e3 = `${i5.origin}/${i5.layerContainerType || "operational-layers"}`, t = S2[e3];
        let o3 = !!t?.[this.operationalLayerType];
        if ("ArcGISTiledElevationServiceLayer" === this.operationalLayerType && "web-scene/operational-layers" === e3 && (o3 = false), "ArcGISDimensionLayer" === this.operationalLayerType && "web-map/operational-layers" === e3 && (o3 = false), !o3) return i5.messages?.push(new s("layer:unsupported", `Layers (${this.title}, ${this.id}) of type '${this.declaredClass}' are not supported in the context of '${e3}'`, { layer: this })), null;
      }
      const o2 = super.write(e2, { ...i5, layer: this }), s4 = !!i5 && !!i5.messages && !!i5.messages.filter((e3) => e3 instanceof s && "web-document-write:property-required" === e3.name).length;
      return Z(o2?.url) ? (i5?.messages?.push(new s("layer:invalid-url", `Layer (${this.title}, ${this.id}) of type '${this.declaredClass}' using a Blob URL cannot be written to web scenes and web maps`, { layer: this })), null) : !this.url && s4 ? null : o2;
    }
    beforeSave() {
    }
  };
  return r([m({ type: String, json: { write: { ignoreOrigin: true }, origins: { "web-scene": { write: { isRequired: true, ignoreOrigin: true } }, "portal-item": { write: false } } } })], T2.prototype, "id", void 0), r([o("id", ["id"])], T2.prototype, "readId", null), r([m(T)], T2.prototype, "listMode", void 0), r([r2("listMode")], T2.prototype, "writeListMode", null), r([m({ type: String, readOnly: true, json: { read: false, write: { target: "layerType", ignoreOrigin: true }, origins: { "portal-item": { write: false }, "web-scene": { name: "layerType", read: false, write: { enabled: true, ignoreOrigin: true, layerContainerTypes: a4, isRequired: true } } } } })], T2.prototype, "operationalLayerType", void 0), r([r2("operationalLayerType")], T2.prototype, "writeOperationalLayerType", null), r([m(w)], T2.prototype, "opacity", void 0), r([m({ type: Boolean, readOnly: false })], T2.prototype, "persistenceEnabled", void 0), r([m({ type: String, json: { write: { ignoreOrigin: true, writerEnsuresNonNull: true }, origins: { "web-scene": { write: { isRequired: true, ignoreOrigin: true, writerEnsuresNonNull: true } }, "portal-item": { write: false } } }, value: "Layer" })], T2.prototype, "title", void 0), r([r2("title"), r2(["web-scene"], "title")], T2.prototype, "writeTitle", null), r([m({ type: u, json: { origins: { "web-scene": { write: { layerContainerTypes: a4 } } } } })], T2.prototype, "visibilityTimeExtent", void 0), r([o("visibilityTimeExtent")], T2.prototype, "readVisibilityTimeExtent", null), r([r2(["portal-item", "web-map", "web-scene"], "visibilityTimeExtent", { visibilityTimeExtent: { type: [[x, D]] } })], T2.prototype, "writeVisibilityTimeExtent", null), r([m({ type: Boolean, json: { name: "visibility", write: { layerContainerTypes: a4 } } })], T2.prototype, "visible", void 0), T2 = r([a2("esri.layers.mixins.OperationalLayer")], T2), T2;
};

export {
  c2 as c,
  s3 as s,
  l4 as l,
  p6 as p,
  y,
  d2 as d,
  m3 as m,
  c3 as c2,
  w,
  b,
  g2 as g,
  u2 as u,
  j,
  v,
  T,
  I,
  b2
};
//# sourceMappingURL=chunk-G4PMFSAZ.js.map
