import {
  $,
  N as N2
} from "./chunk-Z7VYTTYM.js";
import {
  Pe,
  Te,
  e2 as e,
  ke
} from "./chunk-VCRP2PLV.js";
import {
  D
} from "./chunk-YBJ5GVXQ.js";
import {
  i as i2,
  o
} from "./chunk-CMHHL5UO.js";
import {
  C,
  N
} from "./chunk-KJSBBQ22.js";
import {
  h
} from "./chunk-LMEOPAGQ.js";
import {
  i2 as i,
  r
} from "./chunk-XWG6QGFK.js";
import {
  has
} from "./chunk-FXKORAMT.js";

// node_modules/@arcgis/core/widgets/Feature/support/featureUtils.js
var y = "esri.widgets.Feature.support.featureUtils";
var m = () => i.getLogger(y);
var b = /href=(""|'')/gi;
var g = /(\{([^{\r\n]+)\})/g;
var h2 = /'/g;
var I = /^\s*expression\//i;
var w = /(\n)/gi;
var T = /[\u00A0-\u9999<>&]/gim;
var F = /href\s*=\s*(?:"([^"]+)"|'([^']+)')/gi;
var N3 = /^(?:mailto:|tel:)/;
var j = "relationships/";
var Z = N("short-date-short-time");
function L(e2) {
  if (null != e2) return (e2.sourceLayer || e2.layer) ?? void 0;
}
async function q({ type: e2, value: t, event: r2 }) {
  try {
    return "function" == typeof t ? t(r2) : await t;
  } catch (n) {
    return void m().error("error", `An error occurred when calling the "${e2}" function`, { error: n, graphic: r2.graphic, value: t });
  }
}
function x(e2 = "") {
  if (e2) return !N3.test(e2.trim().toLowerCase());
}
function E(e2) {
  return !!e2 && I.test(e2);
}
function v(e2, t) {
  if (!t || !E(t) || !e2) return;
  const r2 = t.replace(I, "").toLowerCase();
  return e2.find(({ name: e3 }) => e3.toLowerCase() === r2);
}
function A(e2, t) {
  const r2 = v(t, e2?.fieldName);
  return r2 ? r2.title || null : e2 ? e2.label || e2.fieldName : null;
}
function C2(e2, t) {
  const r2 = t.get(e2.toLowerCase());
  return `{${r2?.fieldName || e2}}`;
}
function U(e2) {
  return e2.replaceAll(b, "");
}
function M(e2, t) {
  const r2 = k(t, e2);
  return r2 ? r2.name : e2;
}
function R(e2, t) {
  return e2 && e2.map((e3) => M(e3, t));
}
function k(e2, t) {
  return e2 && "function" == typeof e2.getField && t ? e2.getField(t) ?? null : null;
}
function $2(e2) {
  return `${e2}`.trim();
}
function D2({ attributes: e2, globalAttributes: t, layer: r2, text: n, expressionAttributes: i3, fieldInfoMap: o2 }) {
  return n ? z({ formattedAttributes: t, template: P(n, { ...t, ...i3, ...e2 }, r2), fieldInfoMap: o2 }) : "";
}
function z({ formattedAttributes: e2, template: r2, fieldInfoMap: n }) {
  return $2(U(r(r(r2, (e3) => C2(e3, n)), e2)));
}
function O(e2, t, r2 = false) {
  const n = t[e2];
  if ("string" == typeof n) {
    const i3 = "%27", o2 = (r2 ? encodeURIComponent(n) : n).replaceAll(h2, i3);
    t[e2] = o2;
  }
}
function G(e2, t = false) {
  const r2 = { ...e2 };
  return Object.keys(r2).forEach((e3) => O(e3, r2, t)), r2;
}
function S(e2, r2, n) {
  const i3 = (r2 = $2(r2)) && "{" !== r2[0];
  return r(e2, G(n, i3 || false));
}
function Q(e2, t) {
  return e2.replaceAll(g, (e3, r2, n) => {
    const i3 = k(t, n);
    return i3 ? `{${i3.name}}` : r2;
  });
}
function P(e2, t, r2) {
  const n = Q(e2, r2);
  return n ? n.replaceAll(F, (e3, r3, n2) => S(e3, r3 || n2, t)) : n;
}
function _(e2, t) {
  if ("string" == typeof e2 && t && null == t.dateFormat && (null != t.places || null != t.digitSeparator)) {
    const t2 = Number(e2);
    if (!isNaN(t2)) return t2;
  }
  return e2;
}
function H(e2) {
  return null != e2 && "object" == typeof e2 && "fieldsIndex" in e2 && "geometryType" in e2 && "getField" in e2 && "load" in e2 && "loaded" in e2 && "objectIdField" in e2 && "spatialReference" in e2 && "type" in e2 && ("feature" === e2.type || "scene" === e2.type || "subtype-group" === e2.type || "subtype-sublayer" === e2.type || "sublayer" === e2.type) && "when" in e2;
}
function B(e2) {
  return null != e2 && "object" == typeof e2 && "createQuery" in e2 && "queryFeatureCount" in e2 && "queryObjectIds" in e2 && "queryRelatedFeatures" in e2 && "queryRelatedFeaturesCount" in e2 && "relationships" in e2;
}
function J(e2) {
  return H(e2) && B(e2);
}
function K(e2) {
  return !(!(e2 && "object" == typeof e2 && "createQuery" in e2 && "getField" in e2 && "queryFeatureCount" in e2 && "queryFeatures" in e2 && "queryObjectIds" in e2 && "capabilities" in e2 && "fields" in e2 && "fieldsIndex" in e2 && "type" in e2) || "feature" !== e2.type && "subtype-group" !== e2.type && "subtype-sublayer" !== e2.type && "sublayer" !== e2.type || !("when" in e2)) && ("subtype-sublayer" === e2.type && "parent" in e2 && e2.parent && "object" == typeof e2.parent ? "globalIdField" in e2.parent : "globalIdField" in e2);
}
function V(e2) {
  return !!e2 && "object" == typeof e2 && "sourceLayer" in e2 && J(e2.sourceLayer);
}
function W(e2, t) {
  const { fieldInfos: r2, fieldName: n, preventPlacesFormatting: l, layer: u, timeZone: s } = t, c = ee(r2, n), d = k(u, n);
  if (c && !Pe(n)) {
    const t2 = d?.type, r3 = c.format?.dateFormat;
    if ("date" === t2 || "date-only" === t2 || "time-only" === t2 || "timestamp-offset" === t2 || r3) return N2(e2, { format: r3, fieldType: t2, timeZoneOptions: { layerTimeZone: u && "preferredTimeZone" in u ? u.preferredTimeZone : null, viewTimeZone: s, datesInUnknownTimezone: !(!u || !("datesInUnknownTimezone" in u)) && !!u.datesInUnknownTimezone } });
  }
  const p = c?.format;
  return "string" == typeof e2 && Pe(n) && p ? X(e2, p) : "string" == typeof (e2 = _(e2, p)) || null == e2 || null == p ? le(e2) : o(e2, l ? { ...i2(p), minimumFractionDigits: 0, maximumFractionDigits: 20 } : i2(p));
}
function X(e2, t) {
  return e2 = e2.trim(), /\d{2}-\d{2}/.test(e2) ? e2 : e2.includes(",") ? Y(e2, ",", ", ", t) : e2.includes(";") ? Y(e2, ";", "; ", t) : e2.includes(" ") ? Y(e2, " ", " ", t) : o(Number(e2), i2(t));
}
function Y(e2, t, r2, n) {
  return e2.trim().split(t).map((e3) => o(Number(e3), i2(n))).join(r2);
}
function ee(e2, t) {
  if (e2?.length && t) return e2.find((e3) => e3.fieldName?.toLowerCase() === t.toLowerCase());
}
function te({ fieldName: e2, graphic: t, layer: r2 }) {
  if (pe(e2)) return null;
  if (!r2 || "function" != typeof r2.getFeatureType) return null;
  const { typeIdField: n } = r2;
  if (!n || e2 !== n) return null;
  const i3 = r2.getFeatureType(t);
  return i3 ? i3.name : null;
}
function re({ fieldName: e2, value: t, graphic: r2, layer: n }) {
  if (pe(e2)) return null;
  if (!n || "function" != typeof n.getFieldDomain) return null;
  const i3 = r2 && n.getFieldDomain(e2, { feature: r2, excludeImpliedDomains: has("esri-widget-legacy-field-domain-calculation") });
  return i3 && "coded-value" === i3.type ? i3.getName(t) : null;
}
function ne(e2, t, r2, i3) {
  const { creatorField: o2, creationDateField: a, editorField: l, editDateField: u } = e2;
  if (!t) return;
  const s = h(i3 && "preferredTimeZone" in i3 ? i3.preferredTimeZone : null, !(!i3 || !("datesInUnknownTimezone" in i3)) && !!i3.datesInUnknownTimezone, r2, Z, "date"), f = { ...Z, ...s }, c = t[u];
  if ("number" == typeof c) {
    const e3 = t[l];
    return { type: "edit", date: C(c, f), user: e3 };
  }
  const d = t[a];
  if ("number" == typeof d) {
    const e3 = t[o2];
    return { type: "create", date: C(d, f), user: e3 };
  }
  return null;
}
function ie(e2, t) {
  const r2 = /* @__PURE__ */ new Map();
  if (!e2) return r2;
  for (const n of e2) {
    if (!n.fieldName) continue;
    const e3 = M(n.fieldName, t);
    n.fieldName = e3, r2.set(e3.toLowerCase(), n);
  }
  return r2;
}
function oe(e2) {
  const t = [];
  if (!e2) return t;
  const { fieldInfos: r2, content: n } = e2;
  return r2 && t.push(...r2), n && Array.isArray(n) ? (n.forEach((e3) => {
    if ("fields" === e3.type) {
      const r3 = e3?.fieldInfos;
      r3 && t.push(...r3);
    }
  }), t) : t;
}
function ae(e2) {
  return e2.replaceAll(T, (e3) => `&#${e3.charCodeAt(0)};`);
}
function le(e2) {
  return "string" == typeof e2 ? e2.replaceAll(w, '<br class="esri-text-new-line" />') : e2;
}
function ue(e2) {
  const { value: t, fieldName: r2, fieldInfos: n, fieldInfoMap: i3, layer: o2, graphic: a, timeZone: l } = e2;
  if (null == t) return "";
  const s = re({ fieldName: r2, value: t, graphic: a, layer: o2 });
  if (s) return s;
  const d = te({ fieldName: r2, graphic: a, layer: o2 });
  if (d) return d;
  if (i3.get(r2.toLowerCase())) return W(t, { fieldInfos: n || Array.from(i3.values()), fieldName: r2, layer: o2, timeZone: l });
  const p = o2?.fieldsIndex?.get(r2);
  return p && ($(p) || Te(p)) ? N2(t, { fieldType: p.type, timeZoneOptions: { layerTimeZone: o2 && "preferredTimeZone" in o2 ? o2.preferredTimeZone : null, viewTimeZone: l, datesInUnknownTimezone: !(!o2 || !("datesInUnknownTimezone" in o2)) && !!o2.datesInUnknownTimezone } }) : le(t);
}
function se({ fieldInfos: e2, attributes: t, layer: r2, graphic: n, fieldInfoMap: i3, relatedInfos: o2, timeZone: a }) {
  const l = {};
  return o2?.forEach((t2) => be({ attributes: l, relatedInfo: t2, fieldInfoMap: i3, fieldInfos: e2, layer: r2, timeZone: a })), t && Object.keys(t).forEach((o3) => {
    const u = t[o3];
    l[o3] = ue({ fieldName: o3, fieldInfos: e2, fieldInfoMap: i3, layer: r2, value: u, graphic: n, timeZone: a });
  }), l;
}
async function fe(e2, t) {
  const { layer: r2, graphic: n, outFields: i3, objectIds: o2, returnGeometry: a, spatialReference: l } = e2, u = o2[0];
  if ("number" != typeof u && "string" != typeof u) {
    const e3 = "Could not query required fields for the specified feature. The feature's ID is invalid.", t2 = { layer: r2, graphic: n, objectId: u, requiredFields: i3 };
    return m().warn(e3, t2), null;
  }
  if (!D(r2)?.operations?.supportsQuery) {
    const e3 = "The specified layer cannot be queried. The following fields will not be available.", t2 = { layer: r2, graphic: n, requiredFields: i3, returnGeometry: a };
    return m().warn(e3, t2), null;
  }
  const f = r2.createQuery();
  f.objectIds = o2, f.outFields = i3?.length ? i3 : [r2.objectIdField], f.returnGeometry = !!a, f.returnZ = !!a, f.returnM = !!a, f.outSpatialReference = l;
  return (await r2.queryFeatures(f, t)).features[0];
}
async function ce(e2) {
  if (!e2.expressionInfos?.length) return false;
  const t = await e(), { arcadeUtils: { hasGeometryFunctions: r2 } } = t;
  return r2(e2);
}
async function de({ graphic: e2, popupTemplate: t, layer: r2, spatialReference: n }, i3) {
  if (!r2 || !t) return;
  if ("function" == typeof r2.load && await r2.load(i3), !e2.attributes) return;
  const o2 = r2.objectIdField, a = e2.attributes[o2];
  if (null == a) return;
  const u = [a], s = await t.getRequiredFields(r2.fieldsIndex), f = ke(e2, s), c = f ? [] : s.includes(o2) ? s : [...s, o2], d = t.returnGeometry || await ce(t);
  if (f && !d) return;
  const p = await fe({ layer: r2, graphic: e2, outFields: c, objectIds: u, returnGeometry: d, spatialReference: n }, i3);
  p && (p.geometry && (e2.geometry = p.geometry), p.attributes && (e2.attributes = { ...e2.attributes, ...p.attributes }));
}
function pe(e2 = "") {
  return !!e2 && e2.includes(j);
}
function ye(e2) {
  return e2 ? `${j}${e2.layerId}/${e2.fieldName}` : "";
}
function me({ attributes: e2, graphic: t, relatedInfo: r2, fieldInfos: n, fieldInfoMap: i3, layer: o2, timeZone: a }) {
  e2 && t && r2 && Object.keys(t.attributes).forEach((l) => {
    const u = ye({ layerId: r2.relation.id.toString(), fieldName: l }), s = t.attributes[l];
    e2[u] = ue({ fieldName: u, fieldInfos: n, fieldInfoMap: i3, layer: o2, value: s, graphic: t, timeZone: a });
  });
}
function be({ attributes: e2, relatedInfo: t, fieldInfoMap: r2, fieldInfos: n, layer: i3, timeZone: o2 }) {
  e2 && t && (t.relatedFeatures?.forEach((a) => me({ attributes: e2, graphic: a, relatedInfo: t, fieldInfoMap: r2, fieldInfos: n, layer: i3, timeZone: o2 })), t.relatedStatsFeatures?.forEach((a) => me({ attributes: e2, graphic: a, relatedInfo: t, fieldInfoMap: r2, fieldInfos: n, layer: i3, timeZone: o2 })));
}
var ge = (e2) => {
  if (!e2) return false;
  const t = e2.toUpperCase();
  return t.includes("CURRENT_TIMESTAMP") || t.includes("CURRENT_DATE") || t.includes("CURRENT_TIME");
};
var he = ({ layer: e2, method: t, query: r2, definitionExpression: n }) => {
  if (!e2.capabilities?.query?.supportsCacheHint || "attachments" === t) return;
  const i3 = null != r2.where ? r2.where : null, o2 = null != r2.geometry ? r2.geometry : null;
  ge(n) || ge(i3) || "extent" === o2?.type || "tile" === r2.resultType || (r2.cacheHint = true);
};
var Ie = ({ query: e2, layer: t, method: r2 }) => {
  he({ layer: t, method: r2, query: e2, definitionExpression: `${t.definitionExpression} ${t.serviceDefinitionExpression ?? ""}` });
};
var we = ({ queryPayload: e2, layer: t, method: r2 }) => {
  he({ layer: t, method: r2, query: e2, definitionExpression: `${t.definitionExpression} ${t.serviceDefinitionExpression ?? ""}` });
};
function Te2(e2, t, r2) {
  return e2 && t && r2 ? "sublayer" === t.type ? je({ layers: t.layer?.allSublayers, map: e2, relatedLayer: t, relationship: r2 }) || je({ layers: t.layer?.subtables, map: e2, relatedLayer: t, relationship: r2 }) : je({ layers: e2.allLayers, map: e2, relatedLayer: t, relationship: r2 }) || je({ layers: e2.allTables, map: e2, relatedLayer: t, relationship: r2 }) : null;
}
function Fe(e2, t) {
  return e2 && "utilityNetworks" in e2 && t ? e2.utilityNetworks?.find((e3) => e3.isUtilityLayer(t)) : null;
}
function Ne(e2, t) {
  return e2?.allTables.find((e3) => "feature" === e3.type && e3.layerId === t.id && e3.url === t.layer?.url);
}
function je({ map: e2, relationship: t, relationship: { relatedTableId: r2 }, relatedLayer: n, layers: i3 }) {
  if (!i3) return null;
  for (const o2 of i3) {
    if ("map-image" === o2.type) {
      const r3 = je({ layers: o2.sublayers, map: e2, relatedLayer: n, relationship: t }) || je({ layers: o2.subtables, map: e2, relatedLayer: n, relationship: t });
      if (r3) return r3;
      continue;
    }
    if (!J(o2)) continue;
    if ("sublayer" === n.type) {
      if (o2 !== n && o2.id === r2) return o2.isTable ? Ne(e2, o2) : o2;
      continue;
    }
    const i4 = "scene" === n.type && n.associatedLayer ? n.associatedLayer.url : n.url;
    if (!i4) return null;
    if ("sublayer" !== o2.type) {
      if (o2 !== n && o2.url === i4 && o2.layerId === r2) return o2;
    } else if (o2 !== n && o2.layer?.url === i4 && o2.id === r2) return o2.isTable ? Ne(e2, o2) : o2;
  }
  return null;
}

export {
  L,
  q,
  x,
  E,
  A,
  M,
  R,
  D2 as D,
  z,
  Q,
  H,
  B,
  J,
  K,
  V,
  W,
  ee,
  ne,
  ie,
  oe,
  ae,
  le,
  se,
  fe,
  de,
  pe,
  Ie,
  we,
  Te2 as Te,
  Fe
};
//# sourceMappingURL=chunk-G72VEDU6.js.map
