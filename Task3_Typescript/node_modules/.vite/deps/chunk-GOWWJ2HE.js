import {
  s as s3
} from "./chunk-BNO7HCVD.js";
import {
  c as c2,
  f,
  r
} from "./chunk-ZWFY3WY5.js";
import {
  L,
  S,
  b,
  c3 as c,
  e,
  l2 as l,
  m2 as m,
  o4 as o,
  s as s2,
  t,
  u3 as u
} from "./chunk-GZ2P4SCJ.js";
import {
  s
} from "./chunk-XWG6QGFK.js";
import {
  has
} from "./chunk-FXKORAMT.js";

// node_modules/@arcgis/core/core/workers/utils.js
var r2 = "worker:port-closed";
var e2;
!function(t3) {
  t3[t3.HANDSHAKE = 0] = "HANDSHAKE", t3[t3.OPEN = 1] = "OPEN", t3[t3.OPENED = 2] = "OPENED", t3[t3.RESPONSE = 3] = "RESPONSE", t3[t3.INVOKE = 4] = "INVOKE", t3[t3.ABORT = 5] = "ABORT", t3[t3.CLOSE = 6] = "CLOSE", t3[t3.OPEN_PORT = 7] = "OPEN_PORT", t3[t3.ON = 8] = "ON";
}(e2 || (e2 = {}));
var n = 0;
function s4() {
  return n++;
}
function o2(t3) {
  return t3 && "object" == typeof t3 && ("result" in t3 || "transferList" in t3);
}
function i(t3) {
  return t3 ? "string" == typeof t3 ? JSON.stringify({ name: "message", message: t3 }) : t3.toJSON ? JSON.stringify(t3) : JSON.stringify({ name: t3.name, message: t3.message, details: t3.details || { stack: t3.stack } }) : null;
}
function a(t3, r4, n4, s5) {
  if (r4.type === e2.OPEN_PORT) return void t3.postMessage(r4, [r4.port]);
  if (r4.type !== e2.INVOKE && r4.type !== e2.RESPONSE) return void t3.postMessage(r4);
  let f3;
  if (o2(n4) ? (f3 = u2(n4.transferList), r4.data = n4.result) : (f3 = u2(s5), r4.data = n4), f3) {
    if (has("ff")) {
      for (const n5 of f3) if ("byteLength" in n5 && n5.byteLength > 267386880) {
        const n6 = "Worker call with large ArrayBuffer would crash Firefox";
        switch (r4.type) {
          case e2.INVOKE:
            throw n6;
          case e2.RESPONSE:
            return void a(t3, { type: e2.RESPONSE, jobId: r4.jobId, error: i(n6) });
        }
      }
    }
    t3.postMessage(r4, f3);
  } else t3.postMessage(r4);
}
function f2(t3) {
  if (!t3) return null;
  const r4 = t3.data;
  return r4 ? "string" == typeof r4 ? JSON.parse(r4) : r4 : null;
}
function u2(t3) {
  if (!t3?.length) return null;
  if (has("esri-workers-arraybuffer-transfer")) return t3;
  const r4 = t3.filter((t4) => !c3(t4));
  return r4.length ? r4 : null;
}
function c3(t3) {
  return t3 instanceof ArrayBuffer || "ArrayBuffer" === t3?.constructor?.name;
}
async function O(e4) {
  try {
    return await e4;
  } catch (n4) {
    const e5 = n4?.name === r2;
    if (!(b(n4) || e5)) throw n4;
    return;
  }
}

// node_modules/@arcgis/core/core/workers/InvokeHandler.js
function t2(t3, r4) {
  return new Proxy({}, { get: (e4, i3, s5) => (...e5) => {
    let s6, o3;
    const a2 = e5[e5.length - 1];
    n2(a2) && (s6 = a2.signal, o3 = a2.transferList, e5.pop());
    return t3.apply(r4 ? `${r4}.${i3.toString()}` : i3.toString(), e5, { transferList: o3, signal: s6 });
  } });
}
function n2(t3) {
  return "object" == typeof t3 && !Array.isArray(t3) && null != t3 && ("signal" in t3 || "transferList" in t3 || 0 === Object.keys(t3).length);
}

// node_modules/@arcgis/core/core/workers/registry.js
var r3 = { statsWorker: () => import("./statsWorker-S4AHIIM2.js"), geometryEngineWorker: () => import("./geometryEngineWorker-FEDF227E.js"), arcadeGeometryOperatorsWorker: () => import("./operatorsWorker-IZD75KXD.js"), CSVSourceWorker: () => import("./CSVSourceWorker-GKXXSD2K.js"), EdgeProcessingWorker: () => import("./EdgeProcessingWorker-X2K5ACKN.js"), ElevationSamplerWorker: () => import("./ElevationSamplerWorker-ODUONSPV.js"), FeatureServiceSnappingSourceWorker: () => import("./FeatureServiceSnappingSourceWorker-ZXRNUSPZ.js"), GeoJSONSourceWorker: () => import("./GeoJSONSourceWorker-MQQPDSTI.js"), LercWorker: () => import("./LercWorker-FAX26SHT.js"), MemorySourceWorker: () => import("./MemorySourceWorker-E4I5ZCFZ.js"), PBFDecoderWorker: () => import("./PBFDecoderWorker-JMFOLB6K.js"), FeaturePipelineWorker: () => import("./FeaturePipelineWorker-ZAO6WQZW.js"), PointCloudWorker: () => import("./PointCloudWorker-2SS4HZB2.js"), RasterWorker: () => import("./RasterWorker-LXO3DRM2.js"), SceneLayerSnappingSourceWorker: () => import("./SceneLayerSnappingSourceWorker-W7VBHCKX.js"), SceneLayerWorker: () => import("./SceneLayerWorker-7BCHHRMO.js"), WFSSourceWorker: () => import("./WFSSourceWorker-KEDN2KVG.js"), WorkerTileHandler: () => import("./WorkerTileHandler-TDGVCB2K.js"), Lyr3DWorker: () => import("./Lyr3DWorker-FMREP5CY.js"), Feature3DPipelineWorker: () => import("./Feature3DPipelineWorker-ZTTEVATH.js"), TextureCompressionWorker: () => import("./TextureCompressionWorker-H7K4VMLI.js") };

// node_modules/@arcgis/core/core/workers/RemoteClient.js
var { CLOSE: M, ABORT: k, INVOKE: y, RESPONSE: j, OPEN_PORT: I, ON: J } = e2;
var w = 2;
var O2 = class {
  constructor(e4) {
    this._invoke = e4, this._timer = null, this._cancelledJobIds = /* @__PURE__ */ new Set(), this._invokeMessages = [], this._timer = null, this._process = this._process.bind(this);
  }
  push(e4) {
    e4.type === e2.ABORT ? this._cancelledJobIds.add(e4.jobId) : (this._invokeMessages.push(e4), null === this._timer && (this._timer = setTimeout(this._process, 0)));
  }
  clear() {
    this._invokeMessages.length = 0, this._cancelledJobIds.clear(), this._timer = null;
  }
  _process() {
    this._timer = null;
    for (const e4 of this._invokeMessages) this._cancelledJobIds.has(e4.jobId) || this._invoke(e4);
    this._cancelledJobIds.clear(), this._invokeMessages.length = 0;
  }
};
var _E = class _E {
  static connect(e4, s5) {
    const t3 = new MessageChannel();
    let o3;
    o3 = "function" == typeof e4 ? new e4() : "default" in e4 && "function" == typeof e4.default ? new e4.default() : e4;
    const n4 = new _E(t3.port1, { channel: t3, client: o3, schedule: s5 });
    return "object" == typeof o3 && "remoteClient" in o3 && (o3.remoteClient = n4), _E.clients.set(n4, o3), t3.port2;
  }
  static loadWorker(e4) {
    const s5 = r3[e4];
    return s5 ? s5() : Promise.resolve(null);
  }
  constructor(e4, s5, t3, o3) {
    this._port = e4, this._jobQueue = t3, this._lowPriorityJobQueue = o3, this._outJobs = /* @__PURE__ */ new Map(), this._inJobs = /* @__PURE__ */ new Map(), this._invokeQueue = new O2((e5) => this._onInvokeMessage(e5)), this._client = s5.client, this._onMessage = this._onMessage.bind(this), this._channel = s5.channel, this._schedule = s5.schedule, this._port.addEventListener("message", this._onMessage), this._port.start();
  }
  close() {
    this._post({ type: M }), this._close();
  }
  isBusy() {
    return this._outJobs.size > 0;
  }
  invoke(e4, s5, t3) {
    return this.apply(e4, [s5], t3);
  }
  apply(e4, t3, o3) {
    const a2 = o3?.signal, h = o3?.transferList;
    if (!this._port) return Promise.reject(new s(r2, `Cannot call invoke('${e4}'), port is closed`, { methodName: e4, data: t3 }));
    const c5 = s4();
    return new Promise((s5, o4) => {
      if (c(a2)) return this._processWork(), void o4(u());
      const p = m(a2, () => {
        const e5 = this._outJobs.get(c5);
        e5 && (this._outJobs.delete(c5), this._processWork(), l(e5.abortHandle), this._post({ type: k, jobId: c5 }), o4(u()));
      }), _ = { resolve: s5, reject: o4, abortHandle: p, debugInfo: e4 };
      this._outJobs.set(c5, _), this._post({ type: y, jobId: c5, methodName: e4, abortable: null != a2 }, t3, h);
    });
  }
  createInvokeProxy(e4) {
    return t2(this, e4);
  }
  on(e4, s5) {
    const t3 = new MessageChannel();
    function n4(e5) {
      s5(e5.data);
    }
    return this._port.postMessage({ type: e2.ON, eventType: e4, port: t3.port2 }, [t3.port2]), t3.port1.addEventListener("message", n4), t3.port1.start(), e(() => {
      t3.port1.postMessage({ type: e2.CLOSE }), t3.port1.close(), t3.port1.removeEventListener("message", n4);
    });
  }
  jobAdded() {
    this._processWork();
  }
  openPort() {
    const e4 = new MessageChannel();
    return this._post({ type: I, port: e4.port2 }), e4.port1;
  }
  _processWork() {
    if (this._outJobs.size >= w) return;
    const e4 = this._jobQueue?.pop() ?? this._lowPriorityJobQueue?.pop();
    if (!e4) return;
    const { methodName: s5, data: t3, invokeOptions: o3, resolver: n4 } = e4;
    this.apply(s5, t3, o3).then((e5) => n4.resolve(e5)).catch((e5) => n4.reject(e5));
  }
  _close() {
    this._channel && (this._channel = void 0), this._port.removeEventListener("message", this._onMessage), this._port.close(), this._outJobs.forEach((e4) => {
      l(e4.abortHandle), e4.reject(u(`Worker closing, aborting job calling '${e4.debugInfo}'`));
    }), this._inJobs.clear(), this._outJobs.clear(), this._invokeQueue.clear(), this._port = null, this._client = null, this._schedule = null;
  }
  _onMessage(e4) {
    null != this._schedule ? this._schedule(() => this._processMessage(e4, true)) : this._processMessage(e4, false);
  }
  _processMessage(e4, s5) {
    const t3 = f2(e4);
    if (t3) switch (t3.type) {
      case j:
        this._onResponseMessage(t3);
        break;
      case y:
        s5 ? this._onInvokeMessage(t3) : this._invokeQueue.push(t3);
        break;
      case k:
        this._onAbortMessage(t3);
        break;
      case M:
        this._onCloseMessage();
        break;
      case I:
        this._onOpenPortMessage(t3);
        break;
      case J:
        this._onOnMessage(t3);
    }
  }
  _onAbortMessage(e4) {
    const s5 = this._inJobs, t3 = e4.jobId, o3 = s5.get(t3);
    this._invokeQueue.push(e4), o3 && (o3.controller && o3.controller.abort(), s5.delete(t3));
  }
  _onCloseMessage() {
    const e4 = this._client;
    this._close(), e4 && "destroy" in e4 && _E.clients.get(this) === e4 && e4.destroy(), _E.clients.delete(this), e4?.remoteClient && (e4.remoteClient = null);
  }
  _onInvokeMessage(e4) {
    const { methodName: s5, jobId: t3, data: o3 = [], abortable: n4 } = e4, i3 = n4 ? new AbortController() : null, r4 = this._inJobs;
    let l2, c5 = this._client, p = c5[s5];
    try {
      if (!p && s5 && s5.includes(".")) {
        const e5 = s5.split(".");
        for (let s6 = 0; s6 < e5.length - 1; s6++) c5 = c5[e5[s6]], p = c5[e5[s6 + 1]];
      }
      if ("function" != typeof p) throw new TypeError(`${s5} is not a function`);
      o3.push({ client: this, signal: i3 ? i3.signal : null }), l2 = p.apply(c5, o3);
    } catch (_) {
      return void this._post({ type: j, jobId: t3, error: i(_) });
    }
    S(l2) ? (r4.set(t3, { controller: i3, promise: l2 }), l2.then((e5) => {
      r4.has(t3) && (r4.delete(t3), this._post({ type: j, jobId: t3 }, e5));
    }, (e5) => {
      r4.has(t3) && (r4.delete(t3), b(e5) || this._post({ type: j, jobId: t3, error: i(e5 || { message: `Error encountered at method ${s5}` }) }));
    })) : this._post({ type: j, jobId: t3 }, l2);
  }
  _onOpenPortMessage(e4) {
    new _E(e4.port, { client: this._client });
  }
  _onOnMessage(e4) {
    const { port: s5 } = e4, o3 = this._client.on(e4.eventType, (e5) => {
      s5.postMessage(e5);
    }), n4 = o(e4.port, "message", (e5) => {
      const t3 = f2(e5);
      t3?.type === e2.CLOSE && (n4.remove(), o3.remove(), s5.close());
    });
  }
  _onResponseMessage(e4) {
    const { jobId: t3, error: o3, data: i3 } = e4, r4 = this._outJobs;
    if (!r4.has(t3)) return;
    const l2 = r4.get(t3);
    r4.delete(t3), this._processWork(), l(l2.abortHandle), o3 ? l2.reject(s.fromJSON(JSON.parse(o3))) : l2.resolve(i3);
  }
  _post(e4, s5, t3) {
    return a(this._port, e4, s5, t3);
  }
};
_E.kernelInfo = { buildDate: f, fullVersion: r, revision: c2 };
_E.clients = /* @__PURE__ */ new Map();
var E = _E;

// node_modules/@arcgis/core/core/workers/connectionRegistry.js
var n3 = new FinalizationRegistry((n4) => {
  n4.close();
});
function e3(e4, i3) {
  n3.register(e4, i3, i3);
}
function i2(e4) {
  n3.unregister(e4);
}

// node_modules/@arcgis/core/core/workers/Connection.js
var c4 = class {
  constructor() {
    this._inUseClients = new Array(), this._clients = new Array(), this._clientPromises = new Array(), this._ongoingJobsQueue = new s3(), this._ongoingLowPriorityJobsQueue = new s3();
  }
  destroy() {
    this.close();
  }
  get closed() {
    return !this._clients?.length;
  }
  open(e4, s5) {
    return new Promise((i3, n4) => {
      let r4 = true;
      const l2 = (e5) => {
        s2(s5.signal), r4 && (r4 = false, e5());
      };
      this._clients.length = e4.length, this._clientPromises.length = e4.length, this._inUseClients.length = e4.length;
      for (let o3 = 0; o3 < e4.length; ++o3) {
        const r5 = e4[o3];
        S(r5) ? this._clientPromises[o3] = r5.then((e5) => (this._clients[o3] = new E(e5, s5, this._ongoingJobsQueue, this._ongoingLowPriorityJobsQueue), l2(i3), this._clients[o3]), () => (l2(n4), null)) : (this._clients[o3] = new E(r5, s5, this._ongoingJobsQueue, this._ongoingLowPriorityJobsQueue), this._clientPromises[o3] = Promise.resolve(this._clients[o3]), l2(i3));
      }
    });
  }
  broadcast(e4, t3, s5) {
    const i3 = new Array(this._clientPromises.length);
    for (let o3 = 0; o3 < this._clientPromises.length; ++o3) {
      const n4 = this._clientPromises[o3];
      i3[o3] = n4.then((i4) => i4?.invoke(e4, t3, s5));
    }
    return i3;
  }
  close() {
    let e4;
    for (; e4 = this._ongoingJobsQueue.pop(); ) e4.resolver.reject(u(`Worker closing, aborting job calling '${e4.methodName}'`));
    for (; e4 = this._ongoingLowPriorityJobsQueue.pop(); ) e4.resolver.reject(u(`Worker closing, aborting job calling '${e4.methodName}'`));
    for (const t3 of this._clientPromises) t3.then((e5) => e5?.close());
    this._clients.length = 0, this._clientPromises.length = 0, this._inUseClients.length = 0, i2(this);
  }
  invoke(e4, t3, s5) {
    return this.apply(e4, [t3], s5);
  }
  apply(e4, t3, s5) {
    const o3 = L();
    ("low" === s5?.priority ? this._ongoingLowPriorityJobsQueue : this._ongoingJobsQueue).push({ methodName: e4, data: t3, invokeOptions: s5, resolver: o3 });
    for (let i3 = 0; i3 < this._clientPromises.length; i3++) {
      const e5 = this._clients[i3];
      e5 ? e5.jobAdded() : this._clientPromises[i3].then((e6) => e6?.jobAdded());
    }
    return o3.promise;
  }
  createInvokeProxy(e4) {
    return t2(this, e4);
  }
  on(t3, s5) {
    return Promise.all(this._clientPromises).then(() => t(this._clients.map((e4) => e4.on(t3, s5))));
  }
  openPorts() {
    return new Promise((e4) => {
      const t3 = new Array(this._clientPromises.length);
      let s5 = t3.length;
      for (let i3 = 0; i3 < this._clientPromises.length; ++i3) {
        this._clientPromises[i3].then((o3) => {
          o3 && (t3[i3] = o3.openPort()), 0 === --s5 && e4(t3);
        });
      }
    });
  }
  get test() {
  }
};

export {
  e3 as e,
  e2,
  s4 as s,
  i,
  a,
  f2 as f,
  O,
  E,
  c4 as c
};
//# sourceMappingURL=chunk-GOWWJ2HE.js.map
