import {
  A,
  I,
  R,
  T,
  U,
  b,
  k,
  x
} from "./chunk-N3H25ARD.js";
import {
  l
} from "./chunk-4QUGWCAY.js";
import {
  t
} from "./chunk-JHOESKXH.js";
import {
  a as a2
} from "./chunk-YDAIRKJB.js";
import {
  j
} from "./chunk-XMAXGUBN.js";
import {
  H as H2,
  K,
  Ke,
  Me,
  Ne,
  Re,
  Te,
  ae,
  ie,
  ke,
  ne,
  pe,
  q,
  re,
  te,
  ve,
  we
} from "./chunk-Q7K6M7G6.js";
import {
  o
} from "./chunk-NY6S6EMV.js";
import {
  a,
  r
} from "./chunk-AQGMTI4V.js";
import {
  o as o2
} from "./chunk-6QA2BVC5.js";
import {
  f
} from "./chunk-N3A2BVTW.js";
import {
  P,
  m
} from "./chunk-52HWRRRQ.js";
import {
  y
} from "./chunk-OGOQOMMV.js";
import {
  C
} from "./chunk-6PV45IYU.js";
import {
  z
} from "./chunk-O5TPFXRT.js";
import {
  _,
  c
} from "./chunk-Q6XRAGMA.js";
import {
  H,
  s
} from "./chunk-ZWFY3WY5.js";
import {
  h
} from "./chunk-FXKORAMT.js";

// node_modules/@arcgis/core/portal/support/utils.js
async function r2(r3, t2, s2) {
  const u = s?.findCredential(r3.restUrl);
  if (!u) return null;
  if ("loaded" === r3.loadStatus && "" === t2 && r3.user?.sourceJSON && false === s2) return r3.user.sourceJSON;
  const o3 = { responseType: "json", query: { f: "json" } };
  if (s2 && (o3.query.returnUserLicenseTypeExtensions = true), "" === t2) {
    const e = await H(r3.restUrl + "/community/self", o3);
    if (e.data) {
      const n = e.data;
      if (n?.username) return n;
    }
    return null;
  }
  const i = await H(r3.restUrl + "/community/users/" + t2, o3);
  if (i.data) {
    const e = i.data;
    return e.error ? null : e;
  }
  return null;
}

// node_modules/@arcgis/core/arcade/functions/geomasync.js
function B(n) {
  if (null == n) return n;
  switch (typeof n) {
    case "string":
    case "number":
      return n;
    default:
      throw new a(null, r.InvalidParameter, null);
  }
}
function G(G2) {
  "async" === G2.mode && (G2.functions.disjoint = function(n, t2) {
    return G2.standardFunctionAsync(n, t2, (e, r3, a3) => (a3 = we(a3), x(a3, n, t2), null === a3[0] || null === a3[1] || a2("disjoint", [a3[0].toJSON(), a3[1].toJSON()])));
  }, G2.functions.intersects = function(n, t2) {
    return G2.standardFunctionAsync(n, t2, (e, r3, a3) => (a3 = we(a3), x(a3, n, t2), null !== a3[0] && null !== a3[1] && a2("intersects", [a3[0].toJSON(), a3[1].toJSON()])));
  }, G2.functions.touches = function(n, t2) {
    return G2.standardFunctionAsync(n, t2, (e, r3, a3) => (a3 = we(a3), x(a3, n, t2), null !== a3[0] && null !== a3[1] && a2("touches", [a3[0].toJSON(), a3[1].toJSON()])));
  }, G2.functions.crosses = function(n, t2) {
    return G2.standardFunctionAsync(n, t2, (e, r3, a3) => (a3 = we(a3), x(a3, n, t2), null !== a3[0] && null !== a3[1] && a2("crosses", [a3[0].toJSON(), a3[1].toJSON()])));
  }, G2.functions.within = function(n, t2) {
    return G2.standardFunctionAsync(n, t2, (e, r3, a3) => (a3 = we(a3), x(a3, n, t2), null !== a3[0] && null !== a3[1] && a2("within", [a3[0].toJSON(), a3[1].toJSON()])));
  }, G2.functions.contains = function(n, t2) {
    return G2.standardFunctionAsync(n, t2, (e, r3, a3) => (a3 = we(a3), x(a3, n, t2), null !== a3[0] && null !== a3[1] && a2("contains", [a3[0].toJSON(), a3[1].toJSON()])));
  }, G2.functions.overlaps = function(n, t2) {
    return G2.standardFunctionAsync(n, t2, (e, r3, a3) => (a3 = we(a3), x(a3, n, t2), null !== a3[0] && null !== a3[1] && a2("overlaps", [a3[0].toJSON(), a3[1].toJSON()])));
  }, G2.functions.equals = function(n, t2) {
    return G2.standardFunctionAsync(n, t2, (e, r3, a3) => (ae(a3, 2, 2, n, t2), a3[0] === a3[1] || (a3[0] instanceof c && a3[1] instanceof c ? a2("equals", [a3[0].toJSON(), a3[1].toJSON()]) : (ne(a3[0]) && ne(a3[1]) || !!(ie(a3[0]) && ie(a3[1]) || re(a3[0]) && re(a3[1]))) && a3[0].equals(a3[1]))));
  }, G2.functions.relate = function(n, t2) {
    return G2.standardFunctionAsync(n, t2, (a3, s2, c2) => {
      if (c2 = we(c2), ae(c2, 3, 3, n, t2), c2[0] instanceof c && c2[1] instanceof c) return a2("relate", [c2[0].toJSON(), c2[1].toJSON(), pe(c2[2])]);
      if (c2[0] instanceof c && null === c2[1]) return false;
      if (c2[1] instanceof c && null === c2[0]) return false;
      if (null === c2[0] && null === c2[1]) return false;
      throw new a(n, r.InvalidParameter, t2);
    });
  }, G2.functions.intersection = function(n, t2) {
    return G2.standardFunctionAsync(n, t2, async (e, r3, a3) => (a3 = we(a3), x(a3, n, t2), null === a3[0] || null === a3[1] ? null : f(await a2("intersection", [a3[0].toJSON(), a3[1].toJSON()]))));
  }, G2.functions.union = function(n, t2) {
    return G2.standardFunctionAsync(n, t2, async (o3, s2, c2) => {
      if (0 === (c2 = we(c2)).length) throw new a(n, r.WrongNumberOfParameters, t2);
      const l2 = [];
      if (1 === c2.length) if (o2(c2[0])) {
        for (const a3 of we(c2[0])) if (null !== a3) {
          if (!(a3 instanceof c)) throw new a(n, r.InvalidParameter, t2);
          l2.push(a3.toJSON());
        }
      } else {
        if (!te(c2[0])) {
          if (c2[0] instanceof c) return ke(o(c2[0]), n.spatialReference);
          if (null === c2[0]) return null;
          throw new a(n, r.InvalidParameter, t2);
        }
        for (const a3 of we(c2[0].toArray())) if (null !== a3) {
          if (!(a3 instanceof c)) throw new a(n, r.InvalidParameter, t2);
          l2.push(a3.toJSON());
        }
      }
      else for (const a3 of c2) if (null !== a3) {
        if (!(a3 instanceof c)) throw new a(n, r.InvalidParameter, t2);
        l2.push(a3.toJSON());
      }
      return 0 === l2.length ? null : f(await a2("union", [l2]));
    });
  }, G2.functions.difference = function(n, t2) {
    return G2.standardFunctionAsync(n, t2, async (e, r3, o3) => (o3 = we(o3), x(o3, n, t2), null === o3[0] ? null : null === o3[1] ? o(o3[0]) : f(await a2("difference", [o3[0].toJSON(), o3[1].toJSON()]))));
  }, G2.functions.symmetricdifference = function(n, t2) {
    return G2.standardFunctionAsync(n, t2, async (e, r3, o3) => (o3 = we(o3), x(o3, n, t2), null === o3[0] && null === o3[1] ? null : null === o3[0] ? o(o3[1]) : null === o3[1] ? o(o3[0]) : f(await a2("symmetricDifference", [o3[0].toJSON(), o3[1].toJSON()]))));
  }, G2.functions.clip = function(n, t2) {
    return G2.standardFunctionAsync(n, t2, async (a3, s2, c2) => {
      if (c2 = we(c2), ae(c2, 2, 2, n, t2), !(c2[1] instanceof z) && null !== c2[1]) throw new a(n, r.InvalidParameter, t2);
      if (null === c2[0]) return null;
      if (!(c2[0] instanceof c)) throw new a(n, r.InvalidParameter, t2);
      return null === c2[1] ? null : f(await a2("clip", [c2[0].toJSON(), c2[1].toJSON()]));
    });
  }, G2.functions.cut = function(n, t2) {
    return G2.standardFunctionAsync(n, t2, async (s2, c2, l2) => {
      if (l2 = we(l2), ae(l2, 2, 2, n, t2), !(l2[1] instanceof y) && null !== l2[1]) throw new a(n, r.InvalidParameter, t2);
      if (null === l2[0]) return [];
      if (!(l2[0] instanceof c)) throw new a(n, r.InvalidParameter, t2);
      return null === l2[1] ? [o(l2[0])] : (await a2("cut", [l2[0].toJSON(), l2[1].toJSON()])).map((n2) => f(n2));
    });
  }, G2.functions.area = function(n, t2) {
    return G2.standardFunctionAsync(n, t2, async (a3, s2, c2) => {
      if (ae(c2, 1, 2, n, t2), c2 = we(c2), K(c2[0])) {
        const a4 = await c2[0].sumArea(B(c2[1]), null, n.abortSignal);
        if (n.abortSignal.aborted) throw new a(n, r.Cancelled, t2);
        return a4;
      }
      let l2 = c2[0];
      if ((o2(l2) || te(l2)) && (l2 = Me(c2[0], n.spatialReference)), null === l2) return 0;
      if (!(l2 instanceof c)) throw new a(n, r.InvalidParameter, t2);
      return a2("area", [l2.toJSON(), B(c2[1])]);
    });
  }, G2.functions.areageodetic = function(n, t2) {
    return G2.standardFunctionAsync(n, t2, async (a3, s2, c2) => {
      ae(c2, 1, 3, n, t2);
      let l2 = (c2 = we(c2))[0];
      (o2(l2) || te(l2)) && (l2 = Me(l2, n.spatialReference));
      const u = B(c2[1]), d = A(c2[2]);
      if (K(l2)) {
        const a4 = await l2.sumArea(u, d, n.abortSignal);
        if (n.abortSignal.aborted) throw new a(n, r.Cancelled, t2);
        return a4;
      }
      if (null == l2) return 0;
      if (!H2(l2)) throw new a(n, r.InvalidParameter, t2);
      return a2("geodeticArea", [l2.toJSON(), u, d]);
    });
  }, G2.functions.length = function(n, t2) {
    return G2.standardFunctionAsync(n, t2, async (a3, s2, c2) => {
      if (ae(c2, 1, 2, n, t2), c2 = we(c2), K(c2[0])) {
        const a4 = await c2[0].sumLength(B(c2[1]), null, n.abortSignal);
        if (n.abortSignal.aborted) throw new a(n, r.Cancelled, t2);
        return a4;
      }
      let l2 = c2[0];
      if ((o2(c2[0]) || te(c2[0])) && (l2 = Re(c2[0], n.spatialReference)), null === l2) return 0;
      if (!(l2 instanceof c)) throw new a(n, r.InvalidParameter, t2);
      return a2("length", [l2.toJSON(), B(c2[1])]);
    });
  }, G2.functions.length3d = function(n, t2) {
    return G2.standardFunctionAsync(n, t2, async (a3, s2, c2) => {
      if (ae(c2, 1, 2, n, t2), null === (c2 = we(c2))[0]) return 0;
      let l2 = c2[0];
      if ((o2(c2[0]) || te(c2[0])) && (l2 = Re(c2[0], n.spatialReference)), null === l2) return 0;
      if (!(l2 instanceof c)) throw new a(n, r.InvalidParameter, t2);
      if (true === l2.hasZ) {
        const { convertFromSpatialReferenceUnit: n2, toLengthUnit: t3 } = await import("./unitConversion-BYPQY6BY.js"), e = I(l2);
        return n2(l2.spatialReference, t3(c2[1]), e);
      }
      return a2("length", [l2.toJSON(), B(c2[1])]);
    });
  }, G2.functions.lengthgeodetic = function(n, t2) {
    return G2.standardFunctionAsync(n, t2, async (a3, s2, c2) => {
      ae(c2, 1, 3, n, t2);
      let l2 = (c2 = we(c2))[0];
      (o2(c2[0]) || te(c2[0])) && (l2 = Re(c2[0], n.spatialReference));
      const u = B(c2[1]), d = A(c2[2]);
      if (K(l2)) {
        const a4 = await l2.sumLength(u, d, n.abortSignal);
        if (n.abortSignal.aborted) throw new a(n, r.Cancelled, t2);
        return a4;
      }
      if (null === l2) return 0;
      if (!H2(l2)) throw new a(n, r.InvalidParameter, t2);
      return a2("geodeticLength", [l2.toJSON(), u, d]);
    });
  }, G2.functions.distance = function(n, t2) {
    return G2.standardFunctionAsync(n, t2, async (a3, s2, c2) => {
      c2 = we(c2), ae(c2, 2, 3, n, t2);
      let l2 = c2[0];
      if ((o2(c2[0]) || te(c2[0])) && (l2 = ve(c2[0], n.spatialReference)), !(l2 instanceof c)) throw new a(n, r.InvalidParameter, t2);
      let u = c2[1];
      if ((o2(c2[1]) || te(c2[1])) && (u = ve(c2[1], n.spatialReference)), !(u instanceof c)) throw new a(n, r.InvalidParameter, t2);
      return a2("distance", [l2.toJSON(), u.toJSON(), B(c2[2])]);
    });
  }, G2.functions.distancegeodetic = function(n, t2) {
    return G2.standardFunctionAsync(n, t2, async (a3, s2, c2) => {
      c2 = we(c2), ae(c2, 2, 4, n, t2);
      const l2 = c2[0];
      if (!(l2 instanceof _)) throw new a(n, r.InvalidParameter, t2);
      const u = c2[1];
      if (!(u instanceof _)) throw new a(n, r.InvalidParameter, t2);
      const f2 = new y({ paths: [], spatialReference: l2.spatialReference });
      return f2.addPath([l2, u]), a2("geodeticLength", [f2.toJSON(), B(c2[2]), A(c2[3])]);
    });
  }, G2.functions.densify = function(n, t2) {
    return G2.standardFunctionAsync(n, t2, async (a3, s2, c2) => {
      if (c2 = we(c2), ae(c2, 2, 3, n, t2), null === c2[0]) return null;
      if (!(c2[0] instanceof c)) throw new a(n, r.InvalidParameter, t2);
      const l2 = Ne(c2[1]);
      if (isNaN(l2)) throw new a(n, r.InvalidParameter, t2);
      if (l2 <= 0) throw new a(n, r.InvalidParameter, t2);
      switch (c2[0].type) {
        case "polygon":
        case "polyline":
        case "extent":
          return f(await a2("densify", [c2[0].toJSON(), l2, B(c2[2])]));
        default:
          return c2[0];
      }
    });
  }, G2.functions.densifygeodetic = function(n, t2) {
    return G2.standardFunctionAsync(n, t2, async (a3, s2, c2) => {
      c2 = we(c2), ae(c2, 2, 4, n, t2);
      const l2 = c2[0];
      if (null == l2) return null;
      if (!H2(l2)) throw new a(n, r.InvalidParameter, t2);
      const u = Ne(c2[1]);
      if (isNaN(u)) throw new a(n, r.InvalidParameter, t2);
      if (u <= 0) throw new a(n, r.InvalidParameter, t2);
      const f2 = B(c2[2]), d = A(c2[3]);
      switch (l2.type) {
        case "polygon":
        case "polyline":
        case "extent":
          return f(await a2("geodeticDensify", [l2.toJSON(), u, f2, d]));
        default:
          return l2;
      }
    });
  }, G2.functions.generalize = function(n, t2) {
    return G2.standardFunctionAsync(n, t2, async (a3, s2, c2) => {
      if (c2 = we(c2), ae(c2, 2, 4, n, t2), null === c2[0]) return null;
      if (!(c2[0] instanceof c)) throw new a(n, r.InvalidParameter, t2);
      const l2 = Ne(c2[1]);
      if (isNaN(l2)) throw new a(n, r.InvalidParameter, t2);
      const u = Te(q(c2[2], true));
      return f(await a2("generalize", [c2[0].toJSON(), l2, B(c2[3]), { removeDegenerateParts: u }]));
    });
  }, G2.functions.buffer = function(n, t2) {
    return G2.standardFunctionAsync(n, t2, async (s2, c2, l2) => {
      if (l2 = we(l2), ae(l2, 2, 3, n, t2), null === l2[0]) return null;
      if (!(l2[0] instanceof c)) throw new a(n, r.InvalidParameter, t2);
      const u = Ne(l2[1]);
      if (isNaN(u)) throw new a(n, r.InvalidParameter, t2);
      return 0 === u ? o(l2[0]) : f(await a2("buffer", [l2[0].toJSON(), u, B(l2[2])]));
    });
  }, G2.functions.buffergeodetic = function(n, t2) {
    return G2.standardFunctionAsync(n, t2, async (s2, c2, l2) => {
      l2 = we(l2), ae(l2, 2, 4, n, t2);
      const u = l2[0];
      if (null == u) return null;
      if (!H2(u)) throw new a(n, r.InvalidParameter, t2);
      const f2 = Ne(l2[1]);
      if (isNaN(f2)) throw new a(n, r.InvalidParameter, t2);
      if (0 === f2) return o(u);
      const d = B(l2[2]), w = A(l2[3]);
      return f(await a2("geodesicBuffer", [u.toJSON(), f2, d, w]));
    });
  }, G2.functions.offset = function(n, t2) {
    return G2.standardFunctionAsync(n, t2, async (a3, s2, c2) => {
      if (c2 = we(c2), ae(c2, 2, 6, n, t2), null === c2[0]) return null;
      if (!(c2[0] instanceof P || c2[0] instanceof y)) throw new a(n, r.InvalidParameter, t2);
      const l2 = Ne(c2[1]);
      if (isNaN(l2)) throw new a(n, r.InvalidParameter, t2);
      const u = U(c2[3]), f2 = Ne(q(c2[4], 10));
      if (isNaN(f2)) throw new a(n, r.InvalidParameter, t2);
      const d = Ne(q(c2[5], 0));
      if (isNaN(d)) throw new a(n, r.InvalidParameter, t2);
      return f(await a2("offset", [c2[0].toJSON(), l2, B(c2[2]), { joins: u, miterLimit: f2, flattenError: d }]));
    });
  }, G2.functions.rotate = function(n, t2) {
    return G2.standardFunctionAsync(n, t2, async (a3, s2, c2) => {
      if (c2 = we(c2), ae(c2, 2, 3, n, t2), null === c2[0]) return null;
      if (!(c2[0] instanceof c)) throw new a(n, r.InvalidParameter, t2);
      const l2 = c2[0] instanceof z ? P.fromExtent(c2[0]) : c2[0], u = Ne(c2[1]);
      if (isNaN(u)) throw new a(n, r.InvalidParameter, t2);
      const f2 = q(c2[2], null);
      if (null === f2) {
        const n2 = "point" === l2.type ? l2 : l2.extent?.center;
        return f(await a2("rotate", [l2.toJSON(), u, n2?.x, n2?.y]));
      }
      if (f2 instanceof _) return f(await a2("rotate", [l2.toJSON(), u, f2.x, f2.y]));
      throw new a(n, r.InvalidParameter, t2);
    });
  }, G2.functions.centroid = function(n, t2) {
    return G2.standardFunctionAsync(n, t2, async (a3, s2, c2) => {
      if (c2 = we(c2), ae(c2, 1, 2, n, t2), null === c2[0]) return null;
      const l2 = T(c2[1]);
      let u = c2[0];
      if ((o2(c2[0]) || te(c2[0])) && (u = "geometric" === l2 ? ve(c2[0], n.spatialReference) : Me(c2[0], n.spatialReference), null === u)) return null;
      if (!(u instanceof c)) throw new a(n, r.InvalidParameter, t2);
      return f("geometric" === l2 ? await a2("centroid", [u.toJSON()]) : await a2("labelPoint", [u.toJSON()]));
    });
  }, G2.functions.measuretocoordinate = function(n, t2) {
    return G2.standardFunctionAsync(n, t2, R);
  }, G2.functions.pointtocoordinate = function(n, t2) {
    return G2.standardFunctionAsync(n, t2, b);
  }, G2.functions.distancetocoordinate = function(n, t2) {
    return G2.standardFunctionAsync(n, t2, k);
  }, G2.functions.multiparttosinglepart = function(n, t2) {
    return G2.standardFunctionAsync(n, t2, async (s2, c2, l2) => {
      if (l2 = we(l2), ae(l2, 1, 1, n, t2), null === l2[0]) return null;
      if (!(l2[0] instanceof c)) throw new a(n, r.InvalidParameter, t2);
      if (l2[0] instanceof _) return [ke(o(l2[0]), n.spatialReference)];
      if (l2[0] instanceof z) return [ke(o(l2[0]), n.spatialReference)];
      const u = f(await a2("simplify", [l2[0].toJSON()]));
      if (u instanceof P) {
        const n2 = [], t3 = [];
        for (let e = 0; e < u.rings.length; e++) if (u.isClockwise(u.rings[e])) {
          const t4 = f({ rings: [u.rings[e]], hasZ: true === u.hasZ, hasM: true === u.hasM, spatialReference: u.spatialReference.toJSON() });
          n2.push(t4);
        } else t3.push({ ring: u.rings[e], pt: u.getPoint(e, 0) });
        for (let e = 0; e < t3.length; e++) for (let r3 = 0; r3 < n2.length; r3++) if (n2[r3].contains(t3[e].pt)) {
          n2[r3].addRing(t3[e].ring);
          break;
        }
        return n2;
      }
      if (u instanceof y) {
        const n2 = [];
        for (let t3 = 0; t3 < u.paths.length; t3++) {
          const e = f({ paths: [u.paths[t3]], hasZ: true === u.hasZ, hasM: true === u.hasM, spatialReference: u.spatialReference.toJSON() });
          n2.push(e);
        }
        return n2;
      }
      if (l2[0] instanceof m) {
        const t3 = [], e = ke(o(l2[0]), n.spatialReference);
        for (let n2 = 0; n2 < e.points.length; n2++) t3.push(e.getPoint(n2));
        return t3;
      }
      return null;
    });
  }, G2.functions.isselfintersecting = function(n, t2) {
    return G2.standardFunctionAsync(n, t2, async (n2, t3, e) => {
      ae(e, 1, 1, n2, t3);
      let r3 = (e = we(e))[0];
      if ((o2(e[0]) || te(e[0])) && (r3 = Re(e[0], n2.spatialReference)), r3 instanceof m) {
        const n3 = r3.points;
        for (let t4 = 0; t4 < n3.length; t4++) for (let e2 = t4 + 1; e2 < n3.length; e2++) if (h(n3[t4], n3[e2])) return true;
        return false;
      }
      return (r3 instanceof y || r3 instanceof P) && await a2("isSelfIntersecting", [r3.toJSON()]);
    });
  }, G2.functions.issimple = function(n, t2) {
    return G2.standardFunctionAsync(n, t2, (a3, s2, c2) => {
      if (c2 = we(c2), ae(c2, 1, 1, n, t2), null === c2[0]) return true;
      if (!(c2[0] instanceof c)) throw new a(n, r.InvalidParameter, t2);
      return a2("isSimple", [c2[0].toJSON()]);
    });
  }, G2.functions.simplify = function(n, t2) {
    return G2.standardFunctionAsync(n, t2, async (a3, s2, c2) => {
      if (c2 = we(c2), ae(c2, 1, 1, n, t2), null === c2[0]) return null;
      if (!(c2[0] instanceof c)) throw new a(n, r.InvalidParameter, t2);
      return f(await a2("simplify", [c2[0].toJSON()]));
    });
  }, G2.functions.convexhull = function(n, t2) {
    return G2.standardFunctionAsync(n, t2, async (a3, s2, c2) => {
      if (c2 = we(c2), ae(c2, 1, 1, n, t2), null === c2[0]) return null;
      if (!(c2[0] instanceof c)) throw new a(n, r.InvalidParameter, t2);
      return f(await a2("convexHull", [c2[0].toJSON()]));
    });
  }, G2.functions.getuser = function(a3, i) {
    return G2.standardFunctionAsync(a3, i, async (s2, c2, l2) => {
      ae(l2, 0, 2, a3, i);
      let f2 = q(l2[1], ""), d = true === f2;
      if (f2 = true === f2 || false === f2 ? "" : pe(f2), 0 === l2.length || l2[0] instanceof t) {
        let n;
        n = a3.services?.portal ? a3.services.portal : C.getDefault(), l2.length > 0 && (n = l(l2[0], n));
        const e = await r2(n, f2, d);
        if (e) {
          const n2 = JSON.parse(JSON.stringify(e));
          for (const t2 of ["lastLogin", "created", "modified"]) void 0 !== n2[t2] && null !== n2[t2] && (n2[t2] = new Date(n2[t2]));
          return j.convertObjectToArcadeDictionary(n2, Ke(a3));
        }
        return null;
      }
      let m2 = null;
      if (K(l2[0]) && (m2 = l2[0]), m2) {
        if (d = false, f2) return null;
        await m2.load();
        const e = await m2.getOwningSystemUrl();
        if (!e) {
          if (!f2) {
            const n = await m2.getIdentityUser();
            return n ? j.convertObjectToArcadeDictionary({ username: n }, Ke(a3)) : null;
          }
          return null;
        }
        let r3;
        r3 = a3.services?.portal ? a3.services.portal : C.getDefault(), r3 = l(new t(e), r3);
        const i2 = await r2(r3, f2, d);
        if (i2) {
          const n = JSON.parse(JSON.stringify(i2));
          for (const t2 of ["lastLogin", "created", "modified"]) void 0 !== n[t2] && null !== n[t2] && (n[t2] = new Date(n[t2]));
          return j.convertObjectToArcadeDictionary(n, Ke(a3));
        }
        return null;
      }
      throw new a(a3, r.InvalidParameter, i);
    });
  }, G2.functions.nearestcoordinate = function(n, a3) {
    return G2.standardFunctionAsync(n, a3, async (s2, c2, l2) => {
      if (l2 = we(l2), ae(l2, 2, 2, n, a3), !(l2[0] instanceof c || null === l2[0])) throw new a(n, r.InvalidParameter, a3);
      if (!(l2[1] instanceof _ || null === l2[1])) throw new a(n, r.InvalidParameter, a3);
      if (null === l2[0] || null === l2[1]) return null;
      const u = l2[0] instanceof z ? P.fromExtent(l2[0]) : l2[0], f2 = await a2("getNearestCoordinate", [u.toJSON(), l2[1].toJSON(), { calculateLeftRightSide: true }]);
      return null === f2 ? null : j.convertObjectToArcadeDictionary({ coordinate: f(f2.coordinate), distance: f2.distance, sideOfLine: 0 === f2.distance ? "straddle" : f2.isRightSide ? "right" : "left" }, Ke(n), false, true);
    });
  }, G2.functions.nearestvertex = function(n, a3) {
    return G2.standardFunctionAsync(n, a3, async (s2, c2, l2) => {
      if (l2 = we(l2), ae(l2, 2, 2, n, a3), !(l2[0] instanceof c || null === l2[0])) throw new a(n, r.InvalidParameter, a3);
      if (!(l2[1] instanceof _ || null === l2[1])) throw new a(n, r.InvalidParameter, a3);
      if (null === l2[0] || null === l2[1]) return null;
      const u = l2[0] instanceof z ? P.fromExtent(l2[0]) : l2[0], f2 = await a2("getNearestVertex", [u.toJSON(), l2[1].toJSON()]);
      return null === f2 ? null : j.convertObjectToArcadeDictionary({ coordinate: f(f2.coordinate), distance: f2.distance, sideOfLine: 0 === f2.distance ? "straddle" : f2.isRightSide ? "right" : "left" }, Ke(n), false, true);
    });
  });
}

export {
  G
};
//# sourceMappingURL=chunk-GPO2JOA4.js.map
