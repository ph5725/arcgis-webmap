import {
  s as s3
} from "./chunk-AF3FX2UV.js";
import {
  B,
  F,
  G,
  H,
  L,
  M,
  N,
  P,
  U,
  V,
  X,
  __,
  l,
  n,
  o
} from "./chunk-BZYXFNL4.js";
import {
  b,
  e2 as e,
  s as s2
} from "./chunk-GZ2P4SCJ.js";
import {
  i2 as i,
  s
} from "./chunk-XWG6QGFK.js";
import {
  has
} from "./chunk-FXKORAMT.js";

// node_modules/@arcgis/core/views/webgl/checkWebGLError.js
var t = () => i.getLogger("esri.views.webgl.checkWebGLError");
function n2(e3) {
  switch (e3) {
    case __.INVALID_ENUM:
      return "Invalid Enum. An unacceptable value has been specified for an enumerated argument.";
    case __.INVALID_VALUE:
      return "Invalid Value. A numeric argument is out of range.";
    case __.INVALID_OPERATION:
      return "Invalid Operation. The specified command is not allowed for the current state.";
    case __.INVALID_FRAMEBUFFER_OPERATION:
      return "Invalid Framebuffer operation. The currently bound framebuffer is not framebuffer complete when trying to render to or to read from it.";
    case __.OUT_OF_MEMORY:
      return "Out of memory. Not enough memory is left to execute the command.";
    case __.CONTEXT_LOST_WEBGL:
      return "WebGL context has been lost";
    default:
      return "Unknown error";
  }
}
var a = !!has("enable-feature:webgl-debug");
function c() {
  return a;
}
function u() {
  return a;
}
function s4(r, o3 = c()) {
  if (o3) {
    const o4 = r.getError();
    if (o4) {
      const r2 = n2(o4), a4 = new Error().stack;
      t().error(new s("webgl-error", "WebGL error occurred", { message: r2, stack: a4 }));
    }
  }
}

// node_modules/@arcgis/core/views/webgl/FBOAttachmentType.js
var e2;
!function(e3) {
  e3[e3.TextureDescriptor = 0] = "TextureDescriptor", e3[e3.Texture = 1] = "Texture", e3[e3.Renderbuffer = 2] = "Renderbuffer";
}(e2 || (e2 = {}));

// node_modules/@arcgis/core/views/webgl/Util.js
function R(e3) {
  const r = e3.gl;
  switch (r.getError()) {
    case r.NO_ERROR:
      return null;
    case r.INVALID_ENUM:
      return "An unacceptable value has been specified for an enumerated argument";
    case r.INVALID_VALUE:
      return "An unacceptable value has been specified for an argument";
    case r.INVALID_OPERATION:
      return "The specified command is not allowed for the current state";
    case r.INVALID_FRAMEBUFFER_OPERATION:
      return "The currently bound framebuffer is not framebuffer complete";
    case r.OUT_OF_MEMORY:
      return "Not enough memory is left to execute the command";
    case r.CONTEXT_LOST_WEBGL:
      return "WebGL context is lost";
  }
  return "Unknown error";
}
function u2(r, t2, s5, a4, c2 = 0) {
  const n3 = r.gl;
  r.bindBuffer(s5);
  for (const o3 of a4) {
    const s6 = t2.get(o3.name);
    if (null == s6) {
      console.warn(`There is no location for vertex attribute '${o3.name}' defined.`);
      continue;
    }
    const a5 = c2 * o3.stride;
    if (o3.count <= 4) n3.vertexAttribPointer(s6, o3.count, o3.type, o3.normalized, o3.stride, o3.offset + a5), n3.enableVertexAttribArray(s6), o3.divisor > 0 && r.gl.vertexAttribDivisor(s6, o3.divisor);
    else if (9 === o3.count) for (let e3 = 0; e3 < 3; e3++) n3.vertexAttribPointer(s6 + e3, 3, o3.type, o3.normalized, o3.stride, o3.offset + 12 * e3 + a5), n3.enableVertexAttribArray(s6 + e3), o3.divisor > 0 && r.gl.vertexAttribDivisor(s6 + e3, o3.divisor);
    else if (16 === o3.count) for (let e3 = 0; e3 < 4; e3++) n3.vertexAttribPointer(s6 + e3, 4, o3.type, o3.normalized, o3.stride, o3.offset + 16 * e3 + a5), n3.enableVertexAttribArray(s6 + e3), o3.divisor > 0 && r.gl?.vertexAttribDivisor(s6 + e3, o3.divisor);
    else console.error("Unsupported vertex attribute element count: " + o3.count);
    if (c()) {
      const e3 = R(r), t3 = s3(o3.type), s7 = o3.offset, c3 = Math.round(t3 / s7) !== t3 / s7 ? `. Offset not a multiple of stride. DataType requires ${t3} bytes, but descriptor has an offset of ${s7}` : "";
      e3 && console.error(`Unable to bind vertex attribute "${o3.name}" with baseInstanceOffset ${a5}${c3}:`, e3, o3);
    }
  }
}
function A(e3, r, t2, s5) {
  const a4 = e3.gl;
  e3.bindBuffer(t2);
  for (const c2 of s5) {
    const t3 = r.get(c2.name);
    if (c2.count <= 4) a4.disableVertexAttribArray(t3), c2.divisor && c2.divisor > 0 && e3.gl?.vertexAttribDivisor(t3, 0);
    else if (9 === c2.count) for (let r2 = 0; r2 < 3; r2++) a4.disableVertexAttribArray(t3 + r2), c2.divisor && c2.divisor > 0 && e3.gl?.vertexAttribDivisor(t3 + r2, 0);
    else if (16 === c2.count) for (let r2 = 0; r2 < 4; r2++) a4.disableVertexAttribArray(t3 + r2), c2.divisor && c2.divisor > 0 && e3.gl?.vertexAttribDivisor(t3 + r2, 0);
    else console.error("Unsupported vertex attribute element count: " + c2.count);
  }
  e3.unbindBuffer(N.ARRAY_BUFFER);
}
function G2(e3) {
  switch (e3) {
    case M.ALPHA:
    case M.LUMINANCE:
    case M.RED:
    case M.RED_INTEGER:
    case B.R8:
    case B.R8I:
    case B.R8UI:
    case B.R8_SNORM:
    case V.STENCIL_INDEX8:
      return 1;
    case M.LUMINANCE_ALPHA:
    case M.RG:
    case M.RG_INTEGER:
    case B.RGBA4:
    case B.R16F:
    case B.R16I:
    case B.R16UI:
    case B.RG8:
    case B.RG8I:
    case B.RG8UI:
    case B.RG8_SNORM:
    case B.RGB565:
    case B.RGB5_A1:
    case n.DEPTH_COMPONENT16:
      return 2;
    case M.RGB:
    case M.RGB_INTEGER:
    case B.RGB8:
    case B.RGB8I:
    case B.RGB8UI:
    case B.RGB8_SNORM:
    case B.SRGB8:
    case n.DEPTH_COMPONENT24:
      return 3;
    case M.RGBA:
    case M.RGBA_INTEGER:
    case B.RGBA8:
    case B.R32F:
    case B.R11F_G11F_B10F:
    case B.RG16F:
    case B.R32I:
    case B.R32UI:
    case B.RG16I:
    case B.RG16UI:
    case B.RGBA8I:
    case B.RGBA8UI:
    case B.RGBA8_SNORM:
    case B.SRGB8_ALPHA8:
    case B.RGB9_E5:
    case B.RGB10_A2UI:
    case B.RGB10_A2:
    case n.DEPTH_COMPONENT32F:
    case H.DEPTH24_STENCIL8:
      return 4;
    case H.DEPTH32F_STENCIL8:
      return 5;
    case B.RGB16F:
    case B.RGB16I:
    case B.RGB16UI:
      return 6;
    case B.RG32F:
    case B.RG32I:
    case B.RG32UI:
    case B.RGBA16F:
    case B.RGBA16I:
    case B.RGBA16UI:
      return 8;
    case B.RGB32F:
    case B.RGB32I:
    case B.RGB32UI:
      return 12;
    case B.RGBA32F:
    case B.RGBA32I:
    case B.RGBA32UI:
      return 16;
    case l.COMPRESSED_RGB_S3TC_DXT1_EXT:
    case l.COMPRESSED_RGBA_S3TC_DXT1_EXT:
      return 0.5;
    case l.COMPRESSED_RGBA_S3TC_DXT3_EXT:
    case l.COMPRESSED_RGBA_S3TC_DXT5_EXT:
      return 1;
    case l.COMPRESSED_R11_EAC:
    case l.COMPRESSED_SIGNED_R11_EAC:
    case l.COMPRESSED_RGB8_ETC2:
    case l.COMPRESSED_SRGB8_ETC2:
    case l.COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2:
    case l.COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2:
      return 0.5;
    case l.COMPRESSED_RG11_EAC:
    case l.COMPRESSED_SIGNED_RG11_EAC:
    case l.COMPRESSED_RGBA8_ETC2_EAC:
    case l.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC:
      return 1;
  }
  return 0;
}

// node_modules/@arcgis/core/views/webgl/TextureDescriptor.js
var a2 = class {
  constructor(r = 0, a4 = r) {
    this.width = r, this.height = a4, this.type = e2.TextureDescriptor, this.target = G.TEXTURE_2D, this.pixelFormat = M.RGBA, this.dataType = X.UNSIGNED_BYTE, this.samplingMode = L.LINEAR, this.wrapMode = P.REPEAT, this.maxAnisotropy = 1, this.flipped = false, this.hasMipmap = false, this.isOpaque = false, this.unpackAlignment = 4, this.preMultiplyAlpha = false, this.compareEnabled = false, this.linearFilterDepth = false, this.depth = 1, this.isImmutable = false;
  }
};
function o2(i2) {
  return i2.width <= 0 || i2.height <= 0 || i2.depth <= 0 ? 0 : Math.round(i2.width * i2.height * i2.depth * (i2.hasMipmap ? 4 / 3 : 1) * (null == i2.internalFormat ? 4 : G2(i2.internalFormat)) * (i2.target === G.TEXTURE_CUBE_MAP ? 6 : 1));
}

// node_modules/@arcgis/core/views/webgl/textureUtils.js
var h = () => i.getLogger("esri/views/webgl/textureUtils");
function m(t2) {
  const { width: e3, height: n3, depth: r } = t2;
  (null != e3 && e3 < 0 || null != n3 && n3 < 0 || null != r && r < 0) && h().error("Negative dimension parameters are not allowed!");
  const { internalFormat: i2 } = t2;
  if (i2 && (f(i2) || E(i2))) {
    const { linearFilterDepth: e4, compareEnabled: n4, samplingMode: r2, hasMipmap: i3 } = t2;
    i3 && h().error("Depth textures cannot have mipmaps"), e4 ? r2 !== L.LINEAR && r2 !== L.NEAREST && h().error("Depth textures cannot sample mipmaps") : (r2 !== L.NEAREST && h().error("Depth textures without filtering must use NEAREST filtering"), n4 && h().error("Depth textures without filtering cannot use compare function"));
  }
}
function p(t2) {
  return t2 in B;
}
function f(t2) {
  return t2 in n;
}
function E(t2) {
  return t2 in H;
}
function d(t2) {
  return null != t2 && t2 in l;
}
function T(t2) {
  return null != t2 && "type" in t2 && "compressed" === t2.type;
}
function R2(t2) {
  return null != t2 && "byteLength" in t2;
}
function w(t2) {
  return null != t2 && !T(t2) && !R2(t2);
}
function D(t2) {
  return t2 === G.TEXTURE_3D || t2 === G.TEXTURE_2D_ARRAY;
}
function F2(t2, e3, n3, r = 1) {
  let i2 = Math.max(e3, n3);
  return t2 === G.TEXTURE_3D && (i2 = Math.max(i2, r)), Math.floor(Math.log2(i2)) + 1;
}
function N2(e3) {
  if (null != e3.internalFormat) return e3.internalFormat;
  switch (e3.dataType) {
    case X.FLOAT:
      switch (e3.pixelFormat) {
        case M.RGBA:
          return B.RGBA32F;
        case M.RGB:
          return B.RGB32F;
        default:
          throw new s("texture:unknown-format", "Unable to derive format");
      }
    case X.UNSIGNED_BYTE:
      switch (e3.pixelFormat) {
        case M.RGBA:
          return B.RGBA8;
        case M.RGB:
          return B.RGB8;
      }
  }
  const { pixelFormat: l2 } = e3;
  return e3.internalFormat = l2 === F.DEPTH_STENCIL ? H.DEPTH24_STENCIL8 : l2 === F.DEPTH_COMPONENT ? n.DEPTH_COMPONENT24 : l2, e3.internalFormat;
}
function x(t2) {
  let e3 = "width" in t2 ? t2.width : t2.codedWidth, n3 = "height" in t2 ? t2.height : t2.codedHeight;
  const r = 1;
  return t2 instanceof HTMLVideoElement && (e3 = t2.videoWidth, n3 = t2.videoHeight), { width: e3, height: n3, depth: r };
}

// node_modules/@arcgis/core/views/webgl/ValidatedTextureDescriptor.js
var a3 = class _a2 extends a2 {
  constructor(t2, a4) {
    switch (super(), this.context = t2, Object.assign(this, a4), this.internalFormat) {
      case B.R16F:
      case B.R32F:
      case B.R8_SNORM:
      case B.R8:
        this.pixelFormat = M.RED;
        break;
      case B.R8I:
      case B.R8UI:
      case B.R16I:
      case B.R16UI:
      case B.R32I:
      case B.R32UI:
        this.pixelFormat = M.RED_INTEGER;
    }
  }
  static validate(s5, e3) {
    return new _a2(s5, e3);
  }
};

// node_modules/@arcgis/core/views/webgl/Texture.js
var D2 = () => i.getLogger("esri/views/webgl/Texture");
var _a;
var S = (_a = class {
  constructor(e3, i2 = null, r = null) {
    if (this.type = e2.Texture, this._glName = null, this._samplingModeDirty = false, this._wrapModeDirty = false, this._shadowFilterDirty = false, this._wasImmutablyAllocated = false, "context" in e3) this._descriptor = e3, r = i2;
    else {
      const r2 = a3.validate(e3, i2);
      if (!r2) throw new s("texture:invalid-descriptor", "Texture descriptor invalid");
      this._descriptor = r2;
    }
    this._descriptor.target === G.TEXTURE_CUBE_MAP ? this._setDataCubeMap(r) : this.setData(r);
  }
  get glName() {
    return this._glName;
  }
  get descriptor() {
    return this._descriptor;
  }
  get usedMemory() {
    return o2(this._descriptor);
  }
  get cachedMemory() {
    return this.usedMemory;
  }
  get isDirty() {
    return this._samplingModeDirty || this._wrapModeDirty || this._shadowFilterDirty;
  }
  get hasWebGLTextureObject() {
    return !!this._glName;
  }
  dispose() {
    this.abortCompression(), this._descriptor.context.gl && this.hasWebGLTextureObject && (this._descriptor.context.instanceCounter.decrement(o.Texture, this), this._descriptor.context.unbindTexture(this), this._descriptor.context.gl.deleteTexture(this._glName), this._glName = null);
  }
  release() {
    this.dispose();
  }
  resize(e3, i2) {
    const r = this._descriptor;
    if (r.width !== e3 || r.height !== i2) {
      if (this._wasImmutablyAllocated) throw new s("texture:immutable-resize", "Immutable textures can't be resized!");
      r.width = e3, r.height = i2, this._descriptor.target === G.TEXTURE_CUBE_MAP ? this._setDataCubeMap(null) : this.setData(null);
    }
  }
  enableCompression(t2) {
    this._descriptor.compress = t2;
  }
  disableCompression() {
    this._descriptor.compress = void 0;
  }
  setData(t2) {
    this.abortCompression(), !T(t2) && this._descriptor.internalFormat && this._descriptor.internalFormat in l && (this._descriptor.internalFormat = void 0), this._setData(t2), !T(t2) && this._descriptor.compress && this._compressOnWorker(t2);
  }
  updateData(i2, r, s5, o3, a4, n3, p2 = 0) {
    n3 || D2().error("An attempt to use uninitialized data!"), this.hasWebGLTextureObject || D2().error("An attempt to update uninitialized texture!");
    const l2 = this._descriptor;
    l2.internalFormat = N2(l2);
    const { context: h2, pixelFormat: m2, dataType: d2, target: c2, isImmutable: T2 } = l2;
    if (T2 && !this._wasImmutablyAllocated) throw new s("texture:uninitialized", "Cannot update immutable texture before allocation!");
    const x2 = h2.bindTexture(this, _a.TEXTURE_UNIT_FOR_UPDATES, true);
    (r < 0 || s5 < 0 || r + o3 > l2.width || s5 + a4 > l2.height) && D2().error("An attempt to update out of bounds of the texture!"), this._configurePixelStorage();
    const { gl: E2 } = h2;
    p2 && (o3 && a4 || D2().warn("Must pass width and height if `UNPACK_SKIP_ROWS` is used"), E2.pixelStorei(E2.UNPACK_SKIP_ROWS, p2)), w(n3) ? E2.texSubImage2D(c2, i2, r, s5, o3, a4, m2, d2, n3) : T(n3) ? E2.compressedTexSubImage2D(c2, i2, r, s5, o3, a4, l2.internalFormat, n3.levels[i2]) : E2.texSubImage2D(c2, i2, r, s5, o3, a4, m2, d2, n3), p2 && E2.pixelStorei(E2.UNPACK_SKIP_ROWS, 0), h2.bindTexture(x2, _a.TEXTURE_UNIT_FOR_UPDATES);
  }
  updateData3D(i2, r, s5, o3, a4, n3, p2, l2) {
    l2 || D2().error("An attempt to use uninitialized data!"), this.hasWebGLTextureObject || D2().error("An attempt to update an uninitialized texture!");
    const h2 = this._descriptor;
    h2.internalFormat = N2(h2);
    const { context: m2, pixelFormat: d2, dataType: c2, isImmutable: g, target: x2 } = h2;
    if (g && !this._wasImmutablyAllocated) throw new s("texture:uninitialized", "Cannot update immutable texture before allocation!");
    D(x2) || D2().warn("Attempting to set 3D texture data on a non-3D texture");
    const E2 = m2.bindTexture(this, _a.TEXTURE_UNIT_FOR_UPDATES);
    m2.setActiveTexture(_a.TEXTURE_UNIT_FOR_UPDATES), (r < 0 || s5 < 0 || o3 < 0 || r + a4 > h2.width || s5 + n3 > h2.height || o3 + p2 > h2.depth) && D2().error("An attempt to update out of bounds of the texture!"), this._configurePixelStorage();
    const { gl: M2 } = m2;
    if (T(l2)) l2 = l2.levels[i2], M2.compressedTexSubImage3D(x2, i2, r, s5, o3, a4, n3, p2, h2.internalFormat, l2);
    else {
      const t2 = l2;
      M2.texSubImage3D(x2, i2, r, s5, o3, a4, n3, p2, d2, c2, t2);
    }
    m2.bindTexture(E2, _a.TEXTURE_UNIT_FOR_UPDATES);
  }
  generateMipmap() {
    const i2 = this._descriptor;
    if (0 === i2.width || 0 === i2.height) return;
    if (!i2.hasMipmap) {
      if (this._wasImmutablyAllocated) throw new s("texture:immutable-change", "Cannot add mipmaps to immutable texture after allocation");
      i2.hasMipmap = true, this._samplingModeDirty = true, m(i2);
    }
    i2.samplingMode === L.LINEAR ? (this._samplingModeDirty = true, i2.samplingMode = L.LINEAR_MIPMAP_NEAREST) : i2.samplingMode === L.NEAREST && (this._samplingModeDirty = true, i2.samplingMode = L.NEAREST_MIPMAP_NEAREST);
    const r = this._descriptor.context.bindTexture(this, _a.TEXTURE_UNIT_FOR_UPDATES);
    this._descriptor.context.setActiveTexture(_a.TEXTURE_UNIT_FOR_UPDATES), this._descriptor.context.gl.generateMipmap(i2.target), this._descriptor.context.bindTexture(r, _a.TEXTURE_UNIT_FOR_UPDATES);
  }
  clearMipmap() {
    const e3 = this._descriptor;
    if (e3.hasMipmap) {
      if (this._wasImmutablyAllocated) throw new s("texture:immutable-change", "Cannot delete mipmaps to immutable texture after allocation");
      e3.hasMipmap = false, this._samplingModeDirty = true, m(e3);
    }
    e3.samplingMode === L.LINEAR_MIPMAP_NEAREST ? (this._samplingModeDirty = true, e3.samplingMode = L.LINEAR) : e3.samplingMode === L.NEAREST_MIPMAP_NEAREST && (this._samplingModeDirty = true, e3.samplingMode = L.NEAREST);
  }
  setSamplingMode(t2) {
    t2 !== this._descriptor.samplingMode && (this._descriptor.samplingMode = t2, this._samplingModeDirty = true);
  }
  setWrapMode(t2) {
    t2 !== this._descriptor.wrapMode && (this._descriptor.wrapMode = t2, m(this._descriptor), this._wrapModeDirty = true);
  }
  setShadowFiltering(t2) {
    t2 !== this._descriptor.linearFilterDepth && (this._descriptor.linearFilterDepth = this._descriptor.compareEnabled = t2, this.setSamplingMode(t2 ? L.LINEAR : L.NEAREST), m(this._descriptor), this._shadowFilterDirty = true);
  }
  applyChanges() {
    this._samplingModeDirty && (this._applySamplingMode(), this._samplingModeDirty = false), this._wrapModeDirty && (this._applyWrapMode(), this._wrapModeDirty = false), this._shadowFilterDirty && (this._applyShadowMode(), this._shadowFilterDirty = false);
  }
  abortCompression() {
    this._compressionAbortController = e(this._compressionAbortController);
  }
  _setData(i2, r) {
    const s5 = this._descriptor, a4 = s5.context?.gl;
    if (!a4) return;
    s4(a4), this.hasWebGLTextureObject || (this._glName = a4.createTexture(), s5.context.instanceCounter.increment(o.Texture, this)), m(s5);
    const p2 = s5.context.bindTexture(this, _a.TEXTURE_UNIT_FOR_UPDATES);
    s5.context.setActiveTexture(_a.TEXTURE_UNIT_FOR_UPDATES), this._configurePixelStorage(), s4(a4);
    const l2 = r ?? s5.target, h2 = D(l2);
    if (w(i2)) this._setDataFromTexImageSource(i2, l2);
    else {
      const { width: e3, height: r2, depth: n3 } = s5;
      if (null == e3 || null == r2) throw new s("texture:missing-size", "Width and height must be specified!");
      if (h2 && null == n3) throw new s("texture:missing-depth", "Depth must be specified!");
      if (s5.internalFormat = N2(s5), s5.isImmutable && !this._wasImmutablyAllocated && this._texStorage(l2, s5.internalFormat, s5.hasMipmap, e3, r2, n3), T(i2)) {
        if (!d(s5.internalFormat)) throw new s("texture:format-mismatch", "Attempting to use compressed data with an uncompressed format!");
        this._setDataFromCompressedSource(i2, s5.internalFormat, l2);
      } else this._texImage(l2, 0, s5.internalFormat, e3, r2, n3, i2), s4(a4), s5.hasMipmap && this.generateMipmap();
    }
    this._applySamplingMode(), this._applyWrapMode(), this._applyAnisotropicFilteringParameters(), this._applyShadowMode(), s4(a4), s5.context.bindTexture(p2, _a.TEXTURE_UNIT_FOR_UPDATES);
  }
  _setDataCubeMap(t2 = null) {
    for (let e3 = G.TEXTURE_CUBE_MAP_POSITIVE_X; e3 <= G.TEXTURE_CUBE_MAP_NEGATIVE_Z; e3++) this._setData(t2, e3);
  }
  _configurePixelStorage() {
    const t2 = this._descriptor.context.gl, { unpackAlignment: e3, flipped: i2, preMultiplyAlpha: r } = this._descriptor;
    t2.pixelStorei(t2.UNPACK_ALIGNMENT, e3), t2.pixelStorei(t2.UNPACK_FLIP_Y_WEBGL, i2 ? 1 : 0), t2.pixelStorei(t2.UNPACK_PREMULTIPLY_ALPHA_WEBGL, r ? 1 : 0);
  }
  _setDataFromTexImageSource(t2, e3) {
    const { gl: i2 } = this._descriptor.context, r = this._descriptor;
    r.internalFormat = N2(r);
    const s5 = D(e3), { width: a4, height: n3, depth: p2 } = x(t2);
    r.width && r.height, r.width || (r.width = a4), r.height || (r.height = n3), s5 && r.depth, s5 && (r.depth = p2), r.isImmutable && !this._wasImmutablyAllocated && this._texStorage(e3, r.internalFormat, r.hasMipmap, a4, n3, p2), this._texImage(e3, 0, r.internalFormat, a4, n3, p2, t2), s4(i2), r.hasMipmap && (this.generateMipmap(), s4(i2));
  }
  _setDataFromCompressedSource(t2, e3, i2) {
    const r = this._descriptor, { width: s5, height: o3, depth: a4 } = r, n3 = t2.levels, p2 = F2(i2, s5, o3, a4), l2 = Math.min(p2, n3.length) - 1;
    this._descriptor.context.gl.texParameteri(r.target, U.MAX_LEVEL, l2), this._forEachMipmapLevel((t3, r2, s6, o4) => {
      const a5 = n3[Math.min(t3, n3.length - 1)];
      this._compressedTexImage(i2, t3, e3, r2, s6, o4, a5);
    }, l2);
  }
  _texStorage(e3, i2, r, s5, o3, a4) {
    const { gl: n3 } = this._descriptor.context;
    if (!p(i2) && !f(i2) && !E(i2)) throw new s("texture:missing-format", "Immutable textures must have a sized internal format");
    if (!this._descriptor.isImmutable) return;
    const p2 = r ? F2(e3, s5, o3, a4) : 1;
    if (D(e3)) {
      if (null == a4) throw new s("texture:missing-depth", "Missing depth dimension for 3D texture upload");
      n3.texStorage3D(e3, p2, i2, s5, o3, a4);
    } else n3.texStorage2D(e3, p2, i2, s5, o3);
    this._wasImmutablyAllocated = true;
  }
  _texImage(e3, i2, r, s5, o3, a4, n3) {
    const p2 = this._descriptor.context.gl, l2 = D(e3), { isImmutable: h2, pixelFormat: m2, dataType: d2 } = this._descriptor;
    if (h2) {
      if (null != n3) {
        const r2 = n3;
        if (l2) {
          if (null == a4) throw new s("texture:missing-depth", "Missing depth dimension for 3D texture upload");
          p2.texSubImage3D(e3, i2, 0, 0, 0, s5, o3, a4, m2, d2, r2);
        } else p2.texSubImage2D(e3, i2, 0, 0, s5, o3, m2, d2, r2);
      }
    } else {
      const h3 = n3;
      if (l2) {
        if (null == a4) throw new s("texture:missing-depth", "Missing depth dimension for 3D texture upload");
        p2.texImage3D(e3, i2, r, s5, o3, a4, 0, m2, d2, h3);
      } else p2.texImage2D(e3, i2, r, s5, o3, 0, m2, d2, h3);
    }
  }
  _compressedTexImage(e3, i2, r, s5, o3, a4, n3) {
    const p2 = this._descriptor.context.gl, l2 = D(e3);
    if (this._descriptor.isImmutable) {
      if (null != n3) if (l2) {
        if (null == a4) throw new s("texture:missing-depth", "Missing depth dimension for 3D texture upload");
        p2.compressedTexSubImage3D(e3, i2, 0, 0, 0, s5, o3, a4, r, n3);
      } else p2.compressedTexSubImage2D(e3, i2, 0, 0, s5, o3, r, n3);
    } else if (l2) {
      if (null == a4) throw new s("texture:missing-depth", "Missing depth dimension for 3D texture upload");
      p2.compressedTexImage3D(e3, i2, r, s5, o3, a4, 0, n3);
    } else p2.compressedTexImage2D(e3, i2, r, s5, o3, 0, n3);
  }
  async _compressOnWorker(t2) {
    const { width: i2, height: o3, context: a4, flipped: n3, preMultiplyAlpha: p2, hasMipmap: l2 } = this._descriptor, h2 = this._descriptor.compress?.compressionTracker, d2 = this._descriptor.compress?.compressionCallback, { compressedTextureETC: c2, compressedTextureS3TC: _ } = a4.capabilities;
    if (!_a.compressionWorkerHandle?.isCompressible(t2, this._descriptor) || !c2 && !_) return;
    this.abortCompression();
    const u3 = new AbortController();
    this._compressionAbortController = u3, h2?.increment();
    try {
      let s5;
      t2 instanceof Uint8Array ? s5 = t2.buffer : (s5 = await createImageBitmap(t2, { imageOrientation: n3 ? "flipY" : "none" }), s2(u3));
      const a5 = { data: s5, width: i2, height: o3, needsFlip: t2 instanceof Uint8Array && this.descriptor.flipped, components: this._descriptor.pixelFormat === M.RGBA ? 4 : 3, preMultiplyAlpha: p2, hasMipmap: l2, hasETC: !!c2, hasS3TC: !!_ }, h3 = await _a.compressionWorkerHandle.invoke(a5, u3.signal, "low");
      if (s2(u3), h3.compressedTexture && this.hasWebGLTextureObject) {
        const t3 = this.usedMemory;
        this._descriptor.internalFormat = h3.internalFormat, this._setData(h3.compressedTexture), d2?.(t3 - this.usedMemory);
      }
    } catch (g) {
      b(g) || D2().error("Texture compression failed!");
    } finally {
      h2?.decrement(), this._compressionAbortController?.signal.aborted && (this._compressionAbortController = null);
    }
  }
  _forEachMipmapLevel(e3, i2 = 1 / 0) {
    let { width: r, height: s5, depth: o3, hasMipmap: n3, target: p2 } = this._descriptor;
    const l2 = p2 === G.TEXTURE_3D;
    if (null == r || null == s5 || l2 && null == o3) throw new s("texture:missing-size", "Missing texture dimensions for mipmap calculation");
    for (let t2 = 0; e3(t2, r, s5, o3), n3 && (1 !== r || 1 !== s5 || l2 && 1 !== o3) && !(t2 >= i2); ++t2) r = Math.max(1, r >> 1), s5 = Math.max(1, s5 >> 1), l2 && (o3 = Math.max(1, o3 >> 1));
  }
  _applySamplingMode() {
    const t2 = this._descriptor, e3 = t2.context?.gl;
    let i2 = t2.samplingMode, r = t2.samplingMode;
    i2 === L.LINEAR_MIPMAP_NEAREST || i2 === L.LINEAR_MIPMAP_LINEAR ? (i2 = L.LINEAR, t2.hasMipmap || (r = L.LINEAR)) : i2 !== L.NEAREST_MIPMAP_NEAREST && i2 !== L.NEAREST_MIPMAP_LINEAR || (i2 = L.NEAREST, t2.hasMipmap || (r = L.NEAREST)), e3.texParameteri(t2.target, e3.TEXTURE_MAG_FILTER, i2), e3.texParameteri(t2.target, e3.TEXTURE_MIN_FILTER, r);
  }
  _applyWrapMode() {
    const t2 = this._descriptor, e3 = t2.context?.gl;
    "number" == typeof t2.wrapMode ? (e3.texParameteri(t2.target, e3.TEXTURE_WRAP_S, t2.wrapMode), e3.texParameteri(t2.target, e3.TEXTURE_WRAP_T, t2.wrapMode)) : (e3.texParameteri(t2.target, e3.TEXTURE_WRAP_S, t2.wrapMode.s), e3.texParameteri(t2.target, e3.TEXTURE_WRAP_T, t2.wrapMode.t));
  }
  _applyShadowMode() {
    const t2 = this._descriptor, e3 = t2.context?.gl, i2 = t2.compareEnabled ? e3.COMPARE_REF_TO_TEXTURE : e3.NONE;
    e3.texParameteri(t2.target, e3.TEXTURE_COMPARE_MODE, i2), t2.compareEnabled && e3.texParameteri(t2.target, e3.TEXTURE_COMPARE_FUNC, e3.GREATER), s4(e3);
  }
  _applyAnisotropicFilteringParameters() {
    const t2 = this._descriptor, e3 = t2.context.capabilities.textureFilterAnisotropic;
    if (!e3) return;
    t2.context.gl.texParameterf(t2.target, e3.TEXTURE_MAX_ANISOTROPY, t2.maxAnisotropy ?? 1);
  }
}, _a.TEXTURE_UNIT_FOR_UPDATES = 0, _a.compressionWorkerHandle = null, _a);

export {
  c,
  u,
  s4 as s,
  e2 as e,
  R,
  u2,
  A,
  G2 as G,
  a2 as a,
  f,
  a3 as a2,
  S
};
//# sourceMappingURL=chunk-H6F6O2KE.js.map
