import {
  Z
} from "./chunk-JEYXDNAT.js";
import {
  h,
  i,
  r
} from "./chunk-NY6S6EMV.js";
import {
  e2
} from "./chunk-VCRP2PLV.js";
import {
  f
} from "./chunk-N3A2BVTW.js";
import {
  e,
  t
} from "./chunk-LMEOPAGQ.js";
import {
  s
} from "./chunk-XWG6QGFK.js";

// node_modules/@arcgis/core/support/ArcadeExpression.js
var l = ["geometry", "scale", "timeProperties"];
function d(e3, t2) {
  if (null != t2) for (const r2 of l) t2.hasArcadeDependency(r2) && e3.add(r2);
  return e3;
}
function h2(e3, t2) {
  return p.create(e3, t2, null, ["$feature", "$view"]);
}
function m(e3, t2, r2) {
  return p.create(e3, t2, r2, ["$feature", "$view", "$config"]);
}
var p = class _p {
  static async create(e3, r2, i2, n) {
    const { arcade: s2, Dictionary: o } = await e2();
    let c;
    try {
      c = s2.parseScript(e3);
    } catch (f3) {
      throw new s("arcade-bad-expression", "Failed to parse arcade script", { script: e3, error: f3 });
    }
    const l2 = s2.scriptUsesGeometryEngine(c);
    l2 && await s2.enableGeometrySupport(), await s2.loadDependentModules(/* @__PURE__ */ new Set(), c, null, false, l2);
    const d2 = { vars: n.reduce((e4, t2) => ({ ...e4, [t2]: null }), {}), spatialReference: r2, useAsync: false }, u = s2.compileScript(c, d2);
    let h3 = null;
    null != i2 && (h3 = new o(i2), h3.immutable = true);
    const m2 = new o();
    return m2.immutable = false, m2.setField("scale", 0), new _p(e3, s2, c, u, r2, m2, h3, o);
  }
  constructor(e3, t2, r2, i2, n, s2, a, o) {
    this.script = e3, this._arcade = t2, this._syntaxTree = r2, this._compiled = i2, this._spatialReference = n, this._viewDict = s2, this._configDict = a, this._dictionaryCtor = o, this._dependencies = /* @__PURE__ */ new Map(), this._featureReader = new f2(), this._dependencies.set("geometry", t2.scriptTouchesGeometry(this._syntaxTree)), this._dependencies.set("scale", this._arcade.referencesMember(this._syntaxTree, "scale")), this._dependencies.set("timeProperties", this._arcade.scriptUsesViewProperties(this._syntaxTree, ["timeProperties"]));
  }
  evaluate(t2, r2) {
    const i2 = r2.$view?.timeZone;
    if (r2.$view) {
      let t3;
      if (this._viewDict.setField("scale", r2.$view.scale), null != r2.$view.timeProperties) {
        const { currentStart: n, currentEnd: s2 } = r2.$view.timeProperties;
        t3 = new this._dictionaryCtor({ currentStart: null != n ? null != i2 ? h.epochToArcadeDate(n, i2) : h.unknownEpochToArcadeDate(n) : void 0, currentEnd: null != s2 ? null != i2 ? h.epochToArcadeDate(s2, i2) : h.unknownEpochToArcadeDate(s2) : void 0, startIncluded: true, endIncluded: true });
      }
      this._viewDict.setField("timeProperties", t3);
    }
    return this._compiled({ vars: { $view: this._viewDict, $config: this._configDict, $feature: t2 }, spatialReference: this._spatialReference, timeZone: i2 });
  }
  repurposeFeature(e3, t2) {
    return this._featureReader.bind(e3, t2, this._spatialReference), this._featureReader;
  }
  references(e3) {
    return this._dependencies.get(e3) ?? false;
  }
};
var f2 = class {
  constructor() {
    this._boundTarget = null, this._boundSchema = { fields: null, fieldsIndex: null, spatialReference: null, get geometryType() {
      return null;
    }, get objectIdField() {
      return null;
    } }, this.arcadeDeclaredClass = "esri.arcade.Feature", this._contextTimeZone = null;
  }
  bind(e3, t2, r2) {
    const i2 = t2 ?? new Z(_(e3.attributes));
    this._boundTarget = e3, this._boundSchema.fields = i2.fields, this._boundSchema.fieldsIndex = i2, this._boundSchema.spatialReference = r2;
  }
  _getField(e3) {
    return this._boundSchema.fieldsIndex.get(e3);
  }
  get contextTimeZone() {
    return this._contextTimeZone;
  }
  set contextTimeZone(e3) {
    this._contextTimeZone = e3;
  }
  readArcadeFeature() {
    return this;
  }
  hasField(e3) {
    return this._boundSchema.fieldsIndex.has(e3);
  }
  geometry() {
    if ("fromJSON" in this._boundTarget) return this._boundTarget.geometry;
    const e3 = f(this._boundTarget.geometry);
    if (e3) {
      if (!this._boundSchema.spatialReference) throw new Error("InternalError: Expected spatial reference to be defined");
      e3.spatialReference = this._boundSchema.spatialReference;
    }
    return e3;
  }
  isUnknownDateTimeField(e3) {
    return this._boundSchema.fieldsIndex.getTimeZone(e3) === t;
  }
  field(t2, n = true) {
    const s2 = this._getField(t2);
    if (s2) {
      const n2 = this._boundTarget.attributes[s2.name];
      if (null == n2) return null;
      switch (s2.type) {
        case "date-only":
        case "esriFieldTypeDateOnly":
          return i.fromReader(n2);
        case "time-only":
        case "esriFieldTypeTimeOnly":
          return r.fromReader(n2);
        case "esriFieldTypeTimestampOffset":
        case "timestamp-offset":
          return h.fromReaderAsTimeStampOffset(n2);
        case "date":
        case "esriFieldTypeDate":
          return this.isUnknownDateTimeField(t2) ? h.unknownEpochToArcadeDate(n2) : h.epochToArcadeDate(n2, this.contextTimeZone ?? e);
        default:
          return n2;
      }
    }
    if (n) throw new Error(`Field ${t2} does not exist`);
    return null;
  }
  setField(e3, t2) {
    throw new Error("Unable to update feature attribute values, feature is readonly");
  }
  keys() {
    return this._boundSchema.fieldsIndex.fields.map((e3) => e3.name);
  }
  castToText(e3 = false) {
    return JSON.stringify(this._boundTarget);
  }
  gdbVersion() {
    return null;
  }
  fullSchema() {
    return this._boundSchema;
  }
  castAsJson(e3 = null) {
    return { attributes: this._boundTarget.attributes, geometry: true === e3?.keepGeometryType ? this.geometry() : this.geometry()?.toJSON() ?? null };
  }
  castAsJsonAsync(e3 = null, t2 = null) {
    return Promise.resolve(this.castAsJson(t2));
  }
};
function _(e3) {
  const t2 = [];
  for (const r2 in e3) t2.push({ name: r2, alias: r2, type: "string" == typeof e3[r2] ? "esriFieldTypeString" : "esriFieldTypeDouble" });
  return t2;
}

export {
  d,
  h2 as h,
  m,
  f2 as f,
  _
};
//# sourceMappingURL=chunk-I6IIPG56.js.map
