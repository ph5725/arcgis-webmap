import {
  A as A2,
  E as E3,
  R,
  b as b4,
  c as c2,
  f2 as f,
  l4 as l3,
  o as o3,
  p as p2,
  r as r2
} from "./chunk-4KOJY6ZH.js";
import {
  l2
} from "./chunk-CSNPKNAQ.js";
import {
  E as E2,
  U as U2,
  b as b3
} from "./chunk-JSKJKRHP.js";
import {
  W
} from "./chunk-RODRBIXX.js";
import {
  ie,
  t as t2
} from "./chunk-4XEYVSQH.js";
import {
  A,
  c
} from "./chunk-4B62IUNF.js";
import {
  e as e3
} from "./chunk-RVXIJHL6.js";
import {
  U
} from "./chunk-BGR5EVZD.js";
import {
  e as e4
} from "./chunk-UZRZVWLE.js";
import {
  i as i2
} from "./chunk-TNKA4BMD.js";
import {
  m
} from "./chunk-DLD56RZZ.js";
import {
  t
} from "./chunk-67CCONUO.js";
import {
  e as e2
} from "./chunk-NZPABYQQ.js";
import {
  E,
  o as o2,
  s,
  u as u2
} from "./chunk-TMFB3DKM.js";
import {
  a,
  r
} from "./chunk-7FAVUXK2.js";
import {
  D
} from "./chunk-7CUBIFKN.js";
import {
  o
} from "./chunk-UGTICYU7.js";
import {
  d3 as d2
} from "./chunk-LYSDGL5S.js";
import {
  C,
  G,
  V,
  Z,
  b as b2,
  d,
  q,
  u
} from "./chunk-FKFXOPPT.js";
import {
  l
} from "./chunk-KE3WBZYL.js";
import {
  n as n3
} from "./chunk-DNZK6PPI.js";
import {
  _,
  n as n2
} from "./chunk-RACDQ3AL.js";
import {
  g,
  h,
  p
} from "./chunk-VNTEV3V4.js";
import {
  b,
  e2 as e
} from "./chunk-GZ2P4SCJ.js";
import {
  i2 as i
} from "./chunk-XWG6QGFK.js";
import {
  n
} from "./chunk-FXKORAMT.js";

// node_modules/@arcgis/core/renderers/support/RenderingInfo.js
var l4 = class {
  constructor(l7, t7) {
    this.renderer = l7, this.symbol = t7, this.color = null, this.size = null, this.opacity = null, this.outlineSize = null, this.heading = null, this.tilt = null, this.roll = null;
  }
};

// node_modules/@arcgis/core/renderers/support/renderingInfoUtils.js
function i3(e8, t7) {
  if (null != e8.symbol) return e8.symbol;
  const o5 = t7?.renderer;
  return null != o5 && "dot-density" !== o5.type ? o5.getSymbol(e8, t7) : null;
}
function r3(e8, r7) {
  const l7 = i3(e8, r7);
  if (null == l7) return null;
  const n5 = r7?.renderer, a6 = new l4(n5, l7);
  if (null == n5 || !("visualVariables" in n5) || !n5.visualVariables) return a6;
  const s4 = D(n5, e8, r7) ?? [], u5 = ["proportional", "proportional", "proportional"];
  for (const { variable: t7, value: o5 } of s4) if (null != o5 || "size" === t7.type && t7.useSymbolValue) switch (t7.type) {
    case "color":
      a6.color = o5?.toRgba();
      break;
    case "size":
      if ("outline" === t7.target) a6.outlineSize = o5;
      else {
        const e9 = t7.axis, i4 = t7.useSymbolValue ? "symbol-value" : o5 ?? "proportional";
        switch (e9) {
          case "width":
            u5[0] = i4;
            break;
          case "depth":
            u5[1] = i4;
            break;
          case "height":
            u5[2] = i4;
            break;
          case "width-and-depth":
            u5[0] = u5[1] = i4;
            break;
          default:
            u5[0] = u5[1] = u5[2] = i4;
        }
      }
      break;
    case "opacity":
      a6.opacity = o5;
      break;
    case "rotation":
      switch (t7.axis) {
        case "tilt":
          a6.tilt = o5;
          break;
        case "roll":
          a6.roll = o5;
          break;
        default:
          a6.heading = o5;
      }
  }
  return "proportional" === u5[0] && "proportional" === u5[1] && "proportional" === u5[2] || (a6.size = u5), a6;
}
async function l5(e8, t7) {
  return null != e8.symbol ? e8.symbol : t7?.renderer?.getSymbolAsync(e8, t7) ?? null;
}
async function n4(i4, r7) {
  const n5 = await l5(i4, r7);
  if (!n5) return null;
  const a6 = r7?.renderer, s4 = new l4(a6, n5);
  if (!a6 || !("visualVariables" in a6) || !a6.visualVariables) return s4;
  const u5 = D(a6, i4, r7) ?? [], p8 = ["proportional", "proportional", "proportional"];
  for (const { variable: t7, value: o5 } of u5) if ("color" === t7.type) s4.color = l.toUnitRGBA(o5);
  else if ("size" === t7.type) if ("outline" === t7.target) s4.outlineSize = o5;
  else {
    const e8 = t7.axis, i5 = t7.useSymbolValue ? "symbol-value" : o5;
    "width" === e8 ? p8[0] = i5 : "depth" === e8 ? p8[1] = i5 : "height" === e8 ? p8[2] = i5 : p8[0] = p8[1] = "width-and-depth" === e8 ? i5 : p8[2] = i5;
  }
  else "opacity" === t7.type ? s4.opacity = o5 : "rotation" === t7.type && "tilt" === t7.axis ? s4.tilt = o5 : "rotation" === t7.type && "roll" === t7.axis ? s4.roll = o5 : "rotation" === t7.type && (s4.heading = o5);
  return (isFinite(p8[0]) || isFinite(p8[1]) || isFinite(p8[2])) && (s4.size = p8), s4;
}
function a2(e8, t7 = 0) {
  const o5 = e8[t7];
  return "number" == typeof o5 && isFinite(o5) ? o5 : null;
}
function s2(e8) {
  for (let t7 = 0; t7 < 3; t7++) {
    const o5 = e8[t7];
    if ("number" == typeof o5) return isFinite(o5) ? o5 : 0;
  }
  return 0;
}

// node_modules/@arcgis/core/views/3d/layers/graphics/constants.js
var r4 = 1.2;
var t3 = a;

// node_modules/@arcgis/core/views/3d/layers/graphics/Graphics3DPathSymbolLayerConstants.js
var o4 = 3;
var t4 = 3;
var c3 = 10;

// node_modules/@arcgis/core/views/3d/layers/graphics/SymbolComplexity.js
var e5 = class {
  constructor(e8) {
    this.estimated = false, this.verticesPerFeature = e8.verticesPerFeature ?? 0, this.verticesPerCoordinate = e8.verticesPerCoordinate ?? 0, this.drawCallsPerFeature = e8.drawCallsPerFeature ?? 0, this.memory = e8.memory ?? new a3();
  }
};
var t5 = class extends e5 {
  constructor(e8) {
    super(e8), this.estimated = true;
  }
};
var s3 = class extends e5 {
  constructor(e8, t7) {
    super(t7), this.numComplexities = e8;
  }
};
var r5 = class extends t5 {
  constructor(e8, t7) {
    super(t7), this.numComplexities = e8;
  }
};
var a3 = class {
  constructor() {
    this.bytesPerFeature = 0, this.bytesPerFeatureLabel = 0, this.resourceBytes = 0, this.draped = { bytesPerFeature: 0, bytesPerFeatureLabel: 0 };
  }
};

// node_modules/@arcgis/core/views/3d/layers/graphics/defaultSymbolComplexity.js
var P = new t5({});
function m2(e8) {
  if ("web-style" === e8.type) return P;
  return F(e8.symbolLayers.toArray().map((r7) => L(e8, r7)));
}
function F(e8) {
  let r7 = 0, t7 = 0, a6 = 0, s4 = false, u5 = 0;
  const o5 = new a3();
  for (const b6 of e8) null != b6 && (r7 += b6.verticesPerFeature, t7 += b6.verticesPerCoordinate, a6 += b6.drawCallsPerFeature, o5.bytesPerFeature += b6.memory.bytesPerFeature, o5.bytesPerFeatureLabel += b6.memory.bytesPerFeatureLabel, o5.resourceBytes += b6.memory.resourceBytes, o5.draped.bytesPerFeature += b6.memory.bytesPerFeature, o5.draped.bytesPerFeatureLabel += b6.memory.bytesPerFeatureLabel, s4 = s4 || b6.estimated, ++u5);
  return s4 ? new r5(u5, { verticesPerFeature: r7, verticesPerCoordinate: t7, drawCallsPerFeature: a6, memory: o5 }) : new s3(u5, { verticesPerFeature: r7, verticesPerCoordinate: t7, drawCallsPerFeature: a6, memory: o5 });
}
function d3(e8) {
  const r7 = F(e8);
  return r7.numComplexities > 0 && (r7.verticesPerFeature /= r7.numComplexities, r7.verticesPerCoordinate /= r7.numComplexities, r7.drawCallsPerFeature /= r7.numComplexities, r7.memory.bytesPerFeature /= r7.numComplexities, r7.memory.bytesPerFeatureLabel /= r7.numComplexities, r7.memory.resourceBytes /= r7.numComplexities, r7.memory.draped.bytesPerFeature /= r7.numComplexities, r7.memory.draped.bytesPerFeatureLabel /= r7.numComplexities), r7;
}
var p3 = {};
function L(u5, y3) {
  const i4 = C2(u5, y3), c4 = c(y3) ? 2 : 0;
  switch (y3.type) {
    case "extrude":
      return new e5({ verticesPerFeature: -12, verticesPerCoordinate: 12, drawCallsPerFeature: c4, memory: i4 });
    case "fill":
      if ("mesh-3d" === u5.type) return new e5({ drawCallsPerFeature: c4, memory: i4 });
      if (null != y3.outline && y3.outline.size > 0) return new e5({ verticesPerFeature: -12, verticesPerCoordinate: 9, memory: i4 });
    case "water":
      return new e5({ verticesPerFeature: -6, verticesPerCoordinate: 3, memory: i4 });
    case "line":
      return new e5({ verticesPerFeature: -6, verticesPerCoordinate: 6, memory: i4 });
    case "object":
      return y3.resource?.href ? new t5({ verticesPerFeature: 100, memory: i4 }) : { ...f2(y3.resource?.primitive ?? d2), memory: i4 };
    case "path": {
      let r7 = 0, u6 = 0;
      switch (y3.profile) {
        case "circle":
          r7 = c3;
          break;
        case "quad":
          r7 = 4;
          break;
        default:
          return void n(y3.profile);
      }
      switch (y3.join) {
        case "round":
          u6 = o4;
          break;
        case "miter":
        case "bevel":
          u6 = 1;
          break;
        default:
          return;
      }
      const o5 = 2 * r7, c5 = r7 * u6 * 2, n5 = c5 + o5;
      let l7 = -2 * c5 - o5;
      switch (y3.cap) {
        case "none":
          break;
        case "butt":
        case "square":
          l7 += 2 * (r7 - 1);
          break;
        case "round":
          l7 += 2 * (r7 * (t4 - 1) * 2 + r7);
          break;
        default:
          return;
      }
      return new e5({ verticesPerFeature: l7, verticesPerCoordinate: n5, memory: i4 });
    }
    case "text": {
      const e8 = "label-3d" === u5.type ? 0 : 2;
      return new e5({ verticesPerFeature: 6, memory: i4, drawCallsPerFeature: e8 });
    }
    case "icon":
      return new e5({ verticesPerFeature: 6, memory: i4 });
    default:
      return;
  }
}
function C2(r7, t7) {
  const a6 = "point-3d" === r7.type;
  switch (t7.type) {
    case "extrude":
      return t7.edges && t7.edges.size > 0 ? E4.EXTRUDE_EDGES : E4.EXTRUDE;
    case "fill":
      return null != t7.outline && t7.outline.size > 0 ? E4.FILL_OUTLINE : E4.FILL;
    case "water":
      return E4.FILL;
    case "line":
      return "round" === t7.join ? E4.LINE_ROUND : E4.LINE_MITER;
    case "path":
      switch (t7.join) {
        case "round":
          switch (t7.profile) {
            case "circle":
              return E4.PATH_ROUND_CIRCLE;
            case "quad":
              return E4.PATH_ROUND_QUAD;
            default:
              return void n(t7.profile);
          }
        case "miter":
        case "bevel":
          switch (t7.profile) {
            case "circle":
              return E4.PATH_MITER_CIRCLE;
            case "quad":
              return E4.PATH_MITER_QUAD;
            default:
              return void n(t7.profile);
          }
        default:
          return;
      }
    case "object":
      return a6 ? E4.OBJECT_POINT : E4.OBJECT_POLYGON;
    case "icon":
    case "text":
      return a6 ? E4.ICON_POINT : E4.ICON_POLYGON;
    default:
      return;
  }
}
function f2(e8) {
  const r7 = p3[e8];
  if (r7) return r7;
  const t7 = w(l2(e8, new W({}, { spherical: true })).levels);
  return p3[e8] = new e5({ verticesPerFeature: t7 }), p3[e8];
}
function w(e8) {
  return e8.reduce((e9, r7, t7) => e9 + r7.numVertices * (1 / 10 ** t7), 0) / e8.reduce((e9, r7, t7) => e9 + 1 / 10 ** t7, 0);
}
var E4 = { ICON_POINT: { bytesPerFeature: 3062.2534325974652, bytesPerFeatureLabel: 3605.891255, resourceBytes: 0, draped: { bytesPerFeature: 2029.6324697040875, bytesPerFeatureLabel: 3844.951315 } }, ICON_POLYGON: { bytesPerFeature: 3379.2552364427283, bytesPerFeatureLabel: 3144.1341316666667, resourceBytes: 0, draped: { bytesPerFeature: 2594.5439970589305, bytesPerFeatureLabel: 3391.0192816666668 } }, OBJECT_POINT: { bytesPerFeature: 755.5754513856272, bytesPerFeatureLabel: 3229.7766, resourceBytes: 0, draped: { bytesPerFeature: 755.5754513856272, bytesPerFeatureLabel: 3229.7766 } }, OBJECT_POLYGON: { bytesPerFeature: 1235.9612556276838, bytesPerFeatureLabel: 2710.5796950000004, resourceBytes: 0, draped: { bytesPerFeature: 1235.9612556276838, bytesPerFeatureLabel: 2710.5796950000004 } }, LINE_MITER: { bytesPerFeature: 2343.0098144295366, bytesPerFeatureLabel: 2863.2415183333333, resourceBytes: 0, draped: { bytesPerFeature: 2118.062960542706, bytesPerFeatureLabel: 2993.8707950000003 } }, LINE_ROUND: { bytesPerFeature: 3180.281669156425, bytesPerFeatureLabel: 2884.062711666667, resourceBytes: 0, draped: { bytesPerFeature: 2687.1048133674676, bytesPerFeatureLabel: 2965.844025 } }, PATH_MITER_CIRCLE: { bytesPerFeature: 26642.015762630304, bytesPerFeatureLabel: 3147.8341749999995, resourceBytes: 0, draped: { bytesPerFeature: 26642.015762630304, bytesPerFeatureLabel: 3147.8341749999995 } }, PATH_ROUND_CIRCLE: { bytesPerFeature: 21137.659435445064, bytesPerFeatureLabel: 2827.1294000000003, resourceBytes: 0, draped: { bytesPerFeature: 21137.659435445064, bytesPerFeatureLabel: 2827.1294000000003 } }, PATH_MITER_QUAD: { bytesPerFeature: 25592.283303929427, bytesPerFeatureLabel: 3354.641775, resourceBytes: 0, draped: { bytesPerFeature: 25592.283303929427, bytesPerFeatureLabel: 3354.641775 } }, PATH_ROUND_QUAD: { bytesPerFeature: 23212.92773696872, bytesPerFeatureLabel: 3173.6644499999998, resourceBytes: 0, draped: { bytesPerFeature: 23212.92773696872, bytesPerFeatureLabel: 3173.6644499999998 } }, FILL: { bytesPerFeature: 3069.6014181747005, bytesPerFeatureLabel: 3050.617135, resourceBytes: 0, draped: { bytesPerFeature: 2547.9765396831167, bytesPerFeatureLabel: 3166.2821483333337 } }, FILL_OUTLINE: { bytesPerFeature: 3653.779598313774, bytesPerFeatureLabel: 2787.5897050000003, resourceBytes: 0, draped: { bytesPerFeature: 2884.528596112384, bytesPerFeatureLabel: 2907.420548333333 } }, EXTRUDE: { bytesPerFeature: 5785.658350054202, bytesPerFeatureLabel: 2787.498365, resourceBytes: 0, draped: { bytesPerFeature: 5785.658350054202, bytesPerFeatureLabel: 2787.498365 } }, EXTRUDE_EDGES: { bytesPerFeature: 3380.451670091342, bytesPerFeatureLabel: 2245.881308333333, resourceBytes: 0, draped: { bytesPerFeature: 3380.451670091342, bytesPerFeatureLabel: 2245.881308333333 } } };

// node_modules/@arcgis/core/views/3d/webgl-engine/lib/GeometryWithMapPositions.js
function e6(o5) {
  return null != o5.mapPositions;
}

// node_modules/@arcgis/core/views/3d/layers/graphics/ElevationAligners.js
function u3(t7, e8, o5, n5, r7) {
  const a6 = t7.stageObject, s4 = a6.geometries;
  let i4 = 0;
  for (const l7 of s4) {
    if (!e6(l7)) continue;
    const { update: t8, averageGeometrySampledElevation: s5 } = M(l7, e8, o5, n5, r7);
    i4 += s5, t8 && a6.geometryVertexAttributeUpdated(l7, e4.POSITION);
  }
  return i4 / s4.length;
}
function p5(e8, n5, a6, s4, m6, f6) {
  const c4 = e8.stageObject, u5 = n5.centerPointInElevationSR;
  let p8 = 0;
  if (c4.usesVerticalDistanceToGround) s4(u5, E5), E3(c4, E5.verticalDistanceToGround), p8 = E5.sampledElevation;
  else {
    s4(u5, E5);
    "absolute-height" !== n5.mode && (p8 = E5.sampledElevation);
  }
  const b6 = n3(g2, f6 ?? c4.transformation), I2 = o2(v, b6[12], b6[13], b6[14]);
  t2.TESTS_DISABLE_OPTIMIZATIONS ? (T[0] = u5.x, T[1] = u5.y, T[2] = E5.z, m(u5.spatialReference, T, b6, m6.spatialReference) && (f6 ? n3(f6, b6) : c4.transformation = b6)) : m6.setAltitudeOfTransformation(E5.z, b6);
  const S3 = d4 / m6.unitInMeters;
  return (Math.abs(b6[12] - I2[0]) >= S3 || Math.abs(b6[13] - I2[1]) >= S3 || Math.abs(b6[14] - I2[2]) >= S3) && (f6 ? n3(f6, b6) : c4.transformation = b6), p8;
}
var g2 = e2();
function b5(t7, e8, n5, a6, s4) {
  const i4 = t7.graphics3DSymbolLayer.lodRenderer;
  if (null == i4) return 0;
  const m6 = e8.centerPointInElevationSR;
  a6(m6, E5);
  const f6 = "absolute-height" !== e8.mode ? E5.sampledElevation : 0, c4 = i4.instanceData, u5 = t7.instanceIndex, p8 = h2;
  c4.getGlobalTransform(u5, p8);
  const g5 = o2(v, p8[12], p8[13], p8[14]);
  t2.TESTS_DISABLE_OPTIMIZATIONS ? (T[0] = m6.x, T[1] = m6.y, T[2] = E5.z, m(m6.spatialReference, T, p8, s4.spatialReference) && c4.setGlobalTransform(u5, p8)) : s4.setAltitudeOfTransformation(E5.z, p8);
  const b6 = d4 / s4.unitInMeters;
  return (t2.TESTS_DISABLE_OPTIMIZATIONS || Math.abs(p8[12] - g5[0]) >= b6 || Math.abs(p8[13] - g5[1]) >= b6 || Math.abs(p8[14] - g5[2]) >= b6) && c4.setGlobalTransform(u5, p8), f6;
}
function I(t7, e8, o5, n5, r7) {
  const a6 = t7.stageObject, s4 = a6.geometries;
  if (0 === s4.length) return 0;
  let i4 = 0, l7 = null, m6 = 0, u5 = false;
  for (const p8 of s4) {
    if (!e6(p8)) continue;
    const t8 = p8.attributes.get(e4.POSITION);
    if (t8 !== l7) {
      const { update: a7, averageGeometrySampledElevation: s5 } = M(p8, e8, o5, n5, r7);
      m6 = s5, l7 = t8, u5 = a7;
    }
    u5 && a6.geometryVertexAttributeUpdated(p8, e4.POSITION), i4 += m6;
  }
  return i4 / s4.length;
}
var d4 = 0.01;
var T = n2();
var S = n2();
var O = n2();
var h2 = e2();
var v = n2();
var E5 = new R();
function M(t7, e8, o5, n5, r7) {
  let s4 = false;
  const i4 = t7.transformation, f6 = e8.requiresSampledElevationInfo;
  S[0] = i4[12], S[1] = i4[13], S[2] = i4[14], t7.invalidateBoundingInfo();
  const u5 = t7.getMutableAttribute(e4.POSITION), p8 = u5.data, g5 = u5.size, b6 = p8.length / g5, I2 = new r2(t7.mapPositions, o5);
  let h4 = 0, v4 = 0;
  for (let m6 = 0; m6 < b6; m6++) {
    if (O[0] = p8[h4], O[1] = p8[h4 + 1], O[2] = p8[h4 + 2], n5(I2, E5), f6 && (v4 += E5.sampledElevation), t2.TESTS_DISABLE_OPTIMIZATIONS) p8[h4] = I2.array[I2.offset], p8[h4 + 1] = I2.array[I2.offset + 1], p8[h4 + 2] = E5.z, o(p8, o5, h4, p8, r7.spatialReference, h4, 1), p8[h4] -= S[0], p8[h4 + 1] -= S[1], p8[h4 + 2] -= S[2], s4 = true;
    else {
      T[0] = p8[h4] + S[0], T[1] = p8[h4 + 1] + S[1], T[2] = p8[h4 + 2] + S[2], r7.setAltitude(T, E5.z), p8[h4] = T[0] - S[0], p8[h4 + 1] = T[1] - S[1], p8[h4 + 2] = T[2] - S[2];
      const t8 = d4 / r7.unitInMeters;
      (Math.abs(O[0] - p8[h4]) >= t8 || Math.abs(O[1] - p8[h4 + 1]) >= t8 || Math.abs(O[2] - p8[h4 + 2]) >= t8) && (s4 = true);
    }
    h4 += g5, I2.offset += 3;
  }
  return v4 /= b6, { update: s4, averageGeometrySampledElevation: v4 };
}

// node_modules/@arcgis/core/views/3d/layers/graphics/Graphics3DObject3DGraphicLayer.js
var m3 = class {
  constructor(e8, t7, i4) {
    this.baseMaterial = e8, this.edgeMaterial = t7, this.hasSlicePlane = i4;
  }
};
var p6 = class {
  get isElevationSource() {
    return !!this.stageObject.lastValidElevationBB;
  }
  constructor(e8, t7, i4, s4, a6, n5 = null) {
    this.graphics3DSymbolLayer = e8, this.stageObject = t7, this._sharedResource = i4, this.elevationAligner = s4, this.elevationContext = a6, this._edgeState = n5, this.type = "object3d", this._stageLayer = null, this._visible = false, this._addedToStage = false, this.alignedSampledElevation = 0, this.needsElevationUpdates = false, this.useObjectOriginAsAttachmentOrigin = false;
  }
  initialize(e8) {
    this._stageLayer = e8;
  }
  destroy() {
    if (!this._stageLayer) return;
    const e8 = this._stageLayer.stage;
    this._addedToStage && (this._stageLayer.remove(this.stageObject), this._addedToStage = false), e8.renderer.edgeView?.removeObject(this.stageObject), this.stageObject.dispose(), this._sharedResource?.release(), this._visible = false, this._stageLayer = null;
  }
  get usedMemory() {
    return this.graphics3DSymbolLayer.usedMemory;
  }
  layerOpacityChanged(e8, t7) {
    const { stageObject: i4, _edgeState: s4, _stageLayer: a6 } = this;
    if (null == s4) return;
    const n5 = v2(s4.baseMaterial);
    s4.edgeMaterial.objectTransparency !== n5 && (s4.edgeMaterial.objectTransparency = n5, this.resetEdgeObject(t7)), a6.stage.renderer.withEdgeView((t8) => t8.updateAllComponentOpacities(i4, [e8]));
  }
  updateHighlights(e8) {
  }
  slicePlaneEnabledChanged(e8, t7) {
    const { stageObject: i4, _edgeState: s4, _stageLayer: a6 } = this;
    null != s4 && a6.stage.renderer.withEdgeView((a7) => {
      a7.updateAllComponentMaterials(i4, s4.edgeMaterial, e8, !t7), s4.hasSlicePlane = e8;
    });
  }
  setVisibility(e8) {
    const { _edgeState: t7, stageObject: i4, _stageLayer: s4 } = this;
    null != s4 && this.visible !== e8 && (this._visible = e8, i4.visible = e8, e8 && !this._addedToStage && (s4.add(i4), this._addedToStage = true), null != t7 && s4.stage.renderer.withEdgeView((s5) => {
      s5.hasObject(i4) ? s5.updateObjectVisibility(i4, e8) : e8 && this._addOrUpdateEdgeObject(t7, s5, false);
    }));
  }
  get visible() {
    return this._visible;
  }
  alignWithElevation(e8, t7, i4, s4) {
    if (null == this.elevationAligner) return;
    null != i4 && l3(this.elevationContext.featureExpressionInfoContext, i4);
    const a6 = (i5, s5) => c2(i5, e8, this.elevationContext, t7, s5);
    this.alignedSampledElevation = this.elevationAligner(this, this.elevationContext, e8.spatialReference, a6, t7), this.resetEdgeObject(s4);
  }
  alignWithAbsoluteElevation(e8, t7, i4) {
    const s4 = (t8, i5) => {
      i5.sampledElevation = e8, i5.verticalDistanceToGround = 0, i5.z = e8;
    };
    this.alignedSampledElevation = this.elevationAligner(this, this.elevationContext, null, s4, t7), this.resetEdgeObject(i4);
  }
  getCenterObjectSpace(t7 = n2()) {
    return s(t7, U(this.stageObject.boundingVolumeObjectSpace.bounds));
  }
  getBoundingBoxObjectSpace(e8 = u()) {
    const t7 = this.stageObject.boundingVolumeObjectSpace;
    return Z(e8, t7.min), d(e8, t7.max), e8;
  }
  computeAttachmentOrigin(e8) {
    const s4 = this.stageObject.effectiveTransformation;
    if (this.useObjectOriginAsAttachmentOrigin) e8.render.origin[0] += s4[12], e8.render.origin[1] += s4[13], e8.render.origin[2] += s4[14], e8.render.num++;
    else for (const a6 of this.stageObject.geometries) a6.computeAttachmentOrigin(S2) && (E(S2, S2, s4), u2(e8.render.origin, e8.render.origin, S2), e8.render.num++);
  }
  async getProjectedBoundingBox(e8, i4, s4, a6, n5) {
    const r7 = this.getBoundingBoxObjectSpace(n5), h4 = _2, d6 = C(r7) ? 1 : h4.length;
    for (let o5 = 0; o5 < d6; o5++) {
      const e9 = h4[o5];
      y[0] = r7[e9[0]], y[1] = r7[e9[1]], y[2] = r7[e9[2]], E(y, y, this.stageObject.transformation), f3[3 * o5] = y[0], f3[3 * o5 + 1] = y[1], f3[3 * o5 + 2] = y[2];
    }
    if (!e8(f3, 0, d6)) return null;
    q(r7);
    let b6 = null;
    this.calculateRelativeScreenBounds && (b6 = this.calculateRelativeScreenBounds());
    for (let t7 = 0; t7 < 3 * d6; t7 += 3) {
      for (let e9 = 0; e9 < 3; e9++) r7[e9] = Math.min(r7[e9], f3[t7 + e9]), r7[e9 + 3] = Math.max(r7[e9 + 3], f3[t7 + e9]);
      b6 && s4.push({ location: f3.slice(t7, t7 + 3), screenSpaceBoundingRect: b6 });
    }
    if (i4?.service && "absolute-height" !== this.elevationContext.mode) {
      b2(r7, S2);
      const e9 = "relative-to-scene" === this.elevationContext.mode ? "scene" : "ground";
      let t7 = 0;
      if (i4.useViewElevation) t7 = i4.service.getElevation(S2[0], S2[1], e9) ?? 0;
      else try {
        const s5 = E2(r7, i4.service.spatialReference, i4);
        t7 = await i4.service.queryElevation(S2[0], S2[1], a6, s5, e9) ?? 0;
      } catch (O2) {
      }
      G(r7, 0, 0, -this.alignedSampledElevation + t7);
    }
    return r7;
  }
  addObjectState(e8) {
    e8.stateType === t.Highlight && e8.addObject(this.stageObject, this.stageObject.highlight(e8.highlightName)), e8.stateType === t.MaskOccludee && e8.addObject(this.stageObject, this.stageObject.maskOccludee());
  }
  removeObjectState(e8) {
    e8.removeByObject(this.stageObject);
  }
  resetEdgeObject(e8) {
    const { _edgeState: t7, stageObject: i4, _stageLayer: s4, _visible: a6 } = this;
    null != t7 && s4.stage.renderer.withEdgeView((s5) => {
      a6 ? this._addOrUpdateEdgeObject(t7, s5, e8) : s5.removeObject(i4);
    });
  }
  _addOrUpdateEdgeObject(e8, t7, i4) {
    const s4 = v2(e8.baseMaterial);
    e8.edgeMaterial.objectTransparency = s4, t7.addOrUpdateObject3D(this.stageObject, e8.edgeMaterial, e8.hasSlicePlane, !i4).then(() => this._stageLayer?.sync());
  }
};
function v2(e8) {
  return e8.transparent ? A.TRANSPARENT : A.OPAQUE;
}
var f3 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
var y = n2();
var S2 = n2();
var _2 = [[0, 1, 2], [3, 1, 2], [0, 4, 2], [3, 4, 2], [0, 1, 5], [3, 1, 5], [0, 4, 5], [3, 4, 5]];

// node_modules/@arcgis/core/views/3d/layers/graphics/Graphics3DObjectMetadata.js
var t6 = class {
  constructor(t7, e8 = null) {
    this.labelText = e8, this.elevationOffset = t7 ?? 0;
  }
};

// node_modules/@arcgis/core/views/3d/layers/graphics/interfaces.js
var e7;
var a4;
!function(e8) {
  e8[e8.RecreateSymbol = 0] = "RecreateSymbol", e8[e8.RecreateGraphics = 1] = "RecreateGraphics", e8[e8.FastUpdate = 2] = "FastUpdate";
}(e7 || (e7 = {})), function(e8) {
  e8[e8.Slow = 0] = "Slow", e8[e8.Fast = 1] = "Fast", e8[e8.Mixed = 2] = "Mixed", e8[e8.Loading = 3] = "Loading", e8[e8.Undefined = 4] = "Undefined";
}(a4 || (a4 = {}));

// node_modules/@arcgis/core/views/3d/layers/graphics/Loadable.js
var r6 = class {
  constructor(t7) {
    this.schedule = t7, this._abortController = null, this._loadStatus = l6.LOADING, this._loadError = null, this._loader = null, this.logger = null;
  }
  destroy() {
    this.abortLoad();
  }
  get loadStatus() {
    return this._loadStatus;
  }
  load(t7, r7) {
    return this._loadStatus === l6.LOADED ? (t7 && t7(), this._loader ?? Promise.resolve()) : this._loadStatus === l6.FAILED ? (r7 && r7(this._loadError), this._loader ?? Promise.resolve()) : (null == this._loader && (this._abortController = new AbortController(), this._loader = this.doLoad(this._abortController.signal).then(() => {
      this._abortController = null, this._loadStatus = l6.LOADED;
    }, (t8) => {
      throw this._loadError = t8, this._abortController = null, this._loadStatus = l6.FAILED, !b(t8) && this.logger && t8.message && this.logger.warn(t8.message), t8;
    })), this._loader.then(t7, r7).catch(() => {
    }), this._loader);
  }
  abortLoad() {
    null != this._abortController ? this._abortController = e(this._abortController) : this._loadStatus === l6.LOADING && (this._loadStatus = l6.FAILED), this._loader = null;
  }
};
var l6;
!function(t7) {
  t7[t7.LOADING = 0] = "LOADING", t7[t7.LOADED = 1] = "LOADED", t7[t7.FAILED = 2] = "FAILED";
}(l6 || (l6 = {}));

// node_modules/@arcgis/core/views/3d/layers/graphics/Graphics3DSymbolLayer.js
var h3 = () => i.getLogger("esri.views.3d.layers.graphics.Graphics3DSymbolLayer");
var y2 = class extends r6 {
  constructor(e8, t7, i4, r7, o5 = true) {
    super(i4.schedule), this.symbol = e8, this.symbolLayer = t7, this._context = i4, this._drivenOpacityFallbackAlwaysOpaque = o5, this.ignoreDrivers = false, this._drivenProperties = { color: false, opacity: false, opacityAlwaysOpaque: true, size: false, rotation: false }, this._materials = [], this.logger = h3(), this._elevationOptions = { supportsOffsetAdjustment: false, supportsOnTheGround: true }, this.skipHighSymbolLodsChanged = true, this._renderPriority = r7.renderPriority, this._renderPriorityStep = r7.renderPriorityStep, this._elevationContext = new o3(), this.updateComplexity(), this.ignoreDrivers = r7.ignoreDrivers, this.ignoreDrivers || (this._drivenProperties = f4(this._context.renderer, o5)), this._updateElevationContext();
  }
  get view() {
    return this._context.stage.view;
  }
  getCachedSize() {
    return null;
  }
  get extentPadding() {
    return 0;
  }
  get materials() {
    return this._materials;
  }
  get usedMemory() {
    const e8 = this.complexity;
    if (null == e8) return 0;
    return (this.draped ? e8.memory.draped : e8.memory).bytesPerFeature;
  }
  _drivenPropertiesChanged(e8) {
    if (this.ignoreDrivers) return false;
    const t7 = this._drivenProperties, i4 = f4(e8, this._drivenOpacityFallbackAlwaysOpaque);
    return i4.color !== t7.color || i4.opacity !== t7.opacity || i4.opacityAlwaysOpaque !== t7.opacityAlwaysOpaque || i4.size !== t7.size || i4.rotation !== t7.rotation;
  }
  get needsDrivenTransparentPass() {
    return (this._drivenProperties.color || this._drivenProperties.opacity) && !this._drivenProperties.opacityAlwaysOpaque;
  }
  _logGeometryCreationWarnings(e8, t7, i4, r7) {
    const o5 = e8.projectionSuccess, n5 = "polygons" in e8 ? e8.polygons : null, s4 = `${r7} geometry failed to be created`;
    o5 ? !this._logGeometryValidationWarnings(t7, i4, r7) && n5 && 0 === n5.length && "rings" === i4 && t7.length > 0 && t7[0].length > 2 && h3().warnOncePerTick(`${s4} (filled rings should use clockwise winding - try reversing the order of vertices)`) : h3().warnOncePerTick(`${s4} (failed to project geometry to view spatial reference)`);
  }
  updateFocus(e8, t7) {
  }
  _logGeometryValidationWarnings(e8, t7, i4) {
    const r7 = `${i4} geometry failed to be created`;
    return !e8.length || 1 === e8.length && !e8[0].length ? (h3().warnOncePerTick(`${r7} (no ${t7} were defined)`), true) : (!Array.isArray(e8) || !Array.isArray(e8[0])) && (h3().warnOncePerTick(`${r7} (${t7} should be defined as a 2D array)`), true);
  }
  _validateGeometry(e8, t7 = null, i4 = null) {
    if (null != t7 && !t7.includes(e8.type)) return this.logger.warn("unsupported geometry type for " + i4 + ` symbol: ${e8.type}`), false;
    switch (e8.type) {
      case "point": {
        const t8 = e8;
        if (!isFinite(t8.x) || !isFinite(t8.y)) return h3().warn("point coordinate is not a valid number, graphic skipped"), false;
        break;
      }
      case "polygon":
        g(e8);
    }
    return true;
  }
  _defaultElevationInfoNoZ() {
    return m4;
  }
  _defaultElevationInfoZ() {
    return g3;
  }
  _updateElevationContext() {
    null != this._elevationInfoOverride ? (this._elevationContext.setFromElevationInfo(this._elevationInfoOverride), this._elevationContext.updateFeatureExpressionInfoContext(null)) : this._context.layer.elevationInfo ? (this._elevationContext.setFromElevationInfo(this._context.layer.elevationInfo), this._elevationContext.updateFeatureExpressionInfoContext(this._context.featureExpressionInfoContext)) : this._elevationContext.reset();
  }
  getDefaultElevationInfo(e8) {
    return e8.hasZ ? this._defaultElevationInfoZ() : this._defaultElevationInfoNoZ();
  }
  getGeometryElevationMode(e8, t7 = this.getDefaultElevationInfo(e8)) {
    return this._elevationContext.mode || t7.mode;
  }
  setElevationInfoOverride(e8) {
    this._elevationInfoOverride = e8, this._updateElevationContext();
  }
  setGraphicElevationContext(e8, t7 = new o3()) {
    const i4 = e8.geometry, r7 = this.getDefaultElevationInfo(i4);
    t7.unit = null != this._elevationContext.unit ? this._elevationContext.unit : r7.unit, t7.mode = this.getGeometryElevationMode(i4, r7), t7.offsetMeters = this._elevationContext.meterUnitOffset ?? r7.offset ?? 0;
    const o5 = !this._elevationOptions.supportsOnTheGround && "on-the-ground" === t7.mode;
    o5 && (t7.mode = "relative-to-ground", t7.offsetMeters = 0);
    const n5 = o5 ? f : this._elevationContext.featureExpressionInfoContext;
    return t7.updateFeatureExpressionInfoContext(n5, e8, this._context.layer), t7;
  }
  prepareSymbolLayerPatch(e8) {
  }
  updateGeometry(e8, t7) {
    return false;
  }
  updateTransform(e8, t7, i4, r7) {
    return false;
  }
  onRemoveGraphic(e8) {
  }
  _getLayerOpacity() {
    if (this._context.graphicsCoreOwner && "fullOpacity" in this._context.graphicsCoreOwner) return this._context.graphicsCoreOwner.fullOpacity ?? 0;
    const e8 = this._context.layer.opacity;
    return e8 ?? 1;
  }
  _getCombinedOpacity(e8, t7 = v3) {
    const i4 = this.draped ? 1 : this._getLayerOpacity();
    return this._drivenProperties.opacity || this._drivenProperties.color ? i4 : e8 ? i4 * e8.a : t7.hasIntrinsicColor ? i4 : 0;
  }
  _getCombinedOpacityAndColor(t7, r7 = v3) {
    const o5 = this._getCombinedOpacity(t7, r7);
    if (this._drivenProperties.color) return U2(null, o5);
    const n5 = null != t7 ? l.toUnitRGB(t7) : _;
    return U2(n5, o5);
  }
  _getVertexOpacityAndColor(e8, t7, i4 = null) {
    const r7 = this._drivenProperties.color ? e8.color ?? t7 : null, o5 = this._drivenProperties.opacity ? e8.opacity ?? t7[3] : null, n5 = U2(r7, o5);
    return i4 && (n5[0] *= i4, n5[1] *= i4, n5[2] *= i4, n5[3] *= i4), n5;
  }
  isFastUpdatesEnabled() {
    return null != this._fastUpdates;
  }
  updateComplexity() {
    this.complexity = this.computeComplexity();
  }
  computeComplexity() {
    return L(this.symbol, this.symbolLayer);
  }
  globalPropertyChanged(e8, t7, i4) {
    switch (e8) {
      case "opacity":
        return this.layerOpacityChanged(t7, i4), true;
      case "elevationInfo": {
        const e9 = this._elevationContext.mode;
        this._updateElevationContext();
        return this.layerElevationInfoChanged(t7, i4, e9) !== b4.RECREATE;
      }
      case "slicePlaneEnabled":
        return this.slicePlaneEnabledChanged(t7, i4);
      case "physicalBasedRenderingEnabled":
        return this.physicalBasedRenderingChanged();
      case "pixelRatio":
        return this.pixelRatioChanged;
      case "skipHighSymbolLods":
        return this.skipHighSymbolLodsChanged;
      default:
        return false;
    }
  }
  get pixelRatioChanged() {
    return true;
  }
  updateGraphics3DGraphicElevationInfo(e8, t7, i4) {
    let r7 = b4.UPDATE;
    return e8?.forEach((e9) => {
      const o5 = t7(e9);
      if (null != o5) {
        const t8 = e9.graphic;
        this.setGraphicElevationContext(t8, o5.elevationContext), o5.needsElevationUpdates = i4(o5.elevationContext.mode);
      } else r7 = b4.RECREATE;
    }), r7;
  }
  applyRendererDiff(e8, t7) {
    return e7.RecreateSymbol;
  }
  getFastUpdateAttrValues(e8) {
    if (!this._fastUpdates) return null;
    const t7 = this._fastUpdates.visualVariables, i4 = t7.size ? ie(t7.size.field, e8) : 0, o5 = t7.color ? ie(t7.color.field, e8) : 0, n5 = t7.opacity ? ie(t7.opacity.field, e8) : 0;
    return r(i4, o5, n5, 0);
  }
  get draped() {
    return this._draped;
  }
  ensureDrapedStatus(e8) {
    return null == this._draped ? (this._draped = e8, true) : (e8 !== this.draped && h3().warnOnce("A symbol can only produce either draped or non-draped visualizations. Use two separate symbol instances for draped and non-draped graphics if necessary."), false);
  }
  test() {
    const e8 = () => ({ size: this._fastUpdates?.visualVariables.size?.field ?? null, color: this._fastUpdates?.visualVariables.color?.field ?? null, opacity: this._fastUpdates?.visualVariables.opacity?.field ?? null, rotation: this._fastUpdates?.visualVariables.rotation?.field ?? null });
    return { drivenProperties: this._drivenProperties, getVisVarFields: e8 };
  }
};
function f4(e8, t7) {
  const i4 = { color: false, opacity: false, opacityAlwaysOpaque: t7, size: false, rotation: false };
  return e8 && "visualVariables" in e8 && e8.visualVariables && e8.visualVariables.forEach((e9) => {
    switch (e9.type) {
      case "color":
        if (i4.color = true, e9.stops) for (let t8 = 0; t8 < e9.stops.length; t8++) {
          const r7 = e9.stops[t8].color;
          r7 && r7.a < 1 && (i4.opacityAlwaysOpaque = false);
        }
        break;
      case "opacity":
        i4.opacity = true, i4.opacityAlwaysOpaque = false;
        break;
      case "size":
        i4.size = true;
        break;
      case "rotation":
        i4.rotation = true;
    }
  }), i4;
}
var m4 = { mode: "on-the-ground", offset: 0, unit: "meters" };
var g3 = { mode: "absolute-height", offset: 0, unit: "meters" };
var v3 = { hasIntrinsicColor: false };

// node_modules/@arcgis/core/views/3d/layers/graphics/pointUtils.js
function a5(e8, r7, t7, n5, o5) {
  if (u4(e8, r7)) return null;
  t7.localOrigin = d5(e8, r7);
  const i4 = new A2({ geometries: [t7], castShadow: false, layerViewUid: e8.layerViewUid, graphicUid: o5, usesVerticalDistanceToGround: true });
  return { object: i4, sampledElevation: p2(i4, r7, e8.elevationProvider, e8.renderCoordsHelper, n5) };
}
function p7(e8, r7, t7, n5) {
  if (u4(r7, t7)) return null;
  return p2(e8, t7, r7.elevationProvider, r7.renderCoordsHelper, n5);
}
function u4(e8, n5) {
  const o5 = e8.clippingExtent;
  return !!o5 && (i2(n5, g4, e8.elevationProvider.spatialReference), !V(o5, g4));
}
function m5(e8, t7, n5) {
  const o5 = e8.elevationContext, l7 = n5.spatialReference;
  i2(t7, g4, l7), o5.centerPointInElevationSR = e3(g4[0], g4[1], t7.hasZ ? g4[2] : 0, null != l7 ? l7 : null);
}
function f5(e8) {
  switch (e8.type) {
    case "point":
      return e8;
    case "polygon":
    case "extent":
      return b3(e8);
    case "polyline": {
      const r7 = e8.paths[0];
      if (!r7 || 0 === r7.length) return null;
      const t7 = p(r7, h(r7) / 2);
      return e3(t7[0], t7[1], t7[2], e8.spatialReference);
    }
    case "mesh":
      return e8.extent.center;
  }
  return null;
}
function d5(e8, t7) {
  return i2(t7, g4, e8.renderCoordsHelper.spatialReference), e8.localOriginFactory.getOrigin(g4);
}
var g4 = n2();

export {
  l4 as l,
  r3 as r,
  n4 as n,
  a2 as a,
  s2 as s,
  r4 as r2,
  t3 as t,
  o4 as o,
  t4 as t2,
  c3 as c,
  e5 as e,
  P,
  m2 as m,
  F,
  d3 as d,
  C2 as C,
  w,
  e6 as e2,
  u3 as u,
  p5 as p,
  b5 as b,
  I,
  m3 as m2,
  p6 as p2,
  t6 as t3,
  e7 as e3,
  a4 as a2,
  r6 as r3,
  l6 as l2,
  y2 as y,
  a5 as a3,
  p7 as p3,
  m5 as m3,
  f5 as f,
  d5 as d2
};
//# sourceMappingURL=chunk-IKRW63AG.js.map
