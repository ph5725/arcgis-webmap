import {
  o
} from "./chunk-SWINDW7X.js";
import {
  f
} from "./chunk-QPAG77FN.js";
import {
  d
} from "./chunk-FFB32VN7.js";
import {
  s as s2
} from "./chunk-R2Q57RB2.js";
import {
  s
} from "./chunk-PEF2Q5HH.js";
import {
  e
} from "./chunk-FYCLQ3SU.js";
import {
  n
} from "./chunk-6EOJZ6DP.js";

// node_modules/@arcgis/core/views/3d/webgl-engine/core/shaderLibrary/util/BlendColorsPremultiplied.glsl.js
function e2(e3) {
  e3.code.add("\n  vec4 blendColorsPremultiplied(vec4 source, vec4 dest) {\n    float oneMinusSourceAlpha = 1.0 - source.a;\n    return source + dest * oneMinusSourceAlpha;\n  }\n  ");
}

// node_modules/@arcgis/core/views/3d/webgl-engine/core/shaderLibrary/Laserline.glsl.js
function p(p2, d2) {
  const s3 = p2.fragment;
  s3.include(d), p2.include(f), s3.include(e2), s3.uniforms.add(new s("globalAlpha", (o2) => o2.globalAlpha), new e("glowColor", (o2) => o2.glowColor), new s("glowWidth", (o2, e3) => o2.glowWidth * e3.camera.pixelRatio), new s("glowFalloff", (o2) => o2.glowFalloff), new e("innerColor", (o2) => o2.innerColor), new s("innerWidth", (o2, e3) => o2.innerWidth * e3.camera.pixelRatio), new o("depthMap", (o2) => o2.depth?.attachment), new s2("normalMap", (o2) => o2.normals)), s3.code.add(n`vec4 premultipliedColor(vec3 rgb, float alpha) {
return vec4(rgb * alpha, alpha);
}`), s3.code.add(n`vec4 laserlineProfile(float dist) {
if (dist > glowWidth) {
return vec4(0.0);
}
float innerAlpha = (1.0 - smoothstep(0.0, innerWidth, dist));
float glowAlpha = pow(max(0.0, 1.0 - dist / glowWidth), glowFalloff);
return blendColorsPremultiplied(
premultipliedColor(innerColor, innerAlpha),
premultipliedColor(glowColor, glowAlpha)
);
}`), s3.code.add(n`bool laserlineReconstructFromDepth(out vec3 pos, out vec3 normal, out float angleCutoffAdjust, out float depthDiscontinuityAlpha) {
float depth = depthFromTexture(depthMap, uv);
if (depth == 1.0) {
return false;
}
float linearDepth = linearizeDepth(depth);
pos = reconstructPosition(gl_FragCoord.xy, linearDepth);
float minStep = 6e-8;
float depthStep = clamp(depth + minStep, 0.0, 1.0);
float linearDepthStep = linearizeDepth(depthStep);
float depthError = abs(linearDepthStep - linearDepth);
vec3 normalReconstructed = normalize(cross(dFdx(pos), dFdy(pos)));
vec3 normalFromTexture = normalize(texture(normalMap, uv).xyz * 2.0 - 1.0);
float blendFactor = smoothstep(0.15, 0.2, depthError);
normal = normalize(mix(normalReconstructed, normalFromTexture, blendFactor));
angleCutoffAdjust = mix(0.0, 0.004, blendFactor);
float ddepth = fwidth(linearDepth);
depthDiscontinuityAlpha = 1.0 - smoothstep(0.0, 0.01, -ddepth / linearDepth);
return true;
}`), d2.contrastControlEnabled ? s3.uniforms.add(new s2("frameColor", (o2, e3) => o2.colors), new s("globalAlphaContrastBoost", (o2) => o2.globalAlphaContrastBoost)).code.add(n`float rgbToLuminance(vec3 color) {
return dot(vec3(0.2126, 0.7152, 0.0722), color);
}
vec4 laserlineOutput(vec4 color) {
float backgroundLuminance = rgbToLuminance(texture(frameColor, uv).rgb);
float alpha = clamp(globalAlpha * max(backgroundLuminance * globalAlphaContrastBoost, 1.0), 0.0, 1.0);
return color * alpha;
}`) : s3.code.add(n`vec4 laserlineOutput(vec4 color) {
return color * globalAlpha;
}`);
}

export {
  p
};
//# sourceMappingURL=chunk-IY3EUEEF.js.map
