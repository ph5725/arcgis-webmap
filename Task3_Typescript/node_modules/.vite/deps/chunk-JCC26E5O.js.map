{
  "version": 3,
  "sources": ["../../@arcgis/core/chunks/LineMarker.glsl.js"],
  "sourcesContent": ["/*\r\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\r\nSee https://js.arcgis.com/4.33/esri/copyright.txt for details.\r\n*/\r\nimport{markerTextureSize as e,markerSymbolSize as r,markerTipThicknessFactor as i}from\"../views/3d/support/engineContent/marker.js\";import{SliceDraw as o}from\"../views/3d/webgl-engine/core/shaderLibrary/Slice.glsl.js\";import{RibbonVertexPosition as t}from\"../views/3d/webgl-engine/core/shaderLibrary/attributes/RibbonVertexPosition.glsl.js\";import{OutputHighlight as a}from\"../views/3d/webgl-engine/core/shaderLibrary/output/OutputHighlight.glsl.js\";import{MarkerSizing as n}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/MarkerSizing.glsl.js\";import{terrainDepthTest as s}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/TerrainDepthTest.glsl.js\";import{ColorConversion as l}from\"../views/3d/webgl-engine/core/shaderLibrary/util/ColorConversion.glsl.js\";import{RgbaFloatEncoding as c}from\"../views/3d/webgl-engine/core/shaderLibrary/util/RgbaFloatEncoding.glsl.js\";import{addProjViewLocalOrigin as p,addViewNormal as d,addPixelRatio as v}from\"../views/3d/webgl-engine/core/shaderLibrary/util/View.glsl.js\";import{Float2BindUniform as m}from\"../views/3d/webgl-engine/core/shaderModules/Float2BindUniform.js\";import{Float4BindUniform as h}from\"../views/3d/webgl-engine/core/shaderModules/Float4BindUniform.js\";import{Float4PassUniform as f}from\"../views/3d/webgl-engine/core/shaderModules/Float4PassUniform.js\";import{FloatBindUniform as g}from\"../views/3d/webgl-engine/core/shaderModules/FloatBindUniform.js\";import{glsl as u,If as w}from\"../views/3d/webgl-engine/core/shaderModules/glsl.js\";import{Matrix4BindUniform as S}from\"../views/3d/webgl-engine/core/shaderModules/Matrix4BindUniform.js\";import{Texture2DPassUniform as b}from\"../views/3d/webgl-engine/core/shaderModules/Texture2DPassUniform.js\";import{VertexAttribute as y}from\"../views/3d/webgl-engine/lib/VertexAttribute.js\";import{LineMarkerSpace as x,LineMarkerAnchor as P}from\"../views/3d/webgl-engine/shaders/LineMarkerTechniqueConfiguration.js\";import{outputColorHighlightOID as z}from\"../views/3d/webgl-engine/shaders/OutputColorHighlightOID.glsl.js\";import{ShaderBuilder as j}from\"../views/webgl/ShaderBuilder.js\";function L(L){const k=new j,{space:M,anchor:D,hasTip:C}=L,$=M===x.World;k.include(t,L),k.include(n,L),k.include(s,L);const{vertex:O,fragment:T,varyings:W}=k;T.include(c),p(O,L),k.attributes.add(y.POSITION,\"vec3\"),k.attributes.add(y.PREVIOUSDELTA,\"vec4\"),k.attributes.add(y.UV0,\"vec2\"),W.add(\"vColor\",\"vec4\"),W.add(\"vpos\",\"vec3\",{invariant:!0}),W.add(\"vUV\",\"vec2\"),W.add(\"vSize\",\"float\"),C&&W.add(\"vLineWidth\",\"float\"),O.uniforms.add(new m(\"nearFar\",(({camera:e})=>e.nearFar)),new h(\"viewport\",(({camera:e})=>e.fullViewport))).code.add(u`vec4 projectAndScale(vec4 pos) {\r\nvec4 posNdc = proj * pos;\r\nposNdc.xy *= viewport.zw / posNdc.w;\r\nreturn posNdc;\r\n}`),O.code.add(u`void clip(vec4 pos, inout vec4 prev) {\r\nfloat vnp = nearFar[0] * 0.99;\r\nif (prev.z > -nearFar[0]) {\r\nfloat interpolation = (-vnp - pos.z) / (prev.z - pos.z);\r\nprev = mix(pos, prev, interpolation);\r\n}\r\n}`),$?(k.attributes.add(y.NORMAL,\"vec3\"),d(O),O.constants.add(\"tiltThreshold\",\"float\",.7),O.code.add(u`vec3 perpendicular(vec3 v) {\r\nvec3 n = (viewNormal * vec4(normal.xyz, 1.0)).xyz;\r\nvec3 n2 = cross(v, n);\r\nvec3 forward = vec3(0.0, 0.0, 1.0);\r\nfloat tiltDot = dot(forward, n);\r\nreturn abs(tiltDot) < tiltThreshold ? n : n2;\r\n}`)):O.code.add(u`vec2 perpendicular(vec2 v) {\r\nreturn vec2(v.y, -v.x);\r\n}`);const U=$?\"vec3\":\"vec2\";return O.code.add(u`\r\n      ${U} normalizedSegment(${U} pos, ${U} prev) {\r\n        ${U} segment = pos - prev;\r\n        float segmentLen = length(segment);\r\n\r\n        // normalize or zero if too short\r\n        return (segmentLen > 0.001) ? segment / segmentLen : ${$?\"vec3(0.0, 0.0, 0.0)\":\"vec2(0.0, 0.0)\"};\r\n      }\r\n\r\n      ${U} displace(${U} pos, ${U} prev, float displacementLen) {\r\n        ${U} segment = normalizedSegment(pos, prev);\r\n\r\n        ${U} displacementDirU = perpendicular(segment);\r\n        ${U} displacementDirV = segment;\r\n\r\n        ${D===P.Tip?\"pos -= 0.5 * displacementLen * displacementDirV;\":\"\"}\r\n\r\n        return pos + displacementLen * (uv0.x * displacementDirU + uv0.y * displacementDirV);\r\n      }\r\n    `),M===x.Screen&&(O.uniforms.add(new S(\"inverseProjectionMatrix\",(({camera:e})=>e.inverseProjectionMatrix))),O.code.add(u`vec3 inverseProject(vec4 posScreen) {\r\nposScreen.xy = (posScreen.xy / viewport.zw) * posScreen.w;\r\nreturn (inverseProjectionMatrix * posScreen).xyz;\r\n}`),O.code.add(u`bool rayIntersectPlane(vec3 rayDir, vec3 planeOrigin, vec3 planeNormal, out vec3 intersection) {\r\nfloat cos = dot(rayDir, planeNormal);\r\nfloat t = dot(planeOrigin, planeNormal) / cos;\r\nintersection = t * rayDir;\r\nreturn abs(cos) > 0.001 && t > 0.0;\r\n}`),O.uniforms.add(new g(\"perScreenPixelRatio\",(({camera:e})=>e.perScreenPixelRatio))),O.code.add(u`\r\n      vec4 toFront(vec4 displacedPosScreen, vec3 posLeft, vec3 posRight, vec3 prev, float lineWidth) {\r\n        // Project displaced position back to camera space\r\n        vec3 displacedPos = inverseProject(displacedPosScreen);\r\n\r\n        // Calculate the plane that we want the marker to lie in. Note that this will always be an approximation since ribbon lines are generally\r\n        // not planar and we do not know the actual position of the displaced prev vertices (they are offset in screen space, too).\r\n        vec3 planeNormal = normalize(cross(posLeft - posRight, posLeft - prev));\r\n        vec3 planeOrigin = posLeft;\r\n\r\n        ${w(L.hasCap,\"if(prev.z > posLeft.z) {\\n                vec2 diff = posLeft.xy - posRight.xy;\\n                planeOrigin.xy += perpendicular(diff) / 2.0;\\n             }\")};\r\n\r\n        // Move the plane towards the camera by a margin dependent on the line width (approximated in world space). This tolerance corrects for the\r\n        // non-planarity in most cases, but sharp joins can place the prev vertices at arbitrary positions so markers can still clip.\r\n        float offset = lineWidth * perScreenPixelRatio;\r\n        planeOrigin *= (1.0 - offset);\r\n\r\n        // Intersect camera ray with the plane and make sure it is within clip space\r\n        vec3 rayDir = normalize(displacedPos);\r\n        vec3 intersection;\r\n        if (rayIntersectPlane(rayDir, planeOrigin, planeNormal, intersection) && intersection.z < -nearFar[0] && intersection.z > -nearFar[1]) {\r\n          return vec4(intersection.xyz, 1.0);\r\n        }\r\n\r\n        // Fallback: use depth of pos or prev, whichever is closer to the camera\r\n        float minDepth = planeOrigin.z > prev.z ? length(planeOrigin) : length(prev);\r\n        displacedPos *= minDepth / length(displacedPos);\r\n        return vec4(displacedPos.xyz, 1.0);\r\n      }\r\n  `)),v(O),O.main.add(u`\r\n    // Check for special value of uv0.y which is used by the Renderer when graphics\r\n    // are removed before the VBO is recompacted. If this is the case, then we just\r\n    // project outside of clip space.\r\n    if (uv0.y == 0.0) {\r\n      // Project out of clip space\r\n      gl_Position = vec4(1e038, 1e038, 1e038, 1.0);\r\n    }\r\n    else {\r\n      float lineWidth = getLineWidth();\r\n      float screenMarkerSize = getScreenMarkerSize();\r\n\r\n      vec4 pos  = view * vec4(position, 1.0);\r\n      vec4 prev = view * vec4(position + previousDelta.xyz * previousDelta.w, 1.0);\r\n      clip(pos, prev);\r\n\r\n      ${$?u`${w(L.hideOnShortSegments,u`\r\n                if (areWorldMarkersHidden(pos, prev)) {\r\n                  // Project out of clip space\r\n                  gl_Position = vec4(1e038, 1e038, 1e038, 1.0);\r\n                  return;\r\n                }`)}\r\n            pos.xyz = displace(pos.xyz, prev.xyz, getWorldMarkerSize(pos));\r\n            vec4 displacedPosScreen = projectAndScale(pos);`:u`\r\n            vec4 posScreen = projectAndScale(pos);\r\n            vec4 prevScreen = projectAndScale(prev);\r\n            vec4 displacedPosScreen = posScreen;\r\n\r\n            displacedPosScreen.xy = displace(posScreen.xy, prevScreen.xy, screenMarkerSize);\r\n            ${w(M===x.Screen,u`\r\n                vec2 displacementDirU = perpendicular(normalizedSegment(posScreen.xy, prevScreen.xy));\r\n\r\n                // We need three points of the ribbon line in camera space to calculate the plane it lies in\r\n                // Note that we approximate the third point, since we have no information about the join around prev\r\n                vec3 lineRight = inverseProject(posScreen + lineWidth * vec4(displacementDirU.xy, 0.0, 0.0));\r\n                vec3 lineLeft = pos.xyz + (pos.xyz - lineRight);\r\n\r\n                pos = toFront(displacedPosScreen, lineLeft, lineRight, prev.xyz, lineWidth);\r\n                displacedPosScreen = projectAndScale(pos);`)}`}\r\n      forwardViewPosDepth(pos.xyz);\r\n      // Convert back into NDC\r\n      displacedPosScreen.xy = (displacedPosScreen.xy / viewport.zw) * displacedPosScreen.w;\r\n\r\n      // Convert texture coordinate into [0,1]\r\n      vUV = (uv0 + 1.0) / 2.0;\r\n      ${w(!$,\"vUV *= displacedPosScreen.w;\")}\r\n      ${w(C,\"vLineWidth = lineWidth;\")}\r\n\r\n      vSize = screenMarkerSize;\r\n      vColor = getColor();\r\n\r\n      // Use camera space for slicing\r\n      vpos = pos.xyz;\r\n\r\n      gl_Position = displacedPosScreen;\r\n    }`),T.include(o,L),k.include(z,L),T.include(l),T.uniforms.add(new f(\"intrinsicColor\",(({color:e})=>e)),new b(\"tex\",(({markerTexture:e})=>e))).constants.add(\"texelSize\",\"float\",1/e).code.add(u`float markerAlpha(vec2 samplePos) {\r\nsamplePos += vec2(0.5, -0.5) * texelSize;\r\nfloat sdf = rgbaTofloat(texture(tex, samplePos)) - 0.5;\r\nfloat distance = sdf * vSize;\r\ndistance -= 0.5;\r\nreturn clamp(0.5 - distance, 0.0, 1.0);\r\n}`),C&&T.constants.add(\"relativeMarkerSize\",\"float\",r/e).constants.add(\"relativeTipLineWidth\",\"float\",i).code.add(u`\r\n    float tipAlpha(vec2 samplePos) {\r\n      // Convert coordinates s.t. they are in pixels and relative to the tip of an arrow marker\r\n      samplePos -= vec2(0.5, 0.5 + 0.5 * relativeMarkerSize);\r\n      samplePos *= vSize;\r\n\r\n      float halfMarkerSize = 0.5 * relativeMarkerSize * vSize;\r\n      float halfTipLineWidth = 0.5 * max(1.0, relativeTipLineWidth * vLineWidth);\r\n\r\n      ${w($,\"halfTipLineWidth *= fwidth(samplePos.y);\")}\r\n\r\n      float distance = max(abs(samplePos.x) - halfMarkerSize, abs(samplePos.y) - halfTipLineWidth);\r\n      return clamp(0.5 - distance, 0.0, 1.0);\r\n    }\r\n  `),k.include(a,L),T.main.add(u`\r\n    discardBySlice(vpos);\r\n    discardByTerrainDepth();\r\n\r\n    vec4 finalColor = intrinsicColor * vColor;\r\n\r\n    // Cancel out perspective correct interpolation if in screen space or draped\r\n    vec2 samplePos = vUV ${w(!$,\"* gl_FragCoord.w\")};\r\n    finalColor.a *= ${C?\"max(markerAlpha(samplePos), tipAlpha(samplePos))\":\"markerAlpha(samplePos)\"};\r\n    outputColorHighlightOID(finalColor, vpos, finalColor.rgb);`),k}const k=Object.freeze(Object.defineProperty({__proto__:null,build:L},Symbol.toStringTag,{value:\"Module\"}));export{k as L,L as b};\r\n"],
  "mappings": "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",
  "names": ["L", "k", "s", "n", "i", "t", "e", "o", "p", "w"]
}
