import {
  o
} from "./chunk-QG7JWSBW.js";
import {
  Ie,
  Te,
  ee,
  ge,
  he,
  p,
  xe
} from "./chunk-VCRP2PLV.js";
import {
  f,
  n,
  t as t2
} from "./chunk-LMEOPAGQ.js";
import {
  FixedOffsetZone,
  IANAZone
} from "./chunk-UY6B6IVT.js";
import {
  t
} from "./chunk-LQFTAGIV.js";
import {
  u
} from "./chunk-S7IJH524.js";
import {
  i2 as i,
  s
} from "./chunk-XWG6QGFK.js";

// node_modules/@arcgis/core/layers/support/FieldsIndex.js
function y(e) {
  return "timeZone" in e;
}
function _(e) {
  return "timeZone" in e;
}
function g(e) {
  return "dateFieldsTimeZone" in e;
}
var T = /* @__PURE__ */ new Map();
var Z = class _Z {
  static fromJSON(e) {
    return new _Z(e.fields, e.timeZoneByFieldName);
  }
  static fromLayer(e) {
    return new _Z(e.fields ?? [], S(e));
  }
  static fromLayerJSON(e) {
    return new _Z(e.fields ?? [], S(e));
  }
  constructor(e = [], i2) {
    this._fieldsMap = /* @__PURE__ */ new Map(), this._normalizedFieldsMap = /* @__PURE__ */ new Map(), this._dateFieldsSet = /* @__PURE__ */ new Set(), this._numericFieldsSet = /* @__PURE__ */ new Set(), this._requiredFields = null, this.dateFields = [], this.numericFields = [], this.fields = e || [], this._timeZoneByFieldName = i2 ? new Map(i2) : null;
    const t3 = [];
    for (const s2 of this.fields) {
      const e2 = s2?.name, i3 = M(e2);
      if (e2 && i3) {
        const n2 = w(e2);
        this._fieldsMap.set(e2, s2), this._fieldsMap.set(n2, s2), this._normalizedFieldsMap.set(i3, s2), t3.push(`${n2}:${s2.type}:${this._timeZoneByFieldName?.get(e2)}`), Ie(s2) ? (this.dateFields.push(s2), this._dateFieldsSet.add(s2)) : ge(s2) && (this._numericFieldsSet.add(s2), this.numericFields.push(s2)), xe(s2) || he(s2) || (s2.editable = null == s2.editable || !!s2.editable, s2.nullable = null == s2.nullable || !!s2.nullable);
      }
    }
    t3.sort(), this.uid = t3.join();
  }
  get requiredFields() {
    if (!this._requiredFields) {
      this._requiredFields = [];
      for (const e of this.fields) xe(e) || he(e) || e.nullable || void 0 !== ee(e) || this._requiredFields.push(e);
    }
    return this._requiredFields;
  }
  equals(e) {
    return this.uid === e?.uid;
  }
  has(e) {
    return null != this.get(e);
  }
  get(e) {
    if (!e) return;
    let i2 = this._fieldsMap.get(e);
    return i2 || (i2 = this._fieldsMap.get(w(e)) ?? this._normalizedFieldsMap.get(M(e)), i2 && this._fieldsMap.set(e, i2), i2);
  }
  getTimeZone(t3) {
    const s2 = this.get(t3 && "string" != typeof t3 ? t3.name : t3);
    return s2 ? this._timeZoneByFieldName ? this._timeZoneByFieldName.get(s2.name) : "date" === s2.type || "esriFieldTypeDate" === s2.type ? (i.getLogger("esri.layers.support.FieldsIndex").errorOnce(new s("getTimeZone:no-timezone-information", `no time zone information for field '${s2.name}'`)), n) : N.has(s2.type) ? t2 : null : null;
  }
  getLuxonTimeZone(e) {
    const i2 = this.getTimeZone(e);
    return i2 ? i2 === t2 ? o.instance : i2 === n ? FixedOffsetZone.utcInstance : u(T, i2, () => IANAZone.create(i2)) : null;
  }
  isDateField(e) {
    return this._dateFieldsSet.has(this.get(e));
  }
  isTimeOnlyField(e) {
    return Te(this.get(e));
  }
  isNumericField(e) {
    return this._numericFieldsSet.has(this.get(e));
  }
  normalizeFieldName(e) {
    return this.get(e)?.name ?? void 0;
  }
  toJSON() {
    return { fields: this.fields.map((e) => t(e) ? e.toJSON() : e), timeZoneByFieldName: this._timeZoneByFieldName ? Array.from(this._timeZoneByFieldName.entries()) : null };
  }
};
function w(e) {
  return e.trim().toLowerCase();
}
function M(e) {
  return p(e)?.toLowerCase() ?? "";
}
var N = /* @__PURE__ */ new Set(["time-only", "date-only", "timestamp-offset", "esriFieldTypeDateOnly", "esriFieldTypeTimeOnly", "esriFieldTypeTimestampOffset"]);
function S(e) {
  const i2 = /* @__PURE__ */ new Map();
  if (!e.fields) return i2;
  const t3 = true === e.datesInUnknownTimezone, { timeInfo: s2, editFieldsInfo: n2 } = e, r = (s2 ? "startField" in s2 ? s2.startField : s2.startTimeField : "") ?? "", l = (s2 ? "endField" in s2 ? s2.endField : s2.endTimeField : "") ?? "", o2 = g(e) ? e.dateFieldsTimeZone ?? null : e.dateFieldsTimeReference ? f(e.dateFieldsTimeReference) : null, d = n2 ? y(n2) ? n2.timeZone ?? o2 : n2.dateFieldsTimeReference ? f(n2.dateFieldsTimeReference) : o2 ?? n : null, a = s2 ? _(s2) ? s2.timeZone ?? o2 : s2.timeReference ? f(s2.timeReference) : o2 : null, m = /* @__PURE__ */ new Map([[w(n2?.creationDateField ?? ""), d], [w(n2?.editDateField ?? ""), d], [w(r), a], [w(l), a]]);
  for (const { name: u2, type: f2 } of e.fields) if (N.has(f2)) i2.set(u2, t2);
  else if ("date" !== f2 && "esriFieldTypeDate" !== f2) i2.set(u2, null);
  else if (t3) i2.set(u2, t2);
  else {
    const e2 = m.get(w(u2 ?? "")) ?? o2;
    i2.set(u2, e2);
  }
  return i2;
}

export {
  Z
};
//# sourceMappingURL=chunk-JEYXDNAT.js.map
