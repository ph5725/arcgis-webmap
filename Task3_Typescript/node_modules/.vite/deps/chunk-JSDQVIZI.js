import {
  a as a2
} from "./chunk-F6HYAIOQ.js";
import {
  i as i2
} from "./chunk-A4KKV2O6.js";
import {
  E
} from "./chunk-3PPDORWL.js";
import {
  S,
  a
} from "./chunk-H6F6O2KE.js";
import {
  r
} from "./chunk-5TPMG26T.js";
import {
  i2 as i,
  l,
  s
} from "./chunk-XWG6QGFK.js";
import {
  t
} from "./chunk-GWNLQRNM.js";

// node_modules/@arcgis/core/views/2d/engine/webgl/shaderGraph/graph/ShaderGraphNode.js
function t2(t7) {
  return t7.split(" ").map((t8, e3) => e3 > 0 ? t8.charAt(0).toUpperCase() + t8.slice(1) : t8).join("");
}
function e(t7, e3) {
  const s4 = [];
  for (s4.push(e3); s4.length; ) {
    const e4 = s4.pop();
    if ("object" == typeof e4 && !t7.has(e4.uid)) {
      t7.add(e4.uid);
      for (const t8 of e4.children) s4.push(t8);
    }
  }
}
var _s = class _s {
  constructor() {
    this.uid = _s.NodeCount++, this._debugName = null, this._isMutable = false, this.isImplicit = false;
  }
  get isMutable() {
    return this._isMutable;
  }
  setMutable() {
    return this._isMutable = true, this;
  }
  setDebugName(e3) {
    return e3 = t2(e3), this._debugName = e3, this.isImplicit && this.children[0] instanceof _s && this.children[0].setDebugName(e3), this;
  }
  get debugInfo() {
    return { name: this._debugName ?? "" };
  }
  cloneInto(t7) {
    t7._debugName = this._debugName, t7._isMutable = this._isMutable, t7.isImplicit = this.isImplicit, t7.uid = this.uid;
  }
};
_s.NodeCount = 0;
var s2 = _s;
function i3(t7) {
  return "object" == typeof t7 ? t7.clone() : t7;
}
var r2 = class extends s2 {
  constructor() {
    super(...arguments), this.shaderType = "primitive-node";
  }
};
var n = class _n extends s2 {
  constructor(t7) {
    super(), this.child = t7, this.shaderType = "scope-node";
  }
  get children() {
    return [this.child];
  }
  clone() {
    const t7 = new _n(i3(this.child));
    return this.cloneInto(t7), t7;
  }
};
var c = class _c extends s2 {
  constructor(t7, e3, s4) {
    super(), this.property = t7, this.target = e3, this.returnType = s4, this.shaderType = "property-access-node";
  }
  get children() {
    const t7 = [this.target];
    return "string" != typeof this.property && t7.push(this.property), t7;
  }
  clone() {
    const t7 = new _c(this.property, i3(this.target), this.returnType);
    return this.cloneInto(t7), t7;
  }
};
var o = class _o extends s2 {
  constructor(t7, e3, s4, i4) {
    super(), this.x = t7, this.y = e3, this.target = s4, this.returnType = i4, this.shaderType = "property-access-2d-node";
  }
  get children() {
    return [this.target, this.x, this.y];
  }
  clone() {
    const t7 = new _o(this.x, this.y, i3(this.target), this.returnType);
    return this.cloneInto(t7), t7;
  }
};
var u = class _u extends s2 {
  constructor(t7, e3, s4) {
    super(), this.condition = t7, this.ifTrue = e3, this.ifFalse = s4, this.shaderType = "condition-node";
  }
  get children() {
    return [this.condition, this.ifTrue, this.ifFalse];
  }
  clone() {
    const t7 = i3(this.ifTrue), e3 = this.ifFalse ? i3(this.ifFalse) : null, s4 = new _u(this.condition, t7, e3);
    return this.cloneInto(s4), s4;
  }
};
var p = class _p extends s2 {
  constructor(t7, e3, s4, i4) {
    super(), this.captureList = t7, this.returnType = e3, this.generator = i4, this.shaderType = "block-node", s4 && (this.subgraph = new n(s4));
  }
  get children() {
    return Object.keys(this.captureList).map((t7) => this.captureList[t7]).concat(this.subgraph ?? []);
  }
  clone() {
    const t7 = {};
    for (const s4 in this.captureList) t7[s4] = i3(this.captureList[s4]);
    const e3 = new _p(t7, this.returnType, this.subgraph ? i3(this.subgraph.child) : this.subgraph, this.generator);
    return this.cloneInto(e3), e3;
  }
};
var a3 = class _a15 extends s2 {
  constructor(t7, e3, s4, i4, r4, n3 = false) {
    super(), this.token = t7, this._children = e3, this.isInfix = s4, this.isPropertyAccess = i4, this.returnType = r4, this.isTernary = n3, this.shaderType = "function-node";
  }
  get children() {
    return this._children;
  }
  clone() {
    const t7 = new _a15(this.token, this._children.map(i3), this.isInfix, this.isPropertyAccess, this.returnType, this.isTernary);
    return this.cloneInto(t7), t7;
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/shaderGraph/graph/glsl.js
var h;
var l2;
var a4;
var f;
var p2;
var d;
var w;
var y;
var m;
var v;
var b;
var x;
var I;
var g;
function D(t7) {
  switch (t7.type) {
    case "bool":
    case "bvec2":
    case "bvec3":
    case "bvec4":
      return J;
    case "float":
    case "vec2":
    case "vec3":
    case "vec4":
      return _;
    case "int":
    case "ivec2":
    case "ivec3":
    case "ivec4":
      return W;
    case "uint":
    case "uvec2":
    case "uvec3":
    case "uvec4":
      return G;
    default:
      throw new Error("Unable to handle type");
  }
}
function k(t7) {
  const e3 = [["float", "vec2", "vec3", "vec4"], ["int", "ivec2", "ivec3", "ivec4"], ["uint", "uvec2", "uvec3", "uvec4"], ["bool", "bvec2", "bvec3", "bvec4"]];
  for (const n3 of e3) if (n3.includes(t7)) return n3.map((t8) => it[t8]);
  throw new Error("Unable to find type family");
}
function M(t7) {
  return new Proxy(t7, { get(e3, n3) {
    if ("constructor" === n3) return new Proxy(e3.constructor, { construct: (t8, e4, n4) => M(new t8(...e4)) });
    if (n3 in e3) return e3[n3];
    if ("string" == typeof n3) {
      const e4 = k(t7.type);
      return dt(t7, n3, e4[n3.length - 1]);
    }
  } });
}
function S2(t7) {
  return new Proxy(t7, { construct: (t8, e3, n3) => M(new t8(...e3)) });
}
function j(t7) {
  return new Proxy(t7, { get(e3, n3) {
    if (n3 in e3) return e3[n3];
    if ("string" == typeof n3) {
      const e4 = parseInt(n3, 10);
      if (!isNaN(e4)) return dt(t7, `[${e4}]`, t7.elementType.constructor);
    }
  } });
}
function R(t7) {
  return new Proxy(t7, { construct: (t8, e3, n3) => j(new t8(...e3)) });
}
var P = class extends Error {
};
var _a;
var B = (_a = class extends r2 {
  constructor(t7, e3) {
    super(), this.elementType = t7, this.size = e3, this.children = [], this.type = "array";
  }
  clone() {
    const t7 = new h(this.elementType, this.size);
    return super.cloneInto(t7), t7;
  }
  get(t7, e3) {
    const n3 = new W(t7), r4 = null != e3 ? new W(e3) : null;
    if (null != r4) {
      return wt(this, n3, r4, D(this.elementType.constructor));
    }
    return dt(this, n3, this.elementType.constructor);
  }
  last() {
    return this.get(this.size - 1);
  }
  first() {
    return this.get(0);
  }
  findIndex(t7, e3, n3) {
    return Et(this, t7, e3, n3);
  }
  glslFindIndex(t7, e3, n3) {
    return $t(this, t7, e3, n3);
  }
  static ofType(t7, e3) {
    const n3 = { construct: (n4, r4) => new h(new t7(), e3) };
    return new Proxy(h, n3);
  }
}, h = _a, _a.type = "array", _a);
B = h = r([R], B);
var _q = class _q extends r2 {
  constructor(t7, e3, n3, r4 = false) {
    super(), this.elementType = t7, this.xSize = e3, this.ySize = n3, this.isRowMajor = r4, this.children = [], this.type = "array-2d";
  }
  clone() {
    const t7 = new _q(this.elementType, this.xSize, this.ySize, this.isRowMajor);
    return super.cloneInto(t7), t7;
  }
  get size() {
    return this.xSize * this.ySize;
  }
  get(t7, e3) {
    return this.isRowMajor ? this._getRowMajor(t7, e3) : this._getColumnMajor(t7, e3);
  }
  _getColumnMajor(t7, e3) {
    const n3 = new W(t7);
    return dt(this, new W(e3).add(n3.multiply(this.xSize)), this.elementType.constructor);
  }
  _getRowMajor(t7, e3) {
    const n3 = new W(t7), r4 = new W(e3);
    return dt(this, n3.add(r4.multiply(this.ySize)), this.elementType.constructor);
  }
  static ofType(t7, e3, n3, r4 = false) {
    return new Proxy(B, { construct: (c2, i4) => new _q(new t7(), e3, n3, r4) });
  }
};
_q.type = "array-2d";
var q = _q;
var _U = class _U extends r2 {
  constructor() {
    super(...arguments), this.type = "sampler2D", this.children = [];
  }
  clone() {
    const t7 = new _U();
    return t7.children = this.children.map(i3), super.cloneInto(t7), t7;
  }
};
_U.type = "sampler2D";
var U = _U;
var __ = class __ extends r2 {
  constructor(t7) {
    super(), this.type = "float", this.children = [t7];
  }
  clone() {
    const t7 = new __(i3(this.children[0]));
    return super.cloneInto(t7), t7;
  }
  multiply(t7) {
    return Dt(this, "number" == typeof t7 ? O(t7, __) : t7);
  }
  divide(t7) {
    return Ft(this, "number" == typeof t7 ? O(t7, __) : t7);
  }
  add(t7) {
    return kt(this, "number" == typeof t7 ? O(t7, __) : t7);
  }
  subtract(t7) {
    return Mt(this, "number" == typeof t7 ? O(t7, __) : t7);
  }
};
__.type = "float";
var _ = __;
var _a2;
var C = (_a2 = class extends r2 {
  constructor(t7, e3) {
    super(), this.type = "vec2", this.children = [t7, e3].filter((t8) => null != t8);
  }
  clone() {
    const t7 = new l2(i3(this.children[0]), i3(this.children[1]));
    return super.cloneInto(t7), t7;
  }
  get 0() {
    return dt(this, "[0]", _);
  }
  get 1() {
    return dt(this, "[1]", _);
  }
  get 2() {
    throw new P();
  }
  get 3() {
    throw new P();
  }
  multiply(t7) {
    return Dt(this, "number" == typeof t7 ? O(t7, _) : t7);
  }
  divide(t7) {
    return Ft(this, "number" == typeof t7 ? O(t7, _) : t7);
  }
  add(t7) {
    return kt(this, "number" == typeof t7 ? O(t7, _) : t7);
  }
  subtract(t7) {
    return Mt(this, "number" == typeof t7 ? O(t7, _) : t7);
  }
}, l2 = _a2, _a2.type = "vec2", _a2);
C = l2 = r([S2], C);
var _a3;
var X = (_a3 = class extends r2 {
  constructor(t7, e3, n3) {
    super(), this.type = "vec3", this.children = [t7, e3, n3].filter((t8) => null != t8);
  }
  get 0() {
    return dt(this, "[0]", _);
  }
  get 1() {
    return dt(this, "[1]", _);
  }
  get 2() {
    return dt(this, "[2]", _);
  }
  get 3() {
    throw new P();
  }
  clone() {
    const t7 = new a4(i3(this.children[0]), i3(this.children[1]), i3(this.children[2]));
    return super.cloneInto(t7), t7;
  }
  multiply(t7) {
    return Dt(this, "number" == typeof t7 ? O(t7, _) : t7);
  }
  divide(t7) {
    return Ft(this, "number" == typeof t7 ? O(t7, _) : t7);
  }
  add(t7) {
    return kt(this, "number" == typeof t7 ? O(t7, _) : t7);
  }
  subtract(t7) {
    return Mt(this, "number" == typeof t7 ? O(t7, _) : t7);
  }
}, a4 = _a3, _a3.type = "vec3", _a3);
X = a4 = r([S2], X);
var _a4;
var Y = (_a4 = class extends r2 {
  constructor(t7, e3, n3, r4) {
    super(), this.type = "vec4", this.children = [t7, e3, n3, r4].filter((t8) => null != t8);
  }
  clone() {
    const t7 = new f(i3(this.children[0]), i3(this.children[1]), i3(this.children[2]), i3(this.children[3]));
    return super.cloneInto(t7), t7;
  }
  get 0() {
    return dt(this, "[0]", _);
  }
  get 1() {
    return dt(this, "[1]", _);
  }
  get 2() {
    return dt(this, "[2]", _);
  }
  get 3() {
    return dt(this, "[3]", _);
  }
  multiply(t7) {
    return Dt(this, "number" == typeof t7 ? O(t7, _) : t7);
  }
  divide(t7) {
    return Ft(this, "number" == typeof t7 ? O(t7, _) : t7);
  }
  add(t7) {
    return kt(this, "number" == typeof t7 ? O(t7, _) : t7);
  }
  subtract(t7) {
    return Mt(this, "number" == typeof t7 ? O(t7, _) : t7);
  }
}, f = _a4, _a4.type = "vec4", _a4);
Y = f = r([S2], Y);
var _a5;
var G = (_a5 = class extends r2 {
  constructor(t7) {
    super(), this.type = "uint", this.children = [t7];
  }
  clone() {
    const t7 = new p2(i3(this.children[0]));
    return super.cloneInto(t7), t7;
  }
}, p2 = _a5, _a5.type = "uint", _a5);
G = p2 = r([S2], G);
var _a6;
var H = (_a6 = class extends r2 {
  constructor(t7, e3) {
    super(), this.type = "uvec2", this.children = [t7, e3].filter((t8) => null != t8);
  }
  clone() {
    const t7 = new d(i3(this.children[0]), i3(this.children[1]));
    return super.cloneInto(t7), t7;
  }
}, d = _a6, _a6.type = "uvec2", _a6);
H = d = r([S2], H);
var _a7;
var A = (_a7 = class extends r2 {
  constructor(t7, e3, n3) {
    super(), this.type = "uvec3", this.children = [t7, e3, n3].filter((t8) => null != t8);
  }
  clone() {
    const t7 = new w(i3(this.children[0]), i3(this.children[1]), i3(this.children[2]));
    return super.cloneInto(t7), t7;
  }
}, w = _a7, _a7.type = "uvec3", _a7);
A = w = r([S2], A);
var _a8;
var V = (_a8 = class extends r2 {
  constructor(t7, e3, n3, r4) {
    super(), this.type = "uvec4", this.children = [t7, e3, n3, r4].filter((t8) => null != t8);
  }
  clone() {
    const t7 = new y(i3(this.children[0]), i3(this.children[1]), i3(this.children[2]), i3(this.children[3]));
    return super.cloneInto(t7), t7;
  }
}, y = _a8, _a8.type = "uvec4", _a8);
V = y = r([S2], V);
var _J = class _J extends r2 {
  constructor(t7) {
    super(), this.type = "bool", this.children = [t7];
  }
  and(t7) {
    return Lt(this, t7);
  }
  or(t7) {
    return At(this, t7);
  }
  xor(t7) {
    return Jt(this, t7);
  }
  clone() {
    const t7 = new _J(i3(this.children[0]));
    return super.cloneInto(t7), t7;
  }
};
_J.type = "bool";
var J = _J;
var _a9;
var K = (_a9 = class extends r2 {
  constructor(t7, e3) {
    super(), this.type = "bvec2", this.children = [t7, e3].filter((t8) => null != t8);
  }
  all() {
    return te(this);
  }
  any() {
    return ee(this);
  }
  clone() {
    const t7 = new m(i3(this.children[0]), i3(this.children[1]));
    return super.cloneInto(t7), t7;
  }
}, m = _a9, _a9.type = "bvec2", _a9);
K = m = r([S2], K);
var _a10;
var L = (_a10 = class extends r2 {
  constructor(t7, e3, n3) {
    super(), this.type = "bvec3", this.children = [t7, e3, n3].filter((t8) => null != t8);
  }
  all() {
    return te(this);
  }
  any() {
    return ee(this);
  }
  clone() {
    const t7 = new v(i3(this.children[0]), i3(this.children[1]), i3(this.children[2]));
    return super.cloneInto(t7), t7;
  }
}, v = _a10, _a10.type = "bvec3", _a10);
function O(t7, e3) {
  if ("number" == typeof t7) {
    return new e3(t7);
  }
  return t7;
}
L = v = r([S2], L);
var _a11;
var Q = (_a11 = class extends r2 {
  constructor(t7, e3, n3, r4) {
    super(), this.type = "bvec4", this.children = [t7, e3, n3, r4].filter((t8) => null != t8);
  }
  all() {
    return te(this);
  }
  any() {
    return ee(this);
  }
  clone() {
    const t7 = new b(i3(this.children[0]), i3(this.children[1]), i3(this.children[2]), i3(this.children[3]));
    return super.cloneInto(t7), t7;
  }
}, b = _a11, _a11.type = "bvec4", _a11);
Q = b = r([S2], Q);
var _W = class _W extends r2 {
  constructor(t7) {
    super(), this.type = "int", this.children = [t7];
  }
  multiply(t7) {
    return Dt(this, O(t7, _W));
  }
  add(t7) {
    return kt(this, O(t7, _W));
  }
  subtract(t7) {
    return Mt(this, O(t7, _W));
  }
  divide(t7) {
    return Ft(this, O(t7, _W));
  }
  clone() {
    const t7 = new _W(i3(this.children[0]));
    return super.cloneInto(t7), t7;
  }
};
_W.type = "int";
var W = _W;
var _a12;
var Z = (_a12 = class extends r2 {
  constructor(t7, e3) {
    super(), this.type = "ivec2", this.children = [t7, e3].filter((t8) => null != t8);
  }
  clone() {
    const t7 = new x(i3(this.children[0]), i3(this.children[1]));
    return super.cloneInto(t7), t7;
  }
}, x = _a12, _a12.type = "ivec2", _a12);
Z = x = r([S2], Z);
var _a13;
var tt = (_a13 = class extends r2 {
  constructor(t7, e3, n3) {
    super(), this.type = "ivec3", this.children = [t7, e3, n3].filter((t8) => null != t8);
  }
  clone() {
    const t7 = new I(i3(this.children[0]), i3(this.children[1]), i3(this.children[2]));
    return super.cloneInto(t7), t7;
  }
}, I = _a13, _a13.type = "ivec3", _a13);
tt = I = r([S2], tt);
var _a14;
var et = (_a14 = class extends r2 {
  constructor(t7, e3, n3, r4) {
    super(), this.type = "ivec4", this.children = [t7, e3, n3, r4].filter((t8) => null != t8);
  }
  clone() {
    const t7 = new g(i3(this.children[0]), i3(this.children[1]), i3(this.children[2]), i3(this.children[3]));
    return super.cloneInto(t7), t7;
  }
}, g = _a14, _a14.type = "ivec4", _a14);
et = g = r([S2], et);
var _nt = class _nt extends r2 {
  constructor(t7, e3, n3, r4) {
    super(), this.type = "mat2", this.children = [t7, e3, n3, r4];
  }
  clone() {
    const t7 = new _nt(i3(this.children[0]), i3(this.children[1]), i3(this.children[2]), i3(this.children[3]));
    return super.cloneInto(t7), t7;
  }
  get(t7, e3) {
    return wt(this, new W(t7), new W(e3), _);
  }
  multiply(t7) {
    return Dt(this, t7);
  }
};
_nt.type = "mat2";
var nt = _nt;
var _rt = class _rt extends r2 {
  static identity() {
    return new _rt(1, 0, 0, 0, 1, 0, 0, 0, 1);
  }
  static fromRotation(t7) {
    const e3 = sn(t7), n3 = oe(t7);
    return new _rt(n3, e3, 0, xt(e3), n3, 0, 0, 0, 1);
  }
  constructor(t7, e3, n3, r4, c2, i4, s4, u2, o3) {
    super(), this.type = "mat3", this.children = [t7, e3, n3, r4, c2, i4, s4, u2, o3];
  }
  add(t7) {
    return kt(this, t7);
  }
  multiply(t7) {
    return Dt(this, t7);
  }
  get(t7, e3) {
    return wt(this, new W(t7), new W(e3), _);
  }
  clone() {
    const t7 = new _rt(i3(this.children[0]), i3(this.children[1]), i3(this.children[2]), i3(this.children[3]), i3(this.children[4]), i3(this.children[5]), i3(this.children[6]), i3(this.children[7]), i3(this.children[8]));
    return super.cloneInto(t7), t7;
  }
};
_rt.type = "mat3";
var rt = _rt;
var _ct = class _ct extends r2 {
  static identity() {
    return new _ct(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
  }
  constructor(t7, e3, n3, r4, c2, i4, s4, u2, o3, h3, l4, a6, f3, p3, d4, w3) {
    super(), this.type = "mat4", this.children = [t7, e3, n3, r4, c2, i4, s4, u2, o3, h3, l4, a6, f3, p3, d4, w3];
  }
  static fromColumns(t7, e3, n3, r4) {
    return new _ct(t7.x, t7.y, t7.z, t7.w, e3.x, e3.y, e3.z, e3.w, n3.x, n3.y, n3.z, n3.w, r4.x, r4.y, r4.z, r4.w);
  }
  multiply(t7) {
    return Dt(this, t7);
  }
  get(t7, e3) {
    return wt(this, new W(t7), new W(e3), _);
  }
  clone() {
    const t7 = new _ct(i3(this.children[0]), i3(this.children[1]), i3(this.children[2]), i3(this.children[3]), i3(this.children[4]), i3(this.children[5]), i3(this.children[6]), i3(this.children[7]), i3(this.children[8]), i3(this.children[9]), i3(this.children[10]), i3(this.children[11]), i3(this.children[12]), i3(this.children[13]), i3(this.children[14]), i3(this.children[15]));
    return super.cloneInto(t7), t7;
  }
};
_ct.type = "mat4";
var ct = _ct;
var it = { float: _, vec2: C, vec3: X, vec4: Y, int: W, ivec2: Z, ivec3: tt, ivec4: et, uint: G, uvec2: H, uvec3: A, uvec4: V, bool: J, bvec2: K, bvec3: L, bvec4: Q };
var st = (...t7) => new W(...t7);
var ut = (...t7) => new _(...t7);
var ot = (...t7) => new C(...t7);
var ht = (...t7) => new X(...t7);
var lt = (...t7) => new Y(...t7);
var ft = (...t7) => new rt(...t7);
function dt(t7, e3, n3) {
  const r4 = new n3(new c(e3, t7, n3));
  return r4.isImplicit = true, r4;
}
function wt(t7, e3, n3, r4) {
  const c2 = new r4(new o(e3, n3, t7, r4));
  return c2.isImplicit = true, c2;
}
function yt(t7, e3, n3, r4 = null) {
  if (r4) {
    const c3 = new r4(), s4 = new r4(new a3(t7, [e3, n3], true, false, c3));
    return s4.isImplicit = true, s4;
  }
  if ("float" === e3.type || "int" === e3.type) {
    const r5 = new n3.constructor(new a3(t7, [e3, n3], true, false, n3.constructor));
    return r5.isImplicit = true, r5;
  }
  if (("mat2" === e3.type || "mat3" === e3.type || "mat4" === e3.type) && "float" !== n3.type) {
    const r5 = new n3.constructor(new a3(t7, [e3, n3], true, false, n3.constructor));
    return r5.isImplicit = true, r5;
  }
  const c2 = new e3.constructor(new a3(t7, [e3, n3], true, false, e3.constructor));
  return c2.isImplicit = true, c2;
}
function mt(t7, e3, n3 = e3.constructor) {
  const r4 = new n3(new a3(t7, [e3], false, false, n3));
  return r4.isImplicit = true, r4;
}
function vt(t7, e3, n3, r4 = e3.constructor) {
  const c2 = new r4(new a3(t7, [e3, n3], false, false, r4));
  return c2.isImplicit = true, c2;
}
function bt(t7, e3, n3, r4, c2 = e3.constructor) {
  const s4 = new c2(new a3(t7, [e3, n3, r4], false, false, c2));
  return s4.isImplicit = true, s4;
}
function xt(t7) {
  return Dt(t7, ut(-1));
}
function It(t7, e3, n3, r4) {
  return new e3(new p(t7, e3, n3, r4));
}
function Et(t7, e3, n3 = 0, r4 = t7.size) {
  const c2 = new W(n3).setMutable().setDebugName("FindIndexIterator"), i4 = e3(t7.get(c2)).setDebugName("FindIndexPredicate"), s4 = It({ iter: c2 }, W, i4, ({ out: t8, iter: e4, subgraph: n4 }) => `
${t8} = -1;

for (; ${e4} < ${r4}; ${e4}++) {

${n4.body}

  if (${n4.varName}) {
    ${t8} = ${e4};
    break;
  }

}
`).setDebugName("FindIndexBlock");
  return s4;
}
function $t(t7, e3, n3 = 0, r4 = t7.size) {
  const c2 = It({ array: t7 }, W, null, ({ out: t8, array: c3 }) => `
${t8} = -1;
for (int i = ${n3}; i < ${r4}; i++) {
  bool condition;
  ${e3({ array: c3, i: "i", out: "condition" })}
  if (condition) {
    ${t8} = i;
    break;
  }
}
`).setDebugName("GlslFindIndexBlock");
  return c2;
}
function zt(t7, e3, n3) {
  const c2 = "function" == typeof e3 ? e3() : e3, i4 = "function" == typeof n3 ? n3() : n3, s4 = new c2.constructor(new u(t7, c2, i4));
  return s4.isImplicit = true, s4;
}
function Tt(...t7) {
  const e3 = t7.map(([t8, e4]) => "function" == typeof e4 ? [t8, e4()] : [t8, e4]), n3 = e3[0][1].constructor, r4 = e3.findIndex((t8) => true === t8[0]);
  if (-1 === r4) throw new Error("A cond must have a fallthrough case with `true`/; ");
  const c2 = e3.slice(0, r4), i4 = e3[r4][1], s4 = new n3(c2.reduceRight((t8, e4) => zt(e4[0], e4[1], t8), i4));
  return s4.isImplicit = true, s4;
}
function Dt(t7, e3) {
  return yt("*", t7, e3);
}
function Ft(t7, e3) {
  return yt("/", t7, e3);
}
function kt(t7, e3) {
  return yt("+", t7, e3);
}
function Mt(t7, e3) {
  return yt("-", t7, e3);
}
function St(t7, e3) {
  return yt("%", t7, e3);
}
function jt(t7, e3) {
  return yt("<<", t7, e3);
}
function Rt(t7, e3) {
  return yt(">>", t7, e3);
}
function Pt(t7, e3) {
  return yt("&", t7, e3);
}
function Bt(t7, e3) {
  return yt("|", t7, e3);
}
function qt(t7, e3) {
  return yt("^", t7, e3);
}
function Ut(t7) {
  return mt("~", t7);
}
function _t(t7, e3) {
  return yt("==", t7, e3, J);
}
function Ct(t7, e3) {
  return yt("!=", t7, e3, J);
}
function Xt(t7, e3) {
  return yt("<", t7, e3, J);
}
function Yt(t7, e3) {
  return yt("<=", t7, e3, J);
}
function Gt(t7, e3) {
  return yt(">", t7, e3, J);
}
function Ht(t7, e3) {
  return yt(">=", t7, e3, J);
}
function At(...t7) {
  return t7.length <= 1 ? t7[0] : t7.slice(1).reduce((t8, e3) => Vt(t8, e3), t7[0]);
}
function Vt(t7, e3) {
  return yt("||", t7, e3, J);
}
function Jt(...t7) {
  return t7.length <= 1 ? t7[0] : t7.slice(1).reduce((t8, e3) => Kt(t8, e3), t7[0]);
}
function Kt(t7, e3) {
  return yt("^^", t7, e3, J);
}
function Lt(...t7) {
  return t7.length <= 1 ? t7[0] : t7.slice(1).reduce((t8, e3) => Ot(t8, e3), t7[0]);
}
function Ot(t7, e3) {
  return yt("&&", t7, e3, J);
}
function Qt(t7) {
  return mt("abs", t7);
}
function Wt(t7) {
  return mt("acos", t7);
}
function Zt(t7) {
  return mt("acosh", t7);
}
function te(t7) {
  return mt("all", t7, J);
}
function ee(t7) {
  return mt("any", t7, J);
}
function ne(t7) {
  return mt("asin", t7);
}
function re(t7) {
  return mt("asinh", t7);
}
function ce(t7, e3) {
  return null == e3 ? mt("atan", t7) : vt("atan", t7, e3, t7.constructor);
}
function ie(t7) {
  return mt("atanh", t7);
}
function se(t7) {
  return mt("ceil", t7);
}
function ue(t7, e3, n3) {
  return bt("clamp", t7, e3, n3, t7.constructor);
}
function oe(t7) {
  return mt("cos", t7);
}
function he(t7) {
  return mt("cosh", t7);
}
function we(t7, e3) {
  return vt("distance", t7, e3, _);
}
function ye(t7, e3) {
  return vt("dot", t7, e3, _);
}
function xe(t7) {
  return mt("exp", t7);
}
function ze(t7) {
  return mt("floor", t7);
}
function Te(t7) {
  return mt("fract", t7);
}
function Re(t7) {
  return mt("length", t7, _);
}
function qe(t7) {
  return mt("log", t7);
}
function Ue(t7) {
  return mt("log2", t7);
}
function Ce(t7, e3) {
  return vt("max", t7, e3);
}
function Xe(t7, e3) {
  return vt("min", t7, e3);
}
function Ye(t7, e3, n3) {
  return bt("mix", t7, e3, n3);
}
function Ge(t7, e3) {
  return vt("mod", t7, e3);
}
function Ae(t7) {
  return mt("normalize", t7);
}
function Ve(t7) {
  return "bool" === t7.type ? mt("!", t7) : mt("not", t7);
}
function We(t7, e3) {
  return vt("pow", t7, e3);
}
function nn(t7) {
  return mt("round", t7);
}
function cn(t7) {
  return mt("sign", t7);
}
function sn(t7) {
  return mt("sin", t7);
}
function un(t7) {
  return mt("sinh", t7);
}
function on(t7, e3, n3) {
  return bt("smoothstep", t7, e3, n3);
}
function hn(t7) {
  return mt("sqrt", t7);
}
function ln(t7, e3) {
  return vt("step", t7, e3, e3.constructor);
}
function an(t7) {
  return mt("tan", t7);
}
function fn(t7) {
  return mt("tanh", t7);
}
function pn(t7, e3, n3) {
  return bt("texelFetch", t7, e3, n3, Y);
}
function yn(t7, e3) {
  return vt("texture", t7, e3, Y);
}
function Rn(t7, e3) {
  const { initialValue: n3, xRange: r4, yRange: c2, callback: i4 } = e3, [s4, u2] = r4, [o3, h3] = c2, l4 = new W(0).setMutable().setDebugName("iterX"), a6 = new W(0).setMutable().setDebugName("iterY"), f3 = n3.setMutable().setDebugName("accumulator"), p3 = i4(f3, t7.get(l4, a6), l4, a6).setDebugName("callback"), d4 = It({ iterX: l4, iterY: a6, accumulator: f3 }, n3.constructor, p3, ({ out: t8, iterX: e4, iterY: n4, accumulator: r5, subgraph: c3 }) => `
for (${n4} = ${o3}; ${n4} < ${h3}; ${n4}++) {
  for (${e4} = ${s4}; ${e4} < ${u2}; ${e4}++) {

  ${c3.body}

  ${r5} = ${c3.varName};
  }
}
${t8} = ${r5};
`).setDebugName("reduce2DBody");
  return d4;
}

// node_modules/@arcgis/core/views/2d/engine/webgl/shaderGraph/graph/GlslGraphWriter.js
var e2 = 5;
function t3(e3, t7, r4) {
  const i4 = t7.split("\n");
  for (const n3 of i4) if (n3.trim().length) {
    {
      let t8 = "";
      null != r4 && (t8 += `/*id:${r4 ?? "000"}*/   `), e3.body += t8.padEnd(14);
    }
    e3.body += " ".repeat(e3.indent) + n3 + "\n";
  }
}
var r3 = class {
  write(e3) {
    for (const t7 of e3.rootOutputNodes()) e3.shouldPruneOutputNode(t7) || (t7.variableName = this._write(e3, t7.node));
    return e3;
  }
  _createVarName(e3, t7) {
    let r4 = "";
    return "boolean" != typeof t7 && "number" != typeof t7 && t7.debugInfo.name && (r4 = `${t7.debugInfo.name}_`), `${r4}v${e3.varCount++}`;
  }
  _write(e3, t7, r4 = false) {
    if ("number" == typeof t7) return t7.toString();
    if ("boolean" == typeof t7) return t7.toString();
    let i4 = e3.getEmit(t7);
    if (i4) return i4;
    switch (t7.shaderType) {
      case "scope-node":
        i4 = this._writeScopeNode(e3, t7);
        break;
      case "primitive-node":
        i4 = this._writePrimitiveNode(e3, t7, r4);
        break;
      case "function-node":
        i4 = this._writeFunctionNode(e3, t7);
        break;
      case "property-access-node":
        i4 = this._writePropertyAccessNode(e3, t7);
        break;
      case "property-access-2d-node":
        i4 = this._writePropertyAccess2DNode(e3, t7);
        break;
      case "text-node":
        i4 = t7.text;
        break;
      case "block-node":
        i4 = this._writeBlockNode(e3, t7);
        break;
      case "condition-node":
        i4 = this._writeConditionNode(e3, t7);
    }
    return e3.setEmit(t7, i4), i4;
  }
  _writeScopeNode(e3, r4) {
    const i4 = new r4.child.constructor();
    i4.setDebugName(r4.debugInfo.name);
    const n3 = this._write(e3, i4, true);
    t3(e3, `{ /*ScopeStart: ${r4.uid} ${r4.debugInfo.name}*/`), e3.indent += 2;
    return t3(e3, `${n3} = ${this._write(e3, r4.child)};`), e3.indent -= 2, t3(e3, `} /*ScopeEnd: ${r4.uid} ${r4.debugInfo.name}*/`), n3;
  }
  _writeConditionNode(e3, r4) {
    const i4 = new r4.ifTrue.constructor(), n3 = this._write(e3, i4, true);
    t3(e3, `if (${this._write(e3, r4.condition)}) {`), e3.indent += 2;
    const o3 = e3.createSubgraphContext(), s4 = this._write(o3, r4.ifTrue);
    if (e3.body += o3.body, s4 && t3(e3, `${n3} = ${s4};`), e3.indent -= 2, t3(e3, "}"), r4.ifFalse) {
      t3(e3, "else {"), e3.indent += 2;
      const i5 = e3.createSubgraphContext(), o4 = this._write(i5, r4.ifFalse);
      e3.body += i5.body, o4 && t3(e3, `${n3} = ${o4};`), e3.indent -= 2, t3(e3, "}");
    }
    return n3;
  }
  _writeBlockNode(e3, r4) {
    const { captureList: i4, generator: n3, returnType: o3 } = r4, s4 = {};
    for (const t7 in i4) {
      if (!i4[t7]) continue;
      const r5 = this._write(e3, i4[t7]);
      s4[t7] = r5;
    }
    const d4 = new o3(), c2 = this._write(e3, d4, true);
    if (s4.out = c2, r4.subgraph) {
      const t7 = e3.createSubgraphContext(), i5 = this._write(t7, r4.subgraph.child), n4 = t7.body;
      s4.subgraph = { varName: i5, body: n4 };
    }
    const a6 = n3(s4);
    return t3(e3, "{\n"), e3.indent += 2, t3(e3, a6), e3.indent -= 2, t3(e3, "}\n"), c2;
  }
  _writePropertyAccessNode(e3, t7) {
    const r4 = this._write(e3, t7.target);
    if ("string" == typeof t7.property && t7.property.includes("[")) return `${r4}${t7.property}`;
    if ("string" != typeof t7.property) {
      return `${r4}[${this._write(e3, t7.property)}]`;
    }
    return `${r4}.${t7.property}`;
  }
  _writePropertyAccess2DNode(e3, t7) {
    return `${this._write(e3, t7.target)}[${this._write(e3, t7.x)}][${this._write(e3, t7.y)}]`;
  }
  _writeFunctionNode(r4, i4) {
    const n3 = i4.returnType.type;
    if (i4.isInfix) {
      const [o4, s5] = i4.children.map((e3) => this._write(r4, e3)), d4 = this._createVarName(r4, i4);
      return t3(r4, `${n3.padEnd(e2)} ${d4} = ${o4} ${i4.token} ${s5};`, i4.uid), d4;
    }
    const o3 = i4.children.map((e3) => this._write(r4, e3)).join(", "), s4 = this._createVarName(r4, i4);
    return t3(r4, `${n3.padEnd(e2)} ${s4} = ${i4.token}(${o3});`, i4.uid), s4;
  }
  _writePrimitiveNode(r4, i4, n3 = false) {
    const o3 = r4.getInput(i4);
    if (o3) return o3.isUsed = true, o3.variableName;
    const s4 = 1 === i4.children.length && i4.children[0]?.type === i4.type;
    if (!i4.isMutable && (i4.isImplicit || s4)) return this._write(r4, i4.children[0]);
    const d4 = this._createVarName(r4, i4);
    if (n3) return t3(r4, `${i4.type.padEnd(e2)} ${d4};`, i4.uid), d4;
    const c2 = !i4.debugInfo.name && !i4.isMutable;
    if (c2 && "float" === i4.type && "number" == typeof i4.children[0]) return Number.isInteger(i4.children[0]) ? i4.children[0].toFixed(1) : i4.children[0].toString();
    if (c2 && "int" === i4.type && "number" == typeof i4.children[0] && Number.isInteger(i4.children[0])) return i4.children[0].toString();
    const a6 = i4.children.map((e3) => this._write(r4, e3)).join(", ");
    return "array" === i4.type ? (t3(r4, `${i4.type.padEnd(e2)} ${d4} = [${a6}];`, i4.uid), d4) : c2 ? `${i4.type}(${a6})` : (t3(r4, `${i4.type.padEnd(e2)} ${d4} = ${i4.type}(${a6});`, i4.uid), d4);
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/shaderGraph/graph/ShaderGraphContext.js
var t4 = class _t2 {
  constructor(e3, t7, d4) {
    this.variableName = e3, this.variableInputType = t7, this.node = d4, this.type = "shader-input", this.isUsed = false;
  }
  clone() {
    return new _t2(this.variableName, this.variableInputType, i3(this.node));
  }
};
var d2 = class _d {
  constructor(e3, t7, d4) {
    this.outVariableName = e3, this.outVariableType = t7, this.node = d4, this.type = "shader-output";
  }
  clone() {
    const t7 = new _d(this.outVariableName, this.outVariableType, i3(this.node));
    return t7.variableName = this.variableName, t7;
  }
};
var o2 = class _o {
  static createVertex(e3, a6, n3, i4, r4, s4) {
    const u2 = [];
    for (const d4 in e3) {
      const o3 = e3[d4], a7 = n3.get(d4);
      a7 ? u2.push(new t4(a7, "builtin", o3)) : u2.push(new t4("a_" + d4, "in", o3));
    }
    for (const d4 of i4) {
      const e4 = d4.uniformHydrated;
      u2.push(new t4(d4.uniformName, "uniform", e4));
    }
    const p3 = [];
    for (const t7 in a6) {
      const e4 = a6[t7];
      "glPosition" === t7 ? p3.push(new d2("gl_Position", "builtin", e4)) : "glPointSize" === t7 ? p3.push(new d2("gl_PointSize", "builtin", e4)) : p3.push(new d2("v_" + t7, "out", e4));
    }
    return new _o(u2, p3, r4, s4);
  }
  static createFragment(e3, a6, n3, i4, r4, s4) {
    const u2 = [], p3 = Array.from(r4.rootOutputNodes());
    for (const d4 in e3) {
      const o3 = e3[d4], a7 = n3.get(d4);
      if (a7) {
        u2.push(new t4(a7, "builtin", o3));
        continue;
      }
      const i5 = p3.find((e4) => e4.node === o3);
      i5 && u2.push(new t4(i5.outVariableName, "in", o3));
    }
    for (const d4 of i4) {
      const e4 = d4.uniformHydrated;
      u2.push(new t4(d4.uniformName, "uniform", e4));
    }
    const h3 = [];
    for (const t7 in a6) {
      const e4 = a6[t7], o3 = n3.get(t7);
      "discard" === t7 ? h3.push(new d2(null, "discard", e4)) : o3 ? h3.push(new d2(o3, "builtin", e4)) : h3.push(new d2(t7, "out", e4));
    }
    return new _o(u2, h3, s4);
  }
  constructor(e3, t7, d4, o3) {
    this.type = "shader-graph-context", this.indent = 0, this.body = "", this.varCount = 0, this._inputShaderTypesByNodeUid = /* @__PURE__ */ new Map(), this._nodeEmitMap = /* @__PURE__ */ new Map();
    for (const a6 of e3) this._inputShaderTypesByNodeUid.set(a6.node.uid, a6);
    this._outputShaderTypes = t7, this._transformFeedbackBindings = d4, this._transformFeedbackNames = new Set(d4.map((e4) => "v_" + e4.propertyKey)), this._usedInFragmentShader = o3;
  }
  shouldPruneOutputNode(e3) {
    return !!this._usedInFragmentShader && ("builtin" !== e3.outVariableType && (!this._transformFeedbackNames.has(e3.outVariableName) && !this._usedInFragmentShader.has(e3.node.uid)));
  }
  setEmit(e3, t7) {
    this._nodeEmitMap.set(e3.uid, t7);
  }
  getEmit(e3) {
    return this._nodeEmitMap.get(e3.uid);
  }
  inputs() {
    return this._inputShaderTypesByNodeUid.values();
  }
  getInput(e3) {
    return this._inputShaderTypesByNodeUid.get(e3.uid);
  }
  *rootOutputNodes() {
    for (const e3 of this._outputShaderTypes) yield e3;
  }
  *nodes() {
    const e3 = [];
    for (const t7 of this._outputShaderTypes.values()) e3.push(t7.node);
    for (; e3.length; ) {
      const t7 = e3.pop();
      "number" != typeof t7 && "boolean" != typeof t7 && e3.push(...t7.children.filter(Boolean)), yield t7;
    }
  }
  *nodesOfTypeOrFunction() {
    for (const e3 of this.nodes()) "number" != typeof e3 && "boolean" != typeof e3 && (yield e3);
  }
  createSubgraphContext() {
    const e3 = this.clone();
    return e3.body = "", e3.indent = this.indent + 2, e3._nodeEmitMap = new Map(this._nodeEmitMap), e3;
  }
  clone() {
    const e3 = new _o([], this._outputShaderTypes, this._transformFeedbackBindings, this._usedInFragmentShader);
    return e3._inputShaderTypesByNodeUid = this._inputShaderTypesByNodeUid, e3.indent = this.indent, e3.body = this.body, e3.varCount = this.varCount, e3._nodeEmitMap = this._nodeEmitMap, e3;
  }
  insertVertexShader(e3) {
    e3.vertex.code.add(""), this._insertInputs(e3, "vertex"), e3.vertex.code.add(""), e3.vertex.code.add("// OUTPUTS: "), e3.vertex.code.add("// --------------------------------------------------------- ");
    for (const t7 of this.rootOutputNodes()) {
      const d4 = "builtin" === t7.outVariableType;
      this.shouldPruneOutputNode(t7) || (d4 ? e3.vertex.code.add(`// ${t7.outVariableType.padEnd(7)} ${t7.node.type.padEnd(9)} ${t7.outVariableName};`) : e3.vertex.code.add(`${t7.outVariableType.padEnd(10)} ${t7.node.type.padEnd(9)} ${t7.outVariableName};`));
    }
    e3.vertex.code.add(""), e3.vertex.code.add("void main() {"), e3.vertex.code.add("  " + this.body.split("\n").join("\n  "));
    for (const t7 of this.rootOutputNodes()) this.shouldPruneOutputNode(t7) || e3.vertex.code.add(`  ${t7.outVariableName} = ${t7.variableName};`);
    e3.vertex.code.add("}");
  }
  insertFragmentShader(e3) {
    this._insertInputs(e3, "fragment"), e3.fragment.code.add(""), e3.fragment.code.add("// OUTPUTS: "), e3.fragment.code.add("// --------------------------------------------------------- ");
    let t7 = 0;
    for (const d4 of this.rootOutputNodes()) {
      "builtin" === d4.outVariableType ? e3.fragment.code.add(`// ${d4.outVariableType.padEnd(7)} ${d4.node.type.padEnd(9)} ${d4.outVariableName};`) : e3.outputs.add(d4.outVariableName, d4.node.type, t7++);
    }
    e3.fragment.code.add(""), e3.fragment.code.add("void main() {"), e3.fragment.code.add("  " + this.body.split("\n").join("\n  "));
    for (const d4 of this.rootOutputNodes()) "discard" === d4.outVariableType ? (e3.fragment.code.add("  // TODO: Should ensure codegen for discard appears first in fragment shader"), e3.fragment.code.add(`  if (${d4.variableName}) {`), e3.fragment.code.add("    discard;"), e3.fragment.code.add("  }"), e3.fragment.code.add("  ")) : e3.fragment.code.add(`  ${d4.outVariableName} = ${d4.variableName};`);
    e3.fragment.code.add("}");
  }
  _insertInputs(e3, t7) {
    e3[t7].code.add("// INPUTS: "), e3[t7].code.add("// --------------------------------------------------------- ");
    for (const d4 of this.inputs()) d4.isUsed && "builtin" !== d4.variableInputType && ("array" === d4.node.type ? e3[t7].code.add(`${d4.variableInputType.padEnd(10)} ${d4.node.elementType.type.padEnd(9)} ${d4.variableName}[${d4.node.size}];`) : "array-2d" === d4.node.type ? e3[t7].code.add(`${d4.variableInputType.padEnd(10)} ${d4.node.elementType.type.padEnd(9)} ${d4.variableName}[${d4.node.size}]; // Emulated 2D Array. Not supported by ES3.0`) : e3[t7].code.add(`${d4.variableInputType.padEnd(10)} ${d4.node.type.padEnd(9)} ${d4.variableName};`));
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/textureUtils.js
function t5(t7, r4, a6) {
  const i4 = new a(r4.width, r4.height);
  return i4.dataType = r4.dataType, r4.depth && (i4.depth = r4.depth), r4.flipped && (i4.flipped = r4.flipped), r4.hasMipmap && (i4.hasMipmap = r4.hasMipmap), i4.internalFormat = r4.internalFormat, r4.isImmutable && (i4.isImmutable = r4.isImmutable), r4.isOpaque && (i4.isOpaque = r4.isOpaque), r4.maxAnisotropy && (i4.maxAnisotropy = r4.maxAnisotropy), i4.pixelFormat = r4.pixelFormat, r4.preMultiplyAlpha && (i4.preMultiplyAlpha = r4.preMultiplyAlpha), r4.samplingMode && (i4.samplingMode = r4.samplingMode), r4.target && (i4.target = r4.target), i4.uniform = r4.uniform, r4.unpackAlignment && (i4.unpackAlignment = r4.unpackAlignment), r4.wrapMode && (i4.wrapMode = r4.wrapMode), new S(t7, i4, a6);
}

// node_modules/@arcgis/core/views/2d/engine/webgl/shaderGraph/typed/TypedShaderProgram.js
var s3 = () => i.getLogger("esri.views.2d.engine.webgl.shaderGraph.typed.TypedShaderProgram");
function n2(e3, t7, o3) {
  const i4 = t7.length;
  if (i4 !== o3) {
    const n3 = new s("Invalid Uniform", `Invalid length, expected ${o3} but got ${i4}`, { uniformName: e3, values: t7 });
    s3().errorOnce(n3);
  }
}
var a5 = class {
  constructor(r4, e3, t7, o3, i4, s4) {
    this._program = null, this._vao = null, this._temporaryTextures = [], this.vertexShader = r4, this.fragmentShader = e3, this._locations = t7, this._locationInfo = o3, this._uniformBindings = i4, this._transformFeedbackBindings = s4;
  }
  destroy() {
    this._program && this._program.dispose(), this.cleanupTemporaryTextures();
  }
  get locations() {
    return this._locations;
  }
  get locationInfo() {
    return this._locationInfo;
  }
  setUniforms(r4) {
    this._uniforms = r4;
  }
  cleanupTemporaryTextures() {
    for (const r4 of this._temporaryTextures) r4.dispose();
    this._temporaryTextures = [];
  }
  bind(r4) {
    const e3 = this._uniforms;
    if (!this._program) {
      const e4 = /* @__PURE__ */ new Map();
      for (const [r5, o3] of this._locations) e4.set(r5, o3);
      const t7 = [];
      for (const r5 of this._transformFeedbackBindings ?? []) {
        const { index: e5, propertyKey: o3 } = r5;
        t7[e5] = `v_${o3}`;
      }
      this._program = new a2(r4, this.vertexShader, this.fragmentShader, e4, /* @__PURE__ */ new Map(), t7);
    }
    const s4 = this._program;
    r4.useProgram(s4);
    for (const o3 of this._uniformBindings) {
      const { shaderModulePath: a6, uniformName: f3, uniformType: m3, uniformArrayLength: c2 } = o3, u2 = t(a6, e3);
      if (null == u2) {
        if ("sampler2D" === m3) continue;
        throw new Error(`Failed to find uniform value for ${a6}`);
      }
      switch ("array" === m3 || "array-2d" === m3 ? o3.uniformArrayElementType : m3) {
        case "sampler2D": {
          const { unit: e4, texture: t7 } = u2;
          if (s4.setUniform1i(f3, e4), "type" in t7) r4.bindTexture(t7, e4);
          else {
            const o4 = t5(r4, t7.descriptor, t7.data);
            r4.bindTexture(o4, e4);
          }
          break;
        }
        case "int":
          if (!c2) {
            s4.setUniform1i(f3, u2);
            break;
          }
          n2(o3.uniformName, u2, c2), s4.setUniform1iv(f3, u2);
          break;
        case "float":
          if (!c2) {
            s4.setUniform1f(f3, u2);
            break;
          }
          n2(o3.uniformName, u2, c2), s4.setUniform1fv(f3, u2);
          break;
        case "vec2":
          if (!c2) {
            s4.setUniform2f(f3, u2[0], u2[1]);
            break;
          }
          n2(o3.uniformName, u2, c2), s4.setUniform2fv(f3, u2.flat());
          break;
        case "vec3":
          if (!c2) {
            s4.setUniform3f(f3, u2[0], u2[1], u2[2]);
            break;
          }
          n2(o3.uniformName, u2, c2), s4.setUniform3fv(f3, u2.flat());
          break;
        case "vec4":
          if (!c2) {
            s4.setUniform4f(f3, u2[0], u2[1], u2[2], u2[3]);
            break;
          }
          n2(o3.uniformName, u2, c2), s4.setUniform4fv(f3, u2.flat());
          break;
        case "mat3":
          s4.setUniformMatrix3fv(f3, u2);
          break;
        case "mat4":
          s4.setUniformMatrix4fv(f3, u2);
          break;
        default:
          throw new Error(`Unable to set uniform for type ${m3}`);
      }
    }
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/shaderGraph/GraphShaderModule.js
function d3(t7) {
  return new t7();
}
function h2(t7, e3, r4) {
  const o3 = t7.constructor[e3] ?? [];
  t7.constructor.hasOwnProperty(e3) || Object.defineProperty(t7.constructor, e3, { value: o3.slice() }), t7.constructor[e3].push(r4);
}
function f2(t7, e3) {
  return (r4, o3) => {
    h2(r4, "locations", { typeCtor: e3, propertyKey: o3, parameterIndex: null, index: t7 });
  };
}
var l3 = (t7) => (e3, r4) => {
  h2(e3, "builtins", { builtin: t7, propertyKey: r4 });
};
var m2 = (t7) => (e3, r4, o3) => {
  h2(e3, "inputs", { inputCtor: t7, propertyKey: r4, parameterIndex: o3 });
};
var g2 = (t7) => (e3, r4) => {
  h2(e3, "uniforms", { typeCtor: t7, propertyKey: r4 });
};
var _2 = (t7) => (e3, r4) => {
  h2(e3, "options", { typeCtor: t7, propertyKey: r4 });
};
var K2 = (t7, e3) => {
  h2(t7, "defines", { propertyKey: e3 });
};
var b2 = (t7, e3) => (r4, o3) => {
  r4.constructor.builtins.push({ builtin: t7, propertyKey: o3, typeCtor: e3 });
};
var _C = class _C {
};
_C.builtins = [];
var C2 = _C;
r([b2("gl_VertexID", W)], C2.prototype, "glVertexID", void 0);
var I2 = class {
};
var _v = class _v {
};
_v.builtins = [];
var v2 = _v;
r([b2("gl_FragCoord", Y)], v2.prototype, "glFragCoord", void 0), r([b2("gl_PointCoord", C)], v2.prototype, "glPointCoord", void 0);
var w2 = class {
};
r([l3("gl_FragDepth")], w2.prototype, "glFragDepth", void 0);
var P2 = class {
  constructor() {
    this.type = "uniform-group";
  }
  get _uniforms() {
    return this.constructor.uniforms ?? [];
  }
};
var j2 = class {
  constructor() {
    this.logShader = false, this.computeAttributes = {};
  }
  get vertexInput() {
    const t7 = this._shaderModuleClass.inputs.findLast((t8) => "vertex" === t8.propertyKey && 0 === t8.parameterIndex);
    if (!t7) throw new Error("Unable to find vertex input parameter");
    return t7;
  }
  get computeInput() {
    return this._shaderModuleClass.inputs.findLast((t7) => "vertex" === t7.propertyKey && 1 === t7.parameterIndex);
  }
  get fragmentInput() {
    const t7 = this._shaderModuleClass.inputs.findLast((t8) => "fragment" === t8.propertyKey);
    if (!t7) throw new Error("Unable to find fragment input parameter");
    return t7;
  }
  get transformFeedbackBindings() {
    return this.fragmentInput.inputCtor.transformFeedbackBindings ?? [];
  }
  get locations() {
    return [...this.vertexInput.inputCtor.locations, ...this.computeInput?.inputCtor.locations ?? []];
  }
  get locationsMap() {
    const t7 = /* @__PURE__ */ new Map(), r4 = /* @__PURE__ */ new Set();
    for (const o3 of this.locations) r4.has(o3.index) ? i.getLogger("esri.views.2d.engine.webgl.shaderGraph.GraphShaderModule").warnOnce("mapview-rendering", `Unable to assigned attribute ${o3.propertyKey} to ${o3.index}. Index already in use`, { locationsMap: t7 }) : (t7.set(o3.propertyKey, o3.index), r4.add(o3.index));
    return t7;
  }
  get locationInfo() {
    if (!this._locationInfo) {
      const t7 = this.locationsMap, e3 = Array.from(t7.entries()).map(([t8, e4]) => `${t8}.${e4}`).join("."), o3 = l(e3), n3 = this.computeAttributes;
      this._locationInfo = { hash: o3, stringHash: e3, locations: t7, computeAttributeMap: n3 };
    }
    return this._locationInfo;
  }
  get renamedLocationsMap() {
    const t7 = /* @__PURE__ */ new Map();
    for (const e3 of this.locations) t7.set("a_" + e3.propertyKey, e3.index);
    return t7;
  }
  get optionPropertyKeys() {
    if (!this._optionPropertyKeys) {
      const t7 = /* @__PURE__ */ new Set();
      for (const e3 of this._options) t7.add(e3.propertyKey);
      this._optionPropertyKeys = t7;
    }
    return this._optionPropertyKeys;
  }
  get _shaderModuleClass() {
    return this.constructor;
  }
  get _defines() {
    return this._shaderModuleClass.defines ?? [];
  }
  get _options() {
    return this._shaderModuleClass.options ?? [];
  }
  get _uniforms() {
    return this._shaderModuleClass.uniforms ?? [];
  }
  getProgram(t7, e3, r4, o3) {
    try {
      const { vertex: n3, fragment: s4, uniformBindings: i4 } = this._generateShaders(t7, e3, r4, o3);
      return new a5(n3, s4, this.renamedLocationsMap, this.locationInfo, i4, this.transformFeedbackBindings);
    } catch (n3) {
      return new a5("", "", this.renamedLocationsMap, this.locationInfo, [], this.transformFeedbackBindings);
    }
  }
  getDebugUniformClassInfo(t7) {
    const e3 = this._options.find((e4) => e4.propertyKey === t7);
    if (e3) return { type: "option", className: e3.typeCtor };
    const r4 = this._uniforms.find((e4) => e4.propertyKey === t7);
    if (!r4) throw new Error(`Unable to find uniform class type for property: ${t7}`);
    return { type: "required", className: r4.typeCtor };
  }
  getShaderKey(t7, e3, r4, o3) {
    const n3 = Object.keys(t7).map((e4) => `${e4}.${t7[e4]}`).join("."), s4 = Object.keys(r4).map((t8) => `${t8}.${r4[t8]}`).join("."), i4 = Object.keys(o3).map((t8) => `${t8}.${o3[t8]}`).join("."), p3 = Object.keys(e3).filter((t8) => this.optionPropertyKeys.has(t8) && e3[t8]).join(".");
    return `${this.type}.${n3}.${s4}.${i4}.${p3}`;
  }
  _generateShaders(t7, e3, r4, o3) {
    const n3 = [];
    this._setDefines(r4), this._setOptionalUniforms(n3, e3), this._setRequiredUniforms(n3);
    const s4 = this._hydrateVertexInput(o3), i4 = this._injectPackPrecisionFactor(s4, t7), c2 = this._hydrateComputeInput(), y2 = c2 && this._injectComputePackPrecisionFactor(c2, t7), d4 = this.vertex(i4, y2), h3 = this._hydrateFragmentInput(d4), f3 = this.fragment(h3), l4 = /* @__PURE__ */ new Set();
    for (const p3 in f3) {
      const t8 = f3[p3];
      e(l4, t8);
    }
    const m3 = this._getVertexInputBuiltins(), g3 = o2.createVertex({ ...s4, ...c2 }, d4, m3, n3, this.transformFeedbackBindings, l4);
    new r3().write(g3);
    const _3 = this._getFragmentInputBuiltins(f3);
    _3.set("glPointCoord", "gl_PointCoord");
    const K3 = o2.createFragment(h3, f3, _3, n3, g3, this.transformFeedbackBindings);
    new r3().write(K3);
    const x2 = this._createShaderBuilder(g3, K3), b3 = x2.generate("vertex"), C3 = x2.generate("fragment");
    return this.logShader && (console.log(b3), console.log(C3)), { vertex: b3, fragment: C3, uniformBindings: n3 };
  }
  _setDefines(t7) {
    for (const e3 in t7) this[e3] = t7[e3];
  }
  _setOptionalUniforms(t7, e3) {
    for (const r4 of this._options) {
      e3[r4.propertyKey] ? this[r4.propertyKey] = this._hydrateUniformGroup(t7, r4) : this[r4.propertyKey] = null;
    }
  }
  _setRequiredUniforms(t7) {
    for (const e3 of this._uniforms) this[e3.propertyKey] = this._hydrateUniformGroup(t7, e3);
  }
  _hydrateUniformGroup(t7, e3) {
    const r4 = new (0, e3.typeCtor)();
    for (const o3 of r4._uniforms ?? []) {
      const n3 = d3(o3.typeCtor), s4 = `u_${e3.propertyKey}_${o3.propertyKey}`, i4 = n3.type, p3 = [e3.propertyKey, o3.propertyKey].join(".");
      if ("type" in o3.typeCtor && "array" === o3.typeCtor.type) {
        const e4 = n3;
        t7.push({ shaderModulePath: p3, uniformName: s4, uniformType: i4, uniformArrayLength: e4.size, uniformArrayElementType: e4.elementType.type, uniformHydrated: n3 });
      } else if ("type" in o3.typeCtor && "array-2d" === o3.typeCtor.type) {
        const e4 = n3;
        t7.push({ shaderModulePath: p3, uniformName: s4, uniformType: i4, uniformArrayLength: e4.size, uniformArrayElementType: e4.elementType.type, uniformHydrated: n3 });
      } else t7.push({ shaderModulePath: p3, uniformName: s4, uniformType: i4, uniformHydrated: n3 });
      r4[o3.propertyKey] = n3;
    }
    return r4;
  }
  _hydrateVertexInput(t7) {
    const e3 = this.vertexInput.inputCtor, r4 = e3.locations.reduce((e4, r5) => false === t7[r5.propertyKey] ? e4 : { ...e4, [r5.propertyKey]: d3(r5.typeCtor) }, {});
    for (const { propertyKey: o3, typeCtor: n3 } of e3.builtins) {
      const t8 = d3(n3);
      r4[o3] = t8;
    }
    return r4;
  }
  _hydrateComputeInput() {
    if (null == this.computeInput) return null;
    return this.computeInput.inputCtor.locations.reduce((t7, e3) => ({ ...t7, [e3.propertyKey]: d3(e3.typeCtor) }), {});
  }
  _injectPackPrecisionFactor(t7, e3) {
    const r4 = {};
    for (const n3 in t7) {
      const s4 = t7[n3], i4 = e3[n3];
      if (i4) {
        if ("float" !== s4.type && "vec2" !== s4.type && "vec3" !== s4.type && "vec4" !== s4.type) throw new Error(`InternalError: packPrecisionFactor requires GenType, but found ${s4.type}`);
        r4[n3] = s4.divide(new _(i4));
      } else r4[n3] = s4;
    }
    return r4;
  }
  _injectComputePackPrecisionFactor(t7, e3) {
    const r4 = {}, n3 = /* @__PURE__ */ new Map();
    for (const o3 in this.computeAttributes) for (const t8 of this.computeAttributes[o3] ?? []) n3.set(t8, o3);
    for (const s4 in t7) {
      const i4 = t7[s4], p3 = n3.get(s4);
      if (!p3) continue;
      const a6 = e3[p3];
      if (a6) {
        if ("float" !== i4.type && "vec2" !== i4.type && "vec3" !== i4.type && "vec4" !== i4.type) throw new Error(`InternalError: packPrecisionFactor requires GenType, but found ${i4.type}`);
        r4[s4] = i4.divide(new _(a6));
      } else r4[s4] = i4;
    }
    return r4;
  }
  _hydrateFragmentInput(t7) {
    const e3 = {};
    for (const r4 in t7) e3[r4] = t7[r4];
    for (const { propertyKey: r4, typeCtor: o3 } of v2.builtins) {
      const t8 = d3(o3);
      e3[r4] = t8;
    }
    return e3;
  }
  _getVertexInputBuiltins() {
    const t7 = this.vertexInput.inputCtor, e3 = /* @__PURE__ */ new Map();
    for (const { builtin: r4, propertyKey: o3 } of t7.builtins) e3.set(o3, r4);
    return e3;
  }
  _getFragmentInputBuiltins(t7) {
    const e3 = t7.constructor, r4 = /* @__PURE__ */ new Map();
    for (const o3 of e3.builtins ?? []) r4.set(o3.propertyKey, o3.builtin);
    return r4;
  }
  _createShaderBuilder(t7, e3) {
    const r4 = new i2();
    return this._insertDebugInfo(r4), t7.insertVertexShader(r4), e3.insertFragmentShader(r4), r4;
  }
  _insertDebugInfo(t7) {
    t7.vertex.code.add("// DEFINES: "), t7.vertex.code.add("// --------------------------------------------------------- ");
    for (const e3 of this._defines) this[e3.propertyKey] ? t7.vertex.code.add(`//   ${e3.propertyKey}: true`) : t7.vertex.code.add(`//   ${e3.propertyKey}: false`);
    t7.vertex.code.add(""), t7.vertex.code.add("// OPTIONS: "), t7.vertex.code.add("// --------------------------------------------------------- ");
    for (const e3 of this._options) this[e3.propertyKey] ? t7.vertex.code.add(`//   ${e3.propertyKey}: true`) : t7.vertex.code.add(`//   ${e3.propertyKey}: false`);
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/shaderGraph/techniques/Technique.js
var t6 = class {
  constructor() {
    this.drawPhase = E.MAP | E.HITTEST | E.HIGHLIGHT | E.DEBUG;
  }
  startup() {
  }
  shutdown(s4) {
  }
};

export {
  t6 as t,
  B,
  q,
  U,
  _,
  C,
  X,
  Y,
  J,
  W,
  Z,
  nt,
  rt,
  ct,
  st,
  ut,
  ot,
  ht,
  lt,
  ft,
  xt,
  It,
  zt,
  Tt,
  Dt,
  St,
  jt,
  Rt,
  Pt,
  Bt,
  qt,
  Ut,
  _t,
  Ct,
  Xt,
  Yt,
  Gt,
  Ht,
  At,
  Jt,
  Lt,
  Qt,
  Wt,
  Zt,
  ne,
  re,
  ce,
  ie,
  se,
  ue,
  oe,
  he,
  we,
  ye,
  xe,
  ze,
  Te,
  Re,
  qe,
  Ue,
  Ce,
  Xe,
  Ye,
  Ge,
  Ae,
  Ve,
  We,
  nn,
  cn,
  sn,
  un,
  on,
  hn,
  ln,
  an,
  fn,
  pn,
  yn,
  Rn,
  a5 as a,
  f2 as f,
  m2 as m,
  g2 as g,
  _2,
  K2 as K,
  C2,
  I2 as I,
  v2 as v,
  w2 as w,
  P2 as P,
  j2 as j
};
//# sourceMappingURL=chunk-JSDQVIZI.js.map
