import {
  i
} from "./chunk-HNQNVI5C.js";
import {
  r as r2
} from "./chunk-EOMIFMDH.js";
import {
  o as o2
} from "./chunk-MUKDJQWB.js";
import {
  o
} from "./chunk-JUAPMINU.js";
import {
  m
} from "./chunk-N3XLUQJI.js";
import {
  a2
} from "./chunk-JUAD7TJ6.js";
import {
  r
} from "./chunk-5TPMG26T.js";
import {
  h,
  p
} from "./chunk-ZWFY3WY5.js";
import {
  V,
  Y,
  ot,
  st,
  tt
} from "./chunk-LQFTAGIV.js";
import {
  a
} from "./chunk-GWNLQRNM.js";

// node_modules/@arcgis/core/symbols/support/urlUtils.js
function l(r3, t, a4) {
  return t.imageData ? st({ mediaType: t.contentType || "image/png", isBase64: true, data: t.imageData }) : o3(t.url, a4);
}
function o3(e, r3) {
  if (!Y(e)) {
    const t = p2(r3);
    if (t) return V(t, "images", e);
  }
  return p(e, r3);
}
function s(e, a4, n, u) {
  if (tt(e)) {
    const r3 = ot(e);
    if (!r3) return;
    a4.contentType = r3.mediaType, a4.imageData = r3.data, n && n.imageData === a4.imageData && n.url && h(n.url, a4, "url", u);
  } else h(e, a4, "url", u);
}
var m2 = { json: { read: { source: ["imageData", "url"], reader: l }, write: { writer(e, r3, t, a4) {
  s(e, r3, this.source, a4);
} } } };
var c = { readOnly: true, json: { read: { source: ["imageData", "url"], reader(e, r3, t) {
  const a4 = {};
  return r3.imageData && (a4.imageData = r3.imageData), r3.contentType && (a4.contentType = r3.contentType), r3.url && (a4.url = o3(r3.url, t)), a4;
} } } };
function p2(e) {
  if (!e) return null;
  const { origin: r3, layer: t } = e;
  if ("service" !== r3 && "portal-item" !== r3) return null;
  const a4 = t?.type;
  return "feature" === a4 || "stream" === a4 ? t.parsedUrl?.path : "map-image" === a4 || "tile" === a4 ? e.url?.path : null;
}

// node_modules/@arcgis/core/symbols/PictureMarkerSymbol.js
var c2;
var a3 = c2 = class extends i {
  constructor(...r3) {
    super(...r3), this.color = null, this.type = "picture-marker", this.url = null, this.source = null, this.height = 12, this.width = 12, this.size = null;
  }
  normalizeCtorArgs(r3, t, o4) {
    if (r3 && "string" != typeof r3 && null == r3.imageData) return r3;
    const s2 = {};
    return r3 && (s2.url = r3), null != t && (s2.width = o2(t)), null != o4 && (s2.height = o2(o4)), s2;
  }
  readHeight(r3, t) {
    return t.size || r3;
  }
  readWidth(r3, t) {
    return t.size || r3;
  }
  clone() {
    const r3 = new c2({ angle: this.angle, height: this.height, url: this.url, width: this.width, xoffset: this.xoffset, yoffset: this.yoffset });
    return r3._set("source", a(this.source)), r3;
  }
  hash() {
    return `${super.hash()}.${this.height}.${this.url}.${this.width}`;
  }
};
r([m({ json: { write: false } })], a3.prototype, "color", void 0), r([r2({ esriPMS: "picture-marker" }, { readOnly: true })], a3.prototype, "type", void 0), r([m(m2)], a3.prototype, "url", void 0), r([m(c)], a3.prototype, "source", void 0), r([m({ type: Number, cast: o2, json: { write: true } })], a3.prototype, "height", void 0), r([o("height", ["height", "size"])], a3.prototype, "readHeight", null), r([m({ type: Number, cast: o2, json: { write: true } })], a3.prototype, "width", void 0), r([m({ json: { write: false } })], a3.prototype, "size", void 0), a3 = c2 = r([a2("esri.symbols.PictureMarkerSymbol")], a3);

export {
  m2 as m,
  c,
  a3 as a
};
//# sourceMappingURL=chunk-KUP5BM5G.js.map
