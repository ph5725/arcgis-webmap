import {
  e as e2
} from "./chunk-UZRZVWLE.js";
import {
  i2 as i,
  s
} from "./chunk-XWG6QGFK.js";
import {
  a
} from "./chunk-GWNLQRNM.js";
import {
  F2 as F,
  e2 as e,
  p,
  u,
  y2 as y
} from "./chunk-FXKORAMT.js";

// node_modules/@arcgis/core/views/3d/layers/i3s/LEPCC.js
var t = true;
var o = { identifierOffset: 0, identifierLength: 10, versionOffset: 10, checksumOffset: 12, byteCount: 16 };
function r(e3, r2, n2) {
  return { identifier: String.fromCharCode.apply(null, new Uint8Array(e3, n2 + o.identifierOffset, o.identifierLength)), version: r2.getUint16(n2 + o.versionOffset, t), checksum: r2.getUint32(n2 + o.checksumOffset, t) };
}
var n = { sizeLo: 0, sizeHi: 4, minX: 8, minY: 16, minZ: 24, maxX: 32, maxY: 40, maxZ: 48, errorX: 56, errorY: 64, errorZ: 72, count: 80, reserved: 84, byteCount: 88 };
function i2(e3, o2) {
  return { sizeLo: e3.getUint32(o2 + n.sizeLo, t), sizeHi: e3.getUint32(o2 + n.sizeHi, t), minX: e3.getFloat64(o2 + n.minX, t), minY: e3.getFloat64(o2 + n.minY, t), minZ: e3.getFloat64(o2 + n.minZ, t), maxX: e3.getFloat64(o2 + n.maxX, t), maxY: e3.getFloat64(o2 + n.maxY, t), maxZ: e3.getFloat64(o2 + n.maxZ, t), errorX: e3.getFloat64(o2 + n.errorX, t), errorY: e3.getFloat64(o2 + n.errorY, t), errorZ: e3.getFloat64(o2 + n.errorZ, t), count: e3.getUint32(o2 + n.count, t), reserved: e3.getUint32(o2 + n.reserved, t) };
}
function c(t4) {
  const c2 = new DataView(t4, 0);
  let d2 = 0;
  const { identifier: l2, version: a3 } = r(t4, c2, d2);
  if (d2 += o.byteCount, "LEPCC     " !== l2) throw new s("lepcc-decode-error", "Bad identifier");
  if (a3 > 1) throw new s("lepcc-decode-error", "Unknown version");
  const u3 = i2(c2, d2);
  d2 += n.byteCount;
  if (u3.sizeHi * 2 ** 32 + u3.sizeLo !== t4.byteLength) throw new s("lepcc-decode-error", "Bad size");
  const f2 = new Float64Array(3 * u3.count), h3 = [], w3 = [], g2 = [], p3 = [];
  if (d2 = s2(t4, d2, h3), d2 = s2(t4, d2, w3), d2 = s2(t4, d2, g2), d2 = s2(t4, d2, p3), d2 !== t4.byteLength) throw new s("lepcc-decode-error", "Bad length");
  let m2 = 0, U2 = 0;
  for (let e3 = 0; e3 < h3.length; e3++) {
    U2 += h3[e3];
    let t5 = 0;
    for (let o2 = 0; o2 < w3[e3]; o2++) {
      t5 += g2[m2];
      const e4 = p3[m2];
      f2[3 * m2] = Math.min(u3.maxX, u3.minX + 2 * u3.errorX * t5), f2[3 * m2 + 1] = Math.min(u3.maxY, u3.minY + 2 * u3.errorY * U2), f2[3 * m2 + 2] = Math.min(u3.maxZ, u3.minZ + 2 * u3.errorZ * e4), m2++;
    }
  }
  return { errorX: u3.errorX, errorY: u3.errorY, errorZ: u3.errorZ, result: f2 };
}
function s2(e3, t4, o2) {
  const r2 = [];
  t4 = d(e3, t4, r2);
  const n2 = [];
  for (let i3 = 0; i3 < r2.length; i3++) {
    n2.length = 0, t4 = d(e3, t4, n2);
    for (let e4 = 0; e4 < n2.length; e4++) o2.push(n2[e4] + r2[i3]);
  }
  return t4;
}
function d(o2, r2, n2) {
  const i3 = new DataView(o2, r2), c2 = i3.getUint8(0), s3 = 31 & c2, d2 = !!(32 & c2), l2 = (192 & c2) >> 6;
  let a3 = 0;
  if (0 === l2) a3 = i3.getUint32(1, t), r2 += 5;
  else if (1 === l2) a3 = i3.getUint16(1, t), r2 += 3;
  else {
    if (2 !== l2) throw new s("lepcc-decode-error", "Bad count type");
    a3 = i3.getUint8(1), r2 += 2;
  }
  if (d2) throw new s("lepcc-decode-error", "LUT not implemented");
  const u3 = Math.ceil(a3 * s3 / 8), f2 = new Uint8Array(o2, r2, u3);
  let h3 = 0, w3 = 0, g2 = 0;
  const p3 = -1 >>> 32 - s3;
  for (let e3 = 0; e3 < a3; e3++) {
    for (; w3 < s3; ) h3 |= f2[g2] << w3, w3 += 8, g2 += 1;
    n2[e3] = h3 & p3, h3 >>>= s3, w3 -= s3, w3 + s3 > 32 && (h3 |= f2[g2 - 1] >> 8 - w3);
  }
  return r2 + g2;
}
var l = { sizeLo: 0, sizeHi: 4, count: 8, colorMapCount: 12, lookupMethod: 14, compressionMethod: 15, byteCount: 16 };
function a2(e3, o2) {
  return { sizeLo: e3.getUint32(o2 + l.sizeLo, t), sizeHi: e3.getUint32(o2 + l.sizeHi, t), count: e3.getUint32(o2 + l.count, t), colorMapCount: e3.getUint16(o2 + l.colorMapCount, t), lookupMethod: e3.getUint8(o2 + l.lookupMethod), compressionMethod: e3.getUint8(o2 + l.compressionMethod) };
}
function u2(t4) {
  const n2 = new DataView(t4, 0);
  let i3 = 0;
  const { identifier: c2, version: s3 } = r(t4, n2, i3);
  if (i3 += o.byteCount, "ClusterRGB" !== c2) throw new s("lepcc-decode-error", "Bad identifier");
  if (s3 > 1) throw new s("lepcc-decode-error", "Unknown version");
  const d2 = a2(n2, i3);
  i3 += l.byteCount;
  if (d2.sizeHi * 2 ** 32 + d2.sizeLo !== t4.byteLength) throw new s("lepcc-decode-error", "Bad size");
  if ((2 === d2.lookupMethod || 1 === d2.lookupMethod) && 0 === d2.compressionMethod) {
    if (3 * d2.colorMapCount + d2.count + i3 !== t4.byteLength || d2.colorMapCount > 256) throw new s("lepcc-decode-error", "Bad count");
    const o2 = new Uint8Array(t4, i3, 3 * d2.colorMapCount), r2 = new Uint8Array(t4, i3 + 3 * d2.colorMapCount, d2.count), n3 = new Uint8Array(3 * d2.count);
    for (let e3 = 0; e3 < d2.count; e3++) {
      const t5 = r2[e3];
      n3[3 * e3] = o2[3 * t5], n3[3 * e3 + 1] = o2[3 * t5 + 1], n3[3 * e3 + 2] = o2[3 * t5 + 2];
    }
    return n3;
  }
  if (0 === d2.lookupMethod && 0 === d2.compressionMethod) {
    if (3 * d2.count + i3 !== t4.byteLength || 0 !== d2.colorMapCount) throw new s("lepcc-decode-error", "Bad count");
    return new Uint8Array(t4, i3).slice();
  }
  if (d2.lookupMethod <= 2 && 1 === d2.compressionMethod) {
    if (i3 + 3 !== t4.byteLength || 1 !== d2.colorMapCount) throw new s("lepcc-decode-error", "Bad count");
    const o2 = n2.getUint8(i3), r2 = n2.getUint8(i3 + 1), c3 = n2.getUint8(i3 + 2), s4 = new Uint8Array(3 * d2.count);
    for (let e3 = 0; e3 < d2.count; e3++) s4[3 * e3] = o2, s4[3 * e3 + 1] = r2, s4[3 * e3 + 2] = c3;
    return s4;
  }
  throw new s("lepcc-decode-error", "Bad method " + d2.lookupMethod + "," + d2.compressionMethod);
}
var f = { sizeLo: 0, sizeHi: 4, count: 8, scaleFactor: 12, bitsPerPoint: 14, reserved: 15, byteCount: 16 };
function h(e3, o2) {
  return { sizeLo: e3.getUint32(o2 + f.sizeLo, t), sizeHi: e3.getUint32(o2 + f.sizeHi, t), count: e3.getUint32(o2 + f.count, t), scaleFactor: e3.getUint16(o2 + f.scaleFactor, t), bitsPerPoint: e3.getUint8(o2 + f.bitsPerPoint), reserved: e3.getUint8(o2 + f.reserved) };
}
function w(t4) {
  const n2 = new DataView(t4, 0);
  let i3 = 0;
  const { identifier: c2, version: s3 } = r(t4, n2, i3);
  if (i3 += o.byteCount, "Intensity " !== c2) throw new s("lepcc-decode-error", "Bad identifier");
  if (s3 > 1) throw new s("lepcc-decode-error", "Unknown version");
  const l2 = h(n2, i3);
  i3 += f.byteCount;
  if (l2.sizeHi * 2 ** 32 + l2.sizeLo !== t4.byteLength) throw new s("lepcc-decode-error", "Bad size");
  const a3 = new Uint16Array(l2.count);
  if (8 === l2.bitsPerPoint) {
    if (l2.count + i3 !== t4.byteLength) throw new s("lepcc-decode-error", "Bad size");
    const o2 = new Uint8Array(t4, i3, l2.count);
    for (let e3 = 0; e3 < l2.count; e3++) a3[e3] = o2[e3] * l2.scaleFactor;
  } else if (16 === l2.bitsPerPoint) {
    if (2 * l2.count + i3 !== t4.byteLength) throw new s("lepcc-decode-error", "Bad size");
    const o2 = new Uint16Array(t4, i3, l2.count);
    for (let e3 = 0; e3 < l2.count; e3++) a3[e3] = o2[e3] * l2.scaleFactor;
  } else {
    const o2 = [];
    if (d(t4, i3, o2) !== t4.byteLength) throw new s("lepcc-decode-error", "Bad size");
    for (let e3 = 0; e3 < l2.count; e3++) a3[e3] = o2[e3] * l2.scaleFactor;
  }
  return a3;
}

// node_modules/@arcgis/core/geometry/support/UCharArray.js
function t2(t4) {
  return Array.isArray(t4) ? t4.length < y ? t4 : new Uint8Array(t4) : t4.length < y ? Array.from(t4) : t4;
}

// node_modules/@arcgis/core/geometry/support/UShortArray.js
function t3(t4) {
  return Array.isArray(t4) ? t4.length < y ? t4 : new Uint16Array(t4) : t4.length < y ? Array.from(t4) : t4;
}

// node_modules/@arcgis/core/views/3d/layers/i3s/I3SBinaryReader.js
var b = () => i.getLogger("esri.views.3d.layers.i3s.I3SBinaryReader");
function y2(t4, n2, r2) {
  let o2 = "", i3 = 0;
  for (; i3 < r2; ) {
    const u3 = t4[n2 + i3];
    if (u3 < 128) o2 += String.fromCharCode(u3), i3++;
    else if (u3 >= 192 && u3 < 224) {
      if (i3 + 1 >= r2) throw new s("utf8-decode-error", "UTF-8 Decode failed. Two byte character was truncated.");
      const a3 = (31 & u3) << 6 | 63 & t4[n2 + i3 + 1];
      o2 += String.fromCharCode(a3), i3 += 2;
    } else if (u3 >= 224 && u3 < 240) {
      if (i3 + 2 >= r2) throw new s("utf8-decode-error", "UTF-8 Decode failed. Multi byte character was truncated.");
      const a3 = (15 & u3) << 12 | (63 & t4[n2 + i3 + 1]) << 6 | 63 & t4[n2 + i3 + 2];
      o2 += String.fromCharCode(a3), i3 += 3;
    } else {
      if (!(u3 >= 240 && u3 < 248)) throw new s("utf8-decode-error", "UTF-8 Decode failed. Invalid multi byte sequence.");
      {
        if (i3 + 3 >= r2) throw new s("utf8-decode-error", "UTF-8 Decode failed. Multi byte character was truncated.");
        const a3 = (7 & u3) << 18 | (63 & t4[n2 + i3 + 1]) << 12 | (63 & t4[n2 + i3 + 2]) << 6 | 63 & t4[n2 + i3 + 3];
        if (a3 >= 65536) {
          const e3 = 55296 + (a3 - 65536 >> 10), t5 = 56320 + (1023 & a3);
          o2 += String.fromCharCode(e3, t5);
        } else o2 += String.fromCharCode(a3);
        i3 += 4;
      }
    }
  }
  return o2;
}
function g(e3, t4) {
  const n2 = { byteOffset: 0, byteCount: 0, fields: /* @__PURE__ */ Object.create(null) };
  let r2 = 0;
  for (let o2 = 0; o2 < t4.length; o2++) {
    const i3 = t4[o2], u3 = i3.valueType || i3.type, a3 = F2[u3];
    n2.fields[i3.property] = a3(e3, r2), r2 += j[u3].BYTES_PER_ELEMENT;
  }
  return n2.byteCount = r2, n2;
}
function p2(e3, t4, n2) {
  return m(e3, t4, n2).map((e4) => {
    const t5 = e4 ? Date.parse(e4) : null;
    return null == t5 || Number.isNaN(t5) ? null : t5;
  });
}
function m(t4, n2, r2) {
  const o2 = [];
  let i3, u3, a3 = 0;
  for (u3 = 0; u3 < t4; u3 += 1) {
    if (i3 = n2[u3], i3 > 0) {
      if (o2.push(y2(r2, a3, i3 - 1)), 0 !== r2[a3 + i3 - 1]) throw new s("string-array-error", "Invalid string array: missing null termination.");
    } else o2.push(null);
    a3 += i3;
  }
  return o2;
}
function w2(e3, t4) {
  return new (0, j[t4.valueType])(e3, t4.byteOffset, t4.count * t4.valuesPerElement);
}
function v(e3, t4) {
  const n2 = w2(e3, t4);
  if (n2.length >= y) return n2;
  const r2 = new Array();
  return n2.forEach((e4, t5) => r2.push(C(n2, t5))), r2;
}
function C(e3, t4) {
  if (!e3) return null;
  const n2 = e3[t4];
  if (u(e3)) return n2 === p ? null : n2;
  if (e(e3)) return n2 === F ? null : n2;
  return n2 != n2 ? null : n2;
}
function I(e3, t4) {
  return new Uint8Array(e3, t4.byteOffset, t4.byteCount);
}
function h2(n2, r2, o2) {
  const i3 = null != r2.header ? g(n2, r2.header) : { byteOffset: 0, byteCount: 0, fields: { count: o2 } }, u3 = { header: i3, byteOffset: i3.byteCount, byteCount: 0, entries: /* @__PURE__ */ Object.create(null) };
  let a3 = i3.byteCount;
  for (let s3 = 0; s3 < r2.ordering.length; s3++) {
    const n3 = r2.ordering[s3], o3 = a(r2[n3]);
    if (o3.count = i3.fields.count ?? 0, "String" === o3.valueType) {
      if (o3.byteOffset = a3, o3.byteCount = i3.fields[n3 + "ByteCount"], "UTF-8" !== o3.encoding) throw new s("unsupported-encoding", "Unsupported String encoding.", { encoding: o3.encoding });
      if (o3.timeEncoding && "ECMA_ISO8601" !== o3.timeEncoding) throw new s("unsupported-time-encoding", "Unsupported time encoding.", { timeEncoding: o3.timeEncoding });
    } else {
      if (!R(o3.valueType)) throw new s("unsupported-value-type", "Unsupported binary valueType", { valueType: o3.valueType });
      {
        const e3 = B(o3.valueType);
        a3 += a3 % e3 !== 0 ? e3 - a3 % e3 : 0, o3.byteOffset = a3, o3.byteCount = e3 * o3.valuesPerElement * o3.count;
      }
    }
    a3 += o3.byteCount ?? 0, u3.entries[n3] = o3;
  }
  return u3.byteCount = a3 - u3.byteOffset, u3;
}
function A(t4, n2, r2) {
  if (n2 !== t4 && b().error(`Invalid ${r2} buffer size
 expected: ${t4}, actual: ${n2})`), n2 < t4) throw new s("buffer-too-small", "Binary buffer is too small", { expectedSize: t4, actualSize: n2 });
}
function U(e3, t4) {
  const n2 = g(e3, t4 && t4.header);
  let r2 = n2.byteCount;
  const o2 = { isDraco: false, header: n2, byteOffset: n2.byteCount, byteCount: 0, vertexAttributes: {} }, i3 = n2.fields, u3 = null != i3.vertexCount ? i3.vertexCount : i3.count;
  for (const c2 of t4.ordering) {
    if (!t4.vertexAttributes[c2]) continue;
    const e4 = { ...t4.vertexAttributes[c2], byteOffset: r2, count: u3 }, n3 = x[c2] || "_" + c2;
    o2.vertexAttributes[n3] = e4, r2 += B(e4.valueType) * e4.valuesPerElement * u3;
  }
  const a3 = i3.faceCount;
  if (t4.faces && a3) {
    o2.faces = {};
    for (const e4 of t4.ordering) {
      if (!t4.faces[e4]) continue;
      const n3 = { ...t4.faces[e4], byteOffset: r2, count: a3 };
      o2.faces[e4] = n3, r2 += B(n3.valueType) * n3.valuesPerElement * a3;
    }
  }
  const s3 = i3.featureCount;
  if (t4.featureAttributes && t4.featureAttributeOrder && s3) {
    o2.featureAttributes = {};
    for (const e4 of t4.featureAttributeOrder) {
      if (!t4.featureAttributes[e4]) continue;
      const n3 = { ...t4.featureAttributes[e4], byteOffset: r2, count: s3 };
      o2.featureAttributes[e4] = n3;
      r2 += ("UInt64" === n3.valueType ? 8 : B(n3.valueType)) * n3.valuesPerElement * s3;
    }
  }
  return A(r2, e3.byteLength, "geometry"), o2.byteCount = r2 - o2.byteOffset, o2;
}
var x = { position: e2.POSITION, normal: e2.NORMAL, color: e2.COLOR, uv0: e2.UV0, region: e2.UVREGION };
function D(t4, n2, r2, o2 = false) {
  if ("lepcc-rgb" === t4.encoding) return o2 ? u2(n2) : t2(u2(n2));
  if ("lepcc-intensity" === t4.encoding) return o2 ? w(n2) : t3(w(n2));
  if (null != t4.encoding && "" !== t4.encoding) throw new s("unknown-attribute-storage-info-encoding", "Unknown Attribute Storage Info Encoding");
  t4["attributeByteCounts "] && !t4.attributeByteCounts && (b().warn("Warning: Trailing space in 'attributeByteCounts '."), t4.attributeByteCounts = t4["attributeByteCounts "]), "ObjectIds" === t4.ordering[0] && t4.hasOwnProperty("objectIds") && (b().warn("Warning: Case error in objectIds"), t4.ordering[0] = "objectIds");
  const i3 = h2(n2, t4, r2);
  A(i3.byteOffset + i3.byteCount, n2.byteLength, "attribute");
  const u3 = i3.entries.attributeValues || i3.entries.objectIds;
  if (u3) {
    if ("String" === u3.valueType) {
      const e3 = i3.entries.attributeByteCounts, t5 = w2(n2, e3), r3 = I(n2, u3);
      return u3.timeEncoding ? p2(e3.count, t5, r3) : m(e3.count, t5, r3);
    }
    return o2 ? w2(n2, u3) : v(n2, u3);
  }
  throw new s("bad-attribute-storage-info", "Bad attributeStorageInfo specification.");
}
var j = { Float32: Float32Array, Float64: Float64Array, UInt8: Uint8Array, Int8: Int8Array, UInt16: Uint16Array, Int16: Int16Array, UInt32: Uint32Array, Int32: Int32Array };
var F2 = { Float32: (e3, t4) => new DataView(e3, 0).getFloat32(t4, true), Float64: (e3, t4) => new DataView(e3, 0).getFloat64(t4, true), UInt8: (e3, t4) => new DataView(e3, 0).getUint8(t4), Int8: (e3, t4) => new DataView(e3, 0).getInt8(t4), UInt16: (e3, t4) => new DataView(e3, 0).getUint16(t4, true), Int16: (e3, t4) => new DataView(e3, 0).getInt16(t4, true), UInt32: (e3, t4) => new DataView(e3, 0).getUint32(t4, true), Int32: (e3, t4) => new DataView(e3, 0).getInt32(t4, true) };
function R(e3) {
  return j.hasOwnProperty(e3);
}
function B(e3) {
  return R(e3) ? j[e3].BYTES_PER_ELEMENT : 0;
}

export {
  c,
  w2 as w,
  C,
  U,
  D
};
//# sourceMappingURL=chunk-KVDS5WGN.js.map
