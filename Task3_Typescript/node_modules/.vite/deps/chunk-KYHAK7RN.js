import {
  i as i2,
  n,
  r as r4
} from "./chunk-QYCJPZF2.js";
import {
  F
} from "./chunk-G3V62EXP.js";
import {
  e as e2
} from "./chunk-QARUBZM2.js";
import {
  E,
  o as o2
} from "./chunk-733XT7D4.js";
import {
  $
} from "./chunk-TAPCW5Z5.js";
import {
  r as r3
} from "./chunk-JOUWZB2W.js";
import {
  e
} from "./chunk-IGBV77N3.js";
import {
  N
} from "./chunk-3PPDORWL.js";
import {
  M,
  f,
  h,
  i,
  o
} from "./chunk-DRAQJS2F.js";
import {
  A,
  O,
  R,
  Y
} from "./chunk-BZYXFNL4.js";
import {
  L
} from "./chunk-X3UT6DT7.js";
import {
  r as r2
} from "./chunk-MPV4X4LZ.js";
import {
  r2 as r,
  u2 as u
} from "./chunk-GZ2P4SCJ.js";

// node_modules/@arcgis/core/views/2d/engine/webgl/shaderGraph/techniques/GraphicInstanceStore.js
var n2 = 0;
function a(i4, a2) {
  return new i2(r4(n2++), i4, a2);
}
var o3 = { visualVariableColor: null, visualVariableOpacity: null, visualVariableSizeMinMaxValue: null, visualVariableSizeScaleStops: null, visualVariableSizeStops: null, visualVariableSizeUnitValue: null, visualVariableRotation: null, visualVariableSizeOutlineScaleStops: null };
var l = class {
  constructor() {
    this.instances = { fill: a(F.fill, { uniforms: o3, optionalAttributes: { zoomRange: true } }), marker: a(F.marker, { uniforms: o3, optionalAttributes: { zoomRange: true } }), line: a(F.line, { uniforms: o3, optionalAttributes: { zoomRange: true } }), text: a(F.text, { uniforms: o3, optionalAttributes: { zoomRange: true, referenceSymbol: false, clipAngle: false, visibility: false } }), outlineFill: a(F.outlineFill, { uniforms: o3, optionalAttributes: { zoomRange: true } }), complexFill: a(F.complexFill, { uniforms: o3, optionalAttributes: { zoomRange: true } }), gradientFill: a(F.gradientFill, { uniforms: o3, optionalAttributes: { zoomRange: true } }), texturedLine: a(F.texturedLine, { uniforms: o3, optionalAttributes: { zoomRange: true } }), gradientStroke: a(F.gradientStroke, { uniforms: o3, optionalAttributes: { zoomRange: true } }), animatedMarker: a(F.animatedMarker, { uniforms: o3, optionalAttributes: { zoomRange: true, value1Position2Value2: false, lineLength: false } }), animatedMarkerShift: a(F.animatedMarkerShift, { uniforms: o3, optionalAttributes: { zoomRange: true, value1Position2Value2: true, lineLength: true } }), animatedPolygon: a(F.animatedFill, { uniforms: o3, optionalAttributes: { zoomRange: true, value1Position2Value2: false, lineLength: false } }), animatedPolyline: a(F.animatedLine, { uniforms: o3, optionalAttributes: { zoomRange: true, value1Position2Value2: false, accumulatedDistance: true, segmentDirection: true, normal: true, lineLength: false } }), animatedPolylineShift: a(F.animatedLine, { uniforms: o3, optionalAttributes: { zoomRange: true, value1Position2Value2: false, accumulatedDistance: true, segmentDirection: true, normal: true, lineLength: true } }) }, this._instancesById = Object.values(this.instances).reduce((e3, i4) => (e3.set(i4.instanceId, i4), e3), /* @__PURE__ */ new Map());
  }
  getInstance(e3) {
    return this._instancesById.get(e3);
  }
};

// node_modules/@arcgis/core/views/2d/layers/graphics/GraphicBoundsRenderer.js
var v = Math.PI / 180;
var x = 4;
var b = class extends e2 {
  constructor(t) {
    super(), this._program = null, this._vao = null, this._vertexBuffer = null, this._indexBuffer = null, this._dvsMat3 = e(), this._localOrigin = { x: 0, y: 0 }, this._getBounds = t;
  }
  destroy() {
    this._vao && (this._vao.dispose(), this._vao = null, this._vertexBuffer = null, this._indexBuffer = null), this._program = r(this._program);
  }
  doRender(t) {
    const { context: e3 } = t, r5 = this._getBounds();
    if (r5.length < 1) return;
    this._createShaderProgram(e3), this._updateMatricesAndLocalOrigin(t), this._updateBufferData(e3, r5), e3.setBlendingEnabled(true), e3.setDepthTestEnabled(false), e3.setStencilWriteMask(0), e3.setStencilTestEnabled(false), e3.setBlendFunction(A.ONE, A.ONE_MINUS_SRC_ALPHA), e3.setColorMask(true, true, true, true);
    const i4 = this._program;
    e3.bindVAO(this._vao), e3.useProgram(i4), i4.setUniformMatrix3fv("u_dvsMat3", this._dvsMat3), e3.gl.lineWidth(1), e3.drawElements(R.LINES, 8 * r5.length, O.UNSIGNED_INT, 0), e3.bindVAO();
  }
  _createTransforms() {
    return { displayViewScreenMat3: e() };
  }
  _createShaderProgram(t) {
    if (this._program) return;
    const e3 = "precision highp float;\n        uniform mat3 u_dvsMat3;\n\n        attribute vec2 a_position;\n\n        void main() {\n          mediump vec3 pos = u_dvsMat3 * vec3(a_position, 1.0);\n          gl_Position = vec4(pos.xy, 0.0, 1.0);\n        }", r5 = "precision mediump float;\n      void main() {\n        gl_FragColor = vec4(0.75, 0.0, 0.0, 0.75);\n      }";
    this._program = t.programCache.acquire(e3, r5, y().attributes);
  }
  _updateMatricesAndLocalOrigin(t) {
    const { state: a2 } = t, { displayMat3: m, size: c, resolution: u2, pixelRatio: _, rotation: h2, viewpoint: p } = a2, d = v * h2, { x: g, y: x2 } = p.targetGeometry, b2 = L(g, a2.spatialReference);
    this._localOrigin.x = b2, this._localOrigin.y = x2;
    const y2 = _ * c[0], B = _ * c[1], M2 = u2 * y2, j = u2 * B, A2 = o(this._dvsMat3);
    i(A2, A2, m), M(A2, A2, r2(y2 / 2, B / 2)), f(A2, A2, r3(c[0] / M2, -B / j, 1)), h(A2, A2, -d);
  }
  _updateBufferData(t, e3) {
    const { x: r5, y: i4 } = this._localOrigin, s = 2 * x * e3.length, o4 = new Float32Array(s), a2 = new Uint32Array(8 * e3.length);
    let n3 = 0, l2 = 0;
    for (const f2 of e3) f2 && (o4[2 * n3] = f2[0] - r5, o4[2 * n3 + 1] = f2[1] - i4, o4[2 * n3 + 2] = f2[0] - r5, o4[2 * n3 + 3] = f2[3] - i4, o4[2 * n3 + 4] = f2[2] - r5, o4[2 * n3 + 5] = f2[3] - i4, o4[2 * n3 + 6] = f2[2] - r5, o4[2 * n3 + 7] = f2[1] - i4, a2[l2] = n3 + 0, a2[l2 + 1] = n3 + 3, a2[l2 + 2] = n3 + 3, a2[l2 + 3] = n3 + 2, a2[l2 + 4] = n3 + 2, a2[l2 + 5] = n3 + 1, a2[l2 + 6] = n3 + 1, a2[l2 + 7] = n3 + 0, n3 += 4, l2 += 8);
    if (this._vertexBuffer ? this._vertexBuffer.setData(o4.buffer) : this._vertexBuffer = E.createVertex(t, Y.DYNAMIC_DRAW, o4.buffer), this._indexBuffer ? this._indexBuffer.setData(a2) : this._indexBuffer = E.createIndex(t, Y.DYNAMIC_DRAW, a2), !this._vao) {
      const e4 = y();
      this._vao = new o2(t, e4.attributes, e4.bufferLayouts, /* @__PURE__ */ new Map([["geometry", this._vertexBuffer]]), this._indexBuffer);
    }
  }
};
var y = () => $("bounds", { geometry: [{ location: 0, name: "a_position", count: 2, type: O.FLOAT }] });

// node_modules/@arcgis/core/views/2d/layers/graphics/AGraphicContainer.js
var i3 = class extends n {
  constructor(e3) {
    super(e3), this._instanceStore = new l(), this.checkHighlight = () => true;
  }
  destroy() {
    super.destroy(), this._boundsRenderer = u(this._boundsRenderer);
  }
  get instanceStore() {
    return this._instanceStore;
  }
  enableRenderingBounds(e3) {
    this._boundsRenderer = new b(e3), this.requestRender();
  }
  get hasHighlight() {
    return this.checkHighlight();
  }
  onTileData(e3, t) {
    e3.onMessage(t), this.contains(e3) || this.addChild(e3), this.requestRender();
  }
  _renderChildren(e3, t) {
    e3.selection = t;
    for (const r5 of this.children) {
      if (!r5.visible) continue;
      const t2 = r5.getDisplayList(this._instanceStore, N.STRICT_ORDER);
      t2?.render(e3);
    }
  }
};

export {
  i3 as i
};
//# sourceMappingURL=chunk-KYHAK7RN.js.map
