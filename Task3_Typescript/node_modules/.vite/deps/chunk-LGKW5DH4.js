import {
  C as C4,
  a as a11,
  e as e11,
  it,
  l3 as l4,
  t as t10,
  t2 as t11,
  u as u7
} from "./chunk-4KOJY6ZH.js";
import {
  x as x2
} from "./chunk-LZTYUE2M.js";
import {
  h as h5
} from "./chunk-XFQJH5FF.js";
import {
  a as a12,
  m as m4
} from "./chunk-PBOUSKLD.js";
import {
  E as E6,
  d as d2,
  m as m5
} from "./chunk-EI2IZ446.js";
import {
  m as m6
} from "./chunk-XGNIK5GN.js";
import {
  a as a14
} from "./chunk-NGK4G3ZA.js";
import {
  g as g5,
  o as o14
} from "./chunk-YMLCITSE.js";
import {
  a as a13,
  o as o13,
  u as u6
} from "./chunk-YSZ4SRX4.js";
import {
  E as E5,
  o as o12
} from "./chunk-733XT7D4.js";
import {
  c as c6
} from "./chunk-4TMVUEZQ.js";
import {
  t as t9
} from "./chunk-5WTH3GBK.js";
import {
  t as t4
} from "./chunk-IWFEA465.js";
import {
  A,
  E as E4,
  F,
  N,
  O as O3,
  e3 as e10,
  f as f4,
  f2 as f5,
  m as m3,
  n as n10,
  o2 as o9,
  p as p2,
  p2 as p3,
  p3 as p4
} from "./chunk-CWLDBABC.js";
import {
  n as n11
} from "./chunk-SHXYOAIC.js";
import {
  O as O2,
  n as n9
} from "./chunk-B7AMZ4LC.js";
import {
  _ as _3,
  _2 as _4,
  g as g3,
  h as h4,
  i as i4,
  o as o11,
  t as t5,
  t2 as t8,
  u as u5
} from "./chunk-SMESMUA5.js";
import {
  e as e9,
  f as f2,
  o as o6
} from "./chunk-RS3I6DPK.js";
import {
  B,
  c as c5,
  f as f3,
  g as g2
} from "./chunk-56ZY2WLU.js";
import {
  E as E3,
  a as a10,
  n2 as n12,
  o2 as o8,
  t as t6,
  t2 as t7
} from "./chunk-4XEYVSQH.js";
import {
  o as o7
} from "./chunk-QY6CN52R.js";
import {
  o2 as o10
} from "./chunk-VT5VIQO4.js";
import {
  a as a9,
  i as i3
} from "./chunk-U3CE4V5Z.js";
import {
  c as c4
} from "./chunk-2ZADANKQ.js";
import {
  t as t3
} from "./chunk-ZN7Z7TAB.js";
import {
  e as e8
} from "./chunk-TTPBKTNJ.js";
import {
  S,
  d,
  e as e7,
  n as n8,
  u as u4
} from "./chunk-ZPAWXU2P.js";
import {
  C as C2,
  E as E2,
  U as U2
} from "./chunk-BGR5EVZD.js";
import {
  e as e6
} from "./chunk-UZRZVWLE.js";
import {
  a as a6,
  p
} from "./chunk-C4ANG4R2.js";
import {
  m as m2
} from "./chunk-RTDWTAVK.js";
import {
  U
} from "./chunk-LG4SF54U.js";
import {
  a as a7,
  e as e5
} from "./chunk-67CCONUO.js";
import {
  c as c3,
  f,
  s as s5,
  u as u3
} from "./chunk-YSRSL2SU.js";
import {
  e as e2,
  r as r6
} from "./chunk-NZPABYQQ.js";
import {
  e as e3
} from "./chunk-CCHJ3WNU.js";
import {
  w as w2
} from "./chunk-5Y3EUPZN.js";
import {
  C as C3,
  g as g4
} from "./chunk-BDWOUZQR.js";
import {
  S as S2,
  a as a8
} from "./chunk-H6F6O2KE.js";
import {
  G as G2,
  L,
  M,
  O,
  R,
  Y,
  _ as _2,
  g
} from "./chunk-BZYXFNL4.js";
import {
  n as n7
} from "./chunk-VNTS5E5O.js";
import {
  E,
  H,
  o as o4,
  s as s4,
  y
} from "./chunk-TMFB3DKM.js";
import {
  l as l3
} from "./chunk-H7XUEHGR.js";
import {
  G,
  _,
  b as b3,
  e as e4,
  j,
  l as l2,
  o as o5,
  r as r7,
  u as u2,
  v,
  x
} from "./chunk-TNW4TPNP.js";
import {
  a as a5,
  n as n6,
  s as s3
} from "./chunk-7FAVUXK2.js";
import {
  s as s2,
  z
} from "./chunk-IVNFIIVI.js";
import {
  h as h2,
  o as o3
} from "./chunk-UGTICYU7.js";
import {
  a as a4,
  t as t2
} from "./chunk-FKFXOPPT.js";
import {
  Q,
  X,
  c as c2,
  h as h3,
  i as i2,
  n as n5,
  q
} from "./chunk-DNZK6PPI.js";
import {
  c,
  n as n4,
  r as r5
} from "./chunk-RACDQ3AL.js";
import {
  C,
  a as a3,
  u
} from "./chunk-6GWORUT3.js";
import {
  o as o2
} from "./chunk-YIV2QKTZ.js";
import {
  a as a2,
  h,
  l,
  w
} from "./chunk-A3VAC24F.js";
import {
  b as b2,
  o,
  r as r4
} from "./chunk-FPSA4NFH.js";
import {
  s2 as s
} from "./chunk-OXSERRAR.js";
import {
  b,
  e3 as e,
  m,
  n3
} from "./chunk-N3XLUQJI.js";
import {
  a2 as a
} from "./chunk-JUAD7TJ6.js";
import {
  r
} from "./chunk-5TPMG26T.js";
import {
  r as r3
} from "./chunk-3TBMFSPB.js";
import {
  n as n2
} from "./chunk-PSZLDJJA.js";
import {
  n
} from "./chunk-S7IJH524.js";
import {
  r2,
  t2 as t
} from "./chunk-GZ2P4SCJ.js";
import {
  i2 as i
} from "./chunk-XWG6QGFK.js";
import {
  has
} from "./chunk-FXKORAMT.js";

// node_modules/@arcgis/core/views/3d/terrain/Overlay.js
var n13 = class {
  constructor() {
    this._extent = u(), this.resolution = 0, this.renderLocalOrigin = t11(0, 0, 0, "O"), this.pixelRatio = 1, this.mapUnitsPerPixel = 1, this.canvasGeometries = new r8();
  }
  get extent() {
    return this._extent;
  }
  setupGeometryViews(e14) {
    if (this._setupGeometryView(), !e14) return;
    const s14 = 1e-3 * e14.range;
    if (this._extent[0] - s14 <= e14.min) {
      const s15 = this.canvasGeometries.extents[this.canvasGeometries.numViews++];
      C(this._extent, e14.range, 0, s15);
    }
    if (this._extent[2] + s14 >= e14.max) {
      const s15 = this.canvasGeometries.extents[this.canvasGeometries.numViews++];
      C(this._extent, -e14.range, 0, s15);
    }
  }
  _setupGeometryView() {
    this.canvasGeometries.numViews = 1, a3(this.canvasGeometries.extents[0], this._extent);
  }
  hasSomeSizedView() {
    for (let e14 = 0; e14 < this.canvasGeometries.numViews; e14++) {
      const t20 = this.canvasGeometries.extents[e14];
      if (t20[0] !== t20[2] && t20[1] !== t20[3]) return true;
    }
    return false;
  }
};
var r8 = class {
  constructor() {
    this.extents = [u(), u(), u()], this.numViews = 0;
  }
};

// node_modules/@arcgis/core/views/3d/terrain/OverlayContent.js
var o15;
!function(o21) {
  o21[o21.Color = 0] = "Color", o21[o21.ColorNoRasterImage = 1] = "ColorNoRasterImage", o21[o21.Highlight = 2] = "Highlight", o21[o21.WaterNormal = 3] = "WaterNormal", o21[o21.Occluded = 4] = "Occluded", o21[o21.ObjectAndLayerIdColor = 5] = "ObjectAndLayerIdColor";
}(o15 || (o15 = {}));

// node_modules/@arcgis/core/views/3d/terrain/OverlayFramebufferObject.js
var t12 = class {
  constructor(e14, t20, h9) {
    this._fbos = e14, this._format = t20, this._name = h9;
  }
  get valid() {
    return null != this._handle?.getTexture();
  }
  dispose() {
    this._handle = t(this._handle);
  }
  get texture() {
    return this._handle?.getTexture();
  }
  bind(e14, t20, h9) {
    this._handle && this._handle.fbo?.width === t20 && this._handle.fbo?.height === h9 || (this._handle?.release(), this._handle = this._fbos.acquire(t20, h9, this._name, this._format)), e14.bindFramebuffer(this._handle?.fbo);
  }
  generateMipMap() {
    this._handle?.getTexture()?.descriptor?.hasMipmap && this._handle?.getTexture()?.generateMipmap();
  }
};

// node_modules/@arcgis/core/views/3d/terrain/OverlayRenderTargets.js
var s6 = class {
  constructor(e14, t20, l10, s14, i8 = o11.RGBA8UNORM_MIPMAP) {
    this.output = l10, this.content = s14, this.fbo = new t12(e14, i8, t20);
  }
  get valid() {
    return this.fbo.valid;
  }
};
var i5 = class {
  constructor(r13) {
    this.targets = [new s6(r13, "overlay color", n8.Color, o15.Color), new s6(r13, "overlay IM color", n8.Color, o15.ColorNoRasterImage), new s6(r13, "overlay highlight", n8.Highlight, o15.Highlight, o11.RG8UINT), new s6(r13, "overlay water", n8.Normal, o15.WaterNormal), new s6(r13, "overlay occluded", n8.Color, o15.Occluded)], e8() && this.targets.push(new s6(r13, "overlay olid", n8.ObjectAndLayerIdColor, o15.ObjectAndLayerIdColor, o11.RGBA8UNORM));
  }
  getTexture(e14) {
    return this.targets[e14]?.fbo.texture;
  }
  dispose() {
    for (const e14 of this.targets) e14.fbo.dispose();
  }
  computeValidity() {
    return this.targets.reduce((e14, r13, o21) => r13.valid ? e14 |= 1 << o21 : e14, 0);
  }
};

// node_modules/@arcgis/core/views/3d/webgl-engine/core/renderPasses/RenderPassIdentifier.js
var a15;
!function(a22) {
  a22[a22.Material = 0] = "Material", a22[a22.ShadowMap = 1] = "ShadowMap", a22[a22.Highlight = 2] = "Highlight", a22[a22.ViewshedShadowMap = 3] = "ViewshedShadowMap";
}(a15 || (a15 = {}));

// node_modules/@arcgis/core/views/3d/webgl-engine/core/shaderLibrary/terrain/Overlay.glsl.js
var h6;
!function(e14) {
  e14[e14.Disabled = 0] = "Disabled", e14[e14.Enabled = 1] = "Enabled", e14[e14.EnabledWithWater = 2] = "EnabledWithWater", e14[e14.COUNT = 3] = "COUNT";
}(h6 || (h6 = {}));
var w3 = n6();

// node_modules/@arcgis/core/views/3d/webgl-engine/effects/RenderPlugin.js
var s11 = { required: [] };
var n16 = { required: [n8.Depth] };
var u8 = class extends b {
  precompile(e14) {
    return !!this.acquireTechniques(e14);
  }
  consumes() {
    return s11;
  }
  get usedMemory() {
    return 0;
  }
  get renderOccludedFlags() {
    return o8.Occlude;
  }
  get isDecoration() {
    return false;
  }
  get running() {
    return false;
  }
  modify(e14, r13) {
  }
  get numGeometries() {
    return 0;
  }
  get hasOccludees() {
    return false;
  }
  get hasEmissions() {
    return false;
  }
  forEachGeometry(e14) {
  }
};
var o17 = class extends u8 {
};
var c7 = class extends u8 {
};

// node_modules/@arcgis/core/views/3d/webgl-engine/effects/highlight/HighlightApplyTechnique.js
var t14 = class extends g3 {
  constructor(r13, o21) {
    super(r13, o21, new t5(a14, () => import("./HighlightApply.glsl-XSMUKWGJ.js")));
  }
  initializePipeline() {
    return B({ blending: c5, colorWrite: g2 });
  }
};

// node_modules/@arcgis/core/views/3d/webgl-engine/effects/highlight/HighlightBlurTechnique.js
var l5 = class extends g3 {
  constructor(r13, o21) {
    super(r13, o21, new t5(g5, () => import("./HighlightBlur.glsl-GSXYA255.js")));
  }
  initializePipeline() {
    return B({ colorWrite: g2 });
  }
};

// node_modules/@arcgis/core/views/3d/webgl-engine/effects/highlight/HighlightDownsampleTechnique.js
var l6 = class extends g3 {
  constructor(r13, s14) {
    super(r13, s14, new t5(a13, () => import("./HighlightDownsample.glsl-PP4T6LC7.js")));
  }
  initializePipeline() {
    return B({ colorWrite: g2 });
  }
};

// node_modules/@arcgis/core/views/3d/webgl-engine/effects/highlight/HighlightPassParameters.js
var e12 = class extends c4 {
  constructor() {
    super(...arguments), this.occludedFactor = w2, this.verticalCellCount = 0, this.horizontalCellCount = 0, this.highlightLevel = 0, this.pixelRatio = 1;
  }
};

// node_modules/@arcgis/core/views/3d/webgl-engine/effects/highlight/HighlightToSingleTechnique.js
var l7 = class extends g3 {
  constructor(r13, o21) {
    super(r13, o21, new t5(h5, () => import("./HighlightToSingle.glsl-I7JOJHBI.js")));
  }
  initializePipeline() {
    return B({ colorWrite: g2 });
  }
};

// node_modules/@arcgis/core/views/3d/webgl-engine/lib/DefaultVertexBufferLayouts.js
var t15 = [];
var T = [new t9(e6.POSITION, 3, O.FLOAT, 0, 12)];
var n17 = [new t9(e6.POSITION, 2, O.FLOAT, 0, 8)];
var o18 = [new t9(e6.POSITION, 2, O.FLOAT, 0, 12), new t9(e6.UV0, 2, O.HALF_FLOAT, 8, 12)];
var m8 = [new t9(e6.POSITION, 2, O.FLOAT, 0, 16), new t9(e6.UV0, 2, O.FLOAT, 8, 16)];

// node_modules/@arcgis/core/views/3d/webgl-engine/lib/VertexArrayObject.js
var r9 = class extends o12 {
};

// node_modules/@arcgis/core/views/3d/webgl-engine/effects/highlight/Highlight.js
var y3 = class extends u5 {
  constructor() {
    super(...arguments), this.produces = t8.HIGHLIGHTS, this.consumes = { required: [t8.HIGHLIGHTS, "highlights"] }, this._downsampleDrawParameters = new o13(), this._passParameters = new e12(), this._highlightBlurDrawParameters = new o14(), this._grid = new A2();
  }
  initialize() {
    this.addHandles([l(() => this._updateOptionsTexture(), () => {
    }, h)]);
  }
  destroy() {
    this._grid.coverage = t(this._grid.coverage), this._grid.vao = r2(this._grid.vao), this._passParameters.highlightOptionsTexture = t(this._passParameters.highlightOptionsTexture);
  }
  _updateOptionsTexture() {
    if (null == this._passParameters.highlightOptionsTexture) {
      const e14 = new a8(16, 2);
      e14.internalFormat = M.RGBA, e14.samplingMode = L.NEAREST, this._passParameters.highlightOptionsTexture = new S2(this.renderingContext, e14, null);
    }
    this._passParameters.highlightOptionsTexture.setData(E7(this.view.state.highlights)), this.requestRender(a7.UPDATE);
  }
  precompile() {
    this.techniques.precompile(l6), this.techniques.precompile(l7), this.techniques.precompile(l5), this.techniques.precompile(t14);
  }
  render(e14) {
    const t20 = e14.find(({ name: e15 }) => e15 === t8.HIGHLIGHTS), { techniques: r13, bindParameters: i8, _passParameters: s14, renderingContext: o21 } = this;
    if (!i8.decorations) return t20;
    const h9 = r13.get(l6);
    if (!h9.compiled) return this.requestRender(a7.UPDATE), t20;
    const n20 = e14.find(({ name: e15 }) => "highlights" === e15).getTexture();
    s14.highlightTexture = n20;
    const a22 = () => {
      this._gridUpdateResources(n20);
      const e15 = this._gridComputeCoverage(h9, n20, i8), { horizontalCellCount: t21, verticalCellCount: r14 } = e15;
      return s14.horizontalCellCount = t21, s14.verticalCellCount = r14, s14.coverageTexture = e15.coverage?.getTexture(), e15;
    }, g8 = (e15) => {
      const t21 = e15.verticalCellCount * e15.horizontalCellCount;
      o21.bindVAO(e15.vao), o21.drawElementsInstanced(R.TRIANGLES, 6, O.UNSIGNED_BYTE, 0, t21);
    }, { camera: c11 } = i8, u9 = () => {
      o21.bindFramebuffer(t20.fbo), o21.setViewport4fv(c11.fullViewport);
    };
    return this._renderHighlightPostprocess(n20, a22, g8, u9), s14.highlightTexture = null, s14.coverageTexture = null, t20;
  }
  _renderHighlightPostprocess(e14, t20, r13, i8) {
    const { fboCache: s14, techniques: o21, bindParameters: h9, _passParameters: l10, renderingContext: a22 } = this, m9 = o21.get(l7), p6 = o21.get(l5), T3 = o21.get(t14);
    if (!T3.compiled || !p6.compiled || !m9.compiled) return void this.requestRender(a7.UPDATE);
    l10.highlightTexture = e14;
    const b5 = t20(), { width: w5, height: x4 } = e14.descriptor;
    l10.highlightTexture = e14;
    const { camera: C5 } = h9, { fullWidth: v3, fullHeight: _5, pixelRatio: j3 } = C5, O5 = Math.ceil(v3 / j3), H2 = Math.ceil(_5 / j3), { _highlightBlurDrawParameters: P3 } = this, q2 = this.view.stage.renderView.renderer, { highlights: D2 } = h9;
    for (let c11 = 0; c11 < D2.length; ++c11) {
      const { name: e15 } = D2[c11];
      if (!q2.hasHighlight(e15)) continue;
      l10.highlightLevel = c11, a22.setClearColor(0, 0, 0, 0);
      const t21 = s14.acquire(w5, x4, "single highlight", o11.RG8UNORM);
      a22.bindFramebuffer(t21.fbo), a22.setViewport(0, 0, w5, x4), a22.clear(_2.COLOR), a22.bindTechnique(m9, h9, l10), r13(b5), P3.blurInput = t21.getTexture(), o5(P3.blurSize, 1 / O5, 0);
      const o22 = s14.acquire(O5, H2, "single highlight blur h", o11.RG8UNORM);
      a22.unbindTexture(o22.fbo?.colorTexture), a22.bindFramebuffer(o22.fbo), a22.setViewport(0, 0, O5, H2), a22.clear(_2.COLOR), a22.bindTechnique(p6, h9, l10, P3), r13(b5), t21.release(), o5(P3.blurSize, 0, 1 / H2), l10.highlightBlurTexture = o22.getTexture(), i8(), a22.bindTechnique(T3, h9, l10, P3), r13(b5), o22.release();
    }
  }
  _gridUpdateResources(e14) {
    const t20 = this._grid, { width: r13, height: i8 } = e14.descriptor;
    if (t20.horizontalCellCount = Math.ceil(r13 / u6), t20.verticalCellCount = Math.ceil(i8 / u6), t20.vao) return;
    const s14 = this.renderingContext, o21 = E5.createIndex(s14, Y.STATIC_DRAW, L2);
    t20.vao = new r9(s14, E3, /* @__PURE__ */ new Map([["geometry", t15]]), /* @__PURE__ */ new Map([["geometry", E5.createVertex(s14, Y.STATIC_DRAW)]]), o21);
  }
  _gridComputeCoverage(e14, t20, r13) {
    const i8 = this.renderingContext, s14 = this._grid, o21 = t20.descriptor, h9 = Math.ceil(o21.width / u6), n20 = Math.ceil(o21.height / u6);
    this._downsampleDrawParameters.input = t20;
    const { highlights: l10 } = r13;
    s14.coverage?.release();
    const a22 = this.fboCache.acquire(h9, n20, "highlight coverage", l10.length > B2 ? o11.RG8UINT : o11.R8UINT);
    return s14.coverage = a22, i8.bindFramebuffer(a22.fbo), i8.bindTechnique(e14, r13, this._passParameters, this._downsampleDrawParameters), i8.setViewport(0, 0, h9, n20), i8.screen.draw(), s14;
  }
  get test() {
  }
};
r([m()], y3.prototype, "produces", void 0), r([m()], y3.prototype, "consumes", void 0), y3 = r([a("esri.views.3d.webgl-engine.effects.highlight.Highlight")], y3);
var A2 = class {
  constructor() {
    this.coverage = null, this.vao = null, this.verticalCellCount = 0, this.horizontalCellCount = 0, this.viewportWidth = 0, this.viewportHeight = 0;
  }
};
function E7(e14) {
  const t20 = new Uint8Array(128);
  let r13 = 0;
  for (const i8 of e14) {
    const e15 = 4 * r13, s14 = 4 * r13 + 64;
    ++r13;
    const { color: o21 } = i8, h9 = i8.haloColor ?? o21;
    t20[e15 + 0] = o21.r, t20[e15 + 1] = o21.g, t20[e15 + 2] = o21.b, t20[e15 + 3] = i8.fillOpacity * o21.a * 255, t20[s14 + 0] = h9.r, t20[s14 + 1] = h9.g, t20[s14 + 2] = h9.b, t20[s14 + 3] = i8.haloOpacity * h9.a * 255;
  }
  return t20;
}
var S3 = 0;
function G3(e14) {
  let t20 = 0;
  for (const i8 of e14) {
    const { name: e15 } = i8;
    t20 += e15.length;
    const { color: r14, fillOpacity: s14, haloColor: o21, haloOpacity: h9 } = i8;
    t20 += r14.r + r14.g + r14.b + r14.a + s14, t20 += o21 ? o21.r + o21.g + o21.b + o21.a + h9 : 0;
  }
  const r13 = e14.at(0);
  if (r13) {
    const { shadowOpacity: e15, shadowDifference: i8, shadowColor: s14 } = r13;
    t20 += e15 + i8 + s14.r + s14.g + s14.b + s14.a;
  }
  return S3++ + (t20 >= 0 ? 0 : 1);
}
var L2 = new Uint8Array([0, 1, 2, 2, 1, 3]);
function M2(e14, t20, r13, i8, s14, o21 = 0) {
  const { highlights: h9 } = i8, l10 = h9.length > 1 ? t20.acquire(r13.width, r13.height, "highlight mix", h9.length > B2 ? o11.RG8UINT : o11.R8UINT) : null, { gl: a22 } = e14;
  if (l10) {
    const t21 = e14.getBoundFramebufferObject();
    e14.bindFramebuffer(l10.fbo), a22.clearBufferuiv(a22.COLOR, 0, [0, 0, 0, 0]), e14.bindFramebuffer(t21);
  }
  const c11 = l10?.getTexture();
  i8.highlightMixTexture = c11, o5(i8.highlightMixOrigin, o21, 0), h9.forEach((t21, h10) => {
    if (h10 > 0) {
      const t22 = S2.TEXTURE_UNIT_FOR_UPDATES;
      e14.bindTexture(c11, t22), e14.setActiveTexture(t22), a22.copyTexSubImage2D(G2.TEXTURE_2D, 0, 0, 0, o21, 0, r13.width, r13.height), e14.bindTexture(null, t22);
    }
    e14.clear(_2.DEPTH), i8.highlightLevel = h10, s14();
  }), i8.highlightLevel = null, i8.highlightMixTexture = null, l10?.release();
}
var B2 = 4;

// node_modules/@arcgis/core/views/3d/webgl-engine/lib/GLMaterialParameters.js
var t16 = class {
  constructor(t20, s14, e14, i8) {
    this.material = t20, this.output = s14, this.techniques = e14, this.textures = i8;
  }
};

// node_modules/@arcgis/core/views/3d/webgl-engine/lib/GLMaterialRepository.js
var a17 = class {
  constructor(e14, t20, i8, s14) {
    this._textures = e14, this._techniques = t20, this.materialChanged = i8, this.requestRender = s14, this._id2glMaterialRef = new t4();
  }
  dispose() {
    this._textures.destroy();
  }
  acquire(e14, t20, r13) {
    this._ownMaterial(e14);
    const s14 = e14.produces.get(t20);
    if (!s14?.(r13)) return null;
    let a22 = this._id2glMaterialRef.get(r13, e14.id);
    if (null == a22) {
      const t21 = e14.createGLMaterial(new t16(e14, r13, this._techniques, this._textures));
      a22 = new o19(t21), this._id2glMaterialRef.set(r13, e14.id, a22);
    }
    return a22.ref(), a22.glMaterial;
  }
  release(e14, r13) {
    const i8 = this._id2glMaterialRef.get(r13, e14.id);
    null != i8 && (i8.unref(), i8.referenced || (r2(i8.glMaterial), this._id2glMaterialRef.delete(r13, e14.id)));
  }
  _ownMaterial(t20) {
    t20.repository && t20.repository !== this && i.getLogger("esri.views.3d.webgl-engine.lib.GLMaterialRepository").error("Material is already owned by a different material repository"), t20.repository = this;
  }
};
var o19 = class {
  constructor(e14) {
    this.glMaterial = e14, this._refCnt = 0;
  }
  ref() {
    ++this._refCnt;
  }
  unref() {
    --this._refCnt, s5(this._refCnt >= 0);
  }
  get referenced() {
    return this._refCnt > 0;
  }
};

// node_modules/@arcgis/core/views/3d/webgl-engine/lib/Update.js
var e13;
!function(e14) {
  e14[e14.Immediate = 0] = "Immediate", e14[e14.FadeWithWeather = 1] = "FadeWithWeather";
}(e13 || (e13 = {}));

// node_modules/@arcgis/core/views/3d/webgl-engine/lib/BindParameters.js
var a18 = class {
  constructor(i8) {
    this.shadowMap = i8, this.slot = A.OPAQUE_MATERIAL, this.slicePlane = null, this.hasOccludees = false, this.enableFillLights = true, this.oitPass = o7.NONE, this.alignPixelEnabled = false, this.decorations = true, this.overlayStretch = 1, this.viewshedEnabled = false, this._camera = new it(), this._inverseViewport = n7(), this._oldLighting = new _4(), this._newLighting = new _4(), this._fadedLighting = new _4(), this._lighting = this._newLighting, this.ssr = new c8(), this.terrainDepthTest = false, this.cullAboveTerrain = false, this.highlights = new Array(), this.highlightOrderMap = /* @__PURE__ */ new Map(), this.highlightMixOrigin = n7(), this.highlightMixTexture = null, this.hudRenderStyle = c6.Occluded, this.hudOccludedFragmentOpacity = 1, this.snowCover = false, this.clouds = new x2(), this.shadowHighlightsVisible = false;
  }
  get camera() {
    return this._camera;
  }
  set camera(i8) {
    this._camera = i8, this._inverseViewport[0] = 1 / i8.fullViewport[2], this._inverseViewport[1] = 1 / i8.fullViewport[3];
  }
  get inverseViewport() {
    return this._inverseViewport;
  }
  get lighting() {
    return this._lighting;
  }
  fadeLighting() {
    switch (this.clouds.fadeFactor) {
      case 0:
        this._lighting = this._oldLighting;
        break;
      default:
        this._fadedLighting.lerpLighting(this._oldLighting, this._newLighting, this.clouds.fadeFactor), this._lighting = this._fadedLighting;
        break;
      case 1:
        this._lighting = this._newLighting, this._oldLighting.copyFrom(this._newLighting);
    }
  }
  updateLighting(i8, t20, h9, e14) {
    this._oldLighting.copyFrom(this.lighting), this._newLighting.noonFactor = t20, this._newLighting.globalFactor = h9, this._newLighting.set(i8), e14 === e13.FadeWithWeather && this.clouds.requestFade(), this.fadeLighting();
  }
  get highlight() {
    return null == this.highlightLevel ? null : this.highlights[this.highlightLevel];
  }
};
var c8 = class {
  constructor() {
    this.fadeFactor = 1, this.reprojectionMatrix = e2();
  }
};

// node_modules/@arcgis/core/views/3d/webgl-engine/lib/RenderContext.js
var a19 = class {
  constructor(s14, a22, o21) {
    this.rctx = s14, this.techniques = o21, this.lastFrameCamera = new it(), this.output = n8.Color, this.renderOccludedMask = n18, this.time = n2(0), this.bind = new a18(a22), this.bind.alignPixelEnabled = true;
  }
};
var n18 = o8.Occlude | o8.OccludeAndTransparent | o8.OccludeAndTransparentStencil;

// node_modules/@arcgis/core/views/3d/webgl-engine/lib/CascadeCamera.js
var i7 = class extends it {
  constructor() {
    super(...arguments), this._projectionMatrix = e2();
  }
  get projectionMatrix() {
    return this._projectionMatrix;
  }
};
r([m()], i7.prototype, "_projectionMatrix", void 0), r([m({ readOnly: true })], i7.prototype, "projectionMatrix", null), i7 = r([a("esri.views.3d.webgl-engine.lib.CascadeCamera")], i7);

// node_modules/@arcgis/core/views/3d/webgl-engine/lib/ShadowMap.js
var E8;
!function(t20) {
  t20[t20.Highlight = 0] = "Highlight", t20[t20.ExcludeHighlight = 1] = "ExcludeHighlight";
}(E8 || (E8 = {}));
var P = class {
  constructor() {
    this.camera = new i7(), this.lightMat = e2();
  }
};
var A3 = class {
  constructor() {
    this.maxNumCascadesHighQuality = 4, this.maxNumCascadesLowQuality = 4, this.textureSizeModHighQuality = 1.3, this.textureSizeModLowQuality = 0.9, this.splitSchemeLambda = 0;
  }
};
var I = class {
  constructor(t20, s14) {
    this._fbos = t20, this._viewingMode = s14, this._snapshots = new Array(), this._textureHeight = 0, this._numCascades = 1, this.settings = new A3(), this._projectionView = e2(), this._projectionViewInverse = e2(), this._modelViewLight = e2(), this._cascadeDistances = [0, 0, 0, 0, 0], this._usedCascadeDistances = n6(), this._cascades = [new P(), new P(), new P(), new P()], this._lastOrigin = null, this._enabled = false, this._maxTextureWidth = Math.min(has("esri-mobile") ? 4096 : 16384, t20.rctx.parameters.maxTextureSize);
  }
  dispose() {
    this.enabled = false, this.disposeOffscreenBuffers();
  }
  get depthTexture() {
    return this._handle?.getTexture(g);
  }
  get _textureWidth() {
    return this._textureHeight * this._numCascades;
  }
  get numCascades() {
    return this._numCascades;
  }
  get cascadeDistances() {
    return s2(this._usedCascadeDistances, this._cascadeDistances[0], this._numCascades > 1 ? this._cascadeDistances[1] : 1 / 0, this._numCascades > 2 ? this._cascadeDistances[2] : 1 / 0, this._numCascades > 3 ? this._cascadeDistances[3] : 1 / 0);
  }
  disposeMainBuffer() {
    this._handle = t(this._handle);
  }
  disposeOffscreenBuffers() {
    this.disposeMainBuffer(), this._discardSnapshots();
  }
  set maxCascades(s14) {
    this.settings.maxNumCascadesHighQuality = r4(Math.floor(s14), 1, 4);
  }
  get maxCascades() {
    return this.settings.maxNumCascadesHighQuality;
  }
  set enabled(t20) {
    this._enabled = t20, t20 || this.disposeOffscreenBuffers();
  }
  get enabled() {
    return this._enabled;
  }
  get ready() {
    return this._enabled && null != this.depthTexture;
  }
  get cascades() {
    for (let t20 = 0; t20 < this._numCascades; ++t20) tt[t20] = this._cascades[t20];
    return tt.length = this._numCascades, tt;
  }
  start(t20, s14, e14, i8, a22) {
    s5(this.enabled);
    const { near: r13, far: h9 } = Mt(e14);
    this._computeCascadeDistances(r13, h9, i8), this._textureHeight = this._computeTextureHeight(t20, a22, i8), this._setupMatrices(t20, s14);
    const { viewMatrix: o21, projectionMatrix: n20 } = t20;
    for (let c11 = 0; c11 < this._numCascades; ++c11) this._constructCascade(c11, n20, o21, s14);
    this._lastOrigin = null, this.clear();
  }
  finish() {
    s5(this.enabled);
  }
  getShadowMapMatrices(t20) {
    if (!this._lastOrigin || !H(t20, this._lastOrigin)) {
      this._lastOrigin = this._lastOrigin || n4(), s4(this._lastOrigin, t20);
      for (let s14 = 0; s14 < this._numCascades; ++s14) {
        i2(st, this._cascades[s14].lightMat, t20);
        for (let t21 = 0; t21 < 16; ++t21) et[16 * s14 + t21] = st[t21];
      }
    }
    return et;
  }
  moveSnapshot(t20) {
    s5(this.enabled), this._snapshots[t20]?.release(), this._snapshots[t20] = this._handle, this._handle?.setName(t20 === E8.Highlight ? "shadow map highlight" : "shadow map excluding highlight"), this._handle = null;
  }
  copySnapshot(t20) {
    if (!this.enabled) return;
    const s14 = this._handle?.getTexture(g)?.descriptor;
    if (!s14) return;
    this._snapshots[t20]?.release();
    const e14 = t20 === E8.Highlight ? "shadow map highlight" : "shadow map excluding highlight", i8 = this._acquireFBO(e14);
    this._snapshots[t20] = i8;
    const a22 = this._handle?.fbo;
    if (!a22 || !i8?.fbo) return void console.error("No FBO");
    const { rctx: r13 } = this._fbos;
    r13.blitFramebuffer(a22, i8.fbo, _2.DEPTH);
  }
  getSnapshot(t20) {
    return this.enabled ? this._snapshots[t20]?.getTexture(g) : null;
  }
  clear() {
    this._ensureFbo(), this.bindFbo(), this._fbos.rctx.clear(_2.DEPTH);
  }
  _computeTextureHeight({ pixelRatio: t20, fullWidth: s14, fullHeight: e14 }, i8, a22) {
    const r13 = Math.min(window.devicePixelRatio, i8) / t20, h9 = a22 ? this.settings.textureSizeModHighQuality : this.settings.textureSizeModLowQuality;
    return n11(Math.max(s14, e14) * r13 * h9, this._maxTextureWidth / this._numCascades);
  }
  _ensureFbo() {
    this._handle?.fbo?.width === this._textureWidth && this._handle?.fbo.height === this._textureHeight || (this._handle?.release(), this._handle = this._acquireFBO("shadow map"));
  }
  _acquireFBO(t20) {
    const s14 = this._fbos.acquire(this._textureWidth, this._textureHeight, t20, _3.DEPTH16);
    return s14.getTexture(g)?.setShadowFiltering(true), s14;
  }
  _discardSnapshot(t20) {
    this._snapshots[t20] = t(this._snapshots[t20]);
  }
  _discardSnapshots() {
    for (let t20 = 0; t20 < this._snapshots.length; ++t20) this._discardSnapshot(t20);
    this._snapshots.length = 0;
  }
  bindFbo() {
    this._fbos.rctx.bindFramebuffer(this._handle?.fbo);
  }
  _constructCascade(t20, s14, e14, i8) {
    const a22 = this._cascades[t20], o21 = -this._cascadeDistances[t20], n20 = -this._cascadeDistances[t20 + 1], c11 = (s14[10] * o21 + s14[14]) / Math.abs(s14[11] * o21 + s14[15]), l10 = (s14[10] * n20 + s14[14]) / Math.abs(s14[11] * n20 + s14[15]);
    s5(c11 < l10);
    for (let r13 = 0; r13 < 8; ++r13) {
      s2(k, r13 % 4 == 0 || r13 % 4 == 3 ? -1 : 1, r13 % 4 == 0 || r13 % 4 == 1 ? -1 : 1, r13 < 4 ? c11 : l10, 1);
      const t21 = G4[r13];
      z(t21, k, this._projectionViewInverse), t21[0] /= t21[3], t21[1] /= t21[3], t21[2] /= t21[3];
    }
    y($, G4[0]), a22.camera.viewMatrix = i2(U3, this._modelViewLight, $);
    for (let r13 = 0; r13 < 8; ++r13) E(G4[r13], G4[r13], a22.camera.viewMatrix);
    let d5 = G4[0][2], u9 = G4[0][2];
    for (let r13 = 1; r13 < 8; ++r13) d5 = Math.min(d5, G4[r13][2]), u9 = Math.max(u9, G4[r13][2]);
    d5 -= 200, u9 += 200, a22.camera.near = -u9, a22.camera.far = -d5, wt(e14, i8, d5, u9, a22.camera), c2(a22.lightMat, a22.camera.projectionMatrix, a22.camera.viewMatrix);
    const m9 = this._textureHeight;
    a22.camera.viewport = [t20 * m9, 0, m9, m9];
  }
  _setupMatrices(t20, s14) {
    c2(this._projectionView, t20.projectionMatrix, t20.viewMatrix), h3(this._projectionViewInverse, this._projectionView);
    const e14 = this._viewingMode === l3.Global ? t20.eye : o4($, 0, 0, 1);
    X(this._modelViewLight, [0, 0, 0], [-s14[0], -s14[1], -s14[2]], e14);
  }
  _computeCascadeDistances(t20, e14, i8) {
    const a22 = i8 ? this.settings.maxNumCascadesHighQuality : this.settings.maxNumCascadesLowQuality;
    this._numCascades = Math.min(1 + Math.floor(u3(e14 / t20, 4)), a22);
    const r13 = (e14 - t20) / this._numCascades, h9 = (e14 / t20) ** (1 / this._numCascades);
    let o21 = t20, n20 = t20;
    for (let c11 = 0; c11 < this._numCascades + 1; ++c11) this._cascadeDistances[c11] = o(o21, n20, this.settings.splitSchemeLambda), o21 *= h9, n20 += r13;
  }
  get test() {
  }
};
var U3 = e2();
var k = n6();
var G4 = [];
for (let Ct = 0; Ct < 8; ++Ct) G4.push(n6());
var J = n7();
var K = n7();
var X2 = n7();
var Y2 = n7();
var Z = n7();
var $ = n4();
var tt = [];
var st = e2();
var et = r6.concat(r6, r6, r6, r6);
var it2 = n7();
var at = n7();
var rt = [n7(), n7(), n7(), n7()];
var ht = n7();
var ot = n7();
var nt = n7();
var ct = n7();
var lt = n7();
var dt = n7();
var ut = n7();
function mt(t20, s14, e14, i8, a22, r13, h9, o21) {
  o5(it2, 0, 0);
  for (let d5 = 0; d5 < 4; ++d5) u2(it2, it2, t20[d5]);
  l2(it2, it2, 0.25), o5(at, 0, 0);
  for (let d5 = 4; d5 < 8; ++d5) u2(at, at, t20[d5]);
  l2(at, at, 0.25), _(rt[0], t20[4], t20[5], 0.5), _(rt[1], t20[5], t20[6], 0.5), _(rt[2], t20[6], t20[7], 0.5), _(rt[3], t20[7], t20[4], 0.5);
  let n20 = 0, c11 = b3(rt[0], it2);
  for (let d5 = 1; d5 < 4; ++d5) {
    const t21 = b3(rt[d5], it2);
    t21 < c11 && (c11 = t21, n20 = d5);
  }
  e4(ht, rt[n20], t20[n20 + 4]);
  const l10 = ht[0];
  let M3, C5;
  ht[0] = -ht[1], ht[1] = l10, e4(ot, at, it2), j(ot, ht) < 0 && x(ht, ht), _(ht, ht, ot, e14), v(ht, ht), M3 = C5 = j(e4(nt, t20[0], it2), ht);
  for (let d5 = 1; d5 < 8; ++d5) {
    const s15 = j(e4(nt, t20[d5], it2), ht);
    s15 < M3 ? M3 = s15 : s15 > C5 && (C5 = s15);
  }
  r7(i8, it2), l2(nt, ht, M3 - s14), u2(i8, i8, nt);
  let j3 = -1, y5 = 1, H2 = 0, v3 = 0;
  for (let d5 = 0; d5 < 8; ++d5) {
    e4(ct, t20[d5], i8), v(ct, ct);
    const s15 = ht[0] * ct[1] - ht[1] * ct[0];
    s15 > 0 ? s15 > j3 && (j3 = s15, H2 = d5) : s15 < y5 && (y5 = s15, v3 = d5);
  }
  c3(j3 > 0, "leftArea"), c3(y5 < 0, "rightArea"), l2(lt, ht, M3), u2(lt, lt, it2), l2(dt, ht, C5), u2(dt, dt, it2), ut[0] = -ht[1], ut[1] = ht[0];
  const D2 = f(i8, t20[v3], dt, u2(nt, dt, ut), 1, a22), S5 = f(i8, t20[H2], dt, nt, 1, r13), O5 = f(i8, t20[H2], lt, u2(nt, lt, ut), 1, h9), T3 = f(i8, t20[v3], lt, nt, 1, o21);
  c3(D2, "rayRay"), c3(S5, "rayRay"), c3(O5, "rayRay"), c3(T3, "rayRay");
}
function _t(t20, s14) {
  return 3 * s14 + t20;
}
var ft = n7();
function gt(t20, s14) {
  return o5(ft, t20[s14], t20[s14 + 3]), ft;
}
var pt = n7();
var xt = e3();
function bt(t20, s14, e14, i8, a22) {
  e4(pt, e14, i8), l2(pt, pt, 0.5), xt[0] = pt[0], xt[1] = pt[1], xt[2] = 0, xt[3] = pt[1], xt[4] = -pt[0], xt[5] = 0, xt[6] = pt[0] * pt[0] + pt[1] * pt[1], xt[7] = pt[0] * pt[1] - pt[1] * pt[0], xt[8] = 1, xt[_t(0, 2)] = -j(gt(xt, 0), t20), xt[_t(1, 2)] = -j(gt(xt, 1), t20);
  let r13 = j(gt(xt, 0), e14) + xt[_t(0, 2)], h9 = j(gt(xt, 1), e14) + xt[_t(1, 2)], o21 = j(gt(xt, 0), i8) + xt[_t(0, 2)], n20 = j(gt(xt, 1), i8) + xt[_t(1, 2)];
  r13 = -(r13 + o21) / (h9 + n20), xt[_t(0, 0)] += xt[_t(1, 0)] * r13, xt[_t(0, 1)] += xt[_t(1, 1)] * r13, xt[_t(0, 2)] += xt[_t(1, 2)] * r13, r13 = 1 / (j(gt(xt, 0), e14) + xt[_t(0, 2)]), h9 = 1 / (j(gt(xt, 1), e14) + xt[_t(1, 2)]), xt[_t(0, 0)] *= r13, xt[_t(0, 1)] *= r13, xt[_t(0, 2)] *= r13, xt[_t(1, 0)] *= h9, xt[_t(1, 1)] *= h9, xt[_t(1, 2)] *= h9, xt[_t(2, 0)] = xt[_t(1, 0)], xt[_t(2, 1)] = xt[_t(1, 1)], xt[_t(2, 2)] = xt[_t(1, 2)], xt[_t(1, 2)] += 1, r13 = j(gt(xt, 1), s14) + xt[_t(1, 2)], h9 = j(gt(xt, 2), s14) + xt[_t(2, 2)], o21 = j(gt(xt, 1), e14) + xt[_t(1, 2)], n20 = j(gt(xt, 2), e14) + xt[_t(2, 2)], r13 = -0.5 * (r13 / h9 + o21 / n20), xt[_t(1, 0)] += xt[_t(2, 0)] * r13, xt[_t(1, 1)] += xt[_t(2, 1)] * r13, xt[_t(1, 2)] += xt[_t(2, 2)] * r13, r13 = j(gt(xt, 1), s14) + xt[_t(1, 2)], h9 = j(gt(xt, 2), s14) + xt[_t(2, 2)], o21 = -h9 / r13, xt[_t(1, 0)] *= o21, xt[_t(1, 1)] *= o21, xt[_t(1, 2)] *= o21, a22[0] = xt[0], a22[1] = xt[1], a22[2] = 0, a22[3] = xt[2], a22[4] = xt[3], a22[5] = xt[4], a22[6] = 0, a22[7] = xt[5], a22[8] = 0, a22[9] = 0, a22[10] = 1, a22[11] = 0, a22[12] = xt[6], a22[13] = xt[7], a22[14] = 0, a22[15] = xt[8];
}
function wt(t20, s14, i8, a22, r13) {
  const h9 = 1 / G4[0][3], o21 = 1 / G4[4][3];
  s5(h9 < o21);
  let n20 = h9 + Math.sqrt(h9 * o21);
  const c11 = Math.sin(b2(t20[2] * s14[0] + t20[6] * s14[1] + t20[10] * s14[2]));
  n20 /= c11, mt(G4, n20, c11, J, K, X2, Y2, Z), bt(J, K, Y2, Z, r13.projectionMatrix), r13.projectionMatrix[10] = 2 / (i8 - a22), r13.projectionMatrix[14] = -(i8 + a22) / (i8 - a22);
}
function Mt(t20) {
  let { near: s14, far: e14 } = t20;
  return s14 < 2 && (s14 = 2), e14 < 2 && (e14 = 2), s14 >= e14 && (s14 = 2, e14 = 4), { near: s14, far: e14 };
}

// node_modules/@arcgis/core/views/3d/webgl-engine/lib/TextureTechnique.js
var t17 = class extends g3 {
  constructor(o21, i8) {
    super(o21, i8, new t5(m4, () => import("./TextureOnly.glsl-JQ3J37TQ.js")));
  }
  initializePipeline(e14) {
    return e14.hasAlpha ? B({ blending: c5, colorWrite: g2 }) : B({ colorWrite: g2 });
  }
};

// node_modules/@arcgis/core/views/3d/webgl-engine/lib/TextureTechniqueConfiguration.js
var r10 = class extends a9 {
  constructor() {
    super(...arguments), this.hasAlpha = false;
  }
};
r([i3()], r10.prototype, "hasAlpha", void 0);

// node_modules/@arcgis/core/views/3d/webgl-engine/shaders/OverlayCompositingTechnique.js
var s12 = class extends g3 {
  constructor(r13, s14) {
    super(r13, s14, new t5(m5, () => import("./OverlayCompositing.glsl-RL6FT3EM.js")));
  }
};

// node_modules/@arcgis/core/views/3d/terrain/OverlayRenderer.js
var $2 = class extends o17 {
  constructor(e14) {
    super(e14), this._overlays = null, this._renderTargets = null, this._overlayParameters = new d2(), this.hasHighlights = false, this._hasWater = false, this._renderers = /* @__PURE__ */ new Map(), this._sortedDrapeSourceRenderersDirty = false, this._sortedRenderers = new r3(), this._passParameters = new a12(), this._screenToWorldRatio = 1, this._localOriginFactory = null, this.unloadedMemory = 0, this.ignoresMemoryFactor = false, this._camera = new it(), this.events = new o2(), this.longitudeCyclical = null, this.produces = /* @__PURE__ */ new Map([[A.DRAPED_MATERIAL, (e15) => e15 !== n8.Highlight || this.hasHighlights], [A.DRAPED_WATER, () => this._hasWater]]), this._hasTargetWithoutRasterImage = false, this._hasDrapedFeatureSource = false, this._hasDrapedRasterSource = false;
  }
  initialize() {
    const e14 = this._view, r13 = e14.stage, t20 = r13.renderer.fboCache, { waterTextures: s14, techniques: i8 } = r13.renderView;
    this._renderContext = new a19(this._rctx, new I(t20, e14.state.viewingMode), i8), this.addHandles([l(() => s14.updating, () => this.events.emit("content-changed"), w), l(() => this.spatialReference, (e15) => this._localOriginFactory = new l4(e15), w), a2(() => e14.allLayerViews, "after-changes", () => this._sortedDrapeSourceRenderersDirty = true), l(() => G3(e14.state.highlights), () => this._sortedDrapeSourceRenderersDirty = true, h), l(() => e14.state.highlights, (r14) => {
      this._bindParameters.highlights = r14, this._bindParameters.highlightOrderMap = e14.state.highlightOrderMap;
    }, h), e14.resourceController.scheduler.registerTask(g4.OVERLAY_RENDERER, this)]);
    const { _bindParameters: l10, _camera: d5 } = this;
    d5.near = 1, d5.far = 1e4, d5.relativeElevation = null, l10.slot = A.DRAPED_MATERIAL, l10.mainDepth = null, l10.camera = d5, l10.oitPass = o7.NONE, l10.updateLighting([new i4(c())], 0, 0, e13.Immediate);
  }
  destroy() {
    this._renderers.forEach((e14) => e14.destroy()), this._renderers.clear(), this._passParameters.texture = r2(this._passParameters.texture), this.disposeOverlays();
  }
  get _bindParameters() {
    return this._renderContext.bind;
  }
  get _rctx() {
    return this._stage.renderView.renderingContext;
  }
  get _view() {
    return this.parent.view;
  }
  get _stage() {
    return this.parent.view.stage;
  }
  get spatialReference() {
    return this.parent.spatialReference;
  }
  get _techniques() {
    return this._stage.renderView.techniques;
  }
  get rctx() {
    return this._rctx;
  }
  get materials() {
    return this._pluginContext.materials;
  }
  get screenToWorldRatio() {
    return this._screenToWorldRatio;
  }
  get localOriginFactory() {
    return this._localOriginFactory;
  }
  get pluginContext() {
    return this._pluginContext;
  }
  initializeRenderContext(e14) {
    const r13 = new a17(this._view.stage.renderView.textures, this._techniques, () => {
      this.notifyChange("rendersOccludedDraped"), this.events.emit("content-changed"), this.notifyChange("updating"), this.notifyChange("isEmpty");
    }, () => this.events.emit("content-changed"));
    this._pluginContext = { ...e14, materials: r13 }, this._techniques.precompile(s12);
  }
  uninitializeRenderContext() {
  }
  acquireTechniques() {
    return [];
  }
  render() {
  }
  get updating() {
    return this._sortedDrapeSourceRenderersDirty || n(this._renderers, (e14) => e14.updating || e14.canCompact);
  }
  get hasOverlays() {
    return null != this._overlays && null != this._renderTargets;
  }
  getMaterialRenderer(e14) {
    for (const r13 of this._renderers.values()) {
      const t20 = r13.getMaterialRenderer(e14);
      if (t20) return t20;
    }
    return null;
  }
  get layers() {
    return this._sortedDrapeSourceRenderersDirty && this._updateSortedDrapeSourceRenderers(), this._sortedRenderers.map((e14) => e14.drapeSource.layer).filter((e14) => !!e14);
  }
  registerDrapeSource(e14, r13) {
    const t20 = this._renderers.get(e14);
    null != t20 && t20.destroy(), this._renderers.set(e14, r13), this._sortedDrapeSourceRenderersDirty = true, "fullOpacity" in e14 && this.addHandles(l(() => e14.fullOpacity, () => this.events.emit("content-changed")), e14);
  }
  removeDrapeSourceRenderer(e14) {
    if (null == e14) return;
    const r13 = this._renderers.get(e14);
    null != r13 && (this._sortedDrapeSourceRenderersDirty = true, this._renderers.delete(e14), this.removeHandles(e14), r13.destroy());
  }
  computeValidity() {
    return this._renderTargets?.computeValidity() ?? 0;
  }
  releaseRenderTargets() {
    this._renderTargets?.dispose();
  }
  get overlays() {
    return this._overlays ?? [];
  }
  ensureDrapeTargets(e14) {
    this._hasTargetWithoutRasterImage = !!this._overlays && n3(e14, (e15) => e15.drapeTargetType === t10.WithoutRasterImage);
  }
  ensureDrapeSources(e14) {
    this._overlays ? (this._hasDrapedFeatureSource = n3(e14, (e15) => e15.drapeSourceType === e11.Features), this._hasDrapedRasterSource = n3(e14, (e15) => e15.drapeSourceType === e11.RasterImage)) : this._hasDrapedFeatureSource = this._hasDrapedRasterSource = false;
  }
  get _needsColorWithoutRasterImage() {
    return this._hasDrapedRasterSource && this._hasDrapedFeatureSource && this._hasTargetWithoutRasterImage;
  }
  ensureOverlays(e14, r13, t20 = this._bindParameters.overlayStretch) {
    null == this._overlays && (this._renderTargets = new i5(this._stage.renderer.fboCache), this._overlays = [new n13(), new n13()]), this.ensureDrapeTargets(e14), this.ensureDrapeSources(r13), this._bindParameters.overlayStretch = t20;
  }
  disposeOverlays() {
    this._overlays = null, this._renderTargets = r2(this._renderTargets), this.events.emit("textures-disposed");
  }
  getTexture(e14) {
    return e14 === o15.ColorNoRasterImage && !this._needsColorWithoutRasterImage && this._hasDrapedFeatureSource ? this._renderTargets?.getTexture(o15.Color) : this._renderTargets?.getTexture(e14);
  }
  get running() {
    return this.updating;
  }
  runTask(e14) {
    this._processDrapeSources(e14, () => true);
  }
  _processDrapeSources(e14, r13) {
    let s14 = false;
    for (const [t20, i8] of this._renderers) {
      if (e14.done) break;
      (t20.destroyed || r13(t20)) && (i8.commitChanges() && (s14 = true, e14.madeProgress()));
    }
    this._sortedDrapeSourceRenderersDirty && (this._sortedDrapeSourceRenderersDirty = false, s14 = true, this._updateSortedDrapeSourceRenderers(), e14.madeProgress()), this.compact(e14), s14 && (null != this._overlays && 0 === this._renderers.size && this.disposeOverlays(), this.notifyChange("updating"), this.notifyChange("isEmpty"), this.events.emit("content-changed"), this.hasHighlights = n(this._renderers, (e15) => e15.hasHighlights), this.notifyChange("rendersOccludedDraped"));
  }
  compact(e14) {
    let r13 = false;
    for (const t20 of this._renderers.values()) {
      if (e14.done) break;
      r13 = t20.compact(e14) || r13;
    }
    return r13 && this.notifyChange("updating"), r13;
  }
  hasHighlight(e14) {
    return n(this._renderers, (r13) => r13.hasHighlight(e14));
  }
  processSyncDrapeSources() {
    this._processDrapeSources(C3, (e14) => e14.updatePolicy === C4.SYNC);
  }
  get isEmpty() {
    return !t6.OVERLAY_DRAW_DEBUG_TEXTURE && !n(this._renderers, (e14) => !e14.isEmpty);
  }
  get hasWater() {
    const e14 = n(this._renderers, ({ hasWater: e15 }) => e15);
    return e14 !== this._hasWater && (this._hasWater = e14, this.events.emit("has-water")), this._hasWater;
  }
  get rendersOccludedDraped() {
    const e14 = this._renderContext.renderOccludedMask;
    this._renderContext.renderOccludedMask = se, ++this._techniques.precompiling;
    const r13 = this._sortedRenderers.some(({ renderer: e15 }) => e15.precompile(this._renderContext));
    return --this._techniques.precompiling, this._renderContext.renderOccludedMask = e14, r13;
  }
  renders(e14) {
    if (t6.OVERLAY_DRAW_DEBUG_TEXTURE && e14 !== o15.Occluded && e14 !== o15.Highlight) return true;
    if (!this._overlays) return false;
    const r13 = this._overlays[E6.INNER];
    for (const i8 of this._overlays) i8.setupGeometryViews(this.longitudeCyclical);
    if (!r13.hasSomeSizedView()) return false;
    const t20 = this._renderContext.output;
    this._renderContext.output = this._renderTargets?.targets.find((r14) => r14.content === e14)?.output ?? n8.Color, ++this._techniques.precompiling;
    const s14 = this._sortedRenderers.some(({ renderer: e15 }) => e15.precompile(this._renderContext));
    return --this._techniques.precompiling, this._renderContext.output = t20, s14;
  }
  get mode() {
    return this.isEmpty ? h6.Disabled : this.hasWater && this.renders(o15.WaterNormal) ? h6.EnabledWithWater : this._renderTargets?.getTexture(o15.Color) ? h6.Enabled : h6.Disabled;
  }
  updateAnimation(e14) {
    let r13 = false;
    return this._renderers.forEach((t20) => r13 = t20.updateAnimation(e14) || r13), r13 && this.parent.requestRender(a7.BACKGROUND), r13;
  }
  updateDrapeSourceOrder() {
    this._sortedDrapeSourceRenderersDirty = true;
  }
  precompileShaders(e14) {
    if (!this._overlays || !this._renderTargets) return;
    const r13 = this._bindParameters;
    r13.alignPixelEnabled = e14.alignPixelEnabled, ++this._techniques.precompiling;
    for (const t20 of this._renderTargets.targets) {
      if (t20.content === o15.ColorNoRasterImage && !this._needsColorWithoutRasterImage) continue;
      const e15 = t20.output;
      this._renderContext.output = e15, r13.slot = e15 === n8.Normal ? A.DRAPED_WATER : A.DRAPED_MATERIAL, e15 === n8.Highlight && (r13.highlightMixTexture = r13.highlights.length > 1 ? this._rctx.emptyTexture : null), t20.content === o15.Occluded && (this._renderContext.renderOccludedMask = se), this._sortedRenderers.forAll(({ drapeSource: e16, renderer: r14 }) => {
        t20.content === o15.ColorNoRasterImage && e16.drapeSourceType === e11.RasterImage || r14.precompile(this._renderContext);
      }), this._renderContext.renderOccludedMask = n18, r13.highlightMixTexture = null;
    }
    --this._techniques.precompiling;
  }
  drawOverlays(e14) {
    if (this._overlays && this._renderTargets) {
      for (const e15 of this._overlays) e15.setupGeometryViews(this.longitudeCyclical);
      this._bindParameters.alignPixelEnabled = e14.alignPixelEnabled;
      for (const e15 of this._renderTargets.targets) {
        if (e15.content === o15.ColorNoRasterImage && !this._needsColorWithoutRasterImage) continue;
        const r13 = this._drawTarget(E6.INNER, e15), t20 = this._drawTarget(E6.OUTER, e15);
        (r13 || t20) && e15.fbo.generateMipMap();
      }
    }
  }
  _drawTarget(e14, r13) {
    const t20 = this._overlays[e14], s14 = t20.canvasGeometries;
    if (0 === s14.numViews) return false;
    const i8 = this._view.state.contentPixelRatio;
    this._screenToWorldRatio = i8 * t20.mapUnitsPerPixel / this._bindParameters.overlayStretch;
    const { output: n20 } = r13;
    if (this.isEmpty || n20 === n8.Normal && !this.hasWater || !t20.hasSomeSizedView()) return false;
    const { _rctx: o21, _camera: a22, _renderContext: h9, _bindParameters: l10 } = this;
    if (a22.pixelRatio = t20.pixelRatio * i8, h9.output = n20, l10.screenToWorldRatio = this._screenToWorldRatio, l10.screenToPCSRatio = this._screenToWorldRatio * this.parent.worldToPCSRatio, l10.slot = n20 === n8.Normal ? A.DRAPED_WATER : A.DRAPED_MATERIAL, r13.content === o15.Occluded && (h9.renderOccludedMask = se), !this.renders(r13.content)) return h9.renderOccludedMask = n18, false;
    const { resolution: d5 } = t20, c11 = e14 === E6.INNER, u9 = c11 ? 0 : d5;
    if (o21.setViewport(u9, 0, d5, d5), this._bindTargetFBO(r13), c11) if (r13.output !== n8.Highlight) o21.setClearColor(0, 0, 0, 0), o21.clear(_2.COLOR);
    else {
      const { gl: e15 } = o21;
      e15.clearBufferuiv(e15.COLOR, 0, [0, 0, 0, 0]);
    }
    if (t6.OVERLAY_DRAW_DEBUG_TEXTURE && r13.content !== o15.Occluded && r13.content !== o15.Highlight) {
      this._techniques.precompile(t17, ie);
      const r14 = this._techniques.get(t17, ie);
      for (let i9 = 0; i9 < s14.numViews; i9++) this._setViewParameters(s14.extents[i9], t20), this._ensureDebugPatternResources(t20.resolution, re[e14]), o21.bindTechnique(r14, l10, this._passParameters), o21.screen.draw();
    }
    if (r13.output === n8.Highlight) {
      const { fboCache: t21 } = this._stage.renderer, s15 = this._resolution;
      this._bindTargetFBO(r13), M2(o21, t21, { width: s15, height: s15 }, l10, () => this._renderAllGeometry(e14, r13), u9);
    } else this._renderAllGeometry(e14, r13);
    return o21.bindFramebuffer(null), h9.renderOccludedMask = n18, true;
  }
  _renderAllGeometry(e14, r13) {
    const t20 = this._overlays[e14], s14 = t20.canvasGeometries;
    this._sortedRenderers.forAll(({ drapeSource: i8, renderer: n20 }) => {
      if (r13.content === o15.ColorNoRasterImage && i8.drapeSourceType === e11.RasterImage) return;
      const { fullOpacity: o21 } = i8, a22 = null != o21 && o21 < 1 && r13.output === n8.Color && this._bindTemporaryFBO();
      for (let e15 = 0; e15 < s14.numViews; e15++) this._setViewParameters(s14.extents[e15], t20), n20.render(this._renderContext);
      if (a22) {
        this._bindTargetFBO(r13), this._overlayParameters.texture = a22.getTexture(), this._overlayParameters.opacity = o21, this._overlayParameters.overlayIndex = e14;
        const t21 = this._techniques.get(s12);
        this._rctx.bindTechnique(t21, this._bindParameters, this._overlayParameters), this._rctx.screen.draw(), a22.release();
      }
    });
  }
  _bindTargetFBO(e14) {
    const r13 = this._resolution, t20 = 2 * r13;
    e14.fbo.bind(this._rctx, t20, r13);
  }
  _bindTemporaryFBO() {
    const e14 = this._resolution, r13 = 2 * e14, t20 = this._stage.renderer.fboCache, s14 = t20.acquire(r13, e14, "overlay tmp");
    return t20.rctx.bindFramebuffer(s14.fbo), t20.rctx.clear(_2.COLOR), s14;
  }
  get _resolution() {
    return this._overlays?.[E6.INNER].resolution ?? 0;
  }
  notifyContentChanged() {
    this.events.emit("content-changed");
  }
  intersect(e14, r13, t20, s14) {
    this._sortedDrapeSourceRenderersDirty && this._updateSortedDrapeSourceRenderers();
    let i8 = 0;
    for (const { renderer: n20 } of this._sortedRenderers) i8 = n20.intersect?.(e14, r13, t20, s14, i8) ?? i8;
  }
  _updateSortedDrapeSourceRenderers() {
    if (this._sortedRenderers.clear(), 0 === this._renderers.size) return;
    const e14 = this._view.map.allLayers, r13 = e14.length;
    this._renderers.forEach((t20, s14) => {
      const i8 = e14.indexOf(s14.layer), n20 = i8 >= 0, o21 = s14.renderGroup ?? (n20 ? a11.MapLayer : a11.ViewLayer), a22 = s14.drapeSourcePriorityOffset ?? 0, h9 = r13 * o21 + (n20 ? i8 : 0) + a22;
      this._sortedRenderers.push(new ee(s14, t20, h9));
    }), this._sortedRenderers.sort((e15, r14) => e15.index - r14.index);
  }
  _setViewParameters(e14, r13) {
    const t20 = this._camera;
    t20.viewport = [0, 0, r13.resolution, r13.resolution], Q(t20.projectionMatrix, 0, e14[2] - e14[0], 0, e14[3] - e14[1], t20.near, t20.far), q(t20.viewMatrix, [-e14[0], -e14[1], 0]);
  }
  _ensureDebugPatternResources(e14, r13) {
    if (o4(this._passParameters.color, r13[0], r13[1], r13[2]), this._passParameters.texture) return;
    const t20 = new Uint8Array(e14 * e14 * 4);
    let s14 = 0;
    for (let n20 = 0; n20 < e14; n20++) for (let r14 = 0; r14 < e14; r14++) {
      const i9 = Math.floor(r14 / 10), o21 = Math.floor(n20 / 10);
      i9 < 2 || o21 < 2 || 10 * i9 > e14 - 20 || 10 * o21 > e14 - 20 ? (t20[s14++] = 255, t20[s14++] = 255, t20[s14++] = 255, t20[s14++] = 255) : (t20[s14++] = 255, t20[s14++] = 255, t20[s14++] = 255, t20[s14++] = 1 & i9 && 1 & o21 ? 1 & r14 ^ 1 & n20 ? 0 : 255 : 1 & i9 ^ 1 & o21 ? 0 : 128);
    }
    const i8 = new a8(e14);
    i8.samplingMode = L.NEAREST, this._passParameters.texture = new S2(this._rctx, i8, t20);
  }
  get test() {
  }
};
r([m()], $2.prototype, "hasHighlights", void 0), r([m()], $2.prototype, "_sortedDrapeSourceRenderersDirty", void 0), r([m({ constructOnly: true })], $2.prototype, "parent", void 0), r([m({ readOnly: true })], $2.prototype, "_techniques", null), r([m({ type: Boolean, readOnly: true })], $2.prototype, "updating", null), r([m()], $2.prototype, "isEmpty", null), r([m({ readOnly: true })], $2.prototype, "rendersOccludedDraped", null), $2 = r([a("esri.views.3d.terrain.OverlayRenderer")], $2);
var ee = class {
  constructor(e14, r13, t20) {
    this.drapeSource = e14, this.renderer = r13, this.index = t20;
  }
};
var re = [[1, 0.5, 0.5], [0.5, 0.5, 1]];
var te = -2;
var se = o8.OccludeAndTransparent;
var ie = new r10();
ie.hasAlpha = true;

// node_modules/@arcgis/core/views/3d/webgl-engine/lib/RenderGeometry.js
var g6 = class {
  constructor(r13, i8 = {}) {
    this.geometry = r13, this.screenToWorldRatio = 1, this._transformation = e2(), this._shaderTransformation = null, this._boundingSphere = null, this.id = e(), this.layerViewUid = i8.layerViewUid, this.graphicUid = i8.graphicUid, this.castShadow = i8.castShadow ?? false, i8.objectShaderTransformation && this.objectShaderTransformationChanged(i8.objectShaderTransformation);
  }
  get transformation() {
    return this._transformation;
  }
  set transformation(t20) {
    n5(this._transformation, t20), this._boundingSphere = null;
  }
  get boundingInfo() {
    return this.geometry.boundingInfo;
  }
  objectShaderTransformationChanged(t20) {
    null == t20 ? this._shaderTransformation = null : (this._shaderTransformation ??= e2(), c2(this._shaderTransformation, t20, this.geometry.transformation)), this._boundingSphere = null;
  }
  get boundingSphere() {
    return this.boundingInfo ? (null == this._boundingSphere && (this._boundingSphere ??= E2(), E(U2(this._boundingSphere), this.boundingInfo.center, this.shaderTransformation), this._boundingSphere[3] = this.boundingInfo.radius * m2(this.shaderTransformation)), this._boundingSphere) : C2;
  }
  get material() {
    return this.geometry.material;
  }
  get type() {
    return this.geometry.type;
  }
  get shaderTransformation() {
    return this._shaderTransformation ?? this.transformation;
  }
  get attributes() {
    return this.geometry.attributes;
  }
  get highlight() {
    return this.geometry.highlights;
  }
  foreachHighlightOptions(t20) {
    this.geometry.foreachHighlightOptions(t20);
  }
  get hasHighlights() {
    return this.geometry.hasHighlights;
  }
  get occludees() {
    return this.geometry.occludees;
  }
  get visible() {
    return this.geometry.visible;
  }
  set visible(t20) {
    this.geometry.visible = t20;
  }
};

// node_modules/@arcgis/core/layers/graphics/sources/interfaces.js
var a20;
!function(a22) {
  a22[a22.EnableFastUpdates = 0] = "EnableFastUpdates", a22[a22.DisableFastUpdates = 1] = "DisableFastUpdates", a22[a22.UpdateFastLocalOrigin = 2] = "UpdateFastLocalOrigin";
}(a20 || (a20 = {}));

// node_modules/@arcgis/core/views/3d/webgl-engine/materials/lineStippleUtils.js
var t18 = { dash: [4, 3], dot: [1, 3], "long-dash": [8, 3], "short-dash": [4, 1], "short-dot": [1, 1] };
var o20 = { dash: t18.dash, "dash-dot": [...t18.dash, ...t18.dot], dot: t18.dot, "long-dash": t18["long-dash"], "long-dash-dot": [...t18["long-dash"], ...t18.dot], "long-dash-dot-dot": [...t18["long-dash"], ...t18.dot, ...t18.dot], none: null, "short-dash": t18["short-dash"], "short-dash-dot": [...t18["short-dash"], ...t18["short-dot"]], "short-dash-dot-dot": [...t18["short-dash"], ...t18["short-dot"], ...t18["short-dot"]], "short-dot": t18["short-dot"], solid: null };
var d3 = 8;
function s13(t20, o21) {
  return null == t20 ? t20 : { pattern: t20.slice(), pixelRatio: o21 };
}
function h7(t20) {
  return { pattern: [t20, t20], pixelRatio: 2 };
}
function n19(t20) {
  return "style" === t20?.type ? l8(t20.style) : null;
}
function l8(t20) {
  return null != t20 ? s13(o20[t20], d3) : null;
}

// node_modules/@arcgis/core/views/3d/support/engineContent/line.js
function b4(t20, e14, r13 = null) {
  const o21 = [], n20 = e14.mapPositions;
  g7(e14, o21);
  const i8 = o21[0][1].data, a22 = o21[0][1].indices.length, l10 = U(a22);
  return h8(e14, o21, l10), w4(e14, o21, l10), D(e14, o21, l10), T2(e14, o21, l10), y4(e14, o21, l10), E9(e14, o21, l10), j2(e14, o21, i8), new p2(t20, o21, n20, n10.Line, r13);
}
function g7(t20, e14) {
  const { attributeData: { position: r13 }, removeDuplicateStartEnd: o21 } = t20, n20 = A4(r13) && o21, i8 = r13.length / 3 - (n20 ? 1 : 0), a22 = new Array(2 * (i8 - 1)), l10 = n20 ? r13.slice(0, -3) : r13;
  let u9 = 0;
  for (let s14 = 0; s14 < i8 - 1; s14++) a22[u9++] = s14, a22[u9++] = s14 + 1;
  e14.push([e6.POSITION, new t3(l10, a22, 3, n20)]);
}
function h8(t20, e14, r13) {
  if (null != t20.attributeData.colorFeature) return;
  const n20 = t20.attributeData.color;
  e14.push([e6.COLOR, new t3(n20 ?? s3, r13, 4)]);
}
function D(t20, e14, r13) {
  t20.attributeData.normal && e14.push([e6.NORMAL, new t3(t20.attributeData.normal, r13, 3)]);
}
function T2(t20, e14, r13) {
  null != t20.attributeData.colorFeature && e14.push([e6.COLORFEATUREATTRIBUTE, new t3([t20.attributeData.colorFeature], r13, 1, true)]);
}
function w4(t20, e14, r13) {
  null == t20.attributeData.sizeFeature && e14.push([e6.SIZE, new t3([t20.attributeData.size ?? 1], r13, 1, true)]);
}
function y4(t20, e14, r13) {
  null != t20.attributeData.sizeFeature && e14.push([e6.SIZEFEATUREATTRIBUTE, new t3([t20.attributeData.sizeFeature], r13, 1, true)]);
}
function E9(t20, e14, r13) {
  null != t20.attributeData.opacityFeature && e14.push([e6.OPACITYFEATUREATTRIBUTE, new t3([t20.attributeData.opacityFeature], r13, 1, true)]);
}
function j2(r13, o21, u9) {
  if (null == r13.overlayInfo || r13.overlayInfo.renderCoordsHelper.viewingMode !== l3.Global || !r13.overlayInfo.spatialReference.isGeographic) return;
  const m9 = t2(u9.length), f7 = s(r13.overlayInfo.spatialReference);
  for (let t20 = 0; t20 < m9.length; t20 += 3) h2(u9, t20, m9, t20, f7);
  const b5 = u9.length / 3, g8 = n9(b5 + 1);
  let h9 = I2, D2 = F2, T3 = 0, w5 = 0;
  o5(h9, m9[w5++], m9[w5++]), w5++, g8[0] = 0;
  for (let n20 = 1; n20 < b5 + 1; ++n20) n20 === b5 && (w5 = 0), o5(D2, m9[w5++], m9[w5++]), w5++, T3 += G(h9, D2), g8[n20] = T3, [h9, D2] = [D2, h9];
  o21.push([e6.DISTANCETOSTART, new t3(g8, o21[0][1].indices, 1, true)]);
}
function A4(t20) {
  const e14 = t20.length;
  return t20[0] === t20[e14 - 3] && t20[1] === t20[e14 - 2] && t20[2] === t20[e14 - 1];
}
var I2 = n7();
var F2 = n7();

// node_modules/@arcgis/core/views/3d/support/renderInfoUtils/line.js
function p5(o21, t20, s14, p6) {
  const l10 = "polygon" === o21.type ? p.CCW_IS_HOLE : p.NONE, a22 = "polygon" === o21.type ? o21.rings : o21.paths, { position: u9, outlines: f7 } = a6(a22, !!o21.hasZ, l10, o21.spatialReference), m9 = t2(u9.length), g8 = u7(u9, o21.spatialReference, 0, m9, 0, u9, 0, u9.length / 3, t20, s14, p6), y5 = null != g8;
  return { lines: y5 ? c9(f7, u9, m9) : [], projectionSuccess: y5, sampledElevation: g8 };
}
function l9(e14, t20) {
  const i8 = "polygon" === e14.type ? p.CCW_IS_HOLE : p.NONE, p6 = "polygon" === e14.type ? e14.rings : e14.paths, { position: l10, outlines: a22 } = a6(p6, false, i8), u9 = o3(l10, e14.spatialReference, 0, l10, t20, 0);
  for (let o21 = 2; o21 < l10.length; o21 += 3) l10[o21] = te;
  return { lines: u9 ? c9(a22, l10) : [], projectionSuccess: u9 };
}
function c9(o21, e14, n20 = null) {
  const r13 = new Array();
  for (const { index: i8, count: s14 } of o21) {
    if (s14 <= 1) continue;
    const o22 = 3 * i8, p6 = 3 * s14;
    r13.push({ position: a4(e14, 3 * i8, 3 * s14), mapPositions: null != n20 ? a4(n20, o22, p6) : void 0 });
  }
  return r13;
}

// node_modules/@arcgis/core/views/3d/webgl-engine/lib/ModelDirtyTypes.js
var E10;
var I3;
!function(E11) {
  E11[E11.ADD = 0] = "ADD", E11[E11.UPDATE = 1] = "UPDATE", E11[E11.REMOVE = 2] = "REMOVE";
}(E10 || (E10 = {})), function(E11) {
  E11[E11.NONE = 0] = "NONE", E11[E11.VISIBILITY = 1] = "VISIBILITY", E11[E11.GEOMETRY = 2] = "GEOMETRY", E11[E11.TRANSFORMATION = 4] = "TRANSFORMATION", E11[E11.HIGHLIGHT = 8] = "HIGHLIGHT", E11[E11.OCCLUDEE = 16] = "OCCLUDEE";
}(I3 || (I3 = {}));

// node_modules/@arcgis/core/views/3d/webgl-engine/materials/TriangleMaterial.js
var r11 = class extends n12 {
  constructor() {
    super(...arguments), this._pp0 = r5(0, 0, 1), this._pp1 = r5(0, 0, 0);
  }
  intersect(t20, i8, r13, s14, e14, o21) {
    return p4(t20, r13, s14, e14, void 0, o21);
  }
  intersectDraped(t20, i8, r13, s14) {
    return this._pp0[0] = this._pp1[0] = r13[0], this._pp0[1] = this._pp1[1] = r13[1], p4(t20, i8, this._pp0, this._pp1, void 0, s14);
  }
};

// node_modules/@arcgis/core/views/3d/webgl-engine/shaders/ColorMaterialTechnique.js
var O4 = class extends g3 {
  constructor(e14, r13) {
    super(e14, r13, new t5(m6, () => import("./ColorMaterial.glsl-GF6XXXDR.js")));
  }
  _createPipeline(e14, t20) {
    const { oitPass: i8, output: f7, transparent: h9, cullFace: b5, draped: O5, hasOccludees: T3, polygonOffset: _5 } = e14, x4 = i8 === o7.NONE;
    return B({ blending: u4(f7) && h9 ? p3(i8) : null, culling: f3(b5), depthTest: O5 ? null : { func: E4(i8) }, depthWrite: N(e14), drawBuffers: h4(f7, F(i8, f7)), colorWrite: g2, stencilWrite: T3 ? e10 : null, stencilTest: T3 ? t20 ? o9 : f5 : null, polygonOffset: x4 ? _5 ? S4 : null : m3(e14) });
  }
  initializePipeline(e14) {
    return this._occludeePipelineState = this._createPipeline(e14, true), this._createPipeline(e14, false);
  }
  getPipeline(e14) {
    return e14 ? this._occludeePipelineState : super.getPipeline();
  }
};
var S4 = { factor: 1, units: 1 };

// node_modules/@arcgis/core/views/3d/webgl-engine/shaders/ColorMaterialTechniqueConfiguration.js
var a21 = class extends a10 {
  constructor() {
    super(...arguments), this.cullFace = e5.None, this.hasVertexColors = false, this.transparent = false, this.discardInvisibleFragments = false, this.polygonOffset = false, this.enableOffset = true, this.writeDepth = true, this.hasOccludees = false, this.terrainDepthTest = false, this.cullAboveTerrain = false, this.objectAndLayerIdColorInstanced = false, this.vvColor = false, this.draped = false, this.textureCoordinateType = o6.None, this.emissionSource = f2.None, this.occlusionPass = false, this.hasVvInstancing = true, this.vvSize = false, this.vvOpacity = false, this.snowCover = false;
  }
};
r([i3({ count: e5.COUNT })], a21.prototype, "cullFace", void 0), r([i3()], a21.prototype, "hasVertexColors", void 0), r([i3()], a21.prototype, "transparent", void 0), r([i3()], a21.prototype, "discardInvisibleFragments", void 0), r([i3()], a21.prototype, "polygonOffset", void 0), r([i3()], a21.prototype, "enableOffset", void 0), r([i3()], a21.prototype, "writeDepth", void 0), r([i3()], a21.prototype, "hasOccludees", void 0), r([i3()], a21.prototype, "terrainDepthTest", void 0), r([i3()], a21.prototype, "cullAboveTerrain", void 0), r([i3()], a21.prototype, "objectAndLayerIdColorInstanced", void 0), r([i3()], a21.prototype, "vvColor", void 0), r([i3()], a21.prototype, "draped", void 0);

// node_modules/@arcgis/core/views/3d/webgl-engine/materials/ColorMaterial.js
var A5 = class extends r11 {
  constructor(t20) {
    super(t20, P2), this._configuration = new a21(), this.supportsEdges = true, this.produces = /* @__PURE__ */ new Map([[A.OPAQUE_MATERIAL, (t21) => this._isOpaqueMaterialPass(t21)], [A.OPAQUE_MATERIAL_WITHOUT_NORMALS, (t21) => this._isOpaqueNoSSAODepthPass(t21)], [A.TRANSPARENT_MATERIAL, (t21) => d(t21) && this._transparent && this.parameters.writeDepth], [A.TRANSPARENT_MATERIAL_WITHOUT_NORMALS, (t21) => S(t21) && this._transparent && this.parameters.writeDepth], [A.TRANSPARENT_MATERIAL_WITHOUT_DEPTH, (t21) => d(t21) && this._transparent && !this.parameters.writeDepth], [A.DRAPED_MATERIAL, (t21) => e7(t21)]]);
  }
  getConfiguration(t20, r13) {
    return super.getConfiguration(t20, r13, this._configuration), this._configuration.cullFace = this.parameters.cullFace, this._configuration.hasVertexColors = this.parameters.hasVertexColors && !this.parameters.vvColor, this._configuration.hasSlicePlane = this.parameters.hasSlicePlane, this._configuration.transparent = this._transparent, this._configuration.discardInvisibleFragments = this._transparent && !this._isOpaquePass(t20) && this.parameters.discardInvisibleFragments, this._configuration.polygonOffset = this.parameters.polygonOffset, this._configuration.writeDepth = this.parameters.writeDepth, this._configuration.hasOccludees = r13.hasOccludees, this._configuration.oitPass = r13.oitPass, this._configuration.enableOffset = r13.camera.relativeElevation < O3, this._configuration.terrainDepthTest = r13.terrainDepthTest && u4(t20), this._configuration.cullAboveTerrain = r13.cullAboveTerrain, this._configuration.vvColor = !!this.parameters.vvColor, this._configuration.draped = this.parameters.draped, this._configuration;
  }
  get visible() {
    return this.parameters.color[3] >= o10;
  }
  get _transparent() {
    return this.parameters.color[3] < 1 || this.parameters.forceTransparentMode;
  }
  _isOpaquePass(t20) {
    return this._isOpaqueMaterialPass(t20) || this._isOpaqueNoSSAODepthPass(t20);
  }
  _isOpaqueMaterialPass(t20) {
    return t20 === n8.Highlight || d(t20) && !this._transparent;
  }
  _isOpaqueNoSSAODepthPass(t20) {
    return S(t20) && this.parameters.writeDepth && !this._transparent;
  }
  createGLMaterial(t20) {
    return new d4(t20);
  }
  createBufferWriter() {
    const t20 = O2().vec3f(e6.POSITION);
    return e8() && t20.vec4u8(e6.OLIDCOLOR), this.parameters.vvColor ? t20.f32(e6.COLORFEATUREATTRIBUTE) : t20.vec4u8(e6.COLOR), new f4(t20);
  }
};
var d4 = class extends e9 {
  beginSlot(t20) {
    return this.getTechnique(O4, t20);
  }
};
var P2 = class extends t7 {
  constructor() {
    super(...arguments), this.color = a5, this.forceTransparentMode = false, this.writeDepth = true, this.hasVertexColors = false, this.polygonOffset = false, this.hasSlicePlane = false, this.cullFace = e5.None, this.draped = false, this.discardInvisibleFragments = false;
  }
};

// node_modules/@arcgis/core/views/3d/webgl-engine/materials/DefaultLayouts.js
var I4 = O2().vec3f(e6.POSITION);
var c10 = O2().vec3f(e6.POSITION).vec2f16(e6.UV0);
var f6 = O2().vec3f(e6.POSITION).vec4u8(e6.COLOR);
var v2 = O2().vec3f(e6.POSITION).vec2f16(e6.UV0).vec4u8(e6.OLIDCOLOR);
var t19 = O2().vec3f(e6.POSITION).vec2f(e6.UV0);
var r12 = O2().vec3f(e6.POSITION).vec2f(e6.UV0).vec4u8(e6.OLIDCOLOR);

export {
  E10 as E,
  I3 as I,
  r9 as r,
  c7 as c,
  te,
  g6 as g,
  r11 as r2,
  A5 as A,
  a20 as a,
  h7 as h,
  n19 as n,
  b4 as b,
  p5 as p,
  l9 as l,
  I4 as I2,
  c10 as c2,
  f6 as f,
  t19 as t,
  r12 as r3
};
//# sourceMappingURL=chunk-LGKW5DH4.js.map
