import {
  A
} from "./chunk-TMFB3DKM.js";
import {
  r
} from "./chunk-FPSA4NFH.js";
import {
  y2 as y
} from "./chunk-FXKORAMT.js";

// node_modules/@arcgis/core/geometry/support/ShortArray.js
function t(n3) {
  return n3 <= y ? new Array(n3) : new Int16Array(n3);
}

// node_modules/@arcgis/core/views/3d/webgl-engine/lib/Normals.js
function e(t2, r2, o, n3, a, s = 2) {
  const e2 = 1 / (Math.abs(o) + Math.abs(n3) + Math.abs(a)), c2 = o * e2, f = n3 * e2, u2 = a <= 0 ? (c2 >= 0 ? 1 : -1) * (1 - Math.abs(f)) : c2, h = a <= 0 ? (f >= 0 ? 1 : -1) * (1 - Math.abs(c2)) : f, m2 = r2 * s;
  t2[m2] = i(u2), t2[m2 + 1] = i(h);
}
function c(t2) {
  const r2 = t2.length / 3, o = t(2 * r2);
  let n3 = 0;
  for (let a = 0; a < r2; ++a) e(o, a, t2[n3++], t2[n3++], t2[n3++]);
  return o;
}
function u(t2, o, n3, a = 2) {
  const s = n3 * a, e2 = m(o[s]), c2 = m(o[s + 1]), f = 1 - Math.abs(e2) - Math.abs(c2);
  return t2[2] = f, f < 0 ? (t2[0] = (e2 >= 0 ? 1 : -1) * (1 - Math.abs(c2)), t2[1] = (c2 >= 0 ? 1 : -1) * (1 - Math.abs(e2))) : (t2[0] = e2, t2[1] = c2), A(t2, t2);
}
function i(r2) {
  return r(Math.round(32767 * r2), -32767, 32767);
}
function m(r2) {
  return r(r2 / 32767, -1, 1);
}

export {
  t,
  e,
  c,
  u
};
//# sourceMappingURL=chunk-LRWR245D.js.map
