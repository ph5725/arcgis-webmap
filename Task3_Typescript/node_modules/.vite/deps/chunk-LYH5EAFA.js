import {
  N as N2,
  a,
  c as c2,
  d as d2,
  d2 as d3,
  f as f2,
  j as j5,
  s as s3,
  v as v2
} from "./chunk-ENM5QFON.js";
import {
  b as b2,
  j as j4,
  q as q4
} from "./chunk-2H2JCT45.js";
import {
  e as e4
} from "./chunk-RVXIJHL6.js";
import {
  $,
  I,
  O as O2,
  U,
  _ as _3
} from "./chunk-BGR5EVZD.js";
import {
  H as H2,
  M,
  O,
  Q,
  V,
  k,
  l as l4,
  p as p2,
  q as q2,
  z
} from "./chunk-RTDWTAVK.js";
import {
  f
} from "./chunk-BUA5NESM.js";
import {
  _ as _4
} from "./chunk-SHYE33QH.js";
import {
  l as l3,
  n as n3,
  r as r3
} from "./chunk-VNTS5E5O.js";
import {
  A,
  H,
  J,
  P,
  R as R2,
  Z,
  _,
  c,
  j as j2,
  o,
  p,
  q,
  s as s2,
  v
} from "./chunk-TMFB3DKM.js";
import {
  B,
  E,
  _ as _2,
  b,
  d,
  e as e3,
  j as j3,
  o as o2,
  p as p3,
  q as q3
} from "./chunk-TNW4TPNP.js";
import {
  n as n2
} from "./chunk-7FAVUXK2.js";
import {
  j,
  s
} from "./chunk-IVNFIIVI.js";
import {
  r as r4
} from "./chunk-6WL2SHX6.js";
import {
  R
} from "./chunk-7ZMGKXLG.js";
import {
  i
} from "./chunk-3MHRDLQO.js";
import {
  g
} from "./chunk-QFU5COFB.js";
import {
  r
} from "./chunk-BDLVUYG2.js";
import {
  e as e2
} from "./chunk-7BWCD63N.js";
import {
  N,
  n,
  r as r2,
  t
} from "./chunk-RACDQ3AL.js";
import {
  l as l2,
  w
} from "./chunk-A3VAC24F.js";
import {
  l,
  m
} from "./chunk-FPSA4NFH.js";
import {
  e2 as e
} from "./chunk-N3XLUQJI.js";
import {
  L,
  h
} from "./chunk-FXKORAMT.js";

// node_modules/@arcgis/core/views/support/geometry3dUtils.js
function U2({ start: t2, end: r5, type: e5 }, i2, u) {
  const a2 = [], f4 = e3(et, r5, t2), m3 = e3(ot, t2, i2), L2 = p3(f4), h3 = 2 * j3(f4, m3), d5 = h3 * h3 - 4 * L2 * (p3(m3) - u * u);
  if (0 === d5) {
    const n4 = -h3 / (2 * L2);
    (e5 === rt.PLANE || n4 >= 0) && a2.push(d(n3(), t2, f4, n4));
  } else if (d5 > 0) {
    const n4 = Math.sqrt(d5), r6 = (-h3 + n4) / (2 * L2);
    (e5 === rt.PLANE || r6 >= 0) && a2.push(d(n3(), t2, f4, r6));
    const o3 = (-h3 - n4) / (2 * L2);
    (e5 === rt.PLANE || o3 >= 0) && a2.push(d(n3(), t2, f4, o3));
  }
  return a2;
}
function k2(t2, r5) {
  const s4 = t2.start, c3 = t2.end, i2 = e3(et, c3, s4), u = o(it, -i2[1], i2[0], 0), a2 = r5.start, f4 = r5.end, p4 = R2(ut, f4, a2), m3 = P(p4, u), L2 = o(at, s4[0], s4[1], 0), E3 = R2(ft, L2, a2), N4 = P(E3, u), y2 = e2();
  if (Math.abs(m3) < y2) return Math.abs(N4), [];
  const P2 = q(pt, a2, p4, N4 / m3);
  if (r5.type === j5.RAY) {
    const t3 = R2(mt, P2, a2);
    if (P(t3, p4) < -y2) return [];
  }
  if (t2.type === rt.HALF_PLANE) {
    const t3 = B(ot, P2, s4);
    if (j3(t3, i2) < -y2) return [];
  }
  return [t(P2)];
}
function w2(t2, n4) {
  return T(X(ht, n4[2], t2), n4);
}
function C(t2, n4) {
  const r5 = 0;
  return S(X(ht, r5, t2), X(dt, r5, n4)).map(([t3, n5]) => r3(t3, n5));
}
function z2(t2, n4, r5) {
  return J2(t2, X(ht, t2[2], n4), r5);
}
function D(t2, e5, o3, c3 = n()) {
  const i2 = e3(et, t2, e5), u = q3(i2);
  return d(c3, e5, i2, 0 === u ? 1 : o3 / u), c3[2] = t2[2], c3;
}
function J2(t2, { start: n4, end: r5, type: s4 }, e5 = n()) {
  const o3 = R2(ct, t2, n4), c3 = R2(it, r5, n4), i2 = P(o3, c3) / P(c3, c3);
  return q(e5, n4, c3, s4 === j5.RAY ? Math.max(i2, 0) : i2);
}
var O3 = (() => {
  const t2 = n(), n4 = n(), r5 = n();
  return ({ start: s4, end: e5 }, { center: o3, radius: c3, normal: i2, slicePlane: a2 }) => {
    const f4 = l4(o3, i2, Lt);
    if ($2(Q(f4, s4), 0) && $2(Q(f4, e5), 0)) {
      q2(i2, t2, n4);
      const f5 = (s5, e6) => (c(r5, e6, o3), o2(s5, P(r5, t2), P(r5, n4)), s5), p5 = d3({ start: f5(et, s4), end: f5(ot, e5), type: j5.LINE }, l3, c3), m3 = [];
      for (const [r6, s5] of p5) {
        const e6 = s2(n(), o3);
        q(e6, e6, t2, r6), q(e6, e6, n4, s5), a2 && !nt(a2, e6) || m3.push(e6);
      }
      return m3;
    }
    const p4 = n();
    return k(f4, s4, e5, p4) ? !$2(p(p4, o3), c3) || a2 && !nt(a2, p4) ? [] : [p4] : [];
  };
})();
function Q2({ start: t2, end: r5, type: s4 }, e5, i2) {
  const u = [], a2 = c(ct, r5, t2), f4 = e3(ot, t2, e5), p4 = p3(a2), m3 = 2 * j3(a2, f4), L2 = m3 * m3 - 4 * p4 * (p3(f4) - i2 * i2);
  if (0 === L2) {
    const n4 = -m3 / (2 * p4);
    (s4 === j5.LINE || n4 >= 0) && u.push(q(n(), t2, a2, n4));
  } else if (L2 > 0) {
    const n4 = Math.sqrt(L2), r6 = (-m3 + n4) / (2 * p4);
    (s4 === j5.LINE || r6 >= 0) && u.push(q(n(), t2, a2, r6));
    const e6 = (-m3 - n4) / (2 * p4);
    (s4 === j5.LINE || e6 >= 0) && u.push(q(n(), t2, a2, e6));
  }
  return u;
}
function S(t2, n4) {
  const r5 = t2.start, s4 = t2.end, e5 = n4.start, o3 = n4.end, c3 = R2(ct, s4, r5), i2 = R2(it, o3, e5), u = R2(ut, e5, r5), a2 = _(at, c3, i2);
  if (!$2(P(u, a2), 0)) return [];
  const f4 = Z(a2);
  if ($2(f4, 0)) return [];
  const p4 = _(ft, u, i2), m3 = P(p4, a2) / f4, L2 = q(pt, r5, c3, m3);
  if (t2.type === j5.RAY) {
    const t3 = R2(mt, L2, r5);
    if (P(c3, t3) < -e2()) return [];
  }
  if (n4.type === j5.RAY) {
    const t3 = R2(mt, L2, e5);
    if (P(i2, t3) < -e2()) return [];
  }
  return [t(L2)];
}
function T({ start: t2, end: n4, type: r5 }, s4) {
  const e5 = R2(ct, s4, t2), o3 = R2(it, n4, t2), c3 = _(ut, o3, e5), i2 = Z(c3) / Z(o3), u = e2();
  if (i2 < u) switch (r5) {
    case j5.LINE:
      return [t(s4)];
    case j5.RAY:
      return P(o3, e5) < -u ? [] : [t(s4)];
  }
  return [];
}
function W(t2, n4, r5, s4) {
  const [e5, o3] = t2, [c3, u] = r5, a2 = c3 - e5, f4 = u - o3, p4 = a2 * a2 + f4 * f4, L2 = Math.sqrt(p4);
  if (L2 > n4 + s4) return [];
  if (L2 < Math.abs(n4 - s4)) return [];
  if ($2(L2, 0) && $2(n4, s4)) return [];
  const h3 = (n4 * n4 - s4 * s4 + p4) / (2 * L2), d5 = Math.sqrt(n4 * n4 - h3 * h3), A2 = d5 * f4 / L2, l5 = d5 * a2 / L2, [E3, N4] = _2(et, t2, r5, h3 / L2);
  return $2(A2, l5) ? [r3(E3, N4)] : [r3(E3 + A2, N4 - l5), r3(E3 - A2, N4 + l5)];
}
function X(t2, n4, { start: r5, end: s4, type: e5 }) {
  return o(t2.start, r5[0], r5[1], n4), o(t2.end, s4[0], s4[1], n4), t2.type = st[e5], t2;
}
function Z2(t2, n4) {
  return $2(t2[2], n4[2]);
}
function $2(n4, r5) {
  return m(Math.abs(n4 - r5), 0, e2());
}
function tt(t2, n4) {
  return n4.filter((n5) => nt(t2, n5));
}
function nt(t2, n4) {
  return z(t2, n4);
}
var rt;
!function(t2) {
  t2[t2.PLANE = 0] = "PLANE", t2[t2.HALF_PLANE = 1] = "HALF_PLANE";
}(rt || (rt = {}));
var st = { [rt.PLANE]: j5.LINE, [rt.HALF_PLANE]: j5.RAY };
var et = n3();
var ot = n3();
var ct = n();
var it = n();
var ut = n();
var at = n();
var ft = n();
var pt = n();
var mt = n();
var Lt = M();
var ht = { start: n(), end: n(), type: j5.LINE };
var dt = { start: n(), end: n(), type: j5.LINE };

// node_modules/@arcgis/core/views/interactive/sketch/constraints.js
var mt2 = class {
  intersect(t2) {
    return Ht(this, t2);
  }
  closestPoints(t2) {
    return [this.closestTo(t2)];
  }
};
var gt = class extends mt2 {
  constructor(t2) {
    super(), this.point = t2;
  }
  equals(t2) {
    return this === t2 || Le(t2) && H(this.point, t2.point);
  }
  closestTo() {
    return v2(this.point);
  }
};
var _t = class extends mt2 {
  constructor(t2, e5, s4) {
    super(), this.start = t2, this.end = e5, this.lineLike = { start: t2, end: e5, type: s4 };
  }
  equals(t2) {
    return this === t2 || ke(t2) && this.lineLike.type === t2.lineLike.type && H(this.start, t2.start) && H(this.end, t2.end);
  }
  closestTo(t2) {
    const e5 = c2();
    return J2(t2, this.lineLike, e5), e5;
  }
};
var Lt2 = class extends _t {
  constructor(t2, e5) {
    super(t2, e5, j5.LINE);
  }
};
var kt = class extends _t {
  constructor(t2, e5) {
    super(t2, e5, j5.RAY);
  }
};
var xt = class extends mt2 {
  constructor(t2) {
    super(), this.constraints = t2;
  }
  equals(t2) {
    return this === t2 || _e(t2) && h(this.constraints, t2.constraints, (t3, e5) => t3.equals(e5));
  }
  closestTo(t2) {
    let e5, s4 = 1 / 0;
    for (const r5 of this.constraints) {
      const n4 = r5.closestTo(t2), i2 = v(t2, n4);
      i2 < s4 && (s4 = i2, e5 = n4);
    }
    return v2(e5 ?? t2);
  }
  closestPoints(t2) {
    return this.constraints.flatMap((e5) => e5 === this ? [] : e5.closestPoints(t2));
  }
};
var yt = class extends mt2 {
  constructor(t2, e5) {
    super(), this.center = t2, this.radius = e5;
  }
  equals(t2) {
    return this === t2 || Pe(t2) && this.center[0] === t2.center[0] && this.center[1] === t2.center[1] && this.radius === t2.radius;
  }
  closestTo(t2) {
    const e5 = c2();
    return D(t2, this.center, this.radius, e5), e5;
  }
};
var Pt = class extends mt2 {
  constructor(t2, e5) {
    super(), this.center = t2, this.radius = e5;
  }
  equals(t2) {
    return this === t2 || ze(t2) && H(this.center, t2.center) && this.radius === t2.radius;
  }
  closestTo(t2) {
    const e5 = c2();
    return D(t2, this.center, this.radius, e5), e5[2] = this.center[2], e5;
  }
  asCircle() {
    return new zt(v2(this.center), this.radius, d2(0, 0, 1));
  }
};
var zt = class extends mt2 {
  constructor(t2, e5, s4, r5 = void 0) {
    super(), this.center = t2, this.radius = e5, this.normal = s4, this.slicePlane = r5;
  }
  equals(t2) {
    return this === t2 || Me(t2) && H(this.center, t2.center) && H(this.normal, t2.normal) && this.radius === t2.radius;
  }
  closestTo(t2) {
    const { center: e5, radius: s4 } = this;
    H2(this.getPlane(Tt), t2, Mt);
    const r5 = R2(Mt, Mt, e5), n4 = j2(r5);
    if ($2(n4, 0)) return v2(t2);
    const i2 = s4 / Math.sqrt(n4), o3 = c2();
    q(o3, e5, r5, i2);
    const { slicePlane: c3 } = this;
    if (c3 && !nt(c3, o3)) {
      const e6 = Jt(c3, this);
      return e6?.closestTo(t2) ?? v2(t2);
    }
    return o3;
  }
  getPlane(t2 = M()) {
    return l4(this.center, this.normal, t2);
  }
};
var Mt = n();
var Tt = M();
var qt = class extends mt2 {
  constructor(t2) {
    super(), this.z = t2;
  }
  equals(t2) {
    return this === t2 || xe(t2) && this.z === t2.z;
  }
  closestTo(t2) {
    return d2(t2[0], t2[1], this.z);
  }
  getPlane(t2 = M()) {
    return o(wt, 0, 0, this.z), l4(wt, N, t2);
  }
};
var wt = n();
var jt = class extends mt2 {
  constructor(t2, e5, s4) {
    super(), this.start = t2, this.end = e5, this.planeLike = { start: s3(t2), end: s3(e5), type: s4 };
  }
  equals(t2) {
    return this === t2 || ye(t2) && this.planeLike.type === t2.planeLike.type && H(this.start, t2.start) && H(this.end, t2.end);
  }
  closestTo(t2) {
    const e5 = c2();
    return z2(t2, this.planeLike, e5), e5;
  }
  closestEndTo(t2) {
    const { start: e5, end: s4 } = this.planeLike;
    return Math.sign(j3(e3(vt, s4, e5), e3(At, s3(t2), e5))) > 0 ? this.end : this.start;
  }
  getPlane(t2 = M()) {
    const e5 = s2(Dt, this.end);
    return e5[2] += 1, p2(this.start, this.end, e5, t2);
  }
  getSlicePlane(t2 = M()) {
    const { start: e5, end: s4, type: r5 } = this.planeLike;
    if (r5 === rt.PLANE) return;
    const n4 = o(Dt, e5[0], e5[1], 0), i2 = o(bt, s4[0], s4[1], 0), o3 = c(bt, i2, n4);
    return l4(n4, o3, t2), t2;
  }
};
var vt = n3();
var At = n3();
var Dt = n();
var bt = n();
var Et = class extends jt {
  constructor(t2, e5) {
    super(t2, e5, rt.HALF_PLANE);
  }
};
var Rt = class extends jt {
  constructor(t2, e5) {
    super(t2, e5, rt.PLANE);
  }
};
var Nt = class extends mt2 {
  constructor(t2, e5) {
    super(), this.sphere = O2(t2, e5);
  }
  equals(t2) {
    return this === t2 || Te(t2) && _3(this.sphere, t2.sphere);
  }
  closestTo(t2) {
    const e5 = c2();
    return $(this.sphere, t2, e5), e5;
  }
  get center() {
    return U(this.sphere);
  }
  get radius() {
    return this.sphere[3];
  }
};
var Ut = class extends mt2 {
  constructor(t2, e5, s4) {
    super(), this.start = t2, this.end = e5, this.getZ = s4, this.planeLike = { start: s3(t2), end: s3(e5), type: rt.PLANE };
  }
  equals(t2) {
    return this === t2 || qe(t2) && H(this.start, t2.start) && H(this.end, t2.end) && this.getZ === t2.getZ;
  }
  closestTo(t2) {
    return Ft(this, t2);
  }
  addIfOnTheGround(t2, e5) {
    for (const s4 of e5) {
      const e6 = this.getZ(s4[0], s4[1]) ?? 0;
      $2(s4[2], e6) && (s4[2] = e6, t2.push(s4));
    }
  }
};
var Zt = class extends mt2 {
  constructor(t2, e5, s4) {
    super(), this._x = t2, this._y = e5, this._z = s4;
  }
  equals(t2) {
    return this === t2 || je(t2) && this._x === t2._x && this._y === t2._y && this._z === t2._z;
  }
  closestTo([t2, e5, s4]) {
    return f2(this._x ?? t2, this._y ?? e5, this._z ?? s4);
  }
};
var It = class extends mt2 {
  constructor(t2, e5, s4, r5, n4) {
    super(), this._origin = t2, this._spatialReference = e5, this._distanceMeters = s4, this._z = r5, this._directionDegrees = n4;
  }
  equals(t2) {
    return this === t2 || we(t2) && E(this._origin, t2._origin) && this._spatialReference === t2._spatialReference && this._distanceMeters === t2._distanceMeters && this._z === t2._z && this._directionDegrees === t2._directionDegrees;
  }
  closestTo([t2, e5, s4]) {
    return o2(Gt, t2, e5), E(Gt, this._origin) || this._applyDirectionAndDistance(Gt), f2(Gt[0], Gt[1], this._z ?? s4);
  }
  _applyDirectionAndDistance(t2) {
    if (null != this._directionDegrees && null != this._distanceMeters) j4(t2, this._origin, this._directionDegrees, this._distanceMeters, this._spatialReference);
    else if (null != this._directionDegrees) Ct(t2, this._origin, this._directionDegrees, t2, this._spatialReference);
    else if (null != this._distanceMeters) {
      const { azimuth: e5 } = q4(St, this._origin, t2, this._spatialReference);
      j4(t2, this._origin, e5 ?? 0, this._distanceMeters, this._spatialReference);
    }
  }
};
var Gt = [0, 0];
var St = new b2();
function Ct(t2, e5, s4, r5, n4) {
  let { azimuth: i2, distance: o3 } = q4(Ot, e5, r5, n4);
  i2 ??= 0;
  let c3 = o3 * Math.cos((i2 - s4) * i);
  c3 = Math.max(0, c3), j4(t2, e5, s4, c3, n4);
}
var Ot = new b2();
function Ft(t2, e5) {
  const s4 = c2();
  return z2(e5, t2.planeLike, s4), s4[2] = t2.getZ(s4[0], s4[1]) ?? ve, s4;
}
function Ht(t2, e5) {
  if (_e(t2)) {
    const s4 = [];
    for (const r5 of t2.constraints) {
      const t3 = r5.intersect(e5);
      t3 && s4.push(t3);
    }
    return ge(s4);
  }
  if (_e(e5)) return Ht(e5, t2);
  if (qe(t2)) return le(t2, e5);
  if (qe(e5)) return le(e5, t2);
  if (Le(t2)) {
    const { point: s4 } = t2;
    if (Le(e5)) return H(s4, e5.point) ? t2 : void 0;
    const r5 = e5.closestTo(s4);
    return J(r5, s4) ? t2 : void 0;
  }
  if (ke(t2)) {
    if (Le(e5)) return Ht(e5, t2);
    if (ke(e5)) return pe(S(t2.lineLike, e5.lineLike));
    if (xe(e5)) return Vt(t2, e5);
    if (ye(e5)) return pe(k2(e5.planeLike, t2.lineLike));
    if (Pe(e5)) return pe(Q2(t2.lineLike, e5.center, e5.radius));
    if (Me(e5)) return pe(O3(t2.lineLike, e5));
    if (ze(e5)) return Yt(t2, e5);
    if (Te(e5)) return Bt(t2, e5);
  } else if (xe(t2)) {
    if (Le(e5) || ke(e5)) return Ht(e5, t2);
    if (xe(e5)) return Kt(t2, e5);
    if (ye(e5)) return Qt(t2, e5);
    if (Pe(e5)) return Wt(t2, e5);
    if (Me(e5)) return $t(t2, e5);
    if (ze(e5)) return Xt(t2, e5);
    if (Te(e5)) return te(t2, e5);
  } else if (ye(t2)) {
    if (Le(e5) || ke(e5) || xe(e5)) return Ht(e5, t2);
    if (ye(e5)) return de(C(t2.planeLike, e5.planeLike));
    if (Pe(e5)) return de(U2(t2.planeLike, e5.center, e5.radius));
    if (Me(e5)) return se(t2, e5);
    if (ze(e5)) return ee(t2, e5);
    if (Te(e5)) return re(t2, e5);
  } else if (Pe(t2)) {
    if (Le(e5) || ke(e5) || xe(e5) || ye(e5)) return Ht(e5, t2);
    if (Pe(e5)) return de(W(s3(t2.center), t2.radius, s3(e5.center), e5.radius));
    if (Me(e5)) return ne();
    if (ze(e5)) return ie(t2, e5);
    if (Te(e5)) return oe();
  } else if (Me(t2)) {
    if (Le(e5) || ke(e5) || xe(e5) || ye(e5) || Pe(e5)) return Ht(e5, t2);
    if (Me(e5)) return ce();
    if (ze(e5)) return ce(e5.asCircle());
    if (Te(e5)) return ue();
  } else if (ze(t2)) {
    if (Le(e5) || ke(e5) || xe(e5) || ye(e5) || Pe(e5) || Me(e5)) return Ht(e5, t2);
    if (ze(e5)) return ae(e5, t2);
    if (Te(e5)) return he();
  } else if (Te(t2)) {
    if (Le(e5) || ke(e5) || xe(e5) || ye(e5) || Pe(e5) || ze(e5)) return Ht(e5, t2);
    if (Te(e5)) return fe();
  }
}
var Vt = (() => {
  const t2 = M();
  return (e5, s4) => {
    const { start: r5, end: n4 } = e5;
    if (Z2(r5, n4) && $2(r5[2], s4.z)) return e5;
    const i2 = c2();
    return k(s4.getPlane(t2), r5, n4, i2) ? new gt(i2) : void 0;
  };
})();
function Yt({ lineLike: t2 }, { center: e5, radius: s4 }) {
  const r5 = e5[2];
  return pe(Q2(t2, e5, s4).filter((t3) => $2(t3[2], r5)));
}
function Bt({ lineLike: t2 }, { sphere: e5 }) {
  return pe(I(e5, t2.start, t2.end));
}
var Jt = (() => {
  const t2 = n2(), e5 = n(), r5 = n();
  return (n4, i2, o3) => {
    const { normal: c3, center: u, radius: a2 } = i2;
    q2(c3, e5, r5);
    const h3 = O(n4), f4 = a2 * P(h3, e5), l5 = a2 * P(h3, r5);
    s(t2, u[0], u[1], u[2], 1);
    const d5 = j(n4, t2), m3 = Math.hypot(f4, l5), g3 = $2(m3, 0);
    if ($2(Q(n4, u), 0)) {
      if (g3) return i2;
      if ($2(a2, 0)) return !o3 || nt(o3, u) ? new gt(v2(u)) : void 0;
      _(e5, h3, c3), A(e5, e5);
      const t3 = new Array(), s4 = t(u);
      q(s4, s4, e5, a2), o3 && !nt(o3, s4) || t3.push(s4);
      const r6 = t(u);
      return q(r6, r6, e5, -a2), o3 && !nt(o3, r6) || t3.push(r6), pe(t3);
    }
    if (g3) return;
    const _5 = -d5 / m3;
    if (Math.abs(_5) > 1 || $2(_5, 1)) return;
    const P2 = Math.atan(f4 / l5), M2 = l(_5) - P2, w4 = Math.PI - M2, j7 = new Array(), v3 = n();
    q(v3, u, e5, a2 * Math.cos(M2)), q(v3, v3, r5, a2 * Math.sin(M2)), j7.push(v3);
    const A2 = n();
    return q(A2, u, e5, a2 * Math.cos(w4)), q(A2, A2, r5, a2 * Math.sin(w4)), j7.push(A2), pe(o3 ? tt(o3, j7) : j7);
  };
})();
function Kt(t2, e5) {
  return $2(t2.z, e5.z) ? t2 : void 0;
}
function Qt({ z: t2 }, { planeLike: e5 }) {
  const [s4, r5] = e5.start, [n4, i2] = e5.end, o3 = d2(s4, r5, t2), c3 = d2(n4, i2, t2);
  return e5.type === rt.PLANE ? new Lt2(o3, c3) : new kt(o3, c3);
}
function Wt(t2, e5) {
  const [s4, r5] = e5.center;
  return new Pt(d2(s4, r5, t2.z), e5.radius);
}
function Xt(t2, e5) {
  return $2(e5.center[2], t2.z) ? e5 : void 0;
}
var $t = (() => {
  const t2 = M();
  return (e5, s4) => Jt(e5.getPlane(t2), s4, s4.slicePlane);
})();
function te(t2, { center: e5, radius: s4 }) {
  const r5 = Math.abs(e5[2] - t2.z);
  if (r5 > s4 && !$2(r5, s4)) return;
  const n4 = d2(e5[0], e5[1], t2.z), i2 = Math.sqrt(s4 ** 2 - r5 ** 2);
  return $2(i2, 0) ? void 0 : new Pt(n4, i2);
}
var ee = (() => {
  const t2 = M();
  return (e5, { center: s4, radius: r5 }) => {
    const n4 = U2(e5.planeLike, s4, r5), i2 = s4[2];
    e5.getSlicePlane(t2);
    const o3 = new Array();
    for (const [c3, u] of n4) {
      const e6 = [c3, u, i2];
      nt(t2, e6) && o3.push(e6);
    }
    return pe(o3);
  };
})();
var se = (() => {
  const t2 = M(), e5 = M();
  return (s4, r5) => Jt(s4.getPlane(t2), r5, s4.getSlicePlane(e5));
})();
var re = (() => {
  const t2 = M();
  return (e5, { center: s4, radius: r5 }) => {
    const n4 = e5.getPlane(t2), i2 = V(n4, s4), o3 = Math.abs(i2);
    if (o3 > r5 && !$2(o3, r5)) return;
    const c3 = Math.sqrt(r5 ** 2 - i2 ** 2);
    if ($2(c3, 0)) {
      const t3 = c2();
      return H2(n4, s4, t3), new gt(t3);
    }
    const u = c2(), a2 = t(O(n4));
    return q(u, s4, a2, i2), new zt(u, c3, a2, e5.getSlicePlane());
  };
})();
function ne(t2, e5) {
}
function ie(t2, e5) {
  const s4 = b(s3(t2.center), s3(e5.center));
  if ($2(s4, 0) && $2(t2.radius, e5.radius)) return e5;
  return me(W(s3(t2.center), t2.radius, s3(e5.center), e5.radius), e5.center[2]);
}
function oe(t2, e5) {
}
function ce(t2, e5) {
}
function ue(t2, e5) {
}
function ae(t2, e5) {
  if (!Z2(t2.center, e5.center)) return;
  const s4 = b(s3(t2.center), s3(e5.center));
  if ($2(s4, 0) && $2(t2.radius, e5.radius)) return t2;
  return me(W(s3(t2.center), t2.radius, s3(e5.center), e5.radius), t2.center[2]);
}
function he(t2, e5) {
}
function fe(t2, e5) {
}
function le(t2, e5) {
  const { planeLike: s4, getZ: r5 } = t2, n4 = new Array();
  if (Le(e5)) t2.addIfOnTheGround(n4, w2(s4, e5.point));
  else if (ke(e5)) t2.addIfOnTheGround(n4, k2(s4, e5.lineLike));
  else if (Pe(e5)) for (const [i2, o3] of U2(s4, e5.center, e5.radius)) {
    const t3 = r5(i2, o3);
    null != t3 && n4.push(r2(i2, o3, t3));
  }
  else if (ye(e5) || qe(e5)) for (const [i2, o3] of C(s4, e5.planeLike)) {
    const t3 = r5(i2, o3) ?? ve;
    n4.push(r2(i2, o3, t3));
  }
  return pe(n4);
}
function de(t2) {
  return ge(t2.map(([t3, e5]) => {
    const s4 = d2(t3, e5, 0), r5 = d2(t3, e5, 1);
    return new Lt2(s4, r5);
  }));
}
function pe(t2) {
  return ge(t2.map((t3) => t3 ? new gt(a(t3)) : void 0));
}
function me(t2, e5) {
  return pe(t2.map(([t3, s4]) => [t3, s4, e5]));
}
function ge(e5) {
  if (0 !== e5.length) return 1 === e5.length ? e5[0] ?? void 0 : new xt(e5.filter(L));
}
function _e(t2) {
  return t2 instanceof xt;
}
function Le(t2) {
  return t2 instanceof gt;
}
function ke(t2) {
  return t2 instanceof _t;
}
function xe(t2) {
  return t2 instanceof qt;
}
function ye(t2) {
  return t2 instanceof jt;
}
function Pe(t2) {
  return t2 instanceof yt;
}
function ze(t2) {
  return t2 instanceof Pt;
}
function Me(t2) {
  return t2 instanceof zt;
}
function Te(t2) {
  return t2 instanceof Nt;
}
function qe(t2) {
  return t2 instanceof Ut;
}
function we(t2) {
  return t2 instanceof It;
}
function je(t2) {
  return t2 instanceof Zt;
}
var ve = 0;

// node_modules/@arcgis/core/views/interactive/snapping/snappingUtils.js
var d4 = Symbol("grid-placement-graphic");
function g2(e5, t2) {
  const n4 = e5.x - t2.x, r5 = e5.y - t2.y;
  return n4 * n4 + r5 * r5;
}
function f3(e5, t2) {
  return Math.sqrt(g2(e5, t2));
}
function E2(e5, t2) {
  t2.sort((t3, n4) => v(t3.targetPoint, e5) - v(n4.targetPoint, e5));
}
var h2;
function y({ parameters: { point: e5, distance: t2, returnEdge: n4, vertexMode: i2, coordinateHelper: { spatialReference: p4 }, filter: c3 }, mode: l5, returnZ: m3, filter: d5 }) {
  const u = d5?.clone() ?? new R({ where: "1=1" });
  return u.returnZ = m3 ?? "3d" === l5, c3 && (u.geometry = c3.geometry, u.distance = c3.distance, u.spatialRelationship = c3.spatialRelationship, u.where = r(u.where, c3.where), u.timeExtent = g(u.timeExtent, c3.timeExtent), u.objectIds = w3(u.objectIds, c3.objectIds)), { point: e4(e5[0], e5[1], e5[2], p4.toJSON()), mode: l5, distance: t2, returnEdge: n4, vertexMode: i2, query: u.toJSON() };
}
function w3(e5, t2) {
  return e5 || t2 ? t2 ? e5 ? Array.from(e(new Set(e5), new Set(t2))) : t2 : e5 : null;
}
function j6(e5, t2, n4) {
  return { left: N2(e5.leftVertex.pos, t2, n4), right: N2(e5.rightVertex.pos, t2, n4) };
}
!function(e5) {
  e5[e5.TARGET = 0] = "TARGET", e5[e5.REFERENCE = 1] = "REFERENCE", e5[e5.REFERENCE_EXTENSION = 2] = "REFERENCE_EXTENSION";
}(h2 || (h2 = {}));
var R3 = Symbol("snapping-toggle");
function N3(n4, r5 = () => {
}) {
  const o3 = l2(() => ({ view: n4.view, snappingOptions: n4.snappingOptions }), ({ view: e5, snappingOptions: t2 }) => {
    if (n4.removeHandles(R3), !e5 || !t2) return;
    const o4 = _4.TOOL, i2 = [e5.on("key-down", (e6) => {
      e6.key !== f.toggle || e6.repeat || (t2.enabledToggled = true, r5());
    }, o4), e5.on("key-up", (e6) => {
      e6.key === f.toggle && (t2.enabledToggled = false, r5());
    }, o4), e5.on("pointer-move", (e6) => {
      const n5 = e6.native.ctrlKey;
      t2.enabledToggled !== n5 && (t2.enabledToggled = n5, r5());
    }, o4)];
    n4.addHandles(i2, R3);
  }, w);
  n4.addHandles(o3);
}
function b3(e5) {
  return r4(e5) && "utilityNetworks" in e5 && !!e5.utilityNetworks?.length;
}

export {
  J2 as J,
  gt,
  Lt2 as Lt,
  yt,
  qt,
  Et,
  Rt,
  Ut,
  Zt,
  It,
  ge,
  Le,
  d4 as d,
  g2 as g,
  f3 as f,
  E2 as E,
  h2 as h,
  y,
  j6 as j,
  N3 as N,
  b3 as b
};
//# sourceMappingURL=chunk-LYH5EAFA.js.map
