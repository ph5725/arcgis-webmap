import {
  a as a3,
  m as m2,
  n,
  v,
  y
} from "./chunk-GH7GZNY6.js";
import {
  u as u2
} from "./chunk-7DFHXN7Z.js";
import {
  z
} from "./chunk-LYSDGL5S.js";
import {
  r as r3
} from "./chunk-EOMIFMDH.js";
import {
  E,
  e2 as e,
  x
} from "./chunk-VCRP2PLV.js";
import {
  o
} from "./chunk-JUAPMINU.js";
import {
  r as r2
} from "./chunk-YFPGM5UE.js";
import {
  s
} from "./chunk-KTUX3OKX.js";
import {
  l
} from "./chunk-E3KEUGUG.js";
import {
  m
} from "./chunk-N3XLUQJI.js";
import {
  a2
} from "./chunk-JUAD7TJ6.js";
import {
  u,
  w
} from "./chunk-VHLUKPRH.js";
import {
  r
} from "./chunk-5TPMG26T.js";
import {
  o as o2
} from "./chunk-3NBBZ43U.js";
import {
  i2 as i
} from "./chunk-XWG6QGFK.js";
import {
  a
} from "./chunk-GWNLQRNM.js";

// node_modules/@arcgis/core/renderers/support/ClassBreakInfo.js
var i2;
var l2 = i2 = class extends l {
  constructor(e2) {
    super(e2), this.description = null, this.label = null, this.minValue = null, this.maxValue = 0, this.symbol = null;
  }
  clone() {
    return new i2({ description: this.description, label: this.label, minValue: this.minValue, maxValue: this.maxValue, symbol: this.symbol?.clone() ?? null });
  }
  getMeshHash() {
    const e2 = JSON.stringify(this.symbol);
    return `${this.minValue}.${this.maxValue}.${e2}`;
  }
};
r([m({ type: String, json: { write: true } })], l2.prototype, "description", void 0), r([m({ type: String, json: { write: true } })], l2.prototype, "label", void 0), r([m({ type: Number, json: { read: { source: "classMinValue" }, write: { target: "classMinValue" } } })], l2.prototype, "minValue", void 0), r([m({ type: Number, json: { read: { source: "classMaxValue" }, write: { target: "classMaxValue" } } })], l2.prototype, "maxValue", void 0), r([m(m2)], l2.prototype, "symbol", void 0), l2 = i2 = r([a2("esri.renderers.support.ClassBreakInfo")], l2);

// node_modules/@arcgis/core/renderers/ClassBreaksRenderer.js
var v2;
var B = "log";
var F = "percent-of-total";
var V = "field";
var S = new o2({ esriNormalizeByLog: B, esriNormalizeByPercentOfTotal: F, esriNormalizeByField: V });
var E2 = w(l2);
var j = v2 = class extends v(a3) {
  constructor(e2) {
    super(e2), this._compiledValueExpression = { valueExpression: null, compiledFunction: null }, this.backgroundFillSymbol = null, this.classBreakInfos = null, this.defaultLabel = null, this.defaultSymbol = null, this.field = null, this.isMaxInclusive = true, this.legendOptions = null, this.normalizationField = null, this.normalizationTotal = null, this.type = "class-breaks", this.valueExpression = null, this.valueExpressionTitle = null, this._set("classBreakInfos", []);
  }
  readClassBreakInfos(e2, s2, t) {
    if (!Array.isArray(e2)) return;
    let o3 = s2.minValue;
    return e2.map((e3) => {
      const s3 = new l2();
      return s3.read(e3, t), null == s3.minValue && (s3.minValue = o3), null == s3.maxValue && (s3.maxValue = s3.minValue), o3 = s3.maxValue, s3;
    });
  }
  writeClassBreakInfos(e2, s2, t, o3) {
    const i3 = e2.map((e3) => e3.write({}, o3));
    this._areClassBreaksConsecutive() && i3.forEach((e3) => delete e3.classMinValue), s2[t] = i3;
  }
  castField(e2) {
    return null == e2 ? e2 : "function" == typeof e2 ? (i.getLogger(this).error(".field: field must be a string value"), null) : u(e2);
  }
  get minValue() {
    return this.classBreakInfos && this.classBreakInfos[0] && this.classBreakInfos[0].minValue || 0;
  }
  get normalizationType() {
    let e2 = this._get("normalizationType");
    const s2 = !!this.normalizationField, t = null != this.normalizationTotal;
    return s2 || t ? (e2 = s2 && V || t && F || null, s2 && t && i.getLogger(this).warn("warning: both normalizationField and normalizationTotal are set!")) : e2 !== V && e2 !== F || (e2 = null), e2;
  }
  set normalizationType(e2) {
    this._set("normalizationType", e2);
  }
  addClassBreakInfo(e2, s2, o3) {
    let i3 = null;
    i3 = "number" == typeof e2 ? new l2({ minValue: e2, maxValue: s2, symbol: z(o3) }) : E2(a(e2)), this.classBreakInfos.push(i3), 1 === this.classBreakInfos.length && this.notifyChange("minValue");
  }
  removeClassBreakInfo(e2, s2) {
    const t = this.classBreakInfos.length;
    for (let o3 = 0; o3 < t; o3++) {
      const t2 = [this.classBreakInfos[o3].minValue, this.classBreakInfos[o3].maxValue];
      if (t2[0] === e2 && t2[1] === s2) {
        this.classBreakInfos.splice(o3, 1);
        break;
      }
    }
  }
  getBreakIndex(e2, s2) {
    return this.valueExpression && null == s2?.arcade && i.getLogger(this).warn(""), this.valueExpression ? this._getBreakIndexForExpression(e2, s2) : this._getBreakIndexForField(e2);
  }
  async getClassBreakInfo(e2, s2) {
    let t = s2;
    this.valueExpression && null == s2?.arcade && (t = { ...t, arcade: await e() });
    const o3 = this.getBreakIndex(e2, t);
    return -1 !== o3 ? this.classBreakInfos[o3] : null;
  }
  getSymbol(e2, s2) {
    if (this.valueExpression && null == s2?.arcade) return void i.getLogger(this).error("#getSymbol()", "Please use getSymbolAsync if valueExpression is used");
    const t = this.getBreakIndex(e2, s2);
    return t > -1 ? this.classBreakInfos[t].symbol : this.defaultSymbol;
  }
  async getSymbolAsync(e2, s2) {
    let t = s2;
    if (this.valueExpression && null == s2?.arcade) {
      const e3 = await e(), { arcadeUtils: s3 } = e3;
      s3.hasGeometryOperations(this.valueExpression) && await s3.enableGeometryOperations(), t = { ...t, arcade: e3 };
    }
    const o3 = this.getBreakIndex(e2, t);
    return o3 > -1 ? this.classBreakInfos[o3].symbol : this.defaultSymbol;
  }
  get symbols() {
    const e2 = [];
    return this.classBreakInfos.forEach((s2) => {
      s2.symbol && e2.push(s2.symbol);
    }), this.defaultSymbol && e2.push(this.defaultSymbol), e2;
  }
  getAttributeHash() {
    return this.visualVariables?.reduce((e2, s2) => e2 + s2.getAttributeHash(), "") ?? "";
  }
  getMeshHash() {
    const e2 = JSON.stringify(this.backgroundFillSymbol), s2 = JSON.stringify(this.defaultSymbol), t = `${this.normalizationField}.${this.normalizationType}.${this.normalizationTotal}`;
    return `${e2}.${s2}.${this.classBreakInfos.reduce((e3, s3) => e3 + s3.getMeshHash(), "")}.${t}.${this.field}.${this.valueExpression}`;
  }
  get arcadeRequired() {
    return this.arcadeRequiredForVisualVariables || !!this.valueExpression;
  }
  clone() {
    return new v2({ field: this.field, backgroundFillSymbol: this.backgroundFillSymbol?.clone(), defaultLabel: this.defaultLabel, defaultSymbol: this.defaultSymbol?.clone(), valueExpression: this.valueExpression, valueExpressionTitle: this.valueExpressionTitle, classBreakInfos: a(this.classBreakInfos), isMaxInclusive: this.isMaxInclusive, normalizationField: this.normalizationField, normalizationTotal: this.normalizationTotal, normalizationType: this.normalizationType, visualVariables: a(this.visualVariables), legendOptions: a(this.legendOptions), authoringInfo: a(this.authoringInfo) });
  }
  async collectRequiredFields(e2, s2) {
    const t = [this.collectVVRequiredFields(e2, s2), this.collectSymbolFields(e2, s2)];
    await Promise.all(t);
  }
  async collectSymbolFields(e2, s2) {
    const t = [...this.symbols.map((t2) => t2.collectRequiredFields(e2, s2)), E(e2, s2, this.valueExpression)];
    x(e2, s2, this.field), x(e2, s2, this.normalizationField), await Promise.all(t);
  }
  _getBreakIndexForExpression(e2, s2) {
    const { viewingMode: t, scale: o3, spatialReference: i3, arcade: r4, timeZone: a4 } = s2 ?? {}, { valueExpression: l3 } = this;
    let n2 = this._compiledValueExpression.valueExpression === l3 ? this._compiledValueExpression.compiledFunction : null;
    const u3 = r4.arcadeUtils;
    if (!n2) {
      const e3 = u3.createSyntaxTree(l3);
      n2 = u3.createFunction(e3), this._compiledValueExpression.compiledFunction = n2;
    }
    this._compiledValueExpression.valueExpression = l3;
    const p = u3.executeFunction(n2, u3.createExecContext(e2, u3.getViewInfo({ viewingMode: t, scale: o3, spatialReference: i3 }), a4));
    return this._getBreakIndexfromInfos(p);
  }
  _getBreakIndexForField(e2) {
    const s2 = this.field, t = e2.attributes, o3 = this.normalizationType;
    let i3 = parseFloat(t[s2]);
    if (o3) {
      const e3 = this.normalizationTotal, s3 = parseFloat(this.normalizationField ? t[this.normalizationField] : void 0);
      if (o3 === B) i3 = Math.log(i3) * Math.LOG10E;
      else if (o3 !== F || null == e3 || isNaN(e3)) {
        if (o3 === V && !isNaN(s3)) {
          if (isNaN(i3) || isNaN(s3)) return -1;
          i3 /= s3;
        }
      } else i3 = i3 / e3 * 100;
    }
    return this._getBreakIndexfromInfos(i3);
  }
  _getBreakIndexfromInfos(e2) {
    const s2 = this.isMaxInclusive;
    if (null != e2 && "number" == typeof e2 && !isNaN(e2)) for (let t = 0; t < this.classBreakInfos.length; t++) {
      const o3 = [this.classBreakInfos[t].minValue, this.classBreakInfos[t].maxValue];
      if (o3[0] <= e2 && (s2 ? e2 <= o3[1] : e2 < o3[1])) return t;
    }
    return -1;
  }
  _areClassBreaksConsecutive() {
    const e2 = this.classBreakInfos, s2 = e2.length;
    for (let t = 1; t < s2; t++) if (e2[t - 1].maxValue !== e2[t].minValue) return false;
    return true;
  }
};
r([m(n)], j.prototype, "backgroundFillSymbol", void 0), r([m({ type: [l2], json: { write: { isRequired: true } } })], j.prototype, "classBreakInfos", void 0), r([o("classBreakInfos")], j.prototype, "readClassBreakInfos", null), r([r2("classBreakInfos")], j.prototype, "writeClassBreakInfos", null), r([m({ type: String, json: { write: true } })], j.prototype, "defaultLabel", void 0), r([m(y)], j.prototype, "defaultSymbol", void 0), r([m({ type: String, json: { write: true } })], j.prototype, "field", void 0), r([s("field")], j.prototype, "castField", null), r([m({ type: Boolean })], j.prototype, "isMaxInclusive", void 0), r([m({ type: u2, json: { write: true } })], j.prototype, "legendOptions", void 0), r([m({ type: Number, readOnly: true, value: null, json: { read: false, write: { overridePolicy() {
  return 0 !== this.classBreakInfos.length && this._areClassBreaksConsecutive() ? { enabled: true } : { enabled: false };
} } } })], j.prototype, "minValue", null), r([m({ type: String, json: { write: true } })], j.prototype, "normalizationField", void 0), r([m({ type: Number, json: { write: true } })], j.prototype, "normalizationTotal", void 0), r([m({ type: S.apiValues, value: null, json: { type: S.jsonValues, read: S.read, write: S.write } })], j.prototype, "normalizationType", null), r([r3({ classBreaks: "class-breaks" })], j.prototype, "type", void 0), r([m({ type: String, json: { write: true } })], j.prototype, "valueExpression", void 0), r([m({ type: String, json: { write: true } })], j.prototype, "valueExpressionTitle", void 0), j = v2 = r([a2("esri.renderers.ClassBreaksRenderer")], j);

export {
  l2 as l,
  j
};
//# sourceMappingURL=chunk-M2UZRY7C.js.map
