// node_modules/@arcgis/core/core/MemCache.js
var t = -3;
var i = t - 1;
var s;
!function(t2) {
  t2[t2.ALL = 0] = "ALL", t2[t2.SOME = 1] = "SOME";
}(s || (s = {}));
var h = class {
  get size() {
    return this._size;
  }
  constructor(t2 = 10485760) {
    this._maxSize = t2, this._db = /* @__PURE__ */ new Map(), this._size = 0, this._hit = 0, this._miss = 0, this._users = /* @__PURE__ */ new Map(), this._sizeLimits = /* @__PURE__ */ new Map();
  }
  destroy() {
    this.clearAll(), this._sizeLimits.clear(), this._users.clear();
  }
  register(t2) {
    this._users.set(t2.id.slice(0, -1), t2);
  }
  deregister(t2) {
    this.clear(t2), this._sizeLimits.delete(t2), this._users.delete(t2.id.slice(0, -1));
  }
  get maxSize() {
    return this._maxSize;
  }
  set maxSize(t2) {
    this._maxSize = Math.max(t2, -1), this._checkSize();
  }
  getSize(t2, i2) {
    const s2 = this._db.get(t2.id + i2);
    return s2?.size ?? 0;
  }
  put(e, h2, r, _2, n) {
    h2 = e.id + h2;
    const a = this._db.get(h2);
    if (a && (this._size -= a.size, e.size -= a.size, this._db.delete(h2), a.entry !== r && this._notifyRemove(h2, a.entry, a.size, s.ALL)), _2 > this._maxSize) return void this._notifyRemove(h2, r, _2, s.ALL);
    if (void 0 === r) return void console.warn("Refusing to cache undefined entry ");
    if (!_2 || _2 < 0) return console.warn(`Refusing to cache entry with size ${_2} for key ${h2}`), void this._notifyRemove(h2, r, 0, s.ALL);
    const c = 1 + Math.max(n, i) - t;
    this._db.set(h2, new o(r, _2, c)), this._size += _2, e.size += _2, this._checkSize();
  }
  updateSize(t2, i2, e, h2) {
    i2 = t2.id + i2;
    const r = this._db.get(i2);
    if (r && r.entry === e) {
      for (this._size -= r.size, t2.size -= r.size; h2 > this._maxSize; ) {
        const t3 = this._notifyRemove(i2, e, h2, s.SOME);
        if (!(null != t3 && t3 > 0)) return void this._db.delete(i2);
        h2 = t3;
      }
      r.size = h2, this._size += h2, t2.size += h2, this._checkSize();
    }
  }
  pop(t2, i2) {
    i2 = t2.id + i2;
    const s2 = this._db.get(i2);
    if (s2) return this._size -= s2.size, t2.size -= s2.size, this._db.delete(i2), ++this._hit, s2.entry;
    ++this._miss;
  }
  get(t2, i2) {
    i2 = t2.id + i2;
    const s2 = this._db.get(i2);
    if (void 0 !== s2) return this._db.delete(i2), s2.lives = s2.lifetime, this._db.set(i2, s2), ++this._hit, s2.entry;
    ++this._miss;
  }
  peek(t2, i2) {
    const s2 = this._db.get(t2.id + i2);
    return s2 ? ++this._hit : ++this._miss, s2?.entry;
  }
  get performanceInfo() {
    const i2 = { Size: Math.round(this._size / 1048576) + "/" + Math.round(this._maxSize / 1048576) + "MB", "Hit rate": Math.round(100 * this._getHitRate()) + "%", Entries: this._db.size.toString() }, s2 = {}, e = new Array();
    this._db.forEach((t2, i3) => {
      const h3 = t2.lifetime;
      e[h3] = (e[h3] || 0) + t2.size, this._users.forEach((e2) => {
        const { id: h4, name: r2 } = e2;
        if (i3.startsWith(h4)) {
          const i4 = s2[r2] || 0;
          s2[r2] = i4 + t2.size;
        }
      });
    });
    const h2 = {};
    this._users.forEach((t2) => {
      const i3 = t2.name;
      if ("hitRate" in t2 && "number" == typeof t2.hitRate && !isNaN(t2.hitRate) && t2.hitRate > 0) {
        const e2 = s2[i3] || 0;
        s2[i3] = e2, h2[i3] = Math.round(100 * t2.hitRate) + "%";
      } else h2[i3] = "0%";
    });
    const r = Object.keys(s2);
    r.sort((t2, i3) => s2[i3] - s2[t2]), r.forEach((t2) => i2[t2] = Math.round(s2[t2] / 2 ** 20) + "MB / " + h2[t2]);
    for (let o2 = e.length - 1; o2 >= 0; --o2) {
      const s3 = e[o2];
      s3 && (i2["Priority " + (o2 + t - 1)] = Math.round(s3 / this._size * 100) + "%");
    }
    return i2;
  }
  resetStats() {
    this._hit = this._miss = 0, this._users.forEach((t2) => t2.resetHitRate());
  }
  clear(t2) {
    const i2 = t2.id;
    this._db.forEach((t3, e) => {
      e.startsWith(i2) && (this._size -= t3.size, this._db.delete(e), this._notifyRemove(e, t3.entry, t3.size, s.ALL));
    }), t2.size = 0;
  }
  clearAll() {
    this._db.forEach((t2, i2) => this._notifyRemove(i2, t2.entry, t2.size, s.ALL)), this._users.forEach((t2) => t2.size = 0), this._size = 0, this._db.clear();
  }
  *values(t2) {
    for (const [i2, s2] of this._db) i2.startsWith(t2.id) && (yield s2.entry);
  }
  _getHitRate() {
    return this._hit / (this._hit + this._miss);
  }
  _notifyRemove(t2, i2, s2, e) {
    const h2 = this._users.get(t2.split(_)[0])?.removeFunc, r = h2?.(i2, e, s2);
    return "number" == typeof r ? r : null;
  }
  _checkSize() {
    this._sizeLimits.forEach((t2, i2) => this._checkSizeLimits(t2, i2)), this._checkSizeLimits(this.maxSize);
  }
  setMaxSize(t2, i2) {
    null == i2 || i2 <= 0 ? this._sizeLimits.delete(t2) : this._sizeLimits.set(t2, i2);
  }
  _checkSizeLimits(t2, i2) {
    const s2 = i2 ?? this;
    if (s2.size <= t2) return;
    const e = i2?.id;
    let h2 = true;
    for (; h2; ) {
      h2 = false;
      for (const [r, o2] of this._db) if (0 === o2.lifetime && (!e || r.startsWith(e))) {
        const e2 = i2 ?? this._users.get(r.split(_)[0]);
        if (this._purgeItem(r, o2, e2), s2.size <= 0.9 * t2) return;
        h2 ||= this._db.has(r);
      }
    }
    for (const [r, o2] of this._db) if (!e || r.startsWith(e)) {
      const e2 = i2 ?? this._users.get(r.split(_)[0]);
      if (this._purgeItem(r, o2, e2), s2.size <= 0.9 * t2) return;
    }
  }
  _purgeItem(t2, i2, e) {
    if (this._db.delete(t2), i2.lives <= 1) {
      this._size -= i2.size, e && (e.size -= i2.size);
      const h2 = this._notifyRemove(t2, i2.entry, i2.size, s.SOME);
      null != h2 && h2 > 0 && (this._size += h2, e && (e.size += h2), i2.lives = i2.lifetime, i2.size = h2, this._db.set(t2, i2));
    } else --i2.lives, this._db.set(t2, i2);
  }
};
var o = class {
  constructor(t2, i2, s2) {
    this.entry = t2, this.size = i2, this.lifetime = s2, this.lives = s2;
  }
};
var _ = ":";

export {
  t,
  h
};
//# sourceMappingURL=chunk-M6AESODI.js.map
