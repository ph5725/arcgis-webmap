import {
  l as l6
} from "./chunk-N6VYJNA5.js";
import {
  Q,
  V
} from "./chunk-Z5EDZREM.js";
import {
  B,
  C,
  D,
  M as M2,
  a2 as a3,
  a4 as a5,
  a5 as a6,
  c2 as c4,
  d,
  d2,
  d3,
  f as f3,
  h2,
  l2 as l5,
  m2 as m4,
  n3 as n,
  r4 as r6,
  u2 as u3,
  u3 as u4,
  w,
  y
} from "./chunk-U5MPARPW.js";
import {
  M,
  a as a4,
  c as c2,
  c2 as c3,
  h,
  i as i2,
  k,
  l as l3,
  l2 as l4,
  m as m5,
  o as o3,
  r as r5,
  u as u2,
  w as w2,
  x
} from "./chunk-NXHGFG67.js";
import {
  c,
  f as f2,
  i,
  r as r4,
  u
} from "./chunk-PVI3IOCA.js";
import {
  U
} from "./chunk-76QJRCNC.js";
import {
  m as m3,
  p
} from "./chunk-D443BZKU.js";
import {
  m as m2
} from "./chunk-6TS2ZJL4.js";
import {
  r as r3
} from "./chunk-EOMIFMDH.js";
import {
  f
} from "./chunk-N3A2BVTW.js";
import {
  l as l2
} from "./chunk-IGYEHOTB.js";
import {
  q
} from "./chunk-FPSA4NFH.js";
import {
  o
} from "./chunk-JUAPMINU.js";
import {
  r as r2
} from "./chunk-YFPGM5UE.js";
import {
  s as s2
} from "./chunk-KTUX3OKX.js";
import {
  l
} from "./chunk-E3KEUGUG.js";
import {
  m
} from "./chunk-N3XLUQJI.js";
import {
  a2
} from "./chunk-JUAD7TJ6.js";
import {
  r
} from "./chunk-5TPMG26T.js";
import {
  o as o2
} from "./chunk-3NBBZ43U.js";
import {
  s
} from "./chunk-XWG6QGFK.js";
import {
  a
} from "./chunk-GWNLQRNM.js";

// node_modules/@arcgis/core/layers/support/rasterFunctions/BaseFunctionArguments.js
var e = class extends l {
  constructor() {
    super(...arguments), this.raster = void 0;
  }
};
r([m({ json: { write: true } })], e.prototype, "raster", void 0), e = r([a2("esri.layers.support.rasterFunctions.BaseFunctionArguments")], e);
var p2 = e;

// node_modules/@arcgis/core/layers/support/rasterFunctions/ArithmeticFunctionArguments.js
var e2;
var a7 = e2 = class extends p2 {
  constructor() {
    super(...arguments), this.raster2 = void 0;
  }
  get rasters() {
    return [this.raster, this.raster2];
  }
  clone() {
    return new e2({ raster: this.raster, raster2: this.raster2, operation: this.operation });
  }
};
r([m({ json: { write: true } })], a7.prototype, "operation", void 0), r([m({ json: { write: true } })], a7.prototype, "raster2", void 0), r([m({ readOnly: true })], a7.prototype, "rasters", null), a7 = e2 = r([a2("esri.layers.support.rasterFunctions.ArithmeticFunctionArguments")], a7);
var i3 = a7;

// node_modules/@arcgis/core/layers/support/rasterFunctions/BaseRasterFunction.js
var a8 = /* @__PURE__ */ new Set(["slope", "aspect", "curvature", "hillshade", "shadedrelief", "statistics"]);
var u5 = class extends l {
  constructor() {
    super(...arguments), this.functionArguments = null, this.readingBufferSize = 0, this.id = -1, this.isNoopProcess = false, this.rawInputBandIds = [], this.rawSourceRasterInfos = null, this.isInputBandIdsSwizzled = false, this.swizzledBandSelection = [], this.isBranch = false, this.isRoot = false, this._bindingResult = null;
  }
  get supportsGPU() {
    return this._bindingResult.supportsGPU;
  }
  get flatWebGLFunctionChain() {
    const t6 = this.getWebGLProcessorDefinition();
    if (!t6) return null;
    const s11 = [t6], { parameters: e9 } = t6;
    let r12 = e9.rasters || e9.raster && [e9.raster];
    for (; r12?.length; ) {
      s11.unshift(...r12);
      const t7 = [];
      for (let s12 = 0; s12 < r12.length; s12++) {
        const { parameters: e10 } = r12[s12], i28 = e10.rasters || e10.raster && [e10.raster];
        i28?.length && t7.push(...i28);
      }
      r12 = t7;
    }
    for (let a30 = s11.length - 1; a30 >= 0; a30--) s11[a30].isNoopProcess && s11.splice(a30, 1);
    let i27 = false;
    for (let a30 = 0; a30 < s11.length; a30++) {
      const t7 = s11[a30];
      t7.id = s11.length - a30 - 1;
      const { rasters: e10 } = t7.parameters;
      i27 = i27 || null != e10 && e10.length > 1;
    }
    const n17 = s11.some(({ name: t7 }) => a8.has(t7.toLowerCase())), { rawSourceRasterInfos: o9 } = this;
    return { functions: s11, hasBranches: i27, hasFocalFunction: n17, isSourceSingleBand: 1 === o9?.[0]?.bandCount };
  }
  bind(t6, s11 = false, e9 = -1) {
    this.id = e9 + 1;
    const r12 = this._getRasterValues();
    let i27 = true;
    for (let n17 = 0; n17 < r12.length; n17++) {
      const e10 = r12[n17];
      if (null != e10 && this._isRasterFunctionValue(e10)) {
        const r13 = e10.bind(t6, s11, this.id + n17);
        if (!r13.success) return this._bindingResult = r13, r13;
        i27 = i27 && r13.supportsGPU;
      }
    }
    if (!this.rasterInfo || s11) {
      if (this.sourceRasterInfos = this._getSourceRasterInfos(t6), this._bindingResult = this._bindSourceRasters(), i27 &&= this._bindingResult.supportsGPU, this._bindingResult.success && (this._patchRasterInfo(), i27 && this.isRoot)) {
        this.processInputBandIds();
        this.swizzleInputBandIds(this.rawInputBandIds) || (i27 = this.rawInputBandIds.length <= 3);
      }
      return this._bindingResult.supportsGPU = i27, this._bindingResult;
    }
    return this._bindingResult = { success: true, supportsGPU: true }, this._bindingResult;
  }
  process(t6) {
    const s11 = this._getRasterValues(), e9 = 0 === s11.length ? t6.pixelBlocks ?? t6.primaryPixelBlocks : s11.map((s12) => this._readRasterValue(s12, t6));
    return this._processPixels({ ...t6, pixelBlocks: e9 });
  }
  processInputBandIds() {
    const t6 = this._getRasterValues().filter(this._isRasterFunctionValue);
    if (t6.length > 1) {
      const s12 = t6.map((t7) => t7.processInputBandIds());
      return this.rawInputBandIds = [...new Set(s12.flat())], this.rawInputBandIds;
    }
    const s11 = t6[0];
    if (s11) return this.rawInputBandIds = s11.processInputBandIds(), this.rawInputBandIds;
    const { bandCount: e9 } = this.sourceRasterInfos[0], r12 = Array.from({ length: e9 }, (t7, s12) => s12);
    return this.rawInputBandIds = this._getInputBandIds(r12), this.rawInputBandIds;
  }
  swizzleInputBandIds(t6) {
    const s11 = this._getRasterValues().filter(this._isRasterFunctionValue);
    let e9 = true;
    for (const r12 of s11) e9 = r12.swizzleInputBandIds(t6) && e9;
    return !!e9 && this._swizzleBandIds(t6);
  }
  getPrimaryRasters() {
    const t6 = [], s11 = [];
    return this._getPrimaryRasters(this, t6, s11), { rasters: t6, rasterIds: s11 };
  }
  getWebGLProcessorDefinition() {
    const t6 = this._getWebGLParameters(), { raster: s11, rasters: e9 } = this.functionArguments;
    return e9 && Array.isArray(e9) && e9.length ? (t6.rasters = e9.map((t7) => this._isRasterFunctionValue(t7) ? t7.getWebGLProcessorDefinition() : "number" == typeof t7 ? { name: "Constant", parameters: { value: t7 }, pixelType: "f32", id: -1, isNoopProcess: false } : { name: "Identity", parameters: { value: t7 }, pixelType: "f32", id: -1, isNoopProcess: false }), t6.rasters.some((t7) => null != t7) || (t6.rasters = null)) : this._isRasterFunctionValue(s11) && (t6.raster = s11.getWebGLProcessorDefinition()), { name: this.functionName, parameters: t6, pixelType: this.outputPixelType, id: this.id, isNoopProcess: this.isNoopProcess };
  }
  getClippingGeometries() {
    const t6 = [];
    "Clip" === this.functionName && t6.push(this.functionArguments);
    const { raster: s11, rasters: e9 } = this.functionArguments;
    if (e9 && Array.isArray(e9) && e9.length) e9.forEach((s12) => {
      if (this._isRasterFunctionValue(s12)) {
        const e10 = s12.getClippingGeometries();
        t6.push(...e10);
      }
    });
    else if (this._isRasterFunctionValue(s11)) {
      const e10 = s11.getClippingGeometries();
      t6.push(...e10);
    }
    return t6;
  }
  _getOutputPixelType(t6) {
    return "unknown" === this.outputPixelType ? t6 : this.outputPixelType ?? t6;
  }
  _getWebGLParameters() {
    return {};
  }
  _getInputBandIds(t6) {
    return t6;
  }
  _swizzleBandIds(t6) {
    return true;
  }
  _isInputRasterPrimaryOrConstant() {
    return !this._getRasterValues().some((t6) => t6 && "object" == typeof t6 && "rasterFunction" in t6 && t6.rasterFunction);
  }
  _removeStatsHistColormapVAT(t6) {
    t6.statistics = null, t6.histograms = null, t6.colormap = null, t6.attributeTable = null, t6.multidimensionalInfo?.variables.forEach((t7) => {
      t7.statistics = void 0, t7.histograms = void 0;
    });
  }
  _getRasterValues() {
    const { rasterArgumentNames: t6 } = this;
    return "rasters" === t6[0] ? this.functionArguments.rasters ?? [] : t6.flatMap((t7) => this.functionArguments[t7]);
  }
  _getSourceRasterInfos(t6) {
    const s11 = this._getRasterValues(), { rasterInfos: e9, rasterIds: r12 } = t6;
    if (0 === s11.length) return e9;
    const i27 = s11.map((t7) => t7 && "object" == typeof t7 && "bind" in t7 && t7.rasterInfo ? t7.rasterInfo : "string" == typeof t7 && r12.includes(t7) ? e9[r12.indexOf(t7)] : "number" != typeof t7 ? e9[0] : void 0), n17 = i27.find((t7) => t7) ?? e9[0];
    return i27.forEach((t7, s12) => {
      void 0 === t7 && (i27[s12] = n17);
    }), i27;
  }
  _getPrimaryRasterId(t6) {
    return t6?.rasterId;
  }
  _getPrimaryRasters(t6, s11 = [], e9 = []) {
    for (let r12 = 0; r12 < t6.sourceRasters.length; r12++) {
      const i27 = t6.sourceRasters[r12];
      if ("number" != typeof i27) if ("bind" in i27) this._getPrimaryRasters(i27, s11, e9);
      else {
        const t7 = i27, r13 = this._getPrimaryRasterId(t7);
        if (null == r13) continue;
        e9.includes(r13) || (this.mainPrimaryRasterId === r13 ? (s11.unshift(t7), e9.unshift(r13)) : (s11.push(t7), e9.push(r13)));
      }
    }
  }
  _isRasterFunctionValue(t6) {
    return null != t6 && "object" == typeof t6 && "getWebGLProcessorDefinition" in t6;
  }
  _readRasterValue(t6, s11) {
    const { primaryPixelBlocks: e9 } = s11;
    if (null == t6 || "$$" === t6) {
      const t7 = e9[0];
      return null == t7 ? null : t7.clone();
    }
    if ("string" == typeof t6) {
      const r12 = s11.primaryRasterIds.indexOf(t6);
      return -1 === r12 ? null : e9[r12];
    }
    if ("number" == typeof t6) {
      const s12 = e9[0];
      if (null == s12) return null;
      const { width: r12, height: i27, pixelType: o9 } = s12, a30 = new Float32Array(r12 * i27);
      a30.fill(t6);
      const u22 = this.sourceRasterInfos[0].bandCount, p19 = new Array(u22).fill(a30);
      return new c2({ width: r12, height: i27, pixelType: o9, pixels: p19 });
    }
    return t6.process(s11);
  }
  _patchRasterInfo() {
    const { rasterInfo: t6 } = this;
    if (!t6?.keyProperties) return;
    const { bandCount: s11, keyProperties: e9, statistics: r12, histograms: i27 } = t6, n17 = e9.BandProperties;
    n17 && n17.length !== s11 && (t6.keyProperties = { ...e9, BandProperties: void 0 }), r12 && r12.length !== s11 && (t6.statistics = r12.length > s11 ? r12.slice(0, s11) : null), i27 && i27.length !== s11 && (t6.histograms = i27.length > s11 ? i27.slice(0, s11) : null), e9.BAND_COUNT && Number(e9.BAND_COUNT) !== s11 && (t6.keyProperties = { ...e9, BAND_COUNT: "string" == typeof e9.BAND_COUNT ? String(s11) : s11 });
  }
};
r([m({ json: { write: true } })], u5.prototype, "functionName", void 0), r([m({ json: { write: true } })], u5.prototype, "functionArguments", void 0), r([m()], u5.prototype, "rasterArgumentNames", void 0), r([m({ json: { write: true } }), s2((t6) => t6?.toLowerCase())], u5.prototype, "outputPixelType", void 0), r([m({ json: { write: true } })], u5.prototype, "mainPrimaryRasterId", void 0), r([m()], u5.prototype, "sourceRasters", void 0), r([m({ type: [m4], json: { write: true } })], u5.prototype, "sourceRasterInfos", void 0), r([m({ json: { write: true } })], u5.prototype, "rasterInfo", void 0), r([m({ json: { write: true } })], u5.prototype, "readingBufferSize", void 0), r([m({ json: { write: true } })], u5.prototype, "id", void 0), r([m()], u5.prototype, "isNoopProcess", void 0), r([m()], u5.prototype, "supportsGPU", null), r([m()], u5.prototype, "rawInputBandIds", void 0), r([m()], u5.prototype, "rawSourceRasterInfos", void 0), r([m()], u5.prototype, "isInputBandIdsSwizzled", void 0), r([m()], u5.prototype, "swizzledBandSelection", void 0), r([m()], u5.prototype, "isBranch", void 0), r([m()], u5.prototype, "isRoot", void 0), r([m({ readOnly: true })], u5.prototype, "flatWebGLFunctionChain", null), r([m()], u5.prototype, "_bindingResult", void 0), u5 = r([a2("esri.layers.support.rasterFunctions.BaseRasterFunction")], u5);
var p3 = u5;

// node_modules/@arcgis/core/layers/support/rasterFunctionConstants.js
var D2 = { userDefined: -1, lineDetectionHorizontal: 0, lineDetectionVertical: 1, lineDetectionLeftDiagonal: 2, lineDetectionRightDiagonal: 3, gradientNorth: 4, gradientWest: 5, gradientEast: 6, gradientSouth: 7, gradientNorthEast: 8, gradientNorthWest: 9, smoothArithmeticMean: 10, smoothing3x3: 11, smoothing5x5: 12, sharpening3x3: 13, sharpening5x5: 14, laplacian3x3: 15, laplacian5x5: 16, sobelHorizontal: 17, sobelVertical: 18, sharpen: 19, sharpen2: 20, pointSpread: 21, none: 255 };
var d4 = { plus: 1, minus: 2, times: 3, sqrt: 4, power: 5, abs: 10, divide: 23, exp: 25, exp10: 26, exp2: 27, int: 30, float: 32, ln: 35, log10: 36, log2: 37, mod: 44, negate: 45, roundDown: 48, roundUp: 49, square: 53, floatDivide: 64, floorDivide: 65 };
var s3 = { bitwiseAnd: 11, bitwiseLeftShift: 12, bitwiseNot: 13, bitwiseOr: 14, bitwiseRightShift: 15, bitwiseXOr: 16, booleanAnd: 17, booleanNot: 18, booleanOr: 19, booleanXOr: 20, equalTo: 24, greaterThan: 28, greaterThanEqual: 29, lessThan: 33, lessThanEqual: 34, isNull: 31, notEqual: 46 };
var p4 = { acos: 6, asin: 7, atan: 8, atanh: 9, cos: 21, cosh: 22, sin: 51, sinh: 52, tan: 56, tanh: 57, acosh: 59, asinh: 60, atan2: 61 };
var c5 = { majority: 38, max: 39, mean: 40, med: 41, min: 42, minority: 43, range: 47, stddev: 54, sum: 55, variety: 58, majorityIgnoreNoData: 66, maxIgnoreNoData: 67, meanIgnoreNoData: 68, medIgnoreNoData: 69, minIgnoreNoData: 70, minorityIgnoreNoData: 71, rangeIgnoreNoData: 72, stddevIgnoreNoData: 73, sumIgnoreNoData: 74, varietyIgnoreNoData: 75 };
var B2 = { setNull: 50, conditional: 78 };
var m6 = { ...d4, ...s3, ...p4, ...c5, ...B2 };

// node_modules/@arcgis/core/layers/support/rasterFunctions/localUtils.js
var a9 = /* @__PURE__ */ new Map([[p4.acos, { domain: [0, Math.PI], isInteger: false }], [p4.asin, { domain: [-Math.PI / 2, Math.PI / 2], isInteger: false }], [p4.atan, { domain: [-Math.PI / 2, Math.PI / 2], isInteger: false }], [p4.cos, { domain: [-1, 1], isInteger: false }], [p4.sin, { domain: [-1, 1], isInteger: false }], [s3.booleanAnd, { domain: [0, 1], isInteger: true }], [s3.booleanNot, { domain: [0, 1], isInteger: true }], [s3.booleanOr, { domain: [0, 1], isInteger: true }], [s3.booleanXOr, { domain: [0, 1], isInteger: true }], [s3.equalTo, { domain: [0, 1], isInteger: true }], [s3.notEqual, { domain: [0, 1], isInteger: true }], [s3.greaterThan, { domain: [0, 1], isInteger: true }], [s3.greaterThanEqual, { domain: [0, 1], isInteger: true }], [s3.lessThan, { domain: [0, 1], isInteger: true }], [s3.lessThanEqual, { domain: [0, 1], isInteger: true }], [s3.isNull, { domain: [0, 1], isInteger: true }]]);
function l7(t6) {
  return a9.get(t6);
}
var c6 = [0, 2, 2, 2, 1, 2, 1, 1, 1, 1, 1, 2, 2, 1, 2, 2, 2, 2, 1, 2, 2, 1, 1, 2, 2, 1, 1, 1, 2, 2, 1, 1, 1, 2, 2, 1, 1, 1, 999, 999, 999, 999, 999, 999, 2, 1, 2, 999, 1, 1, 2, 1, 1, 1, 999, 999, 1, 1, 999, 1, 1, 2, 999, 999, 2, 2, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 3, 999, 3];
function f4(t6, e9 = false) {
  const n17 = t6.map((t7) => t7.mask), r12 = n17.filter((t7) => null != t7), o9 = t6[0].pixels[0].length;
  if (0 === r12.length || e9 && r12.length !== n17.length) return new Uint8Array(o9).fill(255);
  const s11 = r12[0], a30 = new Uint8Array(s11);
  if (1 === r12.length) return a30;
  if (!e9) {
    for (let t7 = 1; t7 < r12.length; t7++) {
      const e10 = r12[t7];
      for (let t8 = 0; t8 < a30.length; t8++) a30[t8] && (a30[t8] = e10[t8] ? 255 : 0);
    }
    return a30;
  }
  for (let l22 = 1; l22 < r12.length; l22++) {
    const t7 = r12[l22];
    for (let e10 = 0; e10 < a30.length; e10++) 0 === a30[e10] && (a30[e10] = t7[e10] ? 255 : 0);
  }
  return a30;
}
function i4(e9, n17, r12) {
  const [o9, s11] = e9, a30 = o9.length, l22 = c2.createEmptyBand(r12, a30);
  for (let t6 = 0; t6 < a30; t6++) n17 && !n17[t6] || (l22[t6] = o9[t6] + s11[t6]);
  return l22;
}
function u6(e9, n17, r12) {
  const [o9] = e9, s11 = o9.length, a30 = c2.createEmptyBand("f32", s11);
  return a30.set(o9), a30;
}
function h3(e9, n17, r12) {
  const [o9] = e9, s11 = o9.length, a30 = c2.createEmptyBand(r12, s11);
  for (let t6 = 0; t6 < s11; t6++) n17 && !n17[t6] || (a30[t6] = o9[t6] * o9[t6]);
  return a30;
}
function g(e9, n17, r12) {
  const [o9, s11] = e9, a30 = o9.length, l22 = c2.createEmptyBand(r12, a30);
  for (let t6 = 0; t6 < a30; t6++) n17 && !n17[t6] || (l22[t6] = o9[t6] - s11[t6]);
  return l22;
}
function p5(e9, n17, r12) {
  const [o9, s11] = e9, a30 = o9.length, l22 = c2.createEmptyBand(r12, a30);
  for (let t6 = 0; t6 < a30; t6++) n17 && !n17[t6] || (l22[t6] = o9[t6] * s11[t6]);
  return l22;
}
function m7(e9, n17, r12) {
  const [o9] = e9, s11 = o9.length, a30 = c2.createEmptyBand(r12, s11);
  for (let t6 = 0; t6 < s11; t6++) n17 && !n17[t6] || (a30[t6] = Math.sign(o9[t6]) * Math.floor(Math.abs(o9[t6])));
  return a30;
}
function d5(e9, n17, r12) {
  const [o9, s11] = e9, a30 = o9.length, l22 = c2.createEmptyBand(r12, a30);
  for (let t6 = 0; t6 < a30; t6++) n17 && !n17[t6] || (l22[t6] = o9[t6] / s11[t6]);
  return l22;
}
function y2(t6, e9, n17) {
  return d5(t6, e9, "f32");
}
function E(e9, n17, r12) {
  const [o9, s11] = e9, a30 = o9.length, l22 = c2.createEmptyBand(r12, a30);
  for (let t6 = 0; t6 < a30; t6++) n17 && !n17[t6] || (l22[t6] = Math.floor(o9[t6] / s11[t6]));
  return l22;
}
function M3(e9, r12, o9, s11) {
  const a30 = e9[0], l22 = a30.length, c36 = c2.createEmptyBand(o9, l22);
  if (s11 === p4.atanh) {
    for (let t6 = 0; t6 < l22; t6++) if (r12[t6]) {
      const e10 = a30[t6];
      Math.abs(e10) >= 1 ? r12[t6] = 0 : c36[t6] = Math.atanh(e10);
    }
    return c36;
  }
  const f8 = s11 === p4.asin ? Math.asin : Math.acos;
  for (let t6 = 0; t6 < l22; t6++) if (r12[t6]) {
    const e10 = a30[t6];
    Math.abs(e10) > 1 ? r12[t6] = 0 : c36[t6] = f8(e10);
  }
  return c36;
}
function B3(e9, n17, r12, o9) {
  const [s11] = e9, a30 = s11.length, l22 = c2.createEmptyBand(r12, a30);
  for (let t6 = 0; t6 < a30; t6++) n17 && !n17[t6] || (l22[t6] = o9(s11[t6]));
  return l22;
}
function I(e9, n17, r12, o9) {
  const [s11, a30] = e9, l22 = s11.length, c36 = c2.createEmptyBand(r12, l22);
  for (let t6 = 0; t6 < l22; t6++) n17 && !n17[t6] || (c36[t6] = o9(s11[t6], a30[t6]));
  return c36;
}
function w3(e9, n17, r12) {
  const [o9, s11] = e9, a30 = o9.length, l22 = c2.createEmptyBand(r12, a30);
  for (let t6 = 0; t6 < a30; t6++) n17 && !n17[t6] || (l22[t6] = o9[t6] & s11[t6]);
  return l22;
}
function x2(e9, n17, r12) {
  const [o9, s11] = e9, a30 = o9.length, l22 = c2.createEmptyBand(r12, a30);
  for (let t6 = 0; t6 < a30; t6++) n17 && !n17[t6] || (l22[t6] = o9[t6] << s11[t6]);
  return l22;
}
function b(e9, n17, r12) {
  const [o9] = e9, s11 = o9.length, a30 = c2.createEmptyBand(r12, s11);
  for (let t6 = 0; t6 < s11; t6++) n17 && !n17[t6] || (a30[t6] = ~o9[t6]);
  return a30;
}
function A(e9, n17, r12) {
  const [o9, s11] = e9, a30 = o9.length, l22 = c2.createEmptyBand(r12, a30);
  for (let t6 = 0; t6 < a30; t6++) n17 && !n17[t6] || (l22[t6] = o9[t6] | s11[t6]);
  return l22;
}
function P(e9, n17, r12) {
  const [o9, s11] = e9, a30 = o9.length, l22 = c2.createEmptyBand(r12, a30);
  for (let t6 = 0; t6 < a30; t6++) n17 && !n17[t6] || (l22[t6] = o9[t6] >> s11[t6]);
  return l22;
}
function T(e9, n17, r12) {
  const [o9, s11] = e9, a30 = o9.length, l22 = c2.createEmptyBand(r12, a30);
  for (let t6 = 0; t6 < a30; t6++) n17 && !n17[t6] || (l22[t6] = o9[t6] ^ s11[t6]);
  return l22;
}
function k2(e9, n17, r12) {
  const [o9, s11] = e9, a30 = o9.length, l22 = c2.createEmptyBand(r12, a30);
  for (let t6 = 0; t6 < a30; t6++) n17 && !n17[t6] || (l22[t6] = o9[t6] && s11[t6] ? 1 : 0);
  return l22;
}
function q2(e9, n17, r12) {
  const [o9] = e9, s11 = o9.length, a30 = c2.createEmptyBand(r12, s11);
  for (let t6 = 0; t6 < s11; t6++) n17 && !n17[t6] || (a30[t6] = o9[t6] ? 0 : 1);
  return a30;
}
function N(e9, n17, r12) {
  const [o9, s11] = e9, a30 = o9.length, l22 = c2.createEmptyBand(r12, a30);
  for (let t6 = 0; t6 < a30; t6++) n17 && !n17[t6] || (l22[t6] = o9[t6] || s11[t6] ? 1 : 0);
  return l22;
}
function U2(e9, n17, r12) {
  const [o9, s11] = e9, a30 = o9.length, l22 = c2.createEmptyBand(r12, a30);
  for (let t6 = 0; t6 < a30; t6++) n17 && !n17[t6] || (l22[t6] = (o9[t6] ? 1 : 0) ^ (s11[t6] ? 1 : 0));
  return l22;
}
function F(e9, n17, r12) {
  const [o9, s11] = e9, a30 = o9.length, l22 = c2.createEmptyBand(r12, a30);
  for (let t6 = 0; t6 < a30; t6++) n17 && !n17[t6] || (l22[t6] = o9[t6] === s11[t6] ? 1 : 0);
  return l22;
}
function j(e9, n17, r12, o9) {
  const [s11] = e9, a30 = s11.length, l22 = c2.createEmptyBand(r12, a30), c36 = o9 === Math.E;
  for (let t6 = 0; t6 < a30; t6++) n17 && !n17[t6] || (l22[t6] = c36 ? Math.exp(s11[t6]) : o9 ** s11[t6]);
  return l22;
}
function z(t6, e9, n17) {
  return j(t6, e9, n17, 10);
}
function O(t6, e9, n17) {
  return j(t6, e9, n17, 2);
}
function C2(t6, e9, n17) {
  return j(t6, e9, n17, Math.E);
}
function R(e9, n17, r12, o9) {
  const [s11] = e9, a30 = s11.length, l22 = c2.createEmptyBand(r12, a30);
  for (let t6 = 0; t6 < a30; t6++) n17 && !n17[t6] || (s11[t6] <= 0 ? n17[t6] = 0 : l22[t6] = o9(s11[t6]));
  return l22;
}
function S(t6, e9, n17) {
  return R(t6, e9, n17, Math.log10);
}
function X(t6, e9, n17) {
  return R(t6, e9, n17, Math.log2);
}
function v(t6, e9, n17) {
  return R(t6, e9, n17, Math.log);
}
function D3(e9, n17, r12) {
  const [o9, s11] = e9, a30 = o9.length, l22 = c2.createEmptyBand(r12, a30);
  for (let t6 = 0; t6 < a30; t6++) n17 && !n17[t6] || (l22[t6] = o9[t6] > s11[t6] ? 1 : 0);
  return l22;
}
function G(e9, n17, r12) {
  const [o9, s11] = e9, a30 = o9.length, l22 = c2.createEmptyBand(r12, a30);
  for (let t6 = 0; t6 < a30; t6++) n17 && !n17[t6] || (l22[t6] = o9[t6] >= s11[t6] ? 1 : 0);
  return l22;
}
function H(e9, n17, r12) {
  const [o9, s11] = e9, a30 = o9.length, l22 = c2.createEmptyBand(r12, a30);
  for (let t6 = 0; t6 < a30; t6++) n17 && !n17[t6] || (l22[t6] = o9[t6] < s11[t6] ? 1 : 0);
  return l22;
}
function J(e9, n17, r12) {
  const [o9, s11] = e9, a30 = o9.length, l22 = c2.createEmptyBand(r12, a30);
  for (let t6 = 0; t6 < a30; t6++) n17 && !n17[t6] || (l22[t6] = o9[t6] <= s11[t6] ? 1 : 0);
  return l22;
}
function K(e9, n17, r12) {
  const [o9] = e9, s11 = o9.length, a30 = c2.createEmptyBand(r12, s11);
  if (!n17) return a30;
  for (let t6 = 0; t6 < s11; t6++) a30[t6] = n17[t6] ? 0 : 1;
  return a30;
}
function L(e9, n17, r12) {
  const [o9, s11] = e9, a30 = o9.length, l22 = c2.createEmptyBand(r12, a30);
  for (let t6 = 0; t6 < a30; t6++) n17 && !n17[t6] || (l22[t6] = o9[t6] % s11[t6]);
  return l22;
}
function Q2(e9, n17, r12) {
  const [o9] = e9, s11 = o9.length, a30 = c2.createEmptyBand(r12, s11);
  for (let t6 = 0; t6 < s11; t6++) n17 && !n17[t6] || (a30[t6] = -o9[t6]);
  return a30;
}
function V2(e9, n17, r12) {
  const [o9, s11] = e9, a30 = o9.length, l22 = c2.createEmptyBand(r12, a30);
  for (let t6 = 0; t6 < a30; t6++) n17 && !n17[t6] || (l22[t6] = o9[t6] === s11[t6] ? 0 : 1);
  return l22;
}
function W(e9, n17, r12) {
  const [o9, s11] = e9, a30 = o9.length, l22 = c2.createEmptyBand(r12, a30), c36 = new Uint8Array(a30);
  for (let t6 = 0; t6 < a30; t6++) null != n17 && !n17[t6] || 0 !== o9[t6] || (l22[t6] = s11[t6], c36[t6] = 255);
  return { band: l22, mask: c36 };
}
function Y(e9, n17, r12) {
  const [o9, s11, a30] = e9, l22 = o9.length, c36 = c2.createEmptyBand(r12, l22);
  for (let t6 = 0; t6 < l22; t6++) n17 && !n17[t6] || (c36[t6] = o9[t6] ? s11[t6] : a30[t6]);
  return c36;
}
function Z(e9, n17, r12) {
  const o9 = e9.length;
  if (o9 < 2) return e9[0];
  const [s11] = e9, a30 = s11.length, l22 = c2.createEmptyBand(r12, a30);
  for (let t6 = 0; t6 < a30; t6++) if (!n17 || n17[t6]) {
    let n18 = s11[t6];
    for (let r13 = 1; r13 < o9; r13++) {
      const o10 = e9[r13][t6];
      n18 < o10 && (n18 = o10);
    }
    l22[t6] = n18;
  }
  return l22;
}
function $(e9, n17, r12) {
  const o9 = e9.length;
  if (o9 < 2) return e9[0];
  const [s11] = e9, a30 = s11.length, l22 = c2.createEmptyBand(r12, a30);
  for (let t6 = 0; t6 < a30; t6++) if (!n17 || n17[t6]) {
    let n18 = s11[t6];
    for (let r13 = 1; r13 < o9; r13++) {
      const o10 = e9[r13][t6];
      n18 > o10 && (n18 = o10);
    }
    l22[t6] = n18;
  }
  return l22;
}
function _(e9, n17, r12) {
  const o9 = e9.length;
  if (o9 < 2) return e9[0];
  const [s11] = e9, a30 = s11.length, l22 = c2.createEmptyBand(r12, a30);
  for (let t6 = 0; t6 < a30; t6++) if (!n17 || n17[t6]) {
    let n18 = s11[t6], r13 = n18;
    for (let s12 = 1; s12 < o9; s12++) {
      const o10 = e9[s12][t6];
      r13 < o10 ? r13 = o10 : n18 > o10 && (n18 = o10);
    }
    l22[t6] = r13 - n18;
  }
  return l22;
}
function tt(e9, n17, r12) {
  const o9 = e9.length;
  if (o9 < 2) return e9[0];
  const [s11] = e9, a30 = s11.length, l22 = c2.createEmptyBand(r12, a30);
  for (let t6 = 0; t6 < a30; t6++) if (!n17 || n17[t6]) {
    let n18 = 0;
    for (let r13 = 0; r13 < o9; r13++) n18 += e9[r13][t6];
    l22[t6] = n18 / o9;
  }
  return l22;
}
function et(e9, n17, r12) {
  const o9 = e9.length;
  if (o9 < 2) return e9[0];
  const [s11] = e9, a30 = s11.length, l22 = c2.createEmptyBand(r12, a30);
  for (let t6 = 0; t6 < a30; t6++) if (!n17 || n17[t6]) for (let n18 = 0; n18 < o9; n18++) {
    const r13 = e9[n18];
    l22[t6] += r13[t6];
  }
  return l22;
}
function nt(e9, n17, r12) {
  const o9 = e9.length;
  if (o9 < 2) return e9[0];
  const [s11] = e9, a30 = s11.length, l22 = c2.createEmptyBand(r12, a30);
  for (let t6 = 0; t6 < a30; t6++) if (!n17 || n17[t6]) {
    const n18 = new Float32Array(o9);
    let r13 = 0;
    for (let a31 = 0; a31 < o9; a31++) {
      const o10 = e9[a31];
      r13 += o10[t6], n18[a31] = o10[t6];
    }
    r13 /= o9;
    let s12 = 0;
    for (let t7 = 0; t7 < o9; t7++) s12 += (n18[t7] - r13) ** 2;
    l22[t6] = Math.sqrt(s12 / o9);
  }
  return l22;
}
function rt(e9, n17, r12) {
  const o9 = e9.length;
  if (o9 < 2) return e9[0];
  const s11 = Math.floor(o9 / 2), [a30] = e9, l22 = a30.length, c36 = c2.createEmptyBand(r12, l22), f8 = new Float32Array(o9), i27 = o9 % 2 == 1;
  for (let t6 = 0; t6 < l22; t6++) if (!n17 || n17[t6]) {
    for (let n18 = 0; n18 < o9; n18++) f8[n18] = e9[n18][t6];
    f8.sort(), c36[t6] = i27 ? f8[s11] : (f8[s11] + f8[s11 - 1]) / 2;
  }
  return c36;
}
function ot(e9, n17, r12) {
  const [o9, s11] = e9;
  if (null == s11) return o9;
  const a30 = o9.length, l22 = c2.createEmptyBand(r12, a30);
  for (let t6 = 0; t6 < a30; t6++) n17 && !n17[t6] || (l22[t6] = o9[t6] < s11[t6] ? o9[t6] : s11[t6]);
  return l22;
}
function st(e9, n17, r12) {
  const o9 = e9.length;
  if (o9 <= 2) return ot(e9, n17, r12);
  const s11 = e9[0].length, a30 = c2.createEmptyBand(r12, s11), l22 = /* @__PURE__ */ new Map();
  for (let t6 = 0; t6 < s11; t6++) if (!n17 || n17[t6]) {
    l22.clear();
    for (let a31 = 0; a31 < o9; a31++) {
      const n19 = e9[a31][t6];
      l22.set(n19, l22.has(n19) ? l22.get(n19) + 1 : 1);
    }
    let n18 = 0, r13 = 0;
    const s12 = [];
    for (const t7 of l22.keys()) n18 = l22.get(t7), n18 > r13 ? (r13 = n18, s12.length = 0, s12.push(t7)) : n18 === r13 && s12.push(t7);
    s12.length > 1 && s12.sort((t7, e10) => t7 - e10), a30[t6] = s12[0];
  }
  return a30;
}
function at(e9, n17, r12) {
  const o9 = e9.length;
  if (o9 <= 2) return ot(e9, n17, r12);
  const s11 = e9[0].length, a30 = c2.createEmptyBand(r12, s11), l22 = /* @__PURE__ */ new Map();
  for (let t6 = 0; t6 < s11; t6++) if (!n17 || n17[t6]) {
    l22.clear();
    for (let a31 = 0; a31 < o9; a31++) {
      const n19 = e9[a31][t6];
      l22.set(n19, l22.has(n19) ? l22.get(n19) + 1 : 1);
    }
    let n18 = 0, r13 = e9.length;
    const s12 = [];
    for (const t7 of l22.keys()) n18 = l22.get(t7), n18 < r13 ? (r13 = n18, s12.length = 0, s12.push(t7)) : n18 === r13 && s12.push(t7);
    s12.length > 1 && s12.sort((t7, e10) => t7 - e10), a30[t6] = s12[0];
  }
  return a30;
}
function lt(e9, n17, r12) {
  const o9 = e9.length;
  if (o9 < 2) return e9[0];
  const [s11] = e9, a30 = s11.length, l22 = c2.createEmptyBand(r12, a30), c36 = /* @__PURE__ */ new Set();
  for (let t6 = 0; t6 < a30; t6++) if (!n17 || n17[t6]) {
    let n18;
    c36.clear();
    for (let r13 = 0; r13 < o9; r13++) n18 = e9[r13][t6], c36.add(n18);
    l22[t6] = c36.size;
  }
  return l22;
}
var ct = /* @__PURE__ */ new Map();
var ft = /* @__PURE__ */ new Map();
var it = /* @__PURE__ */ new Map();
var ut = /* @__PURE__ */ new Map();
function ht() {
  ct.size || (ct.set(4, Math.sqrt), ct.set(6, Math.acos), ct.set(7, Math.asin), ct.set(8, Math.atan), ct.set(9, Math.atanh), ct.set(10, Math.abs), ct.set(21, Math.cos), ct.set(22, Math.cosh), ct.set(48, Math.floor), ct.set(49, Math.ceil), ct.set(51, Math.sin), ct.set(52, Math.sinh), ct.set(56, Math.tan), ct.set(57, Math.tanh), ct.set(59, Math.acosh), ct.set(60, Math.asinh), ct.set(65, Math.floor), ft.set(5, Math.pow), ft.set(61, Math.atan2), it.set(1, i4), it.set(2, g), it.set(3, p5), it.set(11, w3), it.set(12, x2), it.set(13, b), it.set(14, A), it.set(15, P), it.set(16, T), it.set(17, k2), it.set(18, q2), it.set(19, N), it.set(20, U2), it.set(23, d5), it.set(24, F), it.set(25, C2), it.set(26, z), it.set(27, O), it.set(28, D3), it.set(29, G), it.set(30, m7), it.set(31, K), it.set(32, u6), it.set(33, H), it.set(34, J), it.set(35, v), it.set(36, S), it.set(37, X), it.set(44, L), it.set(45, Q2), it.set(46, V2), it.set(53, h3), it.set(64, y2), it.set(65, E), it.set(76, Y), it.set(78, Y), ut.set(38, st), ut.set(39, Z), ut.set(40, tt), ut.set(41, rt), ut.set(42, $), ut.set(43, at), ut.set(47, _), ut.set(54, nt), ut.set(55, et), ut.set(58, lt), ut.set(66, st), ut.set(67, Z), ut.set(68, tt), ut.set(69, rt), ut.set(70, $), ut.set(71, at), ut.set(72, _), ut.set(73, nt), ut.set(74, et), ut.set(75, lt));
}
function gt(l22, c36, i27 = {}) {
  ht();
  let u22 = f4(l22, c36 >= 66 && c36 <= 75);
  const { outputPixelType: h7 = "f32" } = i27, g4 = !ut.has(c36) || i27.processAsMultiband, p19 = g4 ? l22[0].pixels.length : 1, m16 = [];
  for (let f8 = 0; f8 < p19; f8++) {
    const i28 = ut.has(c36) && !g4 ? l22.flatMap((t6) => t6.pixels) : l22.map((t6) => t6.pixels[f8]);
    let p20, d12 = true;
    if (c36 === B2.setNull) {
      const t6 = W(i28, u22, h7);
      p20 = t6.band, u22 = t6.mask, d12 = false;
    } else if (it.has(c36)) {
      p20 = it.get(c36)(i28, u22, "f64");
    } else if (ct.has(c36)) p20 = c36 === p4.asin || c36 === p4.acos || c36 === p4.atanh ? M3(i28, u22, "f64", c36) : B3(i28, u22, "f64", ct.get(c36));
    else if (ft.has(c36)) p20 = I(i28, u22, "f64", ft.get(c36));
    else if (ut.has(c36)) {
      p20 = ut.get(c36)(i28, u22, "f64");
    } else p20 = i28[0], d12 = false;
    if (d12 && c36 !== s3.isNull && !a9.has(c36)) {
      const e9 = c2.createEmptyBand(h7, p20.length);
      u22 || (u22 = new Uint8Array(p20.length).fill(255)), f2(p20, u22), c(p20, u22, h7, e9), p20 = e9;
    }
    m16.push(p20);
  }
  const d11 = l22[0];
  return new c2({ width: d11.width, height: d11.height, pixelType: h7, mask: c36 === s3.isNull ? null : u22, pixels: m16 });
}
function pt(t6, e9, n17) {
  return gt(t6, e9 = [null, 1, 2, 3, 23, 5, 44][e9] ?? 1, { outputPixelType: n17 });
}

// node_modules/@arcgis/core/layers/support/rasterFunctions/ArithmeticFunction.js
var p6 = class extends p3 {
  constructor() {
    super(...arguments), this.functionName = "Arithmetic", this.functionArguments = null, this.rasterArgumentNames = ["raster", "raster2"];
  }
  _bindSourceRasters() {
    const { operation: t6 } = this.functionArguments;
    if (t6 < 1 || t6 > 6) return { success: false, supportsGPU: false, error: "unsupported operation" };
    const e9 = this.sourceRasterInfos[0].clone();
    this.outputPixelType = this._getOutputPixelType(e9.pixelType), e9.pixelType = this.outputPixelType, this._removeStatsHistColormapVAT(e9), this.rasterInfo = e9;
    return { success: true, supportsGPU: e9.bandCount <= 3 };
  }
  _processPixels(t6) {
    const { pixelBlocks: e9 } = t6;
    return null == e9?.[0] || null == e9?.[1] ? null : pt(e9, this.functionArguments.operation, this.outputPixelType);
  }
  _getWebGLParameters() {
    const { operation: t6 } = this.functionArguments, e9 = ["", "plus", "minus", "times", "divide", "power", "mod"][t6], r12 = this.outputPixelType ?? "f32";
    let [i27, n17] = u(r12);
    const u22 = r4(r12);
    return u22 && (i27 -= 1e-4, n17 += 1e-4), { imageCount: 2, operationName: e9, domainRange: [i27, n17], isOutputRounded: u22 };
  }
};
r([m({ json: { write: true, name: "rasterFunction" } })], p6.prototype, "functionName", void 0), r([m({ type: i3, json: { write: true, name: "rasterFunctionArguments" } })], p6.prototype, "functionArguments", void 0), r([m()], p6.prototype, "rasterArgumentNames", void 0), p6 = r([a2("esri.layers.support.rasterFunctions.ArithmeticFunction")], p6);
var a10 = p6;

// node_modules/@arcgis/core/layers/support/rasterFunctions/AspectFunctionArguments.js
var t;
var e3 = t = class extends p2 {
  clone() {
    return new t({ raster: this.raster });
  }
};
e3 = t = r([a2("esri.layers.support.rasterFunctions.AspectFunctionArguments")], e3);
var c7 = e3;

// node_modules/@arcgis/core/layers/support/rasterFunctions/AspectFunction.js
var n2 = class extends p3 {
  constructor() {
    super(...arguments), this.functionName = "Aspect", this.functionArguments = null, this.rasterArgumentNames = ["raster"], this.isGCS = false;
  }
  _bindSourceRasters() {
    const t6 = this.sourceRasterInfos[0];
    this.isGCS = t6.spatialReference?.isGeographic ?? false, this.outputPixelType = this._getOutputPixelType("f32");
    const s11 = t6.clone();
    return s11.pixelType = this.outputPixelType, this._removeStatsHistColormapVAT(s11), s11.statistics = [{ min: -1, max: 360, avg: 180, stddev: 30 }], s11.bandCount = 1, this.rasterInfo = s11, { success: true, supportsGPU: true };
  }
  _processPixels(t6) {
    const s11 = t6.pixelBlocks?.[0];
    if (null == s11) return null;
    const { extent: e9, primaryPixelSizes: r12 } = t6, o9 = r12?.[0], n17 = o9 ?? (e9 ? { x: e9.width / s11.width, y: e9.height / s11.height } : { x: 1, y: 1 });
    return u4(s11, { resolution: n17 });
  }
};
r([m({ json: { write: true, name: "rasterFunction" } })], n2.prototype, "functionName", void 0), r([m({ type: c7, json: { write: true, name: "rasterFunctionArguments" } })], n2.prototype, "functionArguments", void 0), r([m()], n2.prototype, "rasterArgumentNames", void 0), r([m({ json: { write: true } })], n2.prototype, "isGCS", void 0), n2 = r([a2("esri.layers.support.rasterFunctions.AspectFunction")], n2);
var p7 = n2;

// node_modules/@arcgis/core/layers/support/rasterFunctions/customBandIndexUtils.js
var e4 = /* @__PURE__ */ new Set(["+", "-", "*", "/", "(", ")"]);
function t2(t6, r12) {
  (t6 = t6.replaceAll(" ", "")).startsWith("-") && (t6 = "0" + t6), t6.startsWith("+") && (t6 = t6.slice(1));
  const l22 = t6.split(""), o9 = [], s11 = [];
  let a30 = "";
  for (let i27 = 0; i27 < l22.length; i27++) {
    const t7 = l22[i27];
    e4.has(t7) ? (a30.length && s11.push(n3(a30, r12)), o9.push(t7), a30 = "") : a30 = a30.concat(t7);
  }
  return a30.length && s11.push(n3(a30, r12)), { ops: o9, nums: s11 };
}
function n3(e9, t6) {
  return e9.toLowerCase().startsWith("b") ? t6[parseInt(e9.slice(1), 10) - 1] : parseFloat(e9);
}
function r7(e9, t6, n17, r12) {
  if ("number" == typeof n17 && "number" == typeof r12) return n17 + r12;
  let l22, o9, s11;
  "number" == typeof n17 ? (s11 = r12, l22 = s11.length, o9 = new Float32Array(l22), o9.fill(n17)) : (l22 = n17.length, o9 = n17, r12.constructor === Number ? (s11 = new Float32Array(l22), s11.fill(r12)) : s11 = r12);
  const a30 = new Float32Array(l22);
  switch (t6) {
    case "+":
      for (let t7 = 0; t7 < l22; t7++) (null == e9 || e9[t7]) && (a30[t7] = o9[t7] + s11[t7]);
      break;
    case "-":
      for (let t7 = 0; t7 < l22; t7++) (null == e9 || e9[t7]) && (a30[t7] = o9[t7] - s11[t7]);
      break;
    case "*":
      for (let t7 = 0; t7 < l22; t7++) (null == e9 || e9[t7]) && (a30[t7] = o9[t7] * s11[t7]);
      break;
    case "/":
      for (let t7 = 0; t7 < l22; t7++) (null == e9 || e9[t7]) && s11[t7] && (a30[t7] = o9[t7] / s11[t7]);
      break;
    case "(":
    case ")":
      throw new Error("encountered error with custom band index equation");
  }
  return a30;
}
function l8(e9, t6) {
  e9.splice(t6, 1);
  let n17 = 0, r12 = 0;
  do {
    n17 = 0, r12 = 0;
    for (let t7 = 0; t7 < e9.length; t7++) if ("(" === e9[t7]) n17 = t7;
    else if (")" === e9[t7]) {
      r12 = t7;
      break;
    }
    r12 === n17 + 1 && e9.splice(n17, 2);
  } while (r12 === n17 + 1);
  return e9;
}
function o4(e9) {
  if (1 === e9.length) return { opIndex: 0, numIndex: 0 };
  let t6 = 0, n17 = 0;
  for (let s11 = 0; s11 < e9.length; s11++) if ("(" === e9[s11]) t6 = s11;
  else if (")" === e9[s11]) {
    n17 = s11;
    break;
  }
  const r12 = 0 === n17 ? e9 : e9.slice(t6 + 1, n17);
  let l22 = -1;
  for (let s11 = 0; s11 < r12.length; s11++) if ("*" === r12[s11] || "/" === r12[s11]) {
    l22 = s11;
    break;
  }
  if (l22 > -1) n17 > 0 && (l22 += t6 + 1);
  else {
    for (let e10 = 0; e10 < r12.length; e10++) if ("+" === r12[e10] || "-" === r12[e10]) {
      l22 = e10;
      break;
    }
    n17 > 0 && (l22 += t6 + 1);
  }
  let o9 = 0;
  for (let s11 = 0; s11 < l22; s11++) "(" === e9[s11] && o9++;
  return { opIndex: l22, numIndex: l22 - o9 };
}
function s4(e9, n17, s11) {
  let a30, { ops: i27, nums: f8 } = t2(s11, n17);
  if (0 === i27.length) {
    const e10 = 1 === f8.length ? f8[0] : n17[0];
    if (e10 instanceof Float32Array) return [e10];
    const t6 = new Float32Array(n17[0].length);
    return "number" == typeof e10 ? t6.fill(e10) : t6.set(e10), [t6];
  }
  for (; i27.length > 0; ) {
    const { numIndex: t6, opIndex: n18 } = o4(i27);
    if (a30 = r7(e9, i27[n18], f8[t6], f8[t6 + 1]), 1 === i27.length) break;
    i27 = l8(i27, n18), f8.splice(t6, 2, a30);
  }
  return [a30];
}

// node_modules/@arcgis/core/layers/support/rasterFunctions/bandIndexUtils.js
var i5 = new o2({ 0: "custom", 1: "ndvi", 2: "savi", 3: "tsavi", 4: "msavi", 5: "gemi", 6: "pvi", 7: "gvitm", 8: "sultan", 9: "vari", 10: "gndvi", 11: "sr", 12: "ndvi-re", 13: "sr-re", 14: "mtvi2", 15: "rtvi-core", 16: "ci-re", 17: "ci-g", 18: "ndwi", 19: "evi", 20: "iron-oxide", 21: "ferrous-minerals", 22: "clay-minerals", 23: "wndwi", 24: "bai", 25: "nbr", 26: "ndbi", 27: "ndmi", 28: "ndsi", 29: "mndwi" }, { useNumericKeys: true });
function s5(t6, i27) {
  if (!r5(t6)) return t6;
  const { equation: s11, method: l22 } = i27, c36 = i27.bandIndexes.map((t7) => t7 - 1), { pixels: U3, mask: q3 } = t6;
  let M5;
  switch (l22) {
    case "gndvi":
    case "nbr":
    case "ndbi":
    case "ndvi":
    case "ndvi-re":
    case "ndsi":
    case "ndmi":
    case "mndwi":
      M5 = u7(q3, U3[c36[0]], U3[c36[1]]);
      break;
    case "ndwi":
      M5 = u7(q3, U3[c36[1]], U3[c36[0]]);
      break;
    case "sr":
    case "sr-re":
    case "iron-oxide":
    case "ferrous-minerals":
    case "clay-minerals":
      M5 = f5(q3, U3[c36[0]], U3[c36[1]]);
      break;
    case "ci-g":
    case "ci-re":
      M5 = h4(q3, U3[c36[0]], U3[c36[1]]);
      break;
    case "savi":
      M5 = w4(q3, U3[c36[0]], U3[c36[1]], c36[2] + 1);
      break;
    case "tsavi":
      M5 = m8(q3, U3[c36[0]], U3[c36[1]], c36[2] + 1, c36[3] + 1, c36[4] + 1);
      break;
    case "msavi":
      M5 = d6(q3, U3[c36[0]], U3[c36[1]]);
      break;
    case "gemi":
      M5 = g2(q3, U3[c36[0]], U3[c36[1]]);
      break;
    case "pvi":
      M5 = y3(q3, U3[c36[0]], U3[c36[1]], c36[2] + 1, c36[3] + 1);
      break;
    case "gvitm":
      M5 = p8(q3, [U3[c36[0]], U3[c36[1]], U3[c36[2]], U3[c36[3]], U3[c36[4]], U3[c36[5]]]);
      break;
    case "sultan":
      M5 = b2(q3, [U3[c36[0]], U3[c36[1]], U3[c36[2]], U3[c36[3]], U3[c36[4]]]);
      break;
    case "vari":
      M5 = v2(q3, [U3[c36[0]], U3[c36[1]], U3[c36[2]]]);
      break;
    case "mtvi2":
      M5 = k3(q3, [U3[c36[0]], U3[c36[1]], U3[c36[2]]]);
      break;
    case "rtvi-core":
      M5 = A2(q3, [U3[c36[0]], U3[c36[1]], U3[c36[2]]]);
      break;
    case "evi":
      M5 = F2(q3, [U3[c36[0]], U3[c36[1]], U3[c36[2]]]);
      break;
    case "wndwi":
      M5 = x3(q3, [U3[c36[0]], U3[c36[1]], U3[c36[2]]], c36[3] ? c36[3] + 1 : 0.5);
      break;
    case "bai":
      M5 = j2(q3, U3[c36[0]], U3[c36[1]]);
      break;
    case "custom":
      M5 = s4(q3, U3, s11);
      break;
    default:
      return t6;
  }
  const { outputPixelType: B5 = "f32" } = i27, T3 = null != B5 && r4(B5);
  let I3;
  q3 ? (I3 = new Uint8Array(t6.width * t6.height), I3.set(q3)) : T3 && (I3 = new Uint8Array(t6.width * t6.height).fill(255)), T3 && (M5 = M5.map((t7) => {
    const e9 = c2.createEmptyBand(B5, t7.length);
    return c(t7, I3, B5, e9), e9;
  }));
  const P3 = new c2({ width: t6.width, height: t6.height, pixelType: B5, pixels: M5, mask: I3 });
  return P3.updateStatistics(), P3;
}
function l9(t6, e9, r12, a30) {
  const { mask: o9, pixels: i27, width: s11, height: l22 } = t6, c36 = i27[r12], u22 = i27[e9], f8 = u22.length, h7 = a30 ? new Uint8Array(f8) : new Float32Array(f8), w6 = a30 ? 100 : 1, m16 = a30 ? 100.5 : 0;
  for (let n17 = 0; n17 < f8; n17++) if (null == o9 || o9[n17]) {
    const t7 = c36[n17], e10 = u22[n17], r13 = t7 + e10;
    r13 && (h7[n17] = (t7 - e10) / r13 * w6 + m16);
  }
  const d11 = new c2({ width: s11, height: l22, mask: o9, pixelType: a30 ? "u8" : "f32", pixels: [h7] });
  return d11.updateStatistics(), d11;
}
function c8(t6) {
  const n17 = new Float32Array(9);
  return n17[3 * t6[0]] = 1, n17[3 * t6[1] + 1] = 1, n17[3 * t6[2] + 2] = 1, n17;
}
function u7(t6, n17, e9) {
  const r12 = e9.length, a30 = new Float32Array(r12);
  for (let o9 = 0; o9 < r12; o9++) if (null == t6 || t6[o9]) {
    const t7 = n17[o9], r13 = e9[o9], i27 = t7 + r13;
    i27 && (a30[o9] = (t7 - r13) / i27);
  }
  return [a30];
}
function f5(t6, n17, e9) {
  const r12 = e9.length, a30 = new Float32Array(r12);
  for (let o9 = 0; o9 < r12; o9++) if (null == t6 || t6[o9]) {
    const t7 = n17[o9], r13 = e9[o9];
    r13 && (a30[o9] = t7 / r13);
  }
  return [a30];
}
function h4(t6, n17, e9) {
  const r12 = n17.length, a30 = new Float32Array(r12);
  for (let o9 = 0; o9 < r12; o9++) if (null == t6 || t6[o9]) {
    const t7 = n17[o9], r13 = e9[o9];
    r13 && (a30[o9] = t7 / r13 - 1);
  }
  return [a30];
}
function w4(t6, n17, e9, r12) {
  const a30 = e9.length, o9 = new Float32Array(a30);
  for (let i27 = 0; i27 < a30; i27++) if (null == t6 || t6[i27]) {
    const t7 = e9[i27], a31 = n17[i27], s11 = a31 + t7 + r12;
    s11 && (o9[i27] = (a31 - t7) / s11 * (1 + r12));
  }
  return [o9];
}
function m8(t6, n17, e9, r12, a30, o9) {
  const i27 = e9.length, s11 = new Float32Array(i27), l22 = -a30 * r12 + o9 * (1 + r12 * r12);
  for (let c36 = 0; c36 < i27; c36++) if (null == t6 || t6[c36]) {
    const t7 = e9[c36], o10 = n17[c36], i28 = a30 * o10 + t7 + l22;
    i28 && (s11[c36] = r12 * (o10 - r12 * t7 - a30) / i28);
  }
  return [s11];
}
function d6(t6, n17, e9) {
  const r12 = e9.length, a30 = new Float32Array(r12);
  for (let o9 = 0; o9 < r12; o9++) if (null == t6 || t6[o9]) {
    const t7 = e9[o9], r13 = n17[o9], i27 = 2 * r13 + 1;
    a30[o9] = 0.5 * (i27 - Math.sqrt(i27 * i27 - 8 * (r13 - t7)));
  }
  return [a30];
}
function g2(t6, n17, e9) {
  const r12 = e9.length, a30 = new Float32Array(r12);
  for (let o9 = 0; o9 < r12; o9++) if (null == t6 || t6[o9]) {
    const t7 = e9[o9], r13 = n17[o9];
    if (1 !== t7 && r13 + t7 + 0.5 !== 0) {
      const n18 = (2 * (r13 * r13 - t7 * t7) + 1.5 * r13 + 0.5 * t7) / (r13 + t7 + 0.5);
      a30[o9] = n18 * (1 - 0.25 * n18) - (t7 - 0.125) / (1 - t7);
    }
  }
  return [a30];
}
function y3(t6, n17, e9, r12, a30) {
  const o9 = e9.length, i27 = new Float32Array(o9), s11 = 1 / Math.sqrt(1 + r12 * r12);
  for (let l22 = 0; l22 < o9; l22++) if (null == t6 || t6[l22]) {
    const t7 = e9[l22], o10 = n17[l22];
    i27[l22] = (o10 - r12 * t7 - a30) * s11;
  }
  return [i27];
}
function p8(t6, n17) {
  const [e9, r12, a30, o9, i27, s11] = n17, l22 = e9.length, c36 = new Float32Array(l22);
  for (let u22 = 0; u22 < l22; u22++) (null == t6 || t6[u22]) && (c36[u22] = -0.2848 * e9[u22] - 0.2435 * r12[u22] - 0.5436 * a30[u22] + 0.7243 * o9[u22] + 0.084 * i27[u22] - 0.18 * s11[u22]);
  return [c36];
}
function b2(t6, n17) {
  const [e9, r12, a30, o9, i27] = n17, s11 = e9.length, l22 = new Float32Array(s11), c36 = new Float32Array(s11), u22 = new Float32Array(s11);
  for (let f8 = 0; f8 < s11; f8++) (null == t6 || t6[f8]) && (l22[f8] = i27[f8] ? o9[f8] / i27[f8] * 100 : 0, c36[f8] = e9[f8] ? o9[f8] / e9[f8] * 100 : 0, u22[f8] = a30[f8] ? r12[f8] / a30[f8] * (o9[f8] / a30[f8]) * 100 : 0);
  return [l22, c36, u22];
}
function v2(t6, n17) {
  const [e9, r12, a30] = n17, o9 = e9.length, i27 = new Float32Array(o9);
  for (let s11 = 0; s11 < o9; s11++) if (null == t6 || t6[s11]) for (s11 = 0; s11 < o9; s11++) {
    const t7 = e9[s11], n18 = r12[s11], o10 = n18 + t7 - a30[s11];
    o10 && (i27[s11] = (n18 - t7) / o10);
  }
  return [i27];
}
function k3(t6, n17) {
  const [e9, r12, a30] = n17, o9 = e9.length, i27 = new Float32Array(o9);
  for (let s11 = 0; s11 < o9; s11++) if (null == t6 || t6[s11]) for (s11 = 0; s11 < o9; s11++) {
    const t7 = e9[s11], n18 = r12[s11], o10 = a30[s11], l22 = Math.sqrt((2 * t7 + 1) ** 2 - (6 * t7 - 5 * Math.sqrt(n18)) - 0.5);
    if (l22) {
      const e10 = 1.5 * (1.2 * (t7 - o10) - 2.5 * (n18 - o10));
      i27[s11] = e10 / l22;
    }
  }
  return [i27];
}
function A2(t6, n17) {
  const [e9, r12, a30] = n17, o9 = e9.length, i27 = new Float32Array(o9);
  for (let s11 = 0; s11 < o9; s11++) if (null == t6 || t6[s11]) for (s11 = 0; s11 < o9; s11++) {
    const t7 = e9[s11], n18 = r12[s11], o10 = a30[s11];
    i27[s11] = 100 * (t7 - n18) - 10 * (t7 - o10);
  }
  return [i27];
}
function F2(t6, n17) {
  const [e9, r12, a30] = n17, o9 = e9.length, i27 = new Float32Array(o9);
  for (let s11 = 0; s11 < o9; s11++) if (null == t6 || t6[s11]) for (s11 = 0; s11 < o9; s11++) {
    const t7 = e9[s11], n18 = r12[s11], o10 = t7 + 6 * n18 - 7.5 * a30[s11] + 1;
    o10 && (i27[s11] = 2.5 * (t7 - n18) / o10);
  }
  return [i27];
}
function x3(t6, n17, e9 = 0.5) {
  const [r12, a30, o9] = n17, i27 = a30.length, s11 = new Float32Array(i27);
  for (let l22 = 0; l22 < i27; l22++) if (null == t6 || t6[l22]) for (l22 = 0; l22 < i27; l22++) {
    const t7 = r12[l22], n18 = a30[l22], i28 = o9[l22], c36 = t7 + e9 * n18 + (1 - e9) * i28;
    c36 && (s11[l22] = (t7 - e9 * n18 - (1 - e9) * i28) / c36);
  }
  return [s11];
}
function j2(t6, n17, e9) {
  const r12 = e9.length, a30 = new Float32Array(r12);
  for (let o9 = 0; o9 < r12; o9++) if (null == t6 || t6[o9]) for (o9 = 0; o9 < r12; o9++) {
    const t7 = (0.1 - n17[o9]) ** 2 + (0.06 - e9[o9]) ** 2;
    t7 && (a30[o9] = 1 / t7);
  }
  return [a30];
}

// node_modules/@arcgis/core/layers/support/rasterFunctions/BandArithmeticFunctionArguments.js
var i6;
var p9 = i6 = class extends p2 {
  constructor() {
    super(...arguments), this.method = "custom";
  }
  clone() {
    return new i6({ method: this.method, bandIndexes: this.bandIndexes, raster: a(this.raster) });
  }
};
r([m({ json: { type: String, write: true } })], p9.prototype, "bandIndexes", void 0), r([r3(i5)], p9.prototype, "method", void 0), p9 = i6 = r([a2("esri.layers.support.rasterFunctions.BandArithmeticFunctionArguments")], p9);
var a11 = p9;

// node_modules/@arcgis/core/layers/support/rasterFunctions/BandArithmeticFunction.js
var c9 = /* @__PURE__ */ new Set(["vari", "mtvi2", "rtvi-core", "evi"]);
var u8 = class extends p3 {
  constructor() {
    super(...arguments), this.functionName = "BandArithmetic", this.functionArguments = null, this.rasterArgumentNames = ["raster"];
  }
  _bindSourceRasters() {
    this.outputPixelType = this._getOutputPixelType("f32");
    const e9 = this.sourceRasterInfos[0];
    if (e9.bandCount < 2) return { success: false, supportsGPU: false, error: "band-arithmetic-function: source raster has insufficient amount of raster bands" };
    const t6 = e9.clone();
    t6.pixelType = this.outputPixelType, t6.bandCount = "sultan" === this.functionArguments.method ? 3 : 1, this._removeStatsHistColormapVAT(t6), t6.keyProperties = { ...t6.keyProperties, BandProperties: void 0 }, this.rasterInfo = t6;
    return { success: true, supportsGPU: !["custom", "gvitm", "sultan"].includes(this.functionArguments.method) };
  }
  _processPixels(e9) {
    const t6 = e9.pixelBlocks?.[0];
    if (null == t6) return t6;
    const { method: s11, bandIndexes: r12 } = this.functionArguments, i27 = r12.split(" ").map((e10) => parseFloat(e10));
    return s5(t6, { method: s11, bandIndexes: i27, equation: r12, outputPixelType: this.outputPixelType });
  }
  _getWebGLParameters() {
    const e9 = this.functionArguments.bandIndexes.split(" ").map((e10) => parseFloat(e10) - 1);
    2 === e9.length && e9.push(0);
    const t6 = this.isInputBandIdsSwizzled ? [0, 1, 2] : e9;
    let s11, i27;
    const n17 = new Float32Array(3), { method: o9 } = this.functionArguments;
    switch (o9) {
      case "gndvi":
      case "nbr":
      case "ndbi":
      case "ndvi":
      case "ndvi-re":
      case "ndsi":
      case "ndmi":
      case "mndwi":
        s11 = c8([t6[0], t6[1], 0]), i27 = "ndxi";
        break;
      case "ndwi":
        s11 = c8([t6[1], t6[0], 0]), i27 = "ndxi";
        break;
      case "sr":
      case "sr-re":
      case "iron-oxide":
      case "ferrous-minerals":
      case "clay-minerals":
        s11 = c8([t6[0], t6[1], 0]), i27 = "sr";
        break;
      case "ci-g":
      case "ci-re":
        s11 = c8([t6[0], t6[1], 0]), i27 = "ci";
        break;
      case "savi":
        s11 = c8([t6[0], t6[1], 0]), i27 = "savi", n17[0] = e9[2] + 1;
        break;
      case "tsavi":
        s11 = c8([t6[0], t6[1], 0]), i27 = "tsavi", n17[0] = e9[2] + 1, n17[1] = e9[3] + 1, n17[2] = e9[4] + 1;
        break;
      case "msavi":
        s11 = c8([t6[0], t6[1], 0]), i27 = "msavi";
        break;
      case "gemi":
        s11 = c8([t6[0], t6[1], 0]), i27 = "gemi";
        break;
      case "pvi":
        s11 = c8([t6[0], t6[1], 0]), i27 = "tsavi", n17[0] = e9[2] + 1, n17[1] = e9[3] + 1;
        break;
      case "vari":
        s11 = c8([t6[0], t6[1], t6[2]]), i27 = "vari";
        break;
      case "mtvi2":
        s11 = c8([t6[0], t6[1], t6[2]]), i27 = "mtvi";
        break;
      case "rtvi-core":
        s11 = c8([t6[0], t6[1], t6[2]]), i27 = "rtvicore";
        break;
      case "evi":
        s11 = c8([t6[0], t6[1], t6[2]]), i27 = "evi";
        break;
      case "wndwi":
        s11 = c8([t6[0], t6[1], 0]), i27 = "wndwi", n17[0] = e9[3] ? e9[3] + 1 : 0.5;
        break;
      case "bai":
        s11 = c8([t6[1], t6[0], 0]), i27 = "bai";
        break;
      default:
        s11 = c8([0, 1, 2]), i27 = "custom";
    }
    return { bandIndexMat3: s11, indexType: i27, adjustments: n17, isOutputRounded: r4(this.outputPixelType) };
  }
  _getInputBandIds(e9) {
    if ("custom" === this.functionArguments.method) return e9;
    const t6 = this.functionArguments.bandIndexes.split(" ").map((e10) => parseFloat(e10) - 1), s11 = e9.length, r12 = t6.map((e10) => e10 >= s11 ? s11 - 1 : e10), i27 = c9.has(this.functionArguments.method) ? 3 : 2, n17 = r12.slice(0, i27).map((t7) => e9[t7]);
    return 2 === n17.length && n17.push(0), n17;
  }
  _swizzleBandIds(e9) {
    const t6 = this.functionArguments.bandIndexes.split(" ").map((e10) => parseFloat(e10) - 1);
    2 === t6.length && t6.push(0);
    const { method: s11 } = this.functionArguments, r12 = (["vari", "mtvi2", "rtvi-core", "evi"].includes(s11) ? t6.slice(0, 3) : "bai" === s11 || "ndwi" === s11 ? [t6[1], t6[0]] : t6.slice(0, 2)).map((t7) => e9.indexOf(t7));
    return r12[2] ??= r12[1], this.isInputBandIdsSwizzled = true, this.swizzledBandSelection = r12, false;
  }
};
r([m({ json: { write: true, name: "rasterFunction" } })], u8.prototype, "functionName", void 0), r([m({ type: a11, json: { write: true, name: "rasterFunctionArguments" } })], u8.prototype, "functionArguments", void 0), r([m()], u8.prototype, "rasterArgumentNames", void 0), u8 = r([a2("esri.layers.support.rasterFunctions.BandArithmeticFunction")], u8);
var m9 = u8;

// node_modules/@arcgis/core/layers/support/rasterFunctions/ClipFunctionArguments.js
var c10;
var n4 = new o2({ 1: "outside", 2: "inside" }, { useNumericKeys: true });
var m10 = c10 = class extends p2 {
  constructor() {
    super(...arguments), this.clippingType = "outside";
  }
  clone() {
    return new c10({ clippingGeometry: this.clippingGeometry.clone(), clippingType: this.clippingType });
  }
};
r([m({ types: l2, json: { read: f, write: true } })], m10.prototype, "clippingGeometry", void 0), r([m({ json: { read: n4.read, write: n4.write } })], m10.prototype, "clippingType", void 0), m10 = c10 = r([a2("esri.layers.support.rasterFunctions.ClipFunctionArguments")], m10);
var u9 = m10;

// node_modules/@arcgis/core/layers/support/rasterFunctions/ClipFunction.js
var c11 = class extends p3 {
  constructor() {
    super(...arguments), this.functionName = "Clip", this.functionArguments = null, this.rasterArgumentNames = ["raster"], this.isNoopProcess = true;
  }
  _bindSourceRasters() {
    const t6 = this.sourceRasterInfos[0].clone();
    this.outputPixelType = this._getOutputPixelType(t6.pixelType), t6.pixelType = this.outputPixelType, this.rasterInfo = t6;
    const { functionArguments: e9 } = this, { clippingGeometry: r12, clippingType: s11 } = e9;
    if (!r12) return { success: false, supportsGPU: false, error: "missing clipping geometry" };
    if ("outside" === s11) try {
      const { spatialReference: e10 } = t6, s12 = "extent" === r12.type ? Q(r12, e10) : V(r12, e10).extent;
      s12 && l6(t6, s12);
    } catch {
    }
    return { success: true, supportsGPU: true };
  }
  _processPixels(t6) {
    return t6.pixelBlocks?.[0];
  }
  _getWebGLParameters() {
    const { clippingGeometry: t6, clippingType: e9 } = this.functionArguments;
    return { clippingGeometry: t6.toJSON(), clippingType: e9 };
  }
};
r([m({ json: { write: true, name: "rasterFunction" } })], c11.prototype, "functionName", void 0), r([m({ type: u9, json: { write: true, name: "rasterFunctionArguments" } })], c11.prototype, "functionArguments", void 0), r([m()], c11.prototype, "rasterArgumentNames", void 0), r([m()], c11.prototype, "isNoopProcess", void 0), c11 = r([a2("esri.layers.support.rasterFunctions.ClipFunction")], c11);
var u10 = c11;

// node_modules/@arcgis/core/layers/support/rasterFunctions/ColormapFunctionArguments.js
var i7;
var u11 = i7 = class extends p2 {
  castColormapName(o9) {
    if (!o9) return null;
    const r12 = o9.toLowerCase();
    return C.includes(r12) ? r12 : null;
  }
  readColorRamp(o9) {
    return p(o9);
  }
  readColorRampName(o9, r12) {
    if (!o9) return null;
    const e9 = a3.jsonValues.find((r13) => r13.toLowerCase() === o9.toLowerCase());
    return e9 ? a3.fromJSON(e9) : null;
  }
  clone() {
    return new i7({ colormap: a(this.colormap), colormapName: this.colormapName, colorRamp: this.colorRamp?.clone(), colorRampName: this.colorRampName });
  }
};
r([m({ type: [[Number]], json: { write: true } })], u11.prototype, "colormap", void 0), r([m({ type: String, json: { write: true } })], u11.prototype, "colormapName", void 0), r([s2("colormapName")], u11.prototype, "castColormapName", null), r([m({ types: m3, json: { write: true } })], u11.prototype, "colorRamp", void 0), r([o("colorRamp")], u11.prototype, "readColorRamp", null), r([m({ type: a3.apiValues, json: { type: a3.jsonValues, write: a3.write } })], u11.prototype, "colorRampName", void 0), r([o("colorRampName")], u11.prototype, "readColorRampName", null), u11 = i7 = r([a2("esri.layers.support.rasterFunctions.ColormapFunctionArguments")], u11);
var d7 = u11;

// node_modules/@arcgis/core/layers/support/rasterFunctions/colormaps.js
var t3 = [[36, 0, 255], [36, 0, 255], [36, 0, 255], [36, 0, 255], [112, 75, 3], [113, 76, 3], [114, 77, 3], [115, 77, 3], [116, 78, 3], [117, 79, 3], [118, 79, 3], [119, 80, 3], [121, 81, 4], [122, 82, 4], [123, 82, 4], [124, 83, 4], [125, 84, 4], [126, 84, 4], [127, 85, 4], [128, 86, 4], [129, 86, 4], [130, 87, 4], [131, 88, 4], [132, 89, 4], [133, 89, 4], [134, 90, 4], [135, 91, 4], [136, 91, 4], [137, 92, 4], [138, 93, 4], [139, 94, 4], [140, 94, 4], [142, 95, 5], [143, 96, 5], [144, 96, 5], [145, 97, 5], [146, 98, 5], [147, 99, 5], [148, 99, 5], [149, 100, 5], [150, 101, 5], [151, 101, 5], [152, 102, 5], [153, 103, 5], [154, 104, 5], [155, 104, 5], [156, 105, 5], [157, 106, 5], [158, 106, 5], [159, 107, 5], [160, 108, 5], [161, 108, 5], [162, 109, 5], [164, 110, 6], [165, 111, 6], [166, 111, 6], [167, 112, 6], [168, 113, 6], [169, 113, 6], [170, 114, 6], [171, 115, 6], [172, 116, 6], [173, 116, 6], [174, 117, 6], [245, 0, 0], [245, 5, 0], [245, 10, 0], [246, 15, 0], [246, 20, 0], [246, 25, 0], [246, 30, 0], [247, 35, 0], [247, 40, 0], [247, 45, 0], [247, 50, 0], [247, 55, 0], [248, 60, 0], [248, 65, 0], [248, 70, 0], [248, 75, 0], [249, 81, 0], [249, 86, 0], [249, 91, 0], [249, 96, 0], [250, 101, 0], [250, 106, 0], [250, 111, 0], [250, 116, 0], [250, 121, 0], [251, 126, 0], [251, 131, 0], [251, 136, 0], [251, 141, 0], [252, 146, 0], [252, 151, 0], [252, 156, 0], [252, 156, 0], [251, 159, 0], [250, 162, 0], [249, 165, 0], [248, 168, 0], [247, 171, 0], [246, 174, 0], [245, 177, 0], [245, 179, 0], [244, 182, 0], [243, 185, 0], [242, 188, 0], [241, 191, 0], [240, 194, 0], [239, 197, 0], [238, 200, 0], [237, 203, 0], [236, 206, 0], [235, 209, 0], [234, 212, 0], [233, 215, 0], [232, 218, 0], [231, 221, 0], [230, 224, 0], [230, 226, 0], [229, 229, 0], [228, 232, 0], [227, 235, 0], [226, 238, 0], [225, 241, 0], [224, 244, 0], [223, 247, 0], [165, 247, 0], [163, 244, 0], [161, 240, 0], [158, 237, 0], [156, 233, 1], [154, 230, 1], [152, 227, 1], [149, 223, 1], [147, 220, 1], [145, 216, 1], [143, 213, 1], [140, 210, 2], [138, 206, 2], [136, 203, 2], [134, 200, 2], [132, 196, 2], [129, 193, 2], [127, 189, 2], [125, 186, 3], [123, 183, 3], [120, 179, 3], [118, 176, 3], [116, 172, 3], [114, 169, 3], [111, 166, 3], [109, 162, 4], [107, 159, 4], [105, 155, 4], [103, 152, 4], [100, 149, 4], [98, 145, 4], [96, 142, 4], [94, 138, 5], [91, 135, 5], [89, 132, 5], [87, 128, 5], [85, 125, 5], [82, 121, 5], [80, 118, 5], [78, 115, 6], [76, 111, 6], [73, 108, 6], [71, 105, 6], [69, 101, 6], [67, 98, 6], [65, 94, 6], [62, 91, 7], [60, 88, 7], [58, 84, 7], [56, 81, 7], [53, 77, 7], [51, 74, 7], [49, 71, 7], [47, 67, 8], [44, 64, 8], [42, 60, 8], [40, 57, 8], [40, 57, 8], [40, 57, 8], [40, 57, 8], [40, 57, 8], [40, 57, 8], [40, 57, 8], [40, 57, 8], [40, 57, 8], [40, 57, 8], [40, 57, 8], [40, 57, 8], [40, 57, 8], [40, 57, 8], [40, 57, 8], [40, 57, 8], [40, 57, 8], [40, 57, 8], [40, 57, 8], [40, 57, 8], [40, 57, 8], [40, 57, 8], [40, 57, 8], [40, 57, 8], [40, 57, 8], [40, 57, 8], [40, 57, 8], [40, 57, 8], [40, 57, 8], [40, 57, 8], [40, 57, 8], [40, 57, 8], [40, 57, 8], [40, 57, 8], [40, 57, 8], [40, 57, 8], [40, 57, 8], [40, 57, 8], [40, 57, 8], [40, 57, 8], [40, 57, 8], [40, 57, 8], [40, 57, 8], [40, 57, 8], [40, 57, 8], [40, 57, 8], [40, 57, 8], [40, 57, 8], [40, 57, 8], [40, 57, 8], [40, 57, 8], [40, 57, 8], [40, 57, 8], [40, 57, 8], [40, 57, 8], [40, 57, 8], [40, 57, 8], [40, 57, 8], [40, 57, 8], [40, 57, 8], [40, 57, 8], [40, 57, 8], [40, 57, 8], [40, 57, 8], [40, 57, 8], [40, 57, 8], [40, 57, 8], [40, 57, 8], [40, 57, 8], [40, 57, 8], [40, 57, 8], [40, 57, 8]];
var o5 = [[36, 0, 255], [36, 0, 255], [36, 0, 255], [36, 0, 255], [245, 20, 0], [245, 24, 0], [245, 29, 0], [245, 31, 0], [247, 33, 0], [247, 33, 0], [247, 37, 0], [247, 41, 0], [247, 41, 0], [247, 41, 0], [247, 45, 0], [247, 45, 0], [247, 47, 0], [247, 49, 0], [247, 49, 0], [247, 54, 0], [247, 54, 0], [247, 56, 0], [247, 58, 0], [247, 58, 0], [250, 62, 0], [250, 62, 0], [250, 62, 0], [250, 67, 0], [250, 67, 0], [250, 67, 0], [250, 69, 0], [250, 71, 0], [250, 71, 0], [250, 75, 0], [250, 75, 0], [250, 78, 0], [250, 79, 0], [250, 79, 0], [250, 79, 0], [250, 81, 0], [250, 83, 0], [250, 83, 0], [250, 87, 0], [250, 87, 0], [250, 90, 0], [250, 92, 0], [252, 93, 0], [252, 93, 0], [252, 97, 0], [252, 97, 0], [252, 97, 0], [252, 97, 0], [252, 101, 0], [252, 101, 0], [252, 101, 0], [252, 101, 0], [252, 105, 0], [252, 105, 0], [252, 107, 0], [252, 109, 0], [252, 109, 0], [252, 113, 13], [255, 118, 20], [255, 119, 23], [255, 121, 25], [255, 126, 33], [255, 132, 38], [255, 133, 40], [255, 135, 43], [255, 141, 48], [255, 144, 54], [255, 150, 59], [255, 152, 61], [255, 153, 64], [255, 159, 69], [255, 163, 77], [255, 165, 79], [255, 168, 82], [255, 174, 87], [255, 176, 92], [255, 181, 97], [255, 183, 99], [255, 186, 102], [255, 191, 107], [255, 197, 115], [255, 201, 120], [255, 203, 123], [255, 205, 125], [255, 209, 130], [255, 214, 138], [255, 216, 141], [255, 218, 143], [255, 224, 150], [255, 228, 156], [255, 234, 163], [255, 236, 165], [255, 238, 168], [255, 243, 173], [255, 248, 181], [255, 252, 186], [253, 252, 186], [250, 252, 187], [244, 250, 180], [238, 247, 176], [234, 246, 173], [231, 245, 169], [223, 240, 163], [217, 237, 157], [211, 235, 150], [205, 233, 146], [200, 230, 142], [195, 227, 136], [189, 224, 132], [184, 222, 126], [180, 220, 123], [174, 217, 119], [169, 214, 114], [163, 212, 108], [160, 210, 105], [154, 207, 101], [148, 204, 96], [143, 201, 93], [138, 199, 88], [134, 197, 84], [130, 194, 81], [126, 191, 77], [117, 189, 70], [115, 186, 68], [112, 184, 64], [106, 181, 60], [100, 179, 55], [94, 176, 49], [92, 174, 47], [90, 173, 45], [81, 168, 37], [75, 166, 33], [71, 163, 28], [66, 160, 24], [62, 158, 21], [56, 156, 14], [51, 153, 0], [51, 153, 0], [51, 153, 0], [50, 150, 0], [50, 150, 0], [50, 150, 0], [50, 150, 0], [49, 148, 0], [49, 148, 0], [49, 148, 0], [48, 145, 0], [48, 145, 0], [48, 145, 0], [48, 145, 0], [48, 143, 0], [48, 143, 0], [48, 143, 0], [48, 143, 0], [47, 140, 0], [47, 140, 0], [47, 140, 0], [47, 140, 0], [46, 138, 0], [46, 138, 0], [46, 138, 0], [46, 138, 0], [45, 135, 0], [45, 135, 0], [45, 135, 0], [45, 135, 0], [44, 133, 0], [44, 133, 0], [44, 133, 0], [43, 130, 0], [43, 130, 0], [43, 130, 0], [43, 130, 0], [43, 130, 0], [43, 130, 0], [42, 128, 0], [42, 128, 0], [42, 128, 0], [42, 125, 0], [42, 125, 0], [42, 125, 0], [42, 125, 0], [41, 122, 0], [41, 122, 0], [41, 122, 0], [41, 122, 0], [40, 120, 0], [40, 120, 0], [40, 120, 0], [40, 120, 0], [40, 120, 0], [39, 117, 0], [39, 117, 0], [39, 117, 0], [39, 117, 0], [38, 115, 0], [38, 115, 0], [38, 115, 0], [38, 115, 0], [38, 115, 0], [38, 115, 0], [38, 115, 0], [38, 115, 0], [38, 115, 0], [38, 115, 0], [38, 115, 0], [38, 115, 0], [38, 115, 0], [38, 115, 0], [38, 115, 0], [38, 115, 0], [38, 115, 0], [38, 115, 0], [38, 115, 0], [38, 115, 0], [38, 115, 0], [38, 115, 0], [38, 115, 0], [38, 115, 0], [38, 115, 0], [38, 115, 0], [38, 115, 0], [38, 115, 0], [38, 115, 0], [38, 115, 0], [38, 115, 0], [38, 115, 0], [38, 115, 0], [38, 115, 0], [38, 115, 0], [38, 115, 0], [38, 115, 0], [38, 115, 0], [38, 115, 0], [38, 115, 0], [38, 115, 0], [38, 115, 0], [38, 115, 0], [38, 115, 0], [38, 115, 0], [38, 115, 0], [38, 115, 0], [38, 115, 0], [38, 115, 0], [38, 115, 0], [38, 115, 0], [38, 115, 0], [38, 115, 0], [38, 115, 0], [38, 115, 0], [38, 115, 0], [38, 115, 0]];
function e5(t6, o9) {
  const e9 = [], n17 = [];
  for (let r12 = 0; r12 < t6.length - 1; r12++) e9.push({ type: "algorithmic", algorithm: "esriHSVAlgorithm", fromColor: t6[r12].slice(1), toColor: t6[r12 + 1].slice(1) }), n17.push(t6[r12 + 1][0] - t6[r12][0]);
  const s11 = t6[t6.length - 1][0];
  return w({ type: "multipart", colorRamps: e9 }, { numColors: s11, weights: o9 = o9 ?? n17 });
}
function n5() {
  return e5([[0, 0, 191, 191], [51, 0, 0, 255], [102, 255, 0, 255], [153, 255, 0, 127], [204, 191, 63, 127], [256, 20, 20, 20]]);
}
function s6() {
  const r12 = e5([[0, 255, 255, 255], [70, 0, 255, 0], [80, 205, 173, 193], [100, 150, 150, 150], [110, 120, 51, 100], [130, 120, 100, 200], [140, 28, 3, 144], [160, 6, 0, 55], [180, 10, 25, 30], [201, 6, 7, 27]]);
  for (let t6 = r12.length; t6 < 256; t6++) r12.push([6, 27, 7]);
  return r12;
}
function l10() {
  return w({ type: "algorithmic", algorithm: "esriHSVAlgorithm", fromColor: [0, 0, 0], toColor: [255, 255, 255] });
}
function i8() {
  const r12 = [];
  for (let t6 = 0; t6 < 256; t6++) {
    const t7 = [];
    for (let r13 = 0; r13 < 3; r13++) t7.push(Math.round(255 * Math.random()));
    r12.push(t7);
  }
  return r12;
}
function a12() {
  return e5([[0, 38, 41, 54], [69, 79, 82, 90], [131, 156, 156, 156], [256, 253, 253, 241]], [0.268, 0.238, 0.495]);
}
function c12(r12) {
  let e9;
  switch (r12) {
    case "elevation":
      e9 = n5();
      break;
    case "gray":
      e9 = l10();
      break;
    case "hillshade":
      e9 = a12();
      break;
    case "ndvi":
      e9 = t3;
      break;
    case "ndvi2":
      e9 = s6();
      break;
    case "ndvi3":
      e9 = o5;
      break;
    case "random":
      e9 = i8();
  }
  return e9 ? (e9 = e9.map((r13, t6) => [t6, ...r13]), e9) : null;
}

// node_modules/@arcgis/core/layers/support/rasterFunctions/ColormapFunction.js
var m11 = class extends p3 {
  constructor() {
    super(...arguments), this.functionName = "Colormap", this.functionArguments = null, this.rasterArgumentNames = ["raster"], this.isNoopProcess = true;
  }
  _bindSourceRasters() {
    const o9 = this.sourceRasterInfos[0];
    if (o9.bandCount > 1) return { success: false, supportsGPU: false, error: "colormap-function: source data must be single band" };
    let { colormap: r12, colormapName: t6, colorRamp: s11, colorRampName: e9 } = this.functionArguments;
    if (!r12?.length) if (s11) this.colorRamp = s11, r12 = B(s11, { interpolateAlpha: true });
    else if (e9) {
      const o10 = d(e9);
      o10 && (r12 = B(o10), this.colorRamp = p(o10));
    } else t6 && (r12 = c12(t6));
    if (!r12?.length) return { success: false, supportsGPU: false, error: "colormap-function: missing colormap argument" };
    const p19 = this._getOutputPixelType(o9.pixelType);
    this.outputPixelType = p19.startsWith("f") ? "s32" : p19;
    const m16 = o9.clone();
    return m16.pixelType = this.outputPixelType, m16.colormap = r12, m16.bandCount = 1, this.rasterInfo = m16, { success: true, supportsGPU: true };
  }
  _processPixels(o9) {
    let r12 = o9.pixelBlocks?.[0];
    return !r12 || r4(r12.pixelType) || (r12 = r12.clone(), r12.clamp(this.outputPixelType)), r12;
  }
};
r([m({ json: { write: true, name: "rasterFunction" } })], m11.prototype, "functionName", void 0), r([m({ type: d7, json: { write: true, name: "rasterFunctionArguments" } })], m11.prototype, "functionArguments", void 0), r([m()], m11.prototype, "rasterArgumentNames", void 0), r([m()], m11.prototype, "isNoopProcess", void 0), r([m({ json: { write: true } })], m11.prototype, "indexedColormap", void 0), r([m()], m11.prototype, "colorRamp", void 0), m11 = r([a2("esri.layers.support.rasterFunctions.ColormapFunction")], m11);
var u12 = m11;

// node_modules/@arcgis/core/layers/support/rasterFunctions/ColormapToRGBFunctionArguments.js
var t4;
var e6 = t4 = class extends p2 {
  clone() {
    return new t4({ raster: this.raster });
  }
};
e6 = t4 = r([a2("esri.layers.support.rasterFunctions.ColormapToRGBFunctionArguments")], e6);
var a13 = e6;

// node_modules/@arcgis/core/layers/support/rasterFunctions/ColormapToRGBFunction.js
var a14 = class extends p3 {
  constructor() {
    super(...arguments), this.functionName = "ColormapToRGB", this.functionArguments = null, this.rasterArgumentNames = ["raster"];
  }
  _bindSourceRasters() {
    const t6 = this.sourceRasterInfos[0];
    if (t6.bandCount > 1 || !t6.colormap?.length) return { success: false, supportsGPU: false, error: "colormap-to-rgb-function: source data must be single band with a colormap" };
    const o9 = t6.clone();
    o9.pixelType = this.outputPixelType = this._getOutputPixelType("u8"), this._removeStatsHistColormapVAT(o9), o9.bandCount = 3, o9.statistics = [{ min: 0, max: 255, avg: 100, stddev: 20 }, { min: 0, max: 255, avg: 100, stddev: 20 }, { min: 0, max: 255, avg: 100, stddev: 20 }], this.rasterInfo = o9;
    const r12 = [...t6.colormap].sort((t7, o10) => t7[0] - o10[0]), { indexedColormap: e9, offset: s11 } = h({ colormap: r12 });
    return e9 ? (this.lookup = { indexedColormap: e9, offset: s11 }, { success: true, supportsGPU: a5(e9) }) : { success: false, supportsGPU: false, error: "colormap-to-rgb-function: the colormap is not supported" };
  }
  _processPixels(t6) {
    let o9 = t6.pixelBlocks?.[0];
    if (!o9 || !this.lookup) return o9;
    o9 = o9.clone();
    const r12 = o9.pixels[0], s11 = o9.mask ?? new Uint8Array(r12.length).fill(255), n17 = new Uint8Array(r12.length), i27 = new Uint8Array(r12.length), p19 = new Uint8Array(r12.length), { indexedColormap: a30, offset: u22 } = this.lookup, c36 = a30.length;
    for (let e9 = 0; e9 < r12.length; e9++) if (s11[e9]) {
      let t7 = 4 * (r12[e9] - u22);
      t7 < 0 || t7 > c36 - 4 ? s11[e9] = 0 : (n17[e9] = a30[t7++], i27[e9] = a30[t7++], p19[e9] = a30[t7++]);
    }
    return o9.pixels = [n17, i27, p19], o9.statistics = [new l3(0, 255), new l3(0, 255), new l3(0, 255)], o9.pixelType = this.outputPixelType, o9;
  }
  _getWebGLParameters() {
    return this.lookup;
  }
};
r([m({ json: { write: true, name: "rasterFunction" } })], a14.prototype, "functionName", void 0), r([m({ type: a13, json: { write: true, name: "rasterFunctionArguments" } })], a14.prototype, "functionArguments", void 0), r([m()], a14.prototype, "rasterArgumentNames", void 0), r([m({ json: { write: true } })], a14.prototype, "lookup", void 0), a14 = r([a2("esri.layers.support.rasterFunctions.ColormapToRGBFunction")], a14);
var u13 = a14;

// node_modules/@arcgis/core/layers/support/rasterFunctions/CompositeBandFunctionArguments.js
var a15;
var c13 = a15 = class extends p2 {
  constructor() {
    super(...arguments), this.rasters = [];
  }
  writeRasters(r12, s11) {
    s11.rasters = r12.map((r13) => "number" == typeof r13 || "string" == typeof r13 ? r13 : r13.toJSON());
  }
  clone() {
    return new a15({ rasters: a(this.rasters) });
  }
};
r([m({ json: { write: true } })], c13.prototype, "rasters", void 0), r([r2("rasters")], c13.prototype, "writeRasters", null), c13 = a15 = r([a2("esri.layers.support.rasterFunctions.CompositeBandFunctionArguments")], c13);
var i9 = c13;

// node_modules/@arcgis/core/layers/support/rasterFunctions/CompositeBandFunction.js
var i10 = class extends p3 {
  constructor() {
    super(...arguments), this.functionName = "CompositeBand", this.functionArguments = null, this.rasterArgumentNames = ["rasters"];
  }
  _bindSourceRasters() {
    const { sourceRasterInfos: t6 } = this, s11 = t6[0];
    this.outputPixelType = this._getOutputPixelType(s11.pixelType);
    const e9 = s11.clone();
    if (e9.attributeTable = null, e9.colormap = null, e9.pixelType = this.outputPixelType, e9.bandCount = t6.map(({ bandCount: t7 }) => t7).reduce((t7, s12) => t7 + s12), t6.every(({ statistics: t7 }) => null != t7 && t7.length)) {
      const s12 = [];
      t6.forEach(({ statistics: t7 }) => null != t7 && s12.push(...t7)), e9.statistics = s12;
    }
    if (t6.every(({ histograms: t7 }) => null != t7 && t7.length)) {
      const s12 = [];
      t6.forEach(({ histograms: t7 }) => null != t7 && s12.push(...t7)), e9.histograms = s12;
    }
    e9.multidimensionalInfo && e9.multidimensionalInfo.variables.forEach((s12) => {
      const e10 = t6.map((t7) => t7.multidimensionalInfo?.variables.find(({ name: t8 }) => t8 === s12.name)), r13 = e10.map((t7) => t7?.statistics?.length ? t7.statistics : null), o9 = e10.map((t7) => t7?.histograms?.length ? t7.histograms : null);
      s12.statistics = r13.every((t7) => null != t7) ? r13.flat() : null, s12.histograms = o9.every((t7) => null != t7) ? o9.flat() : null;
    }), e9.bandCount > 1 && (e9.colormap = null, e9.attributeTable = null);
    const r12 = t6.every((t7) => t7.keyProperties.BandProperties?.length) ? t6.flatMap((t7) => t7.keyProperties.BandProperties) : void 0;
    e9.keyProperties = { ...e9.keyProperties, BandProperties: r12 }, this.rasterInfo = e9;
    return { success: true, supportsGPU: e9.bandCount <= 3 };
  }
  _processPixels(t6) {
    const { pixelBlocks: s11 } = t6;
    if (!s11) return null;
    const e9 = s11?.[0];
    return null == e9 ? null : a4(s11);
  }
  _getWebGLParameters() {
    return { bandCount: this.rasterInfo.bandCount };
  }
};
r([m({ json: { write: true, name: "rasterFunction" } })], i10.prototype, "functionName", void 0), r([m({ type: i9, json: { write: true, name: "rasterFunctionArguments" } })], i10.prototype, "functionArguments", void 0), r([m()], i10.prototype, "rasterArgumentNames", void 0), i10 = r([a2("esri.layers.support.rasterFunctions.CompositeBandFunction")], i10);
var a16 = i10;

// node_modules/@arcgis/core/layers/support/rasterFunctions/changeDetectionUtils.js
var n6 = new o2({ 0: "difference", 1: "relative-difference", 2: "categorical", 3: "euclidean-distance", 4: "angle-difference", 5: "band-with-most-change" }, { useNumericKeys: true });
var s7 = new o2({ 0: "all", 1: "changed", 2: "unchanged" }, { useNumericKeys: true });
function i11(e9, n17, s11, i27) {
  const [f8, h7] = e9, m16 = r4(s11) && !r4(f8.pixelType) && !r4(h7.pixelType), p19 = [f8.mask, h7.mask].filter((e10) => e10), u22 = c2.combineBandMasks(p19), g4 = e9.map((e10) => e10.pixels[0]), { width: k5, height: x6 } = f8, b3 = c2.createEmptyBand(s11, k5 * x6);
  switch (n17) {
    case "difference":
    case "relative-difference":
      o6({ bands: g4, mask: u22, outBand: b3, isRoundingNeeded: m16, isRelative: "relative-difference" === n17 });
      break;
    case "categorical":
      c14({ bands: g4, mask: u22, outBand: b3, ...i27 });
      break;
    case "euclidean-distance":
      l11({ pixels: e9.map((e10) => e10.pixels), mask: u22, outBand: b3 });
      break;
    case "angle-difference":
      r8({ pixels: e9.map((e10) => e10.pixels), mask: u22, outBand: b3 });
      break;
    case "band-with-most-change":
      d8({ pixels: e9.map((e10) => e10.pixels), mask: u22, outBand: b3 });
  }
  const B5 = new c2({ width: k5, height: x6, pixels: [b3], pixelType: s11, mask: u22 });
  return B5.updateStatistics(), B5;
}
function o6(e9) {
  const { bands: [t6, a30], mask: n17, isRelative: s11, isRoundingNeeded: i27, outBand: o9 } = e9, c36 = t6.length;
  for (let l22 = 0; l22 < c36; l22++) if (!n17 || n17[l22]) {
    let e10 = t6[l22] - a30[l22];
    if (s11) {
      const n18 = Math.max(Math.abs(t6[l22]) - Math.abs(a30[l22]));
      e10 = n18 > 0 ? e10 / n18 : 0;
    }
    o9[l22] = i27 ? Math.round(e10) : e10;
  }
}
function c14(e9) {
  const { bands: [t6, a30], categoryIndexLookups: [n17, s11], classNames: [i27, o9], mask: c36, keepMethod: l22, outBand: r12 } = e9, d11 = t6.length, f8 = i27.length, h7 = o9.length, m16 = f8 * h7, p19 = m16 + 1, u22 = m16 + 2;
  for (let g4 = 0; g4 < d11; g4++) if (!c36 || c36[g4]) {
    const e10 = t6[g4], c37 = a30[g4], d12 = n17[e10], f9 = s11[c37], k5 = i27[d12], x6 = o9[f9];
    r12[g4] = null == d12 || null == f9 ? m16 : "changed" === l22 && k5 === x6 ? p19 : "unchanged" === l22 && k5 !== x6 ? u22 : d12 * h7 + f9;
  }
}
function l11(e9) {
  const { pixels: [t6, a30], mask: n17, outBand: s11 } = e9, i27 = t6[0].length, o9 = t6.length;
  for (let c36 = 0; c36 < i27; c36++) if (!n17 || n17[c36]) {
    let e10 = 0;
    for (let n18 = 0; n18 < o9; n18++) {
      const s12 = t6[n18][c36] - a30[n18][c36];
      e10 += s12 * s12;
    }
    s11[c36] = Math.sqrt(e10);
  }
}
function r8(e9) {
  const { pixels: [t6, a30], mask: n17, outBand: s11 } = e9, i27 = t6[0].length, o9 = t6.length;
  for (let c36 = 0; c36 < i27; c36++) if (!n17 || n17[c36]) {
    let e10 = 0, n18 = 0, i28 = 0;
    for (let s12 = 0; s12 < o9; s12++) {
      const o10 = t6[s12][c36], l23 = a30[s12][c36];
      e10 += o10 * l23, n18 += o10 * o10, i28 += l23 * l23;
    }
    const l22 = Math.sqrt(n18 * i28);
    s11[c36] = l22 ? Math.acos(e10 / l22) : 1.5707963267948966;
  }
}
function d8(e9) {
  const { pixels: [t6, a30], mask: n17, outBand: s11 } = e9, i27 = t6[0].length, o9 = t6.length;
  for (let c36 = 0; c36 < i27; c36++) if (!n17 || n17[c36]) {
    let e10 = 0, n18 = 0;
    for (let s12 = 0; s12 < o9; s12++) {
      const i28 = Math.abs(t6[s12][c36] - a30[s12][c36]);
      i28 > e10 && (e10 = i28, n18 = s12);
    }
    s11[c36] = n18;
  }
}

// node_modules/@arcgis/core/layers/support/rasterFunctions/ComputeChangeFunctionArguments.js
var i12;
var c15 = i12 = class extends p2 {
  constructor() {
    super(...arguments), this.method = "difference", this.keepMethod = "all", this.raster2 = void 0;
  }
  get rasters() {
    return [this.raster, this.raster2];
  }
  clone() {
    return new i12({ raster: this.raster, raster2: this.raster2, method: this.method, keepMethod: this.keepMethod });
  }
};
r([r3(n6)], c15.prototype, "method", void 0), r([r3(s7)], c15.prototype, "keepMethod", void 0), r([m({ json: { write: true } })], c15.prototype, "raster2", void 0), r([m({ readOnly: true })], c15.prototype, "rasters", null), c15 = i12 = r([a2("esri.layers.support.rasterFunctions.ComputeChangeFunctionArguments")], c15);
var n7 = c15;

// node_modules/@arcgis/core/layers/support/rasterFunctions/ComputeChangeFunction.js
var l12 = class extends p3 {
  constructor() {
    super(...arguments), this.functionName = "ComputeChange", this.functionArguments = null, this.rasterArgumentNames = ["raster", "raster2"];
  }
  _bindSourceRasters() {
    const { method: e9 } = this.functionArguments, t6 = this.sourceRasterInfos[0].clone();
    if (this.outputPixelType = this._getOutputPixelType(t6.pixelType), t6.pixelType = this.outputPixelType, this._removeStatsHistColormapVAT(t6), "categorical" === e9) {
      const e10 = this.sourceRasterInfos.map((e11) => e11.attributeTable), s11 = this._getFieldNames(e10, "value"), r12 = e10.map((e11) => this._getClassFieldName(e11));
      if (null == s11[0] || null == s11[1] || null == r12[0] || null == r12[1]) return { success: false, supportsGPU: false, error: "both inputs must have proper attribute table with value and class fields" };
      this._updateAttributeTable(t6, s11, r12);
    }
    t6.bandCount = 1, this.rasterInfo = t6;
    return { success: true, supportsGPU: "difference" === e9 || "relative-difference" === e9 };
  }
  _processPixels(e9) {
    const { pixelBlocks: t6 } = e9;
    if (null == t6?.[0] || null == t6?.[1]) return null;
    const { method: s11 } = this.functionArguments;
    return i11(t6, s11, this.outputPixelType, this._categoryConfig);
  }
  _getWebGLParameters() {
    const e9 = this.outputPixelType ?? "f32";
    let [t6, s11] = u(e9);
    const r12 = r4(e9);
    return r12 && (t6 -= 1e-4, s11 += 1e-4), { method: this.functionArguments.method, domainRange: [t6, s11], isOutputRounded: r12 };
  }
  _updateAttributeTable(e9, t6, s11) {
    const n17 = this.sourceRasterInfos.map((e10) => e10.attributeTable), o9 = n17.map((e10, s12) => e10.features.map((e11) => e11.attributes[t6[s12]])), a30 = n17.map((e10, t7) => e10.features.map((e11) => e11.attributes[s11[t7]])), i27 = o9.map((e10) => {
      const t7 = [];
      return e10.forEach((e11, s12) => t7[e11] = s12), t7;
    }), { keepMethod: u22 } = this.functionArguments;
    this._categoryConfig = { categoryIndexLookups: i27, classNames: a30, keepMethod: u22 };
    const l22 = n17[0].clone();
    l22.fields = [new m2({ name: "OID", type: "oid" }), new m2({ name: "Value", type: "integer" }), new m2({ name: "ClassName", type: "string" }), new m2({ name: "Class_From", type: "string" }), new m2({ name: "Class_To", type: "string" })];
    const m16 = this._getFieldNames(n17, "red"), p19 = this._getFieldNames(n17, "green"), c36 = this._getFieldNames(n17, "blue"), d11 = [], g4 = 2 === m16.length && 2 === p19.length && 2 === c36.length;
    g4 && (d11.push(...n17.map((e10, t7) => e10.features.map((e11) => [e11.attributes[m16[t7]], e11.attributes[p19[t7]], e11.attributes[c36[t7]]]))), l22.fields.push(new m2({ name: "Red", type: "integer" }), new m2({ name: "Green", type: "integer" }), new m2({ name: "Blue", type: "integer" })));
    const h7 = l22.features[0].clone();
    h7.geometry = null;
    const f8 = [], [y4, C3] = o9.map((e10) => e10.length);
    let b3 = 1;
    for (let r12 = 0; r12 < y4; r12++) {
      const e10 = a30[0][r12];
      for (let t7 = 0; t7 < C3; t7++) {
        const s12 = a30[1][t7];
        if ("changed" === u22 && e10 === s12 || "unchanged" === u22 && e10 !== s12) continue;
        const n18 = h7.clone();
        n18.attributes = { OID: b3++, Value: r12 * C3 + t7, ClassName: e10 === s12 ? e10 : `${e10} -> ${s12}`, Class_From: e10, Class_To: s12 }, g4 && (n18.attributes.Red = d11[0][r12][0] + d11[1][t7][0] >> 1, n18.attributes.Green = d11[0][r12][1] + d11[1][t7][1] >> 1, n18.attributes.Blue = d11[0][r12][2] + d11[1][t7][2] >> 1), f8.push(n18);
      }
    }
    if ("changed" === u22) {
      const e10 = h7.clone();
      e10.attributes = { OID: b3++, Value: y4 * C3 + 1, ClassName: "No Change", Class_From: "Same", Class_To: "Same" }, f8.push(e10);
    } else if ("unchanged" === u22) {
      const e10 = h7.clone();
      e10.attributes = { OID: b3++, Value: y4 * C3 + 2, ClassName: "Changed", Class_From: "Any", Class_To: "Any" }, f8.push(e10);
    }
    l22.features = f8, e9.attributeTable = l22;
  }
  _getFieldNames(e9, t6) {
    return e9.map(({ fields: e10 }) => e10.find((e11) => e11.name.toLowerCase() === t6)?.name).filter((e10) => e10);
  }
  _getClassFieldName(e9) {
    const t6 = e9.fields.find((e10) => "string" === e10.type && e10.name.toLowerCase().startsWith("class")) ?? e9.fields.find((e10) => "string" === e10.type && e10.name.toLowerCase().includes("class") || e10.name.toLowerCase().includes("type") || e10.name.toLowerCase().includes("name")) ?? e9.fields.find((e10) => "string" === e10.type);
    return t6?.name;
  }
};
r([m({ json: { write: true, name: "rasterFunction" } })], l12.prototype, "functionName", void 0), r([m({ type: n7, json: { write: true, name: "rasterFunctionArguments" } })], l12.prototype, "functionArguments", void 0), r([m()], l12.prototype, "rasterArgumentNames", void 0), r([m({ json: { write: true } })], l12.prototype, "_categoryConfig", void 0), l12 = r([a2("esri.layers.support.rasterFunctions.ComputeChangeFunction")], l12);
var m12 = l12;

// node_modules/@arcgis/core/layers/support/rasterFunctions/ContrastBrightnessFunctionArguments.js
var e7;
var n8 = e7 = class extends p2 {
  constructor() {
    super(...arguments), this.contrastOffset = 0, this.brightnessOffset = 0;
  }
  clone() {
    return new e7({ contrastOffset: this.contrastOffset, brightnessOffset: this.brightnessOffset, raster: this.raster });
  }
};
r([m({ json: { write: true } })], n8.prototype, "contrastOffset", void 0), r([m({ json: { write: true } })], n8.prototype, "brightnessOffset", void 0), n8 = e7 = r([a2("esri.layers.support.rasterFunctions.ContrastBrightnessFunctionArguments")], n8);
var i13 = n8;

// node_modules/@arcgis/core/layers/support/rasterFunctions/ContrastBrightnessFunction.js
var u14 = class extends p3 {
  constructor() {
    super(...arguments), this.functionName = "ContrastBrightness", this.functionArguments = null, this.rasterArgumentNames = ["raster"], this.lookup = null;
  }
  _bindSourceRasters() {
    const { sourceRasterInfos: t6 } = this, s11 = t6[0];
    if ("u8" !== s11.pixelType) return { success: false, supportsGPU: false, error: "Only unsigned 8 bit raster is supported by ContrastBrightness function." };
    this.outputPixelType = this._getOutputPixelType("u8");
    const r12 = s11.clone();
    this._removeStatsHistColormapVAT(r12), this.rasterInfo = r12;
    const { contrastOffset: o9, brightnessOffset: e9 } = this.functionArguments;
    return this.lookup = u3(o9, e9), { success: true, supportsGPU: true };
  }
  _processPixels(t6) {
    const s11 = t6.pixelBlocks?.[0];
    return null == s11 ? null : c3(s11, { lut: s11.pixels.map(() => this.lookup), offset: 0, outputPixelType: "u8" });
  }
  _getWebGLParameters() {
    const { contrastOffset: t6, brightnessOffset: s11 } = this.functionArguments;
    return { contrastOffset: t6, brightnessOffset: s11 };
  }
};
r([m({ json: { write: true, name: "rasterFunction" } })], u14.prototype, "functionName", void 0), r([m({ type: i13, json: { write: true, name: "rasterFunctionArguments" } })], u14.prototype, "functionArguments", void 0), r([m()], u14.prototype, "rasterArgumentNames", void 0), r([m({ json: { write: true } })], u14.prototype, "lookup", void 0), u14 = r([a2("esri.layers.support.rasterFunctions.ContrastBrightnessFunction")], u14);
var p10 = u14;

// node_modules/@arcgis/core/layers/support/rasterFunctions/mirror.js
function o7(o9, t6, f8, r12, l22) {
  const e9 = Math.floor(r12 / 2);
  for (let c36 = 0; c36 < e9; c36++) for (let r13 = 0; r13 < t6; r13++) o9[c36 * t6 + r13] = o9[(l22 - 1 - c36) * t6 + r13], o9[(f8 - 1 - c36) * t6 + r13] = o9[(f8 - l22 + c36) * t6 + r13];
  const n17 = Math.floor(l22 / 2);
  for (let c36 = 0; c36 < f8; c36++) {
    const f9 = c36 * t6;
    for (let r13 = 0; r13 < n17; r13++) o9[f9 + r13] = o9[f9 + l22 - 1 - r13], o9[f9 + t6 - r13 - 1] = o9[f9 + t6 + r13 - l22];
  }
}

// node_modules/@arcgis/core/layers/support/rasterFunctions/convolutionUtils.js
var l13 = /* @__PURE__ */ new Map();
function o8(e9) {
  const t6 = Math.sqrt(e9.length), n17 = e9.slice(0, t6), l22 = [1];
  for (let o9 = 1; o9 < t6; o9++) {
    let n18 = null;
    for (let l23 = 0; l23 < t6; l23++) {
      const r12 = e9[l23 + o9 * t6], s11 = e9[l23];
      if (null == n18) if (0 === s11) {
        if (r12) return { separable: false, row: null, col: null };
      } else n18 = r12 / s11;
      else if (r12 / s11 !== n18) return { separable: false, row: null, col: null };
    }
    if (null == n18) return { separable: false, row: null, col: null };
    l22.push(n18);
  }
  return { separable: true, row: n17, col: l22 };
}
function r9(e9, t6, n17, l22, o9, r12, s11) {
  const i27 = new Float32Array(t6 * n17), a30 = r12.length, h7 = s11 ? 0 : l22, c36 = s11 ? l22 : 0, p19 = s11 ? 1 : t6;
  for (let u22 = h7; u22 < n17 - h7; u22++) {
    const n18 = u22 * t6;
    for (let s12 = c36; s12 < t6 - c36; s12++) {
      if (o9 && !o9[n18 + s12]) continue;
      let t7 = 0;
      for (let o10 = 0; o10 < a30; o10++) t7 += e9[n18 + s12 + (o10 - l22) * p19] * r12[o10];
      i27[n18 + s12] = t7;
    }
  }
  return i27;
}
function s8(e9, t6, n17, l22, o9, r12, s11) {
  const i27 = new Float32Array(t6 * n17), a30 = Math.floor(l22 / 2), h7 = Math.floor(o9 / 2);
  for (let c36 = a30; c36 < n17 - a30; c36++) {
    const n18 = c36 * t6;
    for (let c37 = h7; c37 < t6 - h7; c37++) {
      if (r12 && !r12[n18 + c37]) continue;
      let p19 = 0;
      for (let r13 = 0; r13 < l22; r13++) for (let l23 = 0; l23 < o9; l23++) p19 += e9[n18 + c37 + (r13 - a30) * t6 + l23 - h7] * s11[r13 * o9 + l23];
      i27[n18 + c37] = p19;
    }
  }
  return i27;
}
function i14(t6, l22, o9 = true) {
  const { pixels: r12, width: i27, height: a30, pixelType: h7, mask: c36 } = t6, p19 = r12.length, u22 = [], { kernel: f8, rows: g4, cols: m16 } = l22;
  for (let e9 = 0; e9 < p19; e9++) {
    const t7 = s8(r12[e9], i27, a30, g4, m16, c36, f8);
    o9 && o7(t7, i27, a30, g4, m16), u22.push(t7);
  }
  return new c2({ width: i27, height: a30, pixelType: h7, pixels: u22, mask: c36 });
}
function a17(t6, l22, o9, s11 = true) {
  const { pixels: i27, width: a30, height: h7, pixelType: c36, mask: p19 } = t6, u22 = i27.length, f8 = [], g4 = l22.length, m16 = o9.length, x6 = Math.floor(g4 / 2), w6 = Math.floor(m16 / 2);
  for (let e9 = 0; e9 < u22; e9++) {
    let t7 = r9(i27[e9], a30, h7, x6, p19, l22, true);
    t7 = r9(t7, a30, h7, w6, p19, o9, false), s11 && o7(t7, a30, h7, g4, m16), f8.push(t7);
  }
  return new c2({ width: a30, height: h7, pixelType: c36, pixels: f8, mask: p19 });
}
function h5(e9, t6) {
  const n17 = o8(t6.kernel), l22 = false !== t6.mirrorEdges, r12 = n17.separable ? a17(e9, n17.row, n17.col, l22) : i14(e9, t6, l22), { outputPixelType: s11 } = t6;
  return s11 && r12.clamp(s11), r12;
}
l13.set(D2.none, [0, 0, 0, 0, 1, 0, 0, 0, 0]), l13.set(D2.lineDetectionHorizontal, [-1, -1, -1, 2, 2, 2, -1, -1, -1]), l13.set(D2.lineDetectionVertical, [-1, 2, -1, -1, 2, -1, -1, 2, -1]), l13.set(D2.lineDetectionLeftDiagonal, [2, -1, -1, -1, 2, -1, -1, -1, 2]), l13.set(D2.lineDetectionRightDiagonal, [-1, -1, 2, -1, 2, -1, 2, -1, -1]), l13.set(D2.gradientNorth, [-1, -2, -1, 0, 0, 0, 1, 2, 1]), l13.set(D2.gradientWest, [-1, 0, 1, -2, 0, 2, -1, 0, 1]), l13.set(D2.gradientEast, [1, 0, -1, 2, 0, -2, 1, 0, -1]), l13.set(D2.gradientSouth, [1, 2, 1, 0, 0, 0, -1, -2, -1]), l13.set(D2.gradientNorthEast, [0, -1, -2, 1, 0, -1, 2, 1, 0]), l13.set(D2.gradientNorthWest, [-2, -1, 0, -1, 0, 1, 0, 1, 2]), l13.set(D2.smoothArithmeticMean, [0.111111111111, 0.111111111111, 0.111111111111, 0.111111111111, 0.111111111111, 0.111111111111, 0.111111111111, 0.111111111111, 0.111111111111]), l13.set(D2.smoothing3x3, [0.0625, 0.125, 0.0625, 0.125, 0.25, 0.125, 0.0625, 0.125, 0.0625]), l13.set(D2.smoothing5x5, [1, 1, 1, 1, 1, 1, 4, 4, 4, 1, 1, 4, 12, 4, 1, 1, 4, 4, 4, 1, 1, 1, 1, 1, 1]), l13.set(D2.sharpening3x3, [-1, -1, -1, -1, 9, -1, -1, -1, -1]), l13.set(D2.sharpening5x5, [-1, -3, -4, -3, -1, -3, 0, 6, 0, -3, -4, 6, 21, 6, -4, -3, 0, 6, 0, -3, -1, -3, -4, -3, -1]), l13.set(D2.laplacian3x3, [0, -1, 0, -1, 4, -1, 0, -1, 0]), l13.set(D2.laplacian5x5, [0, 0, -1, 0, 0, 0, -1, -2, -1, 0, -1, -2, 17, -2, -1, 0, -1, -2, -1, 0, 0, 0, -1, 0, 0]), l13.set(D2.sobelHorizontal, [-1, -2, -1, 0, 0, 0, 1, 2, 1]), l13.set(D2.sobelVertical, [-1, 0, 1, -2, 0, 2, -1, 0, 1]), l13.set(D2.sharpen, [0, -0.25, 0, -0.25, 2, -0.25, 0, -0.25, 0]), l13.set(D2.sharpen2, [-0.25, -0.25, -0.25, -0.25, 3, -0.25, -0.25, -0.25, -0.25]), l13.set(D2.pointSpread, [-0.627, 0.352, -0.627, 0.352, 2.923, 0.352, -0.627, 0.352, -0.627]);

// node_modules/@arcgis/core/layers/support/rasterFunctions/ConvolutionFunctionArguments.js
var p11;
var c16 = p11 = class extends p2 {
  constructor() {
    super(...arguments), this.rows = 3, this.cols = 3, this.kernel = [0, 0, 0, 0, 1, 0, 0, 0, 0];
  }
  set convolutionType(o9) {
    this._set("convolutionType", o9);
    const t6 = l13.get(o9);
    if (!t6 || o9 === D2.userDefined || o9 === D2.none) return;
    const s11 = Math.sqrt(t6.length);
    this._set("kernel", t6), this._set("cols", s11), this._set("rows", s11);
  }
  clone() {
    return new p11({ cols: this.cols, rows: this.rows, kernel: [...this.kernel], convolutionType: this.convolutionType, raster: a(this.raster) });
  }
};
r([m({ json: { type: Number, write: true } })], c16.prototype, "rows", void 0), r([m({ json: { type: Number, write: true } })], c16.prototype, "cols", void 0), r([m({ json: { name: "type", type: Number, write: true } })], c16.prototype, "convolutionType", null), r([m({ json: { type: [Number], write: true } })], c16.prototype, "kernel", void 0), c16 = p11 = r([a2("esri.layers.support.rasterFunctions.ConvolutionFunctionArguments")], c16);
var l14 = c16;

// node_modules/@arcgis/core/layers/support/rasterFunctions/ConvolutionFunction.js
var l15 = 25;
var c17 = class extends p3 {
  constructor() {
    super(...arguments), this.functionName = "Convolution", this.rasterArgumentNames = ["raster"];
  }
  get _normalizedKernel() {
    const { kernel: t6, convolutionType: e9 } = this.functionArguments, o9 = t6.reduce((t7, e10) => t7 + e10);
    return -1 === e9 || 0 === o9 || 1 === o9 ? t6 : t6.map((t7) => t7 / o9);
  }
  _bindSourceRasters() {
    const { convolutionType: t6, rows: e9, cols: o9, kernel: r12 } = this.functionArguments;
    if (!Object.values(D2).includes(t6)) return { success: false, supportsGPU: false, error: `convolution-function: the specified kernel type is not supported ${t6}` };
    if (t6 !== D2.none && e9 * o9 !== r12.length) return { success: false, supportsGPU: false, error: "convolution-function: the specified rows and cols do not match the length of the kernel" };
    const n17 = this.sourceRasterInfos[0];
    this.outputPixelType = this._getOutputPixelType(n17.pixelType);
    const i27 = n17.clone();
    i27.pixelType = this.outputPixelType;
    const u22 = [D2.none, D2.sharpen, D2.sharpen2, D2.sharpening3x3, D2.sharpening5x5];
    (-1 === t6 || "u8" !== this.outputPixelType && !u22.includes(t6)) && (i27.statistics = null, i27.histograms = null), i27.colormap = null, i27.attributeTable = null, this.rasterInfo = i27;
    return { success: true, supportsGPU: r12.length <= l15 };
  }
  _processPixels(t6) {
    const e9 = t6.pixelBlocks?.[0];
    if (null == e9 || this.functionArguments.convolutionType === D2.none) return e9;
    const { rows: o9, cols: r12 } = this.functionArguments, { _normalizedKernel: n17 } = this;
    return h5(e9, { kernel: n17, rows: o9, cols: r12, outputPixelType: this.outputPixelType });
  }
  _getWebGLParameters() {
    const t6 = new Float32Array(l15), { rows: e9, cols: o9 } = this.functionArguments, { _normalizedKernel: s11 } = this;
    for (let r12 = 0; r12 < e9; r12++) for (let e10 = 0; e10 < o9; e10++) t6[5 * r12 + e10] = s11[r12 * o9 + e10];
    return { kernelRows: e9, kernelCols: o9, kernel: t6, clampRange: u(this.outputPixelType) };
  }
};
r([m({ json: { write: true, name: "rasterFunction" } })], c17.prototype, "functionName", void 0), r([m({ type: l14, json: { write: true, name: "rasterFunctionArguments" } })], c17.prototype, "functionArguments", void 0), r([m()], c17.prototype, "rasterArgumentNames", void 0), r([m()], c17.prototype, "_normalizedKernel", null), c17 = r([a2("esri.layers.support.rasterFunctions.ConvolutionFunction")], c17);
var p12 = c17;

// node_modules/@arcgis/core/layers/support/rasterFunctions/CurvatureFunctionArguments.js
var c18;
var u15 = new o2({ 0: "standard", 1: "planform", 2: "profile" }, { useNumericKeys: true });
var n9 = c18 = class extends p2 {
  constructor() {
    super(...arguments), this.curvatureType = "standard", this.zFactor = 1;
  }
  readCurvatureType(r12, e9) {
    return u15.fromJSON(e9.type ?? e9.curvatureType ?? 0);
  }
  clone() {
    return new c18({ curvatureType: this.curvatureType, zFactor: this.zFactor, raster: this.raster });
  }
};
r([m({ json: { write: { target: "type" } } }), r3(u15)], n9.prototype, "curvatureType", void 0), r([o("curvatureType", ["type", "curvatureType"])], n9.prototype, "readCurvatureType", null), r([m({ type: Number, json: { write: true } })], n9.prototype, "zFactor", void 0), n9 = c18 = r([a2("esri.layers.support.rasterFunctions.CurvatureFunctionArguments")], n9);
var i15 = n9;

// node_modules/@arcgis/core/layers/support/rasterFunctions/CurvatureFunction.js
var u16 = class extends p3 {
  constructor() {
    super(...arguments), this.functionName = "Curvature", this.functionArguments = null, this.rasterArgumentNames = ["raster"], this.isGCS = false;
  }
  _bindSourceRasters() {
    this.outputPixelType = this._getOutputPixelType("f32");
    const t6 = this.sourceRasterInfos[0].clone();
    return t6.pixelType = this.outputPixelType, t6.bandCount = 1, this._removeStatsHistColormapVAT(t6), this.rasterInfo = t6, this.isGCS = t6.spatialReference?.isGeographic ?? false, { success: true, supportsGPU: true };
  }
  _processPixels(t6) {
    const r12 = t6.pixelBlocks?.[0];
    if (null == r12) return null;
    const { zFactor: e9, curvatureType: s11 } = this.functionArguments, { extent: o9, primaryPixelSizes: u22 } = t6, c36 = u22?.[0], a30 = c36 ?? (o9 ? { x: o9.width / r12.width, y: o9.height / r12.height } : { x: 1, y: 1 }), p19 = this.isGCS && e9 >= 1 ? e9 * n : e9;
    return f3(r12, { zFactor: p19, curvatureType: s11, resolution: a30 });
  }
  _getWebGLParameters() {
    const { zFactor: t6, curvatureType: r12 } = this.functionArguments;
    return { curvatureType: r12, zFactor: this.isGCS && t6 >= 1 ? t6 * n : t6 };
  }
};
r([m({ json: { write: true, name: "rasterFunction" } })], u16.prototype, "functionName", void 0), r([m({ type: i15, json: { write: true, name: "rasterFunctionArguments" } })], u16.prototype, "functionArguments", void 0), r([m()], u16.prototype, "rasterArgumentNames", void 0), r([m({ json: { write: true } })], u16.prototype, "isGCS", void 0), u16 = r([a2("esri.layers.support.rasterFunctions.CurvatureFunction")], u16);
var c19 = u16;

// node_modules/@arcgis/core/layers/support/rasterFunctions/ExtractBandFunctionArguments.js
var a18;
var i16 = a18 = class extends p2 {
  constructor() {
    super(...arguments), this.bandIds = [], this.bandNames = [], this.bandWavelengths = [], this.missingBandAction = i2.bestMatch;
  }
  clone() {
    return new a18({ bandIds: this.bandIds?.slice(), bandNames: this.bandNames?.slice(), bandWavelengths: this.bandWavelengths?.slice(), missingBandAction: this.missingBandAction, method: this.method, wavelengthMatchTolerance: this.wavelengthMatchTolerance });
  }
};
r([m({ json: { write: true } })], i16.prototype, "bandIds", void 0), r([m({ json: { write: true } })], i16.prototype, "bandNames", void 0), r([m({ json: { write: true } })], i16.prototype, "bandWavelengths", void 0), r([r3({ 0: "name", 1: "wavelength", 2: "id" })], i16.prototype, "method", void 0), r([m({ json: { write: true } })], i16.prototype, "missingBandAction", void 0), r([m({ json: { write: true } })], i16.prototype, "wavelengthMatchTolerance", void 0), i16 = a18 = r([a2("esri.layers.support.rasterFunctions.ExtractBandFunctionArguments")], i16);
var c20 = i16;

// node_modules/@arcgis/core/layers/support/rasterFunctions/ExtractBandFunction.js
var a19 = class extends p3 {
  constructor() {
    super(...arguments), this.functionName = "ExtractBand", this.functionArguments = null, this.rasterArgumentNames = ["raster"];
  }
  _bindSourceRasters() {
    const { functionArguments: t6, sourceRasterInfos: n17 } = this, e9 = n17[0], { method: s11, bandNames: r12, bandWavelengths: o9, bandIds: a30, missingBandAction: l22 } = t6, h7 = r12?.length && ("name" === s11 || "id" !== s11 && !a30?.length), m16 = o9?.length && ("wavelength" === s11 || "id" !== s11 && !a30?.length), p19 = l22 === i2.fail, g4 = h7 ? u17(e9, r12) : m16 ? d9(e9, o9, this.functionArguments, p19) : c21(e9, a30, p19);
    if (null == g4) {
      return { success: false, supportsGPU: false, error: `extract-band-function: Invalid ${h7 ? "band names" : m16 ? "band wavelengths" : "band ids"} for the imagery data source` };
    }
    this.functionArguments.bandIds = g4, this.functionArguments.method = "id", this.outputPixelType = this._getOutputPixelType("f32");
    const f8 = e9.clone();
    f8.pixelType = this.outputPixelType, f8.bandCount = g4.length;
    const { statistics: b3, histograms: x6 } = f8;
    null != b3 && b3.length && (f8.statistics = g4.map((t7) => b3[t7] || b3[b3.length - 1])), null != x6 && x6.length && (f8.histograms = g4.map((t7) => x6[t7] || x6[x6.length - 1])), f8.multidimensionalInfo && f8.multidimensionalInfo.variables.forEach((t7) => {
      const { statistics: n18, histograms: e10 } = t7;
      null != n18 && n18.length && (t7.statistics = g4.map((t8) => n18[t8] || n18[n18.length - 1])), null != e10 && e10.length && (t7.histograms = g4.map((t8) => e10[t8] || e10[e10.length - 1]));
    });
    let I3 = f8.keyProperties?.BandProperties;
    I3?.length && (I3 = g4.map((t7) => t7 >= I3.length ? I3[I3.length - 1] : I3[t7]), f8.keyProperties = { ...f8.keyProperties, BandProperties: I3 }), this.rasterInfo = f8;
    return { success: true, supportsGPU: f8.bandCount <= 3 };
  }
  _processPixels(t6) {
    const n17 = t6.pixelBlocks?.[0];
    if (null == n17) return null;
    const e9 = n17.pixels.length, s11 = this.functionArguments.bandIds.map((t7) => t7 >= e9 ? e9 - 1 : t7);
    return n17.extractBands(s11);
  }
  _getWebGLParameters() {
    let t6;
    if (this.isInputBandIdsSwizzled) t6 = this.swizzledBandSelection.length ? this.swizzledBandSelection : [0, 1, 2];
    else {
      t6 = [...this.functionArguments.bandIds], 0 === t6.length ? t6 = [0, 1, 2] : t6.length < 3 && (t6[1] = t6[1] ?? t6[0], t6[2] = t6[2] ?? t6[1]);
      for (let n17 = 0; n17 < 3; n17++) t6[n17] = Math.min(t6[n17], 2);
    }
    return { bandIndexMat3: c8(t6) };
  }
  _getInputBandIds(t6) {
    const n17 = t6.length;
    return this.functionArguments.bandIds.map((t7) => t7 >= n17 ? n17 - 1 : t7).map((n18) => t6[n18]);
  }
  _swizzleBandIds(t6) {
    const n17 = this.functionArguments.bandIds.map((n18) => t6.indexOf(n18));
    return this.isInputBandIdsSwizzled = true, n17[1] ??= n17[0], n17[2] ??= n17[1], this.swizzledBandSelection = n17, false;
  }
};
r([m({ json: { write: true, name: "rasterFunction" } })], a19.prototype, "functionName", void 0), r([m({ type: c20, json: { write: true, name: "rasterFunctionArguments" } })], a19.prototype, "functionArguments", void 0), r([m()], a19.prototype, "rasterArgumentNames", void 0), a19 = r([a2("esri.layers.support.rasterFunctions.ExtractBandFunction")], a19);
var l16 = a19;
function u17(t6, n17) {
  const e9 = t6.bandInfos.map(({ name: t7 }) => t7.toLowerCase()), s11 = [];
  for (let r12 = 0; r12 < n17.length; r12++) {
    const t7 = n17[r12].toLowerCase();
    let o9 = e9.indexOf(t7);
    if (-1 === o9 && "nearinfrared" === t7 && (o9 = e9.findIndex((t8) => t8.startsWith("nearinfrared_1")), -1 === o9 && (o9 = e9.findIndex((t8) => t8.startsWith("nearinfrared")))), -1 === o9) return null;
    s11.push(o9);
  }
  return s11;
}
function c21(t6, n17, e9) {
  const { bandCount: s11 } = t6;
  return !n17?.length || e9 && n17.some((t7) => t7 < 0 || t7 >= s11) ? null : n17;
}
function d9(t6, n17, { wavelengthMatchTolerance: e9 }, s11) {
  const { bandInfos: r12 } = t6, o9 = [];
  for (let a30 = 0; a30 < r12.length; a30++) {
    const { minWavelength: t7, maxWavelength: n18 } = r12[a30];
    if (!t7 || !n18) return null;
    o9.push({ minWavelength: t7, maxWavelength: n18 });
  }
  const i27 = [];
  for (let a30 = 0; a30 < n17.length; a30++) {
    const t7 = n17[a30];
    let r13 = false, l22 = -1, u22 = Number.MAX_VALUE;
    for (let n18 = 0; n18 < o9.length; n18++) {
      const e10 = o9[n18], s12 = t7 >= e10.minWavelength && t7 <= e10.maxWavelength, i28 = Math.abs(t7 - (e10.minWavelength + e10.maxWavelength) / 2);
      s12 ? i28 < u22 && (r13 = true, l22 = n18, u22 = i28) : !r13 && i28 < u22 && (l22 = n18, u22 = i28);
    }
    if (!r13 && e9 && u22 < e9 && (r13 = true), !r13 && s11) return null;
    i27.push(l22);
  }
  return i27;
}

// node_modules/@arcgis/core/layers/support/rasterFunctions/conversionUtils.js
function i17(i27, s11, a30) {
  const { pixels: l22, width: n17, height: r12, mask: o9, bandMasks: h7 } = i27, p19 = n17 * r12, m16 = h7?.length ? c2.combineBandMasks(h7) : o9, f8 = Math.min(s11.length, l22.length), c36 = a30.startsWith("f"), d11 = !c36 && a30 !== i27.pixelType, [x6, g4] = u(a30), k5 = c2.createEmptyBand(a30, p19);
  for (let t6 = 0; t6 < r12; t6++) {
    let e9 = t6 * n17;
    for (let t7 = 0; t7 < n17; t7++, e9++) if (!m16 || m16[e9]) {
      let t8 = 0;
      for (let i28 = 0; i28 < f8; i28++) t8 += s11[i28] * l22[i28][e9];
      c36 || (t8 = Math.round(t8), d11 && (t8 = t8 > g4 ? g4 : t8 < x6 ? x6 : t8)), k5[e9] = t8;
    }
  }
  const u22 = new c2({ width: n17, height: r12, pixels: [k5], pixelType: a30, mask: m16 });
  return u22.updateStatistics(), u22;
}

// node_modules/@arcgis/core/layers/support/rasterFunctions/GrayscaleFunctionArguments.js
var t5;
var a20 = t5 = class extends p2 {
  clone() {
    return new t5({ conversionParameters: [...this.conversionParameters], raster: this.raster });
  }
};
r([m({ type: [Number], json: { write: true } })], a20.prototype, "conversionParameters", void 0), a20 = t5 = r([a2("esri.layers.support.rasterFunctions.GrayscaleFunctionArguments")], a20);
var c22 = a20;

// node_modules/@arcgis/core/layers/support/rasterFunctions/GrayscaleFunction.js
var i18 = class extends p3 {
  constructor() {
    super(...arguments), this.functionName = "Grayscale", this.functionArguments = null, this.rasterArgumentNames = ["raster"];
  }
  get _normalizedWeights() {
    const { conversionParameters: t6 } = this.functionArguments, e9 = t6.reduce((t7, e10) => t7 + e10);
    return t6.map((t7) => t7 / e9);
  }
  _bindSourceRasters() {
    const { conversionParameters: t6 } = this.functionArguments;
    if (!t6?.length) return { success: false, supportsGPU: false, error: "missing valid conversion parameters." };
    const e9 = this.sourceRasterInfos[0].clone();
    this.outputPixelType = this._getOutputPixelType(e9.pixelType), e9.pixelType = this.outputPixelType;
    const s11 = 3 === t6.length || 3 === e9.bandCount && t6.length > 3;
    return e9.bandCount = 1, this._removeStatsHistColormapVAT(e9), this.rasterInfo = e9, { success: true, supportsGPU: s11 };
  }
  _processPixels(t6) {
    const e9 = t6.pixelBlocks?.[0];
    return null == e9 ? null : i17(e9, this._normalizedWeights, this.outputPixelType);
  }
  _getWebGLParameters() {
    return { weights: this._normalizedWeights };
  }
};
r([m({ json: { write: true, name: "rasterFunction" } })], i18.prototype, "functionName", void 0), r([m({ type: c22, json: { write: true, name: "rasterFunctionArguments" } })], i18.prototype, "functionArguments", void 0), r([m()], i18.prototype, "rasterArgumentNames", void 0), r([m()], i18.prototype, "_normalizedWeights", null), i18 = r([a2("esri.layers.support.rasterFunctions.GrayscaleFunction")], i18);
var u18 = i18;

// node_modules/@arcgis/core/layers/support/rasterFunctions/HillshadeFunctionArguments.js
var p13;
var a21 = new o2({ 0: "traditional", 1: "multi-directional" }, { useNumericKeys: true });
var c23 = new o2({ 1: "degree", 2: "percent-rise", 3: "scaled" }, { useNumericKeys: true });
var l17 = p13 = class extends p2 {
  constructor() {
    super(...arguments), this.altitude = 45, this.azimuth = 315, this.hillshadeType = "traditional", this.pixelSizePower = 0.664, this.pixelSizeFactor = 0.024, this.slopeType = "degree", this.zFactor = 1, this.removeEdgeEffect = false;
  }
  clone() {
    return new p13({ hillshadeType: this.hillshadeType, altitude: this.altitude, azimuth: this.azimuth, zFactor: this.zFactor, slopeType: this.slopeType, pixelSizeFactor: this.pixelSizeFactor, pixelSizePower: this.pixelSizePower, removeEdgeEffect: this.removeEdgeEffect, raster: this.raster });
  }
};
r([m({ type: Number, json: { write: true } })], l17.prototype, "altitude", void 0), r([m({ type: Number, json: { write: true } })], l17.prototype, "azimuth", void 0), r([m(), r3(a21)], l17.prototype, "hillshadeType", void 0), r([m({ type: Number, json: { write: true, name: "psPower" } })], l17.prototype, "pixelSizePower", void 0), r([m({ type: Number, json: { write: true, name: "psZFactor" } })], l17.prototype, "pixelSizeFactor", void 0), r([m(), r3(c23)], l17.prototype, "slopeType", void 0), r([m({ type: Number, json: { write: true } })], l17.prototype, "zFactor", void 0), r([m({ type: Boolean, json: { write: true } })], l17.prototype, "removeEdgeEffect", void 0), l17 = p13 = r([a2("esri.layers.support.rasterFunctions.HillshadeFunctionArguments")], l17);
var m13 = l17;

// node_modules/@arcgis/core/layers/support/rasterFunctions/HillshadeFunction.js
var c24 = class extends p3 {
  constructor() {
    super(...arguments), this.functionName = "Hillshade", this.functionArguments = null, this.rasterArgumentNames = ["raster"], this.isGCS = false;
  }
  _bindSourceRasters() {
    const t6 = this.sourceRasterInfos[0];
    if (t6.bandCount > 1) return { success: false, supportsGPU: false, error: "hillshade-function: source data must be single band" };
    this.outputPixelType = this._getOutputPixelType("u8");
    const s11 = t6.clone();
    return this._removeStatsHistColormapVAT(s11), s11.pixelType = this.outputPixelType, s11.bandCount = 1, s11.statistics = [{ min: 0, max: 255, avg: 60, stddev: 10 }], this.rasterInfo = s11, this.isGCS = s11.spatialReference?.isGeographic ?? false, { success: true, supportsGPU: true };
  }
  _processPixels(t6) {
    const s11 = t6.pixelBlocks?.[0];
    if (!s11) return null;
    const { extent: e9, primaryPixelSizes: r12 } = t6, o9 = r12?.[0], i27 = o9 ?? (e9 ? { x: e9.width / s11.width, y: e9.height / s11.height } : { x: 1, y: 1 }), p19 = d3(this.functionArguments, i27, this.isGCS), a30 = r6(s11, p19);
    return a30.pixelType = this.outputPixelType, a30;
  }
  _getWebGLParameters() {
    const t6 = d3(this.functionArguments, { x: 1, y: 1 }, this.isGCS), s11 = a6(t6), { slopeType: e9, zFactor: o9, pixelSizeFactor: i27, pixelSizePower: u22 } = this.functionArguments, c36 = "scaled" === e9, l22 = r4(this.outputPixelType);
    return { ...s11, zFactor: o9, gcsFactor: this.isGCS ? n : 1, pixelSizeFactor: c36 ? i27 : 0, pixelSizePower: c36 ? u22 : 0, isOutputRounded: l22 };
  }
};
r([m({ json: { write: true, name: "rasterFunction" } })], c24.prototype, "functionName", void 0), r([m({ type: m13, json: { write: true, name: "rasterFunctionArguments" } })], c24.prototype, "functionArguments", void 0), r([m()], c24.prototype, "rasterArgumentNames", void 0), r([m({ json: { write: true } })], c24.prototype, "isGCS", void 0), c24 = r([a2("esri.layers.support.rasterFunctions.HillshadeFunction")], c24);
var l18 = c24;

// node_modules/@arcgis/core/layers/support/rasterFunctions/LocalFunctionArguments.js
var i19;
var a22 = i19 = class extends p2 {
  constructor() {
    super(...arguments), this.rasters = [], this.processAsMultiband = true;
  }
  writeRasters(r12, s11) {
    s11.rasters = r12.map((r13) => "number" == typeof r13 || "string" == typeof r13 ? r13 : r13.toJSON());
  }
  clone() {
    return new i19({ operation: this.operation, processAsMultiband: this.processAsMultiband, rasters: a(this.rasters) });
  }
};
r([m({ json: { write: true } })], a22.prototype, "operation", void 0), r([m({ json: { write: true } })], a22.prototype, "rasters", void 0), r([r2("rasters")], a22.prototype, "writeRasters", null), r([m({ json: { write: true } })], a22.prototype, "processAsMultiband", void 0), a22 = i19 = r([a2("esri.layers.support.rasterFunctions.LocalFunctionArguments")], a22);
var c25 = a22;

// node_modules/@arcgis/core/layers/support/rasterFunctions/LocalFunction.js
var m14 = class extends p3 {
  constructor() {
    super(...arguments), this.functionName = "Local", this.functionArguments = null, this.rasterArgumentNames = ["rasters"];
  }
  _bindSourceRasters() {
    const { sourceRasterInfos: t6 } = this, s11 = t6[0], { bandCount: e9 } = s11, { processAsMultiband: o9 } = this.functionArguments;
    if (t6.some((t7) => t7.bandCount !== e9)) return { success: false, supportsGPU: false, error: "local-function: input rasters do not have same band count" };
    const { operation: n17, rasters: r12 } = this.functionArguments, i27 = c6[n17];
    if (!(999 === i27 || r12.length === i27 || r12.length <= 1 && 1 === i27)) return { success: false, supportsGPU: false, error: `local-function: the length of functionArguments.rasters does not match operation's requirement: ${i27}` };
    const a30 = s11.clone();
    a30.bandCount = 999 !== i27 || o9 ? e9 : 1, this._removeStatsHistColormapVAT(a30), this._updateStatistics(a30), this._updatePixelType(a30), this.rasterInfo = a30;
    return { success: true, supportsGPU: 1 === a30.bandCount && i27 <= 3 };
  }
  _processPixels(t6) {
    const { pixelBlocks: s11 } = t6;
    return null == s11 || s11.some((t7) => null == t7) ? null : gt(s11, this.functionArguments.operation, { processAsMultiband: this.functionArguments.processAsMultiband, outputPixelType: this.outputPixelType ?? void 0 });
  }
  _getWebGLParameters() {
    const { operation: t6 } = this.functionArguments, s11 = c6[t6], e9 = Object.keys(m6).find((s12) => m6[s12] === t6)?.toLowerCase() ?? "undefined", i27 = this.outputPixelType ?? "f32";
    let [a30, u22] = u(i27);
    const p19 = r4(i27);
    return p19 && (a30 -= 1e-4, u22 += 1e-4), { imageCount: s11, operationName: e9, domainRange: [a30, u22], isOutputRounded: p19 };
  }
  _updateStatistics(t6) {
    const s11 = this.sourceRasterInfos[0], { operation: e9 } = this.functionArguments, o9 = l7(e9)?.domain;
    if (o9) {
      t6.statistics = [];
      for (let s12 = 0; s12 < t6.bandCount; s12++) t6.statistics[s12] = { min: o9[0], max: o9[1], avg: (o9[0] + o9[1]) / 2, stddev: (o9[0] + o9[1]) / 10 };
    } else 45 === e9 && s11.statistics?.length && (t6.statistics = s11.statistics.map((t7) => ({ min: -t7.max, max: -t7.min, avg: null != t7.avg ? -t7.avg : void 0, stddev: null != t7.stddev ? -t7.stddev : void 0 })));
  }
  _updatePixelType(t6) {
    const { statistics: s11, pixelType: e9 } = this.sourceRasterInfos[0], { operation: o9 } = this.functionArguments, { domain: n17, isInteger: a30 } = l7(o9) ?? { domain: null, isInteger: false };
    let u22 = "f32";
    if (n17 && a30) u22 = i(n17[0], n17[1]);
    else if (30 === o9) {
      const t7 = s11?.[0];
      u22 = t7 ? i(t7.min, t7.max) : r4(e9) ? e9 : "s32";
    } else if (45 === o9 && r4(e9)) {
      const t7 = s11?.map(({ max: t8 }) => -t8), o10 = s11?.map(({ min: t8 }) => -t8), n18 = t7?.length ? Math.min(...t7) : null, r12 = o10?.length ? Math.min(...o10) : null;
      u22 = null != n18 && null != r12 ? i(n18, r12) : e9.startsWith("s") ? e9.replace("s", "u") : "u1" === e9 || "u2" === e9 || "u4" === e9 ? "s8" : "u8" === e9 ? "s16" : "s32";
    }
    t6.pixelType = this.outputPixelType = this._getOutputPixelType(u22);
  }
};
r([m({ json: { write: true, name: "rasterFunction" } })], m14.prototype, "functionName", void 0), r([m({ type: c25, json: { write: true, name: "rasterFunctionArguments" } })], m14.prototype, "functionArguments", void 0), r([m()], m14.prototype, "rasterArgumentNames", void 0), m14 = r([a2("esri.layers.support.rasterFunctions.LocalFunction")], m14);
var d10 = m14;

// node_modules/@arcgis/core/layers/support/rasterFunctions/MaskFunctionArguments.js
var s9;
var a23 = s9 = class extends p2 {
  constructor() {
    super(...arguments), this.includedRanges = null, this.noDataValues = null, this.noDataInterpretation = l4.matchAny;
  }
  get normalizedNoDataValues() {
    const { noDataValues: t6 } = this;
    if (!t6?.length) return null;
    let e9 = false;
    const r12 = t6.map((t7) => {
      if ("number" == typeof t7) return e9 = true, [t7];
      if ("string" == typeof t7) {
        const r13 = t7.trim().split(" ").filter((t8) => "" !== t8.trim()).map((t8) => Number(t8));
        return e9 = e9 || r13.length > 0, 0 === r13.length ? null : r13;
      }
      return null;
    });
    return e9 ? r12 : null;
  }
  clone() {
    return new s9({ includedRanges: this.includedRanges?.slice() ?? [], noDataValues: this.noDataValues?.slice() ?? [], noDataInterpretation: this.noDataInterpretation });
  }
};
r([m({ json: { write: true } })], a23.prototype, "includedRanges", void 0), r([m({ json: { write: true } })], a23.prototype, "noDataValues", void 0), r([m()], a23.prototype, "normalizedNoDataValues", null), r([m({ json: { write: true } })], a23.prototype, "noDataInterpretation", void 0), a23 = s9 = r([a2("esri.layers.support.rasterFunctions.MaskFunctionArguments")], a23);
var i20 = a23;

// node_modules/@arcgis/core/layers/support/rasterFunctions/MaskFunction.js
var c26 = class extends p3 {
  constructor() {
    super(...arguments), this.functionName = "Mask", this.functionArguments = null, this.rasterArgumentNames = ["raster"];
  }
  _bindSourceRasters() {
    const t6 = this.sourceRasterInfos[0].clone(), { pixelType: e9 } = t6;
    this.outputPixelType = this._getOutputPixelType(e9), t6.pixelType = this.outputPixelType, this.rasterInfo = t6;
    const { includedRanges: s11, normalizedNoDataValues: o9 } = this.functionArguments;
    if (!s11?.length && !o9?.length) return { success: false, supportsGPU: false, error: "missing includedRanges or noDataValues argument" };
    let r12 = [];
    for (let a30 = 0; a30 < t6.bandCount; a30++) {
      const t7 = M(e9, s11?.slice(2 * a30, 2 * a30 + 2), o9?.[a30]);
      if (null == t7) {
        r12 = null;
        break;
      }
      r12.push(t7);
    }
    this.lookups = r12;
    const n17 = null != o9 && o9.every((t7) => t7?.length === o9[0]?.length);
    return { success: true, supportsGPU: (!s11 || s11.length <= 2 * o3) && (!o9 || n17 && o9[0].length <= o3) };
  }
  _processPixels(t6) {
    const e9 = t6.pixelBlocks?.[0];
    if (null == e9) return null;
    const { outputPixelType: s11, lookups: o9 } = this, { includedRanges: r12, noDataInterpretation: n17, normalizedNoDataValues: u22 } = this.functionArguments, a30 = n17 === l4.matchAll;
    return w2(e9, { includedRanges: r12, noDataValues: u22, outputPixelType: s11, matchAll: a30, lookups: o9 });
  }
  _getWebGLParameters() {
    const { includedRanges: t6, normalizedNoDataValues: s11 } = this.functionArguments, o9 = new Float32Array(o3);
    o9.fill(q), s11?.[0]?.length && o9.set(s11[0]);
    const r12 = new Float32Array(6);
    for (let n17 = 0; n17 < r12.length; n17 += 2) r12[n17] = t6?.[n17] ?? -q, r12[n17 + 1] = t6?.[n17 + 1] ?? q;
    return t6?.length && r12.set(t6), { bandCount: this.sourceRasterInfos[0].bandCount, noDataValues: o9, includedRanges: r12 };
  }
};
r([m({ json: { write: true, name: "rasterFunction" } })], c26.prototype, "functionName", void 0), r([m({ type: i20, json: { write: true, name: "rasterFunctionArguments" } })], c26.prototype, "functionArguments", void 0), r([m()], c26.prototype, "rasterArgumentNames", void 0), r([m({ json: { write: true } })], c26.prototype, "lookups", void 0), c26 = r([a2("esri.layers.support.rasterFunctions.MaskFunction")], c26);
var p14 = c26;

// node_modules/@arcgis/core/layers/support/rasterFunctions/NDVIFunctionArguments.js
var i21;
var e8 = i21 = class extends p2 {
  constructor() {
    super(...arguments), this.visibleBandID = 0, this.infraredBandID = 1, this.scientificOutput = false;
  }
  clone() {
    const { visibleBandID: r12, infraredBandID: t6, scientificOutput: s11 } = this;
    return new i21({ visibleBandID: r12, infraredBandID: t6, scientificOutput: s11 });
  }
};
r([m({ json: { write: true } })], e8.prototype, "visibleBandID", void 0), r([m({ json: { write: true } })], e8.prototype, "infraredBandID", void 0), r([m({ json: { write: true } })], e8.prototype, "scientificOutput", void 0), e8 = i21 = r([a2("esri.layers.support.rasterFunctions.NDVIFunctionArguments")], e8);
var n10 = e8;

// node_modules/@arcgis/core/layers/support/rasterFunctions/NDVIFunction.js
var u19 = class extends p3 {
  constructor() {
    super(...arguments), this.functionName = "NDVI", this.functionArguments = null, this.rasterArgumentNames = ["raster"];
  }
  _bindSourceRasters() {
    const { scientificOutput: t6, visibleBandID: s11, infraredBandID: e9 } = this.functionArguments;
    this.outputPixelType = this._getOutputPixelType(t6 ? "f32" : "u8");
    const n17 = this.sourceRasterInfos[0], r12 = Math.max(s11, e9);
    if (n17.bandCount < 2 || r12 >= n17.bandCount) return { success: false, supportsGPU: false, error: "ndvi-function: source raster has insufficient amount of raster bands" };
    if (s11 < 0 || e9 < 0) return { success: false, supportsGPU: false, error: "ndvi-function: invalid visible or infrared band id" };
    const i27 = n17.clone();
    i27.pixelType = this.outputPixelType, this._removeStatsHistColormapVAT(i27), i27.bandCount = 1, i27.keyProperties = { ...i27.keyProperties, BandProperties: void 0 };
    const [o9, u22, a30, c36] = t6 ? [-1, 1, 0, 0.1] : [0, 200, 100, 10];
    return i27.statistics = [{ min: o9, max: u22, avg: a30, stddev: c36 }], this.rasterInfo = i27, { success: true, supportsGPU: true };
  }
  _processPixels(t6) {
    const s11 = t6.pixelBlocks?.[0];
    if (null == s11) return null;
    const { visibleBandID: e9, infraredBandID: r12, scientificOutput: i27 } = this.functionArguments;
    return l9(s11, e9, r12, !i27);
  }
  _getWebGLParameters() {
    const { visibleBandID: t6, infraredBandID: s11, scientificOutput: e9 } = this.functionArguments, n17 = this.isInputBandIdsSwizzled ? [0, 1, 2] : [s11, t6, 0];
    return { bandIndexMat3: c8(n17), scaled: !e9 };
  }
  _getInputBandIds(t6) {
    const { visibleBandID: s11, infraredBandID: e9 } = this.functionArguments;
    return [e9, s11, 0].map((s12) => t6[s12]);
  }
  _swizzleBandIds(t6) {
    const { visibleBandID: s11, infraredBandID: e9 } = this.functionArguments, n17 = [s11, e9].map((s12) => t6.indexOf(s12));
    return n17[2] = n17[1], this.isInputBandIdsSwizzled = true, this.swizzledBandSelection = n17, false;
  }
};
r([m({ json: { write: true, name: "rasterFunction" } })], u19.prototype, "functionName", void 0), r([m({ type: n10, json: { write: true, name: "rasterFunctionArguments" } })], u19.prototype, "functionArguments", void 0), r([m()], u19.prototype, "rasterArgumentNames", void 0), u19 = r([a2("esri.layers.support.rasterFunctions.NDVIFunction")], u19);
var a24 = u19;

// node_modules/@arcgis/core/layers/support/rasterFunctions/RemapFunctionArguments.js
var n11;
var a25 = n11 = class extends p2 {
  constructor() {
    super(...arguments), this.inputRanges = null, this.outputValues = null, this.noDataRanges = null, this.allowUnmatched = false, this.isLastInputRangeInclusive = false;
  }
  clone() {
    return new n11({ inputRanges: [...this.inputRanges], outputValues: [...this.outputValues], noDataRanges: [...this.noDataRanges], allowUnmatched: this.allowUnmatched, isLastInputRangeInclusive: this.isLastInputRangeInclusive });
  }
};
r([m({ json: { write: true } })], a25.prototype, "inputRanges", void 0), r([m({ json: { write: true } })], a25.prototype, "outputValues", void 0), r([m({ json: { write: true } })], a25.prototype, "noDataRanges", void 0), r([m({ json: { write: true } })], a25.prototype, "allowUnmatched", void 0), r([m({ json: { write: true } })], a25.prototype, "replacementValue", void 0), r([m({ json: { write: true } })], a25.prototype, "isLastInputRangeInclusive", void 0), a25 = n11 = r([a2("esri.layers.support.rasterFunctions.RemapFunctionArguments")], a25);
var r10 = a25;

// node_modules/@arcgis/core/layers/support/rasterFunctions/RemapFunction.js
var g3 = class extends p3 {
  constructor() {
    super(...arguments), this.functionName = "Remap", this.functionArguments = null, this.rasterArgumentNames = ["raster"], this.lookup = null;
  }
  _bindSourceRasters() {
    const t6 = this.sourceRasterInfos[0].clone(), { pixelType: e9 } = t6;
    t6.bandCount = 1;
    const { statistics: s11 } = t6;
    this._removeStatsHistColormapVAT(t6);
    const { allowUnmatched: n17, replacementValue: a30, outputValues: r12, inputRanges: l22, noDataRanges: p19, isLastInputRangeInclusive: m16 } = this.functionArguments, c36 = "unknown" === this.outputPixelType || null == this.outputPixelType;
    if (this.outputPixelType = this._getOutputPixelType(e9), r12?.length) {
      const u22 = s11?.[0];
      if (n17 && null == a30) {
        let e10 = u22?.min ?? r12[0], s12 = u22?.max ?? r12[0];
        e10 = Math.min.apply(null, [...r12, e10]), s12 = Math.max.apply(null, [...r12, s12]), t6.statistics = [{ min: e10, max: s12, avg: u22?.avg ?? 0, stddev: u22?.stddev ?? -1 }];
      } else {
        let e10 = r12[0], s12 = e10;
        for (let t7 = 0; t7 < r12.length; t7++) e10 = e10 > r12[t7] ? r12[t7] : e10, s12 = s12 > r12[t7] ? s12 : r12[t7];
        n17 && null != a30 && (e10 = Math.min(e10, a30), s12 = Math.max(s12, a30)), t6.statistics = [{ min: e10, max: s12, avg: u22?.avg ?? 0, stddev: u22?.stddev ?? -1 }];
      }
      if (c36) {
        const { min: s12, max: u23 } = t6.statistics[0], i27 = ["u8", "s8", "u16", "s16", "u32", "s32", "f32"], l23 = i27.find((t7) => {
          const [e10, n18] = u(t7);
          return s12 >= e10 && u23 <= n18;
        }) ?? "f64";
        r12.some((t7) => Math.floor(t7) !== t7) ? this.outputPixelType = "f64" === l23 ? "f64" : "f32" : this.outputPixelType = n17 && null == a30 && i27.indexOf(e9) > i27.indexOf(l23) ? e9 : l23;
      }
    }
    t6.pixelType = this.outputPixelType, this.rasterInfo = t6, this.lookup = n17 ? null : k({ srcPixelType: e9, inputRanges: l22, outputValues: r12, noDataRanges: p19, allowUnmatched: n17, isLastInputRangeInclusive: m16, outputPixelType: this.outputPixelType });
    return { success: true, supportsGPU: (!r12 || r12.length <= o3) && (!p19 || p19.length <= o3) };
  }
  _processPixels(t6) {
    const e9 = t6.pixelBlocks?.[0];
    if (null == e9) return null;
    const { lookup: s11, outputPixelType: n17 } = this;
    if (s11) {
      const t7 = c3(e9, { lut: [s11.lut], offset: s11.offset, outputPixelType: n17 });
      return null != t7 && s11.mask && (t7.mask = u2(e9.pixels[0], e9.mask, s11.mask, s11.offset, "u8")), t7;
    }
    const { inputRanges: o9, outputValues: a30, noDataRanges: u22, allowUnmatched: i27, isLastInputRangeInclusive: m16, replacementValue: c36 } = this.functionArguments;
    return m5(e9, { inputRanges: o9, outputValues: a30, noDataRanges: u22, outputPixelType: n17, allowUnmatched: i27, isLastInputRangeInclusive: m16, replacementValue: c36 });
  }
  _getWebGLParameters() {
    const { allowUnmatched: t6, noDataRanges: s11, isLastInputRangeInclusive: n17 } = this.functionArguments, a30 = this.functionArguments.inputRanges ?? [], u22 = this.functionArguments.outputValues ?? [], r12 = x(a30, u22, n17), l22 = new Float32Array(2 * o3);
    l22.fill(q), s11?.length && l22.set(s11);
    return { allowUnmatched: t6, rangeMaps: r12, noDataRanges: l22, clampRange: u(this.outputPixelType), replacementValue: this.functionArguments.replacementValue };
  }
};
r([m({ json: { write: true, name: "rasterFunction" } })], g3.prototype, "functionName", void 0), r([m({ type: r10, json: { write: true, name: "rasterFunctionArguments" } })], g3.prototype, "functionArguments", void 0), r([m()], g3.prototype, "rasterArgumentNames", void 0), r([m({ json: { write: true } })], g3.prototype, "lookup", void 0), g3 = r([a2("esri.layers.support.rasterFunctions.RemapFunction")], g3);
var f6 = g3;

// node_modules/@arcgis/core/layers/support/rasterFunctions/ShadedReliefFunctionArguments.js
var a26;
var c27 = a26 = class extends m13 {
  readColorRamp(o9) {
    if ("string" == typeof o9) {
      const r12 = a3.jsonValues.find((r13) => r13.toLowerCase() === o9.toLowerCase());
      return r12 ? d(a3.fromJSON(r12)) : null;
    }
    return "toJSON" in o9 ? o9.toJSON() : o9;
  }
  clone() {
    return new a26({ hillshadeType: this.hillshadeType, altitude: this.altitude, azimuth: this.azimuth, zFactor: this.zFactor, slopeType: this.slopeType, pixelSizeFactor: this.pixelSizeFactor, pixelSizePower: this.pixelSizePower, removeEdgeEffect: this.removeEdgeEffect, colorRamp: this.colorRamp, colormap: this.colormap, raster: this.raster });
  }
};
r([m({ json: { write: true } })], c27.prototype, "colorRamp", void 0), r([o("colorRamp")], c27.prototype, "readColorRamp", null), r([m({ type: [[Number]], json: { write: true } })], c27.prototype, "colormap", void 0), c27 = a26 = r([a2("esri.layers.support.rasterFunctions.ShadedReliefFunctionArguments")], c27);
var l19 = c27;

// node_modules/@arcgis/core/layers/support/rasterFunctions/ShadedReliefFunction.js
var h6 = class extends p3 {
  constructor() {
    super(...arguments), this.functionName = "ShadedRelief", this.functionArguments = null, this.rasterArgumentNames = ["raster"], this.isGCS = false;
  }
  _bindSourceRasters() {
    const e9 = this.sourceRasterInfos[0];
    if (e9.bandCount > 1) return { success: false, supportsGPU: false, error: "shadedrelief-function: source data must be single band" };
    let { colorRamp: t6, colormap: s11 } = this.functionArguments;
    if (!t6 && !s11?.length) return { success: false, supportsGPU: false, error: "shadedrelief-function: a color ramp argument must be specified" };
    this.outputPixelType = this._getOutputPixelType("u8");
    const r12 = e9.clone();
    this._removeStatsHistColormapVAT(r12), r12.pixelType = this.outputPixelType, r12.bandCount = 3, r12.statistics = [{ min: 0, max: 255, avg: 60, stddev: 10 }, { min: 0, max: 255, avg: 60, stddev: 10 }, { min: 0, max: 255, avg: 60, stddev: 10 }], this.rasterInfo = r12, this.isGCS = r12.spatialReference?.isGeographic ?? false, s11?.length || (s11 = B(t6, { interpolateAlpha: true }));
    const { indexedColormap: o9, offset: n17 } = h({ colormap: s11 });
    if (!o9?.length) return { success: false, supportsGPU: false, error: "shadedrelief-function: a valid colorramp is required" };
    const p19 = D(o9);
    return this.lookup = { indexedColormap: o9, offset: n17, hsvMap: p19 }, { success: true, supportsGPU: a5(o9) };
  }
  _processPixels(e9) {
    const t6 = e9.pixelBlocks?.[0];
    if (!t6 || !this.lookup) return null;
    let s11 = e9.primaryPixelSizes?.[0];
    if (null == s11) {
      const { extent: r13 } = e9;
      s11 = r13 ? { x: r13.width / t6.width, y: r13.height / t6.height } : { x: 1, y: 1 };
    }
    const r12 = d3(this.functionArguments, s11, this.isGCS), o9 = r6(t6, r12), i27 = this.sourceRasterInfos[0].statistics?.[0] ?? { min: 0, max: 8e3 };
    return c4(o9, t6, this.lookup.hsvMap, i27), o9.pixelType = this.outputPixelType, o9;
  }
  _getWebGLParameters() {
    const e9 = d3(this.functionArguments, { x: 1, y: 1 }, this.isGCS), t6 = a6(e9), { slopeType: s11, zFactor: o9, pixelSizeFactor: i27, pixelSizePower: n17 } = this.functionArguments, a30 = "scaled" === s11, { indexedColormap: u22, offset: m16 } = this.lookup, d11 = this.sourceRasterInfos[0].statistics?.[0], f8 = r4(this.outputPixelType);
    return { ...t6, indexedColormap: u22, offset: m16, zFactor: o9, gcsFactor: this.isGCS ? n : 1, pixelSizeFactor: a30 ? i27 : 0, pixelSizePower: a30 ? n17 : 0, minValue: d11?.min ?? 0, maxValue: d11?.max ?? 8e3, isOutputRounded: f8 };
  }
};
r([m({ json: { write: true, name: "rasterFunction" } })], h6.prototype, "functionName", void 0), r([m({ type: l19, json: { write: true, name: "rasterFunctionArguments" } })], h6.prototype, "functionArguments", void 0), r([m()], h6.prototype, "rasterArgumentNames", void 0), r([m({ json: { write: true } })], h6.prototype, "isGCS", void 0), r([m({ json: { write: true } })], h6.prototype, "lookup", void 0), h6 = r([a2("esri.layers.support.rasterFunctions.ShadedReliefFunction")], h6);
var x4 = h6;

// node_modules/@arcgis/core/layers/support/rasterFunctions/SlopeFunctionArguments.js
var i22;
var c28 = new o2({ 1: "degree", 2: "percent-rise", 3: "adjusted" }, { useNumericKeys: true });
var a27 = i22 = class extends p2 {
  constructor() {
    super(...arguments), this.slopeType = "degree", this.zFactor = 1, this.pixelSizePower = 0.664, this.pixelSizeFactor = 0.024, this.removeEdgeEffect = false;
  }
  clone() {
    return new i22({ slopeType: this.slopeType, zFactor: this.zFactor, pixelSizePower: this.pixelSizePower, pixelSizeFactor: this.pixelSizeFactor, removeEdgeEffect: this.removeEdgeEffect, raster: this.raster });
  }
};
r([r3(c28)], a27.prototype, "slopeType", void 0), r([m({ type: Number, json: { write: true } })], a27.prototype, "zFactor", void 0), r([m({ type: Number, json: { name: "psPower", write: true } })], a27.prototype, "pixelSizePower", void 0), r([m({ type: Number, json: { name: "psZFactor", write: true } })], a27.prototype, "pixelSizeFactor", void 0), r([m({ type: Boolean, json: { write: true } })], a27.prototype, "removeEdgeEffect", void 0), a27 = i22 = r([a2("esri.layers.support.rasterFunctions.SlopeFunctionArguments")], a27);
var m15 = a27;

// node_modules/@arcgis/core/layers/support/rasterFunctions/SlopeFunction.js
var u20 = class extends p3 {
  constructor() {
    super(...arguments), this.functionName = "Slope", this.functionArguments = null, this.rasterArgumentNames = ["raster"], this.isGCS = false;
  }
  _bindSourceRasters() {
    this.outputPixelType = this._getOutputPixelType("f32");
    const e9 = this.sourceRasterInfos[0].clone();
    return e9.pixelType = this.outputPixelType, this._removeStatsHistColormapVAT(e9), e9.statistics = "percent-rise" !== this.functionArguments.slopeType ? [{ min: 0, max: 90, avg: 1, stddev: 1 }] : null, e9.bandCount = 1, this.rasterInfo = e9, this.isGCS = e9.spatialReference?.isGeographic ?? false, { success: true, supportsGPU: true };
  }
  _processPixels(e9) {
    const t6 = e9.pixelBlocks?.[0];
    if (null == t6) return null;
    const { zFactor: s11, slopeType: r12, pixelSizePower: o9, pixelSizeFactor: i27 } = this.functionArguments, { isGCS: n17 } = this, { extent: u22, primaryPixelSizes: c36 } = e9, a30 = c36?.[0], l22 = a30 ?? (u22 ? { x: u22.width / t6.width, y: u22.height / t6.height } : { x: 1, y: 1 });
    return h2(t6, { zFactor: s11, slopeType: r12, pixelSizePower: o9, pixelSizeFactor: i27, isGCS: n17, resolution: l22 });
  }
  _getWebGLParameters() {
    const { zFactor: e9, slopeType: t6, pixelSizeFactor: s11, pixelSizePower: o9 } = this.functionArguments;
    return { zFactor: this.isGCS && e9 >= 1 ? e9 * n : e9, slopeType: t6, pixelSizeFactor: s11 ?? 0, pixelSizePower: o9 ?? 0, isOutputRounded: r4(this.outputPixelType) };
  }
};
r([m({ json: { write: true, name: "rasterFunction" } })], u20.prototype, "functionName", void 0), r([m({ type: m15, json: { write: true, name: "rasterFunctionArguments" } })], u20.prototype, "functionArguments", void 0), r([m()], u20.prototype, "rasterArgumentNames", void 0), r([m({ json: { write: true } })], u20.prototype, "isGCS", void 0), u20 = r([a2("esri.layers.support.rasterFunctions.SlopeFunction")], u20);
var c29 = u20;

// node_modules/@arcgis/core/layers/support/rasterFunctions/focalStatUtils.js
var n12 = new o2({ 1: "min", 2: "max", 3: "mean", 4: "stddev", 5: "median", 6: "majority", 7: "minority" }, { useNumericKeys: true });
function s10(t6, e9) {
  const { fillNoDataOnly: o9 } = e9, { band: n17, width: s11, height: r12, mask: i27, outBand: l22 } = t6;
  if (o9 && !i27) return void l22.set(n17);
  const { statisticsType: a30, kernelRows: c36, kernelCols: f8 } = e9, h7 = "stddev" === a30, m16 = s11 * r12, u22 = new Float64Array(m16), d11 = new Float64Array(m16), y4 = new Uint32Array(m16);
  for (let A3 = 0; A3 < r12; A3++) {
    const t7 = A3 * s11;
    let e10 = 0, o10 = 0, r13 = 0;
    for (let s12 = 0; s12 < f8; s12++) i27 && !i27[t7 + s12] || (e10 += n17[t7 + s12], h7 && (o10 += n17[t7 + s12] ** 2), r13++);
    u22[t7] = e10, d11[t7] = o10, y4[t7] = r13;
    for (let l23 = 1; l23 <= s11 - f8; l23++) {
      const s12 = t7 + l23 - 1, a31 = s12 + f8;
      i27 ? (i27[s12] && (r13--, e10 -= n17[s12], h7 && (o10 -= n17[s12] ** 2)), i27[a31] && (r13++, e10 += n17[a31], h7 && (o10 += n17[a31] ** 2))) : (e10 -= n17[s12], e10 += n17[a31], h7 && (o10 -= n17[s12] ** 2, o10 += n17[a31] ** 2)), u22[t7 + l23] = e10, y4[t7 + l23] = r13, h7 && (d11[t7 + l23] = o10);
    }
  }
  const k5 = new Float64Array(m16), w6 = new Float64Array(m16), p19 = new Uint32Array(m16), M5 = c36 * s11;
  for (let A3 = 0; A3 <= s11 - f8; A3++) {
    let t7 = 0, e10 = 0, o10 = 0;
    for (let n18 = 0; n18 < c36; n18++) {
      const r13 = n18 * s11 + A3;
      t7 += u22[r13], o10 += y4[r13], h7 && (e10 += d11[r13]);
    }
    k5[A3] = t7, w6[A3] = e10, p19[A3] = o10;
    for (let n18 = 1; n18 <= r12 - c36; n18++) {
      const r13 = (n18 - 1) * s11 + A3, i28 = r13 + M5;
      t7 -= u22[r13], t7 += u22[i28], o10 -= y4[r13], o10 += y4[i28], h7 && (e10 -= d11[r13], e10 += d11[i28]), k5[n18 * s11 + A3] = t7, w6[n18 * s11 + A3] = e10, p19[n18 * s11 + A3] = o10;
    }
  }
  const g4 = Math.floor(c36 / 2), b3 = Math.floor(f8 / 2);
  for (let A3 = g4; A3 < r12 - g4; A3++) {
    const t7 = A3 * s11;
    for (let e10 = b3; e10 < s11 - b3; e10++) {
      const n18 = (A3 - g4) * s11 + e10 - b3, r13 = p19[n18];
      if (0 === r13 || o9 && (!i27 || i27[t7 + e10])) continue;
      const a31 = k5[n18] / r13, c37 = h7 ? Math.sqrt((w6[n18] - k5[n18] * a31) / r13) : a31;
      l22[t7 + e10] = c37, i27 && (i27[t7 + e10] = 255);
    }
  }
}
function r11(t6, e9) {
  const { fillNoDataOnly: o9 } = e9, { band: n17, width: s11, height: r12, mask: i27, outBand: l22 } = t6;
  if (o9 && !i27) return void l22.set(n17);
  const { kernelRows: a30, kernelCols: c36, statisticsType: f8 } = e9, h7 = Math.floor(a30 / 2), m16 = Math.floor(c36 / 2), u22 = "min" === f8, d11 = l22.slice(), y4 = new Uint32Array(s11 * r12);
  for (let k5 = h7; k5 < r12 - h7; k5++) {
    const t7 = k5 * s11;
    for (let e10 = m16; e10 < s11 - m16; e10++) {
      let o10 = u22 ? Number.MAX_VALUE : -Number.MAX_VALUE, r13 = 0;
      for (let l23 = 0; l23 < a30; l23++) for (let a31 = 0; a31 < c36; a31++) {
        const c37 = t7 + e10 + (l23 - h7) * s11 + a31 - m16;
        i27 && !i27[c37] || (o10 = u22 ? Math.min(o10, n17[c37]) : Math.max(o10, n17[c37]), r13++);
      }
      i27 ? (d11[t7 + e10] = 0 === r13 ? 0 : o10, y4[t7 + e10] = r13) : l22[t7 + e10] = 0 === r13 ? 0 : o10;
    }
  }
  if (i27) for (let k5 = h7; k5 < r12 - h7; k5++) {
    const t7 = k5 * s11;
    for (let e10 = m16; e10 < s11 - m16; e10++) if (y4[t7 + e10]) {
      if (o9 && i27[t7 + e10]) continue;
      l22[t7 + e10] = d11[t7 + e10], i27[t7 + e10] = 255;
    }
  }
}
function i23(t6, e9) {
  const { fillNoDataOnly: o9 } = e9, { band: n17, width: s11, height: r12, mask: i27, outBand: l22 } = t6;
  if (o9 && !i27) return void l22.set(n17);
  const { kernelRows: a30, kernelCols: c36 } = e9, f8 = Math.floor(a30 / 2), h7 = Math.floor(c36 / 2), m16 = l22.slice(), u22 = new Uint32Array(s11 * r12);
  for (let d11 = f8; d11 < r12 - f8; d11++) {
    const t7 = d11 * s11;
    for (let e10 = h7; e10 < s11 - h7; e10++) {
      if (o9 && i27?.[t7 + e10]) continue;
      const r13 = [];
      for (let o10 = 0; o10 < a30; o10++) for (let l23 = 0; l23 < c36; l23++) {
        const a31 = t7 + e10 + (o10 - f8) * s11 + l23 - h7;
        i27 && !i27[a31] || r13.push(n17[a31]);
      }
      r13.length && (r13.sort((t8, e11) => t8 - e11), i27 ? (m16[t7 + e10] = r13[Math.floor((r13.length - 1) / 2)], u22[t7 + e10] = r13.length) : l22[t7 + e10] = r13[Math.floor((r13.length - 1) / 2)]);
    }
  }
  if (i27) for (let d11 = f8; d11 < r12 - f8; d11++) {
    const t7 = d11 * s11;
    for (let e10 = h7; e10 < s11 - h7; e10++) if (u22[t7 + e10]) {
      if (o9 && i27[t7 + e10]) continue;
      l22[t7 + e10] = m16[t7 + e10], i27[t7 + e10] = 255;
    }
  }
}
function l20(t6, e9) {
  const { fillNoDataOnly: o9 } = e9, { band: n17, width: s11, height: r12, mask: i27, outBand: l22 } = t6;
  if (o9 && !i27) return void l22.set(n17);
  const { kernelRows: a30, kernelCols: c36 } = e9, f8 = Math.floor(a30 / 2), h7 = Math.floor(c36 / 2), m16 = "majority" === e9.statisticsType, u22 = a30 * c36, d11 = l22.slice(), y4 = new Uint32Array(s11 * r12);
  for (let k5 = f8; k5 < r12 - f8; k5++) {
    const t7 = k5 * s11;
    for (let e10 = h7; e10 < s11 - h7; e10++) {
      if (o9 && i27?.[t7 + e10]) continue;
      const r13 = /* @__PURE__ */ new Map();
      for (let o10 = 0; o10 < a30; o10++) for (let l23 = 0; l23 < c36; l23++) {
        const a31 = t7 + e10 + (o10 - f8) * s11 + l23 - h7;
        if (i27 && !i27[a31]) continue;
        const c37 = n17[a31];
        r13.set(c37, r13.has(c37) ? r13.get(c37) + 1 : 1);
      }
      if (0 === r13.size) continue;
      let k6 = 0, w6 = 0, p19 = m16 ? 0 : u22 + 1;
      for (const t8 of r13.keys()) w6 = r13.get(t8), m16 === w6 > p19 && (p19 = w6, k6 = t8);
      i27 ? (d11[t7 + e10] = k6, y4[t7 + e10] = r13.size) : l22[t7 + e10] = k6;
    }
  }
  if (i27) for (let k5 = f8; k5 < r12 - f8; k5++) {
    const t7 = k5 * s11;
    for (let e10 = h7; e10 < s11 - h7; e10++) if (y4[t7 + e10]) {
      if (o9 && i27[t7 + e10]) continue;
      l22[t7 + e10] = d11[t7 + e10], i27[t7 + e10] = 255;
    }
  }
}
function a28(t6, n17) {
  const { mask: a30 } = t6, { fillNoDataOnly: c36 } = n17;
  if (c36 && !a30) return t6;
  const { pixels: f8, width: h7, height: m16, bandMasks: u22, pixelType: d11 } = t6, y4 = f8.length, k5 = h7 * m16, w6 = [], { kernelRows: p19, kernelCols: M5, statisticsType: g4, mirrorEdges: b3 } = n17;
  if (c36 && !a30) return t6;
  const A3 = n17.outputPixelType ?? d11, x6 = [];
  for (let N2 = 0; N2 < y4; N2++) {
    const t7 = f8[N2], d12 = c2.createEmptyBand(A3, k5);
    c36 && d12.set(t7);
    const y5 = u22?.[N2] ?? a30, j4 = y5?.slice() ?? null, B6 = { band: t7, width: h7, height: m16, mask: j4, outBand: d12 };
    switch (g4) {
      case "min":
      case "max":
        r11(B6, n17);
        break;
      case "mean":
      case "stddev":
        s10(B6, n17);
        break;
      case "median":
        i23(B6, n17);
        break;
      case "majority":
      case "minority":
        l20(B6, n17);
    }
    b3 && !c36 && o7(d12, h7, m16, p19, M5), w6.push(d12), j4 && x6.push(j4);
  }
  let j3 = x6[0] ?? a30;
  x6.length !== y4 && (x6.length = 0), y4 > 1 && u22?.length && (j3 = c2.combineBandMasks(u22));
  const B5 = new c2({ pixelType: A3, width: h7, height: m16, pixels: w6, bandMasks: u22 && x6.length ? x6 : null, mask: j3 });
  return B5.updateStatistics(), B5;
}

// node_modules/@arcgis/core/layers/support/rasterFunctions/StatisticsFunctionArguments.js
var c30;
var p15 = c30 = class extends p2 {
  constructor() {
    super(...arguments), this.rows = 3, this.cols = 3, this.fillNoDataOnly = false, this.statisticsType = "min";
  }
  clone() {
    return new c30({ rows: this.rows, cols: this.cols, fillNoDataOnly: this.fillNoDataOnly, statisticsType: this.statisticsType, raster: a(this.raster) });
  }
};
r([m({ json: { write: true, read: { source: ["kernelRows", "rows"], reader: (s11, r12) => Number(s11 ?? r12?.kernelRows ?? 3) } } })], p15.prototype, "rows", void 0), r([m({ json: { write: true, read: { source: ["kernelCols", "cols"], reader: (s11, r12) => Number(s11 ?? r12?.kernelCols ?? 3) } } })], p15.prototype, "cols", void 0), r([m({ json: { write: true } })], p15.prototype, "fillNoDataOnly", void 0), r([m({ json: { read: { source: ["statisticsType", "type"], reader: (s11, r12) => n12.fromJSON(r12?.statisticsType ?? r12?.type) ?? "min" }, write: { target: "type" } } }), r3(n12)], p15.prototype, "statisticsType", void 0), p15 = c30 = r([a2("esri.layers.support.rasterFunctions.StatisticsFunctionArguments")], p15);
var l21 = p15;

// node_modules/@arcgis/core/layers/support/rasterFunctions/StatisticsFunction.js
var c31 = class extends p3 {
  constructor() {
    super(...arguments), this.functionName = "Statistics", this.rasterArgumentNames = ["raster"];
  }
  _bindSourceRasters() {
    const { type: t6 } = this.functionArguments.toJSON();
    if (t6 < 1 || t6 > 7) return { success: false, supportsGPU: false, error: `statistics-function: the given statistics type is not supported ${t6}` };
    const s11 = this.sourceRasterInfos[0];
    this.outputPixelType = this._getOutputPixelType(s11.pixelType);
    const e9 = s11.clone();
    e9.pixelType = this.outputPixelType;
    const { statisticsType: o9 } = this.functionArguments;
    "stddev" === o9 && this._removeStatsHistColormapVAT(e9), this.rasterInfo = e9;
    return { success: true, supportsGPU: e9.bandCount <= 3 && t6 < 5 };
  }
  _processPixels(t6) {
    const s11 = t6.pixelBlocks?.[0];
    if (null == s11) return s11;
    const { statisticsType: e9, rows: o9, cols: r12, fillNoDataOnly: n17 } = this.functionArguments;
    return a28(s11, { kernelRows: o9, kernelCols: r12, fillNoDataOnly: n17, outputPixelType: this.outputPixelType, statisticsType: e9, mirrorEdges: true });
  }
  _getWebGLParameters() {
    const { rows: t6, cols: s11, statisticsType: e9, fillNoDataOnly: r12 } = this.functionArguments;
    return { fillNoDataOnly: r12, kernelRows: t6, kernelCols: s11, statisticsType: e9, clampRange: u(this.outputPixelType) };
  }
};
r([m({ json: { write: true, name: "rasterFunction" } })], c31.prototype, "functionName", void 0), r([m({ type: l21, json: { write: true, name: "rasterFunctionArguments" } })], c31.prototype, "functionArguments", void 0), r([m()], c31.prototype, "rasterArgumentNames", void 0), c31 = r([a2("esri.layers.support.rasterFunctions.StatisticsFunction")], c31);
var p16 = c31;

// node_modules/@arcgis/core/layers/support/rasterFunctions/StatisticsHistogramFunctionArguments.js
var c32;
var n13 = c32 = class extends p2 {
  constructor() {
    super(...arguments), this.statistics = null, this.histograms = null;
  }
  readStatistics(t6, s11) {
    if (!t6?.length) return null;
    const r12 = [];
    return t6.forEach((t7) => {
      const s12 = { min: t7.min, max: t7.max, avg: t7.avg ?? t7.mean, stddev: t7.stddev ?? t7.standardDeviation };
      r12.push(s12);
    }), r12;
  }
  writeStatistics(t6, s11, r12) {
    if (!t6?.length) return;
    const o9 = [];
    t6.forEach((t7) => {
      const s12 = { ...t7, mean: t7.avg, standardDeviation: t7.stddev };
      delete s12.avg, delete s12.stddev, o9.push(s12);
    }), s11[r12] = o9;
  }
  clone() {
    return new c32({ statistics: a(this.statistics), histograms: a(this.histograms) });
  }
};
r([m({ json: { write: true } })], n13.prototype, "statistics", void 0), r([o("statistics")], n13.prototype, "readStatistics", null), r([r2("statistics")], n13.prototype, "writeStatistics", null), r([m({ json: { write: true } })], n13.prototype, "histograms", void 0), n13 = c32 = r([a2("esri.layers.support.rasterFunctions.StatisticsHistogramFunctionArguments")], n13);
var p17 = n13;

// node_modules/@arcgis/core/layers/support/rasterFunctions/StatisticsHistogramFunction.js
var i24 = class extends p3 {
  constructor() {
    super(...arguments), this.functionName = "StatisticsHistogram", this.functionArguments = null, this.rasterArgumentNames = ["raster"], this.isNoopProcess = true;
  }
  _bindSourceRasters() {
    const t6 = this.sourceRasterInfos[0];
    this.outputPixelType = this._getOutputPixelType("u8");
    const s11 = t6.clone(), { statistics: o9, histograms: r12 } = this.functionArguments;
    return r12 && (s11.histograms = r12), o9 && (s11.statistics = o9), this.rasterInfo = s11, { success: true, supportsGPU: true };
  }
  _processPixels(t6) {
    return t6.pixelBlocks?.[0];
  }
};
r([m({ json: { write: true, name: "rasterFunction" } })], i24.prototype, "functionName", void 0), r([m({ type: p17, json: { write: true, name: "rasterFunctionArguments" } })], i24.prototype, "functionArguments", void 0), r([m()], i24.prototype, "rasterArgumentNames", void 0), r([m({ json: { write: true } })], i24.prototype, "indexedColormap", void 0), r([m()], i24.prototype, "isNoopProcess", void 0), i24 = r([a2("esri.layers.support.rasterFunctions.StatisticsHistogramFunction")], i24);
var n14 = i24;

// node_modules/@arcgis/core/layers/support/rasterFunctions/StretchFunctionArguments.js
var n15;
var p18 = new o2({ 0: "none", 3: "standard-deviation", 4: "histogram-equalization", 5: "min-max", 6: "percent-clip", 9: "sigmoid" }, { useNumericKeys: true });
var c33 = n15 = class extends p2 {
  constructor() {
    super(...arguments), this.computeGamma = false, this.dynamicRangeAdjustment = false, this.gamma = [], this.histograms = null, this.statistics = null, this.stretchType = "none", this.useGamma = false;
  }
  writeStatistics(t6, e9, o9) {
    t6?.length && (Array.isArray(t6[0]) || (t6 = t6.map((t7) => [t7.min, t7.max, t7.avg, t7.stddev])), e9[o9] = t6);
  }
  clone() {
    return new n15({ stretchType: this.stretchType, outputMin: this.outputMin, outputMax: this.outputMax, useGamma: this.useGamma, computeGamma: this.computeGamma, statistics: a(this.statistics), gamma: a(this.gamma), sigmoidStrengthLevel: this.sigmoidStrengthLevel, numberOfStandardDeviations: this.numberOfStandardDeviations, minPercent: this.minPercent, maxPercent: this.maxPercent, histograms: a(this.histograms), dynamicRangeAdjustment: this.dynamicRangeAdjustment, raster: this.raster });
  }
};
r([m({ type: Boolean, json: { write: true } })], c33.prototype, "computeGamma", void 0), r([m({ type: Boolean, json: { name: "dra", write: true } })], c33.prototype, "dynamicRangeAdjustment", void 0), r([m({ type: [Number], json: { write: true } })], c33.prototype, "gamma", void 0), r([m()], c33.prototype, "histograms", void 0), r([m({ type: Number, json: { write: true } })], c33.prototype, "maxPercent", void 0), r([m({ type: Number, json: { write: true } })], c33.prototype, "minPercent", void 0), r([m({ type: Number, json: { write: true } })], c33.prototype, "numberOfStandardDeviations", void 0), r([m({ type: Number, json: { name: "max", write: true } })], c33.prototype, "outputMax", void 0), r([m({ type: Number, json: { name: "min", write: true } })], c33.prototype, "outputMin", void 0), r([m({ type: Number, json: { write: true } })], c33.prototype, "sigmoidStrengthLevel", void 0), r([m({ json: { type: [[Number]], write: true } })], c33.prototype, "statistics", void 0), r([r2("statistics")], c33.prototype, "writeStatistics", null), r([r3(p18)], c33.prototype, "stretchType", void 0), r([m({ type: Boolean, json: { write: true } })], c33.prototype, "useGamma", void 0), c33 = n15 = r([a2("esri.layers.support.rasterFunctions.StretchFunctionArguments")], c33);
var u21 = c33;

// node_modules/@arcgis/core/layers/support/rasterFunctions/StretchFunction.js
var c34 = class extends p3 {
  constructor() {
    super(...arguments), this.functionName = "Stretch", this.functionArguments = null, this.rasterArgumentNames = ["raster"], this.lookup = null, this.cutOffs = null;
  }
  _bindSourceRasters() {
    this.lookup = null, this.cutOffs = null;
    const t6 = this.sourceRasterInfos[0], { pixelType: s11 } = t6, { functionArguments: e9 } = this, { dynamicRangeAdjustment: r12, gamma: u22, useGamma: i27 } = e9;
    if (!r12 && ["u8", "u16", "s8", "s16"].includes(s11)) {
      const r13 = d2(e9.toJSON(), { rasterInfo: t6 }), a31 = r4(this.outputPixelType) ? "round" : "float";
      this.lookup = l5({ pixelType: s11, ...r13, gamma: i27 ? u22 : null, rounding: a31 }), this.cutOffs = r13;
    } else r12 || (this.cutOffs = d2(e9.toJSON(), { rasterInfo: t6 }));
    this.outputPixelType = this._getOutputPixelType(s11);
    const a30 = t6.clone();
    a30.pixelType = this.outputPixelType, this._removeStatsHistColormapVAT(a30), "u8" === this.outputPixelType && (a30.keyProperties.DataType = "processed");
    const { outputMin: m16 = 0, outputMax: c36 = 255 } = this.functionArguments;
    a30.statistics = [];
    for (let o9 = 0; o9 < a30.bandCount; o9++) a30.statistics[o9] = { min: m16, max: c36 };
    this.rasterInfo = a30;
    return { success: true, supportsGPU: !r12 };
  }
  _processPixels(t6) {
    const s11 = t6.pixelBlocks?.[0];
    if (null == s11) return s11;
    const { lookup: e9 } = this;
    if (e9) return c3(s11, { ...e9, outputPixelType: this.rasterInfo.pixelType });
    const { functionArguments: o9 } = this, r12 = this.cutOffs || d2(o9.toJSON(), { rasterInfo: this.sourceRasterInfos[0], pixelBlock: s11 }), i27 = o9.useGamma ? o9.gamma : null;
    return y(s11, { ...r12, gamma: i27, outputPixelType: this.outputPixelType });
  }
  _getWebGLParameters() {
    const { outputMin: t6 = 0, outputMax: s11 = 255, gamma: e9, useGamma: r12 } = this.functionArguments, u22 = this.rasterInfo.bandCount >= 2 ? 3 : 1, i27 = r12 && e9?.length ? M2(u22, e9) : [1, 1, 1], { minCutOff: n17, maxCutOff: p19 } = this.cutOffs ?? { minCutOff: [0, 0, 0], maxCutOff: [255, 255, 255] };
    1 === n17.length && (n17[1] = n17[2] = n17[0], p19[1] = p19[2] = p19[0]);
    const a30 = p19.map((e10, o9) => (s11 - t6) / (p19[o9] - n17[o9])), c36 = r4(this.outputPixelType), f8 = r12 && e9 ? [e9[0], e9[1] ?? e9[0], e9[2] ?? e9[0]] : [1, 1, 1], l22 = r12 ? [i27[0], i27[1] ?? i27[0], i27[2] ?? i27[0]] : [1, 1, 1];
    return { bandCount: u22, minOutput: t6, maxOutput: s11, minCutOff: n17, maxCutOff: p19, factor: a30, useGamma: r12, gamma: f8, gammaCorrection: l22, stretchType: this.functionArguments.stretchType, isOutputRounded: c36, type: "stretch" };
  }
};
r([m({ json: { write: true, name: "rasterFunction" } })], c34.prototype, "functionName", void 0), r([m({ type: u21, json: { write: true, name: "rasterFunctionArguments" } })], c34.prototype, "functionArguments", void 0), r([m()], c34.prototype, "rasterArgumentNames", void 0), r([m({ json: { write: true } })], c34.prototype, "lookup", void 0), r([m({ json: { write: true } })], c34.prototype, "cutOffs", void 0), c34 = r([a2("esri.layers.support.rasterFunctions.StretchFunction")], c34);
var f7 = c34;

// node_modules/@arcgis/core/layers/support/rasterFunctions/TableFunctionArguments.js
var c35;
var a29 = c35 = class extends p2 {
  constructor() {
    super(...arguments), this.attributeTableAsRecordSet = null;
  }
  clone() {
    return new c35({ attributeTableAsRecordSet: a(this.attributeTableAsRecordSet) });
  }
};
r([m({ json: { write: true } })], a29.prototype, "attributeTableAsRecordSet", void 0), a29 = c35 = r([a2("esri.layers.support.rasterFunctions.TableFunctionArguments")], a29);
var i25 = a29;

// node_modules/@arcgis/core/layers/support/rasterFunctions/TableFunction.js
var i26 = class extends p3 {
  constructor() {
    super(...arguments), this.functionName = "Table", this.functionArguments = null, this.rasterArgumentNames = ["raster"], this.isNoopProcess = true;
  }
  _bindSourceRasters() {
    const t6 = this.sourceRasterInfos[0];
    if (t6.bandCount > 1 || t6.pixelType.startsWith("f")) return { success: false, supportsGPU: false, error: "table-function: Source data must be single band and integer pixel type." };
    const { attributeTableAsRecordSet: e9 } = this.functionArguments;
    if (!e9) return { success: false, supportsGPU: false, error: "table-function: Missing attributeTableAsRecordSet argument." };
    this.outputPixelType = this._getOutputPixelType(t6.pixelType);
    const s11 = t6.clone();
    return s11.pixelType = this.outputPixelType, s11.bandCount = 1, "thematic" !== s11.dataType && (s11.keyProperties = s11.keyProperties ? { ...s11.keyProperties, DataType: "thematic" } : { DataType: "thematic" }), this.rasterInfo = s11, { success: true, supportsGPU: true };
  }
  _processPixels(t6) {
    return t6.pixelBlocks?.[0];
  }
};
r([m({ json: { write: true, name: "rasterFunction" } })], i26.prototype, "functionName", void 0), r([m({ type: i25, json: { write: true, name: "rasterFunctionArguments" } })], i26.prototype, "functionArguments", void 0), r([m()], i26.prototype, "rasterArgumentNames", void 0), r([m()], i26.prototype, "isNoopProcess", void 0), i26 = r([a2("esri.layers.support.rasterFunctions.TableFunction")], i26);
var n16 = i26;

// node_modules/@arcgis/core/layers/support/rasterFunctions/rasterFunctionHelper.js
var v3 = /* @__PURE__ */ new Map();
function w5(t6, e9) {
  const { rasterFunctionArguments: r12 } = t6;
  if (!r12) return;
  (r12.rasters || [r12.raster, r12.raster2]).forEach((t7) => {
    t7 && "number" != typeof t7 && ("string" == typeof t7 ? t7.startsWith("http") && (e9.includes(t7) || e9.push(t7)) : "rasterFunctionArguments" in t7 && w5(t7, e9));
  });
}
function T2(t6, n17) {
  n17 = n17 ?? {};
  try {
    if ("function" in (t6 = a(t6)) && "arguments" in t6 && t6.arguments) {
      const r12 = $2(t6, /* @__PURE__ */ new Map(), n17);
      if (L2(r12), !r12.renderingRule) throw new s("raster-function-helper", "Unsupported raster function json.");
      t6 = r12.renderingRule;
    }
    if ("rasterFunction" in t6) {
      const e9 = k4(t6 = B4(t6), n17);
      return e9.isRoot = true, e9;
    }
  } catch {
  }
  throw new s("raster-function-helper", "unsupported raster function json.");
}
function D4(t6, e9) {
  return "rasters" === e9[0] && Array.isArray(t6.rasters) ? t6.rasters : e9.map((e10) => t6[e10]);
}
function V3(t6) {
  return !!(t6 && "object" == typeof t6 && t6.rasterFunction && t6.rasterFunctionArguments);
}
function B4(t6) {
  const { rasterFunction: e9, rasterFunctionArguments: r12 } = t6, n17 = {};
  for (const o9 in r12) {
    let t7 = r12[o9];
    const e10 = o9.toLowerCase();
    if ("rasters" === e10 && Array.isArray(t7)) n17.rasters = t7.map((t8) => V3(t8) ? B4(t8) : t8);
    else switch (V3(t7) && (t7 = B4(t7)), e10) {
      case "dra":
        n17.dra = t7;
        break;
      case "pspower":
        n17.psPower = t7;
        break;
      case "pszfactor":
        n17.psZFactor = t7;
        break;
      case "bandids":
        n17.bandIds = t7;
        break;
      default:
        n17[o9[0].toLowerCase() + o9.slice(1)] = t7;
    }
  }
  return "Local" !== e9 || n17.rasters?.length || (n17.rasters = ["$$"]), { ...t6, rasterFunctionArguments: n17 };
}
function k4(t6, r12) {
  const { rasterFunction: n17, rasterFunctionArguments: o9 } = t6, s11 = t6.outputPixelType?.toLowerCase();
  if (null == n17 || !v3.has(n17)) throw new s("raster-function-helper", `unsupported raster function: ${n17}`);
  const a30 = v3.get(n17), i27 = ("function" == typeof a30.ctor ? a30.ctor : a30.ctor.default).fromJSON({ ...t6, outputPixelType: s11 }), { rasterArgumentNames: c36 } = i27, u22 = [], m16 = D4(o9, c36), l22 = "rasters" === c36[0] || c36.length > 1, p19 = [];
  for (let e9 = 0; e9 < m16.length; e9++) {
    const t7 = m16[e9];
    let n18;
    null == t7 || "string" == typeof t7 && t7.startsWith("$") ? u22.push(r12?.raster) : "string" == typeof t7 ? r12[t7] && u22.push(r12[t7]) : "number" != typeof t7 && "rasterFunction" in t7 && (n18 = k4(t7, r12), l22 || (i27.functionArguments[c36[e9]] = n18), u22.push(n18)), l22 && p19.push(n18 ?? t7);
  }
  if (l22 && ("rasters" === c36[0] ? i27.functionArguments.rasters = p19 : c36.forEach((t7, e9) => {
    i27.functionArguments[t7] = p19[e9];
  })), r12) {
    i27.sourceRasters = u22;
    const t7 = r12.raster?.url;
    t7 && (i27.mainPrimaryRasterId = t7);
  }
  return i27;
}
function x5(t6, e9) {
  if (t6 && e9) for (const r12 in t6) {
    const n17 = t6[r12];
    n17 && "object" == typeof n17 && "type" in n17 && ("RasterFunctionTemplate" === n17.type ? x5(n17.arguments, e9) : "RasterFunctionVariable" === n17.type && null != e9[n17.name] && (n17.value = e9[n17.name]));
  }
}
function E2(t6, r12) {
  if (!t6 || "object" != typeof t6) return t6;
  const { value: n17 } = t6;
  if (!n17 || "object" != typeof n17) return t6.isDataset ? "$$" : n17;
  if (Array.isArray(n17)) return 0 === n17.length ? [] : n17.map((t7) => t7 && "object" == typeof t7 && "RasterFunctionVariable" === t7.type ? E2(t7, r12) : t7);
  if ("value" in n17 && ["number", "string", "boolean"].includes(typeof n17.value)) return n17.value;
  if (t6.isDataset && "Scalar" !== n17.type) return "$$";
  if (!("type" in n17)) return n17;
  let o9 = n17;
  switch (n17.type) {
    case "Scalar":
      o9 = n17.value;
      break;
    case "AlgorithmicColorRamp":
      o9 = M4(n17);
      break;
    case "MultiPartColorRamp":
      o9 = { type: "multipart", colorRamps: n17.ArrayOfColorRamp.map(M4) };
      break;
    case "ArgumentArray":
      if (n17.elements?.length && "RasterStatistics" !== n17.elements[0].type) {
        const t7 = [];
        for (let o10 = 0; o10 < n17.elements.length; o10++) {
          const s11 = n17.elements[o10], { type: a30 } = s11;
          if (a30) if ("RasterFunctionTemplate" === a30) {
            const { renderingRule: e9 } = $2(s11, r12);
            t7.push(e9), null != s11._object_id && r12.set(s11._object_id, e9);
          } else {
            if ("RasterFunctionVariable" !== a30) throw new s("raster-function-helper", "unsupported raster function json.");
            {
              const e9 = E2(s11, r12);
              t7.push(e9), null != s11._object_id && r12.set(s11._object_id, e9);
            }
          }
          else t7.push(s11);
        }
        o9 = t7;
      } else o9 = n17.elements;
  }
  return null != n17._object_id && r12.set(n17._object_id, o9), o9;
}
function M4(e9) {
  const r12 = e9.algorithm ?? "esriHSVAlgorithm";
  let { FromColor: n17, ToColor: o9 } = e9;
  if (!Array.isArray(n17)) {
    const { r: e10, g: r13, b: o10 } = U({ h: n17.Hue, s: n17.Saturation, v: n17.Value });
    n17 = [e10, r13, o10, n17.AlphaValue];
  }
  if (!Array.isArray(o9)) {
    const { r: e10, g: r13, b: n18 } = U({ h: o9.Hue, s: o9.Saturation, v: o9.Value });
    o9 = [e10, r13, n18, o9.AlphaValue];
  }
  return { type: "algorithmic", algorithm: r12, fromColor: n17, toColor: o9 };
}
function $2(t6, e9, r12) {
  r12 && x5(t6, r12);
  const n17 = { renderingRule: {}, templates: e9 };
  return H2(t6, n17), n17;
}
function H2(t6, e9) {
  if (!t6 || !e9.renderingRule) return;
  const { renderingRule: r12, templates: n17 } = e9, { function: o9, arguments: s11, _object_id: a30 } = t6;
  if (!o9 || !s11) return;
  null != a30 && n17.set(a30, r12), r12.rasterFunction = o9.type.replace("Function", ""), r12.outputPixelType = o9.pixelType;
  const i27 = {};
  r12.rasterFunctionArguments = i27;
  for (const c36 in s11) {
    if ("type" === c36 || "object_id" === c36 || "_object_ref_id" === c36) continue;
    const t7 = s11[c36];
    t7 && "object" == typeof t7 && "type" in t7 && ("RasterFunctionTemplate" === t7.type || "RasterFunctionVariable" === t7.type) ? ("RasterFunctionVariable" === t7.type ? i27[c36] = E2(t7, n17) : (r12.rasterFunctionArguments[c36] = {}, H2(t7, { renderingRule: r12.rasterFunctionArguments[c36], templates: n17 })), null != t7._object_id && n17.set(t7._object_id, i27[c36])) : i27[c36] = t7;
  }
  switch (i27.DEM && !i27.Raster && (i27.Raster = i27.DEM, delete i27.DEM), r12.rasterFunction) {
    case "Stretch":
      O2(i27);
      break;
    case "Colormap":
      G2(i27);
      break;
    case "Convolution":
      P2(i27);
      break;
    case "Mask":
      I2(i27);
  }
}
function L2(t6) {
  const { renderingRule: r12, templates: n17 } = t6;
  if ("object" != typeof r12 || !r12?.rasterFunctionArguments || !n17.size) return;
  const { rasterFunctionArguments: o9 } = r12;
  for (const s11 in o9) {
    const t7 = o9[s11], r13 = "_object_ref_id" === s11 ? t7 : t7 && "object" == typeof t7 && "_object_ref_id" in t7 ? t7._object_ref_id : null;
    if (null == r13) t7 && "object" == typeof t7 && (t7.rasterFunctionArguments && L2({ renderingRule: t7, templates: n17 }), Array.isArray(t7) && t7.forEach((o10, s12) => {
      if (o10 && "object" == typeof o10) if (null != o10._object_ref_id) {
        if (!n17.has(o10._object_ref_id)) throw new s("raster-function-helper", `unsupported raster function json. _object_ref_id: ${t7} does not exist`);
        const a30 = n17.get(r13);
        a30 && "object" == typeof a30 ? Object.assign(o10, a30) : t7[s12] = a30;
      } else L2({ renderingRule: o10, templates: n17 });
    }));
    else {
      if (!n17.has(r13)) throw new s("raster-function-helper", `unsupported raster function json. _object_ref_id: ${r13} does not exist`);
      const t8 = n17.get(r13);
      "_object_ref_id" !== s11 ? o9[s11] = t8 : t8 && "object" == typeof t8 && Object.assign(o9, t8);
    }
  }
}
function O2(t6) {
  t6.Statistics?.length && "object" == typeof t6.Statistics && (t6.Statistics = t6.Statistics.map((t7) => [t7.min, t7.max, t7.mean, t7.standardDeviation])), null != t6.NumberOfStandardDeviation && (t6.NumberOfStandardDeviations = t6.NumberOfStandardDeviation, delete t6.NumberOfStandardDeviation);
}
function G2(t6) {
  "randomcolorramp" === t6.ColorRamp?.type?.toLowerCase() && (delete t6.ColorRamp, t6.ColormapName = "Random"), 0 === t6.ColorSchemeType && delete t6.ColorRamp;
}
function P2(t6) {
  null != t6.ConvolutionType && (t6.Type = t6.ConvolutionType, delete t6.ConvolutionType);
}
function I2(t6) {
  t6.NoDataValues?.length && "string" == typeof t6.NoDataValues[0] && (t6.NoDataValues = t6.NoDataValues.filter((t7) => "" !== t7).map((t7) => Number(t7)));
}
v3.set("Arithmetic", { desc: "Arithmetic Function", ctor: a10, rasterArgumentNames: ["rasters"] }), v3.set("Aspect", { desc: "Aspect Function", ctor: p7, rasterArgumentNames: ["raster"] }), v3.set("BandArithmetic", { desc: "Band Arithmetic Function", ctor: m9, rasterArgumentNames: ["raster"] }), v3.set("Colormap", { desc: "Colormap Function", ctor: u12, rasterArgumentNames: ["raster"] }), v3.set("ColormapToRGB", { desc: "ColormapToRGB Function", ctor: u13, rasterArgumentNames: ["raster"] }), v3.set("CompositeBand", { desc: "CompositeBand Function", ctor: a16, rasterArgumentNames: ["rasters"] }), v3.set("ComputeChange", { desc: "ComputeChange Function", ctor: m12, rasterArgumentNames: ["rasters"] }), v3.set("Convolution", { desc: "Convolution Function", ctor: p12, rasterArgumentNames: ["raster"] }), v3.set("ContrastBrightness", { desc: "Contrast Brightness Function", ctor: p10, rasterArgumentNames: ["raster"] }), v3.set("ExtractBand", { desc: "ExtractBand Function", ctor: l16, rasterArgumentNames: ["raster"] }), v3.set("Curvature", { desc: "Curvature Function", ctor: c19, rasterArgumentNames: ["raster"] }), v3.set("Hillshade", { desc: "Hillshade Function", ctor: l18, rasterArgumentNames: ["raster"] }), v3.set("ShadedRelief", { desc: "ShadedRelief Function", ctor: x4, rasterArgumentNames: ["raster"] }), v3.set("Grayscale", { desc: "Grayscale Function", ctor: u18, rasterArgumentNames: ["raster"] }), v3.set("Clip", { desc: "Clip Function", ctor: u10, rasterArgumentNames: ["raster"] }), v3.set("Local", { desc: "Local Function", ctor: d10, rasterArgumentNames: ["rasters"] }), v3.set("Mask", { desc: "Mask Function", ctor: p14, rasterArgumentNames: ["raster"] }), v3.set("NDVI", { desc: "NDVI Function", ctor: a24, rasterArgumentNames: ["raster"] }), v3.set("Remap", { desc: "Remap Function", ctor: f6, rasterArgumentNames: ["raster"] }), v3.set("Slope", { desc: "Slope Function", ctor: c29, rasterArgumentNames: ["raster"] }), v3.set("Statistics", { desc: "Focal Statistics Function", ctor: p16, rasterArgumentNames: ["raster"] }), v3.set("StatisticsHistogram", { desc: "Statistics Histogram Function", ctor: n14, rasterArgumentNames: ["raster"] }), v3.set("Stretch", { desc: "Stretch Function", ctor: f7, rasterArgumentNames: ["raster"] }), v3.set("Table", { desc: "Attribute Table Function", ctor: n16, rasterArgumentNames: ["raster"] });

export {
  w5 as w,
  T2 as T
};
//# sourceMappingURL=chunk-MEHT6AJM.js.map
