import {
  m
} from "./chunk-5GBXHGKW.js";
import {
  J,
  K,
  L,
  O,
  k
} from "./chunk-7NMH5MM5.js";
import {
  p2 as p
} from "./chunk-ZWFY3WY5.js";
import {
  s as s2
} from "./chunk-GZ2P4SCJ.js";
import {
  s
} from "./chunk-XWG6QGFK.js";

// node_modules/@arcgis/core/views/support/projectionUtils.js
var a;
var c = null;
async function l(e) {
  c || (c = import("./geometryServiceUtils-IXHCDX5A.js").then((t) => a = t)), await c, s2(e);
}
async function s3(t, i, c3, p4) {
  if (!t) return null;
  const u2 = t.spatialReference;
  return k() || L(u2, i) ? O(t, i) : a ? a.projectGeometry(t, i, c3, p4) : (await Promise.race([l(p4), K(p4)]), s3(t, i, c3, p4));
}
async function p2(t, e) {
  try {
    return t?.spatialReference ? await J(t, e) : null;
  } catch {
    return null;
  }
}

// node_modules/@arcgis/core/geometry/support/heightModelInfoUtils.js
function a2(n, i, a3) {
  const s5 = l2(n), h2 = i, u2 = r(s5, h2, a3);
  if (s5) {
    const i2 = m.deriveUnitFromSR(s5, n.spatialReference).heightUnit;
    if (!a3 && i2 !== s5.heightUnit) {
      const t = new s("layerview:unmatched-height-unit", `The vertical units of the layer must match the horizontal units (${i2})`, { horizontalUnit: i2 });
      return new s("layerview:unsupported-height-model-info", "The vertical coordinate system of the layer is not supported", { heightModelInfo: s5, error: t });
    }
  }
  if (!c2(n) || u2 === o.Unsupported) return new s("layerview:unsupported-height-model-info", "The vertical coordinate system of the layer is not supported", { heightModelInfo: s5 });
  switch (u2) {
    case o.Units: {
      const t = s5?.heightUnit || "unknown", n2 = h2?.heightUnit || "unknown", i2 = new s("layerview:incompatible-height-unit", `The vertical units of the layer (${t}) must match the vertical units of the scene (${n2})`, { layerUnit: t, sceneUnit: n2 });
      return new s("layerview:incompatible-height-model-info", "The vertical coordinate system of the layer is incompatible with the scene", { layerHeightModelInfo: s5, sceneHeightModelInfo: h2, error: i2 });
    }
    case o.HeightModel: {
      const t = s5?.heightModel || "unknown", n2 = h2?.heightModel || "unknown", i2 = new s("layerview:incompatible-height-model", `The height model of the layer (${t}) must match the height model of the scene (${n2})`, { layerHeightModel: t, sceneHeightModel: n2 });
      return new s("layerview:incompatible-height-model-info", "The vertical coordinate system of the layer is incompatible with the scene", { layerHeightModelInfo: s5, sceneHeightModelInfo: h2, error: i2 });
    }
    case o.CRS: {
      const t = s5?.vertCRS || "unknown", n2 = h2?.vertCRS || "unknown", i2 = new s("layerview:incompatible-vertical-datum", `The vertical datum of the layer (${t}) must match the vertical datum of the scene (${n2})`, { layerDatum: t, sceneDatum: n2 });
      return new s("layerview:incompatible-height-model-info", "The vertical coordinate system of the layer is incompatible with the scene", { layerHeightModelInfo: s5, sceneHeightModelInfo: h2, error: i2 });
    }
  }
  return null;
}
function r(e, t, n) {
  if (!s4(e) || !s4(t)) return o.Unsupported;
  if (null == e || null == t) return o.Ok;
  if (!n && e.heightUnit !== t.heightUnit) return o.Units;
  if (e.heightModel !== t.heightModel) return o.HeightModel;
  switch (e.heightModel) {
    case "gravity-related-height":
      return o.Ok;
    case "ellipsoidal":
      return e.vertCRS === t.vertCRS ? o.Ok : o.CRS;
    default:
      return o.Unsupported;
  }
}
var o;
function s4(e) {
  return null == e || null != e.heightModel && null != e.heightUnit;
}
function c2(e) {
  return "heightModelInfo" in e && null != e.heightModelInfo || null != e.spatialReference || !d(e);
}
function l2(e) {
  if ("integrated-mesh-3dtiles" === e.type) return null;
  const i = e.url ? p(e.url) : void 0, a3 = e.spatialReference?.vcsWkid;
  return !(null == a3 && null != i && "ImageServer" === i.serverType) && h(e) && e.heightModelInfo ? e.heightModelInfo : d(e) ? m.deriveUnitFromSR(p3, e.spatialReference) : null;
}
function h(e) {
  return "heightModelInfo" in e;
}
function u(e) {
  if ("unknown" === e.type || !("capabilities" in e)) return false;
  switch (e.type) {
    case "catalog":
    case "catalog-footprint":
    case "csv":
    case "feature":
    case "geojson":
    case "subtype-group":
    case "ogc-feature":
    case "oriented-imagery":
    case "wfs":
    case "knowledge-graph-sublayer":
      return true;
    default:
      return false;
  }
}
function d(e) {
  return u(e) ? !!(e.capabilities && e.capabilities.data && e.capabilities.data.supportsZ) : f(e);
}
function g(e) {
  return null != e.layers || f(e) || u(e) || h(e);
}
function f(e) {
  switch (e.type) {
    case "building-scene":
    case "elevation":
    case "integrated-mesh":
    case "integrated-mesh-3dtiles":
    case "point-cloud":
    case "scene":
    case "voxel":
      return true;
    case "base-dynamic":
    case "base-elevation":
    case "base-tile":
    case "bing-maps":
    case "catalog":
    case "catalog-footprint":
    case "catalog-dynamic-group":
    case "csv":
    case "dimension":
    case "geojson":
    case "feature":
    case "subtype-group":
    case "geo-rss":
    case "graphics":
    case "group":
    case "imagery":
    case "imagery-tile":
    case "kml":
    case "knowledge-graph":
    case "link-chart":
    case "knowledge-graph-sublayer":
    case "line-of-sight":
    case "map-image":
    case "map-notes":
    case "media":
    case "ogc-feature":
    case "open-street-map":
    case "oriented-imagery":
    case "parquet":
    case "route":
    case "stream":
    case "tile":
    case "unknown":
    case "unsupported":
    case "vector-tile":
    case "video":
    case "viewshed":
    case "wcs":
    case "web-tile":
    case "wfs":
    case "wms":
    case "wmts":
    case null:
      return false;
  }
  return false;
}
!function(e) {
  e[e.Ok = 0] = "Ok", e[e.Units = 1] = "Units", e[e.HeightModel = 2] = "HeightModel", e[e.CRS = 3] = "CRS", e[e.Unsupported = 4] = "Unsupported";
}(o || (o = {}));
var p3 = new m({ heightModel: "gravity-related-height" });

export {
  a2 as a,
  l2 as l,
  g,
  s3 as s,
  p2 as p
};
//# sourceMappingURL=chunk-MTOX4AVT.js.map
