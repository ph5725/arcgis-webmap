import {
  C,
  I,
  M,
  m,
  p,
  y
} from "./chunk-DJJNSAUR.js";
import {
  l
} from "./chunk-KE3WBZYL.js";

// node_modules/@arcgis/core/symbols/support/cimSymbolUtils.js
function f(e, t, o, r) {
  if (e) if ("CIMTextSymbol" !== e.type) {
    if (o && e.effects) for (const o2 of e.effects) M2(o2, t);
    if (e.symbolLayers) for (const o2 of e.symbolLayers) {
      switch (o2.type) {
        case "CIMPictureMarker":
        case "CIMVectorMarker":
          m2(o2, t, r);
          break;
        case "CIMPictureStroke":
        case "CIMSolidStroke":
        case "CIMGradientStroke":
          !r?.preserveOutlineWidth && o2.width && (o2.width *= t);
          break;
        case "CIMPictureFill":
          o2.height && (o2.height *= t), o2.offsetX && (o2.offsetX *= t), o2.offsetY && (o2.offsetY *= t);
          break;
        case "CIMHatchFill":
          f(o2.lineSymbol, t, true, { ...r, preserveOutlineWidth: false }), o2.offsetX && (o2.offsetX *= t), o2.offsetY && (o2.offsetY *= t), o2.separation && (o2.separation *= t);
      }
      if (o2.effects) for (const e2 of o2.effects) M2(e2, t);
    }
  } else null != e.height && (e.height *= t);
}
function m2(e, t, o) {
  if (e && (e.markerPlacement && C2(e.markerPlacement, t), e.offsetX && (e.offsetX *= t), e.offsetY && (e.offsetY *= t), e.anchorPoint && "Absolute" === e.anchorPointUnits && (e.anchorPoint = { x: e.anchorPoint.x * t, y: e.anchorPoint.y * t }), e.size = null != e.size ? e.size * t : 0, "CIMVectorMarker" === e.type && e.markerGraphics)) for (const r of e.markerGraphics) e.scaleSymbolsProportionally || f(r.symbol, t, true, o);
}
function C2(e, t) {
  switch (p(e) && e.offset && (e.offset *= t), e.type) {
    case "CIMMarkerPlacementAlongLineRandomSize":
    case "CIMMarkerPlacementAlongLineSameSize":
      if (e.customEndingOffset && (e.customEndingOffset *= t), e.offsetAlongLine && (e.offsetAlongLine *= t), e.placementTemplate && e.placementTemplate.length) {
        const o = e.placementTemplate.map((e2) => e2 * t);
        e.placementTemplate = o;
      }
      break;
    case "CIMMarkerPlacementAlongLineVariableSize":
      if (e.maxRandomOffset && (e.maxRandomOffset *= t), e.placementTemplate && e.placementTemplate.length) {
        const o = e.placementTemplate.map((e2) => e2 * t);
        e.placementTemplate = o;
      }
      break;
    case "CIMMarkerPlacementOnLine":
      e.startPointOffset && (e.startPointOffset *= t);
      break;
    case "CIMMarkerPlacementAtExtremities":
      e.offsetAlongLine && (e.offsetAlongLine *= t);
      break;
    case "CIMMarkerPlacementAtMeasuredUnits":
    case "CIMMarkerPlacementOnVertices":
      break;
    case "CIMMarkerPlacementAtRatioPositions":
      e.beginPosition && (e.beginPosition *= t), e.endPosition && (e.endPosition *= t);
      break;
    case "CIMMarkerPlacementPolygonCenter":
      e.offsetX && (e.offsetX *= t), e.offsetY && (e.offsetY *= t);
      break;
    case "CIMMarkerPlacementInsidePolygon":
      e.offsetX && (e.offsetX *= t), e.offsetY && (e.offsetY *= t), e.stepX && (e.stepX *= t), e.stepY && (e.stepY *= t);
  }
}
function M2(e, t) {
  switch (e.type) {
    case "CIMGeometricEffectArrow":
    case "CIMGeometricEffectDonut":
      e.width && (e.width *= t);
      break;
    case "CIMGeometricEffectBuffer":
      e.size && (e.size *= t);
      break;
    case "CIMGeometricEffectCut":
      e.beginCut && (e.beginCut *= t), e.endCut && (e.endCut *= t), e.middleCut && (e.middleCut *= t);
      break;
    case "CIMGeometricEffectDashes":
      if (e.customEndingOffset && (e.customEndingOffset *= t), e.offsetAlongLine && (e.offsetAlongLine *= t), e.dashTemplate && e.dashTemplate.length) {
        const o = e.dashTemplate.map((e2) => e2 * t);
        e.dashTemplate = o;
      }
      break;
    case "CIMGeometricEffectExtension":
    case "CIMGeometricEffectJog":
    case "CIMGeometricEffectRadial":
      e.length && (e.length *= t);
      break;
    case "CIMGeometricEffectMove":
      e.offsetX && (e.offsetX *= t), e.offsetY && (e.offsetY *= t);
      break;
    case "CIMGeometricEffectOffset":
    case "CIMGeometricEffectOffsetTangent":
      e.offset && (e.offset *= t);
      break;
    case "CIMGeometricEffectRegularPolygon":
      e.radius && (e.radius *= t);
      break;
    case "CIMGeometricEffectTaperedPolygon":
      e.fromWidth && (e.fromWidth *= t), e.length && (e.length *= t), e.toWidth && (e.toWidth *= t);
      break;
    case "CIMGeometricEffectWave":
      e.amplitude && (e.amplitude *= t), e.period && (e.period *= t);
  }
}
function u(o) {
  const r = [];
  return y2(y(o), r), r.length ? new l(M(r[0])) : null;
}
function y2(e, t) {
  if (!e) return;
  let n;
  n = "CIMTextSymbol" === e.type ? e.symbol : e;
  const s = "CIMPolygonSymbol" === e.type;
  if (n?.symbolLayers) {
    for (const i of n.symbolLayers) if (!(i.colorLocked || s && (C(i) || m(i) && i.markerPlacement && p(i.markerPlacement)))) switch (i.type) {
      case "CIMPictureMarker":
      case "CIMPictureStroke":
      case "CIMPictureFill":
        i.tintColor && p2(t, i.tintColor);
        break;
      case "CIMVectorMarker":
        i.markerGraphics?.forEach((e2) => {
          y2(e2.symbol, t);
        });
        break;
      case "CIMSolidStroke":
      case "CIMSolidFill":
        p2(t, i.color);
        break;
      case "CIMGradientFill":
        I2(t, i);
        break;
      case "CIMHatchFill":
        y2(i.lineSymbol, t);
    }
  }
}
function p2(e, t) {
  for (const o of e) if (o.join(".") === t.join(".")) return;
  e.push(t);
}
function I2(e, t) {
  const o = t.colorRamp?.type;
  switch (o) {
    case "CIMMultipartColorRamp":
      t.colorRamp.colorRamps?.forEach((t2) => {
        "CIMLinearContinuousColorRamp" === t2.type && b(e, t2);
      });
      break;
    case "CIMLinearContinuousColorRamp":
    case "CIMPolarContinuousColorRamp":
      b(e, t.colorRamp);
  }
}
function b(e, t) {
  t && (t.fromColor && p2(e, t.fromColor), t.toColor && p2(e, t.toColor));
}
function k(o, r, a) {
  r instanceof l || (r = new l(r));
  const n = y(o);
  n && h(n, r, a);
}
function h(e, t, n) {
  if (!e) return;
  let i;
  i = "CIMTextSymbol" === e.type ? e.symbol : e;
  const c = "CIMPolygonSymbol" === i?.type;
  if (i?.symbolLayers) for (const l2 of i.symbolLayers) {
    if (l2.colorLocked) continue;
    if (c) {
      if (n) {
        const { layersToColor: e3 } = n;
        if ((C(l2) || m(l2) && l2.markerPlacement && p(l2.markerPlacement)) && "fill" === e3 || I(l2) && "outline" === e3) continue;
      } else if (C(l2) || m(l2) && l2.markerPlacement && p(l2.markerPlacement)) continue;
    }
    const e2 = t.toArray();
    switch (l2.type) {
      case "CIMPictureMarker":
      case "CIMPictureStroke":
      case "CIMPictureFill":
        l2.tintColor = e2;
        break;
      case "CIMVectorMarker":
        l2.markerGraphics?.forEach((e3) => {
          h(e3.symbol, t, n);
        });
        break;
      case "CIMSolidStroke":
      case "CIMSolidFill":
        l2.color = e2;
        break;
      case "CIMGradientFill":
        d(l2, t);
        break;
      case "CIMHatchFill":
        h(l2.lineSymbol, t, n);
    }
  }
}
function d(e, t) {
  const o = e.colorRamp?.type;
  switch (o) {
    case "CIMMultipartColorRamp":
      e.colorRamp.colorRamps?.forEach((e2) => {
        "CIMLinearContinuousColorRamp" === e2.type && P(e2, t);
      });
      break;
    case "CIMLinearContinuousColorRamp":
    case "CIMPolarContinuousColorRamp":
      P(e.colorRamp, t);
  }
}
function P(e, t) {
  if (e && (e.fromColor && (e.fromColor = t.toArray()), e.toColor)) {
    const o = t.clone();
    o.a = 0, e.toColor = o.toArray();
  }
}
function S(e, o, a = false) {
  const n = y(e);
  if (a && (o = 360 - o), "CIMTextSymbol" !== n?.type) {
    if ("CIMPointSymbol" === n?.type && n.symbolLayers) {
      const e2 = o - (n.angle || 0);
      for (const t of n.symbolLayers) if (m(t)) {
        let o2 = t.rotation || 0;
        t.rotateClockwise ? o2 -= e2 : o2 += e2, t.rotation = o2;
      }
      n.angle = o;
    }
  } else n.angle = o;
}

export {
  f,
  u,
  k,
  S
};
//# sourceMappingURL=chunk-MZJEBIXX.js.map
