import {
  j
} from "./chunk-XMAXGUBN.js";
import {
  Ke,
  Re,
  ae,
  pe,
  q,
  te,
  we
} from "./chunk-Q7K6M7G6.js";
import {
  a,
  e,
  r
} from "./chunk-AQGMTI4V.js";
import {
  n,
  o
} from "./chunk-6QA2BVC5.js";
import {
  P
} from "./chunk-52HWRRRQ.js";
import {
  y
} from "./chunk-OGOQOMMV.js";
import {
  M
} from "./chunk-FPSA4NFH.js";
import {
  _,
  c
} from "./chunk-Q6XRAGMA.js";
import {
  Z
} from "./chunk-OXSERRAR.js";

// node_modules/@arcgis/core/arcade/functions/centroid.js
function e2(t, n2, e3) {
  return Math.sqrt((t[0] - n2[0]) ** 2 + (t[1] - n2[1]) ** 2 + (void 0 !== t[2] && void 0 !== n2[2] ? (t[2] * e3 - n2[2] * e3) ** 2 : 0));
}
function r2(t, n2, e3) {
  return (t[0] - n2[0]) ** 2 + (t[1] - n2[1]) ** 2 + (void 0 !== t[2] && void 0 !== n2[2] ? (t[2] * e3 - n2[2] * e3) ** 2 : 0);
}
var o2 = [];
for (const w of [[9002, 56146130, 6131, 6132, 8050, 8051, 8228], [9003, 5702, 6358, 6359, 6360, 8052, 8053], [9095, 5754]]) {
  const t = w[0];
  for (let n2 = 1; n2 < w.length; n2++) o2[w[n2]] = t;
}
var s = [];
function i(t) {
  return t.vcsWkid && void 0 !== o2[t.vcsWkid] ? s[o2[t.vcsWkid]] : t.latestVcsWkid && void 0 !== o2[t.latestVcsWkid] ? s[o2[t.latestVcsWkid]] : 1;
}
function f(t, n2, e3) {
  const r3 = n2[0] - t[0], o3 = n2[1] - t[1];
  if (e3) {
    const t2 = n2[2] - n2[2];
    return Math.sqrt(r3 * r3 + o3 * o3 + t2 * t2);
  }
  return Math.sqrt(r3 * r3 + o3 * o3);
}
function h(t, n2, e3) {
  const r3 = n2[0] - t[0], o3 = n2[1] - t[1];
  if (e3) {
    const t2 = n2[2] - n2[2];
    return r3 * r3 + o3 * o3 + t2 * t2;
  }
  return r3 * r3 + o3 * o3;
}
function m(t, n2) {
  return t.x * n2.x + t.y * n2.y;
}
function M2(t, n2) {
  return t.x * n2.y - n2.x * t.y;
}
function p(t, n2, e3 = 0) {
  for (; t < e3; ) t += n2;
  const r3 = e3 + n2;
  for (; t >= r3; ) t -= n2;
  return t;
}
function g(t, n2) {
  return Math.atan2(n2.y - t.y, n2.x - t.x);
}
function z(t, n2) {
  return p(g(t, n2), 2 * Math.PI) * (180 / Math.PI);
}
function d(t, n2) {
  return p(Math.PI / 2 - g(t, n2), 2 * Math.PI) * (180 / Math.PI);
}
function v(t, n2, e3) {
  const r3 = { x: t.x - n2.x, y: t.y - n2.y }, o3 = { x: e3.x - n2.x, y: e3.y - n2.y };
  return Math.atan2(M2(r3, o3), m(r3, o3));
}
function P2(n2, e3, r3) {
  return M(p(v(n2, e3, r3), 2 * Math.PI));
}
function Z2(n2, e3, r3) {
  return M(p(-1 * v(n2, e3, r3), 2 * Math.PI));
}
function I(t, n2, e3) {
  return Math.max(n2, Math.min(e3, t));
}
function R(t, n2) {
  return t[0] * n2[0] + t[1] * n2[1] + t[2] * n2[2];
}
function k(t) {
  return t[0] * t[0] + t[1] * t[1] + t[2] * t[2];
}
function W(t, n2, e3) {
  const r3 = [e3[0] - n2[0], e3[1] - n2[1], e3[2] - n2[2]], o3 = I(R(r3, [t[0] - n2[0], t[1] - n2[1], t[2] - n2[2]]) / k(r3), 0, 1);
  return [n2[0] + (e3[0] - n2[0]) * o3, n2[1] + (e3[1] - n2[1]) * o3, n2[2] + (e3[2] - n2[2]) * o3];
}
function q2(t, n2, e3) {
  let r3 = 0;
  const o3 = e3[0] - n2[0], s2 = e3[1] - n2[1], i2 = o3 * o3 + s2 * s2;
  if (0 === i2) r3 = 0.5;
  else {
    r3 = ((t[0] - n2[0]) * o3 + (t[1] - n2[1]) * s2) / i2, r3 < 0 ? r3 = 0 : r3 > 1 && (r3 = 1);
  }
  return r3 <= 0.5 ? [n2[0] + (e3[0] - n2[0]) * r3, n2[1] + (e3[1] - n2[1]) * r3] : [e3[0] - (e3[0] - n2[0]) * (1 - r3), e3[1] - (e3[1] - n2[1]) * (1 - r3)];
}
s[9002] = 0.3048, s[9003] = 0.3048006096012192, s[9095] = 0.3048007491;

// node_modules/@arcgis/core/arcade/functions/measures.js
function f2(e3, t, n2) {
  const s2 = t[0] - e3[0], a2 = t[1] - e3[1];
  return Math.sqrt(s2 * s2 + a2 * a2);
}
function u(e3) {
  return Math.sqrt(e3[0] * e3[0] + e3[1] * e3[1] + e3[2] * e3[2]);
}
function h2(e3) {
  const t = u(e3);
  return [e3[0] / t, e3[1] / t, e3[2] / t];
}
function p2(e3, t, n2, s2) {
  const a2 = h2([t[0] - e3[0], t[1] - e3[1], t[2] * s2 - e3[2] * s2]);
  return [e3[0] + a2[0] * n2, e3[1] + a2[1] * n2, e3[2] + a2[2] * n2];
}
function m2(e3, t, n2, s2) {
  return e3 + (t - e3) / n2 * s2;
}
function d2(e3, t, n2) {
  let s2 = t[0] - e3[0], a2 = t[1] - e3[1];
  const r3 = Math.sqrt(s2 * s2 + a2 * a2);
  return s2 /= r3, a2 /= r3, s2 *= n2, a2 *= n2, [e3[0] + s2, e3[1] + a2];
}
function y2(n2, s2) {
  if (!n2) return null;
  switch (n2.type) {
    case "extent":
    case "multipoint":
    case "mesh":
    case "point":
      return null;
  }
  const a2 = "polygon" === n2.type ? n2.rings : n2.paths;
  let r3 = 1;
  if (n2.spatialReference.vcsWkid || n2.spatialReference.latestVcsWkid) {
    r3 = i(n2.spatialReference) / Z(n2.spatialReference);
  }
  if (0 === a2.length) return null;
  if (0 === a2[0].length) return null;
  if (false === n2.hasM) return null;
  let l = -1, o3 = 0;
  const u2 = n2.hasZ ? e2 : f2, h3 = n2.hasZ ? 3 : 2, m3 = 2;
  for (const e3 of a2) {
    if (l++, e3.length > 0 && e3[0][h3] === s2) return { partId: l, distanceAlong: o3, coordinate: new _({ hasZ: n2.hasZ, hasM: n2.hasM, spatialReference: n2.spatialReference, x: e3[0][0], y: e3[0][1], ...n2.hasZ ? { z: e3[0][m3] } : {}, ...n2.hasM ? { m: e3[0][h3] } : {} }), segmentId: 0 };
    let t = -1;
    for (let a3 = 1; a3 < e3.length; a3++) {
      const i2 = u2(e3[a3 - 1], e3[a3], r3);
      t++;
      const f3 = e3[a3][h3] - e3[a3 - 1][h3], y3 = e3[a3][h3];
      if (y3 === s2) return { partId: l, distanceAlong: i2 + o3, coordinate: new _({ hasZ: n2.hasZ, hasM: n2.hasM, spatialReference: n2.spatialReference, x: e3[a3][0], y: e3[a3][1], ...n2.hasZ ? { z: e3[a3][m3] } : {}, ...n2.hasM ? { m: e3[a3][h3] } : {} }), segmentId: t };
      if (y3 > s2 && s2 > e3[a3 - 1][h3]) {
        const y4 = (s2 - e3[a3 - 1][h3]) / f3 * i2;
        let Z4 = n2.hasZ ? p2(e3[a3 - 1], e3[a3], y4, r3) : d2(e3[a3 - 1], e3[a3], y4);
        Z4 = [...Z4, s2];
        const R4 = new _({ hasZ: n2.hasZ, hasM: n2.hasM, spatialReference: n2.spatialReference, x: Z4[0], y: Z4[1], ...n2.hasZ ? { z: Z4[m3] } : {}, ...n2.hasM ? { m: Z4[h3] } : {} });
        return { partId: l, distanceAlong: o3 + u2(e3[a3 - 1], [R4.x, R4.y, ...R4.hasZ ? [R4.z] : [], ...R4.hasM ? [R4.m] : []], r3), coordinate: R4, segmentId: t };
      }
      o3 += i2;
    }
  }
  return null;
}
function Z3(n2, s2) {
  if (!n2) return null;
  switch (n2.type) {
    case "extent":
    case "multipoint":
    case "mesh":
    case "point":
      return null;
  }
  const a2 = "polygon" === n2.type ? n2.rings : n2.paths;
  if (s2 < 0) return null;
  let r3 = 1;
  if (n2.spatialReference.vcsWkid || n2.spatialReference.latestVcsWkid) {
    r3 = i(n2.spatialReference) / Z(n2.spatialReference);
  }
  let l = 0;
  const o3 = n2.hasZ ? 3 : 2, u2 = 2, h3 = n2.hasZ ? e2 : f2;
  let y3 = -1;
  if (0 === s2) return 0 === a2.length || 0 === a2[0].length ? null : { partId: 0, coordinate: new _({ hasZ: n2.hasZ, hasM: n2.hasM, spatialReference: n2.spatialReference, x: a2[0][0][0], y: a2[0][0][1], ...n2.hasZ ? { z: a2[0][0][u2] } : {}, ...n2.hasM ? { m: a2[0][0][o3] } : {} }), segmentId: 0 };
  for (const e3 of a2) {
    y3++;
    let t = -1;
    for (let a3 = 1; a3 < e3.length; a3++) {
      t++;
      const i2 = h3(e3[a3 - 1], e3[a3], r3), f3 = l + i2;
      if (f3 === s2) return { partId: y3, coordinate: new _({ hasZ: n2.hasZ, hasM: n2.hasM, spatialReference: n2.spatialReference, x: e3[a3][0], y: e3[a3][1], ...n2.hasZ ? { z: e3[a3][u2] } : {}, ...n2.hasM ? { m: e3[a3][o3] } : {} }), segmentId: t };
      if (f3 > s2) {
        let f4 = n2.hasZ ? p2(e3[a3 - 1], e3[a3], s2 - l, r3) : d2(e3[a3 - 1], e3[a3], s2 - l);
        return f4 = [...f4, m2(e3[a3 - 1][o3], e3[a3][o3], i2, s2 - l)], { partId: y3, coordinate: new _({ hasZ: n2.hasZ, hasM: n2.hasM, spatialReference: n2.spatialReference, x: f4[0], y: f4[1], ...n2.hasZ ? { z: f4[u2] } : {}, ...n2.hasM ? { m: f4[o3] } : {} }), segmentId: t };
      }
      l = f3;
    }
  }
  return null;
}
function R2(n2, s2) {
  if (!n2) return null;
  if (!s2) return null;
  let a2 = 1;
  if (s2.spatialReference.vcsWkid || s2.spatialReference.latestVcsWkid) {
    a2 = i(s2.spatialReference) / Z(s2.spatialReference);
  }
  let r3 = null, c2 = 0;
  return r3 = n2, c2 = n2.hasZ && s2.hasZ ? e2([s2.x, s2.y, s2.z], [n2.x, n2.y, n2.z], a2) : f([s2.x, s2.y], [n2.x, n2.y], false), { coordinate: r3, distance: c2 };
}
function g2(t, n2) {
  if (!t) return null;
  if (!n2) return null;
  let s2 = 1;
  if (n2.spatialReference.vcsWkid || n2.spatialReference.latestVcsWkid) {
    s2 = i(n2.spatialReference) / Z(n2.spatialReference);
  }
  let l = null, c2 = 0, o3 = Number.MAX_VALUE, f3 = -1, u2 = -1;
  for (const e3 of t.points || []) {
    u2++;
    const l2 = t.hasZ && n2.hasZ ? r2([e3[0], e3[1], e3[2]], [n2.x, n2.y, n2.z], s2) : h([e3[0], e3[1]], [n2.x, n2.y], false);
    l2 < o3 && (o3 = l2, f3 = u2);
  }
  return f3 < 0 ? null : (c2 = o3, l = t.getPoint(f3), { coordinate: l, distance: Math.sqrt(c2) });
}
function M3(o3, f3) {
  if (!o3) return null;
  if (!f3) return null;
  const u2 = "polygon" === o3.type ? o3.rings : o3.paths;
  let h3 = 1;
  if (f3.spatialReference.vcsWkid || f3.spatialReference.latestVcsWkid) {
    h3 = i(f3.spatialReference) / Z(f3.spatialReference);
  }
  let p3 = Number.MAX_VALUE, d3 = -1, y3 = -1, Z4 = -1;
  const R4 = o3.hasZ && f3.hasZ;
  let g3 = null;
  const M4 = R4 ? [f3.x, f3.y, f3.z] : [f3.x, f3.y];
  for (const e3 of u2) {
    y3++;
    for (let t = 1; t < e3.length; t++) {
      const l = R4 ? W(M4, e3[t - 1], e3[t]) : q2(M4, e3[t - 1], e3[t]), i2 = R4 ? r2(l, M4, h3) : h(l, M4, false);
      i2 < p3 && (p3 = i2, g3 = l, Z4 = y3, d3 = t - 1);
    }
  }
  if (d3 < 0) return null;
  const x3 = o3.hasM && o3.hasZ ? 3 : 2, I3 = 2, z3 = u2[Z4][d3], w = u2[Z4][d3 + 1];
  let k3 = null, W2 = null, A2 = R4 ? g3[2] : null;
  o3.hasM && (W2 = m2(z3[x3], w[x3], R4 ? e2(z3, w, h3) : f(z3, w, false), R4 ? e2(z3, g3, h3) : f(z3, g3, false))), o3.hasZ && false === f3.hasZ && (A2 = m2(z3[I3], w[I3], R4 ? e2(z3, w, h3) : f(z3, w, false), R4 ? e2(z3, g3, h3) : f(z3, g3, false))), k3 = new _({ hasZ: R4, hasM: o3.hasM, spatialReference: f3.spatialReference, x: g3[0], y: g3[1], ...o3.hasZ ? { z: A2 } : {}, ...o3.hasM ? { m: W2 } : {} });
  let V = 0;
  for (let e3 = 0; e3 <= Z4; e3++) {
    const n2 = u2[e3], s2 = e3 === Z4 ? d3 : n2.length - 1;
    for (let e4 = 1; e4 <= s2; e4++) V += o3.hasZ ? e2(n2[e4 - 1], n2[e4], h3) : f([n2[e4 - 1][0], n2[e4 - 1][1]], [n2[e4][0], n2[e4][1]], false);
  }
  return V += o3.hasZ ? e2(z3, [k3.x, k3.y, k3.z], h3) : f(z3, [k3.x, k3.y], false), { partId: Z4, segmentId: d3, coordinate: k3, distance: Math.sqrt(p3), distanceAlong: V };
}
function x(e3, t) {
  if (!e3) return null;
  if (!t) return null;
  if ("extent" === e3.type) {
    const t2 = e3;
    e3 = new P({ spatialReference: e3.spatialReference, rings: [[[t2.xmin, t2.ymin], [t2.xmin, t2.ymax], [t2.xmax, t2.ymax], [t2.xmax, t2.ymin], [t2.xmin, t2.ymin]]] });
  }
  switch (e3.type) {
    case "point":
      return R2(e3, t) ?? null;
    case "multipoint":
      return g2(e3, t) ?? null;
    case "polygon":
    case "polyline":
      return M3(e3, t) ?? null;
    default:
      return null;
  }
}

// node_modules/@arcgis/core/arcade/geometry/functions.js
function x2(e3, n2, i2) {
  if (ae(e3, 2, 2, n2, i2), e3[0] instanceof c && e3[1] instanceof c) ;
  else if (e3[0] instanceof c && null === e3[1]) ;
  else if (e3[1] instanceof c && null === e3[0]) ;
  else if (null !== e3[0] || null !== e3[1]) throw new a(n2, r.InvalidParameter, i2);
}
function I2(e3) {
  if ("polygon" !== e3.type && "polyline" !== e3.type && "extent" !== e3.type) return 0;
  let n2 = 1;
  if (e3.spatialReference.vcsWkid || e3.spatialReference.latestVcsWkid) {
    n2 = i(e3.spatialReference) / Z(e3.spatialReference);
  }
  let t = 0;
  if ("polyline" === e3.type) for (const r3 of e3.paths) for (let e4 = 1; e4 < r3.length; e4++) t += e2(r3[e4], r3[e4 - 1], n2);
  else if ("polygon" === e3.type) for (const r3 of e3.rings) {
    for (let e4 = 1; e4 < r3.length; e4++) t += e2(r3[e4], r3[e4 - 1], n2);
    (r3[0][0] !== r3[r3.length - 1][0] || r3[0][1] !== r3[r3.length - 1][1] || void 0 !== r3[0][2] && r3[0][2] !== r3[r3.length - 1][2]) && (t += e2(r3[0], r3[r3.length - 1], n2));
  }
  else "extent" === e3.type && (t += 2 * e2([e3.xmin, e3.ymin, 0], [e3.xmax, e3.ymin, 0], n2), t += 2 * e2([e3.xmin, e3.ymin, 0], [e3.xmin, e3.ymax, 0], n2), t *= 2, t += 4 * Math.abs(q(e3.zmax, 0) * n2 - q(e3.zmin, 0) * n2));
  return t;
}
var R3 = (n2, i2, l) => {
  if (l = we(l), ae(l, 2, 2, n2, i2), null === l[0]) return null;
  let u2 = l[0];
  if ((o(l[0]) || te(l[0])) && (u2 = Re(l[0], n2.spatialReference)), null === u2) return null;
  if (!(u2 instanceof c)) throw new a(n2, r.InvalidParameter, i2);
  if (!(u2 instanceof y)) throw new a(n2, r.InvalidParameter, i2);
  if (!n(l[1])) throw new a(n2, r.InvalidParameter, i2);
  const m3 = y2(u2, l[1]);
  return m3 ? j.convertObjectToArcadeDictionary(m3, Ke(n2), false, true) : null;
};
var b = (n2, i2, l) => {
  if (l = we(l), ae(l, 2, 2, n2, i2), null === l[0]) return null;
  let u2 = l[0];
  if ((o(l[0]) || te(l[0])) && (u2 = Re(l[0], n2.spatialReference)), null === u2) return null;
  if (!(u2 instanceof c)) throw new a(n2, r.InvalidParameter, i2);
  if (!(u2 instanceof y)) throw new a(n2, r.InvalidParameter, i2);
  const m3 = l[1];
  if (null === m3) return null;
  if (!(m3 instanceof _)) throw new a(n2, r.InvalidParameter, i2);
  const p3 = x(u2, m3);
  return p3 ? j.convertObjectToArcadeDictionary(p3, Ke(n2), false, true) : null;
};
var k2 = (n2, i2, l) => {
  if (l = we(l), ae(l, 2, 2, n2, i2), null === l[0]) return null;
  let u2 = l[0];
  if ((o(l[0]) || te(l[0])) && (u2 = Re(l[0], n2.spatialReference)), null === u2) return null;
  if (!(u2 instanceof c)) throw new a(n2, r.InvalidParameter, i2);
  if (!(u2 instanceof y)) throw new a(n2, r.InvalidParameter, i2);
  if (!n(l[1])) throw new a(n2, r.InvalidParameter, i2);
  const m3 = Z3(u2, l[1]);
  return m3 ? j.convertObjectToArcadeDictionary(m3, Ke(n2), false, true) : null;
};
var D = new e(["geodesic", "great-elliptic", "loxodrome", "normal-section", "shape-preserving"]);
function A(e3) {
  return null == e3 ? "geodesic" : D.get(pe(e3));
}
var O = new e(["geometric", "labelPoint"]);
function T(e3) {
  return null == e3 ? "geometric" : O.get(pe(e3));
}
var z2 = new e(["round", "bevel", "miter", "square"]);
function U(e3) {
  return null == e3 ? "round" : z2.lookup(pe(e3)) ?? "round";
}

export {
  z,
  d,
  P2 as P,
  Z2 as Z,
  x2 as x,
  I2 as I,
  R3 as R,
  b,
  k2 as k,
  A,
  T,
  U
};
//# sourceMappingURL=chunk-N3H25ARD.js.map
