import {
  L,
  c
} from "./chunk-S4X4QGA7.js";
import {
  f,
  i,
  l as l2,
  n
} from "./chunk-CF5GNPLI.js";
import {
  t
} from "./chunk-5WTH3GBK.js";
import {
  I,
  N,
  P,
  b,
  i as i2,
  p
} from "./chunk-JQSXFLSD.js";
import {
  C,
  H,
  U
} from "./chunk-76QJRCNC.js";
import {
  e as e2
} from "./chunk-7DRFV7H6.js";
import {
  O
} from "./chunk-BZYXFNL4.js";
import {
  R
} from "./chunk-RP7FUW55.js";
import {
  l
} from "./chunk-KE3WBZYL.js";
import {
  d
} from "./chunk-6KFXWKZZ.js";
import {
  e
} from "./chunk-6GWORUT3.js";
import {
  a
} from "./chunk-GWNLQRNM.js";

// node_modules/@arcgis/core/views/2d/engine/vectorTiles/MemoryBuffer.js
var t2 = class {
  constructor(t5) {
    this._array = [], this._stride = t5;
  }
  get array() {
    return this._array;
  }
  get index() {
    return 4 * this._array.length / this._stride;
  }
  get itemSize() {
    return this._stride;
  }
  get sizeInBytes() {
    return 4 * this._array.length;
  }
  reset() {
    this.array.length = 0;
  }
  toBuffer() {
    return new Uint32Array(this._array).buffer;
  }
  static i1616to32(t5, r3) {
    return 65535 & t5 | r3 << 16;
  }
  static i8888to32(t5, r3, e5, i6) {
    return 255 & t5 | (255 & r3) << 8 | (255 & e5) << 16 | i6 << 24;
  }
  static i8816to32(t5, r3, e5) {
    return 255 & t5 | (255 & r3) << 8 | e5 << 16;
  }
};

// node_modules/@arcgis/core/views/2d/engine/vectorTiles/shaders/enums.js
var N2;
var R2;
!function(N4) {
  N4[N4.R8_SIGNED = 0] = "R8_SIGNED", N4[N4.R8_UNSIGNED = 1] = "R8_UNSIGNED", N4[N4.R16_SIGNED = 2] = "R16_SIGNED", N4[N4.R16_UNSIGNED = 3] = "R16_UNSIGNED", N4[N4.R8G8_SIGNED = 4] = "R8G8_SIGNED", N4[N4.R8G8_UNSIGNED = 5] = "R8G8_UNSIGNED", N4[N4.R16G16_SIGNED = 6] = "R16G16_SIGNED", N4[N4.R16G16_UNSIGNED = 7] = "R16G16_UNSIGNED", N4[N4.R8G8B8A8_SIGNED = 8] = "R8G8B8A8_SIGNED", N4[N4.R8G8B8A8_UNSIGNED = 9] = "R8G8B8A8_UNSIGNED", N4[N4.R8G8B8A8_COLOR = 10] = "R8G8B8A8_COLOR", N4[N4.R16G16B16A16_DASHARRAY = 11] = "R16G16B16A16_DASHARRAY", N4[N4.R16G16B16A16_PATTERN = 12] = "R16G16B16A16_PATTERN";
}(N2 || (N2 = {})), function(N4) {
  N4[N4.UNIFORM = 0] = "UNIFORM", N4[N4.DATA_DRIVEN = 1] = "DATA_DRIVEN", N4[N4.INTERPOLATED_DATA_DRIVEN = 2] = "INTERPOLATED_DATA_DRIVEN", N4[N4.UNUSED = 3] = "UNUSED";
}(R2 || (R2 = {}));

// node_modules/@arcgis/core/views/2d/engine/vectorTiles/shaders/VTLMaterial.js
var _r = class _r {
  constructor(t5) {
    this._locations = /* @__PURE__ */ new Map(), this._key = t5;
  }
  get key() {
    return this._key;
  }
  get type() {
    return 7 & this._key;
  }
  defines() {
    return [];
  }
  getStride() {
    return this._layout || this._buildAttributesInfo(), this._stride;
  }
  getAttributeLocations() {
    return 0 === this._locations.size && this._buildAttributesInfo(), this._locations;
  }
  getLayoutInfo() {
    return this._layout || this._buildAttributesInfo(), this._layout;
  }
  getEncodingInfos() {
    return this._propertyEncodingInfo || this._buildAttributesInfo(), this._propertyEncodingInfo;
  }
  getUniforms() {
    return this._uniforms || this._buildAttributesInfo(), this._uniforms;
  }
  getShaderHeader() {
    return this._shaderHeader || this._buildAttributesInfo(), this._shaderHeader;
  }
  getShaderMain() {
    return this._shaderMain || this._buildAttributesInfo(), this._shaderMain;
  }
  setDataUniforms(t5, e5, n4, o4, s2) {
    const r3 = this.getUniforms();
    for (const i6 of r3) {
      const { name: r4, type: a5, getValue: c4 } = i6, u2 = c4(n4, e5, o4, s2);
      if (null !== u2) switch (a5) {
        case "float":
          t5.setUniform1f(r4, u2);
          break;
        case "vec2":
          t5.setUniform2fv(r4, u2);
          break;
        case "vec4":
          t5.setUniform4fv(r4, u2);
      }
    }
  }
  encodeAttributes(t5, n4, o4, s2) {
    const r3 = this.attributesInfo(), i6 = this.getEncodingInfos(), a5 = [];
    let c4 = 0, u2 = 0;
    for (const _3 of Object.keys(i6)) {
      const h2 = i6[_3], { type: l5, precisionFactor: f3, isLayout: d4 } = r3[_3], y2 = d4 ? o4.getLayoutProperty(_3) : o4.getPaintProperty(_3), m = y2.interpolator?.getInterpolationRange(n4);
      let E2 = 0;
      for (const o5 of h2) {
        const { offset: r4, bufferElementsToAdd: i7 } = o5;
        if (i7 > 0) {
          for (let t6 = 0; t6 < i7; t6++) a5.push(0);
          c4 += u2, u2 = o5.bufferElementsToAdd;
        }
        const _4 = s2 ?? y2.getValue(m ? m[E2] : n4, t5);
        switch (l5) {
          case N2.R8_SIGNED:
          case N2.R8_UNSIGNED:
            a5[c4] |= this._encodeByte(_4 * (f3 || 1), 8 * r4);
            break;
          case N2.R16_SIGNED:
          case N2.R16_UNSIGNED:
            a5[c4] |= this._encodeShort(_4 * (f3 || 1), 8 * r4);
            break;
          case N2.R8G8_SIGNED:
          case N2.R8G8_UNSIGNED:
            a5[c4] |= this._encodeByte(_4 * (f3 || 1), 8 * r4), a5[c4] |= this._encodeByte(_4 * (f3 || 1), 8 * r4 + 8);
            break;
          case N2.R16G16_SIGNED:
          case N2.R16G16_UNSIGNED:
            a5[c4] |= this._encodeShort(_4 * (f3 || 1), 8 * r4), a5[c4] |= this._encodeShort(_4 * (f3 || 1), 8 * r4 + 16);
            break;
          case N2.R8G8B8A8_SIGNED:
          case N2.R8G8B8A8_UNSIGNED:
            a5[c4] |= this._encodeByte(_4 * (f3 || 1), 8 * r4), a5[c4] |= this._encodeByte(_4 * (f3 || 1), 8 * r4 + 8), a5[c4] |= this._encodeByte(_4 * (f3 || 1), 8 * r4 + 16), a5[c4] |= this._encodeByte(_4 * (f3 || 1), 8 * r4 + 24);
            break;
          case N2.R8G8B8A8_COLOR:
            a5[c4] = this._encodeColor(_4);
            break;
          case N2.R16G16B16A16_DASHARRAY:
          case N2.R16G16B16A16_PATTERN:
            this._encodePattern(c4, a5, _4);
            break;
          default:
            throw new Error("Unsupported encoding type");
        }
        E2++;
      }
    }
    return a5;
  }
  getAtributeState(t5) {
    let e5 = 0;
    const n4 = 3 + 2 * t5;
    return e5 |= this._bit(n4), e5 |= this._bit(n4 + 1) << 1, e5;
  }
  _buildAttributesInfo() {
    const t5 = [], e5 = {}, s2 = {};
    let i6 = -1;
    const a5 = this.attributesInfo(), c4 = this.attributes();
    let u2 = -1;
    for (const o4 of c4) {
      u2++;
      const c5 = this.getAtributeState(u2);
      if (c5 === R2.UNIFORM || c5 === R2.UNUSED) continue;
      const _4 = a5[o4], h3 = [];
      e5[o4] = h3;
      const l6 = _4.type;
      for (let e6 = 0; e6 < c5; e6++) {
        const { dataType: e7, bytesPerElement: n4, count: o5, normalized: a6 } = _r._encodingInfo[l6], c6 = n4 * o5, u3 = `${e7}-${true === a6}`;
        let _5 = s2[u3], f3 = 0;
        if (!_5 || _5.count + o5 > 4) i6++, _5 = { dataIndex: i6, count: 0, offset: 0 }, 4 !== o5 && (s2[u3] = _5), t5.push({ location: -1, name: "a_data_" + i6, count: o5, type: e7, normalized: a6 }), f3 = Math.ceil(Math.max(c6 / 4, 1));
        else {
          const e8 = t5[_5.dataIndex];
          e8.count += o5;
          f3 = Math.ceil(Math.max(e8.count * n4 / 4, 1)) - Math.ceil(Math.max(_5.offset / 4, 1));
        }
        h3.push({ dataIndex: _5.dataIndex, offset: _5.offset, bufferElementsToAdd: f3 }), _5.offset += c6, _5.count += o5;
      }
    }
    for (const n4 of t5) switch (n4.type) {
      case O.BYTE:
      case O.UNSIGNED_BYTE:
        n4.count = 4;
        break;
      case O.SHORT:
      case O.UNSIGNED_SHORT:
        n4.count += n4.count % 2;
    }
    this._buildVertexBufferLayout(t5);
    let _3 = 0;
    const h2 = this._layout.get("geometry");
    for (const n4 of h2) this._locations.set(n4.name, _3++);
    const l5 = this._layout.get("opacity");
    if (l5) for (const n4 of l5) this._locations.set(n4.name, _3++);
    this._buildShaderInfo(t5, e5), this._propertyEncodingInfo = e5;
  }
  _buildVertexBufferLayout(t5) {
    const e5 = /* @__PURE__ */ new Map(), n4 = this.geometryInfo();
    let o4 = n4[0].stride;
    if (0 === t5.length) e5.set("geometry", n4);
    else {
      const r4 = [];
      let a5 = o4;
      for (const e6 of t5) o4 += i3(e6.type) * e6.count;
      for (const t6 of n4) r4.push(new t(t6.name, t6.count, t6.type, t6.offset, o4, t6.normalized));
      for (const e6 of t5) r4.push(new t(e6.name, e6.count, e6.type, a5, o4, e6.normalized)), a5 += i3(e6.type) * e6.count;
      e5.set("geometry", r4);
    }
    const r3 = this.opacityInfo();
    r3 && e5.set("opacity", r3), this._layout = e5, this._stride = o4;
  }
  _buildShaderInfo(t5, o4) {
    let s2 = "\n", i6 = "\n";
    const c4 = [];
    for (const e5 of t5) s2 += `attribute ${this._getType(e5.count)} ${e5.name};
`;
    const u2 = this.attributes(), _3 = this.attributesInfo();
    let h2 = -1;
    for (const l5 of u2) {
      h2++;
      const { name: t6, type: u3, precisionFactor: f3, isLayout: d4 } = _3[l5], y2 = f3 && 1 !== f3 ? " * " + 1 / f3 : "", { bytesPerElement: m, count: E2 } = _r._encodingInfo[u3], I4 = (t7) => `a_data_${t7.dataIndex}${a2(E2, t7.offset, m)}`;
      switch (this.getAtributeState(h2)) {
        case R2.UNIFORM:
          {
            const n4 = this._getType(E2), o5 = `u_${t6}`;
            c4.push({ name: o5, type: n4, getValue: (t7, n5, o6, s3) => {
              const r3 = d4 ? t7.getLayoutValue(l5, n5) : t7.getPaintValue(l5, n5);
              if (u3 === N2.R16G16B16A16_DASHARRAY) {
                const e5 = t7.getDashKey(r3, t7.getLayoutValue("line-cap", n5)), o7 = s3.getMosaicItemPosition(e5, false);
                if (null == o7) return null;
                const { tl: i7, br: a5 } = o7;
                return [i7[0], a5[1], a5[0], i7[1]];
              }
              if (u3 === N2.R16G16B16A16_PATTERN) {
                const t8 = s3.getMosaicItemPosition(r3, !l5.includes("line-"));
                if (null == t8) return null;
                const { tl: e5, br: n6 } = t8;
                return [e5[0], n6[1], n6[0], e5[1]];
              }
              if (u3 === N2.R8G8B8A8_COLOR) {
                const t8 = r3[3];
                return [t8 * r3[0], t8 * r3[1], t8 * r3[2], t8];
              }
              return r3;
            } }), s2 += `uniform ${n4} ${o5};
`, i6 += `${n4} ${t6} = ${o5};
`;
          }
          break;
        case R2.DATA_DRIVEN:
          {
            const e5 = I4(o4[l5][0]);
            i6 += `${this._getType(E2)} ${t6} = ${e5}${y2};
`;
          }
          break;
        case R2.INTERPOLATED_DATA_DRIVEN: {
          const e5 = `u_t_${t6}`;
          c4.push({ name: e5, type: "float", getValue: (t7, e6, n5, o5) => (d4 ? t7.getLayoutProperty(l5) : t7.getPaintProperty(l5)).interpolator.interpolationUniformValue(n5, e6) }), s2 += `uniform float ${e5};
`;
          const n4 = I4(o4[l5][0]), r3 = I4(o4[l5][1]);
          i6 += `${this._getType(E2)} ${t6} = mix(${n4}${y2}, ${r3}${y2}, ${e5});
`;
        }
      }
    }
    this._shaderHeader = s2, this._shaderMain = i6, this._uniforms = c4;
  }
  _bit(t5) {
    return (this._key & 1 << t5) >> t5;
  }
  _getType(t5) {
    switch (t5) {
      case 1:
        return "float";
      case 2:
        return "vec2";
      case 3:
        return "vec3";
      case 4:
        return "vec4";
    }
    throw new Error("Invalid count");
  }
  _encodeColor(e5) {
    const n4 = 255 * e5[3];
    return t2.i8888to32(e5[0] * n4, e5[1] * n4, e5[2] * n4, n4);
  }
  _encodePattern(t5, e5, n4) {
    if (!n4?.rect) return;
    const o4 = 2, s2 = n4.rect, r3 = n4.width, i6 = n4.height;
    e5[t5] = this._encodeShort(s2.x + o4, 0), e5[t5] |= this._encodeShort(s2.y + o4 + i6, 16), e5[t5 + 1] = this._encodeShort(s2.x + o4 + r3, 0), e5[t5 + 1] |= this._encodeShort(s2.y + o4, 16);
  }
  _encodeByte(t5, e5) {
    return (255 & t5) << e5;
  }
  _encodeShort(t5, e5) {
    return (65535 & t5) << e5;
  }
};
_r._encodingInfo = { [N2.R8_SIGNED]: { dataType: O.BYTE, bytesPerElement: 1, count: 1, normalized: false }, [N2.R8_UNSIGNED]: { dataType: O.UNSIGNED_BYTE, bytesPerElement: 1, count: 1, normalized: false }, [N2.R16_SIGNED]: { dataType: O.SHORT, bytesPerElement: 2, count: 1, normalized: false }, [N2.R16_UNSIGNED]: { dataType: O.UNSIGNED_SHORT, bytesPerElement: 2, count: 1, normalized: false }, [N2.R8G8_SIGNED]: { dataType: O.BYTE, bytesPerElement: 1, count: 2, normalized: false }, [N2.R8G8_UNSIGNED]: { dataType: O.UNSIGNED_BYTE, bytesPerElement: 1, count: 2, normalized: false }, [N2.R16G16_SIGNED]: { dataType: O.SHORT, bytesPerElement: 2, count: 2, normalized: false }, [N2.R16G16_UNSIGNED]: { dataType: O.UNSIGNED_SHORT, bytesPerElement: 2, count: 2, normalized: false }, [N2.R8G8B8A8_SIGNED]: { dataType: O.BYTE, bytesPerElement: 1, count: 4, normalized: false }, [N2.R8G8B8A8_UNSIGNED]: { dataType: O.UNSIGNED_BYTE, bytesPerElement: 1, count: 4, normalized: false }, [N2.R8G8B8A8_COLOR]: { dataType: O.UNSIGNED_BYTE, bytesPerElement: 1, count: 4, normalized: true }, [N2.R16G16B16A16_DASHARRAY]: { dataType: O.UNSIGNED_SHORT, bytesPerElement: 2, count: 4, normalized: false }, [N2.R16G16B16A16_PATTERN]: { dataType: O.UNSIGNED_SHORT, bytesPerElement: 2, count: 4, normalized: false } };
var r = _r;
var i3 = (t5) => {
  switch (t5) {
    case O.FLOAT:
    case O.INT:
    case O.UNSIGNED_INT:
      return 4;
    case O.SHORT:
    case O.UNSIGNED_SHORT:
    case O.HALF_FLOAT:
      return 2;
    case O.BYTE:
    case O.UNSIGNED_BYTE:
      return 1;
  }
};
var a2 = (t5, e5, n4) => {
  const o4 = e5 / n4;
  if (1 === t5) switch (o4) {
    case 0:
      return ".x";
    case 1:
      return ".y";
    case 2:
      return ".z";
    case 3:
      return ".w";
  }
  else if (2 === t5) switch (o4) {
    case 0:
      return ".xy";
    case 1:
      return ".yz";
    case 2:
      return ".zw";
  }
  else if (3 === t5) switch (o4) {
    case 0:
      return ".xyz";
    case 1:
      return ".yzw";
  }
  return "";
};

// node_modules/@arcgis/core/views/2d/engine/vectorTiles/shaders/VTLBackgroundMaterial.js
var _s = class _s extends r {
  constructor(t5) {
    super(t5);
  }
  geometryInfo() {
    return _s.GEOMETRY_LAYOUT;
  }
  opacityInfo() {
    return null;
  }
  attributes() {
    return _s.ATTRIBUTES;
  }
  attributesInfo() {
    return _s.ATTRIBUTES_INFO;
  }
};
_s.ATTRIBUTES = [];
_s.GEOMETRY_LAYOUT = [new t("a_pos", 2, O.BYTE, 0, 2)];
_s.ATTRIBUTES_INFO = {};
var s = _s;

// node_modules/@arcgis/core/views/2d/engine/vectorTiles/shaders/VTLCircleMaterial.js
var _o = class _o extends r {
  constructor(r3) {
    super(r3);
  }
  geometryInfo() {
    return _o.GEOMETRY_LAYOUT;
  }
  opacityInfo() {
    return null;
  }
  attributes() {
    return _o.ATTRIBUTES;
  }
  attributesInfo() {
    return _o.ATTRIBUTES_INFO;
  }
};
_o.ATTRIBUTES = ["circle-radius", "circle-color", "circle-opacity", "circle-stroke-width", "circle-stroke-color", "circle-stroke-opacity", "circle-blur"];
_o.GEOMETRY_LAYOUT = [new t("a_pos", 2, O.SHORT, 0, 4)];
_o.ATTRIBUTES_INFO = { "circle-radius": { name: "radius", type: N2.R8_UNSIGNED }, "circle-color": { name: "color", type: N2.R8G8B8A8_COLOR }, "circle-opacity": { name: "opacity", type: N2.R8_UNSIGNED, precisionFactor: 100 }, "circle-stroke-width": { name: "stroke_width", type: N2.R8_UNSIGNED, precisionFactor: 4 }, "circle-stroke-color": { name: "stroke_color", type: N2.R8G8B8A8_COLOR }, "circle-stroke-opacity": { name: "stroke_opacity", type: N2.R8_UNSIGNED, precisionFactor: 100 }, "circle-blur": { name: "blur", type: N2.R8_UNSIGNED, precisionFactor: 32 } };
var o = _o;

// node_modules/@arcgis/core/views/2d/engine/vectorTiles/shaders/VTLFillMaterial.js
var _e = class _e extends r {
  constructor(t5) {
    super(t5);
  }
  geometryInfo() {
    return _e.GEOMETRY_LAYOUT;
  }
  opacityInfo() {
    return null;
  }
  attributes() {
    return _e.ATTRIBUTES;
  }
  attributesInfo() {
    return _e.ATTRIBUTES_INFO;
  }
};
_e.ATTRIBUTES = ["fill-color", "fill-opacity", "fill-pattern"];
_e.GEOMETRY_LAYOUT = [new t("a_pos", 2, O.SHORT, 0, 4)];
_e.ATTRIBUTES_INFO = { "fill-color": { name: "color", type: N2.R8G8B8A8_COLOR }, "fill-opacity": { name: "opacity", type: N2.R8_UNSIGNED, precisionFactor: 100 }, "fill-pattern": { name: "tlbr", type: N2.R16G16B16A16_PATTERN, isOptional: true } };
var e3 = _e;
var _l = class _l extends r {
  constructor(t5, o4) {
    super(t5), this._usefillColor = o4;
  }
  geometryInfo() {
    return _l.GEOMETRY_LAYOUT;
  }
  opacityInfo() {
    return null;
  }
  attributes() {
    return this._usefillColor ? _l.ATTRIBUTES_FILL : _l.ATTRIBUTES_OUTLINE;
  }
  attributesInfo() {
    return this._usefillColor ? _l.ATTRIBUTES_INFO_FILL : _l.ATTRIBUTES_INFO_OUTLINE;
  }
};
_l.ATTRIBUTES_OUTLINE = ["fill-outline-color", "fill-opacity"];
_l.ATTRIBUTES_FILL = ["fill-color", "fill-opacity"];
_l.GEOMETRY_LAYOUT = [new t("a_pos", 2, O.SHORT, 0, 8), new t("a_offset", 2, O.BYTE, 4, 8), new t("a_xnormal", 2, O.BYTE, 6, 8)];
_l.ATTRIBUTES_INFO_OUTLINE = { "fill-outline-color": { name: "color", type: N2.R8G8B8A8_COLOR }, "fill-opacity": { name: "opacity", type: N2.R8_UNSIGNED, precisionFactor: 100 } };
_l.ATTRIBUTES_INFO_FILL = { "fill-color": { name: "color", type: N2.R8G8B8A8_COLOR }, "fill-opacity": { name: "opacity", type: N2.R8_UNSIGNED, precisionFactor: 100 } };
var l3 = _l;

// node_modules/@arcgis/core/views/2d/engine/vectorTiles/shaders/VTLLineMaterial.js
var _n = class _n extends r {
  constructor(e5) {
    super(e5);
  }
  geometryInfo() {
    return _n.GEOMETRY_LAYOUT;
  }
  opacityInfo() {
    return null;
  }
  attributes() {
    return _n.ATTRIBUTES;
  }
  attributesInfo() {
    return _n.ATTRIBUTES_INFO;
  }
};
_n.ATTRIBUTES = ["line-blur", "line-color", "line-gap-width", "line-offset", "line-opacity", "line-width", "line-pattern", "line-dasharray"];
_n.GEOMETRY_LAYOUT = [new t("a_pos", 2, O.SHORT, 0, 16), new t("a_extrude_offset", 4, O.BYTE, 4, 16), new t("a_dir_normal", 4, O.BYTE, 8, 16), new t("a_accumulatedDistance", 2, O.UNSIGNED_SHORT, 12, 16)];
_n.ATTRIBUTES_INFO = { "line-width": { name: "width", type: N2.R8_UNSIGNED, precisionFactor: 2 }, "line-gap-width": { name: "gap_width", type: N2.R8_UNSIGNED, precisionFactor: 2 }, "line-offset": { name: "offset", type: N2.R8_SIGNED, precisionFactor: 2 }, "line-color": { name: "color", type: N2.R8G8B8A8_COLOR }, "line-opacity": { name: "opacity", type: N2.R8_UNSIGNED, precisionFactor: 100 }, "line-blur": { name: "blur", type: N2.R8_UNSIGNED, precisionFactor: 4 }, "line-pattern": { name: "tlbr", type: N2.R16G16B16A16_PATTERN, isOptional: true }, "line-dasharray": { name: "tlbr", type: N2.R16G16B16A16_DASHARRAY, isOptional: true } };
var n2 = _n;

// node_modules/@arcgis/core/views/2d/engine/vectorTiles/shaders/VTLSymbolMaterial.js
var i4 = [new t("a_pos", 2, O.SHORT, 0, 16), new t("a_vertexOffset", 2, O.SHORT, 4, 16), new t("a_texAngleRange", 4, O.UNSIGNED_BYTE, 8, 16), new t("a_levelInfo", 4, O.UNSIGNED_BYTE, 12, 16)];
var a3 = [new t("a_opacityInfo", 1, O.UNSIGNED_BYTE, 0, 1)];
var _n2 = class _n2 extends r {
  constructor(t5) {
    super(t5);
  }
  geometryInfo() {
    return i4;
  }
  opacityInfo() {
    return a3;
  }
  attributes() {
    return _n2.ATTRIBUTES;
  }
  attributesInfo() {
    return _n2.ATTRIBUTES_INFO;
  }
};
_n2.ATTRIBUTES = ["icon-color", "icon-opacity", "icon-halo-blur", "icon-halo-color", "icon-halo-width", "icon-size"];
_n2.ATTRIBUTES_INFO = { "icon-color": { name: "color", type: N2.R8G8B8A8_COLOR }, "icon-opacity": { name: "opacity", type: N2.R8_UNSIGNED, precisionFactor: 100 }, "icon-halo-color": { name: "halo_color", type: N2.R8G8B8A8_COLOR }, "icon-halo-width": { name: "halo_width", type: N2.R8_UNSIGNED, precisionFactor: 4 }, "icon-halo-blur": { name: "halo_blur", type: N2.R8_UNSIGNED, precisionFactor: 4 }, "icon-size": { name: "size", type: N2.R8_UNSIGNED, precisionFactor: 32, isLayout: true } };
var n3 = _n2;
var _c = class _c extends r {
  constructor(t5) {
    super(t5);
  }
  geometryInfo() {
    return i4;
  }
  opacityInfo() {
    return a3;
  }
  attributes() {
    return _c.ATTRIBUTES;
  }
  attributesInfo() {
    return _c.ATTRIBUTES_INFO;
  }
};
_c.ATTRIBUTES = ["text-color", "text-opacity", "text-halo-blur", "text-halo-color", "text-halo-width", "text-size"];
_c.ATTRIBUTES_INFO = { "text-color": { name: "color", type: N2.R8G8B8A8_COLOR }, "text-opacity": { name: "opacity", type: N2.R8_UNSIGNED, precisionFactor: 100 }, "text-halo-color": { name: "halo_color", type: N2.R8G8B8A8_COLOR }, "text-halo-width": { name: "halo_width", type: N2.R8_UNSIGNED, precisionFactor: 4 }, "text-halo-blur": { name: "halo_blur", type: N2.R8_UNSIGNED, precisionFactor: 4 }, "text-size": { name: "size", type: N2.R8_UNSIGNED, isLayout: true } };
var c2 = _c;

// node_modules/@arcgis/core/views/2d/engine/vectorTiles/expression/types.js
var r2 = { kind: "null" };
var e4 = { kind: "number" };
var t3 = { kind: "string" };
var i5 = { kind: "boolean" };
var o2 = { kind: "color" };
var f2 = { kind: "object" };
var u = { kind: "value" };
function a4(n4, r3) {
  return { kind: "array", itemType: n4, n: r3 };
}
var y = [r2, e4, t3, i5, o2, f2, a4(u)];
function k(n4) {
  if ("array" === n4.kind) {
    const r3 = k(n4.itemType);
    return "number" == typeof n4.n ? `array<${r3}, ${n4.n}>` : "value" === n4.itemType.kind ? "array" : `array<${r3}>`;
  }
  return n4.kind;
}
function l4(y2) {
  if (null === y2) return r2;
  if ("string" == typeof y2) return t3;
  if ("boolean" == typeof y2) return i5;
  if ("number" == typeof y2) return e4;
  if (y2 instanceof l) return o2;
  if (Array.isArray(y2)) {
    let n4;
    for (const r3 of y2) {
      const e5 = l4(r3);
      if (n4) {
        if (n4 !== e5) {
          n4 = u;
          break;
        }
      } else n4 = e5;
    }
    return a4(n4 || u, y2.length);
  }
  return "object" == typeof y2 ? f2 : u;
}
function c3(n4, r3) {
  if ("array" === r3.kind) return "array" === n4.kind && (0 === n4.n && "value" === n4.itemType.kind || c3(n4.itemType, r3.itemType)) && ("number" != typeof r3.n || r3.n === n4.n);
  if ("value" === r3.kind) {
    for (const e5 of y) if (c3(n4, e5)) return true;
  }
  return r3.kind === n4.kind;
}
function d2(r3) {
  if (null === r3) return "";
  const e5 = typeof r3;
  return "string" === e5 ? r3 : "number" === e5 || "boolean" === e5 ? String(r3) : r3 instanceof l ? r3.toString() : JSON.stringify(r3);
}

// node_modules/@arcgis/core/views/2d/engine/vectorTiles/expression/expression.js
var _ = class {
  constructor(t5) {
    this._parent = t5, this._vars = {};
  }
  add(t5, e5) {
    this._vars[t5] = e5;
  }
  get(t5) {
    return this._vars[t5] ? this._vars[t5] : this._parent ? this._parent.get(t5) : null;
  }
};
var v = class _v {
  constructor() {
    this.type = u;
  }
  static parse(t5) {
    if (t5.length > 1) throw new Error('"id" does not expect arguments');
    return new _v();
  }
  evaluate(t5, e5) {
    return t5?.id;
  }
};
var b2 = class _b {
  constructor() {
    this.type = t3;
  }
  static parse(t5) {
    if (t5.length > 1) throw new Error('"geometry-type" does not expect arguments');
    return new _b();
  }
  evaluate(t5, e5) {
    if (!t5) return null;
    switch (t5.type) {
      case i2.Point:
        return "Point";
      case i2.LineString:
        return "LineString";
      case i2.Polygon:
        return "Polygon";
      default:
        return null;
    }
  }
};
var d3 = class _d {
  constructor() {
    this.type = f2;
  }
  static parse(t5) {
    if (t5.length > 1) throw new Error('"properties" does not expect arguments');
    return new _d();
  }
  evaluate(t5, e5) {
    return t5?.values;
  }
};
var x = class _x {
  constructor() {
    this.type = e4;
  }
  static parse(t5) {
    if (t5.length > 1) throw new Error('"zoom" does not expect arguments');
    return new _x();
  }
  evaluate(t5, e5) {
    return e5;
  }
};
var E = class _E {
  constructor(t5, e5, r3) {
    this._lhs = t5, this._rhs = e5, this._compare = r3, this.type = i5;
  }
  static parse(t5, e5, r3) {
    if (3 !== t5.length && 4 !== t5.length) throw new Error(`"${t5[0]}" expects 2 or 3 arguments`);
    if (4 === t5.length) throw new Error(`"${t5[0]}" collator not supported`);
    return new _E(pt(t5[1], e5), pt(t5[2], e5), r3);
  }
  evaluate(t5, e5) {
    return this._compare(this._lhs.evaluate(t5, e5), this._rhs.evaluate(t5, e5));
  }
};
var $ = class extends E {
  static parse(t5, e5) {
    return E.parse(t5, e5, (t6, e6) => t6 === e6);
  }
};
var M = class extends E {
  static parse(t5, e5) {
    return E.parse(t5, e5, (t6, e6) => t6 !== e6);
  }
};
var k2 = class extends E {
  static parse(t5, e5) {
    return E.parse(t5, e5, (t6, e6) => t6 < e6);
  }
};
var A = class extends E {
  static parse(t5, e5) {
    return E.parse(t5, e5, (t6, e6) => t6 <= e6);
  }
};
var j = class extends E {
  static parse(t5, e5) {
    return E.parse(t5, e5, (t6, e6) => t6 > e6);
  }
};
var q = class extends E {
  static parse(t5, e5) {
    return E.parse(t5, e5, (t6, e6) => t6 >= e6);
  }
};
var N3 = class _N {
  constructor(t5) {
    this._arg = t5, this.type = i5;
  }
  static parse(t5, e5) {
    if (2 !== t5.length) throw new Error('"!" expects 1 argument');
    return new _N(pt(t5[1], e5));
  }
  evaluate(t5, e5) {
    return !this._arg.evaluate(t5, e5);
  }
};
var C2 = class _C {
  constructor(t5) {
    this._args = t5, this.type = i5;
  }
  static parse(t5, e5) {
    const r3 = [];
    for (let s2 = 1; s2 < t5.length; s2++) r3.push(pt(t5[s2], e5));
    return new _C(r3);
  }
  evaluate(t5, e5) {
    for (const r3 of this._args) if (!r3.evaluate(t5, e5)) return false;
    return true;
  }
};
var R3 = class _R {
  constructor(t5) {
    this._args = t5, this.type = i5;
  }
  static parse(t5, e5) {
    const r3 = [];
    for (let s2 = 1; s2 < t5.length; s2++) r3.push(pt(t5[s2], e5));
    return new _R(r3);
  }
  evaluate(t5, e5) {
    for (const r3 of this._args) if (r3.evaluate(t5, e5)) return true;
    return false;
  }
};
var z = class _z {
  constructor(t5) {
    this._args = t5, this.type = i5;
  }
  static parse(t5, e5) {
    const r3 = [];
    for (let s2 = 1; s2 < t5.length; s2++) r3.push(pt(t5[s2], e5));
    return new _z(r3);
  }
  evaluate(t5, e5) {
    for (const r3 of this._args) if (r3.evaluate(t5, e5)) return false;
    return true;
  }
};
var I2 = class _I {
  constructor(t5, e5, r3) {
    this.type = t5, this._args = e5, this._fallback = r3;
  }
  static parse(t5, e5, r3) {
    if (t5.length < 4) throw new Error('"case" expects at least 3 arguments');
    if (t5.length % 2 == 1) throw new Error('"case" expects an odd number of arguments');
    let s2;
    const n4 = [];
    for (let o4 = 1; o4 < t5.length - 1; o4 += 2) {
      const a6 = pt(t5[o4], e5), i6 = pt(t5[o4 + 1], e5, r3);
      s2 || (s2 = i6.type), n4.push({ condition: a6, output: i6 });
    }
    const a5 = pt(t5[t5.length - 1], e5, r3);
    return s2 || (s2 = a5.type), new _I(s2, n4, a5);
  }
  evaluate(t5, e5) {
    for (const r3 of this._args) if (r3.condition.evaluate(t5, e5)) return r3.output.evaluate(t5, e5);
    return this._fallback.evaluate(t5, e5);
  }
};
var L2 = class _L {
  constructor(t5, e5) {
    this.type = t5, this._args = e5;
  }
  static parse(t5, e5) {
    if (t5.length < 2) throw new Error('"coalesce" expects at least 1 argument');
    let r3;
    const s2 = [];
    for (let n4 = 1; n4 < t5.length; n4++) {
      const a5 = pt(t5[n4], e5);
      r3 || (r3 = a5.type), s2.push(a5);
    }
    return new _L(r3, s2);
  }
  evaluate(t5, e5) {
    for (const r3 of this._args) {
      const s2 = r3.evaluate(t5, e5);
      if (null !== s2) return s2;
    }
    return null;
  }
};
var U2 = class _U {
  constructor(t5, e5, r3, s2, n4) {
    this.type = t5, this._input = e5, this._labels = r3, this._outputs = s2, this._fallback = n4;
  }
  static parse(t5, e5) {
    if (t5.length < 3) throw new Error('"match" expects at least 3 arguments');
    if (t5.length % 2 == 0) throw new Error('"case" expects an even number of arguments');
    let r3;
    const s2 = pt(t5[1], e5), n4 = [], a5 = {};
    let o4;
    for (let i6 = 2; i6 < t5.length - 1; i6 += 2) {
      let s3 = t5[i6];
      Array.isArray(s3) || (s3 = [s3]);
      for (const t6 of s3) {
        const e6 = typeof t6;
        if ("string" !== e6 && "number" !== e6) throw new Error('"match" requires string or number literal as labels');
        if (o4) {
          if (e6 !== o4) throw new Error('"match" requires labels to have the same type');
        } else o4 = e6;
        a5[t6] = n4.length;
      }
      const l5 = pt(t5[i6 + 1], e5);
      r3 || (r3 = l5.type), n4.push(l5);
    }
    return new _U(r3, s2, a5, n4, pt(t5[t5.length - 1], e5));
  }
  evaluate(t5, e5) {
    const r3 = this._input.evaluate(t5, e5);
    return (this._outputs[this._labels[r3]] || this._fallback).evaluate(t5, e5);
  }
};
var P2 = class _P {
  constructor(t5, e5, r3, s2, n4) {
    this._operator = t5, this.type = e5, this.interpolation = r3, this.input = s2, this._stops = n4;
  }
  static parse(t5, e5, r3) {
    const s2 = t5[0];
    if (t5.length < 5) throw new Error(`"${s2}" expects at least 4 arguments`);
    const n4 = t5[1];
    if (!Array.isArray(n4) || 0 === n4.length) throw new Error(`"${n4}" is not a valid interpolation`);
    switch (n4[0]) {
      case "linear":
        if (1 !== n4.length) throw new Error("Linear interpolation cannot have parameters");
        break;
      case "exponential":
        if (2 !== n4.length || "number" != typeof n4[1]) throw new Error("Exponential interpolation requires one numeric argument");
        break;
      case "cubic-bezier":
        if (5 !== n4.length) throw new Error("Cubic bezier interpolation requires four numeric arguments with values between 0 and 1");
        for (let t6 = 1; t6 < 5; t6++) {
          const e6 = n4[t6];
          if ("number" != typeof e6 || e6 < 0 || e6 > 1) throw new Error("Cubic bezier interpolation requires four numeric arguments with values between 0 and 1");
        }
        break;
      default:
        throw new Error(`"${t5[0]}" unknown interpolation type "${n4[0]}"`);
    }
    if (t5.length % 2 != 1) throw new Error(`"${s2}" expects an even number of arguments`);
    const a5 = pt(t5[2], e5, e4);
    let o4;
    "interpolate-hcl" === s2 || "interpolate-lab" === s2 ? o4 = o2 : r3 && "value" !== r3.kind && (o4 = r3);
    const i6 = [];
    for (let l5 = 3; l5 < t5.length; l5 += 2) {
      const r4 = t5[l5];
      if ("number" != typeof r4) throw new Error(`"${s2}" requires stop inputs as literal numbers`);
      if (i6.length && i6[i6.length - 1][0] >= r4) throw new Error(`"${s2}" requires strictly ascending stop inputs`);
      const n5 = pt(t5[l5 + 1], e5, o4);
      o4 || (o4 = n5.type), i6.push([r4, n5]);
    }
    if (o4 && o4 !== o2 && o4 !== e4 && ("array" !== o4.kind || o4.itemType !== e4)) throw new Error(`"${s2}" cannot interpolate type ${k(o4)}`);
    return new _P(s2, o4, n4, a5, i6);
  }
  evaluate(n4, a5) {
    const i6 = this._stops;
    if (1 === i6.length) return i6[0][1].evaluate(n4, a5);
    const l5 = this.input.evaluate(n4, a5);
    if (l5 <= i6[0][0]) return i6[0][1].evaluate(n4, a5);
    if (l5 >= i6[i6.length - 1][0]) return i6[i6.length - 1][1].evaluate(n4, a5);
    let u2 = 0;
    for (; ++u2 < i6.length && !(l5 < i6[u2][0]); ) ;
    const c4 = i6[u2 - 1][0], h2 = i6[u2][0], p2 = _P.interpolationRatio(this.interpolation, l5, c4, h2), f3 = i6[u2 - 1][1].evaluate(n4, a5), w = i6[u2][1].evaluate(n4, a5);
    if ("interpolate" === this._operator) {
      if ("array" === this.type.kind && Array.isArray(f3) && Array.isArray(w)) return f3.map((t5, e5) => p(t5, w[e5], p2));
      if ("color" === this.type.kind && f3 instanceof l && w instanceof l) {
        const e5 = new l(f3), r3 = new l(w);
        return new l([p(e5.r, r3.r, p2), p(e5.g, r3.g, p2), p(e5.b, r3.b, p2), p(e5.a, r3.a, p2)]);
      }
      if ("number" === this.type.kind && "number" == typeof f3 && "number" == typeof w) return p(f3, w, p2);
      throw new Error(`"${this._operator}" cannot interpolate type ${k(this.type)}`);
    }
    if ("interpolate-hcl" === this._operator) {
      const s2 = H(f3), n5 = H(w), a6 = n5.h - s2.h, i7 = U({ h: s2.h + p2 * (a6 > 180 || a6 < -180 ? a6 - 360 * Math.round(a6 / 360) : a6), c: p(s2.c, n5.c, p2), l: p(s2.l, n5.l, p2) });
      return new l({ a: p(f3.a, w.a, p2), ...i7 });
    }
    if ("interpolate-lab" === this._operator) {
      const e5 = C(f3), n5 = C(w), a6 = U({ l: p(e5.l, n5.l, p2), a: p(e5.a, n5.a, p2), b: p(e5.b, n5.b, p2) });
      return new l({ a: p(f3.a, w.a, p2), ...a6 });
    }
    throw new Error(`Unexpected operator "${this._operator}"`);
  }
  interpolationUniformValue(t5, e5) {
    const r3 = this._stops;
    if (1 === r3.length) return 0;
    if (t5 >= r3[r3.length - 1][0]) return 0;
    let s2 = 0;
    for (; ++s2 < r3.length && !(t5 < r3[s2][0]); ) ;
    const n4 = r3[s2 - 1][0], a5 = r3[s2][0];
    return _P.interpolationRatio(this.interpolation, e5, n4, a5);
  }
  getInterpolationRange(t5) {
    const e5 = this._stops;
    if (1 === e5.length) {
      const t6 = e5[0][0];
      return [t6, t6];
    }
    const r3 = e5[e5.length - 1][0];
    if (t5 >= r3) return [r3, r3];
    let s2 = 0;
    for (; ++s2 < e5.length && !(t5 < e5[s2][0]); ) ;
    return [e5[s2 - 1][0], e5[s2][0]];
  }
  static interpolationRatio(t5, e5, r3, s2) {
    let n4 = 0;
    if ("linear" === t5[0]) n4 = _P._exponentialInterpolationRatio(e5, 1, r3, s2);
    else if ("exponential" === t5[0]) n4 = _P._exponentialInterpolationRatio(e5, t5[1], r3, s2);
    else if ("cubic-bezier" === t5[0]) {
      n4 = e2(t5[1], t5[2], t5[3], t5[4])(_P._exponentialInterpolationRatio(e5, 1, r3, s2), 1e-5);
    }
    return n4 < 0 ? n4 = 0 : n4 > 1 && (n4 = 1), n4;
  }
  static _exponentialInterpolationRatio(t5, e5, r3, s2) {
    const n4 = s2 - r3;
    if (0 === n4) return 0;
    const a5 = t5 - r3;
    return 1 === e5 ? a5 / n4 : (e5 ** a5 - 1) / (e5 ** n4 - 1);
  }
};
var S = class _S {
  constructor(t5, e5, r3) {
    this.type = t5, this._input = e5, this._stops = r3;
  }
  static parse(t5, e5) {
    if (t5.length < 5) throw new Error('"step" expects at least 4 arguments');
    if (t5.length % 2 != 1) throw new Error('"step" expects an even number of arguments');
    const r3 = pt(t5[1], e5, e4);
    let s2;
    const n4 = [];
    n4.push([-1 / 0, pt(t5[2], e5)]);
    for (let a5 = 3; a5 < t5.length; a5 += 2) {
      const r4 = t5[a5];
      if ("number" != typeof r4) throw new Error('"step" requires stop inputs as literal numbers');
      if (n4.length && n4[n4.length - 1][0] >= r4) throw new Error('"step" requires strictly ascending stop inputs');
      const o4 = pt(t5[a5 + 1], e5);
      s2 || (s2 = o4.type), n4.push([r4, o4]);
    }
    return new _S(s2, r3, n4);
  }
  evaluate(t5, e5) {
    const r3 = this._stops;
    if (1 === r3.length) return r3[0][1].evaluate(t5, e5);
    const s2 = this._input.evaluate(t5, e5);
    let n4 = 0;
    for (; ++n4 < r3.length && !(s2 < r3[n4][0]); ) ;
    return this._stops[n4 - 1][1].evaluate(t5, e5);
  }
};
var B = class _B {
  constructor(t5, e5) {
    this.type = t5, this._output = e5;
  }
  static parse(t5, e5, r3) {
    if (t5.length < 4) throw new Error('"let" expects at least 3 arguments');
    if (t5.length % 2 == 1) throw new Error('"let" expects an odd number of arguments');
    const s2 = new _(e5);
    for (let a5 = 1; a5 < t5.length - 1; a5 += 2) {
      const r4 = t5[a5];
      if ("string" != typeof r4) throw new Error(`"let" requires a string to define variable names - found ${r4}`);
      s2.add(r4, pt(t5[a5 + 1], e5));
    }
    const n4 = pt(t5[t5.length - 1], s2, r3);
    return new _B(n4.type, n4);
  }
  evaluate(t5, e5) {
    return this._output.evaluate(t5, e5);
  }
};
var T = class _T {
  constructor(t5, e5) {
    this.type = t5, this.output = e5;
  }
  static parse(t5, e5, r3) {
    if (2 !== t5.length || "string" != typeof t5[1]) throw new Error('"var" requires just one literal string argument');
    const s2 = e5.get(t5[1]);
    if (!s2) throw new Error(`${t5[1]} must be defined before being used in a "var" expression`);
    return new _T(r3 || u, s2);
  }
  evaluate(t5, e5) {
    return this.output.evaluate(t5, e5);
  }
};
var O2 = class _O {
  constructor(t5, e5, r3) {
    this.type = t5, this._index = e5, this._array = r3;
  }
  static parse(t5, e5) {
    if (3 !== t5.length) throw new Error('"at" expects 2 arguments');
    const r3 = pt(t5[1], e5, e4), s2 = pt(t5[2], e5);
    return new _O(s2.type.itemType, r3, s2);
  }
  evaluate(t5, e5) {
    const r3 = this._index.evaluate(t5, e5), s2 = this._array.evaluate(t5, e5);
    if (r3 < 0 || r3 >= s2.length) throw new Error('"at" index out of bounds');
    if (r3 !== Math.floor(r3)) throw new Error('"at" index must be an integer');
    return s2[r3];
  }
};
var F = class _F {
  constructor(t5, e5) {
    this._key = t5, this._obj = e5, this.type = u;
  }
  static parse(t5, e5) {
    let r3, s2;
    switch (t5.length) {
      case 2:
        return r3 = pt(t5[1], e5), new _F(r3);
      case 3:
        return r3 = pt(t5[1], e5), s2 = pt(t5[2], e5), new _F(r3, s2);
      default:
        throw new Error('"get" expects 1 or 2 arguments');
    }
  }
  evaluate(t5, e5) {
    const r3 = this._key.evaluate(t5, e5);
    if (this._obj) {
      return this._obj.evaluate(t5, e5)[r3];
    }
    return t5?.values[r3];
  }
};
var G = class _G {
  constructor(t5, e5) {
    this._key = t5, this._obj = e5, this.type = i5;
  }
  static parse(t5, e5) {
    let r3, s2;
    switch (t5.length) {
      case 2:
        return r3 = pt(t5[1], e5), new _G(r3);
      case 3:
        return r3 = pt(t5[1], e5), s2 = pt(t5[2], e5), new _G(r3, s2);
      default:
        throw new Error('"has" expects 1 or 2 arguments');
    }
  }
  evaluate(t5, e5) {
    const r3 = this._key.evaluate(t5, e5);
    if (this._obj) {
      return r3 in this._obj.evaluate(t5, e5);
    }
    return !!t5?.values[r3];
  }
};
var V = class _V {
  constructor(t5, e5) {
    this._key = t5, this._vals = e5, this.type = i5;
  }
  static parse(t5, e5) {
    if (3 !== t5.length) throw new Error('"in" expects 2 arguments');
    return new _V(pt(t5[1], e5), pt(t5[2], e5));
  }
  evaluate(t5, e5) {
    const r3 = this._key.evaluate(t5, e5);
    return this._vals.evaluate(t5, e5).includes(r3);
  }
};
var D = class _D {
  constructor(t5, e5, r3) {
    this._item = t5, this._array = e5, this._from = r3, this.type = e4;
  }
  static parse(t5, e5) {
    if (t5.length < 3 || t5.length > 4) throw new Error('"index-of" expects 3 or 4 arguments');
    const r3 = pt(t5[1], e5), s2 = pt(t5[2], e5);
    if (4 === t5.length) {
      const n4 = pt(t5[3], e5, e4);
      return new _D(r3, s2, n4);
    }
    return new _D(r3, s2);
  }
  evaluate(t5, e5) {
    const r3 = this._item.evaluate(t5, e5), s2 = this._array.evaluate(t5, e5);
    if (this._from) {
      const n4 = this._from.evaluate(t5, e5);
      if (n4 !== Math.floor(n4)) throw new Error('"index-of" index must be an integer');
      return s2.indexOf(r3, n4);
    }
    return s2.indexOf(r3);
  }
};
var H2 = class _H {
  constructor(t5) {
    this._arg = t5, this.type = e4;
  }
  static parse(t5, e5) {
    if (2 !== t5.length) throw new Error('"length" expects 2 arguments');
    const r3 = pt(t5[1], e5);
    return new _H(r3);
  }
  evaluate(t5, e5) {
    const r3 = this._arg.evaluate(t5, e5);
    if ("string" == typeof r3) return r3.length;
    if (Array.isArray(r3)) return r3.length;
    throw new Error('"length" expects string or array');
  }
};
var J = class _J {
  constructor(t5, e5, r3, s2) {
    this.type = t5, this._array = e5, this._from = r3, this._to = s2;
  }
  static parse(t5, e5) {
    if (t5.length < 3 || t5.length > 4) throw new Error('"slice" expects 2 or 3 arguments');
    const r3 = pt(t5[1], e5), s2 = pt(t5[2], e5, e4);
    if (s2.type !== e4) throw new Error('"slice" index must return a number');
    if (4 === t5.length) {
      const n4 = pt(t5[3], e5, e4);
      if (n4.type !== e4) throw new Error('"slice" index must return a number');
      return new _J(r3.type, r3, s2, n4);
    }
    return new _J(r3.type, r3, s2);
  }
  evaluate(t5, e5) {
    const r3 = this._array.evaluate(t5, e5);
    if (!Array.isArray(r3) && "string" != typeof r3) throw new Error('"slice" input must be an array or a string');
    const s2 = this._from.evaluate(t5, e5);
    if (s2 < 0 || s2 >= r3.length) throw new Error('"slice" index out of bounds');
    if (s2 !== Math.floor(s2)) throw new Error('"slice" index must be an integer');
    if (this._to) {
      const n4 = this._to.evaluate(t5, e5);
      if (n4 < 0 || n4 >= r3.length) throw new Error('"slice" index out of bounds');
      if (n4 !== Math.floor(n4)) throw new Error('"slice" index must be an integer');
      return r3.slice(s2, n4);
    }
    return r3.slice(s2);
  }
};
var K = class _K {
  constructor() {
    this.type = i5;
  }
  static parse(t5) {
    if (1 !== t5.length) throw new Error('"has-id" expects no arguments');
    return new _K();
  }
  evaluate(t5, e5) {
    return void 0 !== t5?.id;
  }
};
var Q = class _Q {
  constructor(t5, e5) {
    this._args = t5, this._calculate = e5, this.type = e4;
  }
  static parse(t5, e5, r3) {
    const s2 = t5.slice(1).map((t6) => pt(t6, e5));
    return new _Q(s2, r3);
  }
  evaluate(t5, e5) {
    let r3;
    return this._args && (r3 = this._args.map((r4) => r4.evaluate(t5, e5))), this._calculate(r3);
  }
};
var W = class extends Q {
  static parse(t5, e5) {
    switch (t5.length) {
      case 2:
        return Q.parse(t5, e5, (t6) => -t6[0]);
      case 3:
        return Q.parse(t5, e5, (t6) => t6[0] - t6[1]);
      default:
        throw new Error('"-" expects 1 or 2 arguments');
    }
  }
};
var X = class extends Q {
  static parse(t5, e5) {
    return Q.parse(t5, e5, (t6) => {
      let e6 = 1;
      for (const r3 of t6) e6 *= r3;
      return e6;
    });
  }
};
var Y = class extends Q {
  static parse(t5, e5) {
    if (3 === t5.length) return Q.parse(t5, e5, (t6) => t6[0] / t6[1]);
    throw new Error('"/" expects 2 arguments');
  }
};
var Z = class extends Q {
  static parse(t5, e5) {
    if (3 === t5.length) return Q.parse(t5, e5, (t6) => t6[0] % t6[1]);
    throw new Error('"%" expects 2 arguments');
  }
};
var tt = class extends Q {
  static parse(t5, e5) {
    if (3 === t5.length) return Q.parse(t5, e5, (t6) => t6[0] ** t6[1]);
    throw new Error('"^" expects 1 or 2 arguments');
  }
};
var et = class extends Q {
  static parse(t5, e5) {
    return Q.parse(t5, e5, (t6) => {
      let e6 = 0;
      for (const r3 of t6) e6 += r3;
      return e6;
    });
  }
};
var _rt = class _rt {
  constructor(t5, e5) {
    this._args = t5, this._calculate = e5, this.type = e4;
  }
  static parse(t5, e5) {
    const r3 = t5.slice(1).map((t6) => pt(t6, e5));
    return new _rt(r3, _rt.ops[t5[0]]);
  }
  evaluate(t5, e5) {
    let r3;
    return this._args && (r3 = this._args.map((r4) => r4.evaluate(t5, e5))), this._calculate(r3);
  }
};
_rt.ops = { abs: (t5) => Math.abs(t5[0]), acos: (t5) => Math.acos(t5[0]), asin: (t5) => Math.asin(t5[0]), atan: (t5) => Math.atan(t5[0]), ceil: (t5) => Math.ceil(t5[0]), cos: (t5) => Math.cos(t5[0]), e: () => Math.E, floor: (t5) => Math.floor(t5[0]), ln: (t5) => Math.log(t5[0]), ln2: () => Math.LN2, log10: (t5) => Math.log(t5[0]) / Math.LN10, log2: (t5) => Math.log(t5[0]) / Math.LN2, max: (t5) => Math.max(...t5), min: (t5) => Math.min(...t5), pi: () => Math.PI, round: (t5) => Math.round(t5[0]), sin: (t5) => Math.sin(t5[0]), sqrt: (t5) => Math.sqrt(t5[0]), tan: (t5) => Math.tan(t5[0]) };
var rt = _rt;
var st = class _st {
  constructor(t5) {
    this._args = t5, this.type = t3;
  }
  static parse(t5, e5) {
    return new _st(t5.slice(1).map((t6) => pt(t6, e5)));
  }
  evaluate(t5, e5) {
    return this._args.map((r3) => r3.evaluate(t5, e5)).join("");
  }
};
var _nt = class _nt {
  constructor(t5, e5) {
    this._arg = t5, this._calculate = e5, this.type = t3;
  }
  static parse(t5, e5) {
    if (2 !== t5.length) throw new Error(`${t5[0]} expects 1 argument`);
    const r3 = pt(t5[1], e5);
    return new _nt(r3, _nt.ops[t5[0]]);
  }
  evaluate(t5, e5) {
    return this._calculate(this._arg.evaluate(t5, e5));
  }
};
_nt.ops = { downcase: (t5) => t5.toLowerCase(), upcase: (t5) => t5.toUpperCase() };
var nt = _nt;
var at = class _at {
  constructor(t5) {
    this._args = t5, this.type = o2;
  }
  static parse(t5, e5) {
    if (4 !== t5.length) throw new Error('"rgb" expects 3 arguments');
    const r3 = t5.slice(1).map((t6) => pt(t6, e5));
    return new _at(r3);
  }
  evaluate(e5, r3) {
    const s2 = this._validate(this._args[0].evaluate(e5, r3)), n4 = this._validate(this._args[1].evaluate(e5, r3)), a5 = this._validate(this._args[2].evaluate(e5, r3));
    return new l({ r: s2, g: n4, b: a5 });
  }
  _validate(t5) {
    if ("number" != typeof t5 || t5 < 0 || t5 > 255) throw new Error(`${t5}: invalid color component`);
    return Math.round(t5);
  }
};
var ot = class _ot {
  constructor(t5) {
    this._args = t5, this.type = o2;
  }
  static parse(t5, e5) {
    if (5 !== t5.length) throw new Error('"rgba" expects 4 arguments');
    const r3 = t5.slice(1).map((t6) => pt(t6, e5));
    return new _ot(r3);
  }
  evaluate(e5, r3) {
    const s2 = this._validate(this._args[0].evaluate(e5, r3)), n4 = this._validate(this._args[1].evaluate(e5, r3)), a5 = this._validate(this._args[2].evaluate(e5, r3)), o4 = this._validateAlpha(this._args[3].evaluate(e5, r3));
    return new l({ r: s2, g: n4, b: a5, a: o4 });
  }
  _validate(t5) {
    if ("number" != typeof t5 || t5 < 0 || t5 > 255) throw new Error(`${t5}: invalid color component`);
    return Math.round(t5);
  }
  _validateAlpha(t5) {
    if ("number" != typeof t5 || t5 < 0 || t5 > 1) throw new Error(`${t5}: invalid alpha color component`);
    return t5;
  }
};
var it = class _it {
  constructor(t5) {
    this._color = t5, this.type = a4(e4, 4);
  }
  static parse(t5, e5) {
    if (2 !== t5.length) throw new Error('"to-rgba" expects 1 argument');
    const r3 = pt(t5[1], e5);
    return new _it(r3);
  }
  evaluate(e5, r3) {
    return new l(this._color.evaluate(e5, r3)).toRgba();
  }
};
var lt = class _lt {
  constructor(t5, e5) {
    this.type = t5, this._args = e5;
  }
  static parse(t5, e5) {
    const r3 = t5[0];
    if (t5.length < 2) throw new Error(`${r3} expects at least one argument`);
    let s2, n4 = 1;
    if ("array" === r3) {
      if (t5.length > 2) {
        switch (t5[1]) {
          case "string":
            s2 = t3;
            break;
          case "number":
            s2 = e4;
            break;
          case "boolean":
            s2 = i5;
            break;
          default:
            throw new Error('"array" type argument must be string, number or boolean');
        }
        n4++;
      } else s2 = u;
      let e6;
      if (t5.length > 3) {
        if (e6 = t5[2], null !== e6 && ("number" != typeof e6 || e6 < 0 || e6 !== Math.floor(e6))) throw new Error('"array" length argument must be a positive integer literal');
        n4++;
      }
      s2 = a4(s2, e6);
    } else switch (r3) {
      case "string":
        s2 = t3;
        break;
      case "number":
        s2 = e4;
        break;
      case "boolean":
        s2 = i5;
        break;
      case "object":
        s2 = f2;
    }
    const a5 = [];
    for (; n4 < t5.length; n4++) {
      const r4 = pt(t5[n4], e5);
      a5.push(r4);
    }
    return new _lt(s2, a5);
  }
  evaluate(t5, e5) {
    let r3;
    for (const s2 of this._args) {
      const n4 = s2.evaluate(t5, e5);
      if (r3 = l4(n4), c3(r3, this.type)) return n4;
    }
    throw new Error(`Expected ${k(this.type)} but got ${k(r3)}`);
  }
};
var _ut = class _ut {
  constructor(t5, e5) {
    this.type = t5, this._args = e5;
  }
  static parse(t5, e5) {
    const r3 = t5[0], s2 = _ut.types[r3];
    if (s2 === i5 || s2 === t3) {
      if (2 !== t5.length) throw new Error(`${r3} expects one argument`);
    } else if (t5.length < 2) throw new Error(`${r3} expects at least one argument`);
    const n4 = [];
    for (let a5 = 1; a5 < t5.length; a5++) {
      const r4 = pt(t5[a5], e5);
      n4.push(r4);
    }
    return new _ut(s2, n4);
  }
  evaluate(e5, r3) {
    if (this.type === i5) return Boolean(this._args[0].evaluate(e5, r3));
    if (this.type === t3) return d2(this._args[0].evaluate(e5, r3));
    if (this.type === e4) {
      for (const t5 of this._args) {
        const s2 = Number(t5.evaluate(e5, r3));
        if (!isNaN(s2)) return s2;
      }
      return null;
    }
    if (this.type === o2) {
      for (const s2 of this._args) try {
        const n4 = _ut.toColor(s2.evaluate(e5, r3));
        if (n4 instanceof l) return n4;
      } catch {
      }
      return null;
    }
  }
  static toBoolean(t5) {
    return Boolean(t5);
  }
  static toString(t5) {
    return d2(t5);
  }
  static toNumber(t5) {
    const e5 = Number(t5);
    if (isNaN(e5)) throw new Error(`"${t5}" is not a number`);
    return e5;
  }
  static toColor(e5) {
    if (e5 instanceof l) return e5;
    if ("string" == typeof e5) {
      const r3 = l.fromString(e5);
      if (r3) return r3;
      throw new Error(`"${e5}" is not a color`);
    }
    if (Array.isArray(e5)) return l.fromArray(e5);
    throw new Error(`"${e5}" is not a color`);
  }
};
_ut.types = { "to-boolean": i5, "to-color": o2, "to-number": e4, "to-string": t3 };
var ut = _ut;
var ct = class _ct {
  constructor(t5) {
    this._val = t5, this.type = l4(t5);
  }
  static parse(t5) {
    if (2 !== t5.length) throw new Error('"literal" expects 1 argument');
    return new _ct(t5[1]);
  }
  evaluate(t5, e5) {
    return this._val;
  }
};
var ht = class _ht {
  constructor(t5) {
    this._arg = t5, this.type = t3;
  }
  static parse(t5, e5) {
    if (2 !== t5.length) throw new Error('"typeof" expects 1 argument');
    return new _ht(pt(t5[1], e5));
  }
  evaluate(t5, e5) {
    return k(l4(this._arg.evaluate(t5, e5)));
  }
};
function pt(t5, e5, r3) {
  const s2 = typeof t5;
  if ("string" === s2 || "boolean" === s2 || "number" === s2 || null === t5) {
    if (r3) switch (r3.kind) {
      case "string":
        "string" !== s2 && (t5 = ut.toString(t5));
        break;
      case "number":
        "number" !== s2 && (t5 = ut.toNumber(t5));
        break;
      case "color":
        t5 = ut.toColor(t5);
    }
    t5 = ["literal", t5];
  }
  if (!Array.isArray(t5) || 0 === t5.length) throw new Error("Expression must be a non empty array");
  const n4 = t5[0];
  if ("string" != typeof n4) throw new Error("First element of expression must be a string");
  const a5 = gt[n4];
  if (void 0 === a5) throw new Error(`Invalid expression operator "${n4}"`);
  if (!a5) throw new Error(`Unimplemented expression operator "${n4}"`);
  return a5.parse(t5, e5, r3);
}
var gt = { array: lt, boolean: lt, collator: null, format: null, image: null, literal: ct, number: lt, "number-format": null, object: lt, string: lt, "to-boolean": ut, "to-color": ut, "to-number": ut, "to-string": ut, typeof: ht, accumulated: null, "feature-state": null, "geometry-type": b2, id: v, "line-progress": null, properties: d3, at: O2, get: F, has: G, in: V, "index-of": D, length: H2, slice: J, "!": N3, "!=": M, "<": k2, "<=": A, "==": $, ">": j, ">=": q, all: C2, any: R3, case: I2, coalesce: L2, match: U2, within: null, interpolate: P2, "interpolate-hcl": P2, "interpolate-lab": P2, step: S, let: B, var: T, concat: st, downcase: nt, "is-supported-script": null, "resolved-locale": null, upcase: nt, rgb: at, rgba: ot, "to-rgba": it, "-": W, "*": X, "/": Y, "%": Z, "^": tt, "+": et, abs: rt, acos: rt, asin: rt, atan: rt, ceil: rt, cos: rt, e: rt, floor: rt, ln: rt, ln2: rt, log10: rt, log2: rt, max: rt, min: rt, pi: rt, round: rt, sin: rt, sqrt: rt, tan: rt, zoom: x, "heatmap-density": null, "has-id": K, none: z };

// node_modules/@arcgis/core/views/2d/engine/vectorTiles/style/Filter.js
var t4 = class _t {
  constructor(e5) {
    this._expression = e5;
  }
  filter(e5, r3) {
    if (!this._expression) return true;
    try {
      return this._expression.evaluate(e5, r3);
    } catch (t5) {
      return console.log(t5.message), true;
    }
  }
  static createFilter(n4) {
    if (!n4) return null;
    this.isLegacyFilter(n4) && (n4 = this.convertLegacyFilter(n4));
    try {
      const s2 = pt(n4, null, i5);
      return new _t(s2);
    } catch (s2) {
      return console.log(s2.message), null;
    }
  }
  static isLegacyFilter(e5) {
    if (!Array.isArray(e5)) return true;
    if (0 === e5.length) return true;
    switch (e5[0]) {
      case "==":
      case "!=":
      case ">":
      case "<":
      case ">=":
      case "<=":
        return 3 === e5.length && "string" == typeof e5[1] && !Array.isArray(e5[2]);
      case "in":
        return e5.length >= 3 && "string" == typeof e5[1] && !Array.isArray(e5[2]);
      case "!in":
      case "none":
      case "!has":
        return true;
      case "any":
      case "all":
        for (let r3 = 1; r3 < e5.length; r3++) if (this.isLegacyFilter(e5[r3])) return true;
        return false;
      case "has":
        return 2 === e5.length && ("$id" === e5[1] || "$type" === e5[1]);
      default:
        return false;
    }
  }
  static convertLegacyFilter(e5) {
    if (!Array.isArray(e5) || 0 === e5.length) return true;
    const r3 = e5[0];
    if (1 === e5.length) return "any" !== r3;
    switch (r3) {
      case "==":
        return _t.convertComparison("==", e5[1], e5[2]);
      case "!=":
        return _t.negate(_t.convertComparison("==", e5[1], e5[2]));
      case ">":
      case "<":
      case ">=":
      case "<=":
        return _t.convertComparison(r3, e5[1], e5[2]);
      case "in":
        return _t.convertIn(e5[1], e5.slice(2));
      case "!in":
        return _t.negate(_t.convertIn(e5[1], e5.slice(2)));
      case "any":
      case "all":
      case "none":
        return _t.convertCombining(r3, e5.slice(1));
      case "has":
        return _t.convertHas(e5[1]);
      case "!has":
        return _t.negate(_t.convertHas(e5[1]));
      default:
        throw new Error("Unexpected legacy filter.");
    }
  }
  static convertComparison(e5, r3, t5) {
    switch (r3) {
      case "$type":
        return [e5, ["geometry-type"], t5];
      case "$id":
        return [e5, ["id"], t5];
      default:
        return [e5, ["get", r3], t5];
    }
  }
  static convertIn(e5, r3) {
    switch (e5) {
      case "$type":
        return ["in", ["geometry-type"], ["literal", r3]];
      case "$id":
        return ["in", ["id"], ["literal", r3]];
      default:
        return ["in", ["get", e5], ["literal", r3]];
    }
  }
  static convertHas(e5) {
    switch (e5) {
      case "$type":
        return true;
      case "$id":
        return ["has-id"];
      default:
        return ["has", e5];
    }
  }
  static convertCombining(e5, r3) {
    return [e5].concat(r3.map(this.convertLegacyFilter));
  }
  static negate(e5) {
    return ["!", e5];
  }
};

// node_modules/@arcgis/core/views/2d/engine/vectorTiles/style/StyleProperty.js
var h = class _h {
  constructor(t5, e5) {
    let r3;
    switch (this.isDataDriven = false, this.interpolator = null, t5.type) {
      case "number":
      case "color":
        r3 = true;
        break;
      case "array":
        r3 = "number" === t5.value;
        break;
      default:
        r3 = false;
    }
    if ((null == e5 || "" === e5 && "color" === t5.type) && (e5 = t5.default), Array.isArray(e5) && e5.length > 0 && gt[e5[0]]) {
      const r4 = { number: e4, color: o2, string: t3, boolean: i5, enum: t3 };
      try {
        const i6 = "array" === t5.type ? a4(r4[t5.value] || u, t5.length) : r4[t5.type], n4 = pt(e5, null, i6);
        this.getValue = this._buildExpression(n4, t5), this.isDataDriven = true, n4 instanceof P2 && n4.input instanceof x && (this.interpolator = n4);
      } catch (h2) {
        console.log(h2.message), this.getValue = this._buildSimple(t5.default);
      }
      return;
    }
    r3 && "interval" === e5.type && (r3 = false);
    const m = e5?.stops && e5.stops.length > 0;
    if (m) for (const i6 of e5.stops) i6[1] = this._validate(i6[1], t5);
    if (this.isDataDriven = !!e5 && !!e5.property, this.isDataDriven) if (void 0 !== e5.default && (e5.default = this._validate(e5.default, t5)), m) switch (e5.type) {
      case "identity":
        this.getValue = this._buildIdentity(e5, t5);
        break;
      case "categorical":
        this.getValue = this._buildCategorical(e5, t5);
        break;
      default:
        this.getValue = r3 ? this._buildInterpolate(e5, t5) : this._buildInterval(e5, t5);
    }
    else this.getValue = this._buildIdentity(e5, t5);
    else m ? this.getValue = r3 ? this._buildZoomInterpolate(e5) : this._buildZoomInterval(e5) : (e5 = this._validate(e5, t5), this.getValue = this._buildSimple(e5));
  }
  _validate(t5, e5) {
    if ("number" === e5.type) {
      if (null != e5.minimum && t5 < e5.minimum) return e5.minimum;
      if (null != e5.maximum && t5 > e5.maximum) return e5.maximum;
    } else "color" === e5.type ? t5 = _h._parseColor(t5) : "enum" === e5.type ? "string" == typeof t5 && (t5 = e5.values.indexOf(t5)) : "array" === e5.type && "enum" === e5.value ? t5 = t5.map((t6) => "string" == typeof t6 ? e5.values.indexOf(t6) : t6) : "string" === e5.type && (t5 = d2(t5));
    return t5;
  }
  _buildSimple(t5) {
    return () => t5;
  }
  _buildExpression(t5, e5) {
    return (r3, i6) => {
      try {
        const l5 = t5.evaluate(i6, r3);
        return void 0 === l5 ? e5.default : this._validate(l5, e5);
      } catch (l5) {
        return console.log(l5.message), e5.default;
      }
    };
  }
  _buildIdentity(t5, e5) {
    return (r3, i6) => {
      let l5;
      return i6 && (l5 = i6.values[t5.property]), void 0 !== l5 && (l5 = this._validate(l5, e5)), null != l5 ? l5 : void 0 !== t5.default ? t5.default : e5.default;
    };
  }
  _buildCategorical(t5, e5) {
    return (r3, i6) => {
      let l5;
      return i6 && (l5 = i6.values[t5.property]), l5 = this._categorical(l5, t5.stops), void 0 !== l5 ? l5 : void 0 !== t5.default ? t5.default : e5.default;
    };
  }
  _buildInterval(t5, e5) {
    return (r3, i6) => {
      let l5;
      return i6 && (l5 = i6.values[t5.property]), "number" == typeof l5 ? this._interval(l5, t5.stops) : void 0 !== t5.default ? t5.default : e5.default;
    };
  }
  _buildInterpolate(t5, e5) {
    return (r3, i6) => {
      let l5;
      return i6 && (l5 = i6.values[t5.property]), "number" == typeof l5 ? this._interpolate(l5, t5.stops, t5.base || 1) : void 0 !== t5.default ? t5.default : e5.default;
    };
  }
  _buildZoomInterpolate(t5) {
    return (e5) => this._interpolate(e5, t5.stops, t5.base || 1);
  }
  _buildZoomInterval(t5) {
    return (e5) => this._interval(e5, t5.stops);
  }
  _categorical(t5, e5) {
    const r3 = e5.length;
    for (let i6 = 0; i6 < r3; i6++) if (e5[i6][0] === t5) return e5[i6][1];
  }
  _interval(t5, e5) {
    const r3 = e5.length;
    let i6 = 0;
    for (let l5 = 0; l5 < r3 && e5[l5][0] <= t5; l5++) i6 = l5;
    return e5[i6][1];
  }
  _interpolate(t5, e5, i6) {
    let l5, s2;
    const a5 = e5.length;
    for (let r3 = 0; r3 < a5; r3++) {
      const i7 = e5[r3];
      if (!(i7[0] <= t5)) {
        s2 = i7;
        break;
      }
      l5 = i7;
    }
    if (l5 && s2) {
      const e6 = s2[0] - l5[0], a6 = t5 - l5[0], o4 = 1 === i6 ? a6 / e6 : (i6 ** a6 - 1) / (i6 ** e6 - 1);
      if (Array.isArray(l5[1])) {
        const t6 = l5[1], e7 = s2[1], i7 = [];
        for (let l6 = 0; l6 < t6.length; l6++) i7.push(p(t6[l6], e7[l6], o4));
        return i7;
      }
      return p(l5[1], s2[1], o4);
    }
    return l5 ? l5[1] : s2 ? s2[1] : void 0;
  }
  static _isEmpty(t5) {
    for (const e5 in t5) if (t5.hasOwnProperty(e5)) return false;
    return true;
  }
  static _parseColor(r3) {
    return Array.isArray(r3) ? r3 : "string" == typeof r3 ? d(r3) ?? void 0 : r3 instanceof l && !this._isEmpty(r3) ? l.toUnitRGBA(r3) : void 0;
  }
};

// node_modules/@arcgis/core/views/2d/engine/vectorTiles/style/StyleLayer.js
var _2;
!function(t5) {
  t5[t5.BUTT = 0] = "BUTT", t5[t5.ROUND = 1] = "ROUND", t5[t5.SQUARE = 2] = "SQUARE", t5[t5.UNKNOWN = 4] = "UNKNOWN";
}(_2 || (_2 = {}));
var L3 = class {
  constructor(t5, i6, e5, a5, o4, r3) {
    this.layer = t5, this.feature = i6, this.bounds = e5, this.normalizationRatio = a5, this.normalizationOffsetX = o4, this.normalizationOffsetY = r3;
  }
};
var T2 = class {
  constructor(t5, i6, e5, a5) {
    switch (this.type = t5, this.typeName = i6.type, this.id = i6.id, this.source = i6.source, this.sourceLayer = i6["source-layer"], this.minzoom = i6.minzoom, this.maxzoom = i6.maxzoom, this.filter = i6.filter, this.layout = i6.layout, this.paint = i6.paint, this.z = e5, this.uid = a5, t5) {
      case i.BACKGROUND:
        this._layoutDefinition = f.backgroundLayoutDefinition, this._paintDefinition = f.backgroundPaintDefinition;
        break;
      case i.FILL:
        this._layoutDefinition = f.fillLayoutDefinition, this._paintDefinition = f.fillPaintDefinition;
        break;
      case i.LINE:
        this._layoutDefinition = f.lineLayoutDefinition, this._paintDefinition = f.linePaintDefinition;
        break;
      case i.SYMBOL:
        this._layoutDefinition = f.symbolLayoutDefinition, this._paintDefinition = f.symbolPaintDefinition;
        break;
      case i.CIRCLE:
        this._layoutDefinition = f.circleLayoutDefinition, this._paintDefinition = f.circlePaintDefinition;
    }
    this._layoutProperties = this._parseLayout(this.layout), this._paintProperties = this._parsePaint(this.paint);
  }
  getFeatureFilter() {
    return void 0 !== this._featureFilter ? this._featureFilter : this._featureFilter = t4.createFilter(this.filter);
  }
  getLayoutProperty(t5) {
    return this._layoutProperties[t5];
  }
  getPaintProperty(t5) {
    return this._paintProperties[t5];
  }
  getLayoutValue(t5, i6, e5) {
    let a5;
    const o4 = this._layoutProperties[t5];
    return o4 && (a5 = o4.getValue(i6, e5)), void 0 === a5 && (a5 = this._layoutDefinition[t5].default), a5;
  }
  getPaintValue(t5, i6, e5) {
    let a5;
    const o4 = this._paintProperties[t5];
    return o4 && (a5 = o4.getValue(i6, e5)), void 0 === a5 && (a5 = this._paintDefinition[t5].default), a5;
  }
  isPainterDataDriven() {
    const t5 = this._paintProperties;
    if (t5) {
      for (const i6 in t5) if (t5[i6].isDataDriven) return true;
    }
    return false;
  }
  isIntersectingFeature(t5, i6, e5, a5, o4, r3, n4) {
    return false;
  }
  getFeatureInflatedBounds(t5, i6, e5, a5) {
    return null;
  }
  _parseLayout(t5) {
    const i6 = {};
    for (const e5 in t5) {
      const a5 = this._layoutDefinition[e5];
      a5 && (i6[e5] = new h(a5, t5[e5]));
    }
    return i6;
  }
  _parsePaint(t5) {
    const i6 = {};
    for (const e5 in t5) {
      const a5 = this._paintDefinition[e5];
      a5 && (i6[e5] = new h(a5, t5[e5]));
    }
    return i6;
  }
  computeAttributesKey(t5, i6, e5, a5) {
    let o4 = 0, r3 = 0;
    for (const n4 of i6) {
      let t6 = 3;
      if (!n4 || n4 !== a5) {
        const i7 = e5[n4], { isLayout: a6, isOptional: o5 } = i7, r4 = a6 ? this.getLayoutProperty(n4) : this.getPaintProperty(n4);
        t6 = r4?.interpolator ? 2 : r4?.isDataDriven ? 1 : o5 && !r4 ? 3 : 0;
      }
      r3 |= t6 << o4, o4 += 2;
    }
    return r3 << 3 | t5;
  }
};
var V2 = class extends T2 {
  constructor(t5, i6, a5, o4) {
    super(t5, i6, a5, o4), this.backgroundMaterial = new s(this.computeAttributesKey(L.BACKGROUND, s.ATTRIBUTES, s.ATTRIBUTES_INFO));
  }
};
var v2 = class extends T2 {
  constructor(t5, i6, a5, o4) {
    super(t5, i6, a5, o4);
    const r3 = this.getPaintProperty("fill-color"), n4 = this.getPaintProperty("fill-opacity"), s2 = this.getPaintProperty("fill-pattern");
    this.hasDataDrivenColor = r3?.isDataDriven, this.hasDataDrivenOpacity = n4?.isDataDriven, this.hasDataDrivenFill = this.hasDataDrivenColor || this.hasDataDrivenOpacity || s2?.isDataDriven;
    const l5 = this.getPaintProperty("fill-outline-color");
    this.outlineUsesFillColor = !l5, this.hasDataDrivenOutlineColor = l5?.isDataDriven, this.hasDataDrivenOutline = l5 ? l5.isDataDriven : !!r3 && r3.isDataDriven, this.hasDataDrivenOutline = (l5 ? this.hasDataDrivenOutlineColor : this.hasDataDrivenColor) || this.hasDataDrivenOpacity, this.fillMaterial = new e3(this.computeAttributesKey(L.FILL, e3.ATTRIBUTES, e3.ATTRIBUTES_INFO)), this.outlineMaterial = new l3(this.computeAttributesKey(L.OUTLINE, this.outlineUsesFillColor ? l3.ATTRIBUTES_FILL : l3.ATTRIBUTES_OUTLINE, this.outlineUsesFillColor ? l3.ATTRIBUTES_INFO_FILL : l3.ATTRIBUTES_INFO_OUTLINE), this.outlineUsesFillColor);
  }
  getFeatureInflatedBounds(t5, i6, e5, a5) {
    const o4 = R4(t5);
    if (!o4) return null;
    const r3 = this.getPaintValue("fill-translate", i6, t5), n4 = a5 * Math.max(r3[0], r3[1]);
    return o4[0] -= n4, o4[2] -= n4, o4[1] += n4, o4[3] += n4, o4;
  }
  isIntersectingFeature(t5, e5, o4, s2, l5, h2, u2) {
    const p2 = s2.getGeometry();
    if (!p2) return false;
    const g = c / u2.normalizationRatio;
    t5 = t5 / u2.normalizationRatio + u2.normalizationOffsetX, e5 = e5 / u2.normalizationRatio + u2.normalizationOffsetY;
    const c4 = b(this.getPaintValue("fill-translate", l5, s2), this.getPaintValue("fill-translate-anchor", l5, s2), h2, c);
    t5 -= g * c4.x, e5 -= g * c4.y;
    return !!I(t5, e5, p2) || N(t5, e5, p2, g * o4);
  }
};
var x2 = class extends T2 {
  constructor(t5, i6, a5, o4) {
    super(t5, i6, a5, o4);
    const r3 = this.getPaintProperty("line-pattern");
    if (this.lineMaterial = new n2(this.computeAttributesKey(L.LINE, n2.ATTRIBUTES, n2.ATTRIBUTES_INFO, r3 ? "line-dasharray" : "")), this.hasDataDrivenLine = this.getPaintProperty("line-blur")?.isDataDriven || this.getPaintProperty("line-color")?.isDataDriven || this.getPaintProperty("line-gap-width")?.isDataDriven || this.getPaintProperty("line-offset")?.isDataDriven || this.getPaintProperty("line-opacity")?.isDataDriven || this.getPaintProperty("line-pattern")?.isDataDriven || this.getPaintProperty("line-dasharray")?.isDataDriven || this.getLayoutProperty("line-cap")?.isDataDriven || this.getPaintProperty("line-width")?.isDataDriven, this.canUseThinTessellation = false, !this.hasDataDrivenLine) {
      const t6 = this.getPaintProperty("line-width");
      if (!t6 || "number" == typeof t6 && 0.5 * t6 < R) {
        const t7 = this.getPaintProperty("line-offset");
        (!t7 || "number" == typeof t7 && 0 === t7) && (this.canUseThinTessellation = true);
      }
    }
  }
  getDashKey(t5, i6) {
    let e5;
    switch (i6) {
      case _2.BUTT:
        e5 = "Butt";
        break;
      case _2.ROUND:
        e5 = "Round";
        break;
      case _2.SQUARE:
        e5 = "Square";
        break;
      default:
        e5 = "Butt";
    }
    return `dasharray-[${t5.toString()}]-${e5}`;
  }
  getFeatureInflatedBounds(t5, i6, e5, a5) {
    const o4 = R4(t5);
    if (!o4) return null;
    const r3 = this.getPaintValue("line-translate", i6, t5), n4 = a5 * Math.max(r3[0], r3[1]);
    o4[0] -= n4, o4[2] -= n4, o4[1] += n4, o4[3] += n4;
    const s2 = a5 * Math.abs(this.getPaintValue("line-offset", i6, t5) || 0), l5 = a5 * (this.getPaintValue("line-width", i6, t5) / 2);
    return o4[0] -= s2 + l5, o4[1] -= s2 + l5, o4[2] += s2 + l5, o4[3] += s2 + l5, o4;
  }
  isIntersectingFeature(t5, e5, n4, s2, l5, h2, u2) {
    let p2 = s2.getGeometry();
    if (!p2) return false;
    const g = c / u2.normalizationRatio;
    t5 = t5 / u2.normalizationRatio + u2.normalizationOffsetX, e5 = e5 / u2.normalizationRatio + u2.normalizationOffsetY;
    const c4 = b(this.getPaintValue("line-translate", l5, s2), this.getPaintValue("line-translate-anchor", l5, s2), h2, c);
    t5 -= g * c4.x, e5 -= g * c4.y;
    const y2 = g * this.getPaintValue("line-offset", l5, s2) || 0;
    0 !== y2 && (p2 = P(p2, -y2));
    const P3 = this.getPaintValue("line-width", l5, s2);
    return N(t5, e5, p2, g * (n4 + P3 / 2));
  }
};
var I3 = class extends T2 {
  constructor(t5, i6, a5, o4) {
    super(t5, i6, a5, o4), this.iconMaterial = new n3(this.computeAttributesKey(L.ICON, n3.ATTRIBUTES, n3.ATTRIBUTES_INFO)), this.textMaterial = new c2(this.computeAttributesKey(L.TEXT, c2.ATTRIBUTES, c2.ATTRIBUTES_INFO)), this.hasDataDrivenIcon = this.getPaintProperty("icon-color")?.isDataDriven || this.getPaintProperty("icon-halo-blur")?.isDataDriven || this.getPaintProperty("icon-halo-color")?.isDataDriven || this.getPaintProperty("icon-halo-width")?.isDataDriven || this.getPaintProperty("icon-opacity")?.isDataDriven || this.getLayoutProperty("icon-size")?.isDataDriven, this.hasDataDrivenText = this.getPaintProperty("text-color")?.isDataDriven || this.getPaintProperty("text-halo-blur")?.isDataDriven || this.getPaintProperty("text-halo-color")?.isDataDriven || this.getPaintProperty("text-halo-width")?.isDataDriven || this.getPaintProperty("text-opacity")?.isDataDriven || this.getLayoutProperty("text-size")?.isDataDriven;
  }
};
var A2 = class extends T2 {
  constructor(t5, i6, a5, o4) {
    super(t5, i6, a5, o4), this.circleMaterial = new o(this.computeAttributesKey(L.CIRCLE, o.ATTRIBUTES, o.ATTRIBUTES_INFO));
  }
  getFeatureInflatedBounds(t5, e5, a5, o4) {
    const r3 = R4(t5);
    if (!r3) return null;
    const n4 = this.getPaintValue("circle-translate", e5, t5), s2 = Math.max(n4[0], n4[1]);
    r3[0] -= s2, r3[2] -= s2, r3[1] += s2, r3[3] += s2;
    const l5 = o4 * (c * (this.getPaintValue("circle-radius", e5, t5) + this.getPaintValue("circle-stroke-width", e5, t5)) / 2);
    return r3[0] -= l5, r3[1] -= l5, r3[2] += l5, r3[3] += l5, r3;
  }
  isIntersectingFeature(t5, e5, o4, r3, n4, s2, l5) {
    const h2 = r3.getGeometry();
    if (!h2) return false;
    const u2 = c / l5.normalizationRatio;
    t5 = t5 / l5.normalizationRatio + l5.normalizationOffsetX, e5 = e5 / l5.normalizationRatio + l5.normalizationOffsetY, o4 *= u2;
    const p2 = b(this.getPaintValue("circle-translate", n4, r3), this.getPaintValue("circle-translate-anchor", n4, r3), s2, u2), g = u2 * (this.getPaintValue("circle-radius", n4, r3) + this.getPaintValue("circle-stroke-width", n4, r3));
    let c4, y2;
    for (const i6 of h2) if (i6) for (const a5 of i6) {
      c4 = a5.x + p2.x, y2 = a5.y + p2.y;
      if (Math.sqrt((t5 - c4) * (t5 - c4) + (e5 - y2) * (e5 - y2)) - o4 <= g) return true;
    }
    return false;
  }
};
var U3 = class {
  constructor(t5, i6, e5) {
    let a5;
    this.allowOverlap = t5.getLayoutValue("icon-allow-overlap", i6), this.ignorePlacement = t5.getLayoutValue("icon-ignore-placement", i6), this.keepUpright = t5.getLayoutValue("icon-keep-upright", i6), this.optional = t5.getLayoutValue("icon-optional", i6), this.rotationAlignment = t5.getLayoutValue("icon-rotation-alignment", i6), this.rotationAlignment === l2.AUTO && (this.rotationAlignment = e5 ? l2.MAP : l2.VIEWPORT), a5 = t5.getLayoutProperty("icon-anchor"), a5?.isDataDriven ? this._anchorProp = a5 : this.anchor = t5.getLayoutValue("icon-anchor", i6), a5 = t5.getLayoutProperty("icon-offset"), a5?.isDataDriven ? this._offsetProp = a5 : this.offset = t5.getLayoutValue("icon-offset", i6), a5 = t5.getLayoutProperty("icon-padding"), a5?.isDataDriven ? this._paddingProp = a5 : this.padding = t5.getLayoutValue("icon-padding", i6), a5 = t5.getLayoutProperty("icon-rotate"), a5?.isDataDriven ? this._rotateProp = a5 : this.rotate = t5.getLayoutValue("icon-rotate", i6), a5 = t5.getLayoutProperty("icon-size"), a5?.isDataDriven ? this._sizeProp = a5 : this.size = t5.getLayoutValue("icon-size", i6);
  }
  update(t5, i6) {
    this._anchorProp && (this.anchor = this._anchorProp.getValue(t5, i6)), this._offsetProp && (this.offset = this._offsetProp.getValue(t5, i6)), this._paddingProp && (this.padding = this._paddingProp.getValue(t5, i6)), this._rotateProp && (this.rotate = this._rotateProp.getValue(t5, i6)), this._sizeProp && (this.size = this._sizeProp.getValue(t5, i6));
  }
};
var O3 = class {
  constructor(t5, i6, e5) {
    let a5;
    this.allowOverlap = t5.getLayoutValue("text-allow-overlap", i6), this.ignorePlacement = t5.getLayoutValue("text-ignore-placement", i6), this.keepUpright = t5.getLayoutValue("text-keep-upright", i6), this.optional = t5.getLayoutValue("text-optional", i6), this.rotationAlignment = t5.getLayoutValue("text-rotation-alignment", i6), this.rotationAlignment === l2.AUTO && (this.rotationAlignment = e5 ? l2.MAP : l2.VIEWPORT), a5 = t5.getLayoutProperty("text-anchor"), a5?.isDataDriven ? this._anchorProp = a5 : this.anchor = t5.getLayoutValue("text-anchor", i6), a5 = t5.getLayoutProperty("text-justify"), a5?.isDataDriven ? this._justifyProp = a5 : this.justify = t5.getLayoutValue("text-justify", i6), a5 = t5.getLayoutProperty("text-letter-spacing"), a5?.isDataDriven ? this._letterSpacingProp = a5 : this.letterSpacing = t5.getLayoutValue("text-letter-spacing", i6), a5 = t5.getLayoutProperty("text-line-height"), a5?.isDataDriven ? this._lineHeightProp = a5 : this.lineHeight = t5.getLayoutValue("text-line-height", i6), a5 = t5.getLayoutProperty("text-max-angle"), a5?.isDataDriven ? this._maxAngleProp = a5 : this.maxAngle = t5.getLayoutValue("text-max-angle", i6), a5 = t5.getLayoutProperty("text-max-width"), a5?.isDataDriven ? this._maxWidthProp = a5 : this.maxWidth = t5.getLayoutValue("text-max-width", i6), a5 = t5.getLayoutProperty("text-offset"), a5?.isDataDriven ? this._offsetProp = a5 : this.offset = t5.getLayoutValue("text-offset", i6), a5 = t5.getLayoutProperty("text-padding"), a5?.isDataDriven ? this._paddingProp = a5 : this.padding = t5.getLayoutValue("text-padding", i6), a5 = t5.getLayoutProperty("text-rotate"), a5?.isDataDriven ? this._rotateProp = a5 : this.rotate = t5.getLayoutValue("text-rotate", i6), a5 = t5.getLayoutProperty("text-size"), a5?.isDataDriven ? this._sizeProp = a5 : this.size = t5.getLayoutValue("text-size", i6), a5 = t5.getLayoutProperty("text-writing-mode"), a5?.isDataDriven ? this._writingModeProp = a5 : this.writingMode = t5.getLayoutValue("text-writing-mode", i6);
  }
  update(t5, i6) {
    this._anchorProp && (this.anchor = this._anchorProp.getValue(t5, i6)), this._justifyProp && (this.justify = this._justifyProp.getValue(t5, i6)), this._letterSpacingProp && (this.letterSpacing = this._letterSpacingProp.getValue(t5, i6)), this._lineHeightProp && (this.lineHeight = this._lineHeightProp.getValue(t5, i6)), this._maxAngleProp && (this.maxAngle = this._maxAngleProp.getValue(t5, i6)), this._maxWidthProp && (this.maxWidth = this._maxWidthProp.getValue(t5, i6)), this._offsetProp && (this.offset = this._offsetProp.getValue(t5, i6)), this._paddingProp && (this.padding = this._paddingProp.getValue(t5, i6)), this._rotateProp && (this.rotate = this._rotateProp.getValue(t5, i6)), this._sizeProp && (this.size = this._sizeProp.getValue(t5, i6)), this._writingModeProp && (this.writingMode = this._writingModeProp.getValue(t5, i6));
  }
};
function R4(i6) {
  const e5 = i6?.getGeometry();
  if (null == e5) return null;
  let a5 = 1 / 0, o4 = 1 / 0, r3 = -1 / 0, n4 = -1 / 0;
  for (const t5 of e5) if (t5) for (const i7 of t5) a5 = Math.min(a5, i7.x), o4 = Math.min(o4, i7.y), r3 = Math.max(r3, i7.x), n4 = Math.max(n4, i7.y);
  return e(a5, o4, r3, n4);
}

// node_modules/@arcgis/core/views/2d/engine/vectorTiles/style/StyleRepository.js
var o3 = class _o2 {
  constructor(r3, a5 = true) {
    if (this.backgroundBucketIds = [], this._uidToLayer = /* @__PURE__ */ new Map(), this._layerByName = {}, this._runningId = 0, this._style = a5 ? a(r3) : r3, this._style.layers || (this._style.layers = []), this.version = parseFloat(this._style.version), this.layers = this._style.layers.map((e5, t5, r4) => this._create(e5, t5, r4)).filter((e5) => !!e5), this.layers) for (let e5 = 0; e5 < this.layers.length; e5++) {
      const r4 = this.layers[e5];
      this._layerByName[r4.id] = r4, this._uidToLayer.set(r4.uid, r4), r4.type === i.BACKGROUND && this.backgroundBucketIds.push(r4.id);
    }
    this._identifyRefLayers();
  }
  getLayerStyleProperties(e5, t5) {
    const i6 = this.getStyleLayerByUID(e5), s2 = i6?.getLayoutValue("symbol-placement", t5) !== n.POINT;
    let l5 = i6?.getLayoutValue("icon-rotation-alignment", t5);
    l5 === l2.AUTO && (l5 = s2 ? l2.MAP : l2.VIEWPORT);
    let n4 = i6?.getLayoutValue("text-rotation-alignment", t5);
    n4 === l2.AUTO && (n4 = s2 ? l2.MAP : l2.VIEWPORT);
    const y2 = i6?.getPaintValue("icon-translate", t5), o4 = i6?.getPaintValue("icon-translate-anchor", t5), u2 = i6?.getPaintValue("text-translate", t5), c4 = i6?.getPaintValue("text-translate-anchor", t5);
    return { geometryType: null, iconAllowOverlap: i6?.getLayoutValue("icon-allow-overlap", t5), iconIgnorePlacement: i6?.getLayoutValue("icon-ignore-placement", t5), textAllowOverlap: i6?.getLayoutValue("text-allow-overlap", t5), textIgnorePlacement: i6?.getLayoutValue("text-ignore-placement", t5), iconRotationAlignment: l5, textRotationAlignment: n4, iconTranslateAnchor: o4, iconTranslate: y2, textTranslateAnchor: c4, textTranslate: u2 };
  }
  isPainterDataDriven(e5) {
    const t5 = this._layerByName[e5];
    return !!t5 && t5.isPainterDataDriven();
  }
  getStyleLayerId(e5) {
    return e5 >= this.layers.length ? null : this.layers[e5].id;
  }
  getStyleLayerByUID(e5) {
    return this._uidToLayer.get(e5) ?? null;
  }
  getStyleLayerIndex(e5) {
    const t5 = this._layerByName[e5];
    return t5 ? this.layers.indexOf(t5) : -1;
  }
  setStyleLayer(e5, t5) {
    if (!e5?.id) return;
    const r3 = this._style;
    null != t5 && t5 >= this.layers.length && (t5 = this.layers.length - 1);
    let a5, i6 = true;
    const s2 = this._layerByName[e5.id];
    if (s2) {
      const l5 = this.layers.indexOf(s2);
      t5 || (t5 = l5), t5 === l5 ? (i6 = false, a5 = _o2._recreateLayer(e5, s2), this.layers[t5] = a5, r3.layers[t5] = e5) : (this.layers.splice(l5, 1), r3.layers.splice(l5, 1), a5 = this._create(e5, t5, this.layers), this.layers.splice(t5, 0, a5), r3.layers.splice(t5, 0, e5));
    } else a5 = this._create(e5, t5, this.layers), !t5 || t5 >= this.layers.length ? (this.layers.push(a5), r3.layers.push(e5)) : (this.layers.splice(t5, 0, a5), r3.layers.splice(t5, 0, e5));
    this._layerByName[e5.id] = a5, this._uidToLayer.set(a5.uid, a5), i6 && this._recomputeZValues(), this._identifyRefLayers();
  }
  getStyleLayer(e5) {
    const t5 = this._layerByName[e5];
    return t5 ? { type: t5.typeName, id: t5.id, source: t5.source, "source-layer": t5.sourceLayer, minzoom: t5.minzoom, maxzoom: t5.maxzoom, filter: t5.filter, layout: t5.layout, paint: t5.paint } : null;
  }
  deleteStyleLayer(e5) {
    const t5 = this._layerByName[e5];
    if (t5) {
      delete this._layerByName[e5], this._uidToLayer.delete(t5.uid);
      const r3 = this.layers.indexOf(t5);
      this.layers.splice(r3, 1), this._style.layers.splice(r3, 1), this._recomputeZValues(), this._identifyRefLayers();
    }
  }
  getLayerById(e5) {
    return this._layerByName[e5];
  }
  getLayoutProperties(e5) {
    const t5 = this._layerByName[e5];
    return t5 ? t5.layout : null;
  }
  getPaintProperties(e5) {
    const t5 = this._layerByName[e5];
    return t5 ? t5.paint : null;
  }
  setPaintProperties(e5, t5) {
    const r3 = this._layerByName[e5];
    if (!r3) return;
    const a5 = { type: r3.typeName, id: r3.id, source: r3.source, "source-layer": r3.sourceLayer, minzoom: r3.minzoom, maxzoom: r3.maxzoom, filter: r3.filter, layout: r3.layout, paint: t5 }, i6 = _o2._recreateLayer(a5, r3), s2 = this.layers.indexOf(r3);
    this.layers[s2] = i6, this._style.layers[s2].paint = t5, this._layerByName[r3.id] = i6, this._uidToLayer.set(r3.uid, i6);
  }
  setLayoutProperties(e5, t5) {
    const r3 = this._layerByName[e5];
    if (!r3) return;
    const a5 = { type: r3.typeName, id: r3.id, source: r3.source, "source-layer": r3.sourceLayer, minzoom: r3.minzoom, maxzoom: r3.maxzoom, filter: r3.filter, layout: t5, paint: r3.paint }, i6 = _o2._recreateLayer(a5, r3), s2 = this.layers.indexOf(r3);
    this.layers[s2] = i6, this._style.layers[s2].layout = t5, this._layerByName[r3.id] = i6, this._uidToLayer.set(r3.uid, i6);
  }
  setStyleLayerVisibility(e5, t5) {
    const r3 = this._layerByName[e5];
    if (!r3) return;
    const a5 = r3.layout || {};
    a5.visibility = t5;
    const i6 = { type: r3.typeName, id: r3.id, source: r3.source, "source-layer": r3.sourceLayer, minzoom: r3.minzoom, maxzoom: r3.maxzoom, filter: r3.filter, layout: a5, paint: r3.paint }, s2 = _o2._recreateLayer(i6, r3), l5 = this.layers.indexOf(r3);
    this.layers[l5] = s2, this._style.layers[l5].layout = a5, this._layerByName[r3.id] = s2, this._uidToLayer.set(r3.uid, s2);
  }
  getStyleLayerVisibility(e5) {
    const t5 = this._layerByName[e5];
    if (!t5) return "none";
    const r3 = t5.layout;
    return r3?.visibility ?? "visible";
  }
  _recomputeZValues() {
    const e5 = this.layers, t5 = 1 / (e5.length + 1);
    for (let r3 = 0; r3 < e5.length; r3++) e5[r3].z = 1 - (1 + r3) * t5;
  }
  _identifyRefLayers() {
    const e5 = [], r3 = [];
    let a5 = 0;
    for (const i6 of this.layers) {
      const s2 = i6.layout;
      if (i6.type === i.FILL) {
        const t5 = i6;
        let r4 = i6.source + "|" + i6.sourceLayer;
        r4 += "|" + (s2?.visibility ?? ""), r4 += "|" + i6.minzoom, r4 += "|" + i6.maxzoom, r4 += "|" + JSON.stringify(i6.filter), (t5.hasDataDrivenFill || t5.hasDataDrivenOutline) && (r4 += "|" + a5), e5.push({ key: r4, layer: i6 });
      } else if (i6.type === i.LINE) {
        const e6 = i6, t5 = i6.paint, l5 = null != t5 && (null != t5["line-pattern"] || null != t5["line-dasharray"]);
        let n4 = i6.source + "|" + i6.sourceLayer;
        n4 += "|" + (s2?.visibility ?? ""), n4 += "|" + i6.minzoom, n4 += "|" + i6.maxzoom, n4 += "|" + JSON.stringify(i6.filter), n4 += "|" + (void 0 !== s2 ? s2["line-cap"] : ""), n4 += "|" + (void 0 !== s2 ? s2["line-join"] : ""), (e6.hasDataDrivenLine || l5) && (n4 += "|" + a5), r3.push({ key: n4, layer: i6 });
      }
      ++a5;
    }
    this._assignRefLayers(e5), this._assignRefLayers(r3);
  }
  _assignRefLayers(e5) {
    let r3, a5;
    e5.sort((e6, t5) => e6.key < t5.key ? -1 : e6.key > t5.key ? 1 : 0);
    const i6 = e5.length;
    for (let s2 = 0; s2 < i6; s2++) {
      const l5 = e5[s2];
      if (l5.key === r3) l5.layer.refLayerId = a5;
      else if (r3 = l5.key, a5 = l5.layer.id, l5.layer.type === i.FILL) {
        if (!l5.layer.getPaintProperty("fill-outline-color")) for (let t5 = s2 + 1; t5 < i6; t5++) {
          const i7 = e5[t5];
          if (i7.key !== r3) break;
          if (i7.layer.getPaintProperty("fill-outline-color")) {
            e5[s2] = i7, e5[t5] = l5, a5 = i7.layer.id;
            break;
          }
        }
      } else if (l5.layer.type === i.LINE) {
        let t5 = l5.layer;
        for (let n4 = s2 + 1; n4 < i6; n4++) {
          const i7 = e5[n4];
          if (i7.key !== r3) break;
          const y2 = i7.layer;
          (t5.canUseThinTessellation && !y2.canUseThinTessellation || !t5.canUseThinTessellation && (y2.getPaintProperty("line-pattern") || y2.getPaintProperty("line-dasharray"))) && (t5 = y2, e5[s2] = i7, e5[n4] = l5, a5 = i7.layer.id);
        }
      }
    }
  }
  _create(e5, r3, a5) {
    const o4 = 1 - (1 + r3) * (1 / (a5.length + 1)), u2 = this._runningId++;
    switch (e5.type) {
      case "background":
        return new V2(i.BACKGROUND, e5, o4, u2);
      case "fill":
        return new v2(i.FILL, e5, o4, u2);
      case "line":
        return new x2(i.LINE, e5, o4, u2);
      case "symbol":
        return new I3(i.SYMBOL, e5, o4, u2);
      case "raster":
        return console.warn(`Unsupported vector tile raster layer ${e5.id}`), null;
      case "circle":
        return new A2(i.CIRCLE, e5, o4, u2);
    }
    return null;
  }
  static _recreateLayer(e5, r3) {
    switch (e5.type) {
      case "background":
        return new V2(i.BACKGROUND, e5, r3.z, r3.uid);
      case "fill":
        return new v2(i.FILL, e5, r3.z, r3.uid);
      case "line":
        return new x2(i.LINE, e5, r3.z, r3.uid);
      case "symbol":
        return new I3(i.SYMBOL, e5, r3.z, r3.uid);
      case "raster":
        return console.warn(`Unsupported vector tile raster layer ${e5.id}`), null;
      case "circle":
        return new A2(i.CIRCLE, e5, r3.z, r3.uid);
    }
    return null;
  }
};

export {
  t2 as t,
  L3 as L,
  U3 as U,
  O3 as O,
  o3 as o
};
//# sourceMappingURL=chunk-NCPKBH2V.js.map
