import {
  t
} from "./chunk-4XEYVSQH.js";
import {
  l,
  r as r2
} from "./chunk-VNTS5E5O.js";
import {
  o,
  r as r3
} from "./chunk-TNW4TPNP.js";
import {
  r
} from "./chunk-FPSA4NFH.js";

// node_modules/@arcgis/core/views/3d/webgl-engine/lib/TextHelperCanvas.js
function a(a3, n2, c2) {
  return a3.canvas || (a3.canvas = document.createElement("canvas")), a3.canvas.width = n2, a3.canvas.height = c2, a3.canvas;
}

// node_modules/@arcgis/core/views/3d/webgl-engine/lib/FontMetrics.js
function e(e2) {
  const { size: c2 } = e2.definition, a3 = e2.fontString(c2);
  let i2 = n.get(a3);
  if (!i2) {
    const u2 = a(o2, 0, 0).getContext("2d");
    e2.setFontProperties(u2, c2);
    const x = u2.measureText(r4);
    i2 = new s(x.actualBoundingBoxAscent, x.actualBoundingBoxDescent), n.set(a3, i2);
  }
  return i2;
}
var n = /* @__PURE__ */ new Map();
var s = class {
  get maxHeight() {
    return this.maxAscent + this.maxDescent;
  }
  constructor(t2, e2) {
    this.maxAscent = t2, this.maxDescent = e2;
  }
};
var o2 = { canvas: null };
var r4 = (() => {
  let t2 = "";
  for (let e2 = 32; e2 < 127; e2++) t2 += String.fromCharCode(e2);
  return t2;
})();

// node_modules/@arcgis/core/views/3d/webgl-engine/lib/TextRenderer.js
var s2 = 1;
var r5 = class {
  constructor(t2, e2, i2, n2) {
    this.text = t2, this._alignment = e2, this._parameters = i2, this._maxSize = n2, this._textWidths = [], this._lineWidths = [], this._renderPixelRatio = null, this._metricsCached = null, this.key = `${t2}--${this._parameters.key}-${this._alignment}`, this._lines = t2.replaceAll(" ", "Â ").split(/\r?\n/);
  }
  get displayWidth() {
    return Math.ceil(this._displayWidth + 2 * this._horizontalPadding);
  }
  get displayHeight() {
    let t2 = this._metrics.firstLineAscent;
    for (let e2 = 0; e2 < this._lines.length - 1; e2++) t2 += this._lineSpacing;
    return t2 += this._metrics.lastLineDescent, Math.ceil(t2 + 2 * this._haloSize + 2 * this._verticalPadding);
  }
  get renderedWidth() {
    return this._toRoundedRenderUnit(this.displayWidth);
  }
  get renderedHeight() {
    return this._toRoundedRenderUnit(this.displayHeight);
  }
  get firstRenderedBaselinePosition() {
    return this._toRenderUnit(this._firstLineYOffset + this._metrics.firstLineAscent);
  }
  get _firstLineYOffset() {
    return this._verticalPadding + this._haloSize;
  }
  get _metrics() {
    if (null == this._metricsCached) {
      const t2 = a(a2, l2, l2).getContext("2d"), e2 = this._parameters.definition.pixelRatio, s4 = this._fontSize * e2;
      this._parameters.setFontProperties(t2, s4);
      let r6 = 2 * this._haloSize;
      const h3 = this._parameters.definition.font;
      "italic" !== h3.style && "oblique" !== h3.style && "bold" !== h3.weight && "bolder" !== h3.weight || (r6 += 0.3 * t2.measureText("A").width), this._textWidths.length = 0, this._lineWidths.length = 0;
      let o4 = 0, d2 = 0, _2 = 0, g = 0, m2 = 0;
      this._lines.forEach((i2, n2) => {
        const s5 = t2.measureText(i2), h4 = s5.width / e2, a3 = h4 + r6;
        this._textWidths.push(h4), this._lineWidths.push(a3), o4 = Math.max(o4, a3), g = Math.max(g, s5.actualBoundingBoxAscent / e2), m2 = Math.max(m2, s5.actualBoundingBoxDescent / e2), 0 === n2 && (d2 = s5.actualBoundingBoxAscent / e2), n2 === this._lines.length - 1 && (_2 = s5.actualBoundingBoxDescent / e2);
      });
      const f2 = e(this._parameters), u2 = Math.max(g, f2.maxAscent), p = Math.max(m2, f2.maxDescent), x = d2, R = "underline" === this._parameters.definition.font.decoration ? p : _2, S = o4;
      this._metricsCached = new c(x, R, u2, p, S);
    }
    return this._metricsCached;
  }
  get _lineSpacing() {
    return (this._midLineHeight + this._linePadding) * this._parameters.definition.lineSpacingFactor;
  }
  get _midLineHeight() {
    return this._metrics.midLineHeight;
  }
  get _linePadding() {
    return this._midLineHeight * d;
  }
  get _midLineAscent() {
    return this._metrics.maxLineAscent;
  }
  get _renderedFontSize() {
    return this._toRenderUnit(this._fontSize);
  }
  get _fontSize() {
    return this._parameters.definition.size;
  }
  get _renderedHaloSize() {
    return this._toRenderUnit(this._haloSize);
  }
  get _haloSize() {
    return this._parameters.haloSize;
  }
  get _horizontalPadding() {
    return this._hasBackground ? this._parameters.definition.background.padding[0] : 0;
  }
  get _verticalPadding() {
    return Math.max(this._hasBackground ? this._parameters.definition.background.padding[1] : 0, s2);
  }
  get _hasBackground() {
    return !!this._parameters.backgroundStyle;
  }
  get renderPixelRatio() {
    if (null == this._renderPixelRatio) {
      const t2 = this._parameters.definition.pixelRatio;
      this._renderPixelRatio = Math.min(t2, Math.min(this._maxSize[0] / this.displayWidth, this._maxSize[1] / this.displayHeight));
    }
    return this._renderPixelRatio;
  }
  _getLineXOffset(t2) {
    switch (this._alignment) {
      case o3.Left:
        return this._horizontalPadding;
      case o3.Center:
        return (this.displayWidth - this._lineWidths[t2]) / 2;
      case o3.Right:
        return this.displayWidth - this._horizontalPadding - this._lineWidths[t2];
    }
  }
  render(t2, i2, n2) {
    t2.save();
    const s4 = i2 /= this.renderPixelRatio, r6 = n2 /= this.renderPixelRatio, h3 = this._haloSize, o4 = this._firstLineYOffset + this._metrics.firstLineAscent;
    i2 += h3, n2 += o4;
    const a3 = this._haloSize > 0;
    a3 && this._renderHalo(t2, s4, r6, h3, o4), this._parameters.setFontProperties(t2, this._renderedFontSize);
    for (let e2 = 0; e2 < this._lines.length; ++e2) {
      const s5 = this._lines[e2], r7 = this._getLineXOffset(e2);
      a3 && (t2.globalCompositeOperation = "destination-out", t2.fillStyle = "rgb(0, 0, 0)", this._fillText(t2, s5, i2 + r7, n2), this._renderLineDecoration(t2, i2 + r7, n2, this._textWidths[e2])), t2.globalCompositeOperation = "source-over", t2.fillStyle = this._parameters.textStyle, this._fillText(t2, s5, i2 + this._getLineXOffset(e2), n2), this._renderLineDecoration(t2, i2 + r7, n2, this._textWidths[e2]), n2 += this._lineSpacing;
    }
    if (t.TEXT_SHOW_BASELINE) {
      t2.strokeStyle = _, t2.setLineDash([2, 2]), t2.lineWidth = 1;
      let e2 = r6 + o4;
      for (let i3 = 0; i3 < this._lines.length; ++i3) this._drawLine(t2, [s4, e2], [s4 + this.displayWidth, e2]), e2 += this._lineSpacing;
    }
    if (t.TEXT_SHOW_BORDER && (t2.strokeStyle = _, t2.setLineDash([]), t2.lineWidth = 1, this._drawBox(t2, [s4, r6], [this.displayWidth, this.displayHeight])), this._hasBackground) {
      const e2 = this._parameters.definition.background.borderRadius * this.renderPixelRatio;
      this._roundedRect(t2, s4, r6, e2), t2.globalCompositeOperation = "destination-over", t2.fillStyle = this._parameters.backgroundStyle, t2.fill();
    }
    t2.restore();
  }
  _renderLineDecoration(t2, e2, i2, n2, s4 = false) {
    if ("none" === this._parameters.definition.font.decoration || 0 === n2) return;
    const r6 = 1, h3 = Math.max(this._parameters.definition.size / 16, r6);
    switch (this._parameters.definition.font.decoration) {
      case "underline":
        i2 += 2 * h3;
        break;
      case "line-through":
        i2 -= 0.33 * this._midLineAscent;
    }
    const o4 = s4 ? this._haloSize : 0;
    t2.strokeStyle = s4 ? this._parameters.haloStyle : this._parameters.textStyle, t2.lineWidth = this._toRenderUnit(h3 + 2 * o4), t2.beginPath(), t2.moveTo(this._toRenderUnit(e2 - o4), this._toRenderUnit(i2)), t2.lineTo(this._toRenderUnit(e2 + n2 + o4), this._toRenderUnit(i2)), t2.stroke();
  }
  _roundedRect(e2, i2, n2, s4) {
    i2 = this._toRenderUnit(i2), n2 = this._toRenderUnit(n2);
    const r6 = this.renderedWidth, h3 = this.renderedHeight;
    0 !== s4 ? (s4 = r(s4, 0, Math.floor(h3 / 2)), e2.beginPath(), e2.moveTo(i2, n2 + s4), e2.arcTo(i2, n2, i2 + s4, n2, s4), e2.lineTo(i2 + r6 - s4, n2), e2.arcTo(i2 + r6, n2, i2 + r6, n2 + s4, s4), e2.lineTo(i2 + r6, n2 + h3 - s4), e2.arcTo(i2 + r6, n2 + h3, i2 + r6 - s4, n2 + h3, s4), e2.lineTo(i2 + s4, n2 + h3), e2.arcTo(i2, n2 + h3, i2, n2 + h3 - s4, s4), e2.closePath()) : e2.rect(i2, n2, r6, h3);
  }
  _renderHalo(t2, e2, i2, s4, r6) {
    const h3 = this.renderedWidth, o4 = this.renderedHeight, d2 = a(a2, Math.max(h3, l2), Math.max(o4, l2)), _2 = d2.getContext("2d");
    _2.clearRect(0, 0, h3, o4), this._parameters.setFontProperties(_2, this._renderedFontSize), _2.fillStyle = this._parameters.haloStyle, _2.strokeStyle = this._parameters.haloStyle;
    const c2 = this._renderedHaloSize < 3;
    _2.lineJoin = c2 ? "miter" : "round", c2 ? this._renderHaloEmulated(_2, s4, r6) : this._renderHaloNative(_2, s4, r6);
    let g = r6;
    for (let n2 = 0; n2 < this._lines.length; ++n2) {
      const t3 = this._getLineXOffset(n2);
      this._renderLineDecoration(_2, s4 + t3, g, this._textWidths[n2], true), g += this._lineSpacing;
    }
    t2.globalAlpha = this._parameters.definition.halo.color[3], t2.drawImage(d2, 0, 0, h3, o4, this._toRenderUnit(e2), this._toRenderUnit(i2), h3, o4), t2.globalAlpha = 1;
  }
  _renderHaloEmulated(t2, e2, i2) {
    for (let n2 = 0; n2 < this._lines.length; ++n2) {
      const s4 = this._lines[n2], r6 = this._getLineXOffset(n2);
      for (const [n3, o4] of h) this._fillText(t2, s4, e2 + r6 + this._haloSize * n3, i2 + this._haloSize * o4);
      i2 += this._lineSpacing;
    }
  }
  _renderHaloNative(t2, e2, i2) {
    const n2 = 2 * this._haloSize;
    for (let s4 = 0; s4 < this._lines.length; ++s4) {
      const r6 = this._lines[s4], h3 = this._getLineXOffset(s4), o4 = 5, a3 = 0.1;
      for (let s5 = 0; s5 < o4; s5++) {
        const d2 = 1 - (o4 - 1) * a3 + s5 * a3;
        t2.lineWidth = this._toRenderUnit(d2 * n2), this._strokeText(t2, r6, e2 + h3, i2);
      }
      i2 += this._lineSpacing;
    }
  }
  get _displayWidth() {
    return this._metrics.displayWidth;
  }
  _toRenderUnit(t2) {
    return t2 * this.renderPixelRatio;
  }
  _toRoundedRenderUnit(t2) {
    return Math.round(t2 * this.renderPixelRatio);
  }
  _fillText(t2, e2, i2, n2) {
    t2.fillText(e2, this._toRenderUnit(i2), this._toRenderUnit(n2));
  }
  _strokeText(t2, e2, i2, n2) {
    t2.strokeText(e2, this._toRenderUnit(i2), this._toRenderUnit(n2));
  }
  _drawLine(t2, e2, i2) {
    t2.beginPath(), t2.moveTo(this._toRoundedRenderUnit(e2[0]) + 0.5, this._toRoundedRenderUnit(e2[1]) + 0.5), t2.lineTo(this._toRoundedRenderUnit(i2[0]) + 0.5, this._toRoundedRenderUnit(i2[1]) + 0.5), t2.stroke();
  }
  _drawBox(t2, e2, i2) {
    const n2 = this._toRenderUnit(e2[0]), s4 = this._toRenderUnit(e2[1]), r6 = this._toRenderUnit(i2[0]), h3 = this._toRenderUnit(i2[1]), o4 = Math.floor(n2) + 0.5, a3 = Math.ceil(n2 + r6) - 0.5, d2 = Math.floor(s4) + 0.5, l3 = Math.ceil(s4 + h3) - 0.5;
    t2.beginPath(), t2.moveTo(o4, d2), t2.lineTo(a3, d2), t2.lineTo(a3, l3), t2.lineTo(o4, l3), t2.lineTo(o4, d2), t2.stroke();
  }
};
var h = [];
{
  const t2 = 16;
  for (let e2 = 0; e2 < 360; e2 += 360 / t2) h.push([Math.cos(Math.PI * e2 / 180), Math.sin(Math.PI * e2 / 180)]);
}
var o3;
!function(t2) {
  t2[t2.Left = 0] = "Left", t2[t2.Center = 1] = "Center", t2[t2.Right = 2] = "Right";
}(o3 || (o3 = {}));
var a2 = { canvas: null };
var d = 0.2;
var l2 = 512;
var _ = "rgb(255, 0, 255, 0.5)";
var c = class {
  get firstLineHeight() {
    return this.firstLineAscent + this.maxLineDescent;
  }
  get midLineHeight() {
    return this.maxLineAscent + this.maxLineDescent;
  }
  get lastLineHeight() {
    return this.maxLineAscent + this.lastLineDescent;
  }
  constructor(t2, e2, i2, n2, s4) {
    this.firstLineAscent = t2, this.lastLineDescent = e2, this.maxLineAscent = i2, this.maxLineDescent = n2, this.displayWidth = s4;
  }
};

// node_modules/@arcgis/core/views/3d/layers/graphics/placementUtils.js
var i = Object.freeze({ left: 0, center: 0.5, right: 1 });
var s3 = Object.freeze({ "bottom-left": r2(0, 0), bottom: r2(0.5, 0), "bottom-right": r2(1, 0), left: r2(0, 0.5), center: r2(0.5, 0.5), right: r2(1, 0.5), "top-left": r2(0, 1), top: r2(0.5, 1), "top-right": r2(1, 1) });
function f(t2) {
  switch (t2) {
    case "left":
      return o3.Left;
    case "right":
      return o3.Right;
    default:
      return o3.Center;
  }
}
function m(t2, e2) {
  switch (e2) {
    case "bottom":
      return "left" === t2 ? "bottom-left" : "right" === t2 ? "bottom-right" : "bottom";
    case "center":
      return t2;
    case "top":
      return "left" === t2 ? "top-left" : "right" === t2 ? "top-right" : "top";
  }
}
function u(t2) {
  return "middle" === t2 ? "center" : t2;
}
function h2(r6, c2) {
  switch (r6) {
    case "top":
      return o(c2, 0, s2);
    case "bottom":
      return o(c2, 0, -1);
    default:
      return r3(c2, l);
  }
}

export {
  a,
  e,
  r5 as r,
  i,
  s3 as s,
  f,
  m,
  u,
  h2 as h
};
//# sourceMappingURL=chunk-NFOAHFB6.js.map
