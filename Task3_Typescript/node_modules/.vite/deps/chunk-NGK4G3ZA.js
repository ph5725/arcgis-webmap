import {
  s as s5
} from "./chunk-BUMCVHOE.js";
import {
  n as n2,
  s as s3,
  s2 as s4
} from "./chunk-YSZ4SRX4.js";
import {
  o
} from "./chunk-7UTSKTVG.js";
import {
  l
} from "./chunk-R2HTWJLS.js";
import {
  o as o2
} from "./chunk-4TMSLZIY.js";
import {
  s as s2
} from "./chunk-R2Q57RB2.js";
import {
  s
} from "./chunk-PEF2Q5HH.js";
import {
  i
} from "./chunk-A4KKV2O6.js";
import {
  n
} from "./chunk-6EOJZ6DP.js";

// node_modules/@arcgis/core/chunks/HighlightApply.glsl.js
function c() {
  const c2 = new i();
  c2.include(s5);
  const { fragment: a2 } = c2;
  return a2.uniforms.add(new s2("blurInput", (e) => e.highlightBlurTexture), new o2("blurSize", (e) => e.blurSize), new s3("highlightTexture", (e) => e.highlightTexture), new s2("highlightOptionsTexture", (e) => e.highlightOptionsTexture), new o("highlightLevel", (e) => e.highlightLevel), new s("occludedIntensityFactor", (e) => e.occludedFactor)), a2.constants.add("inner", "float", 1 - (n2 - s4) / n2), c2.include(l), a2.main.add(n`vec2 highlightTextureSize = vec2(textureSize(highlightTexture,0));
vec2 uv = sUV;
vec2 center = texture(blurInput, uv).rg;
vec2 blurredHighlightValue = (vOutlinePossible == 0.0)
? center
: center * 0.204164
+ texture(blurInput, uv + blurSize * 1.407333).rg * 0.304005
+ texture(blurInput, uv - blurSize * 1.407333).rg * 0.304005
+ texture(blurInput, uv + blurSize * 3.294215).rg * 0.093913
+ texture(blurInput, uv - blurSize * 3.294215).rg * 0.093913;
float highlightIntensity = blurredHighlightValue.r;
float occlusionWeight = blurredHighlightValue.g;
if (highlightIntensity <= 0.01) {
discard;
}
vec4 fillColor    = texelFetch(highlightOptionsTexture, ivec2(highlightLevel, 0), 0);
vec4 outlineColor = texelFetch(highlightOptionsTexture, ivec2(highlightLevel, 1), 0);
uvec2 centerTexel = texelFetch(highlightTexture, ivec2(uv * highlightTextureSize), 0).rg;
uint centerBits = readLevelBits(centerTexel, highlightLevel);
bool centerFilled = (centerBits & 1u) == 1u;
bool centerOccluded = (centerBits & 3u) == 3u;
bool occluded = centerOccluded || (0.5 * highlightIntensity < occlusionWeight);
float occlusionFactor = occluded ? occludedIntensityFactor : 1.0;
float outlineFactor = centerFilled ? 1.0 : smoothstep(0.0, inner, highlightIntensity);
float fillFactor = centerFilled ? 1.0 : 0.0;
vec4 baseColor = mix(outlineColor, fillColor, fillFactor);
float intensity = baseColor.a * occlusionFactor * outlineFactor;
fragColor = vec4(baseColor.rgb, intensity);`), c2;
}
var a = Object.freeze(Object.defineProperty({ __proto__: null, build: c }, Symbol.toStringTag, { value: "Module" }));

export {
  c,
  a
};
//# sourceMappingURL=chunk-NGK4G3ZA.js.map
