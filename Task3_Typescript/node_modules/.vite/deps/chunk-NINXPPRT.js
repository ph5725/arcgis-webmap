import {
  j
} from "./chunk-XMAXGUBN.js";
import {
  _e,
  ae,
  te
} from "./chunk-Q7K6M7G6.js";
import {
  t
} from "./chunk-7T3OPELU.js";
import {
  a as a2,
  r as r2
} from "./chunk-AQGMTI4V.js";
import {
  a as a3,
  f,
  s as s2
} from "./chunk-SYPTUUSZ.js";
import {
  e,
  o
} from "./chunk-6QA2BVC5.js";
import {
  C
} from "./chunk-6PV45IYU.js";
import {
  l
} from "./chunk-E3KEUGUG.js";
import {
  m
} from "./chunk-N3XLUQJI.js";
import {
  a2 as a
} from "./chunk-JUAD7TJ6.js";
import {
  r
} from "./chunk-5TPMG26T.js";
import {
  H
} from "./chunk-ZWFY3WY5.js";
import {
  u
} from "./chunk-S7IJH524.js";
import {
  i2 as i,
  s
} from "./chunk-XWG6QGFK.js";

// node_modules/@arcgis/core/arcade/arcadeEnvironment.js
function t2(t3) {
  if ("string" == typeof t3) return t3.toLowerCase();
  if ("name" in t3) return t3.name.toLowerCase();
  if ("string" != typeof t3.value) throw new a2(null, r2.InvalidIdentifier, null);
  return t3.value.toLowerCase();
}
var n = Object.freeze({ aborted: false });

// node_modules/@arcgis/core/rest/support/TranslateResult.js
var s3 = class extends l {
  constructor(e3) {
    super(e3), this.text = null, this.detectedLanguage = "en", this.detectedLanguageScore = -1;
  }
};
r([m({ type: String, json: { write: true } })], s3.prototype, "key", void 0), r([m({ type: String, json: { write: true } })], s3.prototype, "text", void 0), r([m({ type: String, json: { read: { source: "detectedLanguage.language" }, write: { target: "detectedLanguage.language" } } })], s3.prototype, "detectedLanguage", void 0), r([m({ type: Number, json: { read: { source: "detectedLanguage.score" }, write: { target: "detectedLanguage.score" } } })], s3.prototype, "detectedLanguageScore", void 0), r([m({ type: Object, json: { write: true } })], s3.prototype, "translation", void 0), s3 = r([a("esri.rest.support.TranslateResult")], s3);

// node_modules/@arcgis/core/rest/translate.js
async function n2(n3, e3, p) {
  const i3 = e3.toJSON();
  i3.contents = JSON.stringify(i3.contents), i3.token = await a3(e3.portalUrl, e3.apiKey, { signal: p?.signal, prompt: "no-prompt" !== p?.authMode });
  const m2 = f(n3), u2 = s2(m2.query, { ...p, query: i3, method: "post", authMode: "anonymous" });
  return (await H(m2.path, u2)).data.results.map((t3) => s3.fromJSON(t3));
}

// node_modules/@arcgis/core/rest/support/TranslateContent.js
var e2 = class extends l {
  constructor(r3) {
    super(r3);
  }
};
r([m({ type: String, json: { write: true } })], e2.prototype, "key", void 0), r([m({ type: String, json: { write: true } })], e2.prototype, "text", void 0), e2 = r([a("esri.rest.support.TranslateContent")], e2);

// node_modules/@arcgis/core/rest/support/TranslateParameters.js
var i2 = class extends l {
  constructor(t3) {
    super(t3), this.to = null, this.contents = null, this.portalUrl = "https://www.arcgis.com", this.translator = "esri", this.from = null, this.apiKey = null, this.requestSource = null;
  }
};
r([m({ type: [String], json: { write: true } })], i2.prototype, "to", void 0), r([m({ type: [e2], json: { write: true } })], i2.prototype, "contents", void 0), r([m({ type: String, json: { write: true } })], i2.prototype, "portalUrl", void 0), r([m({ type: String, json: { write: true, default: "esri" } })], i2.prototype, "translator", void 0), r([m({ type: String, json: { write: true } })], i2.prototype, "from", void 0), r([m(t)], i2.prototype, "apiKey", void 0), r([m({ type: String, json: { name: "x-esri-request-source" } })], i2.prototype, "requestSource", void 0), i2 = r([a("esri.rest.support.TranslateParameters")], i2);

// node_modules/@arcgis/core/chunks/aiServices.js
var g = class {
  constructor(t3, e3) {
    this.portal = t3, this._debugLog = e3;
  }
  async translate(t3) {
    this.portal.loaded || await this.portal.load();
    const e3 = this.portal.helperServices?.aiUtilityServices;
    if (null == e3) return { success: false };
    const s4 = e3.url + e3.translateUtility;
    try {
      t3.requestSource ??= "arcade";
      return { success: true, results: (await n2(s4, t3, { authMode: "no-prompt" })).map((t4) => t4.toJSON()) };
    } catch (r3) {
      return null != this._debugLog && (r3 instanceof Error || r3 instanceof s) && this._debugLog(`TranslateText error: ${r3.message}`), i.getLogger("esri.arcade.functions.aiServices").error(r3), { success: false };
    }
  }
};
var y = class {
  constructor(t3, e3, s4) {
    this._parameters = t3, this._maxTotalContentSize = e3, this._maxContentsLength = s4, this._requests = [], this._normalizedContents = /* @__PURE__ */ new Map(), this._contentsTotalSize = 0;
  }
  tryAdd(t3) {
    const e3 = new Set(t3.filter((t4) => !this._normalizedContents.has(t4.text)).map((t4) => t4.text));
    if (this._requests.length + e3.size > this._maxContentsLength) return null;
    let s4 = 0;
    for (const n3 of e3) s4 += n3.length;
    if ((s4 + this._contentsTotalSize) * (this._parameters.to.length ?? 1) > this._maxTotalContentSize) return null;
    const r3 = this._requests.length;
    for (const { key: n3, text: o2 } of t3) u(this._normalizedContents, o2, () => []).push({ batchIdx: r3, key: n3 });
    return this._requests.push(t3), this._contentsTotalSize += s4, r3;
  }
  async send(t3) {
    const e3 = [], s4 = [];
    let r3 = 0;
    for (const [i3, c] of this._normalizedContents) e3.push(new e2({ key: String(r3++), text: i3 })), s4.push(c);
    const n3 = new i2(this._parameters);
    n3.contents = e3;
    const o2 = await t3.translate(n3);
    if (!o2.success) return Array.from(this._requests, () => o2);
    const a4 = Array.from(this._requests, () => ({ success: true, results: [] }));
    for (const i3 of o2.results) {
      const t4 = Number(i3.key);
      for (const e4 of s4[t4]) a4[e4.batchIdx].results.push({ ...i3, key: e4.key });
    }
    return a4;
  }
};
function w(t3) {
  const e3 = [...new Set(t3.to)].sort(), s4 = t3.from ?? null, r3 = t3.portalUrl, n3 = t3.translator, o2 = t3.apiKey ?? null;
  return JSON.stringify([e3, s4, r3, n3, o2]);
}
async function x(t3, e3, s4) {
  try {
    return (await t3.yieldFor(s4))[e3];
  } catch {
    return { success: false };
  }
}
var S = class {
  constructor(t3, e3, { maxTotalContentSize: s4 = 5e4, maxContentsLength: r3 = 1e3 } = {}) {
    this._executor = t3, this._service = e3, this._openBatches = /* @__PURE__ */ new Map(), this._maxTotalContentSize = s4, this._maxContentsLength = r3;
  }
  create(t3) {
    return { translate: async (e3) => {
      const s4 = w(e3), { contents: r3, to: n3, from: o2, translator: a4, portalUrl: i3, apiKey: c } = e3;
      if (null == n3) return { success: false };
      if (null == r3 || r3.every((t4) => 0 === t4.text.length)) return { success: false };
      const l2 = this._openBatches.get(s4);
      if (null != l2) {
        const e4 = l2.data.tryAdd(r3);
        if (null != e4) return await x(t3, e4, l2);
        l2.send();
      }
      const u2 = new y({ to: n3, from: o2, translator: a4, portalUrl: i3, apiKey: c }, this._maxTotalContentSize, this._maxContentsLength), h = u2.tryAdd(r3);
      if (null != h) {
        const e4 = this._executor.openBatch(u2, { open: (t4) => {
          this._openBatches.set(s4, t4);
        }, execute: (t4) => t4.send(this._service), close: (t4) => {
          this._openBatches.get(s4) === t4 && this._openBatches.delete(s4);
        } });
        return await x(t3, h, e4);
      }
      return await this._service.translate(e3);
    } };
  }
};
function T(i3) {
  "async" === i3.mode && (i3.functions[t2("TranslateText")] = function(t3, c) {
    return i3.standardFunctionAsync(t3, c, async (t4, i4, c2) => {
      if (ae(c2, 2, 3, t4, i4), !e(c2[0]) && !o(c2[0]) && !te(c2[0])) throw new a2(t4, r2.InvalidParameter, i4);
      const l2 = _e(c2[0]);
      if (!e(c2[1]) && !o(c2[1]) && !te(c2[1])) throw new a2(t4, r2.InvalidParameter, i4);
      const h = _e(c2[1]);
      let y2 = null;
      if (c2.length >= 3) {
        if (!e(c2[2])) throw new a2(t4, r2.InvalidParameter, i4);
        y2 = c2[2];
      }
      const x2 = l2.map((t5, e3) => new e2({ key: String(e3), text: t5 })), S2 = t4.services?.portal ?? C.getDefault(), T2 = new i2({ to: h, contents: x2, from: y2, portalUrl: S2.restUrl.replace(/\/sharing\/rest$/, "") }), v2 = /* @__PURE__ */ new Map();
      let C2 = null;
      if (null != t4.lrucache) {
        const e3 = t4.lrucache;
        C2 ??= w(T2), T2.contents = T2.contents?.filter((t5) => {
          const s4 = e3.getCachedTranslation(C2, t5.text);
          return null == s4 || (v2.set(t5.key, { ...s4, key: t5.key, text: t5.text }), false);
        });
      }
      if (T2.contents?.length) {
        const n3 = t4.services?.translation ?? new g(S2, t4.console), o2 = await n3.translate(T2);
        if (!o2.success) return new j({ __proto__: null, success: false });
        for (const e3 of o2.results) {
          const n4 = T2.contents?.find((t5) => t5.key === e3.key)?.text;
          if (null == n4) throw new a2(null, r2.NeverReach, null);
          v2.set(e3.key, e3), null != t4.lrucache && (C2 ??= w(T2), t4.lrucache.setCachedTranslation(C2, n4, { detectedLanguage: e3.detectedLanguage, translation: e3.translation }));
        }
      }
      const j2 = Array.from(x2, (n3) => {
        const o2 = s3.fromJSON(v2.get(n3.key));
        if (null == o2) throw new a2(null, r2.NeverReach, null);
        return o2.text = n3.text, j.convertJsonToArcade(o2.toJSON(), t4.timeZone ?? "system", true);
      });
      return new j({ __proto__: null, success: true, results: j2 });
    });
  });
}
var v = Object.freeze(Object.defineProperty({ __proto__: null, BatchTranslationServiceFactory: S, PortalTranslationService: g, getTranslateParametersKey: w, registerFunctions: T }, Symbol.toStringTag, { value: "Module" }));

export {
  t2 as t,
  n,
  g,
  w,
  S,
  T,
  v
};
//# sourceMappingURL=chunk-NINXPPRT.js.map
