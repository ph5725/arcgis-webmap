import {
  e
} from "./chunk-F5C72MOD.js";
import {
  a,
  c,
  i,
  s as s2
} from "./chunk-YHYQP7QX.js";
import {
  o as o2
} from "./chunk-YIV2QKTZ.js";
import {
  s
} from "./chunk-FPSA4NFH.js";
import {
  o4 as o,
  t
} from "./chunk-GZ2P4SCJ.js";
import {
  has
} from "./chunk-FXKORAMT.js";

// node_modules/@arcgis/core/views/2d/support/Timeline.js
var s3 = (s4) => s4.includes("Brush");
var e2 = class {
  constructor() {
    this._names = /* @__PURE__ */ new Map();
  }
  begin(e3) {
    this._names.has(e3) || (this._names.set(e3, false), s3(e3) && this.record("Esri.FirstDraw"), performance.mark(`Esri.${e3}.Start`));
  }
  end(s4) {
    this._names.has(s4) && !this._names.get(s4) && (this._names.set(s4, true), performance.mark(`Esri.${s4}.End`));
  }
  record(s4) {
    this._names.has(s4) || (this._names.set(s4, true), performance.mark(`Esri.${s4}`));
  }
};

// node_modules/@arcgis/core/views/2d/engine/ManagedCanvas.js
var c2 = class {
  constructor(s4, r = {}) {
    this.events = new o2(), this._hasMajorPerformanceCaveat = false, this._lastRenderFrameCounter = 0, null != s4 ? (this._canvas = document.createElement("canvas"), this._canvas.setAttribute("style", "width: 100%; height:100%; display:block; willChange:transform"), s4.contains(this._canvas) || s4.appendChild(this._canvas)) : null != r.canvas && (this._canvas = r.canvas);
    const n = { failIfMajorPerformanceCaveat: true, alpha: true, antialias: false, depth: true, stencil: true, powerPreference: "high-performance" };
    let i2 = this._canvas.getContext("webgl2", n);
    i2 || (i2 = this._canvas.getContext("webgl2", { ...n, failIfMajorPerformanceCaveat: false }), this._hasMajorPerformanceCaveat = true), this._gl = i2, this._handles = t([o(this._canvas, "webglcontextlost", (e3) => this.events.emit("webgl-context-lost", e3))]);
  }
  destroy() {
    this._canvas.remove(), this._canvas = null, this._handles.remove(), this._gl = null;
  }
  get gl() {
    return this._gl;
  }
  get canvas() {
    return this._canvas;
  }
  render(e3, t2) {
    if (this._hasMajorPerformanceCaveat || has("esri-force-performance-mode")) {
      if (++this._lastRenderFrameCounter >= has("esri-performance-mode-frames-between-render") && (t2(), this._lastRenderViewState = e3.state.clone(), this._lastRenderFrameCounter = 0), this._lastRenderViewState) {
        const [t3, a2, s4, r, n, i2] = this._computeViewTransform(this._lastRenderViewState, e3.state);
        this._canvas.style.transform = `matrix(${t3}, ${a2}, ${s4}, ${r}, ${n}, ${i2})`;
      }
    } else t2();
  }
  resize(e3) {
    const t2 = this._canvas, a2 = t2.style, { state: { size: s4 }, pixelRatio: r } = e3, n = s4[0], i2 = s4[1], o3 = Math.round(n * r), h = Math.round(i2 * r);
    t2.width === o3 && t2.height === h || (t2.width = o3, t2.height = h), a2.width = n + "px", a2.height = i2 + "px";
  }
  _computeViewTransform(e3, t2) {
    const [a2, c3] = e3.center, [l, m] = t2.center, [f, _] = e3.toScreen([0, 0], l, m), [d, v] = e3.toScreen([0, 0], a2, c3), p = d - f, g = v - _, u = e3.scale / t2.scale, w = t2.rotation - e3.rotation, j = e();
    return a(j), c(j, j, [u, u]), s2(j, j, s(w)), i(j, j, [p, g]), j;
  }
};

export {
  e2 as e,
  c2 as c
};
//# sourceMappingURL=chunk-NSTC2VR7.js.map
