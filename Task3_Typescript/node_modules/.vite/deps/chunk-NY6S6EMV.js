import {
  o
} from "./chunk-AQGMTI4V.js";
import {
  o as o2
} from "./chunk-QG7JWSBW.js";
import {
  DateTime,
  FixedOffsetZone,
  IANAZone,
  Zone
} from "./chunk-UY6B6IVT.js";
import {
  z
} from "./chunk-O5TPFXRT.js";
import {
  i
} from "./chunk-Y2ZIOB7Y.js";
import {
  r
} from "./chunk-XWG6QGFK.js";

// node_modules/@arcgis/core/arcade/ArcadeDate.js
var a;
!function(e) {
  e.TimeZoneNotRecognized = "TimeZoneNotRecognized";
}(a || (a = {}));
var d = { [a.TimeZoneNotRecognized]: "Timezone identifier has not been recognized." };
var u = class _u extends Error {
  constructor(e, n4) {
    super(r(d[e], n4)), this.declaredRootClass = "esri.arcade.arcadedate.dateerror", Error.captureStackTrace && Error.captureStackTrace(this, _u);
  }
};
function c(e, t, n4) {
  return e < t ? e - t : e > n4 ? e - n4 : 0;
}
function m(e, t, n4) {
  return e < t ? t : e > n4 ? n4 : e;
}
var h = class _h {
  constructor(e) {
    this._date = e, this.declaredRootClass = "esri.arcade.arcadedate";
  }
  static fromParts(e = 0, t = 1, n4 = 1, s = 0, i5 = 0, o5 = 0, a2 = 0, d2) {
    if (isNaN(e) || isNaN(t) || isNaN(n4) || isNaN(s) || isNaN(i5) || isNaN(o5) || isNaN(a2)) return null;
    const u2 = DateTime.local(e, t).daysInMonth;
    let f = DateTime.fromObject({ day: m(n4, 1, u2), year: e, month: m(t, 1, 12), hour: m(s, 0, 23), minute: m(i5, 0, 59), second: m(o5, 0, 59), millisecond: m(a2, 0, 999) }, { zone: l(d2) });
    return f = f.plus({ months: c(t, 1, 12), days: c(n4, 1, u2), hours: c(s, 0, 23), minutes: c(i5, 0, 59), seconds: c(o5, 0, 59), milliseconds: c(a2, 0, 999) }), new _h(f);
  }
  static get systemTimeZoneCanonicalName() {
    return Intl.DateTimeFormat().resolvedOptions().timeZone ?? "system";
  }
  static arcadeDateAndZoneToArcadeDate(e, t) {
    const r3 = l(t);
    return e.isUnknownTimeZone || r3 === o2.instance ? _h.fromParts(e.year, e.monthJS + 1, e.day, e.hour, e.minute, e.second, e.millisecond, r3) : new _h(e._date.setZone(r3));
  }
  static dateJSToArcadeDate(e) {
    return new _h(DateTime.fromJSDate(e, { zone: "system" }));
  }
  static dateJSAndZoneToArcadeDate(e, t = "system") {
    const n4 = l(t);
    return new _h(DateTime.fromJSDate(e, { zone: n4 }));
  }
  static unknownEpochToArcadeDate(e) {
    return new _h(DateTime.fromMillis(e, { zone: o2.instance }));
  }
  static unknownDateJSToArcadeDate(e) {
    return new _h(DateTime.fromMillis(e.getTime(), { zone: o2.instance }));
  }
  static epochToArcadeDate(e, t = "system") {
    const n4 = l(t);
    return new _h(DateTime.fromMillis(e, { zone: n4 }));
  }
  static dateTimeToArcadeDate(e) {
    return new _h(e);
  }
  clone() {
    return new _h(this._date);
  }
  changeTimeZone(e) {
    const t = l(e);
    return _h.dateTimeToArcadeDate(this._date.setZone(t));
  }
  static dateTimeAndZoneToArcadeDate(e, t) {
    const r3 = l(t);
    return e.zone === o2.instance || r3 === o2.instance ? _h.fromParts(e.year, e.month, e.day, e.hour, e.minute, e.second, e.millisecond, r3) : new _h(e.setZone(r3));
  }
  static nowToArcadeDate(e) {
    const t = l(e);
    return new _h(DateTime.fromJSDate(/* @__PURE__ */ new Date(), { zone: t }));
  }
  static nowUTCToArcadeDate() {
    return new _h(DateTime.utc());
  }
  get isSystem() {
    return "system" === this.timeZone || this.timeZone === _h.systemTimeZoneCanonicalName;
  }
  equals(e) {
    return this.isSystem && e.isSystem ? this.toNumber() === e.toNumber() : this.isUnknownTimeZone === e.isUnknownTimeZone && this._date.equals(e._date);
  }
  get isUnknownTimeZone() {
    return this._date.zone === o2.instance;
  }
  get isValid() {
    return this._date.isValid;
  }
  get hour() {
    return this._date.hour;
  }
  get second() {
    return this._date.second;
  }
  get day() {
    return this._date.day;
  }
  get dayOfWeekISO() {
    return this._date.weekday;
  }
  get dayOfWeekJS() {
    let e = this._date.weekday;
    return e > 6 && (e = 0), e;
  }
  get millisecond() {
    return this._date.millisecond;
  }
  get monthISO() {
    return this._date.month;
  }
  get weekISO() {
    return this._date.weekNumber;
  }
  get yearISO() {
    return this._date.weekYear;
  }
  get monthJS() {
    return this._date.month - 1;
  }
  get year() {
    return this._date.year;
  }
  get minute() {
    return this._date.minute;
  }
  get zone() {
    return this._date.zone;
  }
  get timeZoneOffset() {
    return this.isUnknownTimeZone ? 0 : this._date.offset;
  }
  get timeZone() {
    if (this.isUnknownTimeZone) return "unknown";
    if ("system" === this._date.zone.type) return "system";
    const e = this.zone;
    return "fixed" === e.type ? 0 === e.fixed ? "UTC" : e.formatOffset(0, "short") : e.name;
  }
  stringify() {
    return JSON.stringify(this.toJSDate());
  }
  plus(e) {
    return new _h(this._date.plus(e));
  }
  diff(e, t) {
    return this._date.diff(e._date, t)[t];
  }
  toISODate() {
    return this._date.toISODate();
  }
  toISOString(e) {
    return e ? this._date.toISO({ suppressMilliseconds: true, includeOffset: !this.isUnknownTimeZone }) : this._date.toISO({ includeOffset: !this.isUnknownTimeZone });
  }
  toISOTime(e, t) {
    return this._date.toISOTime({ suppressMilliseconds: e, includeOffset: t && !this.isUnknownTimeZone });
  }
  toFormat(e, t) {
    return this.isUnknownTimeZone && (e = e.replaceAll("Z", "")), this._date.toFormat(e, t);
  }
  toJSDate() {
    return this._date.toJSDate();
  }
  toSQLValue() {
    return this._date.toFormat("yyyy-LL-dd HH:mm:ss");
  }
  toSQLWithKeyword() {
    return `timestamp '${this.toSQLValue()}'`;
  }
  toDateTime() {
    return this._date;
  }
  toNumber() {
    return this._date.toMillis();
  }
  getTime() {
    return this._date.toMillis();
  }
  toUTC() {
    return new _h(this._date.toUTC());
  }
  toLocal() {
    return new _h(this._date.toLocal());
  }
  toString() {
    return this.toISOString(true);
  }
  static fromReaderAsTimeStampOffset(e) {
    if (!e) return null;
    const t = DateTime.fromISO(e, { setZone: true });
    return new _h(t);
  }
};
function l(t, r3 = true) {
  if (t instanceof Zone) return t;
  switch (o(t)) {
    case "system":
      return "system";
    case "utc":
      return "UTC";
    case "unknown":
      return o2.instance;
  }
  if (/^[+-]?[0-9]{1,2}([:][0-9]{2})?$/.test(t)) {
    const e = FixedOffsetZone.parseSpecifier("UTC" + (t.startsWith("+") || t.startsWith("-") ? "" : "+") + t);
    if (e) return e;
  }
  const d2 = IANAZone.create(t);
  if (!d2.isValid) {
    if (r3) throw new u(a.TimeZoneNotRecognized);
    return null;
  }
  return d2;
}

// node_modules/@arcgis/core/core/sql/DateOnly.js
function o3(t) {
  t = t.replaceAll(/LTS|LT|L{1,4}|l{1,4}/g, "[$&]");
  let e = "";
  const a2 = /(\[[^[]*\])|(\\)?([Hh]mm(ss)?|Mo|M{1,4}|Do|DDDo|D{1,4}|d{2,4}|do?|w[o|w]?|W[o|W]?|Qo?|N{1,5}|YYYYYY|YYYYY|YYYY|YY|y{2,4}|yo?|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g;
  for (const r3 of t.match(a2) || []) switch (r3) {
    case "D":
      e += "d";
      break;
    case "DD":
      e += "dd";
      break;
    case "DDD":
      e += "o";
      break;
    case "d":
      e += "c";
      break;
    case "ddd":
      e += "ccc";
      break;
    case "dddd":
      e += "cccc";
      break;
    case "M":
      e += "L";
      break;
    case "MM":
      e += "LL";
      break;
    case "MMM":
      e += "LLL";
      break;
    case "MMMM":
      e += "LLLL";
      break;
    case "YY":
      e += "yy";
      break;
    case "Y":
    case "YYYY":
      e += "yyyy";
      break;
    case "Q":
      e += "q";
      break;
    case "X":
    case "x":
      e += r3;
      break;
    default:
      r3.length >= 2 && "[" === r3.slice(0, 1) && "]" === r3.slice(-1) ? e += `'${r3.slice(1, -1)}'` : e += `'${r3}'`;
  }
  return e;
}
var n = "esri.core.sql.dateonly";
var i2 = class _i {
  constructor(t, e, a2) {
    this._year = t, this._month = e, this._day = a2, this.declaredRootClass = n;
  }
  static isDateOnly(t) {
    return "object" == typeof t && null != t && "declaredRootClass" in t && t.declaredRootClass === n;
  }
  get month() {
    return this._month;
  }
  get monthJS() {
    return this._month - 1;
  }
  get year() {
    return this._year;
  }
  get day() {
    return this._day;
  }
  get isValid() {
    return this.toDateTime("unknown").isValid;
  }
  equals(t) {
    return _i.isDateOnly(t) && t.day === this.day && t.month === this.month && t.year === this.year;
  }
  clone() {
    return new _i(this._year, this._month, this._day);
  }
  toDateTime(e) {
    return DateTime.fromObject({ day: this.day, month: this.month, year: this.year }, { zone: l(e) });
  }
  toDateTimeLuxon(e) {
    return DateTime.fromObject({ day: this.day, month: this.month, year: this.year }, { zone: l(e) });
  }
  toString() {
    return `${this.year.toString().padStart(4, "0")}-${this.month.toString().padStart(2, "0")}-${this.day.toString().padStart(2, "0")}`;
  }
  toFormat(t = null, r3 = true) {
    if (null === t || "" === t) return this.toString();
    if (r3 && (t = o3(t)), !t) return "";
    const s = this.toDateTime("unknown");
    return h.dateTimeToArcadeDate(s).toFormat(t, { locale: i(), numberingSystem: "latn" });
  }
  toArcadeDate() {
    const t = this.toDateTime("unknown");
    return h.dateTimeToArcadeDate(t);
  }
  toNumber() {
    return this.toDateTime("unknown").toMillis();
  }
  toJSDate() {
    return this.toDateTime("unknown").toJSDate();
  }
  toStorageFormat() {
    return this.toFormat("yyyy-LL-dd", false);
  }
  toSQLValue() {
    return this.toFormat("yyyy-LL-dd", false);
  }
  toSQLWithKeyword() {
    return "date '" + this.toFormat("yyyy-LL-dd", false) + "'";
  }
  plus(t, e) {
    return _i.fromDateTime(this.toUTCDateTime().plus({ [t]: e }));
  }
  toUTCDateTime() {
    return DateTime.utc(this.year, this.month, this.day, 0, 0, 0, 0);
  }
  difference(t, e) {
    switch (e.toLowerCase()) {
      case "days":
      case "day":
      case "d":
        return this.toUTCDateTime().diff(t.toUTCDateTime(), "days").days;
      case "months":
      case "month":
        return this.toUTCDateTime().diff(t.toUTCDateTime(), "months").months;
      case "minutes":
      case "minute":
      case "m":
        return "M" === e ? this.toUTCDateTime().diff(t.toUTCDateTime(), "months").months : this.toUTCDateTime().diff(t.toUTCDateTime(), "minutes").minutes;
      case "seconds":
      case "second":
      case "s":
        return this.toUTCDateTime().diff(t.toUTCDateTime(), "seconds").seconds;
      case "milliseconds":
      case "millisecond":
      case "ms":
      default:
        return this.toUTCDateTime().diff(t.toUTCDateTime(), "milliseconds").milliseconds;
      case "hours":
      case "hour":
      case "h":
        return this.toUTCDateTime().diff(t.toUTCDateTime(), "hours").hours;
      case "years":
      case "year":
      case "y":
        return this.toUTCDateTime().diff(t.toUTCDateTime(), "years").years;
    }
  }
  static fromMilliseconds(t) {
    const e = DateTime.fromMillis(t, { zone: FixedOffsetZone.utcInstance });
    return e.isValid ? _i.fromParts(e.year, e.month, e.day) : null;
  }
  static fromSeconds(t) {
    const e = DateTime.fromSeconds(t, { zone: FixedOffsetZone.utcInstance });
    return e.isValid ? _i.fromParts(e.year, e.month, e.day) : null;
  }
  static fromReader(t) {
    if (!t) return null;
    const e = t.split("-");
    return 3 !== e.length ? null : new _i(parseInt(e[0], 10), parseInt(e[1], 10), parseInt(e[2], 10));
  }
  static fromParts(t, e, a2) {
    const r3 = new _i(t, e, a2);
    return false === r3.isValid ? null : r3;
  }
  static fromDateJS(t) {
    return _i.fromParts(t.getFullYear(), t.getMonth() + 1, t.getDay());
  }
  static fromDateTime(t) {
    return _i.fromParts(t.year, t.month, t.day);
  }
  static fromSqlTimeStampOffset(t) {
    return this.fromDateTime(t.toDateTime());
  }
  static fromString(t, e = null) {
    if ("" === t) return null;
    if (null === t) return null;
    const a2 = [];
    if (e) (e = o3(e)) && a2.push(e);
    else if (null === e || "" === e) {
      const e2 = DateTime.fromISO(t, { setZone: true });
      return e2.isValid ? _i.fromParts(e2.year, e2.month, e2.day) : null;
    }
    for (const s of a2) {
      const a3 = DateTime.fromFormat(t, e ?? s);
      if (a3.isValid) return new _i(a3.year, a3.month, a3.day);
    }
    return null;
  }
  static fromNow(e = "system") {
    const a2 = DateTime.fromJSDate(/* @__PURE__ */ new Date()).setZone(l(e));
    return new _i(a2.year, a2.month, a2.day);
  }
};

// node_modules/@arcgis/core/arcade/kernel.js
function n2(n4) {
  if (null == n4) return null;
  switch (n4.type) {
    case "polygon":
    case "multipoint":
    case "polyline":
      return n4.extent;
    case "point":
      return new z({ xmin: n4.x, ymin: n4.y, xmax: n4.x, ymax: n4.y, spatialReference: n4.spatialReference });
    case "extent":
      return n4;
  }
  return null;
}
function o4(e) {
  if (null == e) return null;
  const n4 = e.clone();
  return void 0 !== e.cache._geVersion && (n4.cache._geVersion = e.cache._geVersion), n4;
}
function i3(e) {
  return "number" == typeof e && isFinite(e) && Math.floor(e) === e;
}

// node_modules/@arcgis/core/core/sql/TimeOnly.js
function i4(t) {
  if (!t) return "";
  const s = /(a|A|hh?|HH?|mm?|ss?|SSS|S|.)/g;
  let e = "";
  for (const i5 of t.match(s) || []) switch (i5) {
    case "SSS":
    case "m":
    case "mm":
    case "h":
    case "hh":
    case "H":
    case "HH":
    case "s":
    case "ss":
      e += i5;
      break;
    case "A":
    case "a":
      e += "a";
      break;
    default:
      e += `'${i5}'`;
  }
  return e;
}
var n3 = "esri.core.sql.timeonly";
var r2 = class _r {
  constructor(t, s, e, i5) {
    this._hour = t, this._minute = s, this._second = e, this._millisecond = i5, this.declaredRootClass = n3;
  }
  static isTimeOnly(t) {
    return "object" == typeof t && null != t && "declaredRootClass" in t && t.declaredRootClass === n3;
  }
  get hour() {
    return this._hour;
  }
  get minute() {
    return this._minute;
  }
  get second() {
    return this._second;
  }
  get millisecond() {
    return this._millisecond;
  }
  equals(t) {
    return _r.isTimeOnly(t) && t.hour === this.hour && t.minute === this.minute && t.second === this.second && t.millisecond === this.millisecond;
  }
  clone() {
    return new _r(this.hour, this.minute, this.second, this.millisecond);
  }
  isValid() {
    return i3(this.hour) && i3(this.minute) && i3(this.second) && i3(this.millisecond) && this.hour >= 0 && this.hour < 24 && this.minute >= 0 && this.minute < 60 && this.second >= 0 && this.second < 60 && this.millisecond >= 0 && this.millisecond < 1e3;
  }
  toString() {
    return `${this.hour.toString().padStart(2, "0")}:${this.minute.toString().padStart(2, "0")}:${this.second.toString().padStart(2, "0")}` + (this.millisecond > 0 ? "." + this.millisecond.toString().padStart(3, "0") : "");
  }
  toSQLValue() {
    return this.toString();
  }
  toSQLWithKeyword() {
    return `time '${this.hour.toString().padStart(2, "0")}:${this.minute.toString().padStart(2, "0")}:${this.second.toString().padStart(2, "0")}${this.millisecond > 0 ? "." + this.millisecond.toString().padStart(3, "0") : ""}'`;
  }
  toStorageString() {
    return `${this.hour.toString().padStart(2, "0")}:${this.minute.toString().padStart(2, "0")}:${this.second.toString().padStart(2, "0")}`;
  }
  toFormat(t = null) {
    if (null === t || "" === t) return this.toString();
    if (!(t = i4(t))) return "";
    return DateTime.local(1970, 1, 1, this._hour, this._minute, this._second, this._millisecond).toFormat(t, { locale: i(), numberingSystem: "latn" });
  }
  toNumber() {
    return this.millisecond + 1e3 * this.second + 1e3 * this.minute * 60 + 60 * this.hour * 60 * 1e3;
  }
  static fromParts(t, s, e, i5) {
    const n4 = new _r(t, s, e, i5);
    return n4.isValid() ? n4 : null;
  }
  static fromReader(t) {
    if (!t) return null;
    const s = t.split(":");
    return 3 !== s.length ? null : new _r(parseInt(s[0], 10), parseInt(s[1], 10), parseInt(s[2], 10), 0);
  }
  static fromMilliseconds(t) {
    if (t > 864e5 || t < 0) return null;
    const s = Math.floor(t / 1e3 % 60), e = Math.floor(t / 6e4 % 60), i5 = Math.floor(t / 36e5 % 24), n4 = Math.floor(t % 1e3);
    return new _r(i5, e, s, n4);
  }
  static fromDateJS(t) {
    return new _r(t.getHours(), t.getMinutes(), t.getSeconds(), t.getMilliseconds());
  }
  static fromDateTime(t) {
    return new _r(t.hour, t.minute, t.second, t.millisecond);
  }
  static fromSqlTimeStampOffset(t) {
    return this.fromDateTime(t.toDateTime());
  }
  static fromString(t, s = null) {
    if ("" === t) return null;
    if (null === t) return null;
    const n4 = [];
    s ? (s = i4(s)) && n4.push(s) : null !== s && "" !== s || (n4.push("HH:mm:ss"), n4.push("HH:mm:ss.SSS"), n4.push("hh:mm:ss a"), n4.push("hh:mm:ss.SSS a"), n4.push("HH:mm"), n4.push("hh:mm a"), n4.push("H:mm"), n4.push("h:mm a"), n4.push("H:mm:ss"), n4.push("h:mm:ss a"), n4.push("H:mm:ss.SSS"), n4.push("h:mm:ss.SSS a"));
    for (const i5 of n4) {
      const s2 = DateTime.fromFormat(t, i5);
      if (s2.isValid) return new _r(s2.hour, s2.minute, s2.second, s2.millisecond);
    }
    return null;
  }
  plus(t, s) {
    switch (t) {
      case "days":
      case "years":
      case "months":
        return this.clone();
      case "hours":
      case "minutes":
      case "seconds":
      case "milliseconds":
        return _r.fromDateTime(this.toUTCDateTime().plus({ [t]: s }));
    }
    return null;
  }
  toUTCDateTime() {
    return DateTime.utc(1970, 1, 1, this.hour, this.minute, this.second, this.millisecond);
  }
  difference(t, s) {
    switch (s.toLowerCase()) {
      case "days":
      case "day":
      case "d":
        return this.toUTCDateTime().diff(t.toUTCDateTime(), "days").days;
      case "months":
      case "month":
        return this.toUTCDateTime().diff(t.toUTCDateTime(), "months").months;
      case "minutes":
      case "minute":
      case "m":
        return "M" === s ? this.toUTCDateTime().diff(t.toUTCDateTime(), "months").months : this.toUTCDateTime().diff(t.toUTCDateTime(), "minutes").minutes;
      case "seconds":
      case "second":
      case "s":
        return this.toUTCDateTime().diff(t.toUTCDateTime(), "seconds").seconds;
      case "milliseconds":
      case "millisecond":
      case "ms":
      default:
        return this.toUTCDateTime().diff(t.toUTCDateTime(), "milliseconds").milliseconds;
      case "hours":
      case "hour":
      case "h":
        return this.toUTCDateTime().diff(t.toUTCDateTime(), "hours").hours;
      case "years":
      case "year":
      case "y":
        return this.toUTCDateTime().diff(t.toUTCDateTime(), "years").years;
    }
  }
};

export {
  h,
  l,
  i2 as i,
  n2 as n,
  o4 as o,
  r2 as r
};
//# sourceMappingURL=chunk-NY6S6EMV.js.map
