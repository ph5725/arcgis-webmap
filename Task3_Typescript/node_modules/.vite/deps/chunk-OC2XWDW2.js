import {
  f,
  m
} from "./chunk-I6IIPG56.js";
import {
  Z
} from "./chunk-JEYXDNAT.js";
import {
  r
} from "./chunk-KHRHKYU2.js";
import {
  i2 as i,
  s
} from "./chunk-XWG6QGFK.js";

// node_modules/@arcgis/core/renderers/support/DictionaryScriptEvaluator.js
var s2 = class _s {
  static async from(t, n, c) {
    const l = t.dictionary_version ? r.parse(t.dictionary_version) : null, d = new Set(t.itemsNames), u = {};
    if (n) for (const e in n) u[e] = n[e];
    if (t.authoringInfo.configuration) for (const e of t.authoringInfo.configuration) u.hasOwnProperty(e.name) || (u[e.name] = e.value);
    const p = new Set(t.authoringInfo.symbol);
    for (const e of Object.keys(c)) p.delete(e);
    p.size && i.getLogger("esri.renderers.support.DictionaryScriptEvaluator").warnOnce("missing-fields: fieldMap entries for the following symbol fields are missing", { symbolFields: p });
    const f2 = await m(t.expression, null, u);
    if (!f2) throw new s("dictionary-renderer:expression-error", "Unable to create dictionary renderer expression");
    const g = !l || !l.greaterEqual(4, 0);
    g && i.getLogger("esri.renderers.support.DictionaryScriptEvaluator").warnOnce("Dictionary script does not support native field types. Applying fallback", { version: l });
    const m2 = new a(c, g);
    return new _s(g, d, f2, m2);
  }
  constructor(e, r2, i2, t) {
    this._requiresFieldCoercionToString = e, this._itemNames = r2, this._compiled = i2, this._reader = t;
  }
  get itemNames() {
    return this._itemNames;
  }
  evaluate(e, i2, t, o) {
    try {
      return this._reader.bind(e, t, o), this._compiled.evaluate(this._reader, { $view: { scale: i2 } });
    } catch (n) {
      i.getLogger("esri.renderers.support.DictionaryScriptEvaluator").warnOnce("arcade: dictionary script evaluation failed", { error: n });
    }
    return null;
  }
  createDictionaryFieldsIndex(e) {
    if (!this._requiresFieldCoercionToString) return new Z(e);
    const r2 = e.map((e2) => ({ ...e2, type: "esriFieldTypeString" }));
    return new Z(r2);
  }
};
var a = class extends f {
  constructor(e, r2) {
    super(), this._fieldMap = e, this._requiresFieldCoercionToString = r2;
  }
  _getField(e) {
    const r2 = this._fieldMap[e] ?? e;
    return this._boundSchema.fieldsIndex.get(r2);
  }
  field(e) {
    if (!this._requiresFieldCoercionToString) return super.field(e, false);
    const r2 = this._getField(e);
    if (null == r2) return "";
    return null == this._boundTarget.attributes[r2.name] ? "" : "" + this._boundTarget.attributes[r2.name];
  }
};

export {
  s2 as s
};
//# sourceMappingURL=chunk-OC2XWDW2.js.map
