import {
  e as e2,
  t as t3
} from "./chunk-WUKLWX63.js";
import {
  I,
  a as a3,
  d as d2,
  h as h2,
  l as l5,
  n as n3,
  w as w3,
  y as y3
} from "./chunk-LHJOMFWG.js";
import {
  I as I2
} from "./chunk-APGIAJ3M.js";
import {
  $,
  B,
  C,
  E,
  G,
  L as L2,
  P,
  U,
  d,
  f,
  g,
  k as k2,
  m as m2,
  p,
  v as v2
} from "./chunk-NLQ5JBZ3.js";
import {
  ut
} from "./chunk-DKS7UUDR.js";
import {
  t as t2
} from "./chunk-LNFOAX5I.js";
import {
  m as m3,
  m2 as m4,
  m3 as m5,
  n as n2,
  s as s5
} from "./chunk-U3MD377S.js";
import {
  S,
  b,
  h,
  j,
  w as w2,
  x,
  x2
} from "./chunk-2B6XECE5.js";
import {
  r as r3
} from "./chunk-OIO6NR6X.js";
import {
  s as s4
} from "./chunk-AAC6XSCN.js";
import {
  C as C2
} from "./chunk-BDWOUZQR.js";
import {
  Z as Z2
} from "./chunk-JEYXDNAT.js";
import {
  i
} from "./chunk-IBGTNH54.js";
import {
  q
} from "./chunk-7NMH5MM5.js";
import {
  L,
  M,
  k,
  u as u3
} from "./chunk-FKFXOPPT.js";
import {
  Fe,
  Ie,
  Te,
  be,
  e2 as e3,
  we
} from "./chunk-VCRP2PLV.js";
import {
  m,
  y as y2
} from "./chunk-N3A2BVTW.js";
import {
  l as l3,
  r as r2
} from "./chunk-52HWRRRQ.js";
import {
  a as a2,
  l as l4,
  v
} from "./chunk-OGOQOMMV.js";
import {
  e,
  u as u2
} from "./chunk-6GWORUT3.js";
import {
  n
} from "./chunk-LMEOPAGQ.js";
import {
  DateTime
} from "./chunk-UY6B6IVT.js";
import {
  N,
  Z,
  s as s3
} from "./chunk-OXSERRAR.js";
import {
  t
} from "./chunk-LQFTAGIV.js";
import {
  l2 as l,
  l3 as l2,
  s as s2,
  u2 as u
} from "./chunk-GZ2P4SCJ.js";
import {
  s
} from "./chunk-XWG6QGFK.js";
import {
  a
} from "./chunk-GWNLQRNM.js";
import {
  r,
  w,
  y
} from "./chunk-FXKORAMT.js";

// node_modules/@arcgis/core/layers/graphics/data/attributeSupport.js
var s6 = new r3(50, 500);
var t4 = "unsupported-query";
var n4 = " as ";
var o = /* @__PURE__ */ new Set(["esriFieldTypeOID", "esriFieldTypeSmallInteger", "esriFieldTypeBigInteger", "esriFieldTypeInteger", "esriFieldTypeSingle", "esriFieldTypeDouble", "esriFieldTypeLong"]);
var a4 = /* @__PURE__ */ new Set(["esriFieldTypeDate", "esriFieldTypeDateOnly", "esriFieldTypeTimeOnly", "esriFieldTypeTimestampOffset"]);
var l6 = /* @__PURE__ */ new Set(["esriFieldTypeString", "esriFieldTypeGUID", "esriFieldTypeGlobalID", ...o, ...a4]);
function d3(i2, r5, n5 = {}) {
  const o2 = c(r5, i2);
  if (!o2) {
    const n6 = s6.getError(r5, i2);
    throw new s(t4, "invalid SQL expression", { expression: r5, error: n6 });
  }
  const a5 = n5.expressionName || "expression";
  if (n5.validateStandardized && !o2.isStandardized) throw new s(t4, `${a5} is not standard`, { expression: r5 });
  if (n5.validateAggregate && !o2.isAggregate) throw new s(t4, `${a5} does not contain a valid aggregate function`, { expression: r5 });
  return o2.fieldNames;
}
function p2(e5, i2, r5, s8) {
  if (!r5) return true;
  const t6 = "where clause";
  return g2(e5, i2, d3(e5, r5, { validateStandardized: true, expressionName: t6 }), { expressionName: t6, query: s8 }), true;
}
function f2(i2, r5, s8, n5, o2) {
  if (!s8) return true;
  const a5 = "having clause", l7 = d3(i2, s8, { validateAggregate: true, expressionName: a5 });
  g2(i2, r5, l7, { expressionName: a5, query: o2 });
  const p4 = c(s8, i2), f4 = p4?.getExpressions().every((e5) => {
    const { aggregateType: r6, field: s9 } = e5, t6 = i2.get(s9)?.name;
    return n5.some((e6) => {
      const { onStatisticField: s10, statisticType: n6 } = e6, o3 = i2.get(s10)?.name;
      return o3 === t6 && n6.toLowerCase().trim() === r6;
    });
  });
  if (!f4) throw new s(t4, "expressions in having clause should also exist in outStatistics", { having: s8 });
  return true;
}
function c(e5, i2) {
  return e5 ? s6.get(e5, i2) : null;
}
function u4(e5) {
  return /\((.*?)\)/.test(e5) ? e5 : e5.split(n4)[0];
}
function y4(e5) {
  return e5.split(n4)[1];
}
function g2(i2, r5, s8, n5 = {}) {
  const o2 = /* @__PURE__ */ new Map();
  if (m6(o2, i2, r5, n5.allowedFieldTypes ?? l6, s8), o2.size) {
    const i3 = n5.expressionName ?? "expression";
    throw new s(t4, `${i3} contains invalid or missing fields`, { errors: Array.from(o2.values()), query: n5.query });
  }
}
function m6(e5, i2, r5, s8, t6) {
  const n5 = t6.includes("*") ? [...r5, ...t6.filter((e6) => "*" !== e6)] : t6;
  for (const a5 of n5) {
    if (i2.get(a5)) T(e5, i2, r5, s8, a5);
    else try {
      const t7 = d3(i2, u4(a5), { validateStandardized: true });
      for (const n6 of t7) T(e5, i2, r5, s8, n6);
    } catch (o2) {
      e5.set(a5, { type: "expression-error", expression: a5, error: o2 });
    }
  }
}
function T(e5, i2, s8, t6, n5) {
  const o2 = i2.get(n5);
  o2 ? s8.has(o2.name) ? "all" !== t6 && false === t6?.has(o2.type) && e5.set(n5, { type: "invalid-type", fieldName: o2.name, fieldType: i.fromJSON(o2.type), allowedFieldTypes: Array.from(t6, (e6) => i.fromJSON(e6)) }) : e5.set(n5, { type: "missing-field", fieldName: o2.name }) : e5.set(n5, { type: "invalid-field", fieldName: n5 });
}

// node_modules/@arcgis/core/layers/graphics/data/QueryEngineCache.js
var t5 = 5;
var e4 = class {
  constructor() {
    this._storage = /* @__PURE__ */ new Map(), this._purgeInterval = t5, this._sweep = () => {
      if (this._timer = void 0, !this._storage) return;
      const t6 = 1e3 * this._purgeInterval, e5 = performance.now() - t6;
      for (const [s8, r5] of this._storage) {
        if (!(r5.time < e5)) return void (this._storage.size > 0 && (this._timer = setTimeout(this._sweep, t6)));
        this._storage.delete(s8);
      }
    };
  }
  destroy() {
    this._storage?.clear(), this._storage = null, clearTimeout(this._timer);
  }
  put(t6, e5) {
    this._storage?.set(t6, new r4(e5)), this._scheduleSweep();
  }
  get(t6) {
    const e5 = this._storage?.get(t6);
    if (e5) return this._storage?.delete(t6), e5.time = performance.now(), this._storage?.set(t6, e5), e5.items;
  }
  clear() {
    this._storage?.clear();
  }
  _scheduleSweep() {
    this._storage && (this._timer ??= setTimeout(this._sweep, 1e3 * this._purgeInterval));
  }
  get test() {
  }
};
var s7 = 0;
var r4 = class {
  constructor(t6) {
    this.items = t6, this.time = performance.now(), this.id = s7++;
  }
};

// node_modules/@arcgis/core/layers/graphics/data/AttributesBuilder.js
var c2 = class {
  constructor(s8, a5, l7) {
    this._fieldDataCache = /* @__PURE__ */ new Map(), this._returnDistinctMap = /* @__PURE__ */ new Map(), this.returnDistinctValues = s8.returnDistinctValues ?? false, this.fieldsIndex = l7, this.featureAdapter = a5;
    const r5 = s8.outFields;
    if (r5 && !r5.includes("*")) {
      this.outFields = r5;
      let s9 = 0;
      for (const a6 of r5) {
        const r6 = u4(a6), n5 = this.fieldsIndex.get(r6), u6 = n5 ? null : c(r6, l7), o2 = n5 ? n5.name : y4(a6) || "FIELD_EXP_" + s9++;
        this._fieldDataCache.set(a6, { alias: o2, clause: u6 });
      }
    }
  }
  countDistinctValues(t6) {
    return this.returnDistinctValues ? (t6.forEach((t7) => this.getAttributes(t7)), this._returnDistinctMap.size) : t6.length;
  }
  getAttributes(t6) {
    const e5 = this._processAttributesForOutFields(t6);
    return this._processAttributesForDistinctValues(e5);
  }
  getFieldValue(t6, i2, s8) {
    const a5 = s8 ? s8.name : i2;
    let l7 = null;
    return this._fieldDataCache.has(a5) ? l7 = this._fieldDataCache.get(a5)?.clause : s8 || (l7 = c(i2, this.fieldsIndex), this._fieldDataCache.set(a5, { alias: a5, clause: l7 })), s8 ? this.featureAdapter.getAttribute(t6, a5) : l7?.calculateValue(t6, this.featureAdapter);
  }
  getDataValues(t6, e5, i2 = true) {
    const s8 = e5.normalizationType, d5 = e5.normalizationTotal, c4 = this.fieldsIndex.get(e5.field), h4 = be(c4) || we(c4), f4 = Te(c4);
    return t6.map((t7) => {
      let a5 = e5.field && this.getFieldValue(t7, e5.field, this.fieldsIndex.get(e5.field));
      if (e5.field2 ? (a5 = `${m2(a5)}${e5.fieldDelimiter}${m2(this.getFieldValue(t7, e5.field2, this.fieldsIndex.get(e5.field2)))}`, e5.field3 && (a5 = `${a5}${e5.fieldDelimiter}${m2(this.getFieldValue(t7, e5.field3, this.fieldsIndex.get(e5.field3)))}`)) : "string" == typeof a5 && i2 && (h4 ? a5 = a5 ? new Date(a5).getTime() : null : f4 && (a5 = a5 ? I2(a5) : null)), s8 && Number.isFinite(a5)) {
        const i3 = "field" === s8 && e5.normalizationField ? this.getFieldValue(t7, e5.normalizationField, this.fieldsIndex.get(e5.normalizationField)) : null;
        a5 = B(a5, s8, i3, d5);
      }
      return a5;
    });
  }
  async getExpressionValues(t6, e5, i2, a5, l7) {
    const { arcadeUtils: r5 } = await e3(), n5 = r5.hasGeometryOperations(e5);
    n5 && await r5.enableGeometryOperations();
    const u6 = r5.createFunction(e5), o2 = r5.getViewInfo(i2), c4 = { fields: this.fieldsIndex.fields };
    return t6.map((t7) => {
      const e6 = { attributes: this.featureAdapter.getAttributes(t7), layer: c4, geometry: n5 ? { ...a3(a5.geometryType, a5.hasZ, a5.hasM, this.featureAdapter.getGeometry(t7)), spatialReference: i2?.spatialReference } : null }, d5 = r5.createExecContext(e6, o2, l7);
      return r5.executeFunction(u6, d5);
    });
  }
  validateItem(t6, i2) {
    return this._fieldDataCache.has(i2) || this._fieldDataCache.set(i2, { alias: i2, clause: c(i2, this.fieldsIndex) }), this._fieldDataCache.get(i2)?.clause?.testFeature(t6, this.featureAdapter) ?? false;
  }
  validateItems(t6, i2) {
    return this._fieldDataCache.has(i2) || this._fieldDataCache.set(i2, { alias: i2, clause: c(i2, this.fieldsIndex) }), this._fieldDataCache.get(i2)?.clause?.testSet(t6, this.featureAdapter) ?? false;
  }
  _processAttributesForOutFields(t6) {
    const e5 = this.outFields;
    if (!e5?.length) return this.featureAdapter.getAttributes(t6);
    const i2 = {};
    for (const s8 of e5) {
      const { alias: e6, clause: a5 } = this._fieldDataCache.get(s8);
      i2[e6] = a5 ? a5.calculateValue(t6, this.featureAdapter) : this.featureAdapter.getAttribute(t6, e6);
    }
    return i2;
  }
  _processAttributesForDistinctValues(t6) {
    if (null == t6 || !this.returnDistinctValues) return t6;
    const e5 = this.outFields, i2 = [];
    if (e5) for (const l7 of e5) {
      const { alias: e6 } = this._fieldDataCache.get(l7);
      i2.push(t6[e6]);
    }
    else for (const l7 in t6) i2.push(t6[l7]);
    const s8 = `${(e5 || ["*"]).join(",")}=${i2.join(",")}`;
    let a5 = this._returnDistinctMap.get(s8) || 0;
    return this._returnDistinctMap.set(s8, ++a5), a5 > 1 ? null : t6;
  }
};

// node_modules/@arcgis/core/layers/graphics/data/QueryEngineResult.js
var E2 = "bin";
var O = class {
  constructor(e5, t6, i2) {
    this.items = e5, this.query = t6, this.geometryType = i2.geometryType, this.hasM = i2.hasM, this.hasZ = i2.hasZ, this.fieldsIndex = i2.fieldsIndex, this.objectIdField = i2.objectIdField, this.spatialReference = i2.spatialReference, this.featureAdapter = i2.featureAdapter;
  }
  get size() {
    return this.items.length;
  }
  createQueryResponseForCount() {
    const e5 = new c2(this.query, this.featureAdapter, this.fieldsIndex);
    if (!this.query.outStatistics) return e5.countDistinctValues(this.items);
    const { groupByFieldsForStatistics: t6, having: i2, outStatistics: s8 } = this.query, a5 = t6?.length;
    if (!!!a5) return 1;
    const r5 = /* @__PURE__ */ new Map(), n5 = /* @__PURE__ */ new Map(), o2 = /* @__PURE__ */ new Set();
    for (const l7 of s8) {
      const { statisticType: s9 } = l7, a6 = "exceedslimit" !== s9 ? l7.onStatisticField : void 0;
      if (!n5.has(a6)) {
        const i3 = [];
        for (const s10 of t6) {
          const t7 = this._getAttributeValues(e5, s10, this.items, r5);
          i3.push(t7);
        }
        n5.set(a6, this._calculateUniqueValues(i3, this.items, e5.returnDistinctValues));
      }
      const u6 = n5.get(a6);
      for (const t7 in u6) {
        const { data: s10, items: a7 } = u6[t7], r6 = s10.join(",");
        i2 && !e5.validateItems(a7, i2) || o2.add(r6);
      }
    }
    return o2.size;
  }
  async createQueryResponse() {
    let e5;
    if (this.query.outStatistics) {
      e5 = this.query.outStatistics.some((e6) => "exceedslimit" === e6.statisticType) ? this._createExceedsLimitQueryResponse() : await this._createStatisticsQueryResponse(this.query, this.items);
    } else e5 = this._createFeatureQueryResponse(this.query);
    if (this.query.returnQueryGeometry) {
      const t6 = this.query.geometry;
      N(this.query.outSR) && !s3(t6.spatialReference, this.query.outSR) ? e5.queryGeometry = h2({ spatialReference: this.query.outSR, ...j(t6, t6.spatialReference, this.query.outSR) }) : e5.queryGeometry = h2({ spatialReference: this.query.outSR, ...t6 });
    }
    return e5;
  }
  createSnappingResponse(e5, t6, i2) {
    const s8 = this.featureAdapter, a5 = Q(this.hasZ, this.hasM), { point: r5, mode: n5 } = e5, o2 = "number" == typeof e5.distance ? e5.distance : e5.distance.x, l7 = "number" == typeof e5.distance ? e5.distance : e5.distance.y, u6 = { candidates: [] }, c4 = "esriGeometryPolygon" === this.geometryType, m8 = "esriGeometryPolyline" === this.geometryType || "esriGeometryPoint" === this.geometryType, d5 = this._getPointCreator(n5, t6, this.spatialReference, i2), f4 = new U2(null, 0), y6 = new U2(null, 0), g3 = { x: 0, y: 0, z: 0 };
    for (const x3 of this.items) {
      const t7 = s8.getGeometry(x3);
      if (null == t7) continue;
      const { coords: i3 } = t7, n6 = t7.isPoint ? k3 : t7.lengths;
      if (f4.coords = i3, y6.coords = i3, e5.returnEdge) {
        let e6 = 0;
        for (let t8 = 0; t8 < n6.length; t8++) {
          const i4 = n6[t8], m9 = e6;
          for (let t9 = 0; t9 < i4; t9++, e6 += a5) {
            if (!c4 && t9 === i4 - 1) continue;
            const n7 = f4;
            n7.coordsIndex = e6;
            const p4 = y6;
            p4.coordsIndex = t9 === i4 - 1 ? m9 : e6 + a5;
            const T2 = g3;
            if (!H(g3, r5, n7, p4)) continue;
            const I3 = (r5.x - T2.x) / o2, F2 = (r5.y - T2.y) / l7, _ = I3 * I3 + F2 * F2;
            _ <= 1 && u6.candidates.push(e2(s8.getObjectId(x3), d5(T2), Math.sqrt(_), d5(n7), d5(p4)));
          }
        }
      }
      if ("all" === e5.vertexMode) {
        let e6 = 0;
        for (let t8 = 0; t8 < n6.length; t8++) {
          const i4 = n6[t8], m9 = e6, h4 = y6;
          h4.coordsIndex = m9;
          for (let t9 = 0; t9 < i4; t9++, e6 += a5) {
            const a6 = f4;
            if (a6.coordsIndex = e6, c4 && t9 === i4 - 1 && a6.x === h4.x && a6.y === h4.y) continue;
            const n7 = (r5.x - a6.x) / o2, m10 = (r5.y - a6.y) / l7, y7 = n7 * n7 + m10 * m10;
            y7 <= 1 && u6.candidates.push(t3(s8.getObjectId(x3), d5(a6), Math.sqrt(y7)));
          }
        }
      } else if (m8 && "ends" === e5.vertexMode) {
        let e6 = 0;
        const t8 = [];
        for (let i4 = 0; i4 < n6.length; i4++) {
          t8.push(e6);
          const s9 = n6[i4];
          e6 += s9 * a5, !c4 && s9 > 1 && t8.push(e6 - a5);
        }
        for (const i4 of t8) {
          const e7 = f4;
          e7.coordsIndex = i4;
          const t9 = (r5.x - e7.x) / o2, a6 = (r5.y - e7.y) / l7, n7 = t9 * t9 + a6 * a6;
          n7 <= 1 && u6.candidates.push(t3(s8.getObjectId(x3), d5(e7), Math.sqrt(n7)));
        }
      }
    }
    return u6.candidates.sort((e6, t7) => e6.distance - t7.distance), u6;
  }
  _getPointCreator(e5, t6, i2, s8) {
    const a5 = null == s8 || s3(i2, s8) ? (e6) => e6 : (e6) => j(e6, i2, s8), { hasZ: r5 } = this, n5 = 0;
    return "3d" === e5 ? r5 && t6 ? ({ x: e6, y: t7, z: i3 }) => a5({ x: e6, y: t7, z: i3 }) : ({ x: e6, y: t7 }) => a5({ x: e6, y: t7, z: n5 }) : ({ x: e6, y: t7 }) => a5({ x: e6, y: t7 });
  }
  async createSummaryStatisticsResponse(e5) {
    const { field: t6, valueExpression: i2, normalizationField: s8, normalizationType: a5, normalizationTotal: r5, minValue: n5, maxValue: o2, scale: l7, timeZone: u6, outStatisticTypes: c4 } = e5, m8 = this.fieldsIndex.get(t6), d5 = Ie(m8) || be(m8) || we(m8), f4 = await this._getDataValues({ field: t6, valueExpression: i2, normalizationField: s8, normalizationType: a5, normalizationTotal: r5, scale: l7, timeZone: u6 }, this.items), h4 = d({ normalizationType: a5, normalizationField: s8, minValue: n5, maxValue: o2 }), p4 = { value: 0.5, fieldType: m8?.type }, I3 = Fe(m8) ? f({ values: f4, supportsNullCount: h4, percentileParams: p4, outStatisticTypes: c4 }) : p({ values: f4, minValue: n5, maxValue: o2, useSampleStdDev: !a5, supportsNullCount: h4, percentileParams: p4, outStatisticTypes: c4 });
    return C(I3, c4, d5);
  }
  async createUniqueValuesResponse(e5) {
    const { field: t6, valueExpression: i2, domains: s8, returnAllCodedValues: a5, scale: r5, timeZone: n5 } = e5, o2 = await this._getDataValues({ field: t6, field2: e5.field2, field3: e5.field3, fieldDelimiter: e5.fieldDelimiter, valueExpression: i2, scale: r5, timeZone: n5 }, this.items, false), l7 = k2(o2);
    return $(l7, s8, a5, e5.fieldDelimiter);
  }
  async createClassBreaksResponse(e5) {
    const { field: t6, valueExpression: i2, normalizationField: s8, normalizationType: a5, normalizationTotal: r5, classificationMethod: n5, standardDeviationInterval: o2, minValue: l7, maxValue: u6, numClasses: c4, scale: m8, timeZone: d5 } = e5, f4 = await this._getDataValues({ field: t6, valueExpression: i2, normalizationField: s8, normalizationType: a5, normalizationTotal: r5, scale: m8, timeZone: d5 }, this.items), h4 = E(f4, { field: t6, normalizationField: s8, normalizationType: a5, normalizationTotal: r5, classificationMethod: n5, standardDeviationInterval: o2, minValue: l7, maxValue: u6, numClasses: c4 });
    return P(h4, n5);
  }
  async createHistogramResponse(e5) {
    const { field: t6, valueExpression: i2, normalizationField: s8, normalizationType: a5, normalizationTotal: r5, classificationMethod: n5, standardDeviationInterval: o2, minValue: l7, maxValue: u6, numBins: c4, scale: m8, timeZone: d5 } = e5, f4 = await this._getDataValues({ field: t6, valueExpression: i2, normalizationField: s8, normalizationType: a5, normalizationTotal: r5, scale: m8, timeZone: d5 }, this.items);
    return U(f4, { field: t6, normalizationField: s8, normalizationType: a5, normalizationTotal: r5, classificationMethod: n5, standardDeviationInterval: o2, minValue: l7, maxValue: u6, numBins: c4 });
  }
  _sortFeatures(e5, t6, i2) {
    if (e5.length > 1 && t6?.length) for (const s8 of t6.slice().reverse()) {
      const t7 = s8.split(" "), a5 = t7[0], r5 = this.fieldsIndex.get(a5), n5 = !!t7[1] && "desc" === t7[1].toLowerCase(), o2 = g(r5?.type, n5);
      e5.sort((e6, t8) => {
        const s9 = i2(e6, a5, r5), n6 = i2(t8, a5, r5);
        return o2(s9, n6);
      });
    }
  }
  _createFeatureQueryResponse(e5) {
    const { items: t6, geometryType: i2, hasM: s8, hasZ: a5, objectIdField: n5, spatialReference: o2 } = this, { outFields: l7, outSR: c4, quantizationParameters: m8, resultRecordCount: d5, resultOffset: f4, returnZ: h4, returnM: p4 } = e5, y6 = null != d5 && t6.length > (f4 || 0) + d5, g3 = l7 && (l7.includes("*") ? [...this.fieldsIndex.fields] : l7.map((e6) => this.fieldsIndex.get(e6)));
    return { exceededTransferLimit: y6, features: this._createFeatures(e5, t6), fields: g3, geometryType: i2, hasM: s8 && p4, hasZ: a5 && h4, objectIdFieldName: n5, spatialReference: h2(c4 || o2), transform: m8 && s4(m8) || null };
  }
  _createFeatures(e5, t6) {
    const i2 = new c2(e5, this.featureAdapter, this.fieldsIndex), { hasM: s8, hasZ: a5 } = this, { orderByFields: n5, quantizationParameters: o2, returnGeometry: u6, returnCentroid: d5, maxAllowableOffset: f4, resultOffset: h4, resultRecordCount: p4, returnZ: y6 = false, returnM: g3 = false } = e5, x3 = a5 && y6, T2 = s8 && g3;
    let I3 = [], F2 = 0;
    const _ = [...t6];
    if (this._sortFeatures(_, n5, (e6, t7, s9) => i2.getFieldValue(e6, t7, s9)), this.geometryType && (u6 || d5)) {
      const e6 = s4(o2) ?? void 0, t7 = "esriGeometryPolygon" === this.geometryType || "esriGeometryPolyline" === this.geometryType;
      if (u6 && !d5) for (const s9 of _) {
        const a6 = this.featureAdapter.getGeometry(s9), r5 = { attributes: i2.getAttributes(s9), geometry: a3(this.geometryType, this.hasZ, this.hasM, a6, f4, e6, x3, T2), metadata: this.featureAdapter.getMetadata?.(s9) };
        t7 && a6 && !r5.geometry && (r5.centroid = y3(this, this.featureAdapter.getCentroid(s9, this), e6)), I3[F2++] = r5;
      }
      else if (!u6 && d5) for (const s9 of _) I3[F2++] = { attributes: i2.getAttributes(s9), centroid: y3(this, this.featureAdapter.getCentroid(s9, this), e6) };
      else for (const s9 of _) I3[F2++] = { attributes: i2.getAttributes(s9), centroid: y3(this, this.featureAdapter.getCentroid(s9, this), e6), geometry: a3(this.geometryType, this.hasZ, this.hasM, this.featureAdapter.getGeometry(s9), f4, e6, x3, T2), metadata: this.featureAdapter.getMetadata?.(s9) };
    } else for (const r5 of _) {
      const e6 = i2.getAttributes(r5);
      e6 && (I3[F2++] = { attributes: e6 });
    }
    const V2 = h4 || 0;
    if (null != p4) {
      const e6 = V2 + p4;
      I3 = I3.slice(V2, Math.min(I3.length, e6));
    }
    return I3;
  }
  _createExceedsLimitQueryResponse() {
    let e5 = false, t6 = Number.POSITIVE_INFINITY, i2 = Number.POSITIVE_INFINITY, s8 = Number.POSITIVE_INFINITY;
    for (const a5 of this.query.outStatistics ?? []) if ("exceedslimit" === a5.statisticType) {
      t6 = null != a5.maxPointCount ? a5.maxPointCount : Number.POSITIVE_INFINITY, i2 = null != a5.maxRecordCount ? a5.maxRecordCount : Number.POSITIVE_INFINITY, s8 = null != a5.maxVertexCount ? a5.maxVertexCount : Number.POSITIVE_INFINITY;
      break;
    }
    if ("esriGeometryPoint" === this.geometryType) e5 = this.items.length > t6;
    else if (this.items.length > i2) e5 = true;
    else {
      const t7 = Q(this.hasZ, this.hasM), i3 = this.featureAdapter;
      e5 = this.items.reduce((e6, t8) => {
        const s9 = i3.getGeometry(t8);
        return e6 + (null != s9 && s9.coords.length || 0);
      }, 0) / t7 > s8;
    }
    return { fields: [{ name: "exceedslimit", type: "esriFieldTypeInteger", alias: "exceedslimit", sqlType: "sqlTypeInteger", domain: null, defaultValue: null }], features: [{ attributes: { exceedslimit: Number(e5) } }] };
  }
  async _createStatisticsQueryResponse(e5, t6, i2 = { attributes: {} }) {
    const s8 = [], a5 = /* @__PURE__ */ new Map(), r5 = /* @__PURE__ */ new Map(), n5 = /* @__PURE__ */ new Map(), o2 = /* @__PURE__ */ new Map(), u6 = new c2(e5, this.featureAdapter, this.fieldsIndex), c4 = e5.outStatistics, { groupByFieldsForStatistics: m8, having: d5, orderByFields: f4, resultRecordCount: h4 } = e5, p4 = m8?.length, y6 = !!p4, g3 = y6 ? m8[0] : null, x3 = y6 && !this.fieldsIndex.get(g3);
    for (const l7 of c4 ?? []) {
      const { outStatisticFieldName: e6, statisticType: c5 } = l7, f5 = l7, h5 = "exceedslimit" !== c5 ? l7.onStatisticField : void 0, I4 = "percentile_disc" === c5 || "percentile_cont" === c5, F2 = "EnvelopeAggregate" === c5 || "CentroidAggregate" === c5 || "ConvexHullAggregate" === c5, _ = y6 && 1 === p4 && (h5 === g3 || x3) && "count" === c5;
      if (y6) {
        if (!n5.has(h5)) {
          const e7 = [];
          for (const i4 of m8) {
            const s10 = this._getAttributeValues(u6, i4, t6, a5);
            e7.push(s10);
          }
          n5.set(h5, this._calculateUniqueValues(e7, t6, !F2 && u6.returnDistinctValues));
        }
        const i3 = n5.get(h5);
        if (!i3) continue;
        const s9 = Object.keys(i3);
        for (const r6 of s9) {
          const { count: s10, data: n6, items: l8, itemPositions: c6 } = i3[r6], p5 = n6.join(",");
          if (!d5 || u6.validateItems(l8, d5)) {
            const i4 = o2.get(p5) || { attributes: {} };
            if (F2) {
              i4.aggregateGeometries || (i4.aggregateGeometries = {});
              const { aggregateGeometries: e7, outStatisticFieldName: t7 } = await this._getAggregateGeometry(f5, l8);
              i4.aggregateGeometries[t7] = e7;
            } else {
              let r8 = null;
              if (_) r8 = s10;
              else {
                const e7 = this._getAttributeValues(u6, h5, t6, a5), i5 = c6.map((t7) => e7[t7]);
                r8 = I4 && "statisticParameters" in f5 ? this._getPercentileValue(f5, i5) : this._getStatisticValue(f5, i5, null, u6.returnDistinctValues);
              }
              i4.attributes[e6] = r8;
            }
            let r7 = 0;
            m8.forEach((e7, t7) => i4.attributes[this.fieldsIndex.get(e7) ? e7 : "EXPR_" + ++r7] = n6[t7]), o2.set(p5, i4);
          }
        }
      } else if (F2) {
        i2.aggregateGeometries || (i2.aggregateGeometries = {});
        const { aggregateGeometries: e7, outStatisticFieldName: s9 } = await this._getAggregateGeometry(f5, t6);
        i2.aggregateGeometries[s9] = e7;
      } else {
        const s9 = this._getAttributeValues(u6, h5, t6, a5);
        i2.attributes[e6] = I4 && "statisticParameters" in f5 ? this._getPercentileValue(f5, s9) : this._getStatisticValue(f5, s9, r5, u6.returnDistinctValues);
      }
      const V2 = "min" !== c5 && "max" !== c5 || !Fe(this.fieldsIndex.get(h5)) && !this._isAnyDateField(h5) ? null : this.fieldsIndex.get(h5)?.type;
      s8.push({ name: e6, alias: e6, type: V2 || "esriFieldTypeDouble" });
    }
    const I3 = y6 ? Array.from(o2.values()) : [i2];
    return this._sortFeatures(I3, f4, (e6, t7) => e6.attributes[t7]), h4 && (I3.length = Math.min(h4, I3.length)), { fields: s8, features: I3 };
  }
  _isAnyDateField(e5) {
    const t6 = this.fieldsIndex.get(e5);
    return Ie(t6) || be(t6) || we(t6) || Te(t6);
  }
  async _getAggregateGeometry(e5, r5) {
    const { convexHull: n5, union: o2 } = await import("./geometryEngineJSON-MSK3YET3.js"), { statisticType: l7, outStatisticFieldName: u6 } = e5, { featureAdapter: m8, spatialReference: d5, geometryType: f4, hasZ: h4, hasM: p4 } = this, y6 = r5.map((e6) => a3(f4, h4, p4, m8.getGeometry(e6))), g3 = n5(d5, y6, true)[0], x3 = { aggregateGeometries: null, outStatisticFieldName: null };
    if ("EnvelopeAggregate" === l7) {
      const e6 = g3 ? v(g3) : l4(o2(d5, y6));
      x3.aggregateGeometries = { ...e6, spatialReference: d5 }, x3.outStatisticFieldName = u6 || "extent";
    } else if ("CentroidAggregate" === l7) {
      const e6 = g3 ? l3(g3) : r2(l4(o2(d5, y6)));
      x3.aggregateGeometries = { x: e6[0], y: e6[1], spatialReference: d5 }, x3.outStatisticFieldName = u6 || "centroid";
    } else "ConvexHullAggregate" === l7 && (x3.aggregateGeometries = g3, x3.outStatisticFieldName = u6 || "convexHull");
    return x3;
  }
  _getStatisticValue(e5, t6, i2, s8) {
    const { onStatisticField: a5, statisticType: r5 } = e5;
    let n5 = null;
    n5 = i2?.has(a5) ? i2.get(a5) : Fe(this.fieldsIndex.get(a5)) || this._isAnyDateField(a5) ? f({ values: t6, returnDistinct: s8 }) : p({ values: s8 ? [...new Set(t6)] : t6, minValue: null, maxValue: null, useSampleStdDev: true }), i2 && i2.set(a5, n5);
    return n5["var" === r5 ? "variance" : r5];
  }
  _getPercentileValue(e5, t6) {
    const { onStatisticField: i2, statisticParameters: s8, statisticType: a5 } = e5, { value: r5, orderBy: n5 } = s8, o2 = this.fieldsIndex.get(i2);
    return v2(t6, { value: r5, orderBy: n5, fieldType: o2?.type, isDiscrete: "percentile_disc" === a5 });
  }
  _getAttributeValues(e5, t6, i2, s8) {
    if (s8.has(t6)) return s8.get(t6);
    const a5 = this.fieldsIndex.get(t6), r5 = i2.map((i3) => e5.getFieldValue(i3, t6, a5));
    return s8.set(t6, r5), r5;
  }
  _calculateUniqueValues(e5, t6, i2) {
    const s8 = {}, a5 = t6.length;
    for (let r5 = 0; r5 < a5; r5++) {
      const a6 = t6[r5], n5 = [];
      for (const t7 of e5) n5.push(t7[r5]);
      const o2 = n5.join(",");
      null == s8[o2] ? s8[o2] = { count: 1, data: n5, items: [a6], itemPositions: [r5] } : (i2 || s8[o2].count++, s8[o2].items.push(a6), s8[o2].itemPositions.push(r5));
    }
    return s8;
  }
  async _getDataValues(t6, i2, s8 = true) {
    const a5 = new c2(this.query, this.featureAdapter, this.fieldsIndex), { valueExpression: r5, scale: n5, timeZone: o2 } = t6;
    return r5 ? a5.getExpressionValues(i2, r5, { viewingMode: "map", scale: n5, spatialReference: this.query.outSR || this.spatialReference }, { geometryType: this.geometryType, hasZ: this.hasZ, hasM: this.hasM }, o2) : a5.getDataValues(i2, a(t6), s8);
  }
  async _calculateHistogramBins(e5, t6, i2) {
    if (null == t6.min && null == t6.max) return [];
    const s8 = t6.intervals, a5 = t6.min ?? 0, r5 = t6.max ?? 0, n5 = s8.map(([e6, t7]) => ({ minValue: e6, maxValue: t7, count: 0, items: [] }));
    for (let o2 = 0; o2 < e5.length; o2++) {
      const t7 = e5[o2], l7 = i2[o2];
      if (null != t7 && t7 >= a5 && t7 <= r5) {
        const e6 = L2(s8, t7);
        e6 > -1 && (n5[e6].count++, n5[e6].items.push(l7));
      }
    }
    return n5;
  }
  async createQueryBinsResponse(e5) {
    const t6 = e5.bin?.splitBy;
    if (!t6) return this._createBinsResponse(e5);
    const { value: i2, outAlias: s8, valueType: a5 } = t6, r5 = [], n5 = [{ name: s8 ?? i2, alias: s8 ?? i2, type: a5 ?? "esriFieldTypeString" }, { name: E2, alias: E2, type: "esriFieldTypeInteger" }], o2 = new c2(e5, this.featureAdapter, this.fieldsIndex), u6 = /* @__PURE__ */ new Map(), c4 = [...this.items];
    this._sortFeatures(c4, [i2], (e6, t7, i3) => o2.getFieldValue(e6, t7, i3));
    const m8 = this._getAttributeValues(o2, i2, c4, u6), d5 = this._calculateUniqueValues([m8], c4, o2.returnDistinctValues);
    for (const l7 in d5) {
      const { items: t7 } = d5[l7], a6 = await this._createBinsResponse(e5, t7);
      if (r5.push(...a6.features.map((e6) => ({ ...e6, attributes: { ...e6.attributes, [s8 ?? i2]: l7 } }))), a6.fields) for (const e6 of a6.fields) n5.some((t8) => t8.name === e6.name) || n5.push(e6);
    }
    return { fields: n5, features: r5 };
  }
  async _createBinsResponse(e5, t6) {
    const i2 = e5.bin;
    switch (t6 = t6 ?? this.items, i2.type) {
      case "autoIntervalBin":
        return this._createAutoIntervalBinsResponse(m3.fromJSON(i2), e5, t6);
      case "dateBin":
        return this._createDateBinsResponse(m4.fromJSON(i2), e5, t6);
      case "fixedBoundariesBin":
        return this._createFixedBoundariesBinsResponse(n2.fromJSON(i2), e5, t6);
      case "fixedIntervalBin":
        return this._createFixedIntervalBinsResponse(m5.fromJSON(i2), e5, t6);
    }
  }
  async _createAutoIntervalBinsResponse(e5, t6, i2) {
    const { field: s8, normalizationField: a5, numBins: r5, normalizationType: n5, normalizationTotal: o2, start: l7, end: u6 } = e5, c4 = await this._getDataValues({ field: e5.field, normalizationField: e5.normalizationField, normalizationType: e5.normalizationType, normalizationTotal: e5.normalizationTotal, timeZone: t6.outTimeReference?.ianaTimeZone }, i2), m8 = G(c4, { field: s8, normalizationField: a5, normalizationType: n5, normalizationTotal: o2, numBins: r5, minValue: h(l7, false), maxValue: h(u6, false) }), d5 = await this._calculateHistogramBins(c4, m8, i2);
    return this._createFeaturesFromHistogramBins(d5, t6);
  }
  async _createDateBinsResponse(e5, t6, i2) {
    const { field: s8, interval: a5, start: r5, end: n5, snapToData: o2, returnFullIntervalBin: l7 } = e5, u6 = a5.unit, c4 = await this._getDataValues({ field: e5.field, timeZone: t6.outTimeReference?.ianaTimeZone }, i2), m8 = Te(this.fieldsIndex.get(s8)), d5 = s5.toJSON(u6), h4 = c4.filter(Boolean).sort((e6, t7) => e6 - t7), p4 = null != r5 ? h(r5, m8) : h4[0], y6 = null != n5 ? h(n5, m8) : h4[h4.length - 1], g3 = { zone: t6.outTimeReference?.ianaTimeZone ?? n }, x3 = DateTime.fromMillis(p4, g3), T2 = DateTime.fromMillis(y6, g3), F2 = [];
    if ("last" === o2) {
      let e6 = T2;
      for (; e6 > x3; ) {
        const t7 = e6.minus({ [d5]: a5.value });
        if (t7 < x3) {
          F2.unshift([l7 ? t7.toMillis() : x3.toMillis(), e6.toMillis()]);
          break;
        }
        F2.unshift([t7.toMillis(), e6.toMillis()]), e6 = t7;
      }
    } else {
      let e6 = "first" === o2 ? x3 : x3.startOf(d5);
      for (; e6 <= T2; ) {
        const t7 = e6.plus({ [d5]: a5.value });
        if (t7 > T2) {
          F2.push([e6.toMillis(), l7 ? t7.toMillis() : T2.toMillis()]);
          break;
        }
        F2.push([e6.toMillis(), t7.toMillis()]), e6 = t7;
      }
    }
    const _ = await this._calculateHistogramBins(c4, { intervals: F2, min: p4, max: y6 }, i2);
    return this._createFeaturesFromHistogramBins(_, t6);
  }
  async _createFixedBoundariesBinsResponse(e5, t6, i2) {
    const { field: s8 } = e5, a5 = await this._getDataValues({ field: s8, timeZone: t6.outTimeReference?.ianaTimeZone }, i2), r5 = Te(this.fieldsIndex.get(s8)), n5 = e5.boundaries.map((e6) => h(e6, r5)).sort((e6, t7) => e6 - t7), o2 = [];
    for (let c4 = 0; c4 < n5.length - 1; c4++) o2.push([n5[c4], n5[c4 + 1]]);
    const l7 = { intervals: o2, min: n5.at(0), max: n5.at(-1) }, u6 = await this._calculateHistogramBins(a5, l7, i2);
    return this._createFeaturesFromHistogramBins(u6, t6);
  }
  async _createFixedIntervalBinsResponse(e5, t6, i2) {
    const { field: s8, interval: a5, start: r5, end: n5 } = e5, o2 = await this._getDataValues({ field: e5.field, normalizationField: e5.normalizationField, normalizationType: e5.normalizationType, normalizationTotal: e5.normalizationTotal, timeZone: t6.outTimeReference?.ianaTimeZone }, i2), l7 = Te(this.fieldsIndex.get(s8)), u6 = G(o2, { field: s8, classificationMethod: "defined-interval", definedInterval: a5, minValue: h(r5, l7), maxValue: h(n5, l7) }, true), c4 = await this._calculateHistogramBins(o2, u6, i2);
    return this._createFeaturesFromHistogramBins(c4, t6);
  }
  async _createFeaturesFromHistogramBins(e5, t6) {
    const { upperBoundaryAlias: i2, lowerBoundaryAlias: s8 } = t6, a5 = s8 || "lowerBoundary", r5 = i2 || "upperBoundary", n5 = [], o2 = [{ name: a5, alias: a5, type: "esriFieldTypeDouble" }, { name: r5, alias: r5, type: "esriFieldTypeDouble" }], l7 = t6.bin?.stackBy?.value, u6 = t6.bin?.stackBy?.outAlias;
    l7 && o2.push({ name: E2, alias: E2, type: "esriFieldTypeInteger" }, { name: u6 ?? l7, alias: u6 ?? l7, type: "esriFieldTypeString" });
    let c4 = 0;
    const m8 = "dateBin" === t6.bin.type, d5 = t6.outTimeReference?.ianaTimeZone;
    for (const f4 of e5) {
      const { minValue: e6, maxValue: i3, items: s9 } = f4, h4 = { attributes: {} };
      let p4;
      if (h4.attributes[a5] = m8 && d5 && null != e6 ? DateTime.fromMillis(e6, { zone: d5 }).toISO() : e6, h4.attributes[r5] = m8 && d5 && null != i3 ? DateTime.fromMillis(i3, { zone: d5 }).toISO() : i3, l7 ? (p4 = await this._createStatisticsQueryResponse({ ...t6, groupByFieldsForStatistics: [l7], orderByFields: [l7] }, s9), h4.attributes[E2] = ++c4, "flat" === t6.bin.jsonStyle ? n5.push(...p4.features.map(({ attributes: { EXPR_1: e7, ...t7 }, ...i4 }) => ({ ...i4, attributes: u6 ?? e7 ? { ...t7, [u6 ?? e7]: e7, ...h4.attributes } : { ...t7, ...h4.attributes } }))) : (h4.stackedAttributes = p4.features.map(({ attributes: { EXPR_1: e7, ...t7 } }) => u6 ?? e7 ? { ...t7, [u6 ?? e7]: e7 } : t7), n5.push(h4))) : (t6.bin?.splitBy && (h4.attributes[E2] = ++c4), p4 = await this._createStatisticsQueryResponse(t6, s9, h4), n5.push(h4)), p4.fields) for (const t7 of p4.fields) o2.some((e7) => e7.name === t7.name) || o2.push(t7);
    }
    return "desc" === t6.binOrder && n5.reverse(), { fields: o2, features: n5 };
  }
};
function H(e5, t6, i2, s8) {
  const a5 = s8.x - i2.x, r5 = s8.y - i2.y, n5 = t6.x - i2.x, o2 = t6.y - i2.y, l7 = a5 * a5 + r5 * r5;
  if (0 === l7) return false;
  const u6 = n5 * a5 + o2 * r5, c4 = Math.min(1, Math.max(0, u6 / l7));
  return e5.x = i2.x + a5 * c4, e5.y = i2.y + r5 * c4, true;
}
function Q(e5, t6) {
  return e5 ? t6 ? 4 : 3 : t6 ? 3 : 2;
}
var U2 = class {
  constructor(e5, t6) {
    this.coords = e5, this.coordsIndex = t6;
  }
  get x() {
    return this.coords[this.coordsIndex];
  }
  get y() {
    return this.coords[this.coordsIndex + 1];
  }
  get z() {
    return this.coords[this.coordsIndex + 2];
  }
};
var k3 = [1];

// node_modules/@arcgis/core/layers/graphics/data/queryValidationUtils.js
var u5 = "unsupported-query";
async function p3(t6, i2) {
  const s8 = t6.bin;
  if (!s8.onField && !s8.onExpression?.value || "autoIntervalBin" === s8.type && null == s8.parameters.numberOfBins || "dateBin" === s8.type && (null == s8.parameters.number || null == s8.parameters.unit) || "fixedBoundariesBin" === s8.type && null == s8.parameters.boundaries || "fixedIntervalBin" === s8.type && null == s8.parameters.interval) throw new s(u5, "Unsupported query options", { query: t6 });
  return d4(t6, i2);
}
async function d4(t6, { fieldsIndex: i2, geometryType: s8, spatialReference: r5, availableFields: o2 }) {
  if (null != t6.geometryPrecision || t6.multipatchOption && "xyFootprint" !== t6.multipatchOption || t6.pixelSize || t6.relationParam || t6.text) throw new s(u5, "Unsupported query options", { query: t6 });
  return c3(i2, o2, t6), m7(i2, o2, t6), Promise.all([w3(t6, s8, r5), x(r5, t6.outSR)]).then(() => t6);
}
function c3(s8, r5, o2) {
  const { returnDistinctValues: n5, outStatistics: a5 } = o2, l7 = a5 ? a5.map((e5) => e5.outStatisticFieldName && e5.outStatisticFieldName.toLowerCase()).filter(Boolean) : [];
  if ("orderByFields" in o2 && o2.orderByFields && o2.orderByFields.length > 0) {
    const e5 = " asc", i2 = " desc", n6 = o2.orderByFields.map((t6) => {
      const s9 = t6.toLowerCase();
      return s9.includes(e5) ? s9.split(e5)[0] : s9.includes(i2) ? s9.split(i2)[0] : t6;
    }).filter((e6) => !l7.includes(e6));
    g2(s8, r5, n6, { expressionName: "orderByFields", query: o2 });
  }
  if ("outFields" in o2) {
    if (o2.outFields?.length) g2(s8, r5, o2.outFields, { expressionName: "outFields", query: o2, allowedFieldTypes: "all" });
    else if (n5) throw new s(u5, "outFields should be specified for returnDistinctValues", { query: o2 });
  }
  p2(s8, r5, o2.where, o2);
}
var f3 = /* @__PURE__ */ new Set([...o, ...a4]);
function m7(i2, r5, o2) {
  const { outStatistics: n5, groupByFieldsForStatistics: a5, having: l7 } = o2, p4 = a5?.length, d5 = n5?.length;
  if (l7) {
    if (!p4 || !d5) throw new s(u5, "outStatistics and groupByFieldsForStatistics should be specified with having", { query: o2 });
    f2(i2, r5, l7, n5, o2);
  }
  if (d5) {
    if (!h3(n5)) return;
    const s8 = n5.map((e5) => e5.onStatisticField).filter(Boolean);
    g2(i2, r5, s8, { expressionName: "onStatisticFields", query: o2 }), p4 && g2(i2, r5, a5, { expressionName: "groupByFieldsForStatistics", query: o2 });
    for (const a6 of n5) {
      const { onStatisticField: s9, statisticType: n6 } = a6;
      if (("percentile_disc" === n6 || "percentile_cont" === n6) && "statisticParameters" in a6) {
        const { statisticParameters: t6 } = a6;
        if (!t6) throw new s(u5, "statisticParameters should be set for percentile type", { definition: a6, query: o2 });
      } else i2.get(s9) && "count" !== n6 && "min" !== n6 && "max" !== n6 && g2(i2, r5, [s9], { expressionName: `outStatistics with '${n6}' statistic type`, allowedFieldTypes: f3, query: o2 });
    }
  }
}
async function y5(t6, i2, { fieldsIndex: s8, geometryType: r5, spatialReference: o2, availableFields: l7 }) {
  if (null != t6.geometryPrecision || t6.multipatchOption || t6.pixelSize || t6.relationParam || t6.text || t6.outStatistics || t6.groupByFieldsForStatistics || t6.having || t6.orderByFields) throw new s(u5, "Unsupported query options", { query: t6 });
  return c3(s8, l7, t6), Promise.all([F(s8, l7, i2, t6), w3(t6, r5, o2), x(o2, t6.outSR)]).then(() => t6);
}
async function F(i2, s8, r5, o2) {
  let n5 = [];
  if (r5.valueExpression) {
    const { arcadeUtils: e5 } = await e3();
    n5 = e5.extractFieldNames(r5.valueExpression);
  }
  if (r5.field && n5.push(r5.field), r5.field2 && n5.push(r5.field2), r5.field3 && n5.push(r5.field3), r5.normalizationField && n5.push(r5.normalizationField), !n5.length && !r5.valueExpression) throw new s(u5, "field or valueExpression is required", { params: r5 });
  g2(i2, s8, n5, { expressionName: "statistics", query: o2 });
}
function h3(e5) {
  return null != e5 && e5.every((e6) => "exceedslimit" !== e6.statisticType);
}

// node_modules/@arcgis/core/layers/graphics/data/QueryEngine.js
var N2 = "unsupported-query";
var L3 = class {
  constructor(e5) {
    this._changeHandle = null, this.capabilities = { query: t2 }, this.geometryType = e5.geometryType, this.hasM = !!e5.hasM, this.hasZ = !!e5.hasZ, this.spatialReference = e5.spatialReference, this.definitionExpression = e5.definitionExpression, this.featureStore = e5.featureStore, this.aggregateAdapter = e5.aggregateAdapter, this._cache = e5.cache ?? new e4(), this.timeInfo = e5.timeInfo, this.featureIdInfo = e5.featureIdInfo, "object-id" === e5.featureIdInfo.type && (this.objectIdField = e5.featureIdInfo.fieldName), this._changeHandle = this.featureStore.events.on("changed", () => this._clearCache()), this.fieldsIndex = t(e5.fieldsIndex) ? e5.fieldsIndex : Z2.fromJSON(e5.fieldsIndex), !e5.availableFields || 1 === e5.availableFields.length && "*" === e5.availableFields[0] ? this.availableFields = new Set(this.fieldsIndex.fields.map((e6) => e6.name)) : this.availableFields = new Set(e5.availableFields.map((e6) => this.fieldsIndex.get(e6)?.name).filter((e6) => null != e6)), e5.scheduler && e5.priority && (this._frameTask = e5.scheduler.registerTask(e5.priority));
  }
  destroy() {
    this._changeHandle = l(this._changeHandle), this._frameTask = l(this._frameTask), this._clearCache(), u(this._cache);
  }
  get featureAdapter() {
    return this.featureStore.featureAdapter;
  }
  _clearCache() {
    this._cache.clear(), this._allFeaturesPromise = null, this._timeExtentPromise = null, this._fullExtentPromise = null;
  }
  async executeQuery(e5, t6) {
    const s8 = l2(t6);
    try {
      const t7 = await this._executeQuery(e5, {}, s8);
      return await t7.createQueryResponse();
    } catch (i2) {
      if (i2 !== S) throw i2;
      return new O([], e5, this).createQueryResponse();
    }
  }
  async executeQueryForCount(e5 = {}, t6) {
    const s8 = l2(t6);
    try {
      return (await this._executeQuery(e5, { returnGeometry: false, returnCentroid: false, outSR: null }, s8)).createQueryResponseForCount();
    } catch (i2) {
      if (i2 !== S) throw i2;
      return 0;
    }
  }
  async executeQueryForExtent(e5, t6) {
    const s8 = l2(t6), i2 = e5.outSR;
    try {
      const t7 = await this._executeQuery(e5, { returnGeometry: true, returnCentroid: false, outSR: null }, s8), r5 = t7.size;
      if (!r5) return { count: 0, extent: null };
      return { count: r5, extent: await this._getBounds(t7.items, t7.spatialReference, i2 || this.spatialReference) };
    } catch (r5) {
      if (r5 === S) return { count: 0, extent: null };
      throw r5;
    }
  }
  async executeQueryForIds(e5, t6) {
    return this.executeQueryForIdSet(e5, t6).then((e6) => Array.from(e6));
  }
  async executeQueryForIdSet(e5, t6) {
    const s8 = l2(t6);
    try {
      const t7 = await this._executeQuery(e5, { returnGeometry: true, returnCentroid: false, outSR: null }, s8), i2 = t7.items, r5 = /* @__PURE__ */ new Set();
      return await this.reschedule(() => {
        for (const e6 of i2) r5.add(t7.featureAdapter.getObjectId(e6));
      }, s8), r5;
    } catch (i2) {
      if (i2 === S) return /* @__PURE__ */ new Set();
      throw i2;
    }
  }
  async executeQueryForLatestObservations(e5, t6) {
    const s8 = l2(t6);
    if (!this.timeInfo?.trackIdField) throw new s(N2, "Missing timeInfo or timeInfo.trackIdField", { query: e5, timeInfo: this.timeInfo });
    try {
      const t7 = await this._executeQuery(e5, {}, s8);
      return await this.reschedule(() => this._filterLatest(t7), s8), await t7.createQueryResponse();
    } catch (r5) {
      if (r5 !== S) throw r5;
      return new O([], e5, this).createQueryResponse();
    }
  }
  async executeAttributeBinsQuery(e5, t6) {
    const s8 = l2(t6);
    let i2;
    e5 = a(e5);
    try {
      e5 = await this.schedule(() => w2(e5, this.definitionExpression, this.spatialReference), s8), e5 = await this.reschedule(() => p3(e5, { availableFields: this.availableFields, fieldsIndex: this.fieldsIndex, geometryType: this.geometryType, spatialReference: this.spatialReference }), s8);
      const t7 = await this.reschedule(() => this._executeSceneFilterQuery(e5, s8), s8);
      i2 = await this.reschedule(() => this._executeGeometryQuery(e5, t7, s8), s8), await this.reschedule(() => this._executeAggregateIdsQuery(i2), s8), await this.reschedule(() => this.executeObjectIdsQuery(i2), s8), await this.reschedule(() => this.executeTimeQuery(i2), s8), await this.reschedule(() => this.executeAttributesQuery(i2), s8);
    } catch (a5) {
      if (a5 !== S) throw a5;
      i2 = new O([], e5, this);
    }
    return i2.createQueryBinsResponse(e5);
  }
  async executeQueryForSummaryStatistics(e5 = {}, t6, s8) {
    const i2 = l2(s8), { field: r5, normalizationField: a5, valueExpression: n5 } = t6;
    return (await this._executeQueryForStatistics(e5, { field: r5, normalizationField: a5, valueExpression: n5 }, i2)).createSummaryStatisticsResponse(t6);
  }
  async executeQueryForUniqueValues(e5 = {}, t6, s8) {
    const i2 = l2(s8), { field: r5, field2: a5, field3: n5, valueExpression: l7 } = t6;
    return (await this._executeQueryForStatistics(e5, { field: r5, field2: a5, field3: n5, valueExpression: l7 }, i2)).createUniqueValuesResponse(t6);
  }
  async executeQueryForClassBreaks(e5 = {}, t6, s8) {
    const i2 = l2(s8), { field: r5, normalizationField: a5, valueExpression: n5 } = t6;
    return (await this._executeQueryForStatistics(e5, { field: r5, normalizationField: a5, valueExpression: n5 }, i2)).createClassBreaksResponse(t6);
  }
  async executeQueryForHistogram(e5 = {}, t6, s8) {
    const i2 = l2(s8), { field: r5, normalizationField: a5, valueExpression: n5 } = t6;
    return (await this._executeQueryForStatistics(e5, { field: r5, normalizationField: a5, valueExpression: n5 }, i2)).createHistogramResponse(t6);
  }
  async fetchRecomputedExtents(e5) {
    const t6 = l2(e5);
    this._timeExtentPromise ||= n3(this.timeInfo, this.featureStore);
    const [s8, i2] = await Promise.all([this._getFullExtent(), this._timeExtentPromise]);
    return s2(t6), { fullExtent: s8, timeExtent: i2 };
  }
  async _getBounds(e5, t6, s8) {
    const i2 = k(u3(), L);
    await this.featureStore.forEachBounds(e5, (e6) => M(i2, e6));
    const r5 = { xmin: i2[0], ymin: i2[1], xmax: i2[3], ymax: i2[4], spatialReference: h2(this.spatialReference) };
    this.hasZ && isFinite(i2[2]) && isFinite(i2[5]) && (r5.zmin = i2[2], r5.zmax = i2[5], r5.hasZ = true);
    const a5 = j(r5, t6, s8);
    if (a5.spatialReference = h2(s8), a5.xmax - a5.xmin === 0) {
      const e6 = Z(a5.spatialReference);
      a5.xmin -= e6, a5.xmax += e6;
    }
    if (a5.ymax - a5.ymin === 0) {
      const e6 = Z(a5.spatialReference);
      a5.ymin -= e6, a5.ymax += e6;
    }
    if (this.hasZ && null != a5.zmin && null != a5.zmax && a5.zmax - a5.zmin === 0) {
      const e6 = Z(a5.spatialReference);
      a5.zmin -= e6, a5.zmax += e6;
    }
    return a5;
  }
  _getFullExtent() {
    return this._fullExtentPromise ||= "getFullExtent" in this.featureStore && this.featureStore.getFullExtent ? Promise.resolve(this.featureStore.getFullExtent(this.spatialReference)) : this._getAllFeatures().then((e5) => this._getBounds(e5, this.spatialReference, this.spatialReference)), this._fullExtentPromise;
  }
  async schedule(e5, t6) {
    return this._frameTask?.schedule(e5, t6) ?? e5(C2);
  }
  async reschedule(e5, t6) {
    return this._frameTask?.reschedule(e5, t6) ?? e5(C2);
  }
  async _getAllFeaturesQueryEngineResult(e5) {
    return new O(await this._getAllFeatures(), e5, this);
  }
  async _getAllFeatures() {
    if (null == this._allFeaturesPromise) {
      const e6 = [];
      this._allFeaturesPromise = (async () => await this.featureStore.forEach((t7) => e6.push(t7)))().then(() => r(e6));
    }
    const e5 = this._allFeaturesPromise, t6 = await e5;
    return e5 === this._allFeaturesPromise ? t6.slice() : this._getAllFeatures();
  }
  async _executeQuery(e5, t6, s8) {
    e5 = a(e5), e5 = await this.schedule(() => x2(e5, this.definitionExpression, this.spatialReference), s8), e5 = await this.reschedule(() => d4(e5, { availableFields: this.availableFields, fieldsIndex: this.fieldsIndex, geometryType: this.geometryType, spatialReference: this.spatialReference }), s8), e5 = { ...e5, ...t6 };
    const i2 = await this.reschedule(() => this._executeSceneFilterQuery(e5, s8), s8), a5 = await this.reschedule(() => this._executeGeometryQuery(e5, i2, s8), s8);
    return await this.reschedule(() => this._executeAggregateIdsQuery(a5), s8), await this.reschedule(() => this.executeObjectIdsQuery(a5), s8), await this.reschedule(() => this.executeTimeQuery(a5), s8), await this.reschedule(() => this.executeAttributesQuery(a5), s8), a5;
  }
  async _executeSceneFilterQuery(e5, t6) {
    if (null == e5.sceneFilter) return null;
    const { outSR: s8, returnGeometry: i2, returnCentroid: r5 } = e5, a5 = this.featureStore.featureSpatialReference, n5 = e5.sceneFilter.geometry, u6 = null == a5 || s3(a5, n5.spatialReference) ? n5 : j(n5, a5);
    if (!u6) return null;
    const l7 = i2 || r5, o2 = N(s8) && !s3(this.spatialReference, s8) && l7 ? async (e6) => this._project(e6, s8) : (e6) => e6, h4 = this.featureAdapter, c4 = await this.reschedule(() => this.searchFeatures(V(u6)), t6);
    if ("disjoint" === e5.sceneFilter.spatialRelationship) {
      if (!c4.length) return null;
      const s9 = /* @__PURE__ */ new Set();
      for (const e6 of c4) s9.add(h4.getObjectId(e6));
      const i3 = await this.reschedule(() => this._getAllFeatures(), t6), r6 = await this.reschedule(async () => {
        const r7 = await I("esriSpatialRelDisjoint", u6, this.geometryType, this.hasZ, this.hasM), a6 = (e6) => !s9.has(h4.getObjectId(e6)) || r7(h4.getGeometry(e6)), n6 = await this.runSpatialFilter(i3, a6, t6);
        return new O(n6, e5, this);
      }, t6);
      return o2(r6);
    }
    if (!c4.length) return new O([], e5, this);
    if (this._canExecuteSinglePass(u6, e5)) return o2(new O(c4, e5, this));
    const m8 = await I("esriSpatialRelContains", u6, this.geometryType, this.hasZ, this.hasM), f4 = await this.runSpatialFilter(c4, (e6) => m8(h4.getGeometry(e6)), t6);
    return o2(new O(f4, e5, this));
  }
  async _executeGeometryQuery(s8, i2, r5) {
    if (null != i2 && 0 === i2.items.length) return i2;
    const { geometry: a5, outSR: n5, returnGeometry: u6, returnCentroid: l7 } = s8, o2 = i2 ? null : this._getCacheKey(s8), h4 = o2 ? this._cache.get(o2) : null;
    if (h4) return new O(h4, s8, this);
    const c4 = N(n5) && !s3(this.spatialReference, n5), m8 = u6 || l7, f4 = async (e5) => (c4 && m8 && await this._project(e5, n5), o2 && this._cache.put(o2, e5.items), e5), d5 = this.featureStore.featureSpatialReference, y6 = !a5 || null == d5 || s3(d5, a5.spatialReference) ? a5 : j(a5, d5);
    if (!y6) return f4(null != i2 ? i2 : await this._getAllFeaturesQueryEngineResult(s8));
    const p4 = this.featureAdapter;
    let g3 = await this.reschedule(() => this.searchFeatures(V(a5)), r5);
    const x3 = s8.spatialRel ?? "esriSpatialRelIntersects";
    if ("esriSpatialRelDisjoint" === x3) {
      if (!g3.length) return f4(null != i2 ? i2 : await this._getAllFeaturesQueryEngineResult(s8));
      const e5 = /* @__PURE__ */ new Set();
      for (const s9 of g3) e5.add(p4.getObjectId(s9));
      const t6 = null != i2 ? i2.items : await this.reschedule(() => this._getAllFeatures(), r5), a6 = await this.reschedule(async () => {
        const i3 = await I(x3, y6, this.geometryType, this.hasZ, this.hasM), a7 = (t7) => !e5.has(p4.getObjectId(t7)) || i3(p4.getGeometry(t7)), n6 = await this.runSpatialFilter(t6, a7, r5);
        return new O(n6, s8, this);
      }, r5);
      return f4(a6);
    }
    if (null != i2) {
      const s9 = new w();
      g3 = g3.filter((t6) => y(i2.items, t6, i2.items.length, s9) >= 0);
    }
    if (!g3.length) {
      const e5 = new O([], s8, this);
      return o2 && this._cache.put(o2, e5.items), e5;
    }
    if (this._canExecuteSinglePass(y6, s8)) return f4(new O(g3, s8, this));
    const w4 = await I(x3, y6, this.geometryType, this.hasZ, this.hasM), F2 = await this.runSpatialFilter(g3, (e5) => w4(p4.getGeometry(e5)), r5);
    return f4(new O(F2, s8, this));
  }
  _executeAggregateIdsQuery(e5) {
    if (0 === e5.items.length || !e5.query.aggregateIds?.length || null == this.aggregateAdapter) return;
    const t6 = /* @__PURE__ */ new Set();
    for (const i2 of e5.query.aggregateIds) {
      this.aggregateAdapter.getFeatureObjectIds(i2).forEach((e6) => t6.add(e6));
    }
    const s8 = this.featureAdapter.getObjectId;
    e5.items = e5.items.filter((e6) => t6.has(s8(e6)));
  }
  executeObjectIdsQuery(e5) {
    if (0 === e5.items.length || !e5.query.objectIds?.length) return;
    const t6 = new Set(e5.query.objectIds), s8 = this.featureAdapter.getObjectId;
    e5.items = e5.items.filter((e6) => t6.has(s8(e6)));
  }
  executeTimeQuery(e5) {
    if (0 === e5.items.length) return;
    const t6 = l5(this.timeInfo, e5.query.timeExtent, this.featureAdapter);
    null != t6 && (e5.items = e5.items.filter(t6));
  }
  executeAttributesQuery(e5) {
    if (0 === e5.items.length) return;
    const t6 = c(e5.query.where, this.fieldsIndex);
    if (t6) {
      if (!t6.isStandardized) throw new TypeError("Where clause is not standardized");
      e5.items = e5.items.filter((e6) => t6.testFeature(e6, this.featureAdapter));
    }
  }
  async runSpatialFilter(e5, t6, s8) {
    if (!t6) return e5;
    if (null == this._frameTask) return e5.filter((e6) => t6(e6));
    let i2 = 0;
    const r5 = new Array(), a5 = async (n5) => {
      for (; i2 < e5.length; ) {
        const u6 = e5[i2++];
        t6(u6) && (r5.push(u6), n5.madeProgress()), n5.done && await this.reschedule((e6) => a5(e6), s8);
      }
    };
    return this.reschedule((e6) => a5(e6), s8).then(() => r5);
  }
  _filterLatest(e5) {
    const { trackIdField: t6, startTimeField: s8, endTimeField: i2 } = this.timeInfo, r5 = i2 || s8, a5 = /* @__PURE__ */ new Map(), n5 = this.featureAdapter.getAttribute;
    for (const u6 of e5.items) {
      const e6 = n5(u6, t6), s9 = n5(u6, r5), i3 = a5.get(e6);
      (!i3 || s9 > n5(i3, r5)) && a5.set(e6, u6);
    }
    e5.items = Array.from(a5.values());
  }
  _getCacheKey(e5) {
    const { geometry: t6, spatialRel: s8, returnGeometry: i2, returnCentroid: r5, outSR: a5, resultType: n5, cacheHint: u6 } = e5;
    if ("tile" !== n5 && !u6) return null;
    const l7 = i2 || r5;
    return N(a5) && !s3(this.spatialReference, a5) && l7 ? JSON.stringify([t6, s8, a5]) : JSON.stringify([t6, s8]);
  }
  _canExecuteSinglePass(e5, t6) {
    const { spatialRel: s8 } = t6;
    return d2(e5) && ("esriSpatialRelEnvelopeIntersects" === s8 || "esriGeometryPoint" === this.geometryType && ("esriSpatialRelIntersects" === s8 || "esriSpatialRelContains" === s8));
  }
  async _project(e5, t6) {
    if (!t6 || s3(this.spatialReference, t6)) return e5;
    const i2 = this.featureAdapter;
    let r5;
    try {
      const e6 = await this._getFullExtent();
      r5 = q(this.spatialReference, t6, e6);
    } catch {
    }
    const a5 = await b(e5.items.map((e6) => a3(this.geometryType, this.hasZ, this.hasM, i2.getGeometry(e6))), this.spatialReference, t6, r5);
    return e5.items = r(a5.map((t7, s8) => i2.cloneWithGeometry(e5.items[s8], ut(t7, this.hasZ, this.hasM)))), e5;
  }
  async searchFeatures(e5) {
    const t6 = /* @__PURE__ */ new Set();
    await Promise.all(e5.map((e6) => this.featureStore.forEachInBounds(e6, (e7) => t6.add(e7))));
    const s8 = Array.from(t6.values());
    return t6.clear(), s8;
  }
  async _executeQueryForStatistics(e5, t6, s8) {
    e5 = a(e5);
    try {
      e5 = await this.schedule(() => x2(e5, this.definitionExpression, this.spatialReference), s8), e5 = await this.reschedule(() => y5(e5, t6, { availableFields: this.availableFields, fieldsIndex: this.fieldsIndex, geometryType: this.geometryType, spatialReference: this.spatialReference }), s8);
      const i2 = await this.reschedule(() => this._executeSceneFilterQuery(e5, s8), s8), r5 = await this.reschedule(() => this._executeGeometryQuery(e5, i2, s8), s8);
      return await this.reschedule(() => this._executeAggregateIdsQuery(r5), s8), await this.reschedule(() => this.executeObjectIdsQuery(r5), s8), await this.reschedule(() => this.executeTimeQuery(r5), s8), await this.reschedule(() => this.executeAttributesQuery(r5), s8), r5;
    } catch (i2) {
      if (i2 !== S) throw i2;
      return new O([], e5, this);
    }
  }
  get test() {
  }
};
function V(e5) {
  if (d2(e5)) {
    if (m(e5)) return [e(Math.min(e5.xmin, e5.xmax), Math.min(e5.ymin, e5.ymax), Math.max(e5.xmin, e5.xmax), Math.max(e5.ymin, e5.ymax))];
    if (y2(e5)) return e5.rings.map((e6) => e(Math.min(e6[0][0], e6[2][0]), Math.min(e6[0][1], e6[2][1]), Math.max(e6[0][0], e6[2][0]), Math.max(e6[0][1], e6[2][1])));
  }
  return [a2(u2(), e5)];
}

export {
  O,
  d4 as d,
  L3 as L,
  V
};
//# sourceMappingURL=chunk-P4YXQBLK.js.map
