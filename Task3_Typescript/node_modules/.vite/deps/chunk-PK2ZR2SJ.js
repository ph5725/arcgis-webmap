import {
  r as r2
} from "./chunk-YFPGM5UE.js";
import {
  C,
  O,
  P,
  U,
  Z,
  g,
  h,
  m as m2,
  s,
  te
} from "./chunk-OXSERRAR.js";
import {
  l
} from "./chunk-E3KEUGUG.js";
import {
  b,
  m
} from "./chunk-N3XLUQJI.js";
import {
  a2
} from "./chunk-JUAD7TJ6.js";
import {
  x
} from "./chunk-VHLUKPRH.js";
import {
  r
} from "./chunk-5TPMG26T.js";
import {
  a
} from "./chunk-GWNLQRNM.js";

// node_modules/@arcgis/core/geometry/SpatialReference.js
var S;
var _a;
var f = (_a = class extends l {
  static fromJSON(t) {
    if (!t) return null;
    if (102100 === t?.wkid) return S.WebMercator;
    if (4326 === t?.wkid) return S.WGS84;
    const e = new S();
    return e.read(t), e;
  }
  constructor(t) {
    super(t), this.latestWkid = null, this.wkid = null, this.wkt = null, this.wkt2 = null, this.vcsWkid = null, this.latestVcsWkid = null, this.imageCoordinateSystem = null;
  }
  normalizeCtorArgs(t) {
    if (t && "object" == typeof t) return t;
    const e = "string" == typeof t ? "wkt" : "wkid";
    return { [e]: t };
  }
  get isWGS84() {
    return C(this);
  }
  get isWebMercator() {
    return O(this);
  }
  get isGeographic() {
    return P(this);
  }
  get isWrappable() {
    return g(this);
  }
  get metersPerUnit() {
    return Z(this);
  }
  get unit() {
    return te(this) || (this.isGeographic ? "degrees" : null);
  }
  writeWkt(t, e) {
    this.wkid || (e.wkt = t);
  }
  clone() {
    if (this === S.WGS84) return new S(U);
    if (this === S.WebMercator) return new S(h);
    const t = new S();
    return null != this.wkid ? (t.wkid = this.wkid, null != this.latestWkid && (t.latestWkid = this.latestWkid), null != this.vcsWkid && (t.vcsWkid = this.vcsWkid), null != this.latestVcsWkid && (t.latestVcsWkid = this.latestVcsWkid)) : (null != this.wkt && (t.wkt = this.wkt), null != this.wkt2 && (t.wkt2 = this.wkt2)), this.imageCoordinateSystem && (t.imageCoordinateSystem = a(this.imageCoordinateSystem)), t;
  }
  equals(t) {
    if (null == t) return false;
    if (this.imageCoordinateSystem || t.imageCoordinateSystem) {
      if (null == this.imageCoordinateSystem || null == t.imageCoordinateSystem) return false;
      const { id: e, referenceServiceName: r3 } = t.imageCoordinateSystem, { geodataXform: i } = t.imageCoordinateSystem, s2 = this.imageCoordinateSystem;
      return null == e || i ? JSON.stringify(s2) === JSON.stringify(t.imageCoordinateSystem) : r3 ? s2.id === e && s2.referenceServiceName === r3 : s2.id === e;
    }
    return s(this, t);
  }
  toJSON(t) {
    return this.write(void 0, t);
  }
}, S = _a, _a.GCS_NAD_1927 = null, _a.WGS84 = null, _a.WebMercator = null, _a.PlateCarree = null, _a);
r([m({ readOnly: true })], f.prototype, "isWGS84", null), r([m({ readOnly: true })], f.prototype, "isWebMercator", null), r([m({ readOnly: true })], f.prototype, "isGeographic", null), r([m({ readOnly: true })], f.prototype, "isWrappable", null), r([m({ type: x, json: { write: true } })], f.prototype, "latestWkid", void 0), r([m({ readOnly: true })], f.prototype, "metersPerUnit", null), r([m({ readOnly: true })], f.prototype, "unit", null), r([m({ type: x, json: { write: true, origins: { "web-scene": { write: { overridePolicy() {
  return { isRequired: null == this.wkt };
} } } } } })], f.prototype, "wkid", void 0), r([m({ type: String, json: { origins: { "web-scene": { write: { overridePolicy() {
  return { isRequired: null == this.wkid };
} } } } } })], f.prototype, "wkt", void 0), r([r2("wkt"), r2("web-scene", "wkt")], f.prototype, "writeWkt", null), r([m({ type: String, json: { write: false } })], f.prototype, "wkt2", void 0), r([m({ type: x, json: { write: true } })], f.prototype, "vcsWkid", void 0), r([m({ type: x, json: { write: true } })], f.prototype, "latestVcsWkid", void 0), r([m()], f.prototype, "imageCoordinateSystem", void 0), f = S = r([a2("esri.geometry.SpatialReference")], f), f.prototype.toJSON.isDefaultToJSON = true, f.GCS_NAD_1927 = b.freeze(new f({ wkid: 4267, wkt: 'GEOGCS["GCS_North_American_1927",DATUM["D_North_American_1927",SPHEROID["Clarke_1866",6378206.4,294.9786982]],PRIMEM["Greenwich",0.0],UNIT["Degree",0.0174532925199433]]' })), f.WGS84 = b.freeze(new f(U)), f.WebMercator = b.freeze(new f(h)), f.PlateCarree = b.freeze(new f(m2));

export {
  f
};
//# sourceMappingURL=chunk-PK2ZR2SJ.js.map
