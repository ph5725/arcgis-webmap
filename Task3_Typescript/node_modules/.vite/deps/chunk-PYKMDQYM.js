import {
  l,
  n as n5,
  u
} from "./chunk-4TMVUEZQ.js";
import {
  o as o4,
  s as s3,
  t as t4
} from "./chunk-KCTSIZOP.js";
import {
  n as n4
} from "./chunk-5JV4N5AU.js";
import {
  e as e4
} from "./chunk-XSPND757.js";
import {
  e as e6,
  i as i2,
  o as o3
} from "./chunk-QY6CN52R.js";
import {
  o as o6,
  o2 as o7
} from "./chunk-VT5VIQO4.js";
import {
  m
} from "./chunk-4D63UIH5.js";
import {
  w
} from "./chunk-ENL2JUSP.js";
import {
  e as e3
} from "./chunk-7KQYSRGY.js";
import {
  o as o5
} from "./chunk-SWINDW7X.js";
import {
  e as e5
} from "./chunk-6FK2OY3E.js";
import {
  o as o8
} from "./chunk-US6IOLIT.js";
import {
  s as s2
} from "./chunk-R2Q57RB2.js";
import {
  s
} from "./chunk-PEF2Q5HH.js";
import {
  i
} from "./chunk-A4KKV2O6.js";
import {
  o as o2
} from "./chunk-QXKZRZ4D.js";
import {
  t as t3
} from "./chunk-ILO2YRRS.js";
import {
  n as n3
} from "./chunk-ZPAWXU2P.js";
import {
  e as e2
} from "./chunk-LWV5GP6V.js";
import {
  n as n2,
  t as t2
} from "./chunk-6EOJZ6DP.js";
import {
  e
} from "./chunk-UZRZVWLE.js";
import {
  n
} from "./chunk-VNTS5E5O.js";
import {
  o,
  r as r2
} from "./chunk-TNW4TPNP.js";
import {
  a,
  r
} from "./chunk-7FAVUXK2.js";
import {
  t
} from "./chunk-7HI4VRVW.js";

// node_modules/@arcgis/core/views/3d/webgl-engine/core/shaderLibrary/hud/HUDOcclusionPass.glsl.js
function i3(i4, t5) {
  const { vertex: s4, fragment: p } = i4;
  i4.include(i2, t5), s4.include(l), s4.main.add(n2`vec4 posProjCenter;
if (dot(position, position) > 0.0) {
ProjectHUDAux projectAux;
vec4 posProj = projectPositionHUD(projectAux);
posProjCenter = alignToPixelCenter(posProj, viewport.zw);
forwardViewPosDepth(projectAux.posView);
vec3 vpos = projectAux.posModel;
if (rejectBySlice(vpos)) {
posProjCenter = vec4(1e038, 1e038, 1e038, 1.0);
}
} else {
posProjCenter = vec4(1e038, 1e038, 1e038, 1.0);
}
gl_Position = posProjCenter;
gl_PointSize = 1.0;`), p.main.add(n2`fragColor = vec4(1);
if(discardByTerrainDepth()) {
fragColor.g = 0.5;
}`);
}

// node_modules/@arcgis/core/chunks/HUDMaterial.glsl.js
function B(e7) {
  const i4 = new i(), { signedDistanceFieldEnabled: B2, occlusionTestEnabled: H2, horizonCullingEnabled: V2, pixelSnappingEnabled: _2, hasScreenSizePerspective: q, debugDrawLabelBorder: k, vvSize: G, vvColor: N, hasRotation: Z, occludedFragmentFade: J, sampleSignedDistanceFieldTexelCenter: K } = e7;
  i4.include(u, e7), i4.vertex.include(m, e7);
  const { occlusionPass: Q, output: W, oitPass: X } = e7;
  if (Q) return i4.include(i3, e7), i4;
  const { vertex: Y, fragment: ee } = i4;
  i4.include(s3), i4.include(n4, e7), i4.include(e4, e7), H2 && i4.include(n5), ee.include(t3), ee.include(e6), i4.varyings.add("vcolor", "vec4"), i4.varyings.add("vtc", "vec2"), i4.varyings.add("vsize", "vec2");
  const oe = W === n3.Highlight, ie = oe && H2;
  ie && i4.varyings.add("voccluded", "float"), Y.uniforms.add(new o8("viewport", (e8) => e8.camera.fullViewport), new e5("screenOffset", (e8, i5) => o(R, 2 * e8.screenOffset[0] * i5.camera.pixelRatio, 2 * e8.screenOffset[1] * i5.camera.pixelRatio)), new e5("anchorPosition", (e8) => M(e8)), new e3("materialColor", (e8) => e8.color), new s("materialRotation", (e8) => e8.rotation), new s2("tex", (e8) => e8.texture)), w(Y), B2 && (Y.uniforms.add(new e3("outlineColor", (e8) => e8.outlineColor)), ee.uniforms.add(new e3("outlineColor", (e8) => U(e8) ? e8.outlineColor : a), new s("outlineSize", (e8) => U(e8) ? e8.outlineSize : 0))), V2 && Y.uniforms.add(new o2("pointDistanceSphere", (e8, o9) => {
    const i5 = o9.camera.eye, r3 = e8.origin;
    return r(r3[0] - i5[0], r3[1] - i5[1], r3[2] - i5[2], t.radius);
  })), _2 && Y.include(l), q && (t4(Y), o4(Y)), k && i4.varyings.add("debugBorderCoords", "vec4"), i4.attributes.add(e.UVI, "vec2"), i4.attributes.add(e.COLOR, "vec4"), i4.attributes.add(e.SIZE, "vec2"), i4.attributes.add(e.ROTATION, "float"), (G || N) && i4.attributes.add(e.FEATUREATTRIBUTE, "vec4"), Y.code.add(V2 ? n2`bool behindHorizon(vec3 posModel) {
vec3 camToEarthCenter = pointDistanceSphere.xyz - localOrigin;
vec3 camToPos = pointDistanceSphere.xyz + posModel;
float earthRadius = pointDistanceSphere.w;
float a = dot(camToPos, camToPos);
float b = dot(camToPos, camToEarthCenter);
float c = dot(camToEarthCenter, camToEarthCenter) - earthRadius * earthRadius;
return b > 0.0 && b < a && b * b  > a * c;
}` : n2`bool behindHorizon(vec3 posModel) { return false; }`), Y.main.add(n2`
    ProjectHUDAux projectAux;
    vec4 posProj = projectPositionHUD(projectAux);
    forwardObjectAndLayerIdColor();

    if (rejectBySlice(projectAux.posModel)) {
      // Project outside of clip plane
      gl_Position = vec4(1e038, 1e038, 1e038, 1.0);
      return;
    }

    if (behindHorizon(projectAux.posModel)) {
      // Project outside of clip plane
      gl_Position = vec4(1e038, 1e038, 1e038, 1.0);
      return;
    }

    vec2 inputSize;
    ${t2(q, n2`
        inputSize = screenSizePerspectiveScaleVec2(size, projectAux.absCosAngle, projectAux.distanceToCamera, screenSizePerspective);
        vec2 screenOffsetScaled = screenSizePerspectiveScaleVec2(screenOffset, projectAux.absCosAngle, projectAux.distanceToCamera, screenSizePerspectiveAlignment);`, n2`
        inputSize = size;
        vec2 screenOffsetScaled = screenOffset;`)}
    ${t2(G, n2`inputSize *= vvScale(featureAttribute).xx;`)}

    vec2 combinedSize = inputSize * pixelRatio;
    vec4 quadOffset = vec4(0.0);

    ${t2(H2, n2`
    bool visible = testHUDVisibility(posProj);
    if (!visible) {
      vtc = vec2(0.0);
      ${t2(k, "debugBorderCoords = vec4(0.5, 0.5, 1.5 / combinedSize);")}
      return;
    }`)}
    ${t2(ie, n2`voccluded = visible ? 0.0 : 1.0;`)}
  `);
  const re = n2`
      vec2 uvi1 = vec2(uvi.x < 0.0 ? 1.0 : 0.0, uvi.y < 0.0 ? 1.0 : 0.0);
      vec2 uv = abs(uvi + uvi1);
      vec2 texSize = vec2(textureSize(tex, 0));
      uv.x = uv.x >= ${I} ? 1.0 : uv.x / texSize.x;
      uv.y = uv.y >= ${I} ? 1.0 : uv.y / texSize.y;
      quadOffset.xy = (uvi1 - anchorPosition) * 2.0 * combinedSize;

      ${t2(Z, n2`
          float angle = radians(materialRotation + rotation);
          float cosAngle = cos(angle);
          float sinAngle = sin(angle);
          mat2 rotate = mat2(cosAngle, -sinAngle, sinAngle,  cosAngle);

          quadOffset.xy = rotate * quadOffset.xy;
        `)}

      quadOffset.xy = (quadOffset.xy + screenOffsetScaled) / viewport.zw * posProj.w;
  `, te = _2 ? B2 ? n2`posProj = alignToPixelOrigin(posProj, viewport.zw) + quadOffset;` : n2`posProj += quadOffset;
if (inputSize.x == size.x) {
posProj = alignToPixelOrigin(posProj, viewport.zw);
}` : n2`posProj += quadOffset;`;
  Y.main.add(n2`
    ${re}
    ${N ? "vcolor = interpolateVVColor(featureAttribute.y) * materialColor;" : "vcolor = color / 255.0 * materialColor;"}

    ${t2(W === n3.ObjectAndLayerIdColor, n2`vcolor.a = 1.0;`)}

    bool alphaDiscard = vcolor.a < ${n2.float(o7)};
    ${t2(B2, `alphaDiscard = alphaDiscard && outlineColor.a < ${n2.float(o7)};`)}
    if (alphaDiscard) {
      // "early discard" if both symbol color (= fill) and outline color (if applicable) are transparent
      gl_Position = vec4(1e38, 1e38, 1e38, 1.0);
      return;
    } else {
      ${te}
      gl_Position = posProj;
    }

    vtc = uv;

    ${t2(k, n2`debugBorderCoords = vec4(uv01, 1.5 / combinedSize);`)}
    vsize = inputSize;
  `), ee.uniforms.add(new s2("tex", (e8) => e8.texture)), J && !oe && ee.uniforms.add(new o5("depthMap", (e8) => e8.mainDepth), new e2("occludedOpacity", (e8) => e8.hudOccludedFragmentOpacity));
  const le = k ? n2`(isBorder > 0.0 ? 0.0 : ${n2.float(o7)})` : n2.float(o7), ae = n2`
    ${t2(k, n2`float isBorder = float(any(lessThan(debugBorderCoords.xy, debugBorderCoords.zw)) || any(greaterThan(debugBorderCoords.xy, 1.0 - debugBorderCoords.zw)));`)}

    vec2 samplePos = vtc;

    ${t2(K, n2`
      float txSize = float(textureSize(tex, 0).x);
      float texelSize = 1.0 / txSize;

      // Calculate how much we have to add/subtract to/from each texel to reach the size of an onscreen pixel
      vec2 scaleFactor = (vsize - txSize) * texelSize;
      samplePos += (vec2(1.0, -1.0) * texelSize) * scaleFactor;`)}

    ${B2 ? n2`
      vec4 fillPixelColor = vcolor;

      // Get distance and map it into [-0.5, 0.5]
      float d = rgbaTofloat(texture(tex, samplePos)) - 0.5;

      // Distance in output units (i.e. pixels)
      float dist = d * vsize.x;

      // Create smooth transition from the icon into its outline
      float fillAlphaFactor = clamp(0.5 - dist, 0.0, 1.0);
      fillPixelColor.a *= fillAlphaFactor;

      if (outlineSize > 0.25) {
        vec4 outlinePixelColor = outlineColor;
        float clampedOutlineSize = min(outlineSize, 0.5*vsize.x);

        // Create smooth transition around outline
        float outlineAlphaFactor = clamp(0.5 - (abs(dist) - 0.5*clampedOutlineSize), 0.0, 1.0);
        outlinePixelColor.a *= outlineAlphaFactor;

        if (
          outlineAlphaFactor + fillAlphaFactor < ${le} ||
          fillPixelColor.a + outlinePixelColor.a < ${n2.float(o7)}
        ) {
          discard;
        }

        // perform un-premultiplied over operator (see https://en.wikipedia.org/wiki/Alpha_compositing#Description)
        float compositeAlpha = outlinePixelColor.a + fillPixelColor.a * (1.0 - outlinePixelColor.a);
        vec3 compositeColor = vec3(outlinePixelColor) * outlinePixelColor.a +
          vec3(fillPixelColor) * fillPixelColor.a * (1.0 - outlinePixelColor.a);

        ${t2(!oe, n2`fragColor = vec4(compositeColor, compositeAlpha);`)}
      } else {
        if (fillAlphaFactor < ${le}) {
          discard;
        }

        ${t2(!oe, n2`fragColor = premultiplyAlpha(fillPixelColor);`)}
      }

      // visualize SDF:
      // fragColor = vec4(clamp(-dist/vsize.x*2.0, 0.0, 1.0), clamp(dist/vsize.x*2.0, 0.0, 1.0), 0.0, 1.0);
      ` : n2`
          vec4 texColor = texture(tex, samplePos, -0.5);
          if (texColor.a < ${le}) {
            discard;
          }
          ${t2(!oe, n2`fragColor = texColor * premultiplyAlpha(vcolor);`)}
          `}

    ${t2(J && !oe, n2`
        float zSample = texelFetch(depthMap, ivec2(gl_FragCoord.xy), 0).x;
        if (zSample < gl_FragCoord.z) {
          fragColor *= occludedOpacity;
        }
        `)}

    ${t2(!oe && k, n2`fragColor = mix(fragColor, vec4(1.0, 0.0, 1.0, 1.0), isBorder * 0.5);`)}
  `;
  switch (W) {
    case n3.Color:
    case n3.ColorEmission:
      i4.outputs.add("fragColor", "vec4", 0), W === n3.ColorEmission && i4.outputs.add("fragEmission", "vec4", 1), X === o3.ColorAlpha && i4.outputs.add("fragAlpha", "float", W === n3.ColorEmission ? 2 : 1), ee.main.add(n2`
        ${ae}
        ${t2(X === o3.FrontFace, n2`fragColor.rgb /= fragColor.a;`)}
        ${t2(W === n3.ColorEmission, n2`fragEmission = vec4(0.0);`)}
        ${t2(X === o3.ColorAlpha, n2`fragAlpha = fragColor.a;`)}`);
      break;
    case n3.ObjectAndLayerIdColor:
      ee.main.add(n2`
        ${ae}
        outputObjectAndLayerIdColor();`);
      break;
    case n3.Highlight:
      i4.include(o6, e7), ee.main.add(n2`
        ${ae}
        outputHighlight(${t2(ie, n2`voccluded == 1.0`, n2`false`)});`);
  }
  return i4;
}
function U(e7) {
  return e7.outlineColor[3] > 0 && e7.outlineSize > 0;
}
function M(o9) {
  return o9.textureIsSignedDistanceField ? H(o9.anchorPosition, o9.distanceFieldBoundingBox, R) : r2(R, o9.anchorPosition), R;
}
function H(e7, i4, r3) {
  o(r3, e7[0] * (i4[2] - i4[0]) + i4[0], e7[1] * (i4[3] - i4[1]) + i4[1]);
}
var R = n();
var V = 32e3;
var I = n2.float(V);
var _ = Object.freeze(Object.defineProperty({ __proto__: null, build: B, calculateAnchorPosition: M, fullUV: V }, Symbol.toStringTag, { value: "Module" }));

export {
  B,
  M,
  V,
  _
};
//# sourceMappingURL=chunk-PYKMDQYM.js.map
