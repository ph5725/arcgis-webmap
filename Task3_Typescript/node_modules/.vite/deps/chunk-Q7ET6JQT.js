import {
  it
} from "./chunk-4KOJY6ZH.js";
import {
  c,
  i as i2
} from "./chunk-LA7PPTGA.js";
import {
  E as E2,
  e,
  i,
  p
} from "./chunk-VOIQQS36.js";
import {
  b as b2,
  d
} from "./chunk-CWLDBABC.js";
import {
  S,
  b,
  v
} from "./chunk-BGR5EVZD.js";
import {
  E,
  u
} from "./chunk-TMFB3DKM.js";
import {
  l
} from "./chunk-H7XUEHGR.js";
import {
  n
} from "./chunk-RACDQ3AL.js";

// node_modules/@arcgis/core/views/3d/webgl-engine/lib/Intersector.js
var _ = 1e-5;
var g = class {
  constructor(t) {
    this.options = new e(), this._results = new O(), this.transform = new b2(), this.camera = new it(), this.tolerance = _, this.verticalOffset = null, this._ray = b(), this._rayEnd = n(), this._rayBeginTransformed = n(), this._rayEndTransformed = n(), this.viewingMode = t ?? l.Global;
  }
  get results() {
    return this._results;
  }
  get ray() {
    return this._ray;
  }
  get rayBegin() {
    return this._ray.origin;
  }
  get rayEnd() {
    return this._rayEnd;
  }
  reset(t, r, s) {
    this.resetWithRay(S(t, r, this._ray), s);
  }
  resetWithRay(r, s) {
    this.camera = s, r !== this._ray && v(r, this._ray), 0 !== this.options.verticalOffset ? this.viewingMode === l.Local ? this._ray.origin[2] -= this.options.verticalOffset : this.verticalOffset = this.options.verticalOffset : this.verticalOffset = null, u(this._rayEnd, this._ray.origin, this._ray.direction), this._results.init(this._ray);
  }
  intersect(t = null, r, s, i3, e2) {
    this.point = r, this.filterPredicate = i3, this.tolerance = s ?? _;
    const n2 = d(this.verticalOffset);
    if (t && t.length > 0) {
      const r2 = e2 ? (t2) => {
        e2(t2) && this.intersectObject(t2);
      } : (t2) => {
        this.intersectObject(t2);
      };
      for (const s2 of t) {
        const t2 = s2.getSpatialQueryAccelerator?.();
        null != t2 ? (null != n2 ? t2.forEachAlongRayWithVerticalOffset(this._ray.origin, this._ray.direction, r2, n2) : t2.forEachAlongRay(this._ray.origin, this._ray.direction, r2), this.options.selectionMode && this.options.hud && t2.forEachDegenerateObject(r2)) : s2.objects.forEach((t3) => r2(t3));
      }
    }
    this.sortResults();
  }
  intersectObject(t) {
    const s = t.geometries;
    if (!s) return;
    const i3 = t.effectiveTransformation, e2 = d(this.verticalOffset);
    for (const n2 of s) {
      if (!n2.visible) continue;
      const { material: s2, id: a } = n2;
      if (!s2.visible) continue;
      this.transform.setAndInvalidateLazyTransforms(i3, n2.transformation), E(this._rayBeginTransformed, this.rayBegin, this.transform.inverse), E(this._rayEndTransformed, this.rayEnd, this.transform.inverse);
      const o = this.transform.transform;
      null != e2 && (e2.objectTransform = this.transform), s2.intersect(n2, this.transform.transform, this, this._rayBeginTransformed, this._rayEndTransformed, (r, s3, i4, e3) => this.handleObjectIntersection({ object: t, geometryId: a, primitiveIndex: i4 }, r, s3, o, e3));
    }
  }
  handleObjectIntersection(t, r, s, i3, e2) {
    if (r < 0 || null != this.filterPredicate && !this.filterPredicate(this._ray.origin, this._rayEnd, r)) return;
    const n2 = e2 ? this._results.hud : this._results;
    t = e2 ? new i2(t, e2) : t;
    const a = e2 ? (i4) => i4.set(E2.HUD, t, r, s) : (e3) => e3.set(E2.OBJECT, t, r, s, i3);
    if ((null == n2.min.distance || r < n2.min.distance) && a(n2.min), this.options.store !== i.MIN && (null == n2.max.distance || r > n2.max.distance) && a(n2.max), this.options.store === i.ALL) if (e2) {
      const t2 = new c(this._ray);
      a(t2), this._results.hud.all.push(t2);
    } else {
      const t2 = new p(this._ray);
      a(t2), this._results.all.push(t2);
    }
  }
  sortResults(t = this._results.all) {
    t.sort((t2, r) => t2.distance !== r.distance ? (t2.distance ?? 0) - (r.distance ?? 0) : t2.drapedLayerOrder !== r.drapedLayerOrder ? p2(t2.drapedLayerOrder, r.drapedLayerOrder) : p2(t2.renderPriority, r.renderPriority));
  }
};
function p2(t, r) {
  return (r ?? -Number.MAX_VALUE) - (t ?? -Number.MAX_VALUE);
}
var O = class {
  constructor() {
    this.min = new p(b()), this.max = new p(b()), this.hud = { min: new c(b()), max: new c(b()), all: new Array() }, this.ground = new p(b()), this.all = [];
  }
  init(t) {
    this.min.init(t), this.max.init(t), this.ground.init(t), this.all.length = 0, this.hud.min.init(t), this.hud.max.init(t), this.hud.all.length = 0;
  }
};

export {
  g
};
//# sourceMappingURL=chunk-Q7ET6JQT.js.map
