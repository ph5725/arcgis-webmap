import {
  a as a3
} from "./chunk-P3YYANTX.js";
import {
  e
} from "./chunk-IGBV77N3.js";
import {
  s
} from "./chunk-TEXTBDH7.js";
import {
  o
} from "./chunk-YIV2QKTZ.js";
import {
  b,
  m
} from "./chunk-N3XLUQJI.js";
import {
  a2
} from "./chunk-JUAD7TJ6.js";
import {
  r
} from "./chunk-5TPMG26T.js";
import {
  a
} from "./chunk-FGWIXJQY.js";
import {
  L
} from "./chunk-GZ2P4SCJ.js";
import {
  G,
  has
} from "./chunk-FXKORAMT.js";

// node_modules/@arcgis/core/views/2d/engine/transitions/FadeTransition.js
var r2 = class extends b {
  constructor(t) {
    super(t), this.computedOpacity = 1, this.computedVisible = true, this.opacity = 1, this.visible = true, this._fadeOutResolver = null, this._fadeInResolver = null;
  }
  get transitioning() {
    return (this._fadeOutResolver || !this.visible ? 0 : this.opacity) !== this.computedOpacity;
  }
  endTransition() {
    this._fadeInResolver?.(), this._fadeOutResolver?.(), this._fadeInResolver = this._fadeOutResolver = null, this.computedOpacity = this.visible ? this.opacity : 0;
  }
  fadeIn() {
    return this._fadeInResolver || (this.opacity = 1, this.computedOpacity = 0, this._fadeOutResolver?.(), this._fadeOutResolver = null, this._fadeInResolver = L()), this._fadeInResolver.promise;
  }
  fadeOut() {
    return this._fadeOutResolver || (this.opacity = 0, this._fadeInResolver?.(), this._fadeInResolver = null, this._fadeOutResolver = L()), this._fadeOutResolver.promise;
  }
  transitionStep(t, e3) {
    const i = has("mapview-transitions-duration"), s2 = i ? 1 / i : 0;
    if (0 === s2) this.computedOpacity = this.opacity, this.computedVisible = this.visible;
    else {
      const e4 = this._fadeOutResolver || !this.visible ? 0 : this.opacity, i2 = this.computedOpacity;
      if (i2 === e4) this.computedVisible = this.visible;
      else {
        const o2 = t * s2;
        this.computedOpacity = i2 > e4 ? Math.max(e4, i2 - o2) : Math.min(e4, i2 + o2), this.computedVisible = this.computedOpacity > 0;
      }
    }
    this.transitioning || (this._fadeInResolver?.(), this._fadeOutResolver?.(), this._fadeOutResolver = this._fadeInResolver = null);
  }
};
r([m()], r2.prototype, "computedOpacity", void 0), r([m()], r2.prototype, "computedVisible", void 0), r([m()], r2.prototype, "opacity", void 0), r([m()], r2.prototype, "visible", void 0), r([m()], r2.prototype, "transitioning", null), r([m()], r2.prototype, "_fadeOutResolver", void 0), r([m()], r2.prototype, "_fadeInResolver", void 0), r2 = r([a2("esri.views.2d.engine.transitions.FadeTransition")], r2);

// node_modules/@arcgis/core/views/2d/engine/DisplayObject.js
var e2 = class extends o {
  constructor() {
    super(...arguments), this._transitionables = null, this._clips = null, this._fadeTransition = null, this._isReady = false, this._opacity = 1, this.parent = null, this._stage = null, this._visible = true;
  }
  get computedOpacity() {
    return this._fadeTransition?.computedOpacity ?? this.opacity;
  }
  get clips() {
    return this._clips;
  }
  set clips(t) {
    this._clips = t, this.requestRender();
  }
  get fadeTransitionEnabled() {
    return null !== this._fadeTransition;
  }
  set fadeTransitionEnabled(t) {
    !this._fadeTransition && t ? (this._fadeTransition = new r2({ opacity: this.opacity, visible: this.visible }), this.addTransitionable(this._fadeTransition)) : this._fadeTransition && !t && (this.removeTransitionable(this._fadeTransition), this._fadeTransition = null);
  }
  get inFadeTransition() {
    return this._fadeTransition?.transitioning ?? false;
  }
  get isReady() {
    return this._isReady;
  }
  get opacity() {
    return this._opacity;
  }
  set opacity(t) {
    this._opacity !== t && (this._opacity = Math.min(1, Math.max(t, 0)), this._fadeTransition && (this._fadeTransition.opacity = this._opacity), this.requestRender());
  }
  get stage() {
    return this._stage;
  }
  set stage(t) {
    if (this._stage === t) return;
    const i = this._stage;
    this._stage = t, t ? this._stage?.untrashDisplayObject(this) || (this.onAttach(), this.emit("attach")) : i?.trashDisplayObject(this);
  }
  get transforms() {
    return null == this._transforms && (this._transforms = this._createTransforms()), this._transforms;
  }
  get transitioning() {
    return this.isTransitioning();
  }
  get visible() {
    return this._visible;
  }
  set visible(t) {
    this._visible !== t && (this._visible = t, this._fadeTransition && (this._fadeTransition.visible = this._visible), this.requestRender());
  }
  get hasLabels() {
    return false;
  }
  get hasHighlight() {
    return false;
  }
  get hasBlending() {
    return false;
  }
  addTransitionable(t) {
    this._transitionables ??= [], this._transitionables.push(t), this.requestRender();
  }
  removeTransitionable(i) {
    i.endTransition(), this._transitionables && G(this._transitionables, i), this.requestRender();
  }
  fadeIn() {
    this.fadeTransitionEnabled = true;
    const t = this._fadeTransition.fadeIn();
    return this.opacity = 1, this.requestRender(), t;
  }
  fadeOut() {
    this.fadeTransitionEnabled = true;
    const t = this._fadeTransition.fadeOut();
    return this.opacity = 0, this.requestRender(), t;
  }
  endTransitions() {
    if (this._transitionables) {
      for (const t of this._transitionables) t.endTransition();
      this.requestRender();
    }
  }
  beforeRender(t) {
    this.transitionStep(t.deltaTime, t.state.scale), this.setTransform(t.state);
  }
  afterRender(t) {
    this.transitioning && this.requestRender();
  }
  remove() {
    this.parent?.removeChild(this);
  }
  setTransform(t) {
  }
  processRender(t) {
    this.stage && (this._fadeTransition?.computedVisible ?? this.visible) && this.doRender(t);
  }
  requestRender() {
    this.stage && this.stage.requestRender();
  }
  processDetach() {
    this.endTransitions(), this.onDetach(), this.emit("detach");
  }
  isTransitioning() {
    return this._transitionables?.some((t) => t.transitioning) ?? false;
  }
  transitionStep(t, i) {
    if (this._transitionables) for (const s2 of this._transitionables) s2.transitionStep(t, i);
  }
  onAttach() {
  }
  onDetach() {
  }
  doRender(t) {
  }
  ready() {
    this._isReady || (this._isReady = true, this.emit("isReady"), this.requestRender());
  }
};

// node_modules/@arcgis/core/views/2d/engine/Container.js
var n = class extends e2 {
  constructor() {
    super(...arguments), this._childrenSet = /* @__PURE__ */ new Set(), this._needsSort = false, this._children = [], this._childrenObservable = new s(), this._effectView = null, this._highlightGradient = null;
  }
  get blendMode() {
    return this._blendMode;
  }
  set blendMode(e3) {
    this._blendMode = e3, this.requestRender();
  }
  get children() {
    return a(this._childrenObservable), this._children;
  }
  get clips() {
    return this._clips;
  }
  set clips(e3) {
    this._clips = e3, this.children.forEach((t) => t.clips = e3);
  }
  get computedEffects() {
    return this._effectView?.effects ?? null;
  }
  get effect() {
    return this._effectView?.effect ?? "";
  }
  set effect(e3) {
    (this._effectView || e3) && (this._effectView || (this._effectView = new a3(), this.addTransitionable(this._effectView)), this._effectView.effect = e3, this.requestRender());
  }
  get highlightGradient() {
    return this._highlightGradient;
  }
  set highlightGradient(e3) {
    this._highlightGradient = e3, this.requestRender();
  }
  get hasBlending() {
    return !!this.blendMode;
  }
  get hasHighlight() {
    return this.children.some((e3) => e3.hasHighlight);
  }
  get hasLabels() {
    return this.children.some((e3) => e3.hasLabels);
  }
  get requiresDedicatedFBO() {
    return this.children.some((e3) => "blendMode" in e3 && e3.blendMode && "normal" !== e3.blendMode);
  }
  get isReady() {
    return this.children.every((e3) => e3.isReady);
  }
  get sortFunction() {
    return this._sortFunction;
  }
  set sortFunction(e3) {
    this._sortFunction = e3, e3 && (this._needsSort = true);
  }
  doRender(e3) {
    const t = this.createRenderParams(e3), { painter: i } = t;
    i.beforeRenderLayer(t, this._clips?.length ? 255 : 0, this.computedOpacity), this.renderChildren(t), i.afterRenderLayer(t, this.computedOpacity);
  }
  addChild(e3) {
    return this.addChildAt(e3, this.children.length);
  }
  addChildAt(e3, t = this.children.length) {
    if (!e3) return e3;
    if (this.contains(e3)) return e3;
    this._needsSort = true;
    const i = e3.parent;
    return i && i !== this && i.removeChild(e3), t >= this.children.length ? this.children.push(e3) : this.children.splice(t, 0, e3), this._childrenSet.add(e3), e3.parent = this, e3.stage = this.stage, this !== this.stage && (e3.clips = this.clips), this.requestRender(), this._childrenObservable.notify(), e3;
  }
  contains(t) {
    return a(this._childrenObservable), this._childrenSet.has(t);
  }
  removeAllChildren() {
    this._childrenSet.clear(), this._needsSort = true;
    for (const e3 of this.children) this !== this.stage && (e3.clips = null), e3.stage = null, e3.parent = null;
    this.children.length = 0, this._childrenObservable.notify();
  }
  removeChild(e3) {
    return this.contains(e3) ? this.removeChildAt(this.children.indexOf(e3)) : e3;
  }
  removeChildAt(e3) {
    if (e3 < 0 || e3 >= this.children.length) return null;
    this._needsSort = true;
    const t = this.children.splice(e3, 1)[0];
    return this._childrenSet.delete(t), this !== this.stage && (t.clips = null), t.stage = null, t.parent = null, this._childrenObservable.notify(), t;
  }
  beforeRender(e3) {
    super.beforeRender(e3), this.sortFunction && this._needsSort && (this.children.sort(this.sortFunction), this._needsSort = false, this._childrenObservable.notify());
    for (const t of this.children) t.beforeRender(e3);
  }
  afterRender(e3) {
    super.afterRender(e3);
    for (const t of this.children) t.afterRender(e3);
  }
  _createTransforms() {
    return { displayViewScreenMat3: e() };
  }
  onAttach() {
    super.onAttach();
    const e3 = this.stage;
    for (const t of this.children) t.stage = e3;
  }
  onDetach() {
    super.onDetach();
    for (const e3 of this.children) e3.stage = null;
  }
  renderChildren(e3) {
    for (const t of this.children) t.processRender(e3);
  }
  createRenderParams(e3) {
    return { ...e3, requireFBO: this.requiresDedicatedFBO, blendMode: this.blendMode, effects: this.computedEffects, globalOpacity: e3.globalOpacity * this.computedOpacity, inFadeTransition: this.inFadeTransition, highlightGradient: this._highlightGradient || e3.highlightGradient };
  }
  isTransitioning() {
    return super.isTransitioning() || this.children.some((e3) => e3.transitioning);
  }
};

export {
  e2 as e,
  n
};
//# sourceMappingURL=chunk-QARUBZM2.js.map
