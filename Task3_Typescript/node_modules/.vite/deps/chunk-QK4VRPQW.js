import {
  h as h4,
  i as i4,
  m as m4,
  s as s2,
  x as x2
} from "./chunk-23ZUIA4B.js";
import {
  T as T2
} from "./chunk-MEHT6AJM.js";
import {
  p as p4,
  r as r4
} from "./chunk-N6VYJNA5.js";
import {
  A,
  Q,
  V,
  _ as _4,
  ee,
  fe,
  ie,
  oe,
  se,
  ue,
  v as v2
} from "./chunk-Z5EDZREM.js";
import {
  B,
  D as D2,
  N,
  N2 as N3,
  W,
  c,
  h as h3,
  i as i3,
  j as j4,
  l as l5,
  p as p2,
  p2 as p3,
  q,
  te,
  u,
  z as z2
} from "./chunk-TZWHWOLK.js";
import {
  N as N2,
  a2 as a3,
  d2,
  f2,
  g as g3,
  h,
  i as i2,
  p,
  v2 as v,
  w
} from "./chunk-623AYJP2.js";
import {
  _ as _3,
  a as a2,
  h as h2,
  j as j2,
  l as l3
} from "./chunk-U5MPARPW.js";
import {
  D,
  T,
  j as j3,
  l3 as l4,
  u2
} from "./chunk-NXHGFG67.js";
import {
  r as r3
} from "./chunk-3NJEC7QC.js";
import {
  _
} from "./chunk-RD652CDC.js";
import {
  g as g2
} from "./chunk-PVI3IOCA.js";
import {
  j,
  l as l2
} from "./chunk-3ZORAHSR.js";
import {
  g
} from "./chunk-B6C7UPBZ.js";
import {
  y as y2
} from "./chunk-G4PMFSAZ.js";
import {
  r as r2
} from "./chunk-EOMIFMDH.js";
import {
  P
} from "./chunk-52HWRRRQ.js";
import {
  z
} from "./chunk-O5TPFXRT.js";
import {
  _ as _2
} from "./chunk-Q6XRAGMA.js";
import {
  o
} from "./chunk-JUAPMINU.js";
import {
  f
} from "./chunk-PK2ZR2SJ.js";
import {
  d
} from "./chunk-OXSERRAR.js";
import {
  l
} from "./chunk-E3KEUGUG.js";
import {
  m as m2
} from "./chunk-N3XLUQJI.js";
import {
  a2 as a
} from "./chunk-JUAD7TJ6.js";
import {
  m,
  x
} from "./chunk-VHLUKPRH.js";
import {
  r
} from "./chunk-5TPMG26T.js";
import {
  H,
  y2 as y
} from "./chunk-ZWFY3WY5.js";
import {
  m2 as m3
} from "./chunk-GZ2P4SCJ.js";
import {
  i2 as i,
  s
} from "./chunk-XWG6QGFK.js";

// node_modules/@arcgis/core/layers/support/rasterDatasets/BaseRaster.js
var V2 = 8;
var U = 256;
var Q2 = 0;
var $ = class extends l {
  constructor() {
    super(...arguments), this._tileFetchQueue = new _({ concurrency: 32, process: (e2, t2) => this._fetchRawTile(e2.pyramidLevel, e2.row, e2.col, { ...e2.options, signal: t2 }) }), this.datasetName = null, this.datasetFormat = null, this.hasUniqueSourceStorageInfo = true, this.rasterInfo = null, this.ioConfig = { sampling: "closest" };
  }
  normalizeCtorArgs(e2) {
    return e2?.ioConfig && (e2 = { ...e2, ioConfig: { resolution: null, bandIds: null, sampling: "closest", tileInfo: j.create(), ...e2.ioConfig } }), e2;
  }
  get _isGlobalWrappableSource() {
    const { rasterInfo: e2 } = this, t2 = ee(e2.spatialReference);
    return null != t2 && e2.extent.width >= t2 / 2;
  }
  get _hasNoneOrGCSShiftTransform() {
    const { transform: e2 } = this.rasterInfo;
    return null == e2 || "gcs-shift" === e2.type;
  }
  set rasterJobHandler(e2) {
    this._set("rasterJobHandler", e2), r3(this) && this.primaryRasters?.rasters?.forEach((t2) => t2.rasterJobHandler = e2);
  }
  get rasterId() {
    return this.url || "rasterId-" + Q2++;
  }
  set url(e2) {
    this._set("url", y(e2, i.getLogger(this)));
  }
  async open(e2) {
    return this._openPromise ??= v2().then(() => this._open(e2)), this._openPromise;
  }
  async fetchTile(e2, t2, i6, o3 = {}) {
    const r6 = o3.tileInfo || this.rasterInfo.storageInfo.tileInfo, n2 = this.getTileExtentFromTileInfo(e2, t2, i6, r6);
    return o3 = { noClip: true, ...o3 }, this.fetchPixels(n2, r6.size[0], r6.size[1], o3);
  }
  async identify(e2, t2 = {}) {
    e2 = m(_2, e2).clone().normalize();
    const { multidimensionalDefinition: i6, timeExtent: o3 } = t2, { rasterInfo: r6 } = this, { hasMultidimensionalTranspose: n2, multidimensionalInfo: s3 } = r6;
    let { transposedVariableName: l7 } = t2;
    const c3 = null != s3 && n2 && (null != o3 || g3(i6));
    if (c3 && !l7) {
      l7 = null != i6 && i6.length > 0 ? i6[0].variableName ?? void 0 : s3.variables[0].name, t2 = { ...t2, transposedVariableName: l7 };
    }
    t2 = this._getRequestOptionsWithSliceId(t2);
    const { spatialReference: u5, extent: h6 } = r6, { datumTransformation: p6 } = t2;
    let d3 = A(e2, u5, p6);
    if (!h6.intersects(d3)) return { location: d3, value: null };
    if (null != r6.transform) {
      const e3 = r6.transform.inverseTransform(d3);
      if (!r6.nativeExtent.intersects(e3)) return { location: e3, value: null };
      d3 = e3;
    }
    let x3 = 0;
    const y3 = null != l7 && null != s3 && r6.hasMultidimensionalTranspose;
    if (r3(this)) {
      const e3 = this.primaryRasters.rasters[0];
      if (y3) return e3.identify(d3, t2);
      const { pixelSize: o4 } = r6, n3 = 3, s4 = o4.x * n3 / 2, l8 = o4.y * n3 / 2, a4 = new z({ xmin: d3.x - s4, xmax: d3.x + s4, ymin: d3.y - l8, ymax: d3.y + l8, spatialReference: u5 }), c4 = { interpolation: "nearest", multidimensionalDefinition: i6, sliceId: t2.sliceId }, { pixelBlock: m6 } = await e3.fetchPixels(a4, n3, n3, c4), { pixelBlock: h7 } = await this.fetchPixels(a4, n3, n3, c4);
      if (null == m6) return { location: d3, value: null };
      const p7 = Math.floor(n3 * n3 * 0.5), x4 = !m6.mask || m6.mask[p7] ? m6.pixels.map((e4) => e4[p7]) : null;
      let g5;
      return null != h7 && (g5 = !h7.mask || h7.mask[p7] ? h7.pixels.map((e4) => e4[p7]) : void 0), { location: d3, value: x4, processedValue: g5, pyramidLevel: 0 };
    }
    if (!y3) {
      if (t2.srcResolution) {
        x3 = ue(t2.srcResolution, r6, this.ioConfig.sampling).pyramidLevel;
      } else if (x3 = await this.computeBestPyramidLevelForLocation(e2, t2), null == x3) return { location: d3, value: null };
    }
    const g4 = this.identifyPixelLocation(d3, x3, null, y3);
    if (null === g4) return { location: d3, value: null };
    const { row: w2, col: S, rowOffset: k, colOffset: v3, blockWidth: T3 } = g4, b = await this._tileFetchQueue.push({ pyramidLevel: x3, row: w2, col: S, options: t2 }, { signal: t2.signal });
    if (!b?.pixels?.length) return { location: d3, value: null };
    const P2 = k * T3 + v3;
    return this._processIdentifyResult(b, { srcLocation: d3, position: P2, pyramidLevel: x3, useTransposedTile: !!y3, requestSomeSlices: c3, identifyOptions: t2 });
  }
  async fetchPixels(e2, t2, i6, o3 = {}) {
    e2 = fe(e2), o3 = this._getRequestOptionsWithSliceId(o3);
    const { _hasNoneOrGCSShiftTransform: r6 } = this;
    if (o3.requestRawData && r6) return this._fetchPixels(e2, t2, i6, o3);
    const n2 = ee(e2.spatialReference), s3 = oe(e2);
    if (null == n2 || 0 === s3 || 1 === s3 && this._isGlobalWrappableSource && r6) return this._fetchPixels(e2, t2, i6, o3);
    if (s3 >= 3) return { extent: e2, pixelBlock: null };
    const l7 = [], { xmin: a4, xmax: c3 } = e2, m6 = Math.round(n2 / (c3 - a4) * t2), u5 = m6 - Math.round((n2 / 2 - a4) / (c3 - a4) * t2);
    let h6 = 0;
    const p6 = [];
    for (let g4 = 0; g4 <= s3; g4++) {
      const r7 = new z({ xmin: 0 === g4 ? a4 : -n2 / 2, xmax: g4 === s3 ? c3 - n2 * g4 : n2 / 2, ymin: e2.ymin, ymax: e2.ymax, spatialReference: e2.spatialReference }), d4 = 0 === g4 ? m6 - u5 : g4 === s3 ? t2 - h6 : m6;
      h6 += d4, p6.push(d4);
      const x4 = o3.disableWrapAround && g4 > 0 ? null : this._fetchPixels(r7, d4, i6, o3);
      l7.push(x4);
    }
    const d3 = (await Promise.all(l7)).map((e3) => e3?.pixelBlock);
    let x3 = null;
    const y3 = { width: t2, height: i6 };
    if (this.rasterJobHandler) {
      x3 = (await this.rasterJobHandler.mosaicAndTransform({ srcPixelBlocks: d3, srcMosaicSize: y3, destDimension: null, coefs: null, sampleSpacing: null, interpolation: "nearest", alignmentInfo: null, blockWidths: p6 }, o3)).pixelBlock;
    } else x3 = T(d3, y3, { blockWidths: p6 });
    return { extent: e2, srcExtent: Q(e2, this.rasterInfo.spatialReference, o3.datumTransformation), pixelBlock: x3 };
  }
  async fetchRawPixels(e2, t2, i6, o3 = {}) {
    t2 = { x: Math.floor(t2.x), y: Math.floor(t2.y) };
    const r6 = await this._fetchRawTiles(e2, t2, i6, o3), { nativeExtent: n2, nativePixelSize: s3, storageInfo: l7 } = this.rasterInfo, a4 = 2 ** e2, c3 = s3.x * a4, m6 = s3.y * a4, u5 = new z({ xmin: n2.xmin + c3 * t2.x, xmax: n2.xmin + c3 * (t2.x + i6.width - 1), ymin: n2.ymax - m6 * (t2.y + i6.height - 1), ymax: n2.ymax - m6 * t2.y, spatialReference: n2.spatialReference });
    if (!r6) return { extent: u5, srcExtent: u5, pixelBlock: null };
    const { pixelBlocks: h6, mosaicSize: p6 } = r6;
    if (1 === h6.length && null != h6[0] && h6[0].width === i6.width && h6[0].height === i6.height) return { extent: u5, srcExtent: u5, pixelBlock: r6.pixelBlocks[0] };
    const d3 = e2 > 0 ? l7.pyramidBlockWidth : l7.blockWidth, x3 = e2 > 0 ? l7.pyramidBlockHeight : l7.blockHeight, y3 = { x: t2.x % d3, y: t2.y % x3 };
    let g4;
    if (this.rasterJobHandler) {
      g4 = (await this.rasterJobHandler.mosaicAndTransform({ srcPixelBlocks: h6, srcMosaicSize: p6, destDimension: i6, clipOffset: y3, clipSize: i6, coefs: null, sampleSpacing: null, interpolation: o3.interpolation, alignmentInfo: null, blockWidths: null }, o3)).pixelBlock;
    } else g4 = T(h6, p6, { clipOffset: y3, clipSize: i6 });
    return { extent: u5, srcExtent: u5, pixelBlock: g4 };
  }
  fetchRawTile(e2, t2, o3, r6) {
    throw new s("BaseRaster:read-not-implemented", "fetchRawTile() is not implemented");
  }
  computeExtent(e2) {
    return Q(this.rasterInfo.extent, e2);
  }
  decodePixelBlock(e2, t2) {
    return !this.rasterJobHandler || t2.useCanvas ? j2(e2, t2) : this.rasterJobHandler.decode({ data: e2, options: t2 });
  }
  async request(e2, i6, o3 = 0) {
    const { customFetchParameters: r6 } = this.ioConfig, { range: n2, query: s3, headers: l7 } = i6;
    o3 = o3 ?? i6.retryCount ?? this.ioConfig.retryCount;
    const a4 = n2 ? { Range: `bytes=${n2.from}-${n2.to}` } : null;
    try {
      return await H(e2, { ...i6, query: { ...s3, ...r6 }, headers: { ...l7, ...a4 } });
    } catch (c3) {
      if (o3 > 0) return o3--, this.request(e2, i6, o3);
      throw c3;
    }
  }
  getSliceIndex(e2) {
    const { multidimensionalInfo: t2 } = this.rasterInfo;
    return null == t2 || null == e2 || 0 === e2.length ? null : N2(e2, t2);
  }
  getTileExtentFromTileInfo(e2, t2, i6, o3) {
    const r6 = o3.lodAt(e2);
    return this.getTileExtent({ x: r6.resolution, y: r6.resolution }, t2, i6, o3.origin, o3.spatialReference, o3.size);
  }
  updateTileInfo() {
    const { storageInfo: e2, spatialReference: t2, extent: i6, pixelSize: o3 } = this.rasterInfo, { pyramidResolutions: r6 } = e2;
    if (!e2.tileInfo) {
      const n2 = [], s3 = e2.maximumPyramidLevel || 0;
      let l7 = (o3.x + o3.y) / 2, a4 = 1 / 0.0254 * 96 * l7;
      for (let e3 = 0; e3 <= s3 && (n2.unshift(new l2({ level: s3 - e3, resolution: l7, scale: a4 })), e3 !== s3); e3++) if (r6) {
        const t3 = (r6[e3].x + r6[e3].y) / 2;
        a4 *= t3 / l7, l7 = t3;
      } else l7 *= 2, a4 *= 2;
      const c3 = new _2({ x: i6.xmin, y: i6.ymax, spatialReference: t2 });
      e2.tileInfo = new j({ origin: c3, size: [e2.blockWidth, e2.blockHeight], spatialReference: t2, lods: n2 }), e2.isVirtualTileInfo = true;
    }
  }
  createRemoteDatasetStorageInfo(e2, t2 = 512, i6 = 512, o3) {
    const { width: r6, height: n2, nativeExtent: s3, pixelSize: l7, spatialReference: a4 } = e2, c3 = new _2({ x: s3.xmin, y: s3.ymax, spatialReference: a4 });
    null == o3 && (o3 = Math.max(0, Math.round(Math.log(Math.max(r6, n2)) / Math.LN2 - 8)));
    const f3 = this.computeBlockBoundary(s3, 512, 512, { x: s3.xmin, y: s3.ymax }, [l7], o3);
    e2.storageInfo = new l3({ blockWidth: t2, blockHeight: i6, pyramidBlockWidth: t2, pyramidBlockHeight: i6, origin: c3, firstPyramidLevel: 1, maximumPyramidLevel: o3, blockBoundary: f3 });
  }
  async computeBestPyramidLevelForLocation(e2, t2 = {}) {
    return 0;
  }
  computeBlockBoundary(e2, t2, i6, o3, r6, n2 = 0, s3 = 2) {
    if (1 === r6.length && n2 > 0) {
      r6 = [...r6];
      let { x: e3, y: t3 } = r6[0];
      for (let i7 = 0; i7 < n2; i7++) e3 *= s3, t3 *= s3, r6.push({ x: e3, y: t3 });
    }
    const l7 = [], { x: a4, y: c3 } = o3;
    for (let f3 = 0; f3 < r6.length; f3++) {
      const { x: o4, y: n3 } = r6[f3];
      l7.push({ minCol: Math.floor((e2.xmin - a4 + 0.1 * o4) / t2 / o4), maxCol: Math.floor((e2.xmax - a4 - 0.1 * o4) / t2 / o4), minRow: Math.floor((c3 - e2.ymax + 0.1 * n3) / i6 / n3), maxRow: Math.floor((c3 - e2.ymin - 0.1 * n3) / i6 / n3) });
    }
    return l7;
  }
  getPyramidPixelSize(e2) {
    const { nativePixelSize: t2 } = this.rasterInfo, { pyramidResolutions: i6, pyramidScalingFactor: o3 } = this.rasterInfo.storageInfo;
    if (0 === e2) return t2;
    if (null != i6 && i6.length) return i6[e2 - 1];
    const r6 = o3 ** e2;
    return { x: t2.x * r6, y: t2.y * r6 };
  }
  identifyPixelLocation(e2, t2, i6, o3) {
    const { spatialReference: r6, nativeExtent: n2, storageInfo: s3 } = this.rasterInfo, { maximumPyramidLevel: l7, origin: a4, transposeInfo: c3 } = s3, f3 = o3 && null != c3 ? c3.tileSize[0] : s3.blockWidth, m6 = o3 && null != c3 ? c3.tileSize[1] : s3.blockHeight, u5 = A(e2, r6, i6);
    if (!n2.intersects(u5)) return null;
    if (t2 < 0 || t2 > l7) return null;
    const h6 = this.getPyramidPixelSize(t2), { x: p6, y: d3 } = h6, x3 = (a4.y - u5.y) / d3 / m6, y3 = (u5.x - a4.x) / p6 / f3, g4 = Math.min(m6 - 1, Math.floor((x3 - Math.floor(x3)) * m6)), I = Math.min(f3 - 1, Math.floor((y3 - Math.floor(y3)) * f3));
    return { pyramidLevel: t2, row: Math.floor(x3), col: Math.floor(y3), rowOffset: g4, colOffset: I, blockWidth: f3, srcLocation: u5 };
  }
  getTileExtent(e2, t2, i6, o3, r6, n2) {
    const [s3, l7] = n2, a4 = o3.x + i6 * s3 * e2.x, c3 = a4 + s3 * e2.x, m6 = o3.y - t2 * l7 * e2.y, u5 = m6 - l7 * e2.y;
    return new z({ xmin: a4, xmax: c3, ymin: u5, ymax: m6, spatialReference: r6 });
  }
  getBlockWidthHeight(e2) {
    return { blockWidth: e2 > 0 ? this.rasterInfo.storageInfo.pyramidBlockWidth : this.rasterInfo.storageInfo.blockWidth, blockHeight: e2 > 0 ? this.rasterInfo.storageInfo.pyramidBlockHeight : this.rasterInfo.storageInfo.blockHeight };
  }
  isBlockOutside(e2, t2, i6) {
    const o3 = this.rasterInfo.storageInfo.blockBoundary[e2];
    return !o3 || o3.maxRow < t2 || o3.maxCol < i6 || o3.minRow > t2 || o3.minCol > i6;
  }
  updateImageSpaceRasterInfo(e2) {
    const { pixelSize: t2 } = e2, { width: i6, height: o3 } = e2, r6 = f.WebMercator;
    e2.spatialReference = r6, e2.extent = e2.nativeExtent = new z({ xmin: -0.5, ymax: 0.5, xmax: i6 - 0.5, ymin: 0.5 - o3, spatialReference: r6 }), e2.isPseudoSpatialReference = true, e2.transform = null, e2.pixelSize = new _2({ x: 1, y: 1, spatialReference: r6 });
    const { extent: n2, storageInfo: s3 } = e2;
    if (s3) {
      s3.origin = new _2({ x: n2.xmin, y: n2.ymax, spatialReference: r6 });
      const { pyramidResolutions: i7, tileInfo: o4 } = s3;
      if (i7 && i7.forEach((e3) => {
        e3.x /= t2.x, e3.y /= t2.y;
      }), o4) {
        o4.origin = s3.origin;
        const t3 = (e2.nativePixelSize.x + e2.nativePixelSize.y) / 2;
        o4.lods.forEach((e3, i8) => {
          e3.resolution = t3 * 2 ** i8, e3.scale = 96 * e3.resolution / 0.0254;
        });
      }
    }
  }
  async _fetchPixels(e2, t2, i6, o3 = {}) {
    let r6 = oe(e2);
    if (r6 >= 2) return { extent: e2, pixelBlock: null };
    const n2 = this._getSourceDataInfo(e2, t2, i6, o3), { pyramidLevel: s3, srcResolution: l7, srcExtent: a4, srcWidth: c3, srcHeight: f3, ul: u5 } = n2;
    if (0 === c3 || 0 === f3) return { extent: e2, srcExtent: a4, pixelBlock: null };
    const { rasterInfo: h6 } = this, p6 = h6.transform, d3 = "gcs-shift" === p6?.type, x3 = null != ee(e2.spatialReference);
    !d3 && x3 || (r6 = oe(n2.srcExtent, d3));
    const y3 = await this._fetchRawTiles(s3, u5, { width: c3, height: f3, wrapCount: r6 }, o3);
    if (!y3) return { extent: e2, srcExtent: a4, pixelBlock: null };
    const g4 = h6.storageInfo, I = s3 > 0 ? g4.pyramidBlockWidth : g4.blockWidth, R = s3 > 0 ? g4.pyramidBlockHeight : g4.blockHeight;
    let { x: w2, y: S } = h6.pixelSize;
    if (s3 > 0) {
      const { pyramidResolutions: e3, pyramidScalingFactor: t3 } = g4;
      if (null != e3 && e3[s3 - 1]) ({ x: w2, y: S } = e3[s3 - 1]);
      else {
        const e4 = t3 ** s3;
        w2 *= e4, S *= e4;
      }
    }
    const k = h6.spatialReference, v3 = new _2({ x: w2, y: S, spatialReference: k }), T3 = I === c3 && R === f3 && u5.x % I === 0 && u5.y % R === 0, b = new _2({ x: (e2.xmax - e2.xmin) / t2, y: (e2.ymax - e2.ymin) / i6, spatialReference: e2.spatialReference }), P2 = !e2.spatialReference.equals(k), B2 = k.isGeographic ? 1e-9 : 1e-4, { datumTransformation: _5 } = o3;
    if (!P2 && T3 && 1 === y3.pixelBlocks.length && I === t2 && R === i6 && X(l7, b, B2)) return { extent: e2, srcExtent: a4, srcTilePixelSize: v3, pixelBlock: y3.pixelBlocks[0] };
    const M = x3 && null != ee(a4.spatialReference) && this._hasNoneOrGCSShiftTransform, L = o3.requestProjectedLocalDirections && this.rasterInfo.dataType.startsWith("vector");
    L && !this.rasterJobHandler && await v2();
    const E = this.rasterJobHandler ? await this.rasterJobHandler.getProjectionOffsetGrid({ projectedExtent: e2, srcBufferExtent: y3.extent, pixelSize: b.toJSON(), datumTransformation: _5, rasterTransform: p6, hasWrapAround: r6 > 0 || M, isAdaptive: false !== this.ioConfig.optimizeProjectionAccuracy, includeGCSGrid: L }, o3) : se({ projectedExtent: e2, srcBufferExtent: y3.extent, pixelSize: b, datumTransformation: _5, rasterTransform: p6, hasWrapAround: r6 > 0 || M, isAdaptive: false, includeGCSGrid: L });
    let D3;
    const F = !o3.requestRawData, G = { rows: E.spacing[0], cols: E.spacing[1] }, q2 = this._hasNoneOrGCSShiftTransform ? this._getRasterTileAlignmentInfo(s3, y3.extent.xmin) : void 0, { pixelBlocks: J, mosaicSize: V3, isPartiallyFilled: U2 } = y3;
    let Q4 = null;
    if (this.rasterJobHandler) {
      const e3 = await this.rasterJobHandler.mosaicAndTransform({ srcPixelBlocks: J, srcMosaicSize: V3, destDimension: F ? { width: t2, height: i6 } : null, coefs: F ? E.coefficients : null, sampleSpacing: F ? G : null, projectDirections: L, gcsGrid: L ? E.gcsGrid : null, isUV: "vector-uv" === this.rasterInfo.dataType, interpolation: o3.interpolation, alignmentInfo: q2, blockWidths: null }, o3);
      ({ pixelBlock: D3, localNorthDirections: Q4 } = e3);
    } else {
      const e3 = T(J, V3, { alignmentInfo: q2 });
      D3 = F ? D(e3, { width: t2, height: i6 }, E.coefficients, G, o3.interpolation) : e3, L && E.gcsGrid && (Q4 = j3({ width: t2, height: i6 }, E.gcsGrid), D3 = u2(D3, this.rasterInfo.dataType, Q4));
    }
    return o3.requestRawData || L ? { extent: e2, srcExtent: a4, srcTilePixelSize: v3, pixelBlock: D3, transformGrid: E, localNorthDirections: Q4, isPartiallyFilled: U2 } : { extent: e2, srcExtent: a4, srcTilePixelSize: v3, pixelBlock: D3 };
  }
  async _fetchRawTiles(e2, t2, i6, o3) {
    const { origin: r6, blockBoundary: n2 } = this.rasterInfo.storageInfo, { blockWidth: s3, blockHeight: l7 } = this.getBlockWidthHeight(e2);
    let { x: a4, y: c3 } = t2, { width: m6, height: u5, wrapCount: h6 } = i6;
    const p6 = this._getRasterTileAlignmentInfo(e2, 0);
    o3.buffer && (a4 -= o3.buffer.cols, c3 -= o3.buffer.rows, m6 += 2 * o3.buffer.cols, u5 += 2 * o3.buffer.rows);
    let d3 = 0, x3 = 0, y3 = 0;
    if (h6 && null != p6) {
      ({ worldColumnCountFromOrigin: x3, originColumnOffset: y3, rightPadding: d3 } = p6);
      x3 * p6.blockWidth - d3 >= a4 + m6 && (d3 = 0);
    }
    const g4 = Math.floor(a4 / s3), I = Math.floor(c3 / l7), R = Math.floor((a4 + m6 + d3 - 1) / s3), w2 = Math.floor((c3 + u5 + d3 - 1) / l7), S = n2[e2];
    if (!S) return null;
    const { minRow: k, minCol: v3, maxCol: T3, maxRow: b } = S;
    if (0 === h6 && (w2 < k || R < v3 || I > b || g4 > T3)) return null;
    const P2 = new Array();
    let B2 = false;
    const _5 = null == this.ioConfig.allowPartialFill ? o3.allowPartialFill : this.ioConfig.allowPartialFill;
    for (let f3 = I; f3 <= w2; f3++) for (let t3 = g4; t3 <= R; t3++) {
      let i7 = t3;
      if (!o3.disableWrapAround && h6 && null != p6 && x3 <= t3 && (i7 = t3 - x3 - y3), f3 >= k && i7 >= v3 && b >= f3 && T3 >= i7) {
        const t4 = this._tileFetchQueue.push({ pyramidLevel: e2, row: f3, col: i7, options: o3 }, { signal: o3.signal });
        _5 ? P2.push(new Promise((e3) => {
          t4.then((t5) => e3(t5)).catch(() => {
            B2 = true, e3(null);
          });
        })) : P2.push(t4);
      } else P2.push(Promise.resolve(null));
    }
    if (0 === P2.length) return null;
    const M = await Promise.all(P2), C = { height: (w2 - I + 1) * l7, width: (R - g4 + 1) * s3 }, { spatialReference: W2 } = this.rasterInfo, j5 = this.getPyramidPixelSize(e2), { x: z3, y: H2 } = j5;
    return { extent: new z({ xmin: r6.x + g4 * s3 * z3, xmax: r6.x + (R + 1) * s3 * z3, ymin: r6.y - (w2 + 1) * l7 * H2, ymax: r6.y - I * l7 * H2, spatialReference: W2 }), pixelBlocks: M, mosaicSize: C, isPartiallyFilled: B2 };
  }
  _fetchRawTile(e2, t2, i6, o3) {
    const { storageInfo: r6 } = this.rasterInfo, s3 = null != r6.transposeInfo && !!o3.transposedVariableName;
    if (!s3) {
      const o4 = r6.blockBoundary[e2];
      if (!o4) return Promise.resolve(null);
      const { minRow: n2, minCol: s4, maxCol: l8, maxRow: a5 } = o4;
      if (t2 < n2 || i6 < s4 || t2 > a5 || i6 > l8) return Promise.resolve(null);
    }
    const l7 = s3 ? o3.transposeVariableName : o3.sliceId, a4 = this.rasterInfo.storageInfo.isBsqTile ? o3.bandIds : null, c3 = i4(this.rasterId, l7, a4), f3 = `${e2}/${t2}/${i6}`;
    let m6 = m4(c3, o3.registryId, f3);
    if (null == m6) {
      const r7 = new AbortController();
      m6 = this.fetchRawTile(e2, t2, i6, { ...o3, signal: r7.signal }), h4(c3, o3.registryId, f3, m6, r7), m6.catch(() => x2(c3, o3.registryId, f3));
    }
    return o3.signal && m3(o3, () => {
      s2(c3, o3.registryId, f3);
    }), m6;
  }
  _computeMagDirValues(e2) {
    const { bandCount: t2, dataType: i6 } = this.rasterInfo;
    if (!(2 === t2 && "vector-magdir" === i6 || "vector-uv" === i6) || 2 !== e2?.length || !e2[0]?.length) return null;
    const o3 = e2[0].length;
    if ("vector-magdir" === i6) {
      const t3 = e2[1].map((e3) => (e3 + 360) % 360);
      return [e2[0], t3];
    }
    const [r6, n2] = e2, s3 = [], l7 = [];
    for (let a4 = 0; a4 < o3; a4++) {
      const [e3, t3] = l4([r6[a4], n2[a4]]);
      s3.push(e3), l7.push(t3);
    }
    return [s3, l7];
  }
  _getRasterTileAlignmentInfo(e2, t2) {
    return null == this._rasterTileAlignmentInfo && (this._rasterTileAlignmentInfo = ie(this.rasterInfo)), null == this._rasterTileAlignmentInfo.pyramidsInfo ? null : { startX: t2, halfWorldWidth: this._rasterTileAlignmentInfo.halfWorldWidth, hasGCSSShiftTransform: this._rasterTileAlignmentInfo.hasGCSSShiftTransform, ...this._rasterTileAlignmentInfo.pyramidsInfo[e2] };
  }
  _getSourceDataInfo(e2, t2, i6, o3 = {}) {
    const r6 = { datumTransformation: o3.datumTransformation, pyramidLevel: 0, pyramidResolution: null, srcExtent: null, srcHeight: 0, srcResolution: null, srcWidth: 0, ul: { x: 0, y: 0 } };
    o3.srcResolution && (r6.srcResolution = o3.srcResolution, this._updateSourceDataInfo(e2, r6));
    const n2 = this.rasterInfo.storageInfo.maximumPyramidLevel || 0, { srcWidth: s3, srcHeight: l7, pyramidLevel: a4 } = r6, c3 = s3 / t2, f3 = l7 / i6, u5 = a4 < n2 && c3 * f3 >= 16, h6 = a4 === n2 && this._requireTooManySrcTiles(s3, l7, t2, i6);
    if (u5 || h6 || (0 === s3 || 0 === l7)) {
      const s4 = new _2({ x: (e2.xmax - e2.xmin) / t2, y: (e2.ymax - e2.ymin) / i6, spatialReference: e2.spatialReference });
      let l8 = _4(s4, this.rasterInfo.spatialReference, e2, r6.datumTransformation);
      const h7 = !l8 || o3.srcResolution && l8.x + l8.y < o3.srcResolution.x + o3.srcResolution.y;
      if (u5 && o3.srcResolution && h7) {
        const e3 = Math.round(Math.log(Math.max(c3, f3)) / Math.LN2) - 1;
        if (n2 - a4 + 3 >= e3) {
          const t3 = 2 ** e3;
          l8 = { x: o3.srcResolution.x * t3, y: o3.srcResolution.y * t3 };
        }
      }
      l8 && (r6.srcResolution = l8, this._updateSourceDataInfo(e2, r6));
    }
    return this._requireTooManySrcTiles(r6.srcWidth, r6.srcHeight, t2, i6) && (r6.srcWidth = 0, r6.srcHeight = 0), r6;
  }
  _requireTooManySrcTiles(e2, t2, i6, o3) {
    const { tileInfo: r6 } = this.rasterInfo.storageInfo, n2 = Math.ceil(e2 / r6.size[0]) * Math.ceil(t2 / r6.size[1]), s3 = e2 / i6, l7 = t2 / o3, a4 = Math.max(1, (i6 + o3) / 1024);
    return n2 >= U * a4 || s3 > V2 || l7 > V2;
  }
  _updateSourceDataInfo(e2, t2) {
    t2.srcWidth = 0, t2.srcHeight = 0;
    const { rasterInfo: i6 } = this, o3 = i6.spatialReference, { srcResolution: r6, datumTransformation: n2 } = t2, { pyramidLevel: s3, pyramidResolution: l7, excessiveReading: a4 } = ue(r6, i6, this.ioConfig.sampling);
    if (a4) return;
    let c3 = t2.srcExtent || Q(e2, o3, n2);
    if (null == c3) return;
    const f3 = i6.transform;
    f3 && (c3 = f3.inverseTransform(c3)), t2.srcExtent = c3;
    const { x: m6, y: u5 } = i6.storageInfo.origin, h6 = Math.floor((c3.xmin - m6) / l7.x + 0.1), p6 = Math.floor((u5 - c3.ymax) / l7.y + 0.1), d3 = Math.floor((c3.xmax - m6) / l7.x - 0.1), x3 = Math.floor((u5 - c3.ymin) / l7.y - 0.1), y3 = c3.width < 0.1 * l7.x ? 0 : d3 - h6 + 1, g4 = c3.height < 0.1 * l7.y ? 0 : x3 - p6 + 1;
    t2.pyramidLevel = s3, t2.pyramidResolution = l7, t2.srcWidth = y3, t2.srcHeight = g4, t2.ul = { x: h6, y: p6 };
  }
  _getRequestOptionsWithSliceId(e2) {
    return null != this.rasterInfo.multidimensionalInfo && null == e2.sliceId && (e2 = { ...e2, sliceId: this.getSliceIndex(e2.multidimensionalDefinition) }), e2;
  }
  _processIdentifyResult(e2, t2) {
    const { srcLocation: i6, position: o3, pyramidLevel: r6, useTransposedTile: n2 } = t2, s3 = e2.pixels[0].length / e2.width / e2.height;
    if (!(!e2.mask || e2.mask[o3])) return { location: i6, value: null };
    const { multidimensionalInfo: l7 } = this.rasterInfo;
    if (null == l7 || !n2) {
      const t3 = e2.pixels.map((e3) => e3[o3]), n3 = { location: i6, value: t3, pyramidLevel: r6 }, s4 = this._computeMagDirValues(t3.map((e3) => [e3]));
      return s4?.length && (n3.magdirValue = s4.map((e3) => e3[0])), n3;
    }
    let a4 = e2.pixels.map((e3) => e3.slice(o3 * s3, o3 * s3 + s3)), c3 = this._computeMagDirValues(a4);
    const { requestSomeSlices: f3, identifyOptions: m6 } = t2;
    let u5 = i2(l7, m6.transposedVariableName);
    if (f3) {
      const e3 = a3(u5, m6.multidimensionalDefinition, m6.timeExtent);
      a4 = a4.map((t3) => e3.map((e4) => t3[e4])), c3 = c3?.map((t3) => e3.map((e4) => t3[e4])), u5 = e3.map((e4) => u5[e4]);
    }
    const h6 = e2.noDataValues || this.rasterInfo.noDataValue, p6 = { pixels: a4, pixelType: e2.pixelType };
    let x3;
    null != h6 && (g2(p6, h6), x3 = p6.mask);
    return { location: i6, value: null, dataSeries: u5.map((e3, t3) => {
      const i7 = { value: 0 === x3?.[t3] ? null : a4.map((e4) => e4[t3]), multidimensionalDefinition: e3.multidimensionalDefinition.map((e4) => new p({ ...e4, isSlice: true })) };
      return c3?.length && (i7.magdirValue = [c3[0][t3], c3[1][t3]]), i7;
    }), pyramidLevel: r6 };
  }
};
function X(e2, t2, i6) {
  return Math.abs(e2.x - t2.x) < i6 && Math.abs(e2.y - t2.y) < i6;
}
r([m2()], $.prototype, "_rasterTileAlignmentInfo", void 0), r([m2()], $.prototype, "_tileFetchQueue", void 0), r([m2({ readOnly: true })], $.prototype, "_isGlobalWrappableSource", null), r([m2({ readOnly: true })], $.prototype, "_hasNoneOrGCSShiftTransform", null), r([m2()], $.prototype, "_openPromise", void 0), r([m2()], $.prototype, "rasterJobHandler", null), r([m2({ readOnly: true })], $.prototype, "rasterId", null), r([m2(y2)], $.prototype, "url", null), r([m2({ type: String, json: { write: true } })], $.prototype, "datasetName", void 0), r([m2({ type: String, json: { write: true } })], $.prototype, "datasetFormat", void 0), r([m2()], $.prototype, "hasUniqueSourceStorageInfo", void 0), r([m2()], $.prototype, "rasterInfo", void 0), r([m2()], $.prototype, "ioConfig", void 0), r([m2()], $.prototype, "sourceJSON", void 0), $ = r([a("esri.layers.support.rasterDatasets.BaseRaster")], $);

// node_modules/@arcgis/core/layers/support/rasterDatasets/FunctionRaster.js
var p5 = 40;
var m5 = class extends $ {
  constructor() {
    super(...arguments), this.datasetFormat = "Function", this.tileType = "Raster", this.rasterFunction = null, this._clippingGeometry = /* @__PURE__ */ new Map();
  }
  async fetchPixels(t2, e2, r6, s3 = {}) {
    const { rasters: i6, rasterIds: o3 } = this.primaryRasters;
    let l7 = false;
    const { interpolation: c3 } = s3, p6 = this.rasterFunction.flatWebGLFunctionChain?.hasFocalFunction;
    !s3.requestRawData && p6 && (l7 = 1 === i6.length && !s3.skipRasterFunction, s3 = { ...s3, interpolation: "bilinear", requestRawData: l7 });
    const m6 = i6.map((i7) => i7.fetchPixels(t2, e2, r6, s3)), u5 = await Promise.all(m6), h6 = u5.map((t3) => t3.pixelBlock), f3 = l7 || s3.requestRawData ? u5.map((t3) => t3.srcTilePixelSize) : null;
    if (s3.skipRasterFunction || h6.every((t3) => null == t3)) return u5[0];
    const d3 = u5.find((t3) => null != t3.pixelBlock)?.extent ?? t2;
    let y3 = this.rasterJobHandler ? await this.rasterJobHandler.process({ extent: d3, primaryPixelBlocks: h6, primaryPixelSizes: f3, primaryRasterIds: o3 }) : this.rasterFunction.process({ extent: d3, primaryPixelBlocks: h6, primaryPixelSizes: f3, primaryRasterIds: o3 });
    const { transformGrid: g4 } = u5[0];
    if (!l7 || null == y3 || null == g4) {
      const t3 = s3.noClip ? null : this.getClippingGeometry(d3.spatialReference);
      return s3.noClip || s3.requestRawData || null == y3 || !t3 || (y3 = await r4(y3, d3, t3)), { ...u5[0], pixelBlock: y3 };
    }
    const x3 = { rows: g4.spacing[0], cols: g4.spacing[1] };
    let R;
    if (this.rasterJobHandler) {
      R = (await this.rasterJobHandler.mosaicAndTransform({ srcPixelBlocks: [y3], srcMosaicSize: { width: y3.width, height: y3.height }, destDimension: { width: e2, height: r6 }, coefs: g4.coefficients, sampleSpacing: x3, projectDirections: false, gcsGrid: null, isUV: false, interpolation: c3, alignmentInfo: void 0, blockWidths: null }, s3)).pixelBlock;
    } else R = D(y3, { width: e2, height: r6 }, g4.coefficients, x3, c3);
    const w2 = s3.noClip ? null : this.getClippingGeometry(t2.spatialReference);
    return s3.noClip || s3.requestRawData || null == R || null == w2 || (R = await r4(R, t2, w2)), { extent: t2, srcExtent: u5[0].srcExtent, pixelBlock: R };
  }
  getClippingGeometry(t2) {
    const e2 = this._clippingGeometry.get("0");
    if (!t2 || !e2) return e2;
    const r6 = h5(t2);
    let s3 = this._clippingGeometry.get(r6);
    return null != s3 || (s3 = t2.equals(e2.spatialReference) ? e2 : V(e2, t2), this._clippingGeometry.set(r6, s3)), s3;
  }
  async _open(t2) {
    const { rasterFunction: r6 } = this;
    r6.isRoot = true, this.primaryRasters?.rasters?.length ? r6.sourceRasters = this.primaryRasters.rasters : (this.primaryRasters = r6.getPrimaryRasters(), this.rasterJobHandler && this.primaryRasters.rasters?.forEach((t3) => t3.rasterJobHandler = this.rasterJobHandler));
    const { rasters: s3, rasterIds: i6 } = this.primaryRasters, o3 = s3.map((e2) => e2.rasterInfo ? void 0 : e2.open(t2));
    await Promise.all(o3);
    const a4 = s3.map(({ rasterInfo: t3 }) => t3), n2 = r6.bind({ rasterInfos: a4, rasterIds: i6 });
    if (r6.rawSourceRasterInfos = a4, !n2.success || 0 === a4.length) throw new s("raster-function:open", `cannot bind the function: ${n2.error ?? ""}`);
    const l7 = "Table" === r6.functionName ? r6 : r6.functionArguments?.raster;
    "Table" === l7?.functionName && (r6.rasterInfo.attributeTable = g.fromJSON(l7.functionArguments.attributeTableAsRecordSet)), await this.syncJobHandler();
    const p6 = a4[0];
    this.hasUniqueSourceStorageInfo = 1 === a4.length || a4.slice(1).every((t3) => u3(t3, p6)), this.set("sourceJSON", s3[0].sourceJSON), this.set("rasterInfo", r6.rasterInfo), await this._updateClipGeometry();
  }
  async syncJobHandler() {
    return this.rasterJobHandler?.updateRasterFunction(this.rasterFunction);
  }
  async _updateClipGeometry() {
    const t2 = this.rasterFunction.getClippingGeometries()[0];
    let e2 = t2?.clippingGeometry;
    if (e2 && "inside" === t2.clippingType) {
      const { extent: t3 } = this.rasterInfo, r6 = await import("./densifyOperator-ZEYGQCLV.js"), s3 = await import("./differenceOperator-XDUYOBIM.js");
      let o3 = r6.execute(P.fromExtent(t3), 2 * (t3.width + t3.height) / p5);
      o3 = V(o3, e2.spatialReference), e2 = s3.execute(o3, e2);
    }
    this._clippingGeometry.clear(), e2 && this._clippingGeometry.set("0", e2);
  }
};
function u3(t2, e2) {
  const { storageInfo: r6, pixelSize: s3, spatialReference: i6, extent: o3 } = t2, { storageInfo: a4, pixelSize: n2, spatialReference: l7, extent: c3 } = e2;
  return s3.x === n2.x && s3.y === n2.y && i6.equals(l7) && o3.equals(c3) && r6.blockHeight === a4.blockHeight && r6.blockWidth === a4.blockWidth && r6.maximumPyramidLevel === a4.maximumPyramidLevel;
}
function h5(t2) {
  return String(t2.wkid ?? t2.wkt ?? t2.wkt2);
}
r([m2({ type: String, json: { write: true } })], m5.prototype, "datasetFormat", void 0), r([m2()], m5.prototype, "tileType", void 0), r([m2()], m5.prototype, "rasterFunction", void 0), r([m2()], m5.prototype, "primaryRasters", void 0), m5 = r([a("esri.layers.support.rasterDatasets.FunctionRaster")], m5);

// node_modules/@arcgis/core/layers/mixins/ImageryTileMixin.js
var Q3 = 1e3;
var X2 = (X3) => {
  let Y = class extends X3 {
    constructor(...e2) {
      super(...e2), this._isConstructedFromFunctionRaster = false, this.bandIds = null, this.copyright = null, this.interpolation = null, this.multidimensionalSubset = null, this.raster = null, this.serviceRasterInfo = null, this.sourceJSON = null, this.spatialReference = null, this.symbolizer = null, this._isConstructedFromFunctionRaster = r3(e2[0]?.raster);
    }
    destroy() {
      this._shutdownJobHandler();
    }
    get fullExtent() {
      return this.serviceRasterInfo?.extent;
    }
    set multidimensionalDefinition(e2) {
      this._set("multidimensionalDefinition", e2), this.updateRenderer();
    }
    set rasterFunction(e2) {
      "none" === e2?.functionName?.toLowerCase() && (e2 = void 0), this._set("rasterFunction", e2), this.updateRasterFunction();
    }
    set url(e2) {
      this._set("url", y(e2, i.getLogger(this)));
    }
    get renderer() {
      if ("imagery-tile" !== this.type) return this.internalRenderer;
      const { activePresetRendererName: e2, presetRenderers: t2 } = this;
      if (e2) {
        const i6 = t2?.find(({ name: t3 }) => t3 === e2);
        return i6?.renderer.clone();
      }
      return this.internalRenderer;
    }
    set renderer(e2) {
      "imagery-tile" === this.type && (this.activePresetRendererName = null), this.internalRenderer = e2;
    }
    set internalRenderer(e2) {
      null == e2 && null == this.rasterFunction ? this._configDefaultRenderer("override") : (this._set("internalRenderer", e2), this.updateRenderer());
    }
    readRenderer(e2, t2, i6) {
      const r6 = t2?.layerDefinition?.drawingInfo?.renderer;
      return c(r6, i6) || void 0;
    }
    async computeStatisticsHistograms(e2, t2) {
      await this.load(t2), e2 = m(j4, e2).clone();
      const { serviceRasterInfo: r6 } = this;
      if (null == r6) throw new s("imagery-tile-mixin:compute-statistics-histograms", "serviceRasterInfo must be specified");
      const { geometry: s3 } = e2;
      if (null == s3) throw new s("imagery-tile-mixin:compute-statistics-histograms", "geometry must be specified");
      let n2 = s3;
      const { spatialReference: a4 } = r6;
      if (!s3.spatialReference.equals(a4)) {
        await v2();
        const e3 = "extent" === s3.type ? Q(s3, a4) : V(s3, a4);
        if (null == e3) throw new s("imagery-tile-mixin:compute-statistics-histograms", "geometry cannot be projected to the data source");
        n2 = e3;
      }
      const l7 = e2.pixelSize ?? new _2({ x: r6.pixelSize.x, y: r6.pixelSize.y, spatialReference: a4 }), { extent: m6, width: p6, height: c3 } = p4(r6, n2, l7), d3 = await this.fetchPixels(m6, p6, c3, { ...t2, interpolation: "nearest" });
      if (null == d3.pixelBlock) throw new s("imagery-tile-mixin:compute-statistics-histograms", "failed to fetch pixels");
      const h6 = await r4(d3.pixelBlock, m6, n2), f3 = this._rasterJobHandler;
      return f3 ? f3.computeStatisticsHistograms({ pixelBlock: h6 }, t2) : h2(h6);
    }
    normalizeRasterFetchOptions(e2) {
      const { multidimensionalInfo: t2 } = this.serviceRasterInfo ?? {};
      if (null == t2) return e2;
      const i6 = f2({ rasterInfo: this.raster.rasterInfo, multidimensionalDefinition: e2.multidimensionalDefinition || this.multidimensionalDefinition, timeExtent: e2.timeExtent ?? this.timeExtent, multidimensionalSubset: this.multidimensionalSubset });
      return { ...e2, multidimensionalDefinition: i6, timeExtent: void 0 };
    }
    async updateRasterFunction() {
      return this.loaded && "imagery-tile" === this.type && (this.rasterFunction || this._cachedRasterFunctionJson) && JSON.stringify(this.rasterFunction) !== JSON.stringify(this._cachedRasterFunctionJson) ? (this._cachedRasterFunctionJson = this.rasterFunction?.toJSON(), this._rasterFunctionUpdatePromise = this._updateRasterFunction(), this._rasterFunctionUpdatePromise) : this._rasterFunctionUpdatePromise;
    }
    async updateRenderer() {
      const { loaded: e2, symbolizer: t2, renderer: i6 } = this;
      if (!e2 || !t2 || !i6) return;
      const { rasterInfo: r6 } = this.raster, s3 = d2(r6, { multidimensionalDefinition: this.multidimensionalDefinition, multidimensionalSubset: this.multidimensionalSubset }), n2 = s3?.name, o3 = W(r6, n2);
      return this._updateSymbolizer(t2, i6, n2, o3);
    }
    async applyRenderer(e2, t2, i6) {
      const r6 = e2?.pixelBlock;
      if (!(null != r6 && r6.pixels && r6.pixels.length > 0)) return null;
      await this.updateRenderer();
      const s3 = this.bandIds ?? [], { pixelBlock: n2 } = await this._symbolize({ pixelData: e2, simpleStretchParams: t2, bandIds: s3, symbolizer: this.symbolizer }, i6);
      return n2;
    }
    getTileUrl(e2, t2, i6) {
      return "RasterTileServer" === this.raster.datasetFormat ? `${this.url}/tile/${e2}/${t2}/${i6}` : "";
    }
    getCompatibleTileInfo(e2, t2, i6 = false) {
      if (!this.loaded || null == t2) return null;
      if (i6 && e2.equals(this.spatialReference)) return this.tileInfo;
      const r6 = d(e2);
      return j.create({ size: 256, spatialReference: e2, origin: r6 ? { x: r6.origin[0], y: r6.origin[1] } : { x: t2.xmin, y: t2.ymax } });
    }
    getCompatibleFullExtent(e2) {
      return this.loaded ? (this._compatibleFullExtent?.spatialReference.equals(e2) || (this._compatibleFullExtent = this.raster.computeExtent(e2)), this._compatibleFullExtent) : null;
    }
    async fetchTile(e2, i6, r6, s3 = {}) {
      if (Z(this), s3.requestAsImageElement) {
        const n3 = this.getTileUrl(e2, i6, r6);
        return H(n3, { responseType: "image", query: { ...this.refreshParameters, ...this.raster.ioConfig.customFetchParameters }, signal: s3.signal }).then((e3) => e3.data);
      }
      const { serviceRasterInfo: n2 } = this;
      if (null != n2.multidimensionalInfo && null == (s3 = this.normalizeRasterFetchOptions(s3)).multidimensionalDefinition) {
        const t2 = s3.tileInfo || n2.storageInfo.tileInfo;
        return { extent: this.raster.getTileExtentFromTileInfo(e2, i6, r6, t2), pixelBlock: null };
      }
      return await this._initJobHandler(), await this.updateRasterFunction(), "raster-shaded-relief" === this.renderer?.type && (s3 = { ...s3, buffer: { cols: 1, rows: 1 } }), this.raster.fetchTile(e2, i6, r6, s3);
    }
    async fetchPixels(e2, t2, i6, r6 = {}) {
      return null != this.serviceRasterInfo.multidimensionalInfo && null == (r6 = this.normalizeRasterFetchOptions(r6)).multidimensionalDefinition ? { extent: e2, pixelBlock: null } : (await this._initJobHandler(), await this.updateRasterFunction(), t2 = Math.round(t2), i6 = Math.round(i6), this.raster.fetchPixels(e2, t2, i6, r6));
    }
    async getSamples(e2, t2) {
      if (await this.load(), (e2 = m(h3, e2).clone()).interpolation && "nearest" !== e2.interpolation) throw new s("imagery-tile-mixin:get-samples", "only nearest interpolation is currently supported");
      const r6 = e2.mosaicRule?.multidimensionalDefinition, s3 = { ...t2, multidimensionalDefinition: r6 }, n2 = (await this._getSampleLocations(e2)).map((e3) => this.identify(e3, s3).then((t3) => (t3.location = e3, t3))), a4 = (await Promise.all(n2)).flatMap((e3, t3) => this._convertRasterIdentifyResultToSample(e3, t3));
      return new p3({ samples: a4 });
    }
    async identify(e2, t2 = {}) {
      await this.load();
      const { raster: r6, serviceRasterInfo: s3 } = this;
      if (null != s3?.multidimensionalInfo) {
        if (!(s3.hasMultidimensionalTranspose && !(!g3(t2.multidimensionalDefinition) && !t2.transposedVariableName)) && null == (t2 = this.normalizeRasterFetchOptions(t2)).multidimensionalDefinition) return { location: e2, value: null };
      }
      const n2 = this.multidimensionalSubset?.areaOfInterest;
      if (n2 && !n2.contains(e2)) throw new s("imagery-tile-mixin:identify", "the request cannot be fulfilled when falling outside of the multidimensional subset");
      const o3 = this.serviceRasterInfo?.storageInfo.isBsqTile && this.bandIds?.length ? this.bandIds : void 0;
      return r6.identify(e2, { ...t2, bandIds: o3 });
    }
    hasStandardTime() {
      const e2 = this.serviceRasterInfo?.multidimensionalInfo;
      if (null == e2 || "standard-time" !== this.serviceRasterInfo?.dataType) return false;
      const t2 = this.multidimensionalDefinition, i6 = t2?.[0]?.variableName;
      return e2.variables.some((e3) => e3.name === i6 && (!t2?.[0].dimensionName || e3.dimensions.some((e4) => "StdTime" === e4.name)));
    }
    getStandardTimeValue(e2) {
      return new Date(w(e2)).toISOString();
    }
    getMultidimensionalSubsetVariables(e2) {
      const t2 = e2 ?? this.serviceRasterInfo?.multidimensionalInfo;
      return v(this.multidimensionalSubset, t2);
    }
    _configDefaultSettings() {
      this._configDefaultInterpolation(), this.multidimensionalDefinition || (this.multidimensionalDefinition = h(this.raster.rasterInfo, { multidimensionalSubset: this.multidimensionalSubset })), this.rasterFunction && r3(this.raster) && (this._cachedRasterFunctionJson = this.rasterFunction.toJSON()), this._configDefaultRenderer();
    }
    async _initJobHandler() {
      if (!this._rasterJobHandler) return super._initJobHandler().then(async () => {
        if (!this._rasterJobHandler) return;
        Z(this);
        const { raster: e2 } = this;
        e2.rasterJobHandler = this._rasterJobHandler, r3(e2) && e2.syncJobHandler(), this.rasterFunction && await this.updateRasterFunction().catch(() => {
        }), this.renderer && this.updateRenderer();
      }).catch(() => {
      });
    }
    _shutdownJobHandler() {
      super._shutdownJobHandler(), this.raster && (this.raster.rasterJobHandler = null);
    }
    async _getSampleLocations(e2) {
      const { geometry: t2 } = e2;
      if ("point" === t2.type) return [t2];
      const { spatialReference: i6, type: r6 } = t2;
      if ("multipoint" === r6) return t2.points.map((e3) => new _2({ x: e3[0], y: e3[1], spatialReference: i6 }));
      if ("polyline" === r6) {
        let r7 = t2;
        if (e2.sampleCount || e2.sampleDistance) {
          const i7 = await import("./densifyOperator-ZEYGQCLV.js"), s4 = (await import("./lengthOperator-26SL2NUF.js")).execute(t2, { unit: "meters" }), n3 = Math.min(e2.sampleCount || 100, Q3);
          let o4 = e2.sampleDistance;
          if (!o4) {
            o4 = s4 / (n3 + (2 === r7.paths[0].length ? 1 : 0));
          }
          r7 = i7.execute(t2, o4, { unit: "meters" });
        }
        return r7.paths.flatMap((e3) => e3.map((e4) => new _2({ x: e4[0], y: e4[1], spatialReference: i6 })));
      }
      const s3 = Math.min(e2.sampleCount || 100, Q3), n2 = "extent" === t2.type, o3 = n2 ? t2 : t2.extent, a4 = Math.sqrt(o3.width * o3.height / s3), l7 = o3.height / a4, m6 = o3.width / a4, { xmin: p6, ymax: c3 } = o3, d3 = [];
      for (let h6 = 0; h6 < l7; h6++) for (let e3 = 0; e3 < m6; e3++) {
        const r7 = new _2({ x: p6 + (e3 + 0.5) * a4, y: c3 - (h6 + 0.5) * a4, spatialReference: i6 });
        (n2 || t2.contains(r7)) && d3.push(r7);
      }
      return d3;
    }
    _configDefaultInterpolation() {
      if (null == this.interpolation) {
        Z(this);
        const { raster: e2 } = this, t2 = N3(e2.rasterInfo, e2.tileType, this.sourceJSON?.defaultResamplingMethod);
        this._set("interpolation", t2);
      }
    }
    _configDefaultRenderer(e2 = "no") {
      Z(this);
      const { rasterInfo: t2 } = this.raster, i6 = d2(t2, { multidimensionalDefinition: this.multidimensionalDefinition, multidimensionalSubset: this.multidimensionalSubset }), s3 = i6?.name, n2 = q({ variableName: s3, rasterFunctionName: this.rasterFunction?.functionName, presetRenderers: this.presetRenderers });
      if (!this.bandIds && t2.bandCount > 1 && (this.bandIds = n2?.bandIds ?? D2(t2)), !this.renderer || "override" === e2) {
        const e3 = z2(this.raster), i7 = n2?.renderer ?? B(t2, { bandIds: this.bandIds, variableName: s3, rasterFunctionColorRamp: e3 }), r6 = t2.statistics, o4 = r6 && r6.length > 0 ? r6[0] : null, a5 = o4?.max ?? 0, l8 = o4?.min ?? 0;
        "WCSServer" === this.raster.datasetFormat && "raster-stretch" === i7.type && (a5 > 1e24 || l8 < -1e24) && (i7.dynamicRangeAdjustment = true, i7.customStatistics = null, "none" === i7.stretchType && (i7.stretchType = "min-max")), this.renderer = i7;
      }
      const o3 = te({ ...this.renderer.toJSON(), variableName: s3 }), a4 = W(t2, s3);
      this.symbolizer ? (this.symbolizer.rendererJSON = o3, this.symbolizer.rasterInfo = a4) : this.symbolizer = new _3({ rendererJSON: o3, rasterInfo: a4 });
      const l7 = this.symbolizer.bind();
      if (l7.success) {
        if ("auto" === e2) {
          const { colormap: e3 } = this.raster.rasterInfo, t3 = this.renderer;
          if (null != e3 && "raster-colormap" === t3.type) {
            const e4 = B(this.raster.rasterInfo);
            JSON.stringify(e4) !== JSON.stringify(t3) && this._configDefaultRenderer("override");
          } else if ("raster-stretch" === t3.type) {
            const e4 = this.bandIds?.length, i7 = t3.customStatistics?.length;
            !t3.dynamicRangeAdjustment && i7 && e4 && i7 !== e4 && this._configDefaultRenderer("override");
          }
        }
      } else i.getLogger(this).warn("imagery-tile-mixin", l7.error || "The given renderer is not supported by the layer."), "auto" === e2 && this._configDefaultRenderer("override");
    }
    async _updateRasterFunction() {
      if (this._isConstructedFromFunctionRaster && r3(this.raster)) {
        const e3 = this.raster.rasterFunction.toJSON();
        return void (!this.rasterFunction && e3 && this._set("rasterFunction", N.fromJSON(e3)));
      }
      let e2, t2 = this.raster, i6 = false;
      r3(t2) ? (e2 = t2.primaryRasters.rasters, t2 = e2[0], i6 = true) : e2 = [t2];
      const { rasterFunction: r6 } = this;
      if (r6) {
        const i7 = { raster: t2 };
        e2.length > 1 && e2.forEach((e3) => i7[e3.url] = e3);
        const s4 = T2(r6.functionDefinition?.toJSON() ?? r6.toJSON(), i7), n3 = new m5({ rasterFunction: s4 });
        n3.rasterJobHandler = this._rasterJobHandler, await n3.open(), this.raster = n3;
      } else this.raster = t2, await t2.open();
      if (this._cachedRendererJson = void 0, !i6 && !r6) return;
      const { bandIds: s3 } = this, { bandCount: n2 } = this.raster.rasterInfo, o3 = s3?.length ? s3.some((e3) => e3 >= n2) : n2 >= 3;
      s3 && (o3 || this.renderer && "raster-stretch" !== this.renderer.type) && this._set("bandIds", null), this._configDefaultRenderer("auto");
    }
    _convertRasterIdentifyResultToSample(e2, t2) {
      const { rasterInfo: i6 } = this.raster, r6 = i6.storageInfo.pyramidScalingFactor ** (e2.pyramidLevel ?? 0), s3 = (i6.pixelSize.x + i6.pixelSize.y) / 2 * r6;
      if (!e2.dataSeries?.length) return [new i3({ location: e2.location, pixelValue: e2.value, locationId: t2, resolution: s3 })];
      const n2 = [];
      return e2.dataSeries.forEach(({ value: i7, multidimensionalDefinition: r7 }, o3) => {
        const a4 = { Variables: r7[0].variableName, Dimensions: r7.flatMap(({ dimensionName: e3 }) => e3).join(",") };
        for (const { dimensionName: e3, values: t3 } of r7) {
          a4[e3] = Array.isArray(t3[0]) ? t3[0][0] : t3[0];
          const i8 = t3[t3.length - 1];
          a4[`${e3}_Max`] = Array.isArray(i8) ? i8[i8.length - 1] : i8;
        }
        const l7 = new i3({ location: e2.location, pixelValue: i7, rasterId: o3, locationId: t2, resolution: s3, attributes: a4 });
        n2.push(l7);
      }), n2;
    }
  };
  function Z(e2) {
    if (!e2.raster || !e2.serviceRasterInfo) throw new s("imagery-tile", "no raster");
  }
  return r([m2({ clonable: false })], Y.prototype, "_cachedRasterFunctionJson", void 0), r([m2({ clonable: false })], Y.prototype, "_compatibleFullExtent", void 0), r([m2({ clonable: false })], Y.prototype, "_isConstructedFromFunctionRaster", void 0), r([m2({ clonable: false })], Y.prototype, "_rasterFunctionUpdatePromise", void 0), r([m2({ type: [x], json: { write: { overridePolicy() {
    return { enabled: !this.loaded || "Raster" === this.raster.tileType || "0,1,2" !== this.bandIds?.join(",") };
  } } } })], Y.prototype, "bandIds", void 0), r([m2({ json: { origins: { service: { read: { source: "copyrightText" } } } } })], Y.prototype, "copyright", void 0), r([m2({ json: { read: false } })], Y.prototype, "fullExtent", null), r([m2({ json: { write: { overridePolicy() {
    return { enabled: !this.loaded || "Raster" === this.raster.tileType || "bilinear" !== this.interpolation };
  } } } }), r2(a2)], Y.prototype, "interpolation", void 0), r([m2()], Y.prototype, "ioConfig", void 0), r([m2({ type: [p], json: { write: true } })], Y.prototype, "multidimensionalDefinition", null), r([m2({ type: u, json: { write: true } })], Y.prototype, "multidimensionalSubset", void 0), r([m2()], Y.prototype, "raster", void 0), r([m2({ type: N })], Y.prototype, "rasterFunction", null), r([m2()], Y.prototype, "serviceRasterInfo", void 0), r([m2()], Y.prototype, "sourceJSON", void 0), r([m2({ readOnly: true, type: f, json: { read: false } })], Y.prototype, "spatialReference", void 0), r([m2({ type: j })], Y.prototype, "tileInfo", void 0), r([m2(y2)], Y.prototype, "url", null), r([m2()], Y.prototype, "renderer", null), r([m2({ types: l5, json: { name: "layerDefinition.drawingInfo.renderer", write: { overridePolicy() {
    const e2 = "raster-stretch" === this.renderer?.type && "none" === this.renderer.stretchType && !this.renderer.useGamma;
    return { enabled: !this.loaded || "Raster" === this.raster.tileType || !e2 };
  } }, origins: { "web-scene": { types: p2, name: "layerDefinition.drawingInfo.renderer", write: { overridePolicy: (e2) => ({ enabled: e2 && "vector-field" !== e2.type && "flow" !== e2.type }) } } } } })], Y.prototype, "internalRenderer", null), r([o("internalRenderer")], Y.prototype, "readRenderer", null), r([m2({ clonable: false })], Y.prototype, "symbolizer", void 0), Y = r([a("esri.layers.mixins.ImageryTileMixin")], Y), Y;
};

// node_modules/@arcgis/core/layers/support/rasterDatasets/xmlUtilities.js
function n(e2, t2) {
  if (!e2 || !t2) return [];
  let l7 = t2;
  t2.includes("/") ? (l7 = t2.slice(0, t2.indexOf("/")), t2 = t2.slice(t2.indexOf("/") + 1)) : t2 = "";
  const r6 = [];
  if (t2) {
    const u6 = n(e2, l7);
    for (let e3 = 0; e3 < u6.length; e3++) {
      n(u6[e3], t2).forEach((n2) => r6.push(n2));
    }
    return r6;
  }
  const u5 = e2.getElementsByTagNameNS("*", l7);
  if (!u5 || 0 === u5.length) return [];
  for (let n2 = 0; n2 < u5.length; n2++) r6.push(u5[n2] || u5.item(n2));
  return r6;
}
function e(t2, l7) {
  if (!t2 || !l7) return null;
  let r6 = l7;
  l7.includes("/") ? (r6 = l7.slice(0, l7.indexOf("/")), l7 = l7.slice(l7.indexOf("/") + 1)) : l7 = "";
  const u5 = n(t2, r6);
  return u5.length > 0 ? l7 ? e(u5[0], l7) : u5[0] : null;
}
function t(n2, t2 = null) {
  const l7 = t2 ? e(n2, t2) : n2;
  let r6;
  return l7 ? (r6 = l7.textContent || l7.nodeValue, r6 ? r6.trim() : null) : null;
}
function l6(e2, t2) {
  const l7 = n(e2, t2), r6 = [];
  let u5;
  for (let n2 = 0; n2 < l7.length; n2++) u5 = l7[n2].textContent || l7[n2].nodeValue, u5 && (u5 = u5.trim(), "" !== u5 && r6.push(u5));
  return r6;
}
function r5(n2, e2 = null) {
  const l7 = t(n2, e2);
  return l7?.split(" ").map((n3) => Number(n3)) ?? [];
}
function u4(n2, e2) {
  return l6(n2, e2).map((n3) => Number(n3));
}
function o2(n2, e2) {
  const l7 = t(n2, e2);
  return Number(l7);
}
function i5(n2, e2) {
  const t2 = n2?.nodeName?.toLowerCase(), l7 = e2.toLowerCase();
  return t2.slice(t2.lastIndexOf(":") + 1) === l7;
}
function c2(n2) {
  return n2.nodeName.slice(n2.nodeName.lastIndexOf(":") + 1);
}

export {
  $,
  m5 as m,
  X2 as X,
  n,
  e,
  t,
  l6 as l,
  r5 as r,
  u4 as u,
  o2 as o,
  i5 as i,
  c2 as c
};
//# sourceMappingURL=chunk-QK4VRPQW.js.map
