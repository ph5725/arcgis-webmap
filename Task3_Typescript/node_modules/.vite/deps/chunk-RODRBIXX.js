import {
  A as A2,
  E,
  F,
  N as N2,
  O as O2,
  d,
  e3 as e5,
  f as f3,
  f2 as f5,
  m,
  o2 as o5,
  p2 as p,
  p3 as p2
} from "./chunk-CWLDBABC.js";
import {
  O
} from "./chunk-B7AMZ4LC.js";
import {
  Q
} from "./chunk-LXEAJGDN.js";
import {
  i as i2
} from "./chunk-F6DB34F6.js";
import {
  _
} from "./chunk-TEFCZNLX.js";
import {
  f as f4,
  n as n6
} from "./chunk-DAJMNP5A.js";
import {
  g as g3,
  h,
  t as t3
} from "./chunk-SMESMUA5.js";
import {
  n2 as n4,
  t as t2
} from "./chunk-KQMSRGRD.js";
import {
  f,
  o as o3,
  u2
} from "./chunk-RS3I6DPK.js";
import {
  B,
  f as f2,
  g as g2
} from "./chunk-56ZY2WLU.js";
import {
  a as a4,
  i as i4,
  n2 as n5,
  o2 as o4
} from "./chunk-4XEYVSQH.js";
import {
  o2 as o6
} from "./chunk-VT5VIQO4.js";
import {
  i as i3
} from "./chunk-U3CE4V5Z.js";
import {
  a2 as a3
} from "./chunk-3ECQNGV5.js";
import {
  e as e4
} from "./chunk-TTPBKTNJ.js";
import {
  C as C2,
  n as n3,
  o as o2,
  r as r5,
  t,
  u
} from "./chunk-ZPAWXU2P.js";
import {
  e as e3
} from "./chunk-UZRZVWLE.js";
import {
  e as e2,
  i,
  n as n2
} from "./chunk-67CCONUO.js";
import {
  C
} from "./chunk-BZYXFNL4.js";
import {
  A,
  H,
  N,
  P,
  c,
  g,
  o,
  r as r4,
  s
} from "./chunk-TMFB3DKM.js";
import {
  l
} from "./chunk-H7XUEHGR.js";
import {
  r as r3
} from "./chunk-7FAVUXK2.js";
import {
  a as a2
} from "./chunk-WJUYGRZY.js";
import {
  a,
  e,
  n,
  r as r2
} from "./chunk-RACDQ3AL.js";
import {
  r
} from "./chunk-5TPMG26T.js";

// node_modules/@arcgis/core/views/3d/webgl-engine/shaders/DefaultMaterialTechnique.js
var w = class extends f4 {
  constructor() {
    super(...arguments), this.isSchematic = false, this.usePBR = false, this.mrrFactors = t2, this.hasVertexColors = false, this.hasSymbolColors = false, this.doubleSided = false, this.doubleSidedType = "normal", this.cullFace = e2.Back, this.isInstanced = false, this.hasInstancedColor = false, this.emissiveStrength = 0, this.emissiveSource = a2.Color, this.emissiveBaseColor = a, this.instancedDoublePrecision = false, this.normalType = a3.Attribute, this.receiveShadows = true, this.receiveAmbientOcclusion = true, this.castShadows = true, this.ambient = e(0.2, 0.2, 0.2), this.diffuse = e(0.8, 0.8, 0.8), this.externalColor = r3(1, 1, 1, 1), this.colorMixMode = "multiply", this.opacity = 1, this.layerOpacity = 1, this.origin = n(), this.hasSlicePlane = false, this.offsetTransparentBackfaces = false, this.vvSize = null, this.vvColor = null, this.vvOpacity = null, this.vvSymbolAnchor = null, this.vvSymbolRotationMatrix = null, this.modelTransformation = null, this.drivenOpacity = false, this.writeDepth = true, this.customDepthTest = n2.Less, this.textureAlphaMode = i.Blend, this.textureAlphaCutoff = o6, this.textureAlphaPremultiplied = false, this.renderOccluded = o4.Occlude, this.isDecoration = false;
  }
};
var k = class extends n6 {
  constructor() {
    super(...arguments), this.origin = n(), this.slicePlaneLocalOrigin = this.origin;
  }
};
var B2 = class extends g3 {
  constructor(e6, t4, i6 = new t3(Q, () => import("./DefaultMaterial.glsl-M5EAJQPV.js"))) {
    super(e6, t4, i6), this.type = "DefaultMaterialTechnique";
  }
  _makePipeline(e6, t4) {
    const { oitPass: i6, output: s2, transparent: r6, cullFace: o7, customDepthTest: a5, hasOccludees: n7 } = e6;
    return B({ blending: u(s2) && r6 ? p(i6) : null, culling: _2(e6) ? f2(o7) : null, depthTest: { func: E(i6, q(a5)) }, depthWrite: N2(e6), drawBuffers: h(s2, F(i6, s2)), colorWrite: g2, stencilWrite: n7 ? e5 : null, stencilTest: n7 ? t4 ? o5 : f5 : null, polygonOffset: m(e6) });
  }
  initializePipeline(e6) {
    return this._occludeePipelineState = this._makePipeline(e6, true), this._makePipeline(e6, false);
  }
  getPipeline(e6) {
    return e6 ? this._occludeePipelineState : super.getPipeline();
  }
};
function q(e6) {
  return e6 === n2.Lequal ? C.LEQUAL : C.LESS;
}
function _2(e6) {
  return e6.cullFace !== e2.None || !e6.hasSlicePlane && (!e6.transparent && !e6.doubleSidedMode);
}

// node_modules/@arcgis/core/views/3d/webgl-engine/shaders/DefaultMaterialTechniqueConfiguration.js
var d2 = class extends a4 {
  constructor(e6) {
    super(), this.spherical = e6, this.alphaDiscardMode = i.Opaque, this.doubleSidedMode = i2.None, this.pbrMode = n4.Disabled, this.cullFace = e2.None, this.normalType = a3.Attribute, this.customDepthTest = n2.Less, this.emissionSource = f.None, this.hasVertexColors = false, this.hasSymbolColors = false, this.hasVerticalOffset = false, this.hasColorTexture = false, this.hasMetallicRoughnessTexture = false, this.hasOcclusionTexture = false, this.hasNormalTexture = false, this.hasScreenSizePerspective = false, this.hasVertexTangents = false, this.hasOccludees = false, this.instancedDoublePrecision = false, this.hasModelTransformation = false, this.offsetBackfaces = false, this.vvSize = false, this.vvColor = false, this.receiveShadows = false, this.receiveAmbientOcclusion = false, this.textureAlphaPremultiplied = false, this.instanced = false, this.instancedColor = false, this.writeDepth = true, this.transparent = false, this.enableOffset = true, this.terrainDepthTest = false, this.cullAboveTerrain = false, this.snowCover = false, this.hasBloom = false, this.hasColorTextureTransform = false, this.hasEmissionTextureTransform = false, this.hasNormalTextureTransform = false, this.hasOcclusionTextureTransform = false, this.hasMetallicRoughnessTextureTransform = false, this.occlusionPass = false, this.hasVvInstancing = true, this.useCustomDTRExponentForWater = false, this.useFillLights = true, this.draped = false;
  }
  get textureCoordinateType() {
    return this.hasColorTexture || this.hasMetallicRoughnessTexture || this.emissionSource === f.Texture || this.hasOcclusionTexture || this.hasNormalTexture ? o3.Default : o3.None;
  }
  get objectAndLayerIdColorInstanced() {
    return this.instanced;
  }
  get discardInvisibleFragments() {
    return this.transparent;
  }
};
r([i3({ count: i.COUNT })], d2.prototype, "alphaDiscardMode", void 0), r([i3({ count: i2.COUNT })], d2.prototype, "doubleSidedMode", void 0), r([i3({ count: n4.COUNT })], d2.prototype, "pbrMode", void 0), r([i3({ count: e2.COUNT })], d2.prototype, "cullFace", void 0), r([i3({ count: a3.COUNT })], d2.prototype, "normalType", void 0), r([i3({ count: n2.COUNT })], d2.prototype, "customDepthTest", void 0), r([i3({ count: f.COUNT })], d2.prototype, "emissionSource", void 0), r([i3()], d2.prototype, "hasVertexColors", void 0), r([i3()], d2.prototype, "hasSymbolColors", void 0), r([i3()], d2.prototype, "hasVerticalOffset", void 0), r([i3()], d2.prototype, "hasColorTexture", void 0), r([i3()], d2.prototype, "hasMetallicRoughnessTexture", void 0), r([i3()], d2.prototype, "hasOcclusionTexture", void 0), r([i3()], d2.prototype, "hasNormalTexture", void 0), r([i3()], d2.prototype, "hasScreenSizePerspective", void 0), r([i3()], d2.prototype, "hasVertexTangents", void 0), r([i3()], d2.prototype, "hasOccludees", void 0), r([i3()], d2.prototype, "instancedDoublePrecision", void 0), r([i3()], d2.prototype, "hasModelTransformation", void 0), r([i3()], d2.prototype, "offsetBackfaces", void 0), r([i3()], d2.prototype, "vvSize", void 0), r([i3()], d2.prototype, "vvColor", void 0), r([i3()], d2.prototype, "receiveShadows", void 0), r([i3()], d2.prototype, "receiveAmbientOcclusion", void 0), r([i3()], d2.prototype, "textureAlphaPremultiplied", void 0), r([i3()], d2.prototype, "instanced", void 0), r([i3()], d2.prototype, "instancedColor", void 0), r([i3()], d2.prototype, "writeDepth", void 0), r([i3()], d2.prototype, "transparent", void 0), r([i3()], d2.prototype, "enableOffset", void 0), r([i3()], d2.prototype, "terrainDepthTest", void 0), r([i3()], d2.prototype, "cullAboveTerrain", void 0), r([i3()], d2.prototype, "snowCover", void 0), r([i3()], d2.prototype, "hasBloom", void 0), r([i3()], d2.prototype, "hasColorTextureTransform", void 0), r([i3()], d2.prototype, "hasEmissionTextureTransform", void 0), r([i3()], d2.prototype, "hasNormalTextureTransform", void 0), r([i3()], d2.prototype, "hasOcclusionTextureTransform", void 0), r([i3()], d2.prototype, "hasMetallicRoughnessTextureTransform", void 0);

// node_modules/@arcgis/core/views/3d/webgl-engine/shaders/RealisticTreeTechnique.js
var i5 = class extends B2 {
  constructor(r6, i6) {
    super(r6, i6, new t3(_, () => import("./RealisticTree.glsl-X3G3YJN6.js"))), this.type = "RealisticTreeTechnique";
  }
};

// node_modules/@arcgis/core/views/3d/webgl-engine/materials/DefaultMaterial.js
var W = class extends n5 {
  constructor(e6, r6) {
    super(e6, H2), this.materialType = "default", this.supportsEdges = true, this.intersectDraped = void 0, this.produces = /* @__PURE__ */ new Map([[A2.OPAQUE_MATERIAL, (e7) => (r5(e7) || o2(e7)) && !this.transparent], [A2.TRANSPARENT_MATERIAL, (e7) => (r5(e7) || o2(e7)) && this.transparent && this.parameters.writeDepth], [A2.TRANSPARENT_MATERIAL_WITHOUT_DEPTH, (e7) => (t(e7) || o2(e7)) && this.transparent && !this.parameters.writeDepth]]), this._vertexBufferLayout = F2(this.parameters), this._configuration = new d2(r6.spherical);
  }
  isVisibleForOutput(e6) {
    return e6 !== n3.Shadow && e6 !== n3.ShadowExcludeHighlight && e6 !== n3.ShadowHighlight || this.parameters.castShadows;
  }
  get visible() {
    const { layerOpacity: e6, colorMixMode: r6, opacity: t4, externalColor: s2 } = this.parameters;
    return e6 * ("replace" === r6 ? 1 : t4) * ("ignore" === r6 ? 1 : s2[3]) >= o6;
  }
  get _hasEmissiveBase() {
    return !!this.parameters.emissiveTextureId || !H(this.parameters.emissiveBaseColor, a);
  }
  get hasEmissions() {
    return this.parameters.emissiveStrength > 0 && (this.parameters.emissiveSource === a2.Emissive && this._hasEmissiveBase || this.parameters.emissiveSource === a2.Color);
  }
  getConfiguration(e6, r6) {
    const { parameters: t4, _configuration: s2 } = this, { treeRendering: a5, doubleSided: i6, doubleSidedType: o7 } = t4;
    return super.getConfiguration(e6, r6, this._configuration), s2.hasNormalTexture = !a5 && !!t4.normalTextureId, s2.hasColorTexture = !!t4.textureId, s2.hasVertexTangents = !a5 && t4.hasVertexTangents, s2.instanced = t4.isInstanced, s2.instancedDoublePrecision = t4.instancedDoublePrecision, s2.vvSize = !!t4.vvSize, s2.hasVerticalOffset = null != t4.verticalOffset, s2.hasScreenSizePerspective = null != t4.screenSizePerspective, s2.hasSlicePlane = t4.hasSlicePlane, s2.alphaDiscardMode = t4.textureAlphaMode, s2.normalType = a5 ? a3.Attribute : t4.normalType, s2.transparent = this.transparent, s2.writeDepth = t4.writeDepth, s2.customDepthTest = t4.customDepthTest ?? n2.Less, s2.hasOccludees = r6.hasOccludees, s2.cullFace = t4.hasSlicePlane ? e2.None : t4.cullFace, s2.cullAboveTerrain = r6.cullAboveTerrain, s2.hasModelTransformation = !a5 && null != t4.modelTransformation, s2.hasVertexColors = t4.hasVertexColors, s2.hasSymbolColors = t4.hasSymbolColors, s2.doubleSidedMode = a5 ? i2.WindingOrder : i6 && "normal" === o7 ? i2.View : i6 && "winding-order" === o7 ? i2.WindingOrder : i2.None, s2.instancedColor = t4.hasInstancedColor, u(e6) ? (s2.terrainDepthTest = r6.terrainDepthTest, s2.receiveShadows = t4.receiveShadows, s2.receiveAmbientOcclusion = t4.receiveAmbientOcclusion && null != r6.ssao) : (s2.terrainDepthTest = false, s2.receiveShadows = s2.receiveAmbientOcclusion = false), s2.vvColor = !!t4.vvColor, s2.textureAlphaPremultiplied = !!t4.textureAlphaPremultiplied, s2.pbrMode = t4.usePBR ? t4.isSchematic ? n4.Schematic : n4.Normal : n4.Disabled, s2.hasMetallicRoughnessTexture = !a5 && !!t4.metallicRoughnessTextureId, s2.emissionSource = a5 ? f.None : null != t4.emissiveTextureId && t4.emissiveSource === a2.Emissive ? f.Texture : t4.usePBR ? t4.emissiveSource === a2.Emissive ? f.EmissiveColor : f.SymbolColor : f.None, s2.hasOcclusionTexture = !a5 && !!t4.occlusionTextureId, s2.offsetBackfaces = !(!this.transparent || !t4.offsetTransparentBackfaces), s2.oitPass = r6.oitPass, s2.enableOffset = r6.camera.relativeElevation < O2, s2.snowCover = r6.snowCover, s2.hasBloom = C2(e6), s2.hasColorTextureTransform = !!t4.colorTextureTransformMatrix, s2.hasNormalTextureTransform = !!t4.normalTextureTransformMatrix, s2.hasEmissionTextureTransform = !!t4.emissiveTextureTransformMatrix, s2.hasOcclusionTextureTransform = !!t4.occlusionTextureTransformMatrix, s2.hasMetallicRoughnessTextureTransform = !!t4.metallicRoughnessTextureTransformMatrix, s2;
  }
  intersect(e6, c2, m2, u3, h2, d3) {
    if (null != this.parameters.verticalOffset) {
      const e7 = m2.camera;
      o($, c2[12], c2[13], c2[14]);
      let d4 = null;
      switch (m2.viewingMode) {
        case l.Global:
          d4 = A(X, $);
          break;
        case l.Local:
          d4 = s(X, K);
      }
      let f6 = 0;
      const T = c(ee, $, e7.eye), v = r4(T), x = g(T, T, 1 / v);
      let g4 = null;
      this.parameters.screenSizePerspective && (g4 = P(d4, x)), f6 += i4(e7, v, this.parameters.verticalOffset, g4 ?? 0, this.parameters.screenSizePerspective), g(d4, d4, f6), N(Z, d4, m2.transform.inverseRotation), u3 = c(Y, u3, Z), h2 = c(J, h2, Z);
    }
    p2(e6, m2, u3, h2, d(m2.verticalOffset), d3);
  }
  createGLMaterial(e6) {
    return new G(e6);
  }
  createBufferWriter() {
    return new f3(this._vertexBufferLayout);
  }
  get transparent() {
    return Q2(this.parameters);
  }
};
var G = class extends u2 {
  constructor(e6) {
    super({ ...e6, ...e6.material.parameters });
  }
  beginSlot(e6) {
    this._material.setParameters({ receiveShadows: e6.shadowMap.enabled });
    const t4 = this._material.parameters;
    this.updateTexture(t4.textureId);
    const s2 = e6.camera.viewInverseTransposeMatrix;
    return o(t4.origin, s2[3], s2[7], s2[11]), this._material.setParameters(this.textureBindParameters), this.getTechnique(t4.treeRendering ? i5 : B2, e6);
  }
};
var H2 = class extends w {
  constructor() {
    super(...arguments), this.treeRendering = false, this.hasVertexTangents = false;
  }
};
function F2(e6) {
  const r6 = O().vec3f(e3.POSITION);
  e6.normalType === a3.Compressed ? r6.vec2i16(e3.NORMALCOMPRESSED, { glNormalized: true }) : r6.vec3f(e3.NORMAL), e6.hasVertexTangents && r6.vec4f(e3.TANGENT);
  return (e6.textureId || e6.normalTextureId || e6.metallicRoughnessTextureId || e6.emissiveTextureId || e6.occlusionTextureId) && r6.vec2f16(e3.UV0), e6.hasVertexColors && r6.vec4u8(e3.COLOR), e6.hasSymbolColors && r6.vec4u8(e3.SYMBOLCOLOR), e4() && r6.vec4u8(e3.OLIDCOLOR), r6;
}
function Q2(e6) {
  const { drivenOpacity: r6, opacity: t4, externalColor: [s2, a5, i6, o7], layerOpacity: n7, texture: l2, textureId: c2, textureAlphaMode: m2, colorMixMode: u3 } = e6;
  return r6 || t4 < 1 && "replace" !== u3 || o7 < 1 && "ignore" !== u3 || n7 < 1 || (null != l2 || null != c2) && m2 !== i.Opaque && m2 !== i.Mask && "replace" !== u3;
}
var Y = n();
var J = n();
var K = r2(0, 0, 1);
var X = n();
var Z = n();
var $ = n();
var ee = n();

export {
  k,
  W,
  H2 as H,
  Q2 as Q
};
//# sourceMappingURL=chunk-RODRBIXX.js.map
