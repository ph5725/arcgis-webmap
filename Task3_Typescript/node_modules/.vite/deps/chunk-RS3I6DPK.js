import {
  e as e3,
  o as o3
} from "./chunk-QY6CN52R.js";
import {
  o as o4,
  o2 as o5
} from "./chunk-VT5VIQO4.js";
import {
  c
} from "./chunk-2ZADANKQ.js";
import {
  s as s2
} from "./chunk-R2Q57RB2.js";
import {
  s
} from "./chunk-PEF2Q5HH.js";
import {
  C,
  n as n3,
  u
} from "./chunk-ZPAWXU2P.js";
import {
  o as o2
} from "./chunk-KQOOCDUQ.js";
import {
  e as e2
} from "./chunk-FYCLQ3SU.js";
import {
  o
} from "./chunk-DQG3SJJO.js";
import {
  i
} from "./chunk-QNHQE3IL.js";
import {
  n as n2,
  t as t2
} from "./chunk-6EOJZ6DP.js";
import {
  a
} from "./chunk-DRLVYVHZ.js";
import {
  e
} from "./chunk-UZRZVWLE.js";
import {
  O
} from "./chunk-67CCONUO.js";
import {
  S,
  t2 as t
} from "./chunk-GZ2P4SCJ.js";
import {
  n
} from "./chunk-FXKORAMT.js";

// node_modules/@arcgis/core/views/3d/webgl-engine/core/shaderLibrary/attributes/TextureCoordinateAttribute.glsl.js
var o6;
function d(d2, a2) {
  switch (a2.textureCoordinateType) {
    case o6.Default:
      return d2.attributes.add(e.UV0, "vec2"), d2.varyings.add("vuv0", "vec2"), void d2.vertex.code.add(n2`void forwardTextureCoordinates() { vuv0 = uv0; }`);
    case o6.Atlas:
      return d2.attributes.add(e.UV0, "vec2"), d2.attributes.add(e.UVREGION, "vec4"), d2.varyings.add("vuv0", "vec2"), d2.varyings.add("vuvRegion", "vec4"), void d2.vertex.code.add(n2`void forwardTextureCoordinates() {
vuv0 = uv0;
vuvRegion = uvRegion;
}`);
    default:
      n(a2.textureCoordinateType);
    case o6.None:
      return void d2.vertex.code.add(n2`void forwardTextureCoordinates() {}`);
    case o6.COUNT:
      return;
  }
}
!function(e7) {
  e7[e7.None = 0] = "None", e7[e7.Default = 1] = "Default", e7[e7.Atlas = 2] = "Atlas", e7[e7.COUNT = 3] = "COUNT";
}(o6 || (o6 = {}));

// node_modules/@arcgis/core/views/3d/webgl-engine/core/shaderLibrary/util/TextureAtlasLookup.glsl.js
function e4(e7) {
  e7.fragment.code.add(n2`vec4 textureAtlasLookup(sampler2D tex, vec2 textureCoordinates, vec4 atlasRegion) {
vec2 atlasScale = atlasRegion.zw - atlasRegion.xy;
vec2 uvAtlas = fract(textureCoordinates) * atlasScale + atlasRegion.xy;
float maxdUV = 0.125;
vec2 dUVdx = clamp(dFdx(textureCoordinates), -maxdUV, maxdUV) * atlasScale;
vec2 dUVdy = clamp(dFdy(textureCoordinates), -maxdUV, maxdUV) * atlasScale;
return textureGrad(tex, uvAtlas, dUVdx, dUVdy);
}`);
}

// node_modules/@arcgis/core/views/3d/webgl-engine/core/shaderLibrary/attributes/VertexTextureCoordinates.glsl.js
function u2(u5, l2) {
  const { textureCoordinateType: s3 } = l2;
  if (s3 === o6.None || s3 === o6.COUNT) return;
  u5.include(d, l2);
  const n4 = s3 === o6.Atlas;
  n4 && u5.include(e4), u5.fragment.code.add(n2`
    vec4 textureLookup(sampler2D tex, vec2 uv) {
      return ${n4 ? "textureAtlasLookup(tex, uv, vuvRegion)" : "texture(tex, uv)"};
    }
  `);
}

// node_modules/@arcgis/core/views/3d/webgl-engine/core/shaderModules/FloatDrawUniform.js
var e5 = class extends i {
  constructor(o8, e7) {
    super(o8, "float", a.Draw, (r, s3, t3) => r.setUniform1f(o8, e7(s3, t3)));
  }
};

// node_modules/@arcgis/core/views/3d/webgl-engine/lib/GLMaterial.js
var e6 = class {
  constructor(t3) {
    this._material = t3.material, this._techniques = t3.techniques, this._output = t3.output;
  }
  dispose() {
  }
  get _stippleTextures() {
    return this._techniques.context.stippleTextures;
  }
  get _markerTextures() {
    return this._techniques.context.markerTextures;
  }
  getTechnique(t3, e7) {
    return this._techniques.get(t3, this._material.getConfiguration(this._output, e7));
  }
  ensureResources(e7) {
    return O.LOADED;
  }
};

// node_modules/@arcgis/core/views/3d/webgl-engine/lib/GLTextureMaterial.js
var u3 = class extends e6 {
  constructor(t3) {
    super(t3), this._numLoading = 0, this._disposed = false, this._textures = t3.textures, this.updateTexture(t3.textureId), this._acquire(t3.normalTextureId, (t4) => this._textureNormal = t4), this._acquire(t3.emissiveTextureId, (t4) => this._textureEmissive = t4), this._acquire(t3.occlusionTextureId, (t4) => this._textureOcclusion = t4), this._acquire(t3.metallicRoughnessTextureId, (t4) => this._textureMetallicRoughness = t4);
  }
  dispose() {
    super.dispose(), this._texture = t(this._texture), this._textureNormal = t(this._textureNormal), this._textureEmissive = t(this._textureEmissive), this._textureOcclusion = t(this._textureOcclusion), this._textureMetallicRoughness = t(this._textureMetallicRoughness), this._disposed = true;
  }
  ensureResources(t3) {
    return 0 === this._numLoading ? O.LOADED : O.LOADING;
  }
  get textureBindParameters() {
    return new o7(this._texture?.glTexture ?? null, this._textureNormal?.glTexture ?? null, this._textureEmissive?.glTexture ?? null, this._textureOcclusion?.glTexture ?? null, this._textureMetallicRoughness?.glTexture ?? null);
  }
  updateTexture(e7) {
    null != this._texture && e7 === this._texture.id || (this._texture = t(this._texture), this._acquire(e7, (t3) => this._texture = t3));
  }
  _acquire(s3, i2) {
    if (null == s3) return void i2(null);
    const r = this._textures.acquire(s3);
    if (S(r)) return ++this._numLoading, void r.then((e7) => {
      if (this._disposed) return t(e7), void i2(null);
      i2(e7);
    }).finally(() => --this._numLoading);
    i2(r);
  }
};
var l = class extends c {
  constructor(t3 = null) {
    super(), this.textureEmissive = t3;
  }
};
var o7 = class extends l {
  constructor(t3, e7, s3, i2, r, u5, l2) {
    super(s3), this.texture = t3, this.textureNormal = e7, this.textureOcclusion = i2, this.textureMetallicRoughness = r, this.scale = u5, this.normalTextureTransformMatrix = l2;
  }
};

// node_modules/@arcgis/core/views/3d/webgl-engine/core/shaderLibrary/output/Emissions.glsl.js
var f;
!function(s3) {
  s3[s3.None = 0] = "None", s3[s3.SymbolColor = 1] = "SymbolColor", s3[s3.EmissiveColor = 2] = "EmissiveColor", s3[s3.Texture = 3] = "Texture", s3[s3.COUNT = 4] = "COUNT";
}(f || (f = {}));
function c2(u5, v) {
  if (!u(v.output)) return;
  const { emissionSource: c3, hasEmissiveTextureTransform: p, bindType: x } = v, C2 = c3 === f.Texture;
  C2 && (u5.include(u2, v), u5.fragment.uniforms.add(x === a.Pass ? new s2("texEmission", (s3) => s3.textureEmissive) : new o("texEmission", (s3) => s3.textureEmissive)));
  const g = c3 === f.EmissiveColor || C2;
  g && u5.fragment.uniforms.add(x === a.Pass ? new e2("emissiveBaseColor", (s3) => s3.emissiveBaseColor) : new o2("emissiveBaseColor", (s3) => s3.emissiveBaseColor));
  const h = c3 !== f.None;
  h && u5.fragment.uniforms.add(x === a.Pass ? new s("emissiveStrength", (s3) => s3.emissiveStrength) : new e5("emissiveStrength", (s3) => s3.emissiveStrength));
  const T = c3 === f.SymbolColor;
  u5.fragment.code.add(n2`
    vec4 getEmissions(vec3 symbolColor) {
      vec4 emissions = ${g ? "vec4(emissiveBaseColor, 1.0)" : T ? "vec4(symbolColor, 1.0)" : "vec4(0.0)"};
      ${t2(C2, `emissions *= textureLookup(texEmission, ${p ? "emissiveUV" : "vuv0"});
         emissions.w = emissions.rgb == vec3(0.0) ? 0.0: emissions.w;`)}
      ${t2(h, "emissions.rgb *= emissiveStrength;")}
      return emissions;
    }
  `);
}

// node_modules/@arcgis/core/views/3d/webgl-engine/shaders/OutputColorHighlightOID.glsl.js
function u4(u5, d2) {
  u5.include(o4, d2), u5.include(c2, d2), u5.fragment.include(e3);
  const { output: p, oitPass: c3, discardInvisibleFragments: m, snowCover: C2 } = d2, g = p === n3.ObjectAndLayerIdColor, h = C(p), v = u(p) && c3 === o3.ColorAlpha, b = u(p) && c3 !== o3.ColorAlpha;
  let j = 0;
  (b || h || v) && u5.outputs.add("fragColor", "vec4", j++), h && u5.outputs.add("fragEmission", "vec4", j++), v && u5.outputs.add("fragAlpha", "float", j++), u5.fragment.code.add(n2`
    void outputColorHighlightOID(vec4 finalColor, const in vec3 vWorldPosition, vec3 emissiveBaseColor ${t2(C2, ", float snow")}) {
      ${t2(g, "finalColor.a = 1.0;")}

      ${t2(m, `if (finalColor.a < ${n2.float(o5)}) { discard; }`)}

      finalColor = applySlice(finalColor, vWorldPosition);
      ${t2(v, n2`fragColor = premultiplyAlpha(finalColor);
             fragAlpha = finalColor.a;`)}
      ${t2(b, "fragColor = finalColor;")}
      ${t2(h, `fragEmission = ${t2(C2, "mix(finalColor.a * getEmissions(emissiveBaseColor), vec4(0.0), snow);", "finalColor.a * getEmissions(emissiveBaseColor);")}`)}
      calculateOcclusionAndOutputHighlight();
      ${t2(g, "outputObjectAndLayerIdColor();")}
    }
  `);
}

export {
  o6 as o,
  d,
  u2 as u,
  e6 as e,
  u3 as u2,
  o7 as o2,
  f,
  u4 as u3
};
//# sourceMappingURL=chunk-RS3I6DPK.js.map
