import {
  l
} from "./chunk-7KOC3Z4A.js";
import {
  t
} from "./chunk-QXLW5W5A.js";
import {
  g
} from "./chunk-6A36XX2Q.js";
import {
  te
} from "./chunk-WKCCXG3E.js";
import {
  v
} from "./chunk-XGWAEOLO.js";
import {
  z
} from "./chunk-DJJNSAUR.js";
import {
  e,
  u
} from "./chunk-MUKDJQWB.js";

// node_modules/@arcgis/core/symbols/support/previewCIMSymbol.js
var s = new g(null);
var m = e(t.size);
var h = e(t.maxSize);
var c = e(t.lineWidth);
var y = 1;
async function u2(e2, t2, i) {
  const o = t2?.size;
  let l2 = null != o && "object" == typeof o && "width" in o ? o.width : o, r = null != o && "object" == typeof o && "height" in o ? o.height : o;
  if (!l2 || !r) if ("esriGeometryPolygon" === i) l2 = r = t2.maxSize ? Math.min(t2.maxSize, m) : m;
  else {
    const o2 = await g2(e2, t2, i);
    o2 && (l2 = o2.width, r = o2.height), "esriGeometryPolyline" === i && (l2 = t2.maxSize ? Math.min(t2.maxSize, c) : c), l2 = null != l2 && isFinite(l2) ? Math.min(l2, h) : m, r = null != r && isFinite(r) ? Math.max(Math.min(r, h), y) : m;
  }
  return "legend" === t2.style && "esriGeometryPolyline" === i && (l2 = c), { width: l2, height: r };
}
async function g2(e2, t2 = {}, o) {
  const n = t2.cimOptions || t2;
  o ??= n.geometryType || z(e2?.data?.symbol);
  const { feature: a, fieldMap: m2, viewParams: h2 } = n, c2 = await v.resolveSymbolOverrides(e2.data, a, null, m2, o, null, h2);
  if (!c2) return null;
  (e2 = e2.clone()).data = { type: "CIMSymbolReference", symbol: c2 }, e2.data.primitiveOverrides = void 0;
  const y2 = [];
  return te.fetchResources(c2, s.resourceManager, y2), te.fetchFonts(c2, s.resourceManager, y2), y2.length > 0 && await Promise.all(y2), te.getEnvelope(c2, null, s.resourceManager);
}
async function d(i, o = {}) {
  const { node: l2, opacity: n, symbolConfig: m2 } = o, h2 = null != m2 && "object" == typeof m2 && "isSquareFill" in m2 && m2.isSquareFill, c2 = o.cimOptions || o, y2 = c2.geometryType || z(i?.data?.symbol), g3 = await u2(i, o, y2), { feature: d2, fieldMap: f } = c2, p = o?.geometry || h2 || "esriGeometryPolygon" !== y2 ? "preview" : "legend";
  let w = g3;
  const b = g3;
  if (o?.geometry && ("esriGeometryPolygon" === y2 || "esriGeometryPolyline" === y2)) {
    const i2 = 200;
    if (u(g3.width) < i2 || u(g3.height) < i2) {
      const e2 = g3.width > g3.height ? e(i2) * g3.height / g3.width : e(i2);
      w = { width: g3.width > g3.height ? e(i2) : e(i2) * g3.width / g3.height, height: e2 };
    }
  }
  const M = await s.rasterizeCIMSymbolAsync(i, d2, w, p, f, y2, null, c2.viewParams, c2.allowScalingUp, o?.geometry?.toJSON());
  if (!M) return null;
  const { width: S, height: v2 } = M, j = document.createElement("canvas");
  j.width = S, j.height = v2;
  j.getContext("2d").putImageData(M, 0, 0);
  const x = u(b.width), z2 = u(b.height), P = new Image(x, z2);
  P.src = j.toDataURL(), P.ariaLabel = o.ariaLabel ?? null, P.alt = o.ariaLabel ?? "", null != n && (P.style.opacity = `${n}`);
  let C = P;
  if (null != o.effectView) {
    const e2 = { shape: { type: "image", x: 0, y: 0, width: x, height: z2, src: P.src }, fill: null, stroke: null, offset: [0, 0] };
    C = l([[e2]], [x, z2], o);
  }
  return l2 && C && l2.appendChild(C), C;
}

export {
  g2 as g,
  d
};
//# sourceMappingURL=chunk-RV6ZLP5Q.js.map
