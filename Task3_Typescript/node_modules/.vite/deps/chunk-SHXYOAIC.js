import {
  t as t2
} from "./chunk-5DVJFLIL.js";
import {
  _
} from "./chunk-VRSDJVZH.js";
import {
  r as r2
} from "./chunk-VLNFWLNQ.js";
import {
  u as u3
} from "./chunk-67CCONUO.js";
import {
  s as s3
} from "./chunk-YSRSL2SU.js";
import {
  G,
  S,
  a
} from "./chunk-H6F6O2KE.js";
import {
  L,
  M,
  P,
  l as l2
} from "./chunk-BZYXFNL4.js";
import {
  o
} from "./chunk-YIV2QKTZ.js";
import {
  e3 as e
} from "./chunk-N3XLUQJI.js";
import {
  n as n2
} from "./chunk-VOLWOTEG.js";
import {
  u as u2
} from "./chunk-ZWFY3WY5.js";
import {
  Z,
  tt
} from "./chunk-LQFTAGIV.js";
import {
  l2 as l,
  m2 as m,
  r2 as r,
  s as s2,
  u3 as u
} from "./chunk-GZ2P4SCJ.js";
import {
  i2 as i,
  s
} from "./chunk-XWG6QGFK.js";
import {
  n2 as n,
  t2 as t
} from "./chunk-FXKORAMT.js";

// node_modules/@arcgis/core/libs/basisu/BasisUTranscoder.js
function i2() {
  return t3 ??= (async () => {
    const i5 = await import("./basis_transcoder-6P6VNQDM.js"), t4 = await i5.default({ locateFile: (i6) => n2(`esri/libs/basisu/${i6}`) });
    return t4.initializeBasis(), t4;
  })(), t3;
}
var t3;

// node_modules/@arcgis/core/views/3d/webgl-engine/lib/BasisUtil.js
var l3 = null;
var o2 = null;
async function g() {
  return null == o2 && (o2 = i2(), l3 = await o2), o2;
}
function u4(e3, t4) {
  if (null == l3) return e3.byteLength;
  const n4 = new l3.BasisFile(new Uint8Array(e3)), s5 = T(n4) ? m2(n4.getNumLevels(0), n4.getHasAlpha(), n4.getImageWidth(0, 0), n4.getImageHeight(0, 0), t4) : 0;
  return n4.close(), n4.delete(), s5;
}
function c(e3, t4) {
  if (null == l3) return e3.byteLength;
  const n4 = new l3.KTX2File(new Uint8Array(e3)), s5 = E(n4) ? m2(n4.getLevels(), n4.getHasAlpha(), n4.getWidth(), n4.getHeight(), t4) : 0;
  return n4.close(), n4.delete(), s5;
}
function m2(e3, t4, s5, r4, i5) {
  const l5 = G(t4 ? l2.COMPRESSED_RGBA8_ETC2_EAC : l2.COMPRESSED_RGB8_ETC2), o5 = i5 && e3 > 1 ? (4 ** e3 - 1) / (3 * 4 ** (e3 - 1)) : 1;
  return Math.ceil(s5 * r4 * l5 * o5);
}
function T(e3) {
  return e3.getNumImages() >= 1 && !e3.isUASTC();
}
function E(e3) {
  return e3.getFaces() >= 1 && e3.isETC1S();
}
async function h(e3, t4, n4) {
  null == l3 && (l3 = await g());
  const s5 = new l3.BasisFile(new Uint8Array(n4));
  if (!T(s5)) return null;
  s5.startTranscoding();
  const r4 = p(e3, t4, s5.getNumLevels(0), s5.getHasAlpha(), s5.getImageWidth(0, 0), s5.getImageHeight(0, 0), (e4, t5) => s5.getImageTranscodedSizeInBytes(0, e4, t5), (e4, t5, n5) => s5.transcodeImage(n5, 0, e4, t5, 0, 0));
  return s5.close(), s5.delete(), r4;
}
async function _2(e3, t4, n4) {
  null == l3 && (l3 = await g());
  const s5 = new l3.KTX2File(new Uint8Array(n4));
  if (!E(s5)) return null;
  s5.startTranscoding();
  const r4 = p(e3, t4, s5.getLevels(), s5.getHasAlpha(), s5.getWidth(), s5.getHeight(), (e4, t5) => s5.getImageTranscodedSizeInBytes(e4, 0, 0, t5), (e4, t5, n5) => s5.transcodeImage(n5, e4, 0, 0, t5, 0, -1, -1));
  return s5.close(), s5.delete(), r4;
}
function p(e3, a4, l5, o5, g3, u6, c3, m4) {
  const { compressedTextureETC: T3, compressedTextureS3TC: E3 } = e3.capabilities, [h4, _4] = T3 ? o5 ? [_.ETC2_RGBA, l2.COMPRESSED_RGBA8_ETC2_EAC] : [_.ETC1_RGB, l2.COMPRESSED_RGB8_ETC2] : E3 ? o5 ? [_.BC3_RGBA, l2.COMPRESSED_RGBA_S3TC_DXT5_EXT] : [_.BC1_RGB, l2.COMPRESSED_RGB_S3TC_DXT1_EXT] : [_.RGBA32, M.RGBA], p3 = a4.hasMipmap ? l5 : Math.min(1, l5), A = [];
  for (let t4 = 0; t4 < p3; t4++) A.push(new Uint8Array(c3(t4, h4))), m4(t4, h4, A[t4]);
  return a4.internalFormat = _4, a4.hasMipmap = A.length > 1, a4.samplingMode = a4.hasMipmap ? L.LINEAR_MIPMAP_LINEAR : L.LINEAR, a4.width = g3, a4.height = u6, new S(e3, a4, { type: "compressed", levels: A });
}

// node_modules/@arcgis/core/views/3d/webgl-engine/lib/DDSUtil.js
var o3 = () => i.getLogger("esri.views.3d.webgl-engine.lib.DDSUtil");
var a2 = 542327876;
var i3 = 131072;
var s4 = 4;
function l4(e3) {
  return e3.charCodeAt(0) + (e3.charCodeAt(1) << 8) + (e3.charCodeAt(2) << 16) + (e3.charCodeAt(3) << 24);
}
function u5(e3) {
  return String.fromCharCode(255 & e3, e3 >> 8 & 255, e3 >> 16 & 255, e3 >> 24 & 255);
}
var c2 = l4("DXT1");
var h2 = l4("DXT3");
var m3 = l4("DXT5");
var f = 31;
var d = 0;
var p2 = 1;
var g2 = 2;
var D = 3;
var C = 4;
var w = 7;
var T2 = 20;
var _3 = 21;
function E2(e3, r4, o5) {
  const a4 = S2(o5, r4.hasMipmap ?? false);
  if (null == a4) throw new Error("DDS texture data is null");
  const { textureData: i5, internalFormat: s5, width: l5, height: u6 } = a4;
  return r4.samplingMode = i5.levels.length > 1 ? L.LINEAR_MIPMAP_LINEAR : L.LINEAR, r4.hasMipmap = i5.levels.length > 1, r4.internalFormat = s5, r4.width = l5, r4.height = u6, new S(e3, r4, i5);
}
function S2(e3, t4) {
  const n4 = new Int32Array(e3.buffer, e3.byteOffset, f);
  if (n4[d] !== a2) return o3().error("Invalid magic number in DDS header"), null;
  if (!(n4[T2] & s4)) return o3().error("Unsupported format, must contain a FourCC code"), null;
  const l5 = n4[_3];
  let E3, S3;
  switch (l5) {
    case c2:
      E3 = 8, S3 = l2.COMPRESSED_RGB_S3TC_DXT1_EXT;
      break;
    case h2:
      E3 = 16, S3 = l2.COMPRESSED_RGBA_S3TC_DXT3_EXT;
      break;
    case m3:
      E3 = 16, S3 = l2.COMPRESSED_RGBA_S3TC_DXT5_EXT;
      break;
    default:
      return o3().error("Unsupported FourCC code:", u5(l5)), null;
  }
  let b = 1, A = n4[C], M2 = n4[D];
  (3 & A || 3 & M2) && (o3().warn("Rounding up compressed texture size to nearest multiple of 4."), A = A + 3 & -4, M2 = M2 + 3 & -4);
  const x = A, R = M2;
  let X, I;
  n4[g2] & i3 && false !== t4 && (b = Math.max(1, n4[w]));
  let v = e3.byteOffset + n4[p2] + 4;
  const y = [];
  for (let r4 = 0; r4 < b; ++r4) I = (A + 3 >> 2) * (M2 + 3 >> 2) * E3, X = new Uint8Array(e3.buffer, v, I), y.push(X), v += I, A = Math.max(1, A >> 1), M2 = Math.max(1, M2 >> 1);
  return { textureData: { type: "compressed", levels: y }, internalFormat: S3, width: x, height: R };
}

// node_modules/@arcgis/core/views/3d/webgl-engine/lib/textureUtils.js
var e2 = 16;
function n3(t4, n4) {
  return n4 = Math.floor(n4 / e2) * e2, Math.min(Math.round(t4 / e2) * e2, n4);
}
function r3(t4, n4) {
  return n4 = Math.floor(n4 / e2) * e2, Math.min(Math.ceil(t4 / e2) * e2, n4);
}
function o4(t4, e3) {
  const [n4, r4] = a3(t4, e3);
  return t4.width === n4 && t4.height === r4 ? t4 : i4(t4, n4, r4);
}
function a3({ width: t4, height: e3 }, { maxPreferredTexturePixels: r4, maxTextureSize: o5 }) {
  const a4 = Math.max(t4, e3), i5 = t4 * e3;
  if (a4 <= o5 && i5 <= r4) return [t4, e3];
  const h4 = Math.min(Math.sqrt(r4 / i5), o5 / a4);
  return [n3(Math.round(t4 * h4), o5), n3(Math.round(e3 * h4), o5)];
}
function i4(t4, e3, n4) {
  if (t4 instanceof ImageData) return i4(h3(t4), e3, n4);
  const r4 = document.createElement("canvas");
  r4.width = e3, r4.height = n4;
  return r4.getContext("2d").drawImage(t4, 0, 0, r4.width, r4.height), r4;
}
function h3(e3) {
  const n4 = document.createElement("canvas");
  n4.width = e3.width, n4.height = e3.height;
  const r4 = n4.getContext("2d");
  if (null == r4) throw new s("texture:context-failed", "Failed to create 2d context from HTMLCanvasElement");
  return r4.putImageData(e3, 0, 0), n4;
}

// node_modules/@arcgis/core/views/3d/webgl-engine/lib/Texture.js
var L2 = class {
  constructor(e3, r4) {
    this._data = e3, this.id = e(), this.events = new o(), this._parameters = { ...N, ...r4 }, this._startPreload(e3);
  }
  dispose() {
    this.unload(), this._data = this.update = void 0;
  }
  _startPreload(e3) {
    e3 instanceof HTMLVideoElement ? (this.update = (t4) => this._update(e3, t4), this._startPreloadVideoElement(e3)) : e3 instanceof HTMLImageElement && this._startPreloadImageElement(e3);
  }
  _startPreloadVideoElement(e3) {
    if (!(Z(e3.src) || "auto" === e3.preload && e3.crossOrigin) && (e3.preload = "auto", e3.crossOrigin = "anonymous", e3.src = e3.src, e3.paused && e3.autoplay)) {
      const t4 = [];
      r2(e3, (e4) => t4.push(e4)).then(() => {
        e3.play();
      }).finally(() => t4.forEach((e4) => e4.remove()));
    }
  }
  _startPreloadImageElement(e3) {
    tt(e3.src) || Z(e3.src) || e3.crossOrigin || (e3.crossOrigin = "anonymous", e3.src = e3.src);
  }
  _createDescriptor(e3) {
    const t4 = new a();
    return t4.wrapMode = this._parameters.wrap ?? P.REPEAT, t4.flipped = !this._parameters.noUnpackFlip, t4.samplingMode = this._parameters.mipmap ? L.LINEAR_MIPMAP_LINEAR : L.LINEAR, t4.hasMipmap = !!this._parameters.mipmap, t4.preMultiplyAlpha = !!this._parameters.preMultiplyAlpha, t4.maxAnisotropy = this._parameters.maxAnisotropy ?? (this._parameters.mipmap ? e3.parameters.maxMaxAnisotropy : 1), t4;
  }
  get glTexture() {
    return this._glTexture ?? this._emptyTexture;
  }
  get loaded() {
    return null != this._glTexture;
  }
  get usedMemory() {
    return this._glTexture?.usedMemory || C2(this._data, this._parameters);
  }
  load(e3) {
    if (this._loadingPromise) return this._loadingPromise;
    if (this._glTexture) return this._glTexture;
    const t4 = this._data;
    return null == t4 ? (this._glTexture = new S(e3, this._createDescriptor(e3), null), this._glTexture) : (this._emptyTexture = e3.emptyTexture, this._parameters.reloadable || (this._data = void 0), "string" == typeof t4 ? this._loadFromURL(e3, t4) : t4 instanceof Image ? this._loadFromImageElement(e3, t4) : t4 instanceof HTMLVideoElement ? this._loadFromVideoElement(e3, t4) : t4 instanceof ImageData || t4 instanceof HTMLCanvasElement ? this._loadFromImage(e3, t4) : t(t4) && this._parameters.encoding === u3.DDS_ENCODING ? this._loadFromDDSData(e3, t4) : n(t4) && this._parameters.encoding === u3.DDS_ENCODING ? this._loadFromDDSData(e3, new Uint8Array(t4)) : (n(t4) || t(t4)) && this._parameters.encoding === u3.KTX2_ENCODING ? this._loadFromKTX2(e3, t4) : (n(t4) || t(t4)) && this._parameters.encoding === u3.BASIS_ENCODING ? this._loadFromBasis(e3, t4) : t(t4) ? this._loadFromPixelData(e3, t4) : n(t4) ? this._loadFromPixelData(e3, new Uint8Array(t4)) : null);
  }
  _update(e3, t4) {
    return null == this._glTexture || e3.readyState < HTMLMediaElement.HAVE_CURRENT_DATA || t4 === e3.currentTime ? t4 : (this._glTexture.setData(e3), this._glTexture.descriptor.hasMipmap && this._glTexture.generateMipmap(), this._parameters.updateCallback && this._parameters.updateCallback(), e3.currentTime);
  }
  _loadFromDDSData(e3, t4) {
    return this._glTexture = E2(e3, this._createDescriptor(e3), t4), this._emptyTexture = null, this._glTexture;
  }
  _loadFromKTX2(e3, t4) {
    return this._loadAsync(() => _2(e3, this._createDescriptor(e3), t4).then((e4) => (this._glTexture = e4, e4)));
  }
  _loadFromBasis(e3, t4) {
    return this._loadAsync(() => h(e3, this._createDescriptor(e3), t4).then((e4) => (this._glTexture = e4, e4)));
  }
  _loadFromPixelData(e3, t4) {
    s3(this._parameters.width > 0 && this._parameters.height > 0);
    const r4 = this._createDescriptor(e3);
    return r4.pixelFormat = 1 === this._parameters.components ? M.LUMINANCE : 3 === this._parameters.components ? M.RGB : M.RGBA, r4.pixelFormat !== M.RGB && r4.pixelFormat !== M.RGBA || (r4.compress = this._parameters.compressionOptions), r4.width = this._parameters.width ?? 0, r4.height = this._parameters.height ?? 0, this._glTexture = new S(e3, r4, t4), this._glTexture;
  }
  _loadFromURL(e3, t4) {
    return this._loadAsync(async (r4) => {
      const s5 = await t2(t4, { signal: r4 });
      return s2(r4), this._loadFromImage(e3, s5);
    });
  }
  _loadFromImageElement(e3, t4) {
    return t4.complete ? this._loadFromImage(e3, t4) : this._loadAsync(async (r4) => {
      const s5 = await u2(t4, t4.src, false, r4);
      return s2(r4), this._loadFromImage(e3, s5);
    });
  }
  _loadFromVideoElement(e3, t4) {
    return t4.readyState >= HTMLMediaElement.HAVE_CURRENT_DATA ? this._loadFromImage(e3, t4) : this._loadFromVideoElementAsync(e3, t4);
  }
  _loadFromVideoElementAsync(t4, r4) {
    return this._loadAsync((i5) => new Promise((n4, l5) => {
      const m4 = () => {
        r4.removeEventListener("loadeddata", h4), r4.removeEventListener("error", p3), l(d2);
      }, h4 = () => {
        r4.readyState >= HTMLMediaElement.HAVE_CURRENT_DATA && (m4(), n4(this._loadFromImage(t4, r4)));
      }, p3 = (t5) => {
        m4(), l5(t5 || new s("texture:load-error", "Failed to load video"));
      };
      r4.addEventListener("loadeddata", h4), r4.addEventListener("error", p3);
      const d2 = m(i5, () => p3(u()));
    }));
  }
  _loadFromImage(e3, t4) {
    let r4 = t4;
    r4 instanceof HTMLVideoElement || (r4 = o4(r4, e3.parameters));
    const s5 = P2(r4);
    this._parameters.width = s5.width, this._parameters.height = s5.height;
    const i5 = this._createDescriptor(e3);
    return i5.pixelFormat = 3 === this._parameters.components ? M.RGB : M.RGBA, i5.width = s5.width, i5.height = s5.height, i5.compress = this._parameters.compressionOptions, this._glTexture = new S(e3, i5, r4), this._emptyTexture = null, this.events.emit("loaded"), this._glTexture;
  }
  _loadAsync(e3) {
    const t4 = new AbortController();
    this._loadingController = t4;
    const r4 = e3(t4.signal);
    this._loadingPromise = r4;
    const s5 = () => {
      this._loadingController === t4 && (this._loadingController = null), this._loadingPromise === r4 && (this._loadingPromise = null), this._emptyTexture = null;
    };
    return r4.then(s5, s5), r4;
  }
  unload() {
    if (this._glTexture = r(this._glTexture), this._emptyTexture = null, null != this._loadingController) {
      const e3 = this._loadingController;
      this._loadingController = null, this._loadingPromise = null, e3.abort();
    }
    this.events.emit("unloaded");
  }
  get parameters() {
    return this._parameters;
  }
};
function C2(e3, t4) {
  if (null == e3) return 0;
  if (n(e3) || t(e3)) return t4.encoding === u3.KTX2_ENCODING ? c(e3, !!t4.mipmap) : t4.encoding === u3.BASIS_ENCODING ? u4(e3, !!t4.mipmap) : e3.byteLength;
  const { width: r4, height: s5 } = e3 instanceof Image || e3 instanceof ImageData || e3 instanceof HTMLCanvasElement || e3 instanceof HTMLVideoElement ? P2(e3) : t4;
  return (t4.mipmap ? 4 / 3 : 1) * r4 * s5 * (t4.components || 4) || 0;
}
function P2(e3) {
  return e3 instanceof HTMLVideoElement ? { width: e3.videoWidth, height: e3.videoHeight } : e3;
}
var N = { wrap: { s: P.REPEAT, t: P.REPEAT }, mipmap: true, noUnpackFlip: false, preMultiplyAlpha: false };

export {
  n3 as n,
  r3 as r,
  L2 as L
};
//# sourceMappingURL=chunk-SHXYOAIC.js.map
