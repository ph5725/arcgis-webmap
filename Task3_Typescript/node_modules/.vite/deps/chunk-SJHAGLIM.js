import {
  o as o2
} from "./chunk-HCYE6OE4.js";
import {
  o
} from "./chunk-YIV2QKTZ.js";
import {
  m
} from "./chunk-N3XLUQJI.js";
import {
  a2
} from "./chunk-JUAD7TJ6.js";
import {
  r
} from "./chunk-5TPMG26T.js";
import {
  H
} from "./chunk-ZWFY3WY5.js";
import {
  L
} from "./chunk-GZ2P4SCJ.js";
import {
  a
} from "./chunk-GWNLQRNM.js";

// node_modules/@arcgis/core/versionManagement/support/versionManagementUtils.js
var t = o2();
var n = /* @__PURE__ */ new Map();
var s = /* @__PURE__ */ new Map();
async function o3(r2, t2, s2) {
  if (!r2 || !s2) return false;
  if (!t2) return true;
  const a4 = new URL(r2).host;
  let o4 = n.get(a4);
  if (!o4) {
    const t3 = r2.replace(/\/FeatureServer/i, "/VersionManagementServer").replace(/\/\d*$/, "");
    o4 = (await H(t3, { responseType: "json", query: { f: "json" } })).data.defaultVersionName;
  }
  return o4 === t2;
}
async function i(e, r2, n2 = false) {
  if (!e || !r2) return true;
  const a4 = e.replace(/\/FeatureServer/i, "/VersionManagementServer").replace(/\/\d*$/, ""), o4 = s.get(a4)?.entries();
  if (o4) {
    for (const [s2, i2] of o4) if (i2.name === r2) {
      const e2 = !i2.stack?.hasForwardEdits();
      if (!e2 && n2) {
        const [{ deleteForwardEdits: e3 }, { default: r3 }] = await Promise.all([import("./deleteForwardEdits-HFGXBDXP.js"), import("./DeleteForwardEditsParameters-TQD7INGG.js")]), n3 = await e3(a4, s2, new r3({ sessionId: t, moment: i2.moment }));
        return n3.success && i2.stack?.clearForwardEdits(), n3.success;
      }
      return e2;
    }
  }
  return true;
}
function c(e, r2) {
  if (!e) return false;
  const t2 = e.replace(/\/FeatureServer/i, "/VersionManagementServer").replace(/\/\d*$/, ""), n2 = s.get(t2)?.entries();
  if (n2) {
    for (const [s2, a4] of n2) if (a4.name === r2) {
      return "edit" === a4.lockType;
    }
  }
  return false;
}

// node_modules/@arcgis/core/layers/mixins/EditBusLayer.js
var a3 = new o.EventEmitter();
function l(t2) {
  return a3.on("apply-edits", new WeakRef(t2));
}
function h(t2) {
  return a3.on("update-moment", new WeakRef(t2));
}
function c2(t2, e, i2 = null, r2 = false) {
  const d = L();
  return r2 = null == e || r2, a3.emit("apply-edits", { serviceUrl: t2, layerId: e, gdbVersion: i2, mayReceiveServiceEdits: r2, result: d.promise }), d;
}
var m2 = Symbol();
function p(t2) {
  return null != t2 && "object" == typeof t2 && m2 in t2;
}
function b(t2) {
  return null != t2 && "object" == typeof t2 && "gdbVersion" in t2;
}
function g(t2, e, i2) {
  const s2 = new URL(t2).host, r2 = n.get(s2), d = (t3) => !t3 || t3 === r2;
  return d(e) && d(i2) || e === i2;
}
var F = (e) => {
  var _a;
  var s2;
  let n2 = (_a = class extends e {
    constructor(...t2) {
      super(...t2), this[s2] = true, this._applyEditsHandler = (t3) => {
        const { serviceUrl: e2, layerId: s3, gdbVersion: r2, mayReceiveServiceEdits: d, result: o4 } = t3, n3 = e2 === this.url, a4 = null != s3 && null != this.layerId && s3 === this.layerId, l2 = b(this), h2 = b(this) && g(e2, r2, this.gdbVersion);
        if (!n3 || l2 && !h2 || !a4 && !d) return;
        const c3 = o4.then((t4) => {
          if (this.lastEditsEventDate = /* @__PURE__ */ new Date(), a4 && (t4.addedFeatures.length || t4.updatedFeatures.length || t4.deletedFeatures.length || t4.addedAttachments.length || t4.updatedAttachments.length || t4.deletedAttachments.length)) return this.emit("edits", a(t4)), t4;
          const s4 = t4.editedFeatures?.find(({ layerId: t5 }) => t5 === this.layerId);
          if (s4) {
            const { adds: e3, updates: r3, deletes: d3 } = s4.editedFeatures, o5 = { edits: null, addedAttachments: [], deletedAttachments: [], updatedAttachments: [], addedFeatures: e3 ? e3.map(({ attributes: t5 }) => ({ objectId: this.objectIdField && t5[this.objectIdField], globalId: this.globalIdField && t5[this.globalIdField] })) : [], deletedFeatures: d3 ? d3.map(({ attributes: t5 }) => ({ objectId: this.objectIdField && t5[this.objectIdField], globalId: this.globalIdField && t5[this.globalIdField] })) : [], updatedFeatures: r3 ? r3.map(({ current: { attributes: t5 } }) => ({ objectId: this.objectIdField && t5[this.objectIdField], globalId: this.globalIdField && t5[this.globalIdField] })) : [], editedFeatures: a(t4.editedFeatures), exceededTransferLimit: false, historicMoment: a(t4.historicMoment) };
            return this.emit("edits", o5), o5;
          }
          const d2 = { edits: null, addedAttachments: [], deletedAttachments: [], updatedAttachments: [], addedFeatures: [], deletedFeatures: [], updatedFeatures: [], editedFeatures: a(t4.editedFeatures), exceededTransferLimit: false, historicMoment: a(t4.historicMoment) };
          return "historicMoment" in this && this._shouldUpdateHistoricMoment(e2, r2, d2.historicMoment) && this.emit("edits", d2), d2;
        }).then((t4) => ("historicMoment" in this && this._shouldUpdateHistoricMoment(e2, r2, t4.historicMoment) && (this.historicMoment = t4.historicMoment), t4));
        this.emit("apply-edits", { result: c3 });
      }, this._updateMomentHandler = (t3) => {
        const { serviceUrl: e2, gdbVersion: i2, moment: s3 } = t3, r2 = e2 === this.url, d = b(this), o4 = b(this) && g(e2, i2, this.gdbVersion), n3 = b(this) && !g(e2, this.gdbVersion, null);
        r2 && d && o4 && n3 && "historicMoment" in this && this.historicMoment !== s3 && (this.historicMoment = s3);
      }, this.when().then(() => {
        this.addHandles(l(this._applyEditsHandler)), "historicMoment" in this && this.addHandles(h(this._updateMomentHandler));
      }, () => {
      });
    }
    _shouldUpdateHistoricMoment(t2, e2, i2) {
      return "historicMoment" in this && this.historicMoment !== i2 && c(t2, e2);
    }
  }, s2 = m2, _a);
  return r([m()], n2.prototype, "lastEditsEventDate", void 0), n2 = r([a2("esri.layers.mixins.EditBusLayer")], n2), n2;
};

export {
  t,
  o3 as o,
  i,
  c,
  l,
  h,
  c2,
  p,
  g,
  F
};
//# sourceMappingURL=chunk-SJHAGLIM.js.map
