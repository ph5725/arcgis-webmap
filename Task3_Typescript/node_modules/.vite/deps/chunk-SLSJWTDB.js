import {
  f,
  o
} from "./chunk-RS3I6DPK.js";
import {
  n as n2
} from "./chunk-5JV4N5AU.js";
import {
  a,
  s as s2
} from "./chunk-4XEYVSQH.js";
import {
  w
} from "./chunk-ENL2JUSP.js";
import {
  i
} from "./chunk-U3CE4V5Z.js";
import {
  s
} from "./chunk-PEF2Q5HH.js";
import {
  e as e3
} from "./chunk-FYCLQ3SU.js";
import {
  e as e2
} from "./chunk-LWV5GP6V.js";
import {
  n
} from "./chunk-6EOJZ6DP.js";
import {
  e
} from "./chunk-UZRZVWLE.js";
import {
  r
} from "./chunk-5TPMG26T.js";

// node_modules/@arcgis/core/views/3d/webgl-engine/shaders/LineMarkerTechniqueConfiguration.js
var s3;
var p;
!function(e4) {
  e4[e4.Draped = 0] = "Draped", e4[e4.Screen = 1] = "Screen", e4[e4.World = 2] = "World", e4[e4.COUNT = 3] = "COUNT";
}(s3 || (s3 = {})), function(e4) {
  e4[e4.Center = 0] = "Center", e4[e4.Tip = 1] = "Tip", e4[e4.COUNT = 2] = "COUNT";
}(p || (p = {}));
var a2 = class extends a {
  constructor() {
    super(...arguments), this.space = s3.Screen, this.anchor = p.Center, this.occluder = false, this.writeDepth = false, this.hideOnShortSegments = false, this.hasCap = false, this.hasTip = false, this.vvSize = false, this.vvColor = false, this.vvOpacity = false, this.hasOccludees = false, this.terrainDepthTest = false, this.cullAboveTerrain = false, this.textureCoordinateType = o.None, this.emissionSource = f.None, this.discardInvisibleFragments = true, this.occlusionPass = false, this.hasVvInstancing = true, this.hasSliceTranslatedView = true, this.objectAndLayerIdColorInstanced = false, this.overlayEnabled = false, this.snowCover = false;
  }
  get draped() {
    return this.space === s3.Draped;
  }
};
r([i({ count: s3.COUNT })], a2.prototype, "space", void 0), r([i({ count: p.COUNT })], a2.prototype, "anchor", void 0), r([i()], a2.prototype, "occluder", void 0), r([i()], a2.prototype, "writeDepth", void 0), r([i()], a2.prototype, "hideOnShortSegments", void 0), r([i()], a2.prototype, "hasCap", void 0), r([i()], a2.prototype, "hasTip", void 0), r([i()], a2.prototype, "vvSize", void 0), r([i()], a2.prototype, "vvColor", void 0), r([i()], a2.prototype, "vvOpacity", void 0), r([i()], a2.prototype, "hasOccludees", void 0), r([i()], a2.prototype, "terrainDepthTest", void 0), r([i()], a2.prototype, "cullAboveTerrain", void 0);

// node_modules/@arcgis/core/views/3d/webgl-engine/core/shaderLibrary/attributes/RibbonVertexPosition.glsl.js
var o2 = 8;
function c(c2, l) {
  const { vertex: s5, attributes: n5 } = c2;
  s5.uniforms.add(new s("intrinsicWidth", (i2) => i2.width)), l.vvSize ? (n5.add(e.SIZEFEATUREATTRIBUTE, "float"), s5.uniforms.add(new e3("vvSizeMinSize", (i2) => i2.vvSize.minSize), new e3("vvSizeMaxSize", (i2) => i2.vvSize.maxSize), new e3("vvSizeOffset", (i2) => i2.vvSize.offset), new e3("vvSizeFactor", (i2) => i2.vvSize.factor), new e3("vvSizeFallback", (i2) => i2.vvSize.fallback)), s5.code.add(n`float getSize() {
if (isnan(sizeFeatureAttribute)) {
return vvSizeFallback.x;
}
return intrinsicWidth * clamp(vvSizeOffset + sizeFeatureAttribute * vvSizeFactor, vvSizeMinSize, vvSizeMaxSize).x;
}`)) : (n5.add(e.SIZE, "float"), s5.code.add(n`float getSize(){
return intrinsicWidth * size;
}`)), l.vvOpacity ? (n5.add(e.OPACITYFEATUREATTRIBUTE, "float"), s5.constants.add("vvOpacityNumber", "int", 8), s5.uniforms.add(new s2("vvOpacityValues", (i2) => i2.vvOpacity.values, o2), new s2("vvOpacityOpacities", (i2) => i2.vvOpacity.opacityValues, o2), new s("vvOpacityFallback", (i2) => i2.vvOpacity.fallback)), s5.code.add(n`float interpolateOpacity(float value){
if (isnan(value)) {
return vvOpacityFallback;
}
if (value <= vvOpacityValues[0]) {
return vvOpacityOpacities[0];
}
for (int i = 1; i < vvOpacityNumber; ++i) {
if (vvOpacityValues[i] >= value) {
float f = (value - vvOpacityValues[i-1]) / (vvOpacityValues[i] - vvOpacityValues[i-1]);
return mix(vvOpacityOpacities[i-1], vvOpacityOpacities[i], f);
}
}
return vvOpacityOpacities[vvOpacityNumber - 1];
}
vec4 applyOpacity( vec4 color ){
return vec4(color.xyz, interpolateOpacity(opacityFeatureAttribute));
}`)) : s5.code.add(n`vec4 applyOpacity( vec4 color ){
return color;
}`), l.vvColor ? (c2.include(n2, l), n5.add(e.COLORFEATUREATTRIBUTE, "float"), s5.code.add(n`vec4 getColor(){
return applyOpacity(interpolateVVColor(colorFeatureAttribute));
}`)) : (n5.add(e.COLOR, "vec4"), s5.code.add(n`vec4 getColor(){
return applyOpacity(color);
}`));
}

// node_modules/@arcgis/core/views/3d/support/engineContent/marker.js
var m = 64;
var s4 = m / 2;
var n3 = s4 / 5;
var p2 = m / n3;
var w2 = 0.25;

// node_modules/@arcgis/core/views/3d/webgl-engine/core/shaderLibrary/shading/MarkerSizing.glsl.js
function n4(n5, i2) {
  const d = n5.vertex;
  w(d), null == d.uniforms.get("markerScale") && d.constants.add("markerScale", "float", 1), d.constants.add("markerSizePerLineWidth", "float", p2).code.add(n`float getLineWidth() {
return max(getSize(), 1.0) * pixelRatio;
}
float getScreenMarkerSize() {
return markerSizePerLineWidth * markerScale * getLineWidth();
}`), i2.space === s3.World && (d.constants.add("maxSegmentLengthFraction", "float", 0.45), d.uniforms.add(new e2("perRenderPixelRatio", (e4) => e4.camera.perRenderPixelRatio)), d.code.add(n`bool areWorldMarkersHidden(vec4 pos, vec4 other) {
vec3 midPoint = mix(pos.xyz, other.xyz, 0.5);
float distanceToCamera = length(midPoint);
float screenToWorldRatio = perRenderPixelRatio * distanceToCamera * 0.5;
float worldMarkerSize = getScreenMarkerSize() * screenToWorldRatio;
float segmentLen = length(pos.xyz - other.xyz);
return worldMarkerSize > maxSegmentLengthFraction * segmentLen;
}
float getWorldMarkerSize(vec4 pos) {
float distanceToCamera = length(pos.xyz);
float screenToWorldRatio = perRenderPixelRatio * distanceToCamera * 0.5;
return getScreenMarkerSize() * screenToWorldRatio;
}`));
}

export {
  s3 as s,
  p,
  a2 as a,
  c,
  m,
  s4 as s2,
  w2 as w,
  n4 as n
};
//# sourceMappingURL=chunk-SLSJWTDB.js.map
