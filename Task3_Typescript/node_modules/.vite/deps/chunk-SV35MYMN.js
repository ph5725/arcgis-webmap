import {
  l as l2,
  t
} from "./chunk-VVMAWXMO.js";
import {
  i
} from "./chunk-ICVOVIUL.js";
import {
  S
} from "./chunk-SP5E3FR4.js";
import {
  c
} from "./chunk-2XBUTZI3.js";
import {
  n
} from "./chunk-IAKXH7PU.js";
import {
  n as n2
} from "./chunk-HFUGSKPL.js";
import {
  _
} from "./chunk-SHYE33QH.js";
import {
  c as c2
} from "./chunk-5Y3EUPZN.js";
import {
  m as m3,
  u
} from "./chunk-HNQNVI5C.js";
import {
  m as m2
} from "./chunk-G34OBNLT.js";
import {
  o
} from "./chunk-YIV2QKTZ.js";
import {
  f,
  l
} from "./chunk-A3VAC24F.js";
import {
  b,
  m
} from "./chunk-N3XLUQJI.js";
import {
  a2
} from "./chunk-JUAD7TJ6.js";
import {
  r
} from "./chunk-5TPMG26T.js";
import {
  a
} from "./chunk-GWNLQRNM.js";

// node_modules/@arcgis/core/views/draw/support/HighlightHelper.js
var a3 = class extends b {
  constructor(e2) {
    super(e2), this._layerViewCache = /* @__PURE__ */ new Map(), this.highlightName = c2, this.view = null;
  }
  add(e2, r3) {
    const t3 = !e2 || Array.isArray(e2) ? e2 : [e2];
    if (!t3?.length) return;
    const i3 = r3 ?? this.highlightName;
    t3.forEach((e3) => this._highlight(e3, i3));
  }
  getKeyForFeature(e2) {
    const r3 = e2.getObjectId();
    return null != r3 ? `oid:${r3}` : `uid:${e2.uid}`;
  }
  remove(e2) {
    const r3 = !e2 || Array.isArray(e2) ? e2 : [e2];
    r3?.length && r3.forEach((e3) => e3 && this._removeHighlight(this.getKeyForFeature(e3)));
  }
  removeByKey(e2) {
    e2?.forEach((e3) => e3 && this._removeHighlight(e3));
  }
  removeAll() {
    this.removeAllHandles();
  }
  update(e2, r3) {
    this.remove(e2), this.add(e2, r3);
  }
  _highlight(e2, r3) {
    const t3 = e2.layer ?? e2.sourceLayer;
    if (!t3) return;
    const i3 = this._layerViewCache.get(t3);
    if (i3) return void this.addHandles(i3.highlight(e2, { name: r3 }), this.getKeyForFeature(e2));
    const s2 = l2(this.view, t3);
    n(s2) && (this._layerViewCache.set(t3, s2), this.addHandles(s2.highlight(e2, { name: r3 }), this.getKeyForFeature(e2)));
  }
  _removeHighlight(e2) {
    this.removeHandles(e2);
  }
};
r([m()], a3.prototype, "_layerViewCache", void 0), r([m()], a3.prototype, "highlightName", void 0), r([m()], a3.prototype, "view", void 0), a3 = r([a2("esri.views.draw.support.HighlightHelper")], a3);

// node_modules/@arcgis/core/views/draw/support/input/GraphicMoverEvents.js
var t2 = class {
  constructor(t3, i3, s2, h2, e2) {
    this.graphic = t3, this.index = i3, this.x = s2, this.y = h2, this.viewEvent = e2, this.type = "graphic-click";
  }
};
var i2 = class {
  constructor(t3, i3, s2, h2, e2) {
    this.graphic = t3, this.index = i3, this.x = s2, this.y = h2, this.viewEvent = e2, this.type = "graphic-double-click";
  }
};
var s = class {
  constructor(t3, i3, s2, h2, e2, r3, c4, a5, n4, p) {
    this.graphic = t3, this.allGraphics = i3, this.index = s2, this.x = h2, this.y = e2, this.dx = r3, this.dy = c4, this.totalDx = a5, this.totalDy = n4, this.viewEvent = p, this.defaultPrevented = false, this.type = "graphic-move-start";
  }
  preventDefault() {
    this.defaultPrevented = true;
  }
};
var h = class {
  constructor(t3, i3, s2, h2, e2, r3, c4, a5, n4, p) {
    this.graphic = t3, this.allGraphics = i3, this.index = s2, this.x = h2, this.y = e2, this.dx = r3, this.dy = c4, this.totalDx = a5, this.totalDy = n4, this.viewEvent = p, this.defaultPrevented = false, this.type = "graphic-move";
  }
  preventDefault() {
    this.defaultPrevented = true;
  }
};
var e = class {
  constructor(t3, i3, s2, h2, e2, r3, c4, a5, n4, p) {
    this.graphic = t3, this.allGraphics = i3, this.index = s2, this.x = h2, this.y = e2, this.dx = r3, this.dy = c4, this.totalDx = a5, this.totalDy = n4, this.viewEvent = p, this.defaultPrevented = false, this.type = "graphic-move-stop";
  }
  preventDefault() {
    this.defaultPrevented = true;
  }
};
var r2 = class {
  constructor(t3, i3, s2, h2, e2) {
    this.graphic = t3, this.index = i3, this.x = s2, this.y = h2, this.viewEvent = e2, this.type = "graphic-pointer-over";
  }
};
var c3 = class {
  constructor(t3, i3, s2, h2, e2) {
    this.graphic = t3, this.index = i3, this.x = s2, this.y = h2, this.viewEvent = e2, this.type = "graphic-pointer-out";
  }
};
var a4 = class {
  constructor(t3, i3, s2, h2, e2) {
    this.graphic = t3, this.index = i3, this.x = s2, this.y = h2, this.viewEvent = e2, this.type = "graphic-pointer-down";
  }
};
var n3 = class {
  constructor(t3, i3, s2, h2, e2) {
    this.graphic = t3, this.index = i3, this.x = s2, this.y = h2, this.viewEvent = e2, this.type = "graphic-pointer-up";
  }
};

// node_modules/@arcgis/core/views/draw/support/GraphicMover.js
var M = "indicator-symbols";
var E = class extends o.EventedAccessor {
  constructor(i3) {
    super(i3), this._activeGraphic = null, this._dragEvent = null, this._hoverGraphic = null, this._indicators = [], this._initialDragGeometry = null, this._manipulators = [], this._layerViews = null, this.type = "graphic-mover", this.callbacks = { onGraphicClick() {
    }, onGraphicDoubleClick() {
    }, onGraphicMoveStart() {
    }, onGraphicMove() {
    }, onGraphicMoveStop() {
    }, onGraphicPointerOver() {
    }, onGraphicPointerOut() {
    }, onGraphicPointerDown() {
    }, onGraphicPointerUp() {
    } }, this.enableMoveAllGraphics = false, this.graphics = [], this.highlightName = null, this.highlightsEnabled = false, this.indicatorsEnabled = false, this._defaultLayer = new c({ listMode: "hide", internal: true, title: "GraphicMover highlight layer" }), this.layer = this._defaultLayer, this.view = null;
  }
  initialize() {
    t(this.view, this.layer), this._highlightHelper = new a3({ view: this.view }), this.refresh(), this.addHandles([l(() => this.graphics.length, () => this.refresh()), f(() => this.view?.ready, () => {
      this.addHandles([this.view.on("immediate-click", (i3) => this._clickHandler(i3), _.TOOL), this.view.on("double-click", (i3) => this._doubleClickHandler(i3), _.TOOL), this.view.on("pointer-down", (i3) => this._pointerDownHandler(i3), _.TOOL), this.view.on("pointer-move", (i3) => this._pointerMoveHandler(i3), _.TOOL), this.view.on("pointer-up", (i3) => this._pointerUpHandler(i3), _.TOOL), this.view.on("drag", (i3) => this._dragHandler(i3), _.TOOL), this.view.on("key-down", (i3) => this._keyDownHandler(i3), _.TOOL)]);
    }, { once: true, initial: true }), l(() => this.view, (i3) => {
      this._highlightHelper.removeAll(), this._highlightHelper.view = i3;
    }), l(() => [this.highlightsEnabled, this.highlightName], () => {
      this._highlightHelper?.removeAll(), this._setUpHighlights();
    })]);
  }
  destroy() {
    this._removeIndicators(), this.view.map?.remove(this.layer), this._defaultLayer.destroy(), this.reset(), this._manipulators.forEach((i3) => i3.destroy()), this._manipulators = null;
  }
  get state() {
    const i3 = this.view.ready, t3 = this.graphics.length > 0, e2 = this._activeGraphic;
    return i3 && t3 ? e2 ? "moving" : "active" : i3 ? "ready" : "disabled";
  }
  refresh() {
    this.reset(), this._setup();
  }
  reset() {
    this._activeGraphic = null, this._hoverGraphic = null, this._dragEvent = null, this._highlightHelper.removeAll();
  }
  updateGeometry(i3, t3) {
    const e2 = this.graphics[i3];
    e2 && (e2.set("geometry", t3), this._setUpIndicators());
  }
  _setup() {
    this._setUpHighlights(), this._setUpIndicators(), this._setUpManipulators(), this._syncLayerViews();
  }
  _clickHandler(i3) {
    const t3 = this._findTargetGraphic(n2(i3));
    if (t3) {
      const e2 = new t2(t3, this.graphics.indexOf(t3), i3.x, i3.y, i3);
      this.emit("graphic-click", e2), this.callbacks.onGraphicClick && this.callbacks.onGraphicClick(e2);
    }
  }
  _doubleClickHandler(i3) {
    const t3 = this._findTargetGraphic(n2(i3));
    if (t3) {
      const e2 = new i2(t3, this.graphics.indexOf(t3), i3.x, i3.y, i3);
      this.emit("graphic-double-click", e2), this.callbacks.onGraphicDoubleClick && this.callbacks.onGraphicDoubleClick(e2);
    }
  }
  _pointerDownHandler(i3) {
    const t3 = this._findTargetGraphic(n2(i3));
    if (t3) {
      this._activeGraphic = t3;
      const { x: e2, y: s2 } = i3, r3 = new a4(t3, this.graphics.indexOf(t3), e2, s2, i3);
      this.emit("graphic-pointer-down", r3), this.callbacks.onGraphicPointerDown && this.callbacks.onGraphicPointerDown(r3);
    } else this._activeGraphic = null;
  }
  _pointerUpHandler(i3) {
    if (this._activeGraphic) {
      const { x: t3, y: e2 } = i3, s2 = this.graphics.indexOf(this._activeGraphic), r3 = new n3(this._activeGraphic, s2, t3, e2, i3);
      this.emit("graphic-pointer-up", r3), this.callbacks.onGraphicPointerUp && this.callbacks.onGraphicPointerUp(r3);
    }
  }
  _pointerMoveHandler(i3) {
    if (this._dragEvent) return;
    const t3 = this._findTargetGraphic(n2(i3));
    if (t3) {
      const { x: e2, y: s2 } = i3;
      if (this._hoverGraphic) {
        if (this._hoverGraphic === t3) return;
        const r4 = this.graphics.indexOf(this._hoverGraphic), h3 = new c3(this.graphics[r4], r4, e2, s2, i3);
        this._hoverGraphic = null, this.emit("graphic-pointer-out", h3), this.callbacks.onGraphicPointerOut && this.callbacks.onGraphicPointerOut(h3);
      }
      const r3 = this.graphics.indexOf(t3), h2 = new r2(t3, r3, e2, s2, i3);
      return this._hoverGraphic = t3, this.emit("graphic-pointer-over", h2), void (this.callbacks.onGraphicPointerOver && this.callbacks.onGraphicPointerOver(h2));
    }
    if (this._hoverGraphic) {
      const { x: t4, y: e2 } = i3, s2 = this.graphics.indexOf(this._hoverGraphic), r3 = new c3(this.graphics[s2], s2, t4, e2, i3);
      this._hoverGraphic = null, this.emit("graphic-pointer-out", r3), this.callbacks.onGraphicPointerOut && this.callbacks.onGraphicPointerOut(r3);
    }
  }
  _dragHandler(i3) {
    if ("start" !== i3.action && !this._dragEvent || !this._activeGraphic?.geometry) return;
    "start" === i3.action && this._removeIndicators(), i3.stopPropagation();
    const { action: t3, x: s2, y: r3 } = i3, h2 = this.graphics.indexOf(this._activeGraphic), a5 = this._dragEvent ? s2 - this._dragEvent.x : 0, o2 = this._dragEvent ? r3 - this._dragEvent.y : 0, c4 = s2 - i3.origin.x, n4 = r3 - i3.origin.y, l3 = "start" === t3 ? this._activeGraphic.geometry : this._initialDragGeometry, d = i(l3, c4, n4, this.view);
    if (this._activeGraphic.geometry = d, this.enableMoveAllGraphics && this.graphics.forEach((i4) => {
      i4 !== this._activeGraphic && (i4.geometry = i(i4.geometry, a5, o2, this.view));
    }), this._dragEvent = i3, "start" === t3) {
      this._initialDragGeometry = a(l3);
      const t4 = new s(this._activeGraphic, this.graphics, h2, s2, r3, a5, o2, c4, n4, i3);
      this.emit("graphic-move-start", t4), this.callbacks.onGraphicMoveStart && this.callbacks.onGraphicMoveStart(t4), t4.defaultPrevented && this._activeGraphic.set("geometry", l3);
    } else if ("update" === t3) {
      const t4 = new h(this._activeGraphic, this.graphics, h2, s2, r3, a5, o2, c4, n4, i3);
      this.emit("graphic-move", t4), this.callbacks.onGraphicMove && this.callbacks.onGraphicMove(t4), t4.defaultPrevented && (this._activeGraphic.geometry = l3);
    } else {
      const t4 = new e(this._activeGraphic, this.graphics, h2, s2, r3, a5, o2, c4, n4, i3);
      this._dragEvent = null, this._activeGraphic = null, this._setUpIndicators(), this.emit("graphic-move-stop", t4), this.callbacks.onGraphicMoveStop && this.callbacks.onGraphicMoveStop(t4), t4.defaultPrevented && (this.graphics[h2].set("geometry", this._initialDragGeometry), this._setUpIndicators()), this._initialDragGeometry = null;
    }
  }
  _keyDownHandler(i3) {
    "a" !== i3.key && "d" !== i3.key && "n" !== i3.key || "moving" !== this.state || i3.stopPropagation();
  }
  _findTargetGraphic(i3) {
    const t3 = this.view.toMap(i3), e2 = this.graphics;
    let s2 = null, r3 = Number.MAX_VALUE;
    this._syncLayerViews();
    const h2 = this._layerViews.flatMap((i4) => "graphicsViews" in i4 ? Array.from(i4.graphicsViews(), (i5) => i5.hitTest(t3)).flat() : i4.graphicsView.hitTest(t3)).filter((i4) => e2.includes(i4)).sort((i4, t4) => e2.indexOf(i4) - e2.indexOf(t4));
    return h2.length ? h2[0] : (this._manipulators.forEach((t4) => {
      const e3 = t4.intersectionDistance(i3);
      null != e3 && e3 < r3 && (r3 = e3, s2 = t4.graphic);
    }), s2);
  }
  _syncLayerViews() {
    this._layerViews = [];
    const i3 = /* @__PURE__ */ new Set();
    for (const t3 of this.graphics) {
      const e2 = l2(this.view, t3.layer);
      e2 && i3.add(e2);
    }
    this._layerViews = [...i3];
  }
  _setUpManipulators() {
    const { graphics: i3, view: t3 } = this;
    this._manipulators.forEach((i4) => i4.destroy()), this._manipulators = i3.length ? i3.map((i4) => new S({ graphic: i4, view: t3 })) : [];
  }
  _setUpHighlights() {
    this.highlightsEnabled && this.graphics.length && this._highlightHelper.add(this.graphics, this.highlightName);
  }
  _setUpIndicators() {
    if (this._removeIndicators(), this.indicatorsEnabled) {
      for (const i3 of this.graphics) {
        const t3 = i3.clone();
        t3.symbol = U(i3), this._indicators.push(t3), this.addHandles(l(() => i3.symbol, () => this._setUpIndicators()), M);
      }
      this.layer.addMany(this._indicators);
    }
  }
  _removeIndicators() {
    this.removeHandles(M), this._indicators.length && (this.layer.removeMany(this._indicators), this._indicators.forEach((i3) => i3.destroy()), this._indicators = []);
  }
};
function U(i3) {
  const t3 = 12;
  if (null == i3.symbol) return null;
  switch (i3.symbol.type) {
    case "cim":
      return new u({ style: "circle", size: t3, color: [0, 0, 0, 0], outline: { color: [255, 127, 0, 1], width: 1 } });
    case "picture-marker": {
      const { xoffset: t4, yoffset: e2, height: s2, width: r3 } = i3.symbol, h2 = s2 === r3 ? r3 : Math.max(s2, r3);
      return new u({ xoffset: t4, yoffset: e2, size: h2, style: "square", color: [0, 0, 0, 0], outline: { color: [255, 127, 0, 1], width: 1 } });
    }
    case "simple-marker": {
      const { xoffset: t4, yoffset: e2, size: s2, style: r3 } = i3.symbol;
      return new u({ xoffset: t4, yoffset: e2, style: "circle" === r3 ? "circle" : "square", size: s2 + 2, color: [0, 0, 0, 0], outline: { color: [255, 127, 0, 1], width: 1 } });
    }
    case "simple-fill":
      return new m3({ color: [0, 0, 0, 0], outline: { style: "dash", color: [255, 127, 0, 1], width: 1 } });
    case "simple-line":
      return new m2({ color: [255, 127, 0, 1], style: "dash", width: 1 });
    case "text": {
      const { xoffset: e2, yoffset: s2 } = i3.symbol;
      return new u({ xoffset: e2, yoffset: s2, size: t3, color: [0, 0, 0, 0], outline: { color: [255, 127, 0, 1], width: 1 } });
    }
    default:
      return null;
  }
}
r([m()], E.prototype, "_activeGraphic", void 0), r([m({ readOnly: true })], E.prototype, "type", void 0), r([m()], E.prototype, "callbacks", void 0), r([m()], E.prototype, "enableMoveAllGraphics", void 0), r([m()], E.prototype, "graphics", void 0), r([m()], E.prototype, "highlightName", void 0), r([m()], E.prototype, "highlightsEnabled", void 0), r([m()], E.prototype, "indicatorsEnabled", void 0), r([m()], E.prototype, "_defaultLayer", void 0), r([m()], E.prototype, "layer", void 0), r([m({ readOnly: true })], E.prototype, "state", null), r([m()], E.prototype, "view", void 0), E = r([a2("esri.views.draw.support.GraphicMover")], E);

export {
  a3 as a,
  E
};
//# sourceMappingURL=chunk-SV35MYMN.js.map
