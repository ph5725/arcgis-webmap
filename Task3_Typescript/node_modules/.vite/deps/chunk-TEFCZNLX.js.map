{
  "version": 3,
  "sources": ["../../@arcgis/core/chunks/RealisticTree.glsl.js"],
  "sourcesContent": ["/*\r\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\r\nSee https://js.arcgis.com/4.33/esri/copyright.txt for details.\r\n*/\r\nimport{ForwardLinearDepth as e}from\"../views/3d/webgl-engine/core/shaderLibrary/ForwardLinearDepth.glsl.js\";import{Offset as o}from\"../views/3d/webgl-engine/core/shaderLibrary/Offset.glsl.js\";import{isColorOrColorEmission as r}from\"../views/3d/webgl-engine/core/shaderLibrary/ShaderOutput.js\";import{SliceDraw as i}from\"../views/3d/webgl-engine/core/shaderLibrary/Slice.glsl.js\";import{Transform as a}from\"../views/3d/webgl-engine/core/shaderLibrary/Transform.glsl.js\";import{InstancedDoublePrecision as l}from\"../views/3d/webgl-engine/core/shaderLibrary/attributes/InstancedDoublePrecision.glsl.js\";import{NormalAttribute as t}from\"../views/3d/webgl-engine/core/shaderLibrary/attributes/NormalAttribute.glsl.js\";import{SymbolColor as s}from\"../views/3d/webgl-engine/core/shaderLibrary/attributes/SymbolColor.glsl.js\";import{TextureCoordinateAttribute as n}from\"../views/3d/webgl-engine/core/shaderLibrary/attributes/TextureCoordinateAttribute.glsl.js\";import{VertexColor as d}from\"../views/3d/webgl-engine/core/shaderLibrary/attributes/VertexColor.glsl.js\";import{VerticalOffset as c}from\"../views/3d/webgl-engine/core/shaderLibrary/attributes/VerticalOffset.glsl.js\";import{DefaultMaterialAuxiliaryPasses as g}from\"../views/3d/webgl-engine/core/shaderLibrary/default/DefaultMaterialAuxiliaryPasses.glsl.js\";import{EvaluateAmbientOcclusion as m}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/EvaluateAmbientOcclusion.glsl.js\";import{EvaluateSceneLighting as v,addAmbientBoostFactor as b,addLightingGlobalFactor as w}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/EvaluateSceneLighting.glsl.js\";import{addMainLightDirection as p,addMainLightIntensity as h}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/MainLighting.glsl.js\";import{PhysicallyBasedRendering as u}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/PhysicallyBasedRendering.glsl.js\";import{PBRMode as f,PhysicallyBasedRenderingParameters as x}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/PhysicallyBasedRenderingParameters.glsl.js\";import{ReadShadowMapPass as y,ReadShadowMapDraw as C}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/ReadShadowMap.glsl.js\";import{terrainDepthTest as L}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/TerrainDepthTest.glsl.js\";import{VisualVariables as j}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/VisualVariables.glsl.js\";import{DiscardOrAdjustAlphaPass as O}from\"../views/3d/webgl-engine/core/shaderLibrary/util/DiscardOrAdjustAlpha.glsl.js\";import{MixExternalColor as M}from\"../views/3d/webgl-engine/core/shaderLibrary/util/MixExternalColor.glsl.js\";import{addProjViewLocalOrigin as P,addCameraPosition as S}from\"../views/3d/webgl-engine/core/shaderLibrary/util/View.glsl.js\";import{Float3PassUniform as A}from\"../views/3d/webgl-engine/core/shaderModules/Float3PassUniform.js\";import{Float4PassUniform as E}from\"../views/3d/webgl-engine/core/shaderModules/Float4PassUniform.js\";import{FloatPassUniform as D}from\"../views/3d/webgl-engine/core/shaderModules/FloatPassUniform.js\";import{If as F,glsl as $}from\"../views/3d/webgl-engine/core/shaderModules/glsl.js\";import{Texture2DPassUniform as N}from\"../views/3d/webgl-engine/core/shaderModules/Texture2DPassUniform.js\";import{VertexAttribute as I}from\"../views/3d/webgl-engine/lib/VertexAttribute.js\";import{outputColorHighlightOID as T}from\"../views/3d/webgl-engine/shaders/OutputColorHighlightOID.glsl.js\";import{ShaderBuilder as V}from\"../views/webgl/ShaderBuilder.js\";import{alphaCutoff as B}from\"../webscene/support/AlphaCutoff.js\";function R(R){const _=new V,{attributes:z,vertex:k,fragment:G,varyings:U}=_,{output:W,offsetBackfaces:H,instancedColor:q,pbrMode:J,snowCover:K,spherical:Q,hasBloom:X}=R,Y=J===f.Normal||J===f.Schematic;if(P(k,R),z.add(I.POSITION,\"vec3\"),U.add(\"vpos\",\"vec3\",{invariant:!0}),_.include(j,R),_.include(l,R),_.include(c,R),_.include(L,R),r(W)&&(S(_.vertex,R),_.include(t,R),_.include(a,R),H&&_.include(o),q&&_.attributes.add(I.INSTANCECOLOR,\"vec4\"),U.add(\"vNormalWorld\",\"vec3\"),U.add(\"localvpos\",\"vec3\",{invariant:!0}),_.include(n,R),_.include(e,R),_.include(s,R),_.include(d,R),k.uniforms.add(new E(\"externalColor\",(e=>e.externalColor))),U.add(\"vcolorExt\",\"vec4\"),k.main.add($`\r\n      forwardNormalizedVertexColor();\r\n      vcolorExt = externalColor;\r\n      ${F(q,\"vcolorExt *= instanceColor * 0.003921568627451;\")}\r\n      vcolorExt *= vvColor();\r\n      vcolorExt *= getSymbolColor();\r\n      forwardColorMixMode();\r\n\r\n      bool alphaCut = vcolorExt.a < ${$.float(B)};\r\n      vpos = getVertexInLocalOriginSpace();\r\n      localvpos = vpos - view[3].xyz;\r\n      vpos = subtractOrigin(vpos);\r\n      vNormalWorld = dpNormal(vvLocalNormal(normalModel()));\r\n      vpos = addVerticalOffset(vpos, localOrigin);\r\n      vec4 basePosition = transformPosition(proj, view, vpos);\r\n\r\n      forwardViewPosDepth((view * vec4(vpos, 1.0)).xyz);\r\n      forwardLinearDepth();\r\n      forwardTextureCoordinates();\r\n\r\n      gl_Position = alphaCut ? vec4(1e38, 1e38, 1e38, 1.0) :\r\n      ${F(H,\"offsetBackfacingClipPosition(basePosition, vpos, vNormalWorld, cameraPosition);\",\"basePosition;\")}\r\n    `)),r(W)){const{hasColorTexture:e,hasColorTextureTransform:o,receiveShadows:r}=R;_.include(v,R),G.include(m,R),_.include(O,R),_.include(R.instancedDoublePrecision?y:C,R),G.include(i,R),_.include(T,R),S(G,R),p(G),b(G),w(G),G.uniforms.add(k.uniforms.get(\"localOrigin\"),k.uniforms.get(\"view\"),new A(\"ambient\",(e=>e.ambient)),new A(\"diffuse\",(e=>e.diffuse)),new D(\"opacity\",(e=>e.opacity)),new D(\"layerOpacity\",(e=>e.layerOpacity))),e&&G.uniforms.add(new N(\"tex\",(e=>e.texture))),_.include(x,R),G.include(u,R),G.include(M),h(G),G.main.add($`\r\n      discardBySlice(vpos);\r\n      discardByTerrainDepth();\r\n      vec4 texColor = ${e?`texture(tex, ${o?\"colorUV\":\"vuv0\"})`:\" vec4(1.0)\"};\r\n      ${F(e,`${F(R.textureAlphaPremultiplied,\"texColor.rgb /= texColor.a;\")}\\n        discardOrAdjustAlpha(texColor);`)}\r\n      vec3 viewDirection = normalize(vpos - cameraPosition);\r\n      applyPBRFactors();\r\n      float ssao = evaluateAmbientOcclusionInverse();\r\n      ssao *= getBakedOcclusion();\r\n\r\n      float additionalAmbientScale = additionalDirectedAmbientLight(vpos + localOrigin);\r\n      vec3 additionalLight = ssao * mainLightIntensity * additionalAmbientScale * ambientBoostFactor * lightingGlobalFactor;\r\n      float shadow = ${r?\"max(lightingGlobalFactor * (1.0 - additionalAmbientScale), readShadowMap(vpos, linearDepth))\":Q?\"lightingGlobalFactor * (1.0 - additionalAmbientScale)\":\"0.0\"};\r\n      vec3 matColor = max(ambient, diffuse);\r\n      ${R.hasVertexColors?$`vec3 albedo = mixExternalColor(vColor.rgb * matColor, texColor.rgb, vcolorExt.rgb, int(colorMixMode));\r\n             float opacity_ = layerOpacity * mixExternalOpacity(vColor.a * opacity, texColor.a, vcolorExt.a, int(colorMixMode));`:$`vec3 albedo = mixExternalColor(matColor, texColor.rgb, vcolorExt.rgb, int(colorMixMode));\r\n             float opacity_ = layerOpacity * mixExternalOpacity(opacity, texColor.a, vcolorExt.a, int(colorMixMode));`}\r\n      ${F(K,\"albedo = mix(albedo, vec3(1), 0.9);\")}\r\n      ${$`vec3 shadingNormal = normalize(vNormalWorld);\r\n             albedo *= 1.2;\r\n             vec3 viewForward = vec3(view[0][2], view[1][2], view[2][2]);\r\n             float alignmentLightView = clamp(dot(viewForward, -mainLightDirection), 0.0, 1.0);\r\n             float transmittance = 1.0 - clamp(dot(viewForward, shadingNormal), 0.0, 1.0);\r\n             float treeRadialFalloff = vColor.r;\r\n             float backLightFactor = 0.5 * treeRadialFalloff * alignmentLightView * transmittance * (1.0 - shadow);\r\n             additionalLight += backLightFactor * mainLightIntensity;`}\r\n      ${F(Y,`vec3 normalGround = ${Q?\"normalize(vpos + localOrigin)\":\"vec3(0.0, 0.0, 1.0)\"};`)}\r\n      ${Y?$`float additionalAmbientIrradiance = additionalAmbientIrradianceFactor * mainLightIntensity[2];\r\n                 ${F(K,$`mrr = applySnowToMRR(mrr, 1.0)`)}\r\n            vec4 emission = ${K||X?\"vec4(0.0)\":\"getEmissions(albedo)\"};\r\n            vec3 shadedColor = evaluateSceneLightingPBR(shadingNormal, albedo, shadow, 1.0 - ssao, additionalLight, viewDirection, normalGround, mrr, emission, additionalAmbientIrradiance);`:$`vec3 shadedColor = evaluateSceneLighting(shadingNormal, albedo, shadow, 1.0 - ssao, additionalLight);`}\r\n      vec4 finalColor = vec4(shadedColor, opacity_);\r\n      outputColorHighlightOID(finalColor, vpos, albedo ${F(K,\", 1.0\")});`)}return _.include(g,R),_}const _=Object.freeze(Object.defineProperty({__proto__:null,build:R},Symbol.toStringTag,{value:\"Module\"}));export{_ as R,R as b};\r\n"],
  "mappings": "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",
  "names": ["R", "_", "i", "n", "f", "s", "d", "t", "e", "o", "c", "h", "u"]
}
