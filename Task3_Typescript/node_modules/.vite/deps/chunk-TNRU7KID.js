import {
  A,
  z
} from "./chunk-YBJ5GVXQ.js";
import {
  H
} from "./chunk-ZWFY3WY5.js";

// node_modules/@arcgis/core/support/requestPresets.js
async function t(t2, o2) {
  const { data: r } = await H(t2, { responseType: "json", query: { f: "json", ...o2?.customParameters, token: o2?.apiKey } });
  return r;
}

// node_modules/@arcgis/core/layers/support/fetchService.js
var a = /* @__PURE__ */ new Set(["Catalog Layer", "Feature Layer", "Oriented Imagery Layer"]);
async function n(a2, n2) {
  const { loadContext: s2, ...o2 } = n2 || {}, y2 = s2 ? await s2.fetchServiceMetadata(a2, o2) : await t(a2, o2), i2 = A();
  u(y2), c(y2);
  const l2 = { serviceJSON: y2, preferredHost: i2 };
  if ((y2.currentVersion ?? 0) < 10.5) return l2;
  const f = `${z() ?? a2}/layers`, L = s2 ? await s2.fetchServiceMetadata(f, o2) : await t(f, o2);
  return u(L), c(L), l2.layersJSON = { layers: L.layers, tables: L.tables }, l2;
}
function s(e) {
  const { type: r } = e;
  return !!r && a.has(r);
}
function o(e) {
  return "Table" === e.type;
}
function c(e) {
  e.layers = e.layers?.filter(s), e.tables = e.tables?.filter(o);
}
function y(e) {
  e.type ||= "Feature Layer";
}
function i(e) {
  e.type ||= "Table";
}
function u(e) {
  e.layers?.forEach(y), e.tables?.forEach(i);
}
function l(e) {
  switch (e) {
    case "Feature Layer":
    case "Table":
      return "FeatureLayer";
    case "Oriented Imagery Layer":
      return "OrientedImageryLayer";
    case "Catalog Layer":
      return "CatalogLayer";
  }
  return "FeatureLayer";
}

export {
  t,
  n,
  l
};
//# sourceMappingURL=chunk-TNRU7KID.js.map
