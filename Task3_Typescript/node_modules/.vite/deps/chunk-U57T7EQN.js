import {
  o
} from "./chunk-CMHHL5UO.js";
import {
  m,
  u
} from "./chunk-XHYOFJ4U.js";
import {
  C
} from "./chunk-KJSBBQ22.js";
import {
  n
} from "./chunk-VOLWOTEG.js";
import {
  H
} from "./chunk-ZWFY3WY5.js";
import {
  i2 as i,
  r,
  s
} from "./chunk-XWG6QGFK.js";
import {
  t
} from "./chunk-GWNLQRNM.js";

// node_modules/@arcgis/core/intl/substitute.js
var i2 = () => i.getLogger("esri.intl.substitute");
function s2(t2, r3, n2 = {}) {
  const { format: o3 = {} } = n2;
  return r(t2, (t3) => u2(t3, r3, o3));
}
function u2(t2, e, n2) {
  let o3, i6;
  const s4 = t2.indexOf(":");
  if (-1 === s4 ? o3 = t2.trim() : (o3 = t2.slice(0, s4).trim(), i6 = t2.slice(s4 + 1).trim()), !o3) return "";
  const u4 = t(o3, e);
  if (null == u4) return "";
  const m2 = (i6 ? n2?.[i6] : null) ?? n2?.[o3];
  return m2 ? c(u4, m2) : i6 ? a(u4, i6) : f(u4);
}
function c(t2, r3) {
  switch (r3.type) {
    case "date":
      return C(t2, r3.intlOptions);
    case "number":
      return o(t2, r3.intlOptions);
    default:
      return i2().warn("missing format descriptor for key {key}"), f(t2);
  }
}
function a(t2, r3) {
  switch (r3.toLowerCase()) {
    case "dateformat":
      return C(t2);
    case "numberformat":
      return o(t2);
    default:
      return i2().warn(`inline format is unsupported since 4.12: ${r3}`), /^(dateformat|datestring)/i.test(r3) ? C(t2) : /^numberformat/i.test(r3) ? o(t2) : f(t2);
  }
}
function f(t2) {
  switch (typeof t2) {
    case "string":
      return t2;
    case "number":
      return o(t2);
    case "boolean":
      return "" + t2;
    default:
      return t2 instanceof Date ? C(t2) : "";
  }
}

// node_modules/@arcgis/core/intl/t9n.js
async function r2(e, r3, s4, i6) {
  const a3 = r3.exec(s4);
  if (!a3) throw new s("esri-intl:invalid-bundle", `Bundle id "${s4}" is not compatible with the pattern "${r3}"`);
  const c2 = a3[1] ? `${a3[1]}/` : "", l2 = a3[2], w = m(i6), h = `${c2}${l2}.json`, u4 = w ? `${c2}${l2}_${w}.json` : h;
  let d2;
  try {
    d2 = await o2(e(u4));
  } catch (f3) {
    if (u4 === h) throw new s("intl:unknown-bundle", `Bundle "${s4}" cannot be loaded`, { error: f3 });
    try {
      d2 = await o2(e(h));
    } catch (f4) {
      throw new s("intl:unknown-bundle", `Bundle "${s4}" cannot be loaded`, { error: f4 });
    }
  }
  return d2;
}
async function o2(t2) {
  if (null != a2.fetchBundleAsset) return a2.fetchBundleAsset(t2);
  const n2 = await H(t2, { responseType: "text" });
  return JSON.parse(n2.data);
}
var s3 = class {
  constructor({ base: e = "", pattern: t2, location: n2 = new URL(window.location.href) }) {
    let r3;
    r3 = "string" == typeof n2 ? (e2) => new URL(e2, new URL(n2, window.location.href)).href : n2 instanceof URL ? (e2) => new URL(e2, n2).href : n2, this.pattern = "string" == typeof t2 ? new RegExp(`^${t2}`) : t2, this.getAssetUrl = r3, e = e ? e.endsWith("/") ? e : e + "/" : "", this.matcher = new RegExp(`^${e}(?:(.*)\\/)?(.*)$`);
  }
  fetchMessageBundle(e, t2) {
    return r2(this.getAssetUrl, this.matcher, e, t2);
  }
};
function i3(e) {
  return new s3(e);
}
var a2 = {};

// node_modules/@arcgis/core/intl.js
u(i3({ pattern: "esri/", location: n }));

export {
  s2 as s
};
//# sourceMappingURL=chunk-U57T7EQN.js.map
