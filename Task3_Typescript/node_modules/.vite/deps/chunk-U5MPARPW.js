import {
  c as c2,
  c2 as c3,
  f as f2,
  h,
  l as l3,
  p,
  r as r3
} from "./chunk-NXHGFG67.js";
import {
  o as o3
} from "./chunk-56LGCTGZ.js";
import {
  g,
  u as u2
} from "./chunk-PVI3IOCA.js";
import {
  B,
  C,
  H,
  U
} from "./chunk-76QJRCNC.js";
import {
  l as l2
} from "./chunk-KE3WBZYL.js";
import {
  z
} from "./chunk-O5TPFXRT.js";
import {
  _
} from "./chunk-Q6XRAGMA.js";
import {
  o
} from "./chunk-JUAPMINU.js";
import {
  f
} from "./chunk-PK2ZR2SJ.js";
import {
  r as r2
} from "./chunk-YFPGM5UE.js";
import {
  l
} from "./chunk-E3KEUGUG.js";
import {
  m
} from "./chunk-N3XLUQJI.js";
import {
  a2
} from "./chunk-JUAD7TJ6.js";
import {
  r
} from "./chunk-5TPMG26T.js";
import {
  i as i2,
  o as o2
} from "./chunk-3NBBZ43U.js";
import {
  n as n2
} from "./chunk-VOLWOTEG.js";
import {
  t
} from "./chunk-LQFTAGIV.js";
import {
  c3 as c,
  n,
  u3 as u
} from "./chunk-GZ2P4SCJ.js";
import {
  i2 as i,
  s
} from "./chunk-XWG6QGFK.js";
import {
  a
} from "./chunk-GWNLQRNM.js";

// node_modules/@arcgis/core/chunks/Zlib.js
var e;
var r4 = { exports: {} };
function i3() {
  return e || (e = 1, i11 = r4, void 0 !== (t8 = function() {
    function t9() {
      this.pos = 0, this.bufferLength = 0, this.eof = false, this.buffer = null;
    }
    return t9.prototype = { ensureBuffer: function(t10) {
      var e6 = this.buffer, r15 = e6 ? e6.byteLength : 0;
      if (t10 < r15) return e6;
      for (var i12 = 512; i12 < t10; ) i12 <<= 1;
      for (var s7 = new Uint8Array(i12), f6 = 0; f6 < r15; ++f6) s7[f6] = e6[f6];
      return this.buffer = s7;
    }, getByte: function() {
      for (var t10 = this.pos; this.bufferLength <= t10; ) {
        if (this.eof) return null;
        this.readBlock();
      }
      return this.buffer[this.pos++];
    }, getBytes: function(t10) {
      var e6 = this.pos;
      if (t10) {
        this.ensureBuffer(e6 + t10);
        for (var r15 = e6 + t10; !this.eof && this.bufferLength < r15; ) this.readBlock();
        var i12 = this.bufferLength;
        r15 > i12 && (r15 = i12);
      } else {
        for (; !this.eof; ) this.readBlock();
        r15 = this.bufferLength;
      }
      return this.pos = r15, this.buffer.subarray(e6, r15);
    }, lookChar: function() {
      for (var t10 = this.pos; this.bufferLength <= t10; ) {
        if (this.eof) return null;
        this.readBlock();
      }
      return String.fromCharCode(this.buffer[this.pos]);
    }, getChar: function() {
      for (var t10 = this.pos; this.bufferLength <= t10; ) {
        if (this.eof) return null;
        this.readBlock();
      }
      return String.fromCharCode(this.buffer[this.pos++]);
    }, makeSubStream: function(t10, e6, r15) {
      for (var i12 = t10 + e6; this.bufferLength <= i12 && !this.eof; ) this.readBlock();
      return new Stream(this.buffer, t10, e6, r15);
    }, skip: function(t10) {
      t10 || (t10 = 1), this.pos += t10;
    }, reset: function() {
      this.pos = 0;
    } }, t9;
  }(), s6 = function() {
    if (!self || !self.Uint32Array) return null;
    var e6 = new Uint32Array([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]), r15 = new Uint32Array([3, 4, 5, 6, 7, 8, 9, 10, 65547, 65549, 65551, 65553, 131091, 131095, 131099, 131103, 196643, 196651, 196659, 196667, 262211, 262227, 262243, 262259, 327811, 327843, 327875, 327907, 258, 258, 258]), i12 = new Uint32Array([1, 2, 3, 4, 65541, 65543, 131081, 131085, 196625, 196633, 262177, 262193, 327745, 327777, 393345, 393409, 459009, 459137, 524801, 525057, 590849, 591361, 657409, 658433, 724993, 727041, 794625, 798721, 868353, 876545]), s7 = [new Uint32Array([459008, 524368, 524304, 524568, 459024, 524400, 524336, 590016, 459016, 524384, 524320, 589984, 524288, 524416, 524352, 590048, 459012, 524376, 524312, 589968, 459028, 524408, 524344, 590032, 459020, 524392, 524328, 59e4, 524296, 524424, 524360, 590064, 459010, 524372, 524308, 524572, 459026, 524404, 524340, 590024, 459018, 524388, 524324, 589992, 524292, 524420, 524356, 590056, 459014, 524380, 524316, 589976, 459030, 524412, 524348, 590040, 459022, 524396, 524332, 590008, 524300, 524428, 524364, 590072, 459009, 524370, 524306, 524570, 459025, 524402, 524338, 590020, 459017, 524386, 524322, 589988, 524290, 524418, 524354, 590052, 459013, 524378, 524314, 589972, 459029, 524410, 524346, 590036, 459021, 524394, 524330, 590004, 524298, 524426, 524362, 590068, 459011, 524374, 524310, 524574, 459027, 524406, 524342, 590028, 459019, 524390, 524326, 589996, 524294, 524422, 524358, 590060, 459015, 524382, 524318, 589980, 459031, 524414, 524350, 590044, 459023, 524398, 524334, 590012, 524302, 524430, 524366, 590076, 459008, 524369, 524305, 524569, 459024, 524401, 524337, 590018, 459016, 524385, 524321, 589986, 524289, 524417, 524353, 590050, 459012, 524377, 524313, 589970, 459028, 524409, 524345, 590034, 459020, 524393, 524329, 590002, 524297, 524425, 524361, 590066, 459010, 524373, 524309, 524573, 459026, 524405, 524341, 590026, 459018, 524389, 524325, 589994, 524293, 524421, 524357, 590058, 459014, 524381, 524317, 589978, 459030, 524413, 524349, 590042, 459022, 524397, 524333, 590010, 524301, 524429, 524365, 590074, 459009, 524371, 524307, 524571, 459025, 524403, 524339, 590022, 459017, 524387, 524323, 589990, 524291, 524419, 524355, 590054, 459013, 524379, 524315, 589974, 459029, 524411, 524347, 590038, 459021, 524395, 524331, 590006, 524299, 524427, 524363, 590070, 459011, 524375, 524311, 524575, 459027, 524407, 524343, 590030, 459019, 524391, 524327, 589998, 524295, 524423, 524359, 590062, 459015, 524383, 524319, 589982, 459031, 524415, 524351, 590046, 459023, 524399, 524335, 590014, 524303, 524431, 524367, 590078, 459008, 524368, 524304, 524568, 459024, 524400, 524336, 590017, 459016, 524384, 524320, 589985, 524288, 524416, 524352, 590049, 459012, 524376, 524312, 589969, 459028, 524408, 524344, 590033, 459020, 524392, 524328, 590001, 524296, 524424, 524360, 590065, 459010, 524372, 524308, 524572, 459026, 524404, 524340, 590025, 459018, 524388, 524324, 589993, 524292, 524420, 524356, 590057, 459014, 524380, 524316, 589977, 459030, 524412, 524348, 590041, 459022, 524396, 524332, 590009, 524300, 524428, 524364, 590073, 459009, 524370, 524306, 524570, 459025, 524402, 524338, 590021, 459017, 524386, 524322, 589989, 524290, 524418, 524354, 590053, 459013, 524378, 524314, 589973, 459029, 524410, 524346, 590037, 459021, 524394, 524330, 590005, 524298, 524426, 524362, 590069, 459011, 524374, 524310, 524574, 459027, 524406, 524342, 590029, 459019, 524390, 524326, 589997, 524294, 524422, 524358, 590061, 459015, 524382, 524318, 589981, 459031, 524414, 524350, 590045, 459023, 524398, 524334, 590013, 524302, 524430, 524366, 590077, 459008, 524369, 524305, 524569, 459024, 524401, 524337, 590019, 459016, 524385, 524321, 589987, 524289, 524417, 524353, 590051, 459012, 524377, 524313, 589971, 459028, 524409, 524345, 590035, 459020, 524393, 524329, 590003, 524297, 524425, 524361, 590067, 459010, 524373, 524309, 524573, 459026, 524405, 524341, 590027, 459018, 524389, 524325, 589995, 524293, 524421, 524357, 590059, 459014, 524381, 524317, 589979, 459030, 524413, 524349, 590043, 459022, 524397, 524333, 590011, 524301, 524429, 524365, 590075, 459009, 524371, 524307, 524571, 459025, 524403, 524339, 590023, 459017, 524387, 524323, 589991, 524291, 524419, 524355, 590055, 459013, 524379, 524315, 589975, 459029, 524411, 524347, 590039, 459021, 524395, 524331, 590007, 524299, 524427, 524363, 590071, 459011, 524375, 524311, 524575, 459027, 524407, 524343, 590031, 459019, 524391, 524327, 589999, 524295, 524423, 524359, 590063, 459015, 524383, 524319, 589983, 459031, 524415, 524351, 590047, 459023, 524399, 524335, 590015, 524303, 524431, 524367, 590079]), 9], f6 = [new Uint32Array([327680, 327696, 327688, 327704, 327684, 327700, 327692, 327708, 327682, 327698, 327690, 327706, 327686, 327702, 327694, 0, 327681, 327697, 327689, 327705, 327685, 327701, 327693, 327709, 327683, 327699, 327691, 327707, 327687, 327703, 327695, 0]), 5];
    function o11(t9) {
      throw new Error(t9);
    }
    function n12(e7) {
      var r16 = 0, i13 = e7[r16++], s8 = e7[r16++];
      -1 != i13 && -1 != s8 || o11("Invalid header in flate stream"), 8 != (15 & i13) && o11("Unknown compression method in flate stream"), ((i13 << 8) + s8) % 31 != 0 && o11("Bad FCHECK in flate stream"), 32 & s8 && o11("FDICT bit set in flate stream"), this.bytes = e7, this.bytesPos = r16, this.codeSize = 0, this.codeBuf = 0, t8.call(this);
    }
    return n12.prototype = Object.create(t8.prototype), n12.prototype.getBits = function(t9) {
      for (var e7, r16 = this.codeSize, i13 = this.codeBuf, s8 = this.bytes, f7 = this.bytesPos; r16 < t9; ) void 0 === (e7 = s8[f7++]) && o11("Bad encoding in flate stream"), i13 |= e7 << r16, r16 += 8;
      return e7 = i13 & (1 << t9) - 1, this.codeBuf = i13 >> t9, this.codeSize = r16 -= t9, this.bytesPos = f7, e7;
    }, n12.prototype.getCode = function(t9) {
      for (var e7 = t9[0], r16 = t9[1], i13 = this.codeSize, s8 = this.codeBuf, f7 = this.bytes, n13 = this.bytesPos; i13 < r16; ) {
        var a13;
        void 0 === (a13 = f7[n13++]) && o11("Bad encoding in flate stream"), s8 |= a13 << i13, i13 += 8;
      }
      var h6 = e7[s8 & (1 << r16) - 1], u10 = h6 >> 16, l8 = 65535 & h6;
      return (0 == i13 || i13 < u10 || 0 == u10) && o11("Bad encoding in flate stream"), this.codeBuf = s8 >> u10, this.codeSize = i13 - u10, this.bytesPos = n13, l8;
    }, n12.prototype.generateHuffmanTable = function(t9) {
      for (var e7 = t9.length, r16 = 0, i13 = 0; i13 < e7; ++i13) t9[i13] > r16 && (r16 = t9[i13]);
      for (var s8 = 1 << r16, f7 = new Uint32Array(s8), o12 = 1, n13 = 0, a13 = 2; o12 <= r16; ++o12, n13 <<= 1, a13 <<= 1) for (var h6 = 0; h6 < e7; ++h6) if (t9[h6] == o12) {
        var u10 = 0, l8 = n13;
        for (i13 = 0; i13 < o12; ++i13) u10 = u10 << 1 | 1 & l8, l8 >>= 1;
        for (i13 = u10; i13 < s8; i13 += a13) f7[i13] = o12 << 16 | h6;
        ++n13;
      }
      return [f7, r16];
    }, n12.prototype.readBlock = function() {
      function t9(t10, e7, r16, i13, s8) {
        for (var f7 = t10.getBits(r16) + i13; f7-- > 0; ) e7[b4++] = s8;
      }
      var n13 = this.getBits(3);
      if (1 & n13 && (this.eof = true), 0 != (n13 >>= 1)) {
        var a13, h6;
        if (1 == n13) a13 = s7, h6 = f6;
        else if (2 == n13) {
          for (var u10 = this.getBits(5) + 257, l8 = this.getBits(5) + 1, c7 = this.getBits(4) + 4, d5 = Array(e6.length), b4 = 0; b4 < c7; ) d5[e6[b4++]] = this.getBits(3);
          for (var v5 = this.generateHuffmanTable(d5), g6 = 0, B4 = (b4 = 0, u10 + l8), p6 = new Array(B4); b4 < B4; ) {
            var y5 = this.getCode(v5);
            16 == y5 ? t9(this, p6, 2, 3, g6) : 17 == y5 ? t9(this, p6, 3, 3, g6 = 0) : 18 == y5 ? t9(this, p6, 7, 11, g6 = 0) : p6[b4++] = g6 = y5;
          }
          a13 = this.generateHuffmanTable(p6.slice(0, u10)), h6 = this.generateHuffmanTable(p6.slice(u10, B4));
        } else o11("Unknown block type in flate stream");
        for (var m7 = (x4 = this.buffer) ? x4.length : 0, k4 = this.bufferLength; ; ) {
          var w4 = this.getCode(a13);
          if (w4 < 256) k4 + 1 >= m7 && (m7 = (x4 = this.ensureBuffer(k4 + 1)).length), x4[k4++] = w4;
          else {
            if (256 == w4) return void (this.bufferLength = k4);
            var C5 = (w4 = r15[w4 -= 257]) >> 16;
            C5 > 0 && (C5 = this.getBits(C5)), g6 = (65535 & w4) + C5, w4 = this.getCode(h6), (C5 = (w4 = i12[w4]) >> 16) > 0 && (C5 = this.getBits(C5));
            var L2 = (65535 & w4) + C5;
            k4 + g6 >= m7 && (m7 = (x4 = this.ensureBuffer(k4 + g6)).length);
            for (var S4 = 0; S4 < g6; ++S4, ++k4) x4[k4] = x4[k4 - L2];
          }
        }
      } else {
        var A4, U4 = this.bytes, P4 = this.bytesPos;
        void 0 === (A4 = U4[P4++]) && o11("Bad block header in flate stream");
        var z2 = A4;
        void 0 === (A4 = U4[P4++]) && o11("Bad block header in flate stream"), z2 |= A4 << 8, void 0 === (A4 = U4[P4++]) && o11("Bad block header in flate stream");
        var H3 = A4;
        void 0 === (A4 = U4[P4++]) && o11("Bad block header in flate stream"), (H3 |= A4 << 8) != (65535 & ~z2) && o11("Bad uncompressed block length in flate stream"), this.codeBuf = 0, this.codeSize = 0;
        var T4 = this.bufferLength, x4 = this.ensureBuffer(T4 + z2), j3 = T4 + z2;
        this.bufferLength = j3;
        for (var E3 = T4; E3 < j3; ++E3) {
          if (void 0 === (A4 = U4[P4++])) {
            this.eof = true;
            break;
          }
          x4[E3] = A4;
        }
        this.bytesPos = P4;
      }
    }, n12;
  }()) && (i11.exports = s6)), r4.exports;
  var t8, i11, s6;
}
var s2 = o3(i3());

// node_modules/@arcgis/core/layers/support/rasterFormats/ImageCanvasDecoder.js
var i4 = class _i {
  constructor(t8) {
    this._canvas = null, this._ctx = null, t8 && (this._canvas = t8.canvas, this._ctx = t8.ctx || t8.canvas && t8.canvas.getContext("2d"));
  }
  decode(n12, s6, r15) {
    if (!n12 || n12.byteLength < 10) throw new s("imagecanvasdecoder: decode", "required a valid encoded data as input.");
    let { width: c7 = 0, height: h6 = 0, format: o11 } = s6;
    const { applyJpegMask: l8 } = s6;
    if (l8 && (!c7 || !h6)) throw new s("imagecanvasdecoder: decode", "image width and height are needed to apply jpeg mask directly to canvas");
    return new Promise((t8, d5) => {
      let g6 = null;
      "jpg" === o11 && l8 && (g6 = _i._getMask(n12, { width: c7, height: h6 }));
      const w4 = new Blob([new Uint8Array(n12)], { type: "image/" + o11 == "jpg" ? "jpeg" : o11 }), v5 = URL.createObjectURL(w4), m7 = new Image();
      let _4;
      m7.src = v5, m7.onload = () => {
        if (URL.revokeObjectURL(v5), c(r15)) return void d5(u());
        c7 = m7.width, h6 = m7.height, this._canvas && this._ctx ? (this._canvas.width === c7 && this._canvas.height === h6 || (this._canvas.width = c7, this._canvas.height = h6), this._ctx.clearRect(0, 0, c7, h6)) : (this._canvas = document.createElement("canvas"), this._canvas.width = c7, this._canvas.height = h6, this._ctx = this._canvas.getContext("2d")), this._ctx.drawImage(m7, 0, 0);
        const n13 = this._ctx.getImageData(0, 0, c7, h6);
        let i11;
        if (_4 = n13.data, s6.renderOnCanvas) {
          if (g6) for (i11 = 0; i11 < g6.length; i11++) g6[i11] ? _4[4 * i11 + 3] = 255 : _4[4 * i11 + 3] = 0;
          return this._ctx.putImageData(n13, 0, 0), void t8(null);
        }
        const o12 = c7 * h6, l9 = new Uint8Array(o12), w5 = new Uint8Array(o12), p6 = new Uint8Array(o12);
        if (g6) for (i11 = 0; i11 < o12; i11++) l9[i11] = _4[4 * i11], w5[i11] = _4[4 * i11 + 1], p6[i11] = _4[4 * i11 + 2];
        else for (g6 = new Uint8Array(o12), i11 = 0; i11 < o12; i11++) l9[i11] = _4[4 * i11], w5[i11] = _4[4 * i11 + 1], p6[i11] = _4[4 * i11 + 2], g6[i11] = _4[4 * i11 + 3];
        t8({ width: c7, height: h6, pixels: [l9, w5, p6], mask: g6, pixelType: "u8" });
      }, m7.onerror = () => {
        URL.revokeObjectURL(v5), d5("cannot load image");
      };
    });
  }
  static _getMask(t8, e6) {
    let a13 = null;
    try {
      const i11 = new Uint8Array(t8), s6 = Math.ceil(i11.length / 2);
      let r15 = 0;
      const c7 = i11.length - 2;
      for (r15 = s6; r15 < c7 && (255 !== i11[r15] || 217 !== i11[r15 + 1]); r15++) ;
      if (r15 += 2, r15 < i11.length - 1) {
        const t9 = new s2(i11.subarray(r15)).getBytes();
        a13 = new Uint8Array(e6.width * e6.height);
        let s7 = 0;
        for (let e7 = 0; e7 < t9.length; e7++) for (let n12 = 7; n12 >= 0; n12--) a13[s7++] = t9[e7] >> n12 & 1;
      }
    } catch (i11) {
    }
    return a13;
  }
};

// node_modules/@arcgis/core/chunks/Jpg.js
var n3;
var r5 = { exports: {} };
function o4() {
  return n3 || (n3 = 1, e6 = r5, o11 = function() {
    var e7 = function() {
      function e8(e9) {
        this.message = "JPEG error: " + e9;
      }
      return e8.prototype = new Error(), e8.prototype.name = "JpegError", e8.constructor = e8, e8;
    }();
    return function() {
      if (!self || !self.Uint8ClampedArray) return null;
      var n12 = new Uint8Array([0, 1, 8, 16, 9, 2, 3, 10, 17, 24, 32, 25, 18, 11, 4, 5, 12, 19, 26, 33, 40, 48, 41, 34, 27, 20, 13, 6, 7, 14, 21, 28, 35, 42, 49, 56, 57, 50, 43, 36, 29, 22, 15, 23, 30, 37, 44, 51, 58, 59, 52, 45, 38, 31, 39, 46, 53, 60, 61, 54, 47, 55, 62, 63]), r15 = 4017, o12 = 799, a14 = 3406, t8 = 2276, i11 = 1567, s6 = 3784, c7 = 5793, f6 = 2896;
      function l8() {
        this.decodeTransform = null, this.colorTransform = -1;
      }
      function u10(e8, n13) {
        for (var r16, o13, a15 = 0, t9 = [], i12 = 16; i12 > 0 && !e8[i12 - 1]; ) i12--;
        t9.push({ children: [], index: 0 });
        var s7, c8 = t9[0];
        for (r16 = 0; r16 < i12; r16++) {
          for (o13 = 0; o13 < e8[r16]; o13++) {
            for ((c8 = t9.pop()).children[c8.index] = n13[a15]; c8.index > 0; ) c8 = t9.pop();
            for (c8.index++, t9.push(c8); t9.length <= r16; ) t9.push(s7 = { children: [], index: 0 }), c8.children[c8.index] = s7.children, c8 = s7;
            a15++;
          }
          r16 + 1 < i12 && (t9.push(s7 = { children: [], index: 0 }), c8.children[c8.index] = s7.children, c8 = s7);
        }
        return t9[0].children;
      }
      function h6(e8, n13, r16) {
        return 64 * ((e8.blocksPerLine + 1) * n13 + r16);
      }
      function v5(r16, o13, a15, t9, i12, s7, c8, f7, l9) {
        var u11 = a15.mcusPerLine, v6 = a15.progressive, m8 = o13, d6 = 0, b4 = 0;
        function k4() {
          if (b4 > 0) return b4--, d6 >> b4 & 1;
          if (255 === (d6 = r16[o13++])) {
            var n13 = r16[o13++];
            if (n13) throw new e7("unexpected marker " + (d6 << 8 | n13).toString(16));
          }
          return b4 = 7, d6 >>> 7;
        }
        function g6(n13) {
          for (var r17 = n13; ; ) {
            if ("number" == typeof (r17 = r17[k4()])) return r17;
            if ("object" != typeof r17) throw new e7("invalid huffman sequence");
          }
        }
        function C5(e8) {
          for (var n13 = 0; e8 > 0; ) n13 = n13 << 1 | k4(), e8--;
          return n13;
        }
        function w4(e8) {
          if (1 === e8) return 1 === k4() ? 1 : -1;
          var n13 = C5(e8);
          return n13 >= 1 << e8 - 1 ? n13 : n13 + (-1 << e8) + 1;
        }
        function x4(e8, r17) {
          var o14 = g6(e8.huffmanTableDC), a16 = 0 === o14 ? 0 : w4(o14);
          e8.blockData[r17] = e8.pred += a16;
          for (var t10 = 1; t10 < 64; ) {
            var i13 = g6(e8.huffmanTableAC), s8 = 15 & i13, c9 = i13 >> 4;
            if (0 !== s8) {
              var f8 = n12[t10 += c9];
              e8.blockData[r17 + f8] = w4(s8), t10++;
            } else {
              if (c9 < 15) break;
              t10 += 16;
            }
          }
        }
        function y5(e8, n13) {
          var r17 = g6(e8.huffmanTableDC), o14 = 0 === r17 ? 0 : w4(r17) << l9;
          e8.blockData[n13] = e8.pred += o14;
        }
        function D4(e8, n13) {
          e8.blockData[n13] |= k4() << l9;
        }
        var T4 = 0;
        function P4(e8, r17) {
          if (T4 > 0) T4--;
          else for (var o14 = s7, a16 = c8; o14 <= a16; ) {
            var t10 = g6(e8.huffmanTableAC), i13 = 15 & t10, f8 = t10 >> 4;
            if (0 !== i13) {
              var u12 = n12[o14 += f8];
              e8.blockData[r17 + u12] = w4(i13) * (1 << l9), o14++;
            } else {
              if (f8 < 15) {
                T4 = C5(f8) + (1 << f8) - 1;
                break;
              }
              o14 += 16;
            }
          }
        }
        var L2, A4 = 0;
        function _4(r17, o14) {
          for (var a16, t10, i13 = s7, f8 = c8, u12 = 0; i13 <= f8; ) {
            var h7 = n12[i13];
            switch (A4) {
              case 0:
                if (u12 = (t10 = g6(r17.huffmanTableAC)) >> 4, 0 == (a16 = 15 & t10)) u12 < 15 ? (T4 = C5(u12) + (1 << u12), A4 = 4) : (u12 = 16, A4 = 1);
                else {
                  if (1 !== a16) throw new e7("invalid ACn encoding");
                  L2 = w4(a16), A4 = u12 ? 2 : 3;
                }
                continue;
              case 1:
              case 2:
                r17.blockData[o14 + h7] ? r17.blockData[o14 + h7] += k4() << l9 : 0 === --u12 && (A4 = 2 === A4 ? 3 : 0);
                break;
              case 3:
                r17.blockData[o14 + h7] ? r17.blockData[o14 + h7] += k4() << l9 : (r17.blockData[o14 + h7] = L2 << l9, A4 = 0);
                break;
              case 4:
                r17.blockData[o14 + h7] && (r17.blockData[o14 + h7] += k4() << l9);
            }
            i13++;
          }
          4 === A4 && 0 === --T4 && (A4 = 0);
        }
        function U4(e8, n13, r17, o14, a16) {
          var t10 = r17 % u11;
          n13(e8, h6(e8, (r17 / u11 | 0) * e8.v + o14, t10 * e8.h + a16));
        }
        function z2(e8, n13, r17) {
          n13(e8, h6(e8, r17 / e8.blocksPerLine | 0, r17 % e8.blocksPerLine));
        }
        var I4, M3, Y2, q, S4, H3, R3 = t9.length;
        H3 = v6 ? 0 === s7 ? 0 === f7 ? y5 : D4 : 0 === f7 ? P4 : _4 : x4;
        var j3, E3, J, V3, B4 = 0;
        for (E3 = 1 === R3 ? t9[0].blocksPerLine * t9[0].blocksPerColumn : u11 * a15.mcusPerColumn; B4 < E3; ) {
          var N2 = i12 ? Math.min(E3 - B4, i12) : E3;
          for (M3 = 0; M3 < R3; M3++) t9[M3].pred = 0;
          if (T4 = 0, 1 === R3) for (I4 = t9[0], S4 = 0; S4 < N2; S4++) z2(I4, H3, B4), B4++;
          else for (S4 = 0; S4 < N2; S4++) {
            for (M3 = 0; M3 < R3; M3++) for (J = (I4 = t9[M3]).h, V3 = I4.v, Y2 = 0; Y2 < V3; Y2++) for (q = 0; q < J; q++) U4(I4, H3, B4, Y2, q);
            B4++;
          }
          b4 = 0, (j3 = p6(r16, o13)) && j3.invalid && (console.log("decodeScan - unexpected MCU data, next marker is: " + j3.invalid), o13 = j3.offset);
          var G3 = j3 && j3.marker;
          if (!G3 || G3 <= 65280) throw new e7("marker was not found");
          if (!(G3 >= 65488 && G3 <= 65495)) break;
          o13 += 2;
        }
        return (j3 = p6(r16, o13)) && j3.invalid && (console.log("decodeScan - unexpected Scan data, next marker is: " + j3.invalid), o13 = j3.offset), o13 - m8;
      }
      function m7(n13, l9, u11) {
        var h7, v6, m8, d6, p7, b4, k4, g6, C5, w4, x4, y5, D4, T4, P4, L2, A4, _4 = n13.quantizationTable, U4 = n13.blockData;
        if (!_4) throw new e7("missing required Quantization Table.");
        for (var z2 = 0; z2 < 64; z2 += 8) C5 = U4[l9 + z2], w4 = U4[l9 + z2 + 1], x4 = U4[l9 + z2 + 2], y5 = U4[l9 + z2 + 3], D4 = U4[l9 + z2 + 4], T4 = U4[l9 + z2 + 5], P4 = U4[l9 + z2 + 6], L2 = U4[l9 + z2 + 7], C5 *= _4[z2], 0 !== (w4 | x4 | y5 | D4 | T4 | P4 | L2) ? (w4 *= _4[z2 + 1], x4 *= _4[z2 + 2], y5 *= _4[z2 + 3], D4 *= _4[z2 + 4], T4 *= _4[z2 + 5], P4 *= _4[z2 + 6], L2 *= _4[z2 + 7], v6 = (h7 = (h7 = c7 * C5 + 128 >> 8) + (v6 = c7 * D4 + 128 >> 8) + 1 >> 1) - v6, A4 = (m8 = x4) * s6 + (d6 = P4) * i11 + 128 >> 8, m8 = m8 * i11 - d6 * s6 + 128 >> 8, k4 = (p7 = (p7 = f6 * (w4 - L2) + 128 >> 8) + (k4 = T4 << 4) + 1 >> 1) - k4, b4 = (g6 = (g6 = f6 * (w4 + L2) + 128 >> 8) + (b4 = y5 << 4) + 1 >> 1) - b4, d6 = (h7 = h7 + (d6 = A4) + 1 >> 1) - d6, m8 = (v6 = v6 + m8 + 1 >> 1) - m8, A4 = p7 * t8 + g6 * a14 + 2048 >> 12, p7 = p7 * a14 - g6 * t8 + 2048 >> 12, g6 = A4, A4 = b4 * o12 + k4 * r15 + 2048 >> 12, b4 = b4 * r15 - k4 * o12 + 2048 >> 12, k4 = A4, u11[z2] = h7 + g6, u11[z2 + 7] = h7 - g6, u11[z2 + 1] = v6 + k4, u11[z2 + 6] = v6 - k4, u11[z2 + 2] = m8 + b4, u11[z2 + 5] = m8 - b4, u11[z2 + 3] = d6 + p7, u11[z2 + 4] = d6 - p7) : (A4 = c7 * C5 + 512 >> 10, u11[z2] = A4, u11[z2 + 1] = A4, u11[z2 + 2] = A4, u11[z2 + 3] = A4, u11[z2 + 4] = A4, u11[z2 + 5] = A4, u11[z2 + 6] = A4, u11[z2 + 7] = A4);
        for (var I4 = 0; I4 < 8; ++I4) C5 = u11[I4], 0 !== ((w4 = u11[I4 + 8]) | (x4 = u11[I4 + 16]) | (y5 = u11[I4 + 24]) | (D4 = u11[I4 + 32]) | (T4 = u11[I4 + 40]) | (P4 = u11[I4 + 48]) | (L2 = u11[I4 + 56])) ? (v6 = (h7 = 4112 + ((h7 = c7 * C5 + 2048 >> 12) + (v6 = c7 * D4 + 2048 >> 12) + 1 >> 1)) - v6, A4 = (m8 = x4) * s6 + (d6 = P4) * i11 + 2048 >> 12, m8 = m8 * i11 - d6 * s6 + 2048 >> 12, d6 = A4, k4 = (p7 = (p7 = f6 * (w4 - L2) + 2048 >> 12) + (k4 = T4) + 1 >> 1) - k4, b4 = (g6 = (g6 = f6 * (w4 + L2) + 2048 >> 12) + (b4 = y5) + 1 >> 1) - b4, A4 = p7 * t8 + g6 * a14 + 2048 >> 12, p7 = p7 * a14 - g6 * t8 + 2048 >> 12, g6 = A4, A4 = b4 * o12 + k4 * r15 + 2048 >> 12, b4 = b4 * r15 - k4 * o12 + 2048 >> 12, C5 = (C5 = (h7 = h7 + d6 + 1 >> 1) + g6) < 16 ? 0 : C5 >= 4080 ? 255 : C5 >> 4, w4 = (w4 = (v6 = v6 + m8 + 1 >> 1) + (k4 = A4)) < 16 ? 0 : w4 >= 4080 ? 255 : w4 >> 4, x4 = (x4 = (m8 = v6 - m8) + b4) < 16 ? 0 : x4 >= 4080 ? 255 : x4 >> 4, y5 = (y5 = (d6 = h7 - d6) + p7) < 16 ? 0 : y5 >= 4080 ? 255 : y5 >> 4, D4 = (D4 = d6 - p7) < 16 ? 0 : D4 >= 4080 ? 255 : D4 >> 4, T4 = (T4 = m8 - b4) < 16 ? 0 : T4 >= 4080 ? 255 : T4 >> 4, P4 = (P4 = v6 - k4) < 16 ? 0 : P4 >= 4080 ? 255 : P4 >> 4, L2 = (L2 = h7 - g6) < 16 ? 0 : L2 >= 4080 ? 255 : L2 >> 4, U4[l9 + I4] = C5, U4[l9 + I4 + 8] = w4, U4[l9 + I4 + 16] = x4, U4[l9 + I4 + 24] = y5, U4[l9 + I4 + 32] = D4, U4[l9 + I4 + 40] = T4, U4[l9 + I4 + 48] = P4, U4[l9 + I4 + 56] = L2) : (A4 = (A4 = c7 * C5 + 8192 >> 14) < -2040 ? 0 : A4 >= 2024 ? 255 : A4 + 2056 >> 4, U4[l9 + I4] = A4, U4[l9 + I4 + 8] = A4, U4[l9 + I4 + 16] = A4, U4[l9 + I4 + 24] = A4, U4[l9 + I4 + 32] = A4, U4[l9 + I4 + 40] = A4, U4[l9 + I4 + 48] = A4, U4[l9 + I4 + 56] = A4);
      }
      function d5(e8, n13) {
        for (var r16 = n13.blocksPerLine, o13 = n13.blocksPerColumn, a15 = new Int16Array(64), t9 = 0; t9 < o13; t9++) for (var i12 = 0; i12 < r16; i12++) m7(n13, h6(n13, t9, i12), a15);
        return n13.blockData;
      }
      function p6(e8, n13, r16) {
        function o13(n14) {
          return e8[n14] << 8 | e8[n14 + 1];
        }
        var a15 = e8.length - 1, t9 = r16 < n13 ? r16 : n13;
        if (n13 >= a15) return null;
        var i12 = o13(n13);
        if (i12 >= 65472 && i12 <= 65534) return { invalid: null, marker: i12, offset: n13 };
        for (var s7 = o13(t9); !(s7 >= 65472 && s7 <= 65534); ) {
          if (++t9 >= a15) return null;
          s7 = o13(t9);
        }
        return { invalid: i12.toString(16), marker: s7, offset: t9 };
      }
      return l8.prototype = { parse: function(r16) {
        function o13() {
          var e8 = r16[c8] << 8 | r16[c8 + 1];
          return c8 += 2, e8;
        }
        function a15() {
          var e8 = o13(), n13 = c8 + e8 - 2, a16 = p6(r16, n13, c8);
          a16 && a16.invalid && (console.log("readDataBlock - incorrect length, next marker is: " + a16.invalid), n13 = a16.offset);
          var t10 = r16.subarray(c8, n13);
          return c8 += t10.length, t10;
        }
        function t9(e8) {
          for (var n13 = Math.ceil(e8.samplesPerLine / 8 / e8.maxH), r17 = Math.ceil(e8.scanLines / 8 / e8.maxV), o14 = 0; o14 < e8.components.length; o14++) {
            R3 = e8.components[o14];
            var a16 = Math.ceil(Math.ceil(e8.samplesPerLine / 8) * R3.h / e8.maxH), t10 = Math.ceil(Math.ceil(e8.scanLines / 8) * R3.v / e8.maxV), i13 = n13 * R3.h, s8 = r17 * R3.v * 64 * (i13 + 1);
            R3.blockData = new Int16Array(s8), R3.blocksPerLine = a16, R3.blocksPerColumn = t10;
          }
          e8.mcusPerLine = n13, e8.mcusPerColumn = r17;
        }
        var i12, s7, c8 = 0, f7 = null, l9 = null, h7 = [], m8 = [], b4 = [], k4 = o13();
        if (65496 !== k4) throw new e7("SOI not found");
        for (k4 = o13(); 65497 !== k4; ) {
          var g6, C5, w4;
          switch (k4) {
            case 65504:
            case 65505:
            case 65506:
            case 65507:
            case 65508:
            case 65509:
            case 65510:
            case 65511:
            case 65512:
            case 65513:
            case 65514:
            case 65515:
            case 65516:
            case 65517:
            case 65518:
            case 65519:
            case 65534:
              var x4 = a15();
              65504 === k4 && 74 === x4[0] && 70 === x4[1] && 73 === x4[2] && 70 === x4[3] && 0 === x4[4] && (f7 = { version: { major: x4[5], minor: x4[6] }, densityUnits: x4[7], xDensity: x4[8] << 8 | x4[9], yDensity: x4[10] << 8 | x4[11], thumbWidth: x4[12], thumbHeight: x4[13], thumbData: x4.subarray(14, 14 + 3 * x4[12] * x4[13]) }), 65518 === k4 && 65 === x4[0] && 100 === x4[1] && 111 === x4[2] && 98 === x4[3] && 101 === x4[4] && (l9 = { version: x4[5] << 8 | x4[6], flags0: x4[7] << 8 | x4[8], flags1: x4[9] << 8 | x4[10], transformCode: x4[11] });
              break;
            case 65499:
              for (var y5 = o13() + c8 - 2; c8 < y5; ) {
                var D4 = r16[c8++], T4 = new Uint16Array(64);
                if (D4 >> 4) {
                  if (D4 >> 4 != 1) throw new e7("DQT - invalid table spec");
                  for (C5 = 0; C5 < 64; C5++) T4[n12[C5]] = o13();
                } else for (C5 = 0; C5 < 64; C5++) T4[n12[C5]] = r16[c8++];
                h7[15 & D4] = T4;
              }
              break;
            case 65472:
            case 65473:
            case 65474:
              if (i12) throw new e7("Only single frame JPEGs supported");
              o13(), (i12 = {}).extended = 65473 === k4, i12.progressive = 65474 === k4, i12.precision = r16[c8++], i12.scanLines = o13(), i12.samplesPerLine = o13(), i12.components = [], i12.componentIds = {};
              var P4, L2 = r16[c8++], A4 = 0, _4 = 0;
              for (g6 = 0; g6 < L2; g6++) {
                P4 = r16[c8];
                var U4 = r16[c8 + 1] >> 4, z2 = 15 & r16[c8 + 1];
                A4 < U4 && (A4 = U4), _4 < z2 && (_4 = z2);
                var I4 = r16[c8 + 2];
                w4 = i12.components.push({ h: U4, v: z2, quantizationId: I4, quantizationTable: null }), i12.componentIds[P4] = w4 - 1, c8 += 3;
              }
              i12.maxH = A4, i12.maxV = _4, t9(i12);
              break;
            case 65476:
              var M3 = o13();
              for (g6 = 2; g6 < M3; ) {
                var Y2 = r16[c8++], q = new Uint8Array(16), S4 = 0;
                for (C5 = 0; C5 < 16; C5++, c8++) S4 += q[C5] = r16[c8];
                var H3 = new Uint8Array(S4);
                for (C5 = 0; C5 < S4; C5++, c8++) H3[C5] = r16[c8];
                g6 += 17 + S4, (Y2 >> 4 ? m8 : b4)[15 & Y2] = u10(q, H3);
              }
              break;
            case 65501:
              o13(), s7 = o13();
              break;
            case 65498:
              o13();
              var R3, j3 = r16[c8++], E3 = [];
              for (g6 = 0; g6 < j3; g6++) {
                var J = i12.componentIds[r16[c8++]];
                R3 = i12.components[J];
                var V3 = r16[c8++];
                R3.huffmanTableDC = b4[V3 >> 4], R3.huffmanTableAC = m8[15 & V3], E3.push(R3);
              }
              var B4 = r16[c8++], N2 = r16[c8++], G3 = r16[c8++], O4 = v5(r16, c8, i12, E3, s7, B4, N2, G3 >> 4, 15 & G3);
              c8 += O4;
              break;
            case 65535:
              255 !== r16[c8] && c8--;
              break;
            default:
              if (255 === r16[c8 - 3] && r16[c8 - 2] >= 192 && r16[c8 - 2] <= 254) {
                c8 -= 3;
                break;
              }
              throw new e7("unknown marker " + k4.toString(16));
          }
          k4 = o13();
        }
        for (this.width = i12.samplesPerLine, this.height = i12.scanLines, this.jfif = f7, this.eof = c8, this.adobe = l9, this.components = [], g6 = 0; g6 < i12.components.length; g6++) {
          var Q = h7[(R3 = i12.components[g6]).quantizationId];
          Q && (R3.quantizationTable = Q), this.components.push({ output: d5(i12, R3), scaleX: R3.h / i12.maxH, scaleY: R3.v / i12.maxV, blocksPerLine: R3.blocksPerLine, blocksPerColumn: R3.blocksPerColumn });
        }
        this.numComponents = this.components.length;
      }, _getLinearizedBlockData: function(e8, n13) {
        var r16, o13, a15, t9, i12, s7, c8, f7, l9, u11, h7, v6 = this.width / e8, m8 = this.height / n13, d6 = 0, p7 = this.components.length, b4 = e8 * n13 * p7, k4 = new Uint8ClampedArray(b4), g6 = new Uint32Array(e8), C5 = 4294967288;
        for (c8 = 0; c8 < p7; c8++) {
          for (o13 = (r16 = this.components[c8]).scaleX * v6, a15 = r16.scaleY * m8, d6 = c8, h7 = r16.output, t9 = r16.blocksPerLine + 1 << 3, i12 = 0; i12 < e8; i12++) f7 = 0 | i12 * o13, g6[i12] = (f7 & C5) << 3 | 7 & f7;
          for (s7 = 0; s7 < n13; s7++) for (u11 = t9 * ((f7 = 0 | s7 * a15) & C5) | (7 & f7) << 3, i12 = 0; i12 < e8; i12++) k4[d6] = h7[u11 + g6[i12]], d6 += p7;
        }
        var w4 = this.decodeTransform;
        if (w4) for (c8 = 0; c8 < b4; ) for (f7 = 0, l9 = 0; f7 < p7; f7++, c8++, l9 += 2) k4[c8] = (k4[c8] * w4[l9] >> 8) + w4[l9 + 1];
        return k4;
      }, _isColorConversionNeeded: function() {
        return this.adobe ? !!this.adobe.transformCode : 3 === this.numComponents ? 0 !== this.colorTransform : 1 === this.colorTransform;
      }, _convertYccToRgb: function(e8) {
        for (var n13, r16, o13, a15 = 0, t9 = e8.length; a15 < t9; a15 += 3) n13 = e8[a15], r16 = e8[a15 + 1], o13 = e8[a15 + 2], e8[a15] = n13 - 179.456 + 1.402 * o13, e8[a15 + 1] = n13 + 135.459 - 0.344 * r16 - 0.714 * o13, e8[a15 + 2] = n13 - 226.816 + 1.772 * r16;
        return e8;
      }, _convertYcckToRgb: function(e8) {
        for (var n13, r16, o13, a15, t9 = 0, i12 = 0, s7 = e8.length; i12 < s7; i12 += 4) n13 = e8[i12], r16 = e8[i12 + 1], o13 = e8[i12 + 2], a15 = e8[i12 + 3], e8[t9++] = r16 * (-660635669420364e-19 * r16 + 437130475926232e-18 * o13 - 54080610064599e-18 * n13 + 48449797120281e-17 * a15 - 0.154362151871126) - 122.67195406894 + o13 * (-957964378445773e-18 * o13 + 817076911346625e-18 * n13 - 0.00477271405408747 * a15 + 1.53380253221734) + n13 * (961250184130688e-18 * n13 - 0.00266257332283933 * a15 + 0.48357088451265) + a15 * (-336197177618394e-18 * a15 + 0.484791561490776), e8[t9++] = 107.268039397724 + r16 * (219927104525741e-19 * r16 - 640992018297945e-18 * o13 + 659397001245577e-18 * n13 + 426105652938837e-18 * a15 - 0.176491792462875) + o13 * (-778269941513683e-18 * o13 + 0.00130872261408275 * n13 + 770482631801132e-18 * a15 - 0.151051492775562) + n13 * (0.00126935368114843 * n13 - 0.00265090189010898 * a15 + 0.25802910206845) + a15 * (-318913117588328e-18 * a15 - 0.213742400323665), e8[t9++] = r16 * (-570115196973677e-18 * r16 - 263409051004589e-19 * o13 + 0.0020741088115012 * n13 - 0.00288260236853442 * a15 + 0.814272968359295) - 20.810012546947 + o13 * (-153496057440975e-19 * o13 - 132689043961446e-18 * n13 + 560833691242812e-18 * a15 - 0.195152027534049) + n13 * (0.00174418132927582 * n13 - 0.00255243321439347 * a15 + 0.116935020465145) + a15 * (-343531996510555e-18 * a15 + 0.24165260232407);
        return e8;
      }, _convertYcckToCmyk: function(e8) {
        for (var n13, r16, o13, a15 = 0, t9 = e8.length; a15 < t9; a15 += 4) n13 = e8[a15], r16 = e8[a15 + 1], o13 = e8[a15 + 2], e8[a15] = 434.456 - n13 - 1.402 * o13, e8[a15 + 1] = 119.541 - n13 + 0.344 * r16 + 0.714 * o13, e8[a15 + 2] = 481.816 - n13 - 1.772 * r16;
        return e8;
      }, _convertCmykToRgb: function(e8) {
        for (var n13, r16, o13, a15, t9 = 0, i12 = 1 / 255, s7 = 0, c8 = e8.length; s7 < c8; s7 += 4) n13 = e8[s7] * i12, r16 = e8[s7 + 1] * i12, o13 = e8[s7 + 2] * i12, a15 = e8[s7 + 3] * i12, e8[t9++] = 255 + n13 * (-4.387332384609988 * n13 + 54.48615194189176 * r16 + 18.82290502165302 * o13 + 212.25662451639585 * a15 - 285.2331026137004) + r16 * (1.7149763477362134 * r16 - 5.6096736904047315 * o13 - 17.873870861415444 * a15 - 5.497006427196366) + o13 * (-2.5217340131683033 * o13 - 21.248923337353073 * a15 + 17.5119270841813) - a15 * (21.86122147463605 * a15 + 189.48180835922747), e8[t9++] = 255 + n13 * (8.841041422036149 * n13 + 60.118027045597366 * r16 + 6.871425592049007 * o13 + 31.159100130055922 * a15 - 79.2970844816548) + r16 * (-15.310361306967817 * r16 + 17.575251261109482 * o13 + 131.35250912493976 * a15 - 190.9453302588951) + o13 * (4.444339102852739 * o13 + 9.8632861493405 * a15 - 24.86741582555878) - a15 * (20.737325471181034 * a15 + 187.80453709719578), e8[t9++] = 255 + n13 * (0.8842522430003296 * n13 + 8.078677503112928 * r16 + 30.89978309703729 * o13 - 0.23883238689178934 * a15 - 14.183576799673286) + r16 * (10.49593273432072 * r16 + 63.02378494754052 * o13 + 50.606957656360734 * a15 - 112.23884253719248) + o13 * (0.03296041114873217 * o13 + 115.60384449646641 * a15 - 193.58209356861505) - a15 * (22.33816807309886 * a15 + 180.12613974708367);
        return e8;
      }, getData: function(n13, r16, o13) {
        if (this.numComponents > 4) throw new e7("Unsupported color mode");
        var a15 = this._getLinearizedBlockData(n13, r16);
        if (1 === this.numComponents && o13) {
          for (var t9 = a15.length, i12 = new Uint8ClampedArray(3 * t9), s7 = 0, c8 = 0; c8 < t9; c8++) {
            var f7 = a15[c8];
            i12[s7++] = f7, i12[s7++] = f7, i12[s7++] = f7;
          }
          return i12;
        }
        if (3 === this.numComponents && this._isColorConversionNeeded()) return this._convertYccToRgb(a15);
        if (4 === this.numComponents) {
          if (this._isColorConversionNeeded()) return o13 ? this._convertYcckToRgb(a15) : this._convertYcckToCmyk(a15);
          if (o13) return this._convertCmykToRgb(a15);
        }
        return a15;
      } }, l8;
    }();
  }, void 0 !== (a13 = o11()) && (e6.exports = a13)), r5.exports;
  var e6, o11, a13;
}
var a3 = o3(o4());

// node_modules/@arcgis/core/layers/support/rasterFormats/JpgPlus.js
var r6 = class {
  static decode(r15, n12 = false) {
    const s6 = new Uint8Array(r15), o11 = new a3();
    o11.parse(s6);
    const { width: a13, height: i11, numComponents: f6, eof: h6 } = o11, l8 = o11.getData(a13, i11, true), c7 = a13 * i11;
    let u10, g6 = null, p6 = 0, w4 = 0, m7 = 0;
    if (!n12 && h6 < s6.length - 1) try {
      const t8 = new s2(s6.subarray(h6)).getBytes();
      g6 = new Uint8Array(c7);
      let r16 = 0;
      for (p6 = 0; p6 < t8.length; p6++) for (m7 = 7; m7 >= 0; m7--) g6[r16++] = t8[p6] >> m7 & 1;
    } catch {
    }
    if (1 === f6 && l8.length === a13 * i11) {
      const t8 = new Uint8Array(l8.buffer);
      u10 = [t8, t8, t8];
    } else {
      for (u10 = [], p6 = 0; p6 < 3; p6++) u10.push(new Uint8Array(c7));
      for (m7 = 0, w4 = 0; w4 < c7; w4++) for (p6 = 0; p6 < 3; p6++) u10[p6][w4] = l8[m7++];
    }
    return { width: a13, height: i11, pixels: u10, mask: g6 };
  }
};

// node_modules/@arcgis/core/layers/support/rasterFormats/Lerc.js
var t2 = [{ pixelType: "S8", size: 1, ctor: Int8Array, range: [-128, 127] }, { pixelType: "U8", size: 1, ctor: Uint8Array, range: [0, 255] }, { pixelType: "S16", size: 2, ctor: Int16Array, range: [-32768, 32767] }, { pixelType: "U16", size: 2, ctor: Uint16Array, range: [0, 65536] }, { pixelType: "S32", size: 4, ctor: Int32Array, range: [-2147483648, 2147483647] }, { pixelType: "U32", size: 4, ctor: Uint32Array, range: [0, 4294967296] }, { pixelType: "F32", size: 4, ctor: Float32Array, range: [-34027999387901484e22, 34027999387901484e22] }, { pixelType: "F64", size: 8, ctor: Float64Array, range: [-17976931348623157e292, 17976931348623157e292] }];
var n4 = null;
function r7() {
  return n4 || (n4 = import("./lerc-wasm-3G3LEZVL.js").then((e6) => e6.l).then(({ default: t8 }) => t8({ locateFile: (t9) => n2(`esri/layers/support/rasterFormats/${t9}`) })).then((e6) => {
    l4(e6);
  }), n4);
}
var a4 = { getBlobInfo: null, decode: null };
function o5(e6) {
  return 16 + (e6 >> 3 << 3);
}
function s3(e6, t8, n12) {
  n12.set(e6.slice(t8, t8 + n12.length));
}
function l4(e6) {
  const { _malloc: n12, _free: r15, _lerc_getBlobInfo: l8, _lerc_getDataRanges: i11, _lerc_decode_4D: u10, asm: f6 } = e6;
  let c7;
  const h6 = Object.values(f6).find((t8) => t8 && "buffer" in t8 && t8.buffer === e6.HEAPU8.buffer), y5 = (e7) => {
    const t8 = e7.map((e8) => o5(e8)), r16 = t8.reduce((e8, t9) => e8 + t9), a13 = n12(r16);
    c7 = new Uint8Array(h6.buffer);
    let s6 = t8[0];
    t8[0] = a13;
    for (let n13 = 1; n13 < t8.length; n13++) {
      const e8 = t8[n13];
      t8[n13] = t8[n13 - 1] + s6, s6 = e8;
    }
    return t8;
  };
  a4.getBlobInfo = (e7) => {
    const t8 = 12, n13 = 3, a13 = new Uint8Array(4 * t8), o11 = new Uint8Array(8 * n13), [u11, f7, p6] = y5([e7.length, a13.length, o11.length]);
    c7.set(e7, u11), c7.set(a13, f7), c7.set(o11, p6);
    let g6 = l8(u11, e7.length, f7, p6, t8, n13);
    if (g6) throw r15(u11), new Error(`lerc-getBlobInfo: error code is ${g6}`);
    c7 = new Uint8Array(h6.buffer), s3(c7, f7, a13), s3(c7, p6, o11);
    const d5 = new Uint32Array(a13.buffer), b4 = new Float64Array(o11.buffer), [w4, A4, , m7, U4, x4, C5, V3, T4, D4, z2] = d5, F2 = { version: w4, depthCount: D4, width: m7, height: U4, validPixelCount: C5, bandCount: x4, blobSize: V3, maskCount: T4, dataType: A4, minValue: b4[0], maxValue: b4[1], maxZerror: b4[2], statistics: [], bandCountWithNoData: z2 };
    if (z2 && D4 > 1) return r15(u11), F2;
    if (1 === D4 && 1 === x4) return r15(u11), F2.statistics.push({ minValue: b4[0], maxValue: b4[1] }), F2;
    const I4 = D4 * x4 * 8, _4 = new Uint8Array(I4), k4 = new Uint8Array(I4);
    let B4 = u11, S4 = 0, v5 = 0, E3 = false;
    if (c7.byteLength < u11 + 2 * I4 ? (r15(u11), E3 = true, [B4, S4, v5] = y5([e7.length, I4, I4]), c7.set(e7, B4)) : [S4, v5] = y5([I4, I4]), c7.set(_4, S4), c7.set(k4, v5), g6 = i11(B4, e7.length, D4, x4, S4, v5), g6) throw r15(B4), E3 || r15(S4), new Error(`lerc-getDataRanges: error code is ${g6}`);
    c7 = new Uint8Array(h6.buffer), s3(c7, S4, _4), s3(c7, v5, k4);
    const O4 = new Float64Array(_4.buffer), $ = new Float64Array(k4.buffer), j3 = F2.statistics;
    for (let r16 = 0; r16 < x4; r16++) if (D4 > 1) {
      const e8 = O4.slice(r16 * D4, (r16 + 1) * D4), t9 = $.slice(r16 * D4, (r16 + 1) * D4), n14 = Math.min.apply(null, e8), a14 = Math.max.apply(null, t9);
      j3.push({ minValue: n14, maxValue: a14, depthStats: { minValues: e8, maxValues: t9 } });
    } else j3.push({ minValue: O4[r16], maxValue: $[r16] });
    return r15(B4), E3 || r15(S4), F2;
  }, a4.decode = (e7, n13) => {
    const { maskCount: a13, depthCount: o11, bandCount: l9, width: i12, height: f7, dataType: p6, bandCountWithNoData: g6 } = n13, d5 = t2[p6], b4 = i12 * f7, w4 = new Uint8Array(b4 * l9), A4 = b4 * o11 * l9 * d5.size, m7 = new Uint8Array(A4), U4 = new Uint8Array(l9), x4 = new Uint8Array(8 * l9), [C5, V3, T4, D4, z2] = y5([e7.length, w4.length, m7.length, U4.length, x4.length]);
    c7.set(e7, C5), c7.set(w4, V3), c7.set(m7, T4), c7.set(U4, D4), c7.set(x4, z2);
    const F2 = u10(C5, e7.length, a13, V3, o11, i12, f7, l9, p6, T4, D4, z2);
    if (F2) throw r15(C5), new Error(`lerc-decode: error code is ${F2}`);
    c7 = new Uint8Array(h6.buffer), s3(c7, T4, m7), s3(c7, V3, w4);
    let I4 = null;
    if (g6) {
      s3(c7, D4, U4), s3(c7, z2, x4), I4 = [];
      const e8 = new Float64Array(x4.buffer);
      for (let t8 = 0; t8 < U4.length; t8++) I4.push(U4[t8] ? e8[t8] : null);
    }
    return r15(C5), { data: m7, maskData: w4, noDataValues: I4 };
  };
}
function i5(e6, t8, n12, r15, a13) {
  if (n12 < 2) return e6;
  const o11 = new r15(t8 * n12);
  for (let s6 = 0, l8 = 0; s6 < t8; s6++) for (let r16 = 0, a14 = s6; r16 < n12; r16++, a14 += t8) o11[a14] = e6[l8++];
  return o11;
}
function u3(e6, n12 = {}) {
  const r15 = n12.inputOffset ?? 0, o11 = e6 instanceof Uint8Array ? e6.subarray(r15) : new Uint8Array(e6, r15), s6 = a4.getBlobInfo(o11), { data: l8, maskData: u10, noDataValues: f6 } = a4.decode(o11, s6), { width: c7, height: h6, bandCount: y5, depthCount: p6, dataType: g6, maskCount: d5, statistics: b4 } = s6, w4 = t2[g6], A4 = new w4.ctor(l8.buffer), m7 = [], U4 = [], x4 = c7 * h6, C5 = x4 * p6;
  for (let t8 = 0; t8 < y5; t8++) {
    const e7 = A4.subarray(t8 * C5, (t8 + 1) * C5);
    if (n12.returnInterleaved) m7.push(e7);
    else {
      const t9 = i5(e7, x4, p6, w4.ctor);
      m7.push(t9);
    }
    U4.push(u10.subarray(t8 * C5, (t8 + 1) * C5));
  }
  const V3 = 0 === d5 ? null : 1 === d5 ? U4[0] : new Uint8Array(x4);
  if (d5 > 1) {
    V3.set(U4[0]);
    for (let e7 = 1; e7 < U4.length; e7++) {
      const t8 = U4[e7];
      for (let e8 = 0; e8 < x4; e8++) V3[e8] = V3[e8] & t8[e8];
    }
  }
  const { noDataValue: T4 } = n12, D4 = null != T4 && w4.range[0] <= T4 && w4.range[1] >= T4;
  if (d5 > 0 && D4) for (let t8 = 0; t8 < y5; t8++) {
    const e7 = m7[t8], n13 = U4[t8] || V3;
    for (let t9 = 0; t9 < x4; t9++) 0 === n13[t9] && (e7[t9] = T4);
  }
  const z2 = d5 === y5 && y5 > 1 ? U4 : null, { pixelType: F2 } = w4;
  return { width: c7, height: h6, bandCount: y5, pixelType: F2, depthCount: p6, statistics: b4, pixels: m7, mask: V3, bandMasks: z2, noDataValues: f6 };
}

// node_modules/@arcgis/core/layers/support/rasterFormats/Lzw.js
function e2(e6, n12, t8, r15 = true) {
  if (n12 % 4 != 0 || t8 % 4 != 0) {
    const i11 = new ArrayBuffer(4 * Math.ceil(t8 / 4)), o11 = new Uint8Array(i11), l8 = new Uint8Array(e6, n12, t8);
    if (r15) for (let e7 = 0; e7 < o11.length; e7 += 4) o11[e7] = l8[e7 + 3], o11[e7 + 1] = l8[e7 + 2], o11[e7 + 2] = l8[e7 + 1], o11[e7 + 3] = l8[e7];
    else o11.set(l8);
    return new Uint32Array(o11.buffer);
  }
  if (r15) {
    const r16 = new Uint8Array(e6, n12, t8), i11 = new Uint8Array(r16.length);
    for (let e7 = 0; e7 < i11.length; e7 += 4) i11[e7] = r16[e7 + 3], i11[e7 + 1] = r16[e7 + 2], i11[e7 + 2] = r16[e7 + 1], i11[e7 + 3] = r16[e7];
    return new Uint32Array(i11.buffer);
  }
  return new Uint32Array(e6, n12, t8 / 4);
}
function n5() {
  const e6 = [];
  for (let n12 = 0; n12 <= 257; n12++) e6[n12] = [n12];
  return e6;
}
function t3(e6, n12) {
  for (let t8 = 0; t8 < n12.length; t8++) e6.push(n12[t8]);
}
var r8 = /* @__PURE__ */ new Set();
function i6(i11, o11, l8, f6 = true) {
  const s6 = e2(i11, o11, l8, f6);
  let a13 = 9, c7 = n5(), u10 = 32, h6 = c7.length, d5 = [], w4 = 1, g6 = s6[0], y5 = 0;
  const A4 = s6.length, U4 = 8 * (4 * A4 - l8), p6 = [];
  for (; null != g6; ) {
    if (u10 >= a13) u10 -= a13, y5 = g6 >>> 32 - a13, g6 <<= a13;
    else {
      y5 = g6 >>> 32 - u10, g6 = s6[w4++];
      const e7 = a13 - u10;
      u10 = 32 - e7, y5 = (y5 << e7) + (g6 >>> u10), g6 <<= e7;
    }
    if (257 === y5) break;
    if (256 === y5) {
      a13 = 9, c7 = n5(), h6 = c7.length, d5 = [];
      continue;
    }
    const e6 = c7[y5];
    if (null == e6) {
      if (y5 > c7.length) throw new Error("data integrity issue: code does not exist on code page");
      d5.push(d5[0]), c7[h6++] = d5.slice(), t3(p6, d5);
    } else t3(p6, e6), d5.push(e6[0]), d5.length > 1 && (c7[h6++] = d5.slice()), d5 = e6.slice();
    if (r8.has(h6) && a13++, 0 === u10 && (g6 = s6[w4++], u10 = 32), w4 > A4 || w4 === A4 && u10 <= U4) break;
  }
  return new Uint8Array(p6);
}
r8.add(511), r8.add(1023), r8.add(2047), r8.add(4095), r8.add(8191);

// node_modules/@arcgis/core/layers/support/rasterFormats/Raw.js
var e3 = (e6, r15) => {
  const a13 = r15.width * r15.height, n12 = r15.pixelType;
  return Math.floor(e6.byteLength / (a13 * t4(n12)));
};
var t4 = (e6) => {
  let t8 = 1;
  switch (e6) {
    case Uint8Array:
    case Int8Array:
      t8 = 1;
      break;
    case Uint16Array:
    case Int16Array:
      t8 = 2;
      break;
    case Uint32Array:
    case Int32Array:
    case Float32Array:
      t8 = 4;
      break;
    case Float64Array:
      t8 = 8;
  }
  return t8;
};
var r9 = (e6, t8) => {
  if (8 * e6.byteLength < t8) return null;
  const r15 = new Uint8Array(e6, 0, Math.ceil(t8 / 8)), a13 = new Uint8Array(t8);
  let n12 = 0, s6 = 0, l8 = 0, i11 = 0;
  for (l8 = 0; l8 < r15.length - 1; l8++) for (s6 = r15[l8], i11 = 7; i11 >= 0; i11--) a13[n12++] = s6 >> i11 & 1;
  for (i11 = 7; n12 < t8 - 1; ) s6 = r15[r15.length - 1], a13[n12++] = s6 >> i11 & 1, i11--;
  return a13;
};
var a5 = class {
  static decode(a13, n12) {
    const s6 = n12.pixelType, l8 = [], i11 = n12.width * n12.height, h6 = e3(a13, n12), { bandIds: c7, format: y5 } = n12, o11 = c7?.length || e3(a13, n12), b4 = a13.byteLength - a13.byteLength % (i11 * t4(s6)), f6 = new s6(a13, 0, i11 * h6);
    let u10, g6, A4, p6, d5 = null;
    if ("bip" === y5) for (u10 = 0; u10 < o11; u10++) {
      for (A4 = new s6(i11), p6 = c7 ? c7[u10] : u10, g6 = 0; g6 < i11; g6++) A4[g6] = f6[g6 * h6 + p6];
      l8.push(A4);
    }
    else if ("bsq" === y5) for (u10 = 0; u10 < o11; u10++) p6 = c7 ? c7[u10] : u10, l8.push(f6.subarray(p6 * i11, (p6 + 1) * i11));
    return b4 < a13.byteLength - 1 && (d5 = r9(a13.slice(b4), i11)), { pixels: l8, mask: d5 };
  }
};

// node_modules/@arcgis/core/layers/support/rasterDatasets/byteStreamUtils.js
function r10(r15, t8) {
  let n12 = 0, o11 = "", e6 = 0, f6 = 0;
  const c7 = r15.length;
  for (; n12 < c7; ) f6 = r15[n12++], e6 = f6 >> 4, e6 < 8 ? e6 = 1 : 15 === e6 ? (e6 = 4, f6 = (7 & f6) << 18 | (63 & r15[n12++]) << 12 | (63 & r15[n12++]) << 6 | 63 & r15[n12++]) : 14 === e6 ? (e6 = 3, f6 = (15 & f6) << 12 | (63 & r15[n12++]) << 6 | 63 & r15[n12++]) : (e6 = 2, f6 = (31 & f6) << 6 | 63 & r15[n12++]), (0 !== f6 || t8) && (o11 += String.fromCharCode(f6));
  return o11;
}

// node_modules/@arcgis/core/layers/support/rasterFormats/tiffTag.js
var e4 = (() => {
  const e6 = [];
  return e6[254] = "NEWSUBFILETYPE", e6[255] = "SUBFILETYPE", e6[256] = "IMAGEWIDTH", e6[257] = "IMAGELENGTH", e6[258] = "BITSPERSAMPLE", e6[259] = "COMPRESSION", e6[262] = "PHOTOMETRICINTERPRETATION", e6[263] = "THRESHHOLDING", e6[264] = "CELLWIDTH", e6[265] = "CELLLENGTH", e6[266] = "FILLORDER", e6[269] = "DOCUMENTNAME", e6[270] = "IMAGEDESCRIPTION", e6[271] = "MAKE", e6[272] = "MODEL", e6[273] = "STRIPOFFSETS", e6[274] = "ORIENTATION", e6[277] = "SAMPLESPERPIXEL", e6[278] = "ROWSPERSTRIP", e6[279] = "STRIPBYTECOUNTS", e6[280] = "MINSAMPLEVALUE", e6[281] = "MAXSAMPLEVALUE", e6[282] = "XRESOLUTION", e6[283] = "YRESOLUTION", e6[284] = "PLANARCONFIGURATION", e6[285] = "PAGENAME", e6[286] = "XPOSITION", e6[287] = "YPOSITION", e6[288] = "FREEOFFSETS", e6[289] = "FREEBYTECOUNTS", e6[290] = "GRAYRESPONSEUNIT", e6[291] = "GRAYRESPONSECURVE", e6[292] = "T4OPTIONS", e6[293] = "T6OPTIONS", e6[296] = "RESOLUTIONUNIT", e6[297] = "PAGENUMBER", e6[300] = "COLORRESPONSEUNIT", e6[301] = "TRANSFERFUNCTION", e6[305] = "SOFTWARE", e6[306] = "DATETIME", e6[315] = "ARTIST", e6[316] = "HOSTCOMPUTER", e6[317] = "PREDICTOR", e6[318] = "WHITEPOINT", e6[319] = "PRIMARYCHROMATICITIES", e6[320] = "COLORMAP", e6[321] = "HALFTONEHINTS", e6[322] = "TILEWIDTH", e6[323] = "TILELENGTH", e6[324] = "TILEOFFSETS", e6[325] = "TILEBYTECOUNTS", e6[326] = "BADFAXLINES", e6[327] = "CLEANFAXDATA", e6[328] = "CONSECUTIVEBADFAXLINES", e6[330] = "SUBIFD", e6[332] = "INKSET", e6[333] = "INKNAMES", e6[334] = "NUMBEROFINKS", e6[336] = "DOTRANGE", e6[337] = "TARGETPRINTER", e6[338] = "EXTRASAMPLES", e6[339] = "SAMPLEFORMAT", e6[340] = "SMINSAMPLEVALUE", e6[341] = "SMAXSAMPLEVALUE", e6[342] = "TRANSFERRANGE", e6[347] = "JPEGTABLES", e6[512] = "JPEGPROC", e6[513] = "JPEGIFOFFSET", e6[514] = "JPEGIFBYTECOUNT", e6[515] = "JPEGRESTARTINTERVAL", e6[517] = "JPEGLOSSLESSPREDICTORS", e6[518] = "JPEGPOINTTRANSFORM", e6[519] = "JPEGQTABLES", e6[520] = "JPEGDCTABLES", e6[521] = "JPEGACTABLES", e6[529] = "YCBCRCOEFFICIENTS", e6[530] = "YCBCRSUBSAMPLING", e6[531] = "YCBCRPOSITIONING", e6[532] = "REFERENCEBLACKWHITE", e6[700] = "XMP", e6[33550] = "GEOPIXELSCALE", e6[33922] = "GEOTIEPOINTS", e6[33432] = "COPYRIGHT", e6[42112] = "GDAL_METADATA", e6[42113] = "GDAL_NODATA", e6[50844] = "RPCCOEFFICIENT", e6[34264] = "GEOTRANSMATRIX", e6[34735] = "GEOKEYDIRECTORY", e6[34736] = "GEODOUBLEPARAMS", e6[34737] = "GEOASCIIPARAMS", e6[34665] = "EXIFIFD", e6[34853] = "GPSIFD", e6[40965] = "INTEROPERABILITYIFD", e6;
})();
var i7 = (() => {
  const i11 = e4.slice();
  return i11[36864] = "ExifVersion", i11[40960] = "FlashpixVersion", i11[40961] = "ColorSpace", i11[42240] = "Gamma", i11[37121] = "ComponentsConfiguration", i11[37122] = "CompressedBitsPerPixel", i11[40962] = "PixelXDimension", i11[40963] = "PixelYDimension", i11[37500] = "MakerNote", i11[37510] = "UserComment", i11[40964] = "RelatedSoundFile", i11[36867] = "DateTimeOriginal", i11[36868] = "DateTimeDigitized", i11[36880] = "OffsetTime", i11[36881] = "OffsetTimeOriginal", i11[36882] = "OffsetTimeDigitized", i11[37520] = "SubSecTime", i11[37521] = "SubSecTimeOriginal", i11[37522] = "SubSecTimeDigitized", i11[37888] = "Temperature", i11[37889] = "Humidity", i11[37890] = "Pressure", i11[37891] = "WaterDepth", i11[37892] = "Acceleration", i11[37893] = "CameraElevationAngle", i11[42016] = "ImageUniqueID", i11[42032] = "CameraOwnerName", i11[42033] = "BodySerialNumber", i11[42034] = "LensSpecification", i11[42035] = "LensMake", i11[42036] = "LensModel", i11[42037] = "LensSerialNumber", i11[33434] = "ExposureTime", i11[33437] = "FNumber", i11[34850] = "ExposureProgram", i11[34852] = "SpectralSensitivity", i11[34855] = "PhotographicSensitivity", i11[34856] = "OECF", i11[34864] = "SensitivityType", i11[34865] = "StandardOutputSensitivity", i11[34866] = "RecommendedExposureIndex", i11[34867] = "ISOSpeed", i11[34868] = "ISOSpeedLatitudeyyy", i11[34869] = "ISOSpeedLatitudezzz", i11[37377] = "ShutterSpeedValue", i11[37378] = "ApertureValue", i11[37379] = "BrightnessValue", i11[37380] = "ExposureBiasValue", i11[37381] = "MaxApertureValue", i11[37382] = "SubjectDistance", i11[37383] = "MeteringMode", i11[37384] = "LightSource", i11[37385] = "Flash", i11[37386] = "FocalLength", i11[37396] = "SubjectArea", i11[41483] = "FlashEnergy", i11[41484] = "SpatialFrequencyResponse", i11[41486] = "FocalPlaneXResolution", i11[41487] = "FocalPlaneYResolution", i11[41488] = "FocalPlaneResolutionUnit", i11[41492] = "SubjectLocation", i11[41493] = "ExposureIndex", i11[41495] = "SensingMethod", i11[41728] = "FileSource", i11[41729] = "SceneType", i11[41730] = "CFAPattern", i11[41985] = "CustomRendered", i11[41986] = "ExposureMode", i11[41987] = "WhiteBalance", i11[41988] = "DigitalZoomRatio", i11[41989] = "FocalLengthIn35mmFilm", i11[41990] = "SceneCaptureType", i11[41991] = "GainControl", i11[41992] = "Contrast", i11[41993] = "Saturation", i11[41994] = "Sharpness", i11[41995] = "DeviceSettingDescription", i11[41996] = "SubjectDistanceRange", i11;
})();
var o6 = ["GPSVersionID", "GPSLatitudeRef", "GPSLatitude", "GPSLongitudeRef", "GPSLongitude", "GPSAltitudeRef", "GPSAltitude", "GPSTimeStamp", "GPSSatellites", "GPSStatus", "GPSMeasureMode", "GPSDOP", "GPSSpeedRef", "GPSSpeed", "GPSTrackRef", "GPSTrack", "GPSImgDirectionRef", "GPSImgDirection", "GPSMapDatum", "GPSDestLatitudeRef", "GPSDestLatitude", "GPSDestLongitudeRef", "GPSDestLongitude", "GPSDestBearingRef", "GPSDestBearing", "GPSDestDistanceRef", "GPSDestDistance", "GPSProcessingMethod", "GPSAreaInformation", "GPSDateStamp", "GPSDifferential", "GPSHPositioningError"];
var t5 = (() => {
  const e6 = [];
  return e6[1024] = "GTModelTypeGeoKey", e6[1025] = "GTRasterTypeGeoKey", e6[1026] = "GTCitationGeoKey", e6[2048] = "GeographicTypeGeoKey", e6[2049] = "GeogCitationGeoKey", e6[2050] = "GeogGeodeticDatumGeoKey", e6[2051] = "GeogPrimeMeridianGeoKey", e6[2052] = "GeogLinearUnitsGeoKey", e6[2053] = "GeogLinearUnitSizeGeoKey", e6[2054] = "GeogAngularUnitsGeoKey", e6[2055] = "GeogAngularUnitSizeGeoKey", e6[2056] = "GeogEllipsoidGeoKey", e6[2057] = "GeogSemiMajorAxisGeoKey", e6[2058] = "GeogSemiMinorAxisGeoKey", e6[2059] = "GeogInvFlatteningGeoKey", e6[2061] = "GeogPrimeMeridianLongGeoKey", e6[2060] = "GeogAzimuthUnitsGeoKey", e6[3072] = "ProjectedCSTypeGeoKey", e6[3073] = "PCSCitationGeoKey", e6[3074] = "ProjectionGeoKey", e6[3075] = "ProjCoordTransGeoKey", e6[3076] = "ProjLinearUnitsGeoKey", e6[3077] = "ProjLinearUnitSizeGeoKey", e6[3078] = "ProjStdParallel1GeoKey", e6[3079] = "ProjStdParallel2GeoKey", e6[3080] = "ProjNatOriginLongGeoKey", e6[3081] = "ProjNatOriginLatGeoKey", e6[3082] = "ProjFalseEastingGeoKey", e6[3083] = "ProjFalseNorthingGeoKey", e6[3084] = "ProjFalseOriginLongGeoKey", e6[3085] = "ProjFalseOriginLatGeoKey", e6[3086] = "ProjFalseOriginEastingGeoKey", e6[3087] = "ProjFalseOriginNorthingGeoKey", e6[3088] = "ProjCenterLongGeoKey", e6[3090] = "ProjCenterEastingGeoKey", e6[3091] = "ProjCenterNorthingGeoKey", e6[3092] = "ProjScaleAtNatOriginGeoKey", e6[3093] = "ProjScaleAtCenterGeoKey", e6[3094] = "ProjAzimuthAngleGeoKey", e6[3095] = "ProjStraightVertPoleLongGeoKey", e6[4096] = "VerticalCSTypeGeoKey", e6[4097] = "VerticalCitationGeoKey", e6[4098] = "VerticalDatumGeoKey", e6[4099] = "VerticalUnitsGeoKey", e6;
})();
var S = (i11, o11) => {
  let t8 = (o11 || e4)[i11];
  return void 0 === t8 && (t8 = "unknown" + String(i11)), t8;
};
var E = /* @__PURE__ */ new Map([["EXIFIFD", i7], ["GPSIFD", o6]]);

// node_modules/@arcgis/core/layers/support/rasterFormats/utils.js
var r11 = (() => {
  const r15 = new ArrayBuffer(4), n12 = new Uint8Array(r15);
  return new Uint32Array(r15)[0] = 1, 1 === n12[0];
})();

// node_modules/@arcgis/core/layers/support/rasterFormats/TiffDecoder.js
var h2 = [0, 1, 1, 2, 4, 8, 1, 1, 2, 4, 8, 4, 8, -1, -1, -1, 8, 8, 8];
var g2 = 4294967296;
var E2 = /* @__PURE__ */ new Set([1, 5, 6, 7, 8, 34712, 34887]);
function I(e6, t8) {
  let n12 = "unknown";
  return 3 === e6 ? n12 = 64 === t8 ? "f64" : "f32" : 1 === e6 ? 1 === t8 ? n12 = "u1" : 2 === t8 ? n12 = "u2" : 4 === t8 ? n12 = "u4" : t8 <= 8 ? n12 = "u8" : t8 <= 16 ? n12 = "u16" : t8 <= 32 && (n12 = "u32") : 2 === e6 && (t8 <= 8 ? n12 = "s8" : t8 <= 16 ? n12 = "s16" : t8 <= 32 && (n12 = "s32")), n12;
}
function T(e6) {
  let t8 = null;
  switch (e6 ? e6.toLowerCase() : "f32") {
    case "u1":
    case "u2":
    case "u4":
    case "u8":
      t8 = Uint8Array;
      break;
    case "u16":
      t8 = Uint16Array;
      break;
    case "u32":
      t8 = Uint32Array;
      break;
    case "s8":
      t8 = Int8Array;
      break;
    case "s16":
      t8 = Int16Array;
      break;
    case "s32":
      t8 = Int32Array;
      break;
    case "f64":
      t8 = Float64Array;
      break;
    default:
      t8 = Float32Array;
  }
  return t8;
}
function w(e6, t8) {
  return { x: t8[0] * e6.x + t8[1] * e6.y + t8[2], y: t8[3] * e6.x + t8[4] * e6.y + t8[5] };
}
function p2(e6, t8) {
  return e6.get(t8)?.values;
}
function d(e6, t8) {
  return e6.get(t8)?.values;
}
function m2(e6, t8) {
  return e6.get(t8)?.values?.[0];
}
function y(e6, t8) {
  return e6.get(t8)?.values?.[0];
}
function A(e6, t8, n12, a13 = 0, i11 = e4, r15 = 4) {
  const l8 = 8 === r15, f6 = l8 ? F(new DataView(e6, n12, 8), 0, t8) : new DataView(e6, n12, 2).getUint16(0, t8), u10 = 4 + 2 * r15, c7 = l8 ? 8 : 2, h6 = c7 + f6 * u10;
  if (n12 + h6 > e6.byteLength) return { success: false, ifd: null, nextIFD: null, requiredBufferSize: h6 };
  const g6 = 8 === r15 ? 8 : 4, E3 = n12 + h6 + g6 <= e6.byteLength ? V(new DataView(e6, n12 + h6, g6), 0, t8, 8 === r15) : null, I4 = n12 + c7, T4 = /* @__PURE__ */ new Map();
  let w4, p6, d5, m7, y5, A4 = 0, S4 = 0;
  for (let s6 = 0; s6 < f6; s6++) {
    p6 = new DataView(e6, I4 + u10 * s6, u10), d5 = p6.getUint16(0, t8), y5 = p6.getUint16(2, t8), m7 = S(d5, i11);
    const n13 = [];
    2 === r15 ? (A4 = p6.getUint16(4, t8), S4 = p6.getUint16(6, t8)) : 4 === r15 ? (A4 = p6.getUint32(4, t8), S4 = p6.getUint32(8, t8)) : 8 === r15 && (A4 = V(p6, 4, t8, true), S4 = V(p6, 12, t8, true), n13.push(p6.getUint32(12, t8)), n13.push(p6.getUint32(16, t8))), w4 = { id: d5, type: y5, valueCount: A4, valueOffset: S4, valueOffsets: n13, values: null }, N(e6, t8, w4, a13, false, r15), T4.set(m7, w4);
  }
  return { success: true, ifd: T4, nextIFD: E3, requiredBufferSize: h6 };
}
var S2 = (e6, t8) => u3(e6, { inputOffset: t8 }).pixels[0];
function M(e6, t8) {
  if (1 !== t8 && 2 !== t8 && 4 !== t8) return e6;
  const n12 = new Uint8Array(e6), a13 = 8 / t8, i11 = new Uint8Array(e6.byteLength * a13);
  let r15 = 0;
  const s6 = 2 ** t8 - 1;
  for (let l8 = 0; l8 < n12.length; l8++) {
    const e7 = n12[l8];
    for (let n13 = 0; n13 < a13; n13++) i11[r15++] = e7 << t8 * n13 >>> 8 - t8 & s6;
  }
  return i11.buffer;
}
function P(e6, n12, a13) {
  const i11 = new a3();
  i11.parse(e6), i11.colorTransform = 6 === a13 ? -1 : 0;
  const r15 = i11.getData(i11.width, i11.height, 1 !== n12 && 4 !== n12);
  return new Uint8Array(r15.buffer);
}
function O(e6) {
  const t8 = new s2(e6).getBytes(), n12 = new ArrayBuffer(t8.length), a13 = new Uint8Array(n12);
  return a13.set(t8), a13;
}
async function b(e6, t8, a13, r15, s6) {
  const l8 = r11 === t8, o11 = y(a13, "BITSPERSAMPLE"), f6 = y(a13, "SAMPLESPERPIXEL") ?? 1, c7 = y(a13, "PHOTOMETRICINTERPRETATION"), h6 = y(a13, "SAMPLEFORMAT") ?? 1, g6 = I(h6, o11), E3 = y(a13, "COMPRESSION") ?? 1, w4 = T(g6);
  let p6, d5, m7;
  if (34887 === E3) return await r7(), S2(e6, r15);
  if (1 === E3) p6 = e6.slice(r15, r15 + s6), d5 = new Uint8Array(p6);
  else if (8 === E3 || 32946 === E3) d5 = new Uint8Array(e6, r15, s6), d5 = O(d5), p6 = d5.buffer;
  else if (6 === E3) d5 = new Uint8Array(e6, r15, s6), d5 = P(d5, f6, c7), p6 = d5.buffer;
  else if (7 === E3) {
    const t9 = a13.get("JPEGTABLES").values, n12 = t9.length - 2;
    d5 = new Uint8Array(n12 + s6 - 2);
    for (let e7 = 0; e7 < n12; e7++) d5[e7] = t9[e7];
    const i11 = new Uint8Array(e6, r15 + 2, s6 - 2);
    for (let e7 = 0; e7 < i11.length; e7++) d5[n12 + e7] = i11[e7];
    d5 = P(d5, f6, c7), p6 = d5.buffer;
  } else {
    if (5 !== E3) throw new Error("tiff-decode: unsupport compression " + E3);
    d5 = i6(e6, r15, s6, t8), p6 = d5.buffer;
  }
  if (p6 = M(p6, o11), "u8" === g6 || "s8" === g6 || l8) m7 = new w4(p6);
  else {
    p6 = new ArrayBuffer(d5.length);
    const e7 = new Uint8Array(p6);
    switch (g6) {
      case "u16":
      case "s16":
        for (let t9 = 0; t9 < d5.length; t9 += 2) e7[t9] = d5[t9 + 1], e7[t9 + 1] = d5[t9];
        break;
      case "u32":
      case "s32":
      case "f32":
        for (let t9 = 0; t9 < d5.length; t9 += 4) e7[t9] = d5[t9 + 3], e7[t9 + 1] = d5[t9 + 2], e7[t9 + 2] = d5[t9 + 1], e7[t9 + 3] = d5[t9];
    }
    m7 = new w4(p6);
  }
  const A4 = y(a13, "PREDICTOR") ?? 1, b4 = y(a13, "TILEWIDTH"), x4 = y(a13, "TILELENGTH");
  if (A4 > 1 && (5 === E3 || 8 === E3 || 32946 === E3) && b4 && x4) {
    const e7 = k(a13), t9 = new w4(m7.length);
    t9.set(m7), m7 = _2(t9, x4, b4, 3 === h6 && 3 === A4, e7 ? 1 : f6);
  }
  return m7;
}
async function x(e6, t8, n12) {
  const a13 = d(n12, "TILEOFFSETS");
  if (void 0 === a13) return null;
  const i11 = d(n12, "TILEBYTECOUNTS"), { width: r15, height: s6, pixelType: l8, tileWidth: o11, tileHeight: f6 } = U2([n12]), u10 = k(n12, t8), c7 = y(n12, "SAMPLESPERPIXEL") || t8.planes, h6 = r15 * s6, g6 = y(n12, "BITSPERSAMPLE"), E3 = 34887 === (y(n12, "COMPRESSION") ?? 1), I4 = T(l8), w4 = [];
  for (let T4 = 0; T4 < c7; T4++) w4.push(new I4(h6));
  let p6, m7, A4, S4, M3, P4, O4, x4, L2, D4, R3, N2, C5;
  const G3 = Math.ceil(r15 / o11), v5 = new Uint8Array(h6).fill(255);
  let F2 = false;
  if (g6 % 8 == 0) if (E3 && u10 && c7 > 1) {
    const l9 = Math.round(a13.length / c7);
    for (p6 = 0; p6 < l9; p6++) {
      P4 = Math.floor(p6 / G3) * f6, O4 = p6 % G3 * o11, x4 = P4 * r15 + O4;
      for (let l10 = 0; l10 < c7; l10++) {
        const u11 = p6 * c7 + l10;
        for (0 === i11[u11] ? (A4 = null, F2 = true) : A4 = await b(e6, t8.littleEndian, n12, a13[u11], i11[u11]), D4 = 0, L2 = x4, N2 = Math.min(o11, r15 - O4), R3 = Math.min(f6, s6 - P4), C5 = w4[l10], S4 = 0; S4 < R3; S4++) for (L2 = x4 + S4 * r15, D4 = S4 * o11, M3 = 0; M3 < N2; M3++, L2++, D4++) A4 ? C5[L2] = A4[D4] : v5[L2] = 0;
      }
    }
  } else for (p6 = 0; p6 < a13.length; p6++) for (P4 = Math.floor(p6 / G3) * f6, O4 = p6 % G3 * o11, x4 = P4 * r15 + O4, 0 === i11[p6] ? (A4 = null, F2 = true) : A4 = await b(e6, t8.littleEndian, n12, a13[p6], i11[p6]), D4 = 0, L2 = x4, N2 = Math.min(o11, r15 - O4), R3 = Math.min(f6, s6 - P4), m7 = 0; m7 < c7; m7++) if (C5 = w4[m7], u10 || E3) for (S4 = 0; S4 < R3; S4++) for (L2 = x4 + S4 * r15, D4 = o11 * f6 * m7 + S4 * o11, M3 = 0; M3 < N2; M3++, L2++, D4++) A4 ? C5[L2] = A4[D4] : v5[L2] = 0;
  else for (S4 = 0; S4 < R3; S4++) for (L2 = x4 + S4 * r15, D4 = S4 * o11 * c7 + m7, M3 = 0; M3 < N2; M3++, L2++, D4 += c7) A4 ? C5[L2] = A4[D4] : v5[L2] = 0;
  return { width: r15, height: s6, pixelType: l8, pixels: w4, mask: F2 ? v5 : void 0 };
}
var L = (e6, t8, n12) => {
  const a13 = r11 === t8.littleEndian, r15 = d(n12, "STRIPOFFSETS");
  if (void 0 === r15) return null;
  const { width: s6, height: l8, pixelType: o11 } = U2([n12]), f6 = y(n12, "SAMPLESPERPIXEL") || t8.planes, c7 = y(n12, "PHOTOMETRICINTERPRETATION"), h6 = s6 * l8, g6 = y(n12, "BITSPERSAMPLE"), E3 = T(o11), I4 = new E3(h6 * f6), w4 = d(n12, "STRIPBYTECOUNTS"), p6 = y(n12, "ROWSPERSTRIP"), m7 = y(n12, "COMPRESSION") ?? 1;
  let A4, S4, b4, x4, L2, D4, R3, N2, k4;
  if (g6 % 8 == 0) for (A4 = 0; A4 < r15.length; A4++) {
    if (L2 = A4 * (p6 * s6) * f6, "u8" === o11 || "s8" === o11 || a13) 8 === m7 || 32946 === m7 ? (R3 = new Uint8Array(e6, r15[A4], w4[A4]), R3 = O(R3), D4 = R3.buffer) : 6 === m7 ? (R3 = new Uint8Array(e6, r15[A4], w4[A4]), R3 = P(R3, f6, c7), D4 = R3.buffer) : 5 === m7 ? (R3 = i6(e6, r15[A4], w4[A4], t8.littleEndian), D4 = R3.buffer) : D4 = e6.slice(r15[A4], r15[A4] + w4[A4]), D4 = M(D4, g6), x4 = new E3(D4);
    else {
      switch (6 === m7 || 8 === m7 || 32946 === m7 ? (R3 = new Uint8Array(e6, r15[A4], w4[A4]), N2 = O(R3), D4 = N2.buffer) : (D4 = new ArrayBuffer(w4[A4]), R3 = new Uint8Array(e6, r15[A4], w4[A4]), N2 = new Uint8Array(D4)), o11) {
        case "u16":
        case "s16":
          for (b4 = 0; b4 < R3.length; b4 += 2) N2[b4] = R3[b4 + 1], N2[b4 + 1] = R3[b4];
          break;
        case "u32":
        case "s32":
        case "f32":
          for (b4 = 0; b4 < R3.length; b4 += 4) N2[b4] = R3[b4 + 3], N2[b4 + 1] = R3[b4 + 2], N2[b4 + 2] = R3[b4 + 1], N2[b4 + 3] = R3[b4];
      }
      D4 = M(D4, g6), x4 = new E3(D4);
    }
    I4.set(x4, L2);
  }
  const C5 = [];
  if (1 === f6) C5.push(I4);
  else for (A4 = 0; A4 < f6; A4++) {
    for (k4 = new E3(h6), S4 = 0; S4 < h6; S4++) k4[S4] = I4[S4 * f6 + A4];
    C5.push(k4);
  }
  return { width: s6, height: l8, pixelType: o11, pixels: C5 };
};
var D = (e6, t8, n12) => {
  if (!(e6 && e6.length > 0 && t8 && n12)) return null;
  let a13, i11, r15;
  const s6 = e6[0].length, l8 = e6.length, o11 = new Uint8Array(s6);
  for (let f6 = 0; f6 < l8; f6++) if (a13 = e6[f6], i11 = t8[f6], r15 = n12[f6], 0 === f6) for (let e7 = 0; e7 < s6; e7++) o11[e7] = a13[e7] < i11 || a13[e7] > r15 ? 0 : 1;
  else for (let e7 = 0; e7 < s6; e7++) o11[e7] && (o11[e7] = a13[e7] < i11 || a13[e7] > r15 ? 0 : 1);
  return o11;
};
var R = (e6) => {
  if (!e6) return null;
  const t8 = e6.match(/<Item(.*?)Item>/gi);
  if (!t8 || 0 === t8.length) return null;
  const n12 = /* @__PURE__ */ new Map();
  let a13, i11, r15, s6, l8;
  for (let w4 = 0; w4 < t8.length; w4++) a13 = t8[w4], i11 = a13.slice(6, a13.indexOf(">")), s6 = a13.indexOf("sample="), s6 > -1 && (l8 = a13.slice(s6 + 8, a13.indexOf('"', s6 + 8))), s6 = a13.indexOf("name="), s6 > -1 && (i11 = a13.slice(s6 + 6, a13.indexOf('"', s6 + 6))), i11 && (r15 = a13.slice(a13.indexOf(">") + 1, a13.indexOf("</Item>")).trim(), null != l8 ? n12.has(i11) ? n12.get(i11)[l8] = r15 : n12.set(i11, [r15]) : n12.set(i11, r15)), l8 = null;
  const o11 = n12.get("STATISTICS_MINIMUM"), f6 = n12.get("STATISTICS_MAXIMUM"), u10 = n12.get("STATISTICS_MEAN"), c7 = n12.get("STATISTICS_STDDEV");
  let h6 = null;
  if (o11 && f6) {
    h6 = [];
    for (let e7 = 0; e7 < o11.length; e7++) h6.push({ min: parseFloat(o11[e7]), max: parseFloat(f6[e7]), avg: u10 && parseFloat(u10[e7]), stddev: c7 && parseFloat(c7[e7]) });
  }
  const g6 = n12.get("BandName"), E3 = n12.get("WavelengthMin"), I4 = n12.get("WavelengthMax");
  let T4 = null;
  if (g6) {
    T4 = [];
    for (let e7 = 0; e7 < g6.length; e7++) T4.push({ BandName: g6[e7], WavelengthMin: E3 && parseFloat(E3[e7]), WavelengthMax: I4 && parseFloat(I4[e7]) });
  }
  return { statistics: h6, bandProperties: T4, dataType: n12.get("DataType"), rawMetadata: n12 };
};
function N(e6, t8, n12, a13 = 0, i11 = false, r15 = 4) {
  if (n12.values) return true;
  const s6 = n12.type, l8 = n12.valueCount;
  let o11 = n12.valueOffset, f6 = [];
  const u10 = h2[s6], c7 = 8 * u10, E3 = l8 * u10, I4 = l8 * h2[s6] * 8;
  let T4, w4;
  const p6 = 8 === r15 ? 64 : 32, d5 = n12.valueOffsets;
  if (I4 > p6) {
    if (E3 > (i11 ? e6.byteLength : e6 ? e6.byteLength - o11 + a13 : 0)) return n12.offlineOffsetSize = [o11, E3], n12.values = null, false;
  }
  if (I4 <= p6) {
    if (!t8) if (p6 <= 32) o11 >>>= 32 - I4;
    else {
      const e7 = d5?.length ? d5[0] : o11 >>> 0, t9 = d5?.length ? d5[1] : Math.round((o11 - e7) / g2);
      I4 <= 32 ? (o11 = e7 >>> 32 - I4, d5[0] = o11) : (o11 = e7 * 2 ** (32 - I4) + (t9 >>> 32 - I4), d5[0] = e7, d5[1] = t9 >>> 32 - I4);
    }
    if (1 === l8 && c7 === p6) f6 = [o11];
    else if (64 === p6) {
      const e7 = d5?.length ? d5[0] : o11 >>> 0, t9 = d5?.length ? d5[1] : Math.round((o11 - e7) / g2);
      let n13 = e7, a14 = 32;
      for (w4 = 1; w4 <= l8; w4++) {
        const e8 = 32 - c7 * w4 % 32;
        if (a14 < c7) {
          const i12 = n13 << e8 >>> 32 - a14, r16 = t9 << 32 - a14 >>> 32 - a14;
          n13 = t9, f6.push(i12 + r16 * 2 ** (c7 - a14)), a14 -= 32 - (c7 - a14);
        } else f6.push(n13 << e8 >>> 32 - c7), a14 -= c7;
        0 === a14 && (a14 = 32, n13 = t9);
      }
    } else for (w4 = 1; w4 <= l8; w4++) {
      const e7 = 32 - c7 * w4;
      f6.push(o11 << e7 >>> 32 - c7);
    }
  } else {
    o11 -= a13, i11 && (o11 = 0);
    for (let n13 = o11; n13 < o11 + E3; n13 += u10) {
      switch (s6) {
        case 1:
        case 2:
        case 7:
          T4 = new DataView(e6, n13, 1).getUint8(0);
          break;
        case 3:
          T4 = new DataView(e6, n13, 2).getUint16(0, t8);
          break;
        case 4:
        case 13:
          T4 = new DataView(e6, n13, 4).getUint32(0, t8);
          break;
        case 5:
          T4 = new DataView(e6, n13, 4).getUint32(0, t8) / new DataView(e6, n13 + 4, 4).getUint32(0, t8);
          break;
        case 6:
          T4 = new DataView(e6, n13, 1).getInt8(0);
          break;
        case 8:
          T4 = new DataView(e6, n13, 2).getInt16(0, t8);
          break;
        case 9:
          T4 = new DataView(e6, n13, 4).getInt32(0, t8);
          break;
        case 10:
          T4 = new DataView(e6, n13, 4).getInt32(0, t8) / new DataView(e6, n13 + 4, 4).getInt32(0, t8);
          break;
        case 11:
          T4 = new DataView(e6, n13, 4).getFloat32(0, t8);
          break;
        case 12:
          T4 = new DataView(e6, n13, 8).getFloat64(0, t8);
          break;
        case 16:
        case 18:
          T4 = F(new DataView(e6, n13, 8), 0, t8);
          break;
        case 17:
          T4 = B2(new DataView(e6, n13, 8), 0, t8);
          break;
        default:
          T4 = null;
      }
      f6.push(T4);
    }
  }
  if (2 === s6) {
    let e7 = "";
    const t9 = f6;
    for (f6 = [], w4 = 0; w4 < t9.length; w4++) 0 === t9[w4] && "" !== e7 ? (f6.push(e7), e7 = "") : e7 += String.fromCharCode(t9[w4]);
    "" === e7 && 0 !== f6.length || f6.push(e7);
  }
  return n12.values = f6, true;
}
function U2(e6) {
  const t8 = e6[0], n12 = y(t8, "TILEWIDTH"), a13 = y(t8, "TILELENGTH"), i11 = y(t8, "IMAGEWIDTH"), r15 = y(t8, "IMAGELENGTH"), s6 = y(t8, "BITSPERSAMPLE"), l8 = y(t8, "SAMPLESPERPIXEL"), o11 = y(t8, "SAMPLEFORMAT") ?? 1, f6 = I(o11, s6), u10 = k(t8), c7 = p2(t8, "GDAL_NODATA");
  let h6 = null;
  c7?.length && (h6 = c7.map((e7) => parseFloat(e7)), h6.some((e7) => isNaN(e7)) && (h6 = null));
  const g6 = y(t8, "COMPRESSION") ?? 1;
  let T4;
  switch (g6) {
    case 1:
      T4 = "NONE";
      break;
    case 2:
    case 3:
    case 4:
    case 32771:
      T4 = "CCITT";
      break;
    case 5:
      T4 = "LZW";
      break;
    case 6:
    case 7:
      T4 = "JPEG";
      break;
    case 32773:
      T4 = "PACKBITS";
      break;
    case 8:
    case 32946:
      T4 = "DEFLATE";
      break;
    case 34712:
      T4 = "JPEG2000";
      break;
    case 34887:
      T4 = "LERC";
      break;
    default:
      T4 = String(g6);
  }
  let A4 = true, S4 = "";
  E2.has(g6) || (A4 = false, S4 += "unsupported tag compression " + g6), o11 > 3 && (A4 = false, S4 += "unsupported tag sampleFormat " + o11), 1 !== s6 && 2 !== s6 && 4 !== s6 && s6 % 8 != 0 && (A4 = false, S4 += "unsupported tag bitsPerSample " + s6);
  const M3 = m2(t8, "GEOASCIIPARAMS");
  let P4;
  if (M3) {
    const e7 = M3.split("|").find((e8) => e8.includes("ESRI PE String = ")), t9 = e7 ? e7.replace("ESRI PE String = ", "") : "";
    P4 = t9.startsWith("COMPD_CS") || t9.startsWith("PROJCS") || t9.startsWith("GEOGCS") ? { wkid: null, wkt: t9 } : null;
  }
  const O4 = d(t8, "GEOTIEPOINTS"), b4 = d(t8, "GEOPIXELSCALE"), x4 = d(t8, "GEOTRANSMATRIX"), L2 = t8.has("GEOKEYDIRECTORY") ? t8.get("GEOKEYDIRECTORY").data : null;
  let D4, N2, U4 = false, v5 = false;
  if (L2) {
    U4 = 2 === y(L2, "GTRasterTypeGeoKey");
    const e7 = y(L2, "GTModelTypeGeoKey");
    if (2 === e7) {
      const e8 = y(L2, "GeographicTypeGeoKey");
      e8 >= 1024 && e8 <= 32766 && (P4 = { wkid: e8 }), P4 || 32767 !== e8 || (v5 = true, P4 = { wkid: 4326 });
    } else if (1 === e7) {
      const e8 = y(L2, "ProjectedCSTypeGeoKey");
      e8 >= 1024 && e8 <= 32766 && (P4 = { wkid: e8 });
    }
  }
  if (b4 && O4 && O4.length >= 6 ? (D4 = [b4[0], 0, O4[3] - O4[0] * b4[0], 0, -Math.abs(b4[1]), O4[4] - O4[1] * b4[1]], U4 && (D4[2] -= 0.5 * D4[0] + 0.5 * D4[1], D4[5] -= 0.5 * D4[3] + 0.5 * D4[4])) : x4 && 16 === x4.length && (D4 = U4 ? [x4[0], x4[1], x4[3] - 0.5 * x4[0], x4[4], x4[5], x4[7] - 0.5 * x4[5]] : [x4[0], x4[1], x4[3], x4[4], x4[5], x4[7]]), D4) {
    const e7 = [{ x: 0, y: r15 }, { x: 0, y: 0 }, { x: i11, y: r15 }, { x: i11, y: 0 }];
    let t9, n13 = Number.POSITIVE_INFINITY, a14 = Number.POSITIVE_INFINITY, s7 = Number.NEGATIVE_INFINITY, l9 = Number.NEGATIVE_INFINITY;
    for (let i12 = 0; i12 < e7.length; i12++) t9 = w(e7[i12], D4), n13 = t9.x > n13 ? n13 : t9.x, s7 = t9.x < s7 ? s7 : t9.x, a14 = t9.y > a14 ? a14 : t9.y, l9 = t9.y < l9 ? l9 : t9.y;
    N2 = { xmin: n13, xmax: s7, ymin: a14, ymax: l9, spatialReference: P4 };
  } else N2 = { xmin: -0.5, ymin: 0.5 - r15, xmax: i11 - 0.5, ymax: 0.5, spatialReference: P4 };
  v5 && (N2.xmax - N2.xmin > 400 || Math.max(Math.abs(N2.xmin), Math.abs(N2.xmax)) > 361) && (P4 = null, N2.spatialReference = null);
  const F2 = C2(e6);
  let B4, V3, W2, H3, _4;
  if (F2.length > 0) {
    W2 = Math.round(Math.log(i11 / y(F2[0], "IMAGEWIDTH")) / Math.LN2);
    const e7 = F2[F2.length - 1];
    H3 = F2.length, B4 = y(e7, "TILEWIDTH"), V3 = y(e7, "TILELENGTH");
  }
  B4 = null != H3 && H3 > 0 ? B4 || n12 : null, V3 = null != H3 && H3 > 0 ? V3 || a13 : null, n12 && (_4 = [{ maxCol: Math.ceil(i11 / n12) - 1, maxRow: Math.ceil(r15 / a13) - 1, minRow: 0, minCol: 0 }], F2.forEach((e7) => {
    _4.push({ maxCol: Math.ceil(y(e7, "IMAGEWIDTH") / y(e7, "TILEWIDTH")) - 1, maxRow: Math.ceil(y(e7, "IMAGELENGTH") / y(e7, "TILELENGTH")) - 1, minRow: 0, minCol: 0 });
  }));
  const j3 = m2(e6[0], "GDAL_METADATA"), X2 = R(j3);
  S4 += " " + Y({ width: i11, height: r15, tileWidth: n12, tileHeight: a13, planes: l8, ifds: e6 });
  const K = G(e6).length === F2.length + 1, J = F2?.length ? F2.map((e7) => ({ x: i11 / y(e7, "IMAGEWIDTH"), y: r15 / y(e7, "IMAGELENGTH") })) : void 0;
  return { width: i11, height: r15, tileWidth: n12, tileHeight: a13, planes: l8, isBSQ: u10, pixelType: f6, compression: T4, noData: h6, hasMaskBand: K, isSupported: A4, pyramidResolutions: J, message: S4, extent: N2, isPseudoGeographic: v5, affine: b4 ? null : D4, firstPyramidLevel: W2, maximumPyramidLevel: H3, pyramidBlockWidth: B4, pyramidBlockHeight: V3, tileBoundary: _4, metadata: X2 };
}
function k(e6, t8) {
  const n12 = p2(e6, "PLANARCONFIGURATION");
  return n12 ? 2 === n12[0] : !!t8 && t8.isBSQ;
}
function C2(e6) {
  return e6.filter((e7) => 1 === y(e7, "NEWSUBFILETYPE"));
}
function G(e6) {
  return e6.filter((e7) => {
    const t8 = !(4 & ~(y(e7, "NEWSUBFILETYPE") ?? 0)), n12 = 4 === y(e7, "PHOTOMETRICINTERPRETATION");
    return t8 && n12;
  });
}
function v(e6) {
  const { littleEndian: t8, isBigTiff: n12, firstIFDPos: a13 } = W(e6);
  let i11 = a13;
  const r15 = [];
  do {
    const a14 = H2(e6, t8, i11, 0, e4, n12 ? 8 : 4);
    if (!a14.success) break;
    r15.push(a14.ifd), i11 = a14.nextIFD;
  } while (i11 > 0);
  return { ...U2(r15), littleEndian: t8, isBigTiff: n12, ifds: r15, pyramidIFDs: C2(r15), maskIFDs: G(r15) };
}
function F(e6, t8, n12) {
  const a13 = e6.getUint32(t8, n12), i11 = e6.getUint32(t8 + 4, n12);
  return n12 ? i11 * g2 + a13 : a13 * g2 + i11;
}
function B2(e6, t8, n12) {
  let a13 = n12 ? e6.getInt32(t8, n12) : e6.getUint32(t8, n12), i11 = n12 ? e6.getUint32(t8 + 4, n12) : e6.getInt32(t8 + 4, n12);
  const r15 = (n12 ? a13 : i11) >= 0 ? 1 : -1;
  n12 ? a13 *= r15 : i11 *= r15;
  return r15 * (n12 ? i11 * g2 + a13 : a13 * g2 + i11);
}
function V(e6, t8, n12, a13) {
  return a13 ? F(e6, t8, n12) : e6.getUint32(t8, n12);
}
function W(e6) {
  const t8 = new DataView(e6, 0, 16), n12 = t8.getUint16(0, false);
  let a13 = null;
  if (18761 === n12) a13 = true;
  else {
    if (19789 !== n12) throw new Error("unexpected endianess byte");
    a13 = false;
  }
  const i11 = t8.getUint16(2, a13);
  if (42 !== i11 && 43 !== i11) throw new Error("unexpected tiff identifier");
  let r15 = 4;
  const s6 = 43 === i11;
  if (s6) {
    const e7 = t8.getUint16(r15, a13);
    if (r15 += 2, 8 !== e7) throw new Error("unsupported bigtiff version");
    if (0 !== t8.getUint16(r15, a13)) throw new Error("unsupported bigtiff version");
    r15 += 2;
  }
  return { littleEndian: a13, isBigTiff: s6, firstIFDPos: V(t8, r15, a13, s6) };
}
function H2(t8, n12, a13, i11 = 0, r15 = e4, o11 = 4) {
  const u10 = A(t8, n12, a13, i11, r15, o11);
  let c7;
  const h6 = u10.ifd;
  if (h6) {
    if (E.forEach((e6, a14) => {
      h6.has(a14) && (c7 = h6.get(a14), c7.data = A(t8, n12, c7.valueOffset - i11, i11, e6).ifd);
    }), h6.has("GEOKEYDIRECTORY")) {
      c7 = h6.get("GEOKEYDIRECTORY");
      const e6 = c7.values;
      if (e6 && e6.length > 4) {
        const a14 = e6[0] + "." + e6[1] + "." + e6[2];
        c7.data = A(t8, n12, c7.valueOffset + 6 - i11, i11, t5, 2).ifd, c7.data && c7.data.set("GEOTIFFVersion", { id: 0, type: 2, valueCount: 1, valueOffset: null, values: [a14] });
      }
    }
    if (h6.has("XMP")) {
      c7 = h6.get("XMP");
      const t9 = c7.values;
      "number" == typeof t9[0] && 7 === c7.type && (c7.values = [r10(new Uint8Array(t9))]);
    }
  }
  return u10;
}
function Y(e6) {
  const { width: t8, height: n12, tileHeight: a13, tileWidth: i11 } = e6, r15 = e6.planes, s6 = i11 ? i11 * a13 : t8 * n12, l8 = y(e6.ifds[0], "BITSPERSAMPLE");
  let o11 = "";
  return s6 * r15 > 2 ** 30 / (l8 > 8 ? l8 / 8 : 1) && (o11 = i11 ? "tiled tiff exceeding 1 gigabits per tile is not supported" : "scanline tiff exceeding 1 gigabits is not supported"), o11;
}
function _2(e6, t8, n12, a13, i11) {
  const r15 = a13 ? 4 : 1, s6 = n12 * r15 * i11;
  a13 && (e6 = new Uint8Array(e6.buffer));
  for (let f6 = 0; f6 < t8; f6++) {
    const t9 = f6 * s6;
    for (let n13 = i11; n13 < s6; n13++) e6[t9 + n13] += e6[t9 + n13 - i11];
  }
  if (!a13) return e6;
  const l8 = new Uint8Array(e6.length), o11 = n12 * i11;
  for (let f6 = 0; f6 < t8; f6++) {
    const t9 = f6 * s6;
    for (let n13 = 0; n13 < o11; n13++) for (let a14 = 0; a14 < r15; a14++) l8[t9 + n13 * r15 + a14] = e6[t9 + n13 + (r15 - a14 - 1) * o11];
  }
  return new Float32Array(l8.buffer);
}
async function j(e6, t8) {
  const { headerInfo: n12, ifd: a13, offsets: i11, sizes: s6 } = t8, l8 = [];
  for (let r15 = 0; r15 < i11.length; r15++) {
    s6[r15];
    const t9 = await b(e6, n12.littleEndian, a13, i11[r15], s6[r15] || e6.byteLength);
    l8.push(t9);
  }
  const o11 = k(a13, n12), f6 = y(a13, "BITSPERSAMPLE"), u10 = I(y(a13, "SAMPLEFORMAT") ?? 1, f6), c7 = y(a13, "SAMPLESPERPIXEL") || n12.planes, h6 = T(u10), g6 = y(a13, "TILEWIDTH"), E3 = y(a13, "TILELENGTH"), w4 = y(a13, "COMPRESSION") ?? 1, p6 = g6 * E3;
  let d5;
  const m7 = [];
  let A4 = l8[0];
  const S4 = 34887 === w4;
  for (let r15 = 0; r15 < c7; r15++) {
    if (d5 = new h6(p6), l8.length === c7) A4 = l8[r15], A4.length === p6 && (d5 = A4);
    else if (A4.length) if (o11 || S4) d5 = A4.length === p6 ? A4 : A4.slice(p6 * r15, p6 * (r15 + 1));
    else for (let e7 = 0; e7 < p6; e7++) d5[e7] = A4[e7 * c7 + r15];
    m7.push(d5);
  }
  const M3 = n12.noData ? n12.noData[0] : t8.noDataValue, P4 = n12.metadata ? n12.metadata.statistics : null, O4 = P4 ? P4.map((e7) => e7.min) : null, x4 = P4 ? P4.map((e7) => e7.max) : null, L2 = { pixelType: u10, width: g6, height: E3, pixels: m7, noDataValue: M3 };
  return null != M3 ? g(L2, M3, { matchAllNoData: t8?.matchAllNoData }) : O4 && x4 && t8.applyMinMaxConstraint && (L2.mask = D(m7, O4, x4)), L2;
}
async function X(e6, t8 = {}) {
  const n12 = t8.pyramidLevel || 0, a13 = t8.headerInfo || v(e6), { ifds: i11, noData: s6 } = a13;
  if (0 === i11.length) throw new Error("no valid image file directory");
  const l8 = Y(a13);
  if (l8) throw l8;
  let o11 = null;
  const f6 = -1 === n12 ? i11[i11.length - 1] : i11[n12], u10 = s6 ?? t8.noDataValue;
  if (o11 = a13.tileWidth ? await x(e6, a13, f6) : L(e6, a13, f6), !o11) return o11;
  if (null != u10) {
    g(o11, u10, { matchAllNoData: null == s6 && t8?.matchAllNoData });
  }
  return o11;
}

// node_modules/@arcgis/core/layers/support/rasterFormats/RasterCodec.js
var m3 = function(t8) {
  var e6, a13, i11, s6, r15, n12;
  function o11(t9) {
    var e7, a14, i12, s7, r16, n13, o12, h6, c7, l8, p6, d5, u10;
    for (this.data = t9, this.pos = 8, this.palette = [], this.imgData = [], this.transparency = {}, this.animation = null, this.text = {}, r16 = null; ; ) {
      switch (e7 = this.readUInt32(), h6 = (function() {
        var t10, e8;
        for (e8 = [], t10 = 0; t10 < 4; ++t10) e8.push(String.fromCharCode(this.data[this.pos++]));
        return e8;
      }).call(this).join(""), h6) {
        case "IHDR":
          this.width = this.readUInt32(), this.height = this.readUInt32(), this.bits = this.data[this.pos++], this.colorType = this.data[this.pos++], this.compressionMethod = this.data[this.pos++], this.filterMethod = this.data[this.pos++], this.interlaceMethod = this.data[this.pos++];
          break;
        case "acTL":
          this.animation = { numFrames: this.readUInt32(), numPlays: this.readUInt32() || 1 / 0, frames: [] };
          break;
        case "PLTE":
          this.palette = this.read(e7);
          break;
        case "fcTL":
          r16 && this.animation.frames.push(r16), this.pos += 4, r16 = { width: this.readUInt32(), height: this.readUInt32(), xOffset: this.readUInt32(), yOffset: this.readUInt32() }, s7 = this.readUInt16(), i12 = this.readUInt16() || 100, r16.delay = 1e3 * s7 / i12, r16.disposeOp = this.data[this.pos++], r16.blendOp = this.data[this.pos++], r16.data = [];
          break;
        case "IDAT":
        case "fdAT":
          for ("fdAT" === h6 && (this.pos += 4, e7 -= 4), t9 = (null != r16 ? r16.data : void 0) || this.imgData, p6 = 0; 0 <= e7 ? p6 < e7 : p6 > e7; 0 <= e7 ? ++p6 : --p6) t9.push(this.data[this.pos++]);
          break;
        case "tRNS":
          switch (this.transparency = {}, this.colorType) {
            case 3:
              if (this.transparency.indexed = this.read(e7), (c7 = 255 - this.transparency.indexed.length) > 0) for (d5 = 0; 0 <= c7 ? d5 < c7 : d5 > c7; 0 <= c7 ? ++d5 : --d5) this.transparency.indexed.push(255);
              break;
            case 0:
              this.transparency.grayscale = this.read(e7)[0];
              break;
            case 2:
              this.transparency.rgb = this.read(e7);
          }
          break;
        case "tEXt":
          n13 = (l8 = this.read(e7)).indexOf(0), o12 = String.fromCharCode.apply(String, l8.slice(0, n13)), this.text[o12] = String.fromCharCode.apply(String, l8.slice(n13 + 1));
          break;
        case "IEND":
          return r16 && this.animation.frames.push(r16), this.colors = (function() {
            switch (this.colorType) {
              case 0:
              case 3:
              case 4:
                return 1;
              case 2:
              case 6:
                return 3;
            }
          }).call(this), this.hasAlphaChannel = 4 === (u10 = this.colorType) || 6 === u10, a14 = this.colors + (this.hasAlphaChannel ? 1 : 0), this.pixelBitlength = this.bits * a14, this.colorSpace = (function() {
            switch (this.colors) {
              case 1:
                return "DeviceGray";
              case 3:
                return "DeviceRGB";
            }
          }).call(this), void (this.imgData = new Uint8Array(this.imgData));
        default:
          this.pos += e7;
      }
      if (this.pos += 4, this.pos > this.data.length) throw new Error("Incomplete or corrupt PNG file");
    }
  }
  return o11.load = function(t9, e7, a14) {
    var i12;
    return "function" == typeof e7 && (a14 = e7), (i12 = new XMLHttpRequest()).open("GET", t9, true), i12.responseType = "arraybuffer", i12.onload = function() {
      var t10;
      return t10 = new o11(new Uint8Array(i12.response || i12.mozResponseArrayBuffer)), "function" == typeof (null != e7 ? e7.getContext : void 0) && t10.render(e7), "function" == typeof a14 ? a14(t10) : void 0;
    }, i12.send(null);
  }, a13 = 1, i11 = 2, e6 = 0, o11.prototype.read = function(t9) {
    var e7, a14;
    for (a14 = [], e7 = 0; 0 <= t9 ? e7 < t9 : e7 > t9; 0 <= t9 ? ++e7 : --e7) a14.push(this.data[this.pos++]);
    return a14;
  }, o11.prototype.readUInt32 = function() {
    return this.data[this.pos++] << 24 | this.data[this.pos++] << 16 | this.data[this.pos++] << 8 | this.data[this.pos++];
  }, o11.prototype.readUInt16 = function() {
    return this.data[this.pos++] << 8 | this.data[this.pos++];
  }, o11.prototype.decodePixels = function(t9) {
    var e7, a14, i12, s7, r16, n13, o12, h6, c7, p6, d5, u10, f6, m7, g6, w4, y5, x4, b4, k4, T4, I4, A4;
    if (null == t9 && (t9 = this.imgData), 0 === t9.length) return new Uint8Array(0);
    for (t9 = (t9 = new s2(t9)).getBytes(), w4 = (u10 = this.pixelBitlength / 8) * this.width, f6 = new Uint8Array(w4 * this.height), n13 = t9.length, g6 = 0, m7 = 0, a14 = 0; m7 < n13; ) {
      switch (t9[m7++]) {
        case 0:
          for (s7 = b4 = 0; b4 < w4; s7 = b4 += 1) f6[a14++] = t9[m7++];
          break;
        case 1:
          for (s7 = k4 = 0; k4 < w4; s7 = k4 += 1) e7 = t9[m7++], r16 = s7 < u10 ? 0 : f6[a14 - u10], f6[a14++] = (e7 + r16) % 256;
          break;
        case 2:
          for (s7 = T4 = 0; T4 < w4; s7 = T4 += 1) e7 = t9[m7++], i12 = (s7 - s7 % u10) / u10, y5 = g6 && f6[(g6 - 1) * w4 + i12 * u10 + s7 % u10], f6[a14++] = (y5 + e7) % 256;
          break;
        case 3:
          for (s7 = I4 = 0; I4 < w4; s7 = I4 += 1) e7 = t9[m7++], i12 = (s7 - s7 % u10) / u10, r16 = s7 < u10 ? 0 : f6[a14 - u10], y5 = g6 && f6[(g6 - 1) * w4 + i12 * u10 + s7 % u10], f6[a14++] = (e7 + Math.floor((r16 + y5) / 2)) % 256;
          break;
        case 4:
          for (s7 = A4 = 0; A4 < w4; s7 = A4 += 1) e7 = t9[m7++], i12 = (s7 - s7 % u10) / u10, r16 = s7 < u10 ? 0 : f6[a14 - u10], 0 === g6 ? y5 = x4 = 0 : (y5 = f6[(g6 - 1) * w4 + i12 * u10 + s7 % u10], x4 = i12 && f6[(g6 - 1) * w4 + (i12 - 1) * u10 + s7 % u10]), o12 = r16 + y5 - x4, h6 = Math.abs(o12 - r16), p6 = Math.abs(o12 - y5), d5 = Math.abs(o12 - x4), c7 = h6 <= p6 && h6 <= d5 ? r16 : p6 <= d5 ? y5 : x4, f6[a14++] = (e7 + c7) % 256;
          break;
        default:
          throw new Error("Invalid filter algorithm: " + t9[m7 - 1]);
      }
      g6++;
    }
    return f6;
  }, o11.prototype.decodePalette = function() {
    var t9, e7, a14, i12, s7, r16, n13, o12, h6;
    for (a14 = this.palette, r16 = this.transparency.indexed || [], s7 = new Uint8Array((r16.length || 0) + a14.length), i12 = 0, a14.length, t9 = 0, e7 = n13 = 0, o12 = a14.length; n13 < o12; e7 = n13 += 3) s7[i12++] = a14[e7], s7[i12++] = a14[e7 + 1], s7[i12++] = a14[e7 + 2], s7[i12++] = null != (h6 = r16[t9++]) ? h6 : 255;
    return s7;
  }, o11.prototype.copyToImageData = function(t9, e7) {
    var a14, i12, s7, r16, n13, o12, h6, c7, l8, p6, d5;
    if (i12 = this.colors, l8 = null, a14 = this.hasAlphaChannel, this.palette.length && (l8 = null != (d5 = this._decodedPalette) ? d5 : this._decodedPalette = this.decodePalette(), i12 = 4, a14 = true), c7 = (s7 = t9.data || t9).length, n13 = l8 || e7, r16 = o12 = 0, 1 === i12) for (; r16 < c7; ) h6 = l8 ? 4 * e7[r16 / 4] : o12, p6 = n13[h6++], s7[r16++] = p6, s7[r16++] = p6, s7[r16++] = p6, s7[r16++] = a14 ? n13[h6++] : this.transparency.grayscale && this.transparency.grayscale === p6 ? 0 : 255, o12 = h6;
    else for (; r16 < c7; ) h6 = l8 ? 4 * e7[r16 / 4] : o12, s7[r16++] = n13[h6++], s7[r16++] = n13[h6++], s7[r16++] = n13[h6++], s7[r16++] = a14 ? n13[h6++] : this.transparency.rgb && this.transparency.rgb[1] === n13[h6 - 3] && this.transparency.rgb[3] === n13[h6 - 2] && this.transparency.rgb[5] === n13[h6 - 1] ? 0 : 255, o12 = h6;
  }, o11.prototype.decode = function() {
    var t9;
    return t9 = new Uint8Array(this.width * this.height * 4), this.copyToImageData(t9, this.decodePixels()), t9;
  }, r15 = t8.document && t8.document.createElement("canvas"), n12 = r15 && r15.getContext("2d"), s6 = function(t9) {
    var e7;
    return n12.width = t9.width, n12.height = t9.height, n12.clearRect(0, 0, t9.width, t9.height), n12.putImageData(t9, 0, 0), (e7 = new Image()).src = r15.toDataURL(), e7;
  }, o11.prototype.decodeFrames = function(t9) {
    var e7, a14, i12, r16, n13, o12, h6, c7;
    if (this.animation) {
      for (c7 = [], a14 = n13 = 0, o12 = (h6 = this.animation.frames).length; n13 < o12; a14 = ++n13) e7 = h6[a14], i12 = t9.createImageData(e7.width, e7.height), r16 = this.decodePixels(new Uint8Array(e7.data)), this.copyToImageData(i12, r16), e7.imageData = i12, c7.push(e7.image = s6(i12));
      return c7;
    }
  }, o11.prototype.renderFrame = function(t9, s7) {
    var r16, n13, o12;
    return r16 = (n13 = this.animation.frames)[s7], o12 = n13[s7 - 1], 0 === s7 && t9.clearRect(0, 0, this.width, this.height), (null != o12 ? o12.disposeOp : void 0) === a13 ? t9.clearRect(o12.xOffset, o12.yOffset, o12.width, o12.height) : (null != o12 ? o12.disposeOp : void 0) === i11 && t9.putImageData(o12.imageData, o12.xOffset, o12.yOffset), r16.blendOp === e6 && t9.clearRect(r16.xOffset, r16.yOffset, r16.width, r16.height), t9.drawImage(r16.image, r16.xOffset, r16.yOffset);
  }, o11.prototype.animate = function(t9) {
    var e7, a14, i12, s7, r16, n13, o12 = this;
    return a14 = 0, n13 = this.animation, s7 = n13.numFrames, i12 = n13.frames, r16 = n13.numPlays, (e7 = function() {
      var n14, h6;
      if (n14 = a14++ % s7, h6 = i12[n14], o12.renderFrame(t9, n14), s7 > 1 && a14 / s7 < r16) return o12.animation._timeout = setTimeout(e7, h6.delay);
    })();
  }, o11.prototype.stopAnimation = function() {
    var t9;
    return clearTimeout(null != (t9 = this.animation) ? t9._timeout : void 0);
  }, o11.prototype.render = function(t9) {
    var e7, a14;
    return t9._png && t9._png.stopAnimation(), t9._png = this, t9.width = this.width, t9.height = this.height, e7 = t9.getContext("2d"), this.animation ? (this.decodeFrames(e7), this.animate(e7)) : (a14 = e7.createImageData(this.width, this.height), this.copyToImageData(a14, this.decodePixels()), e7.putImageData(a14, 0, 0));
  }, o11;
}(self);
var g3 = /* @__PURE__ */ new Set(["jpg", "png", "bmp", "gif"]);
async function w2(e6, s6) {
  if (!r11) throw new s("rasterCoded:decode", "lerc decoder is not supported on big endian platform");
  await r7();
  const { offset: r15 } = s6, { width: h6, height: c7, pixelType: l8, statistics: p6, depthCount: d5, noDataValues: u10, bandMasks: m7, pixels: g6, mask: w4 } = u3(e6, { inputOffset: r15, returnInterleaved: s6.returnInterleaved }), y5 = new c2({ width: h6, height: c7, pixelType: l8.toLowerCase(), pixels: g6, mask: w4, statistics: p6.map(({ minValue: t8, maxValue: e7 }) => new l3(t8, e7)), bandMasks: m7, depthCount: d5, noDataValues: u10 });
  return p6?.length || y5.updateStatistics(), y5;
}
async function y2(t8, i11) {
  const s6 = await X(t8, { ...i11, noDataValue: i11.tiffNoDataValue, matchAllNoData: i11.matchAllNoData });
  n(s6);
  const r15 = new c2({ width: s6.width, height: s6.height, pixels: s6.pixels, pixelType: s6.pixelType.toLowerCase(), mask: s6.mask, bandMasks: s6.bandMasks, statistics: null });
  return r15.updateStatistics(), r15;
}
async function x2(t8, e6) {
  const i11 = await j(t8, e6.customOptions), s6 = new c2({ width: i11.width, height: i11.height, pixels: i11.pixels, pixelType: i11.pixelType.toLowerCase(), mask: i11.mask, statistics: null });
  return s6.updateStatistics(), s6;
}
function b2(t8, e6) {
  const i11 = e6.pixelType || "u8", s6 = c2.getPixelArrayConstructor(i11), r15 = "u8" === i11 ? t8 : new s6(t8.buffer), n12 = [], o11 = e6.planes || 1;
  if (1 === o11) n12.push(r15);
  else for (let a13 = 0; a13 < o11; a13++) {
    const i12 = (e6.width || 1) * (e6.height || t8.length), h7 = new s6(i12);
    for (let t9 = 0; t9 < i12; t9++) h7[t9] = r15[t9 * o11 + a13];
    n12.push(h7);
  }
  const h6 = new c2({ width: e6.width || 1, height: e6.height || t8.length, pixels: n12, pixelType: i11, statistics: null });
  return h6.updateStatistics(), h6;
}
function k2(t8, e6) {
  return b2(new s2(new Uint8Array(t8)).getBytes(), e6);
}
function T2(t8, e6) {
  return b2(i6(t8, e6.offset, e6.eof, !e6.isInputBigEndian), e6);
}
function I2(t8, e6, i11) {
  const { pixelTypeCtor: s6 } = S3(e6.pixelType), r15 = (0, a5.decode)(t8, { width: e6.width, height: e6.height, pixelType: s6, format: i11 }), n12 = new c2({ width: e6.width, height: e6.height, pixels: r15.pixels, pixelType: e6.pixelType, mask: r15.mask, statistics: null });
  return n12.updateStatistics(), n12;
}
function A2(t8, e6) {
  const i11 = r6.decode(t8, e6.hasNoZlibMask ?? void 0), s6 = new c2({ width: i11.width, height: i11.height, pixels: i11.pixels, pixelType: "u8", mask: i11.mask, statistics: null });
  return s6.updateStatistics(), s6;
}
function C3(t8, e6) {
  const i11 = new Uint8Array(t8), s6 = new m3(i11), { width: r15, height: n12 } = e6, o11 = r15 * n12, h6 = s6.decode();
  let c7, l8 = 0, p6 = 0;
  const d5 = new Uint8Array(o11);
  for (l8 = 0; l8 < o11; l8++) d5[l8] = h6[4 * l8 + 3];
  const u10 = new c2({ width: r15, height: n12, pixels: [], pixelType: "u8", mask: d5, statistics: [] });
  for (l8 = 0; l8 < 3; l8++) {
    for (c7 = new Uint8Array(o11), p6 = 0; p6 < o11; p6++) c7[p6] = h6[4 * p6 + l8];
    u10.addData({ pixels: c7 });
  }
  return u10.updateStatistics(), u10;
}
async function v2(t8, e6, i11, r15) {
  const n12 = new i4(), o11 = { applyJpegMask: false, format: e6, ...i11 }, h6 = await n12.decode(t8, o11, r15), c7 = new c2(h6);
  return c7.updateStatistics(), c7;
}
function D2(e6) {
  if (null == e6) throw new s("rasterCodec:decode", "parameter encodeddata is required.");
  const a13 = new Uint8Array(e6, 0, 10);
  let i11 = "";
  return 255 === a13[0] && 216 === a13[1] ? i11 = "jpg" : 137 === a13[0] && 80 === a13[1] && 78 === a13[2] && 71 === a13[3] ? i11 = "png" : 67 === a13[0] && 110 === a13[1] && 116 === a13[2] && 90 === a13[3] && 73 === a13[4] && 109 === a13[5] && 97 === a13[6] && 103 === a13[7] && 101 === a13[8] && 32 === a13[9] ? i11 = "lerc" : 76 === a13[0] && 101 === a13[1] && 114 === a13[2] && 99 === a13[3] && 50 === a13[4] && 32 === a13[5] ? i11 = "lerc2" : 73 === a13[0] && 73 === a13[1] && 42 === a13[2] && 0 === a13[3] || 77 === a13[0] && 77 === a13[1] && 0 === a13[2] && 42 === a13[3] || 73 === a13[0] && 73 === a13[1] && 43 === a13[2] && 0 === a13[3] || 77 === a13[0] && 77 === a13[1] && 0 === a13[2] && 43 === a13[3] ? i11 = "tiff" : 71 === a13[0] && 73 === a13[1] && 70 === a13[2] ? i11 = "gif" : 66 === a13[0] && 77 === a13[1] ? i11 = "bmp" : String.fromCharCode.apply(null, a13).toLowerCase().includes("error") && (i11 = "error"), i11;
}
function U3(e6) {
  let a13 = null;
  switch (e6) {
    case "lerc":
    case "lerc2":
      a13 = w2;
      break;
    case "jpg":
      a13 = A2;
      break;
    case "png":
      a13 = C3;
      break;
    case "bsq":
    case "bip":
      a13 = (t8, a14) => I2(t8, a14, e6);
      break;
    case "tiff":
      a13 = y2;
      break;
    case "deflate":
      a13 = k2;
      break;
    case "lzw":
      a13 = T2;
      break;
    case "error":
      a13 = () => {
        throw new s("rasterCodec:decode", "input data contains error");
      };
      break;
    default:
      a13 = () => {
        throw new s("rasterCodec:decode", "unsupported raster format");
      };
  }
  return a13;
}
function S3(t8) {
  let e6 = null, a13 = null;
  switch (t8 ? t8.toLowerCase() : "f32") {
    case "u1":
    case "u2":
    case "u4":
    case "u8":
      a13 = 255, e6 = Uint8Array;
      break;
    case "u16":
      a13 = a13 || 65535, e6 = Uint16Array;
      break;
    case "u32":
      a13 = a13 || 2 ** 32 - 1, e6 = Uint32Array;
      break;
    case "s8":
      a13 = a13 || -128, e6 = Int8Array;
      break;
    case "s16":
      a13 = a13 || -32768, e6 = Int16Array;
      break;
    case "s32":
      a13 = a13 || 0 - 2 ** 31, e6 = Int32Array;
      break;
    default:
      e6 = Float32Array;
  }
  return { pixelTypeCtor: e6, noDataValue: a13 };
}
function O2(t8, e6 = 1) {
  if (!t8) return;
  const { pixels: i11, width: s6, height: r15, mask: n12 } = t8;
  if (!i11 || 0 === i11.length) return;
  const o11 = i11.length, h6 = s6 - 1, c7 = r15 - 1, l8 = [];
  let p6, d5, u10, f6, m7, g6, w4 = null;
  const y5 = c2.getPixelArrayConstructor(t8.pixelType);
  if (0 === e6) {
    for (p6 = 0; p6 < o11; p6++) {
      for (m7 = i11[p6], g6 = new y5(h6 * c7), d5 = 0; d5 < c7; d5++) for (f6 = d5 * s6, u10 = 0; u10 < h6; u10++) g6[d5 * h6 + u10] = m7[f6 + u10];
      l8.push(g6);
    }
    if (null != n12) for (w4 = new Uint8Array(h6 * c7), d5 = 0; d5 < c7; d5++) for (f6 = d5 * s6, u10 = 0; u10 < h6; u10++) w4[d5 * h6 + u10] = n12[f6 + u10];
  } else {
    for (p6 = 0; p6 < o11; p6++) {
      for (m7 = i11[p6], g6 = new y5(h6 * c7), d5 = 0; d5 < c7; d5++) for (f6 = d5 * s6, u10 = 0; u10 < h6; u10++) g6[d5 * h6 + u10] = (m7[f6 + u10] + m7[f6 + u10 + 1] + m7[f6 + s6 + u10] + m7[f6 + s6 + u10 + 1]) / 4;
      l8.push(g6);
    }
    if (n12) for (w4 = new Uint8Array(h6 * c7), d5 = 0; d5 < c7; d5++) for (f6 = d5 * s6, u10 = 0; u10 < h6; u10++) w4[d5 * h6 + u10] = Math.min.apply(null, [n12[f6 + u10], n12[f6 + u10 + 1], n12[f6 + s6 + u10], n12[f6 + s6 + u10 + 1]]);
  }
  t8.width = h6, t8.height = c7, t8.mask = w4, t8.pixels = l8;
}
function P2(t8) {
  let e6 = D2(t8);
  return "lerc2" === e6 ? e6 = "lerc" : "error" === e6 && (e6 = ""), e6;
}
async function j2(e6, i11 = {}, s6) {
  if (null == e6) throw new s("rasterCodec:decode", "missing encodeddata parameter.");
  let r15 = i11.format?.toLowerCase();
  if (!("bsq" !== r15 && "bip" !== r15 || null != i11.width && null != i11.height)) throw new s("rasterCodec:decode", "requires width and height in options parameter.");
  if ("tiff" === r15 && i11.customOptions) return x2(e6, i11);
  if ((!r15 || "bsq" !== r15 && "bip" !== r15 && "deflate" !== r15 && "lzw" !== r15) && (r15 = D2(e6)), i11.useCanvas && g3.has(r15)) return v2(e6, r15, i11, s6);
  const n12 = U3(r15);
  let o11;
  i11.isPoint && (null != (i11 = { ...i11 }).width && i11.width++, null != i11.height && i11.height++);
  const { offsets: h6 } = i11;
  if (h6 && h6.length > 1) {
    const t8 = h6.map((t9, a13) => n12(e6.slice(t9, h6[a13 + 1]), i11)), s7 = await Promise.all(t8);
    o11 = s7[0], o11.pixels = s7.map((t9) => t9.pixels[0]);
    const r16 = s7.map((t9) => t9.mask);
    s7.some((t9) => null != t9) && (r16.forEach((t9, e7) => {
      null == t9 && (r16[e7] = new Uint8Array(o11.width * o11.height).fill(255));
    }), o11.bandMasks = r16, o11.mask = c2.combineBandMasks(r16)), o11.updateStatistics();
  } else o11 = await n12(e6, { ...i11, offset: h6?.[0] ?? i11.offset });
  return "jpg" !== r15 && null != i11.noDataValue && 1 === o11.depthCount && g(o11, i11.noDataValue, { customFloatTolerance: i11.tolerance }), i11.isPoint && O2(o11), o11;
}

// node_modules/@arcgis/core/renderers/support/stretchRendererUtils.js
var n6 = new o2({ none: "none", standardDeviation: "standard-deviation", histogramEqualization: "histogram-equalization", minMax: "min-max", percentClip: "percent-clip", sigmoid: "sigmoid" });
var a6 = { 0: "none", 3: "standardDeviation", 4: "histogramEqualization", 5: "minMax", 6: "percentClip", 9: "sigmoid" };

// node_modules/@arcgis/core/layers/support/rasterFunctions/stretchUtils.js
var i8 = 1;
var o7 = [0.299, 0.587, 0.114];
function a7(t8) {
  if (null == t8) return false;
  const { max: n12, min: e6, size: s6 } = t8;
  return (n12 - e6) / s6 === 1 && e6 >= -0.5 && 0.5 === Math.abs(e6 % 1) && n12 <= 255.5;
}
function r12(t8, n12 = 256) {
  const e6 = 255;
  n12 = Math.min(n12, e6 + 1);
  const { size: s6, counts: i11 } = t8, o11 = new Float64Array(s6);
  o11[0] = i11[0] / n12;
  for (let a13 = 1; a13 < s6; a13++) o11[a13] = o11[a13 - 1] + i11[a13] / n12;
  const r15 = new Uint8Array(n12), l8 = n12 / o11[o11.length - 1];
  if (s6 <= n12) {
    const i12 = a7(t8) ? Math.max(0, Math.round(t8.min + 0.5)) : 0;
    for (let t9 = i12; t9 < n12; t9++) r15[t9] = t9 >= s6 + i12 ? e6 : Math.min(e6, Math.trunc(o11[t9 - i12] * l8));
  } else {
    const t9 = o11.map((t10) => Math.min(255, Math.trunc(t10 * l8)));
    for (let e7 = 0; e7 < n12; e7++) r15[e7] = t9[Math.round(s6 / n12)];
    r15[n12 - 1] = 255;
  }
  return r15;
}
function l5(t8) {
  const { minCutOff: n12, maxCutOff: e6, gamma: s6, pixelType: i11, rounding: o11 } = t8;
  if (!["u8", "u16", "s8", "s16"].includes(i11)) return null;
  const a13 = n12.length, r15 = "s8" === i11 ? -127 : "s16" === i11 ? -32767 : 0, l8 = ["u16", "s16"].includes(i11) ? 65536 : 256, f6 = [], c7 = [], { minOutput: m7 = 0, maxOutput: h6 = 255 } = t8, p6 = h6 - m7;
  for (let u10 = 0; u10 < a13; u10++) c7[u10] = e6[u10] - n12[u10], f6[u10] = 0 === c7[u10] ? 0 : p6 / c7[u10];
  const g6 = [];
  if (s6 && s6.length >= a13) {
    const t9 = M2(a13, s6);
    for (let i12 = 0; i12 < a13; i12++) {
      const a14 = [];
      for (let u10 = 0; u10 < l8; u10++) {
        if (0 === c7[i12]) {
          a14[u10] = m7;
          continue;
        }
        const l9 = u10 + r15, f7 = (l9 - n12[i12]) / c7[i12];
        let g7 = 1;
        if (s6[i12] > 1 && (g7 -= (1 / p6) ** (f7 * t9[i12])), l9 < e6[i12] && l9 > n12[i12]) {
          const t10 = g7 * p6 * f7 ** (1 / s6[i12]) + m7;
          a14[u10] = "floor" === o11 ? Math.floor(t10) : "round" === o11 ? Math.round(t10) : t10;
        } else l9 >= e6[i12] ? a14[u10] = h6 : a14[u10] = m7;
      }
      g6[i12] = a14;
    }
  } else for (let u10 = 0; u10 < a13; u10++) {
    const t9 = [];
    for (let s7 = 0; s7 < l8; s7++) {
      const i12 = s7 + r15;
      if (i12 <= n12[u10]) t9[s7] = m7;
      else if (i12 >= e6[u10]) t9[s7] = h6;
      else {
        const e7 = (i12 - n12[u10]) * f6[u10] + m7;
        t9[s7] = "floor" === o11 ? Math.floor(e7) : "round" === o11 ? Math.round(e7) : e7;
      }
    }
    g6[u10] = t9;
  }
  if (null != t8.contrastOffset) {
    const n13 = u4(t8.contrastOffset, t8.brightnessOffset);
    for (let t9 = 0; t9 < a13; t9++) {
      const e7 = g6[t9];
      for (let t10 = 0; t10 < l8; t10++) e7[t10] = n13[e7[t10]];
    }
  }
  return { lut: g6, offset: r15 };
}
function u4(t8, n12) {
  const e6 = Math.min(Math.max(t8, -100), 100), s6 = Math.min(Math.max(n12 ?? 0, -100), 100), i11 = 255, o11 = 128, a13 = new Uint8Array(256);
  for (let r15 = 0; r15 < 256; r15++) {
    let t9 = 0;
    e6 > 0 && e6 < 100 ? t9 = (200 * r15 - 100 * i11 + 2 * i11 * s6) / (2 * (100 - e6)) + o11 : e6 <= 0 && e6 > -100 ? t9 = (200 * r15 - 100 * i11 + 2 * i11 * s6) * (100 + e6) / 2e4 + o11 : 100 === e6 ? (t9 = 200 * r15 - 100 * i11 + (i11 + 1) * (100 - e6) + 2 * i11 * s6, t9 = t9 > 0 ? i11 : 0) : -100 === e6 && (t9 = o11), a13[r15] = t9 > i11 ? i11 : t9 < 0 ? 0 : t9;
  }
  return a13;
}
function f3(t8, n12, e6) {
  const s6 = [];
  for (let i11 = 0; i11 < n12.length; i11++) {
    let a13 = 0, r15 = 0, l8 = 0;
    "min" in n12[i11] ? { min: a13, max: r15, avg: l8 } = n12[i11] : [a13, r15, l8] = n12[i11];
    let u10 = l8 ?? 0;
    "u8" !== t8 && (u10 = 255 * (u10 - a13) / (r15 - a13)), e6 && (u10 *= o7[i11]), s6.push(c4(u10));
  }
  return s6;
}
function c4(t8) {
  if (t8 <= 0 || t8 >= 255) return i8;
  const n12 = 255, e6 = t8 + (150 === t8 ? 0 : t8 < 150 ? 45 * Math.cos(0.01047 * t8) : 17 * Math.sin(0.021 * t8)), s6 = Math.log(t8 / n12), o11 = Math.log(e6 / n12);
  if (0 === o11) return i8;
  const a13 = s6 / o11;
  return isNaN(a13) ? i8 : Math.min(9.9, Math.max(0.01, a13));
}
function m4(t8, n12, e6, s6) {
  let i11 = 1 / 0, o11 = -1 / 0, a13 = 0, r15 = 0, l8 = 0, u10 = 0;
  const f6 = t8.length, c7 = /* @__PURE__ */ new Map(), m7 = [];
  for (let k4 = 0; k4 < f6; k4++) {
    const e7 = t8[k4];
    if (!n12 || n12[k4]) {
      m7.push(e7);
      const t9 = (c7.get(e7) ?? 0) + 1;
      c7.set(e7, t9), t9 > u10 && (u10 = t9, l8 = e7), i11 = e7 < i11 ? e7 : i11, o11 = e7 > o11 ? e7 : o11, a13 += e7, r15++;
    }
  }
  if (0 === r15) return { statistics: { min: 0, max: 0, avg: 0, stddev: 0, mode: 0, median: 0 }, histogram: null };
  const h6 = a13 / r15;
  let p6 = 0;
  for (let k4 = 0; k4 < f6; k4++) n12 && !n12[k4] || (p6 += (t8[k4] - h6) ** 2);
  const g6 = n12 ? n12.filter((t9) => t9).length : f6, d5 = g6 <= 1 ? 0 : Math.sqrt(p6 / (g6 - 1));
  m7.sort((t9, n13) => t9 - n13);
  const x4 = r15 >>> 1, M3 = { min: i11, max: o11, avg: h6, stddev: d5, mode: l8, median: r15 % 2 ? m7[Math.floor(x4)] : (m7[x4 - 1] + m7[x4]) / 2 };
  if (["u8", "s8", "u4", "u2", "u1"].includes(e6)) {
    const e7 = o11 - i11 + 1, s7 = new Uint32Array(e7);
    for (let o12 = 0; o12 < f6; o12++) n12 && !n12[o12] || s7[t8[o12] - i11]++;
    return { statistics: M3, histogram: { min: i11 - 0.5, max: o11 + 0.5, size: e7, counts: s7 } };
  }
  const y5 = 256, O4 = new Uint32Array(y5), b4 = (o11 - i11) / y5;
  if (0 === b4) return { statistics: M3, histogram: { min: i11, max: o11, size: 1, counts: new Uint32Array(1).fill(r15) } };
  const w4 = new Uint32Array(y5 + 1);
  for (let k4 = 0; k4 < f6; k4++) n12 && !n12[k4] || w4[Math.floor((t8[k4] - i11) / b4)]++;
  for (let k4 = 0; k4 < y5 - 1; k4++) O4[k4] = w4[k4];
  return O4[y5 - 1] = w4[y5 - 1] + w4[y5], { statistics: M3, histogram: { min: i11, max: o11, size: y5, counts: O4 } };
}
function h3(t8) {
  const { pixels: n12, mask: e6, pixelType: s6, bandMasks: i11 } = t8, o11 = n12.map((t9, n13) => m4(t9, i11?.[n13] ?? e6, s6));
  return { statistics: o11.map(({ statistics: t9 }) => t9), histograms: o11.map(({ histogram: t9 }) => t9) };
}
function p3(t8) {
  if (!t8?.pixels?.length) return null;
  const { pixels: n12, mask: e6, bandMasks: s6, pixelType: i11 } = t8, o11 = t8.width * t8.height, a13 = n12.length, r15 = [], l8 = [], u10 = 256;
  let f6, c7;
  for (let m7 = 0; m7 < a13; m7++) {
    let a14 = new Uint32Array(u10);
    const h6 = n12[m7], p6 = s6?.[m7] ?? e6;
    if ("u8" === i11) {
      if (f6 = 255, c7 = 0, p6) {
        for (let t9 = 0; t9 < o11; t9++) if (p6[t9]) {
          const n13 = h6[t9];
          f6 = n13 < f6 ? n13 : f6, c7 = n13 > c7 ? n13 : c7, a14[n13]++;
        }
      } else for (let t9 = 0; t9 < o11; t9++) {
        const n13 = h6[t9];
        f6 = n13 < f6 ? n13 : f6, c7 = n13 > c7 ? n13 : c7, a14[n13]++;
      }
      a14 = a14.slice(f6, c7 + 1);
    } else {
      let n13 = false;
      t8.statistics || (t8.updateStatistics(), n13 = true);
      const e7 = t8.statistics;
      f6 = e7[m7].minValue, c7 = e7[m7].maxValue;
      const s7 = (c7 - f6) / u10;
      if (0 === s7) {
        !e7 || t8.validPixelCount || n13 || t8.updateStatistics();
        const s8 = (t8.validPixelCount || t8.width * t8.height) / u10;
        for (let t9 = 0; t9 < u10; t9++) a14[t9] = Math.round(s8 * (t9 + 1)) - Math.round(s8 * t9);
      } else {
        const t9 = new Uint32Array(u10 + 1);
        for (let n14 = 0; n14 < o11; n14++) p6 && !p6[n14] || t9[Math.floor((h6[n14] - f6) / s7)]++;
        for (let n14 = 0; n14 < u10 - 1; n14++) a14[n14] = t9[n14];
        a14[u10 - 1] = t9[u10 - 1] + t9[u10];
      }
    }
    const g6 = "u8" === i11 ? f6 - 0.5 : f6, d5 = "u8" === i11 ? c7 + 0.5 : c7;
    r15.push({ min: g6, max: d5, size: a14.length, counts: a14 });
    let x4 = 0, M3 = 0, y5 = 0;
    for (let t9 = 0; t9 < a14.length; t9++) x4 += a14[t9], M3 += t9 * a14[t9];
    const O4 = M3 / x4;
    for (let t9 = 0; t9 < a14.length; t9++) y5 += a14[t9] * (t9 - O4) ** 2;
    const b4 = Math.sqrt(y5 / (x4 - 1)), w4 = (d5 - g6) / a14.length, k4 = (O4 + ("u8" === i11 ? 0 : 0.5)) * w4 + f6, v5 = b4 * w4;
    l8.push({ min: f6, max: c7, avg: k4, stddev: v5 });
  }
  return { statistics: l8, histograms: r15 };
}
function g4(t8) {
  const n12 = [];
  for (let e6 = 0; e6 < t8.length; e6++) {
    const { min: s6, max: i11, size: o11, counts: a13 } = t8[e6];
    let r15 = 0, l8 = 0;
    for (let t9 = 0; t9 < o11; t9++) r15 += a13[t9], l8 += t9 * a13[t9];
    const u10 = l8 / r15;
    let f6 = 0;
    for (let t9 = 0; t9 < o11; t9++) f6 += a13[t9] * (t9 - u10) ** 2;
    const c7 = (i11 - s6) / o11, m7 = (u10 + 0.5) * c7 + s6, h6 = Math.sqrt(f6 / (r15 - 1)) * c7;
    n12.push({ min: s6, max: i11, avg: m7, stddev: h6 });
  }
  return n12;
}
function d2(n12, i11) {
  const { pixelBlock: o11, bandIds: a13, returnHistogramLut: l8, rasterInfo: u10 } = i11;
  let f6 = null, c7 = null, m7 = n12.stretchType;
  if ("number" == typeof m7 && (m7 = a6[m7]), n12.dra) if ("minMax" === m7 && o11?.statistics) f6 = o11.statistics.map((t8) => [t8.minValue, t8.maxValue, 0, 0]);
  else {
    const t8 = p3(o11);
    f6 = null != t8 ? t8.statistics : null, c7 = null != t8 ? t8.histograms : null;
  }
  else f6 = n12.statistics?.length ? n12.statistics : u10.statistics, c7 = "histograms" in n12 ? n12.histograms : void 0, c7 || (c7 = u10.histograms);
  "percentClip" !== m7 && "histogramEqualization" !== m7 || c7?.length || (m7 = "minMax");
  const h6 = f6?.length || c7?.length || u10.bandCount, g6 = [], d5 = [];
  f6 && !Array.isArray(f6[0]) && (f6 = f6.map((t8) => [t8.min, t8.max, t8.avg, t8.stddev]));
  const [M3, y5] = u2(u10.pixelType);
  if (!f6?.length) {
    f6 = [];
    for (let t8 = 0; t8 < h6; t8++) f6.push([M3, y5, 1, 1]);
    "standardDeviation" === m7 && (m7 = "minMax");
  }
  switch (m7) {
    case "none":
      for (let t8 = 0; t8 < h6; t8++) g6[t8] = M3, d5[t8] = y5;
      break;
    case "minMax":
      for (let t8 = 0; t8 < h6; t8++) {
        const n13 = f6[t8];
        g6[t8] = n13[0], d5[t8] = n13[1];
      }
      break;
    case "standardDeviation":
      {
        const { numberOfStandardDeviations: t8 = 2 } = n12;
        for (let n13 = 0; n13 < h6; n13++) {
          const e6 = f6[n13];
          g6[n13] = e6[2] - t8 * e6[3], d5[n13] = e6[2] + t8 * e6[3], g6[n13] < e6[0] && (g6[n13] = e6[0]), d5[n13] > e6[1] && (d5[n13] = e6[1]);
        }
      }
      break;
    case "histogramEqualization":
      n(c7);
      for (let t8 = 0; t8 < h6; t8++) g6[t8] = c7[t8].min, d5[t8] = c7[t8].max;
      break;
    case "percentClip":
      n(c7);
      for (let t8 = 0; t8 < c7.length; t8++) {
        const e6 = c7[t8], s6 = new Uint32Array(e6.size), i12 = [...e6.counts];
        i12.length >= 20 && (i12[0] = i12[1] = i12[2] = i12[i12.length - 1] = i12[i12.length - 2] = 0);
        let o12 = 0;
        const a14 = (e6.max - e6.min) / e6.size, r15 = -0.5 === e6.min && 1 === a14 ? 0.5 : 0;
        for (let t9 = 0; t9 < e6.size; t9++) o12 += i12[t9], s6[t9] = o12;
        let l9 = (n12.minPercent || 0) * o12 / 100;
        g6[t8] = e6.min + r15;
        for (let n13 = 0; n13 < e6.size; n13++) if (s6[n13] > l9) {
          g6[t8] = e6.min + a14 * (n13 + r15);
          break;
        }
        l9 = (1 - (n12.maxPercent || 0) / 100) * o12, d5[t8] = e6.max + r15;
        for (let n13 = e6.size - 2; n13 >= 0; n13--) if (s6[n13] < l9) {
          d5[t8] = e6.min + a14 * (n13 + 2 - r15);
          break;
        }
        if (d5[t8] < g6[t8]) {
          const n13 = g6[t8];
          g6[t8] = d5[t8], d5[t8] = n13;
        }
      }
      break;
    default:
      for (let t8 = 0; t8 < h6; t8++) {
        const n13 = f6[t8];
        g6[t8] = n13[0], d5[t8] = n13[1];
      }
  }
  let O4, b4, w4;
  "histogramEqualization" === m7 ? (n(c7), b4 = c7[0].size || 256, O4 = 0, l8 && (w4 = c7.map((t8) => r12(t8)))) : (b4 = n12.max || 255, O4 = n12.min || 0);
  return x3({ minCutOff: g6, maxCutOff: d5, maxOutput: b4, minOutput: O4, histogramLut: w4 }, a13);
}
function x3(t8, n12) {
  if (null == n12 || 0 === n12.length) return t8;
  const e6 = Math.max.apply(null, n12), { minCutOff: s6, maxCutOff: i11, minOutput: o11, maxOutput: a13, histogramLut: r15 } = t8;
  return s6.length === n12.length || s6.length <= e6 ? t8 : { minCutOff: n12.map((t9) => s6[t9]), maxCutOff: n12.map((t9) => i11[t9]), histogramLut: r15 ? n12.map((t9) => r15[t9]) : null, minOutput: o11, maxOutput: a13 };
}
function M2(t8, n12) {
  const e6 = new Float32Array(t8);
  for (let s6 = 0; s6 < t8; s6++) n12[s6] > 1 ? n12[s6] > 2 ? e6[s6] = 6.5 + (n12[s6] - 2) ** 2.5 : e6[s6] = 6.5 + 100 * (2 - n12[s6]) ** 4 : e6[s6] = 1;
  return e6;
}
function y3(t8, e6) {
  if (!t8?.pixels?.length) return t8;
  const { mask: s6, bandMasks: i11, width: o11, height: a13, pixels: r15 } = t8, { minCutOff: l8, maxCutOff: u10, minOutput: f6, maxOutput: c7, gamma: m7 } = e6, h6 = o11 * a13, p6 = e6.outputPixelType || "u8", g6 = t8.pixels.map(() => c2.createEmptyBand(p6, h6)), d5 = g6.length, x4 = c7 - f6, y5 = [], O4 = [];
  for (let n12 = 0; n12 < d5; n12++) O4[n12] = u10[n12] - l8[n12], y5[n12] = 0 === O4[n12] ? 0 : x4 / O4[n12];
  const b4 = p6.startsWith("u") || p6.startsWith("s"), w4 = m7 && m7.length >= d5, k4 = !!e6.isRenderer;
  if (w4) {
    const t9 = M2(d5, m7);
    for (let n12 = 0; n12 < d5; n12++) {
      const e7 = i11?.[n12] ?? s6;
      for (let s7 = 0; s7 < h6; s7++) if (null == e7 || e7[s7]) {
        if (0 === O4[n12]) {
          g6[n12][s7] = f6;
          continue;
        }
        const e8 = r15[n12][s7], i12 = (e8 - l8[n12]) / O4[n12];
        let o12 = 1;
        if (m7[n12] > 1 && (o12 -= (1 / x4) ** (i12 * t9[n12])), e8 < u10[n12] && e8 > l8[n12]) {
          const t10 = o12 * x4 * i12 ** (1 / m7[n12]) + f6;
          g6[n12][s7] = k4 ? Math.floor(t10) : b4 ? Math.round(t10) : t10;
        } else e8 >= u10[n12] ? g6[n12][s7] = c7 : g6[n12][s7] = f6;
      }
    }
  } else for (let n12 = 0; n12 < d5; n12++) {
    const t9 = i11?.[n12] ?? s6;
    for (let e7 = 0; e7 < h6; e7++) if (null == t9 || t9[e7]) {
      const t10 = r15[n12][e7];
      if (t10 < u10[n12] && t10 > l8[n12]) {
        const s7 = (t10 - l8[n12]) * y5[n12] + f6;
        g6[n12][e7] = k4 ? Math.floor(s7) : b4 ? Math.round(s7) : s7;
      } else t10 >= u10[n12] ? g6[n12][e7] = c7 : g6[n12][e7] = f6;
    }
  }
  const v5 = new c2({ width: o11, height: a13, mask: s6, bandMasks: i11, pixels: g6, pixelType: p6 });
  return v5.updateStatistics(), v5;
}

// node_modules/@arcgis/core/layers/support/RasterBandInfo.js
var t6;
function n7(e6) {
  return e6 = Number(e6), isNaN(e6) ? void 0 : e6;
}
var o8 = t6 = class extends l {
  constructor() {
    super(...arguments), this.name = null, this.minWavelength = void 0, this.maxWavelength = void 0, this.radianceBias = void 0, this.radianceGain = void 0, this.reflectanceBias = void 0, this.reflectanceGain = void 0, this.solarIrradiance = void 0;
  }
  clone() {
    return new t6({ name: this.name, minWavelength: this.minWavelength, maxWavelength: this.maxWavelength, radianceBias: this.radianceBias, radianceGain: this.radianceGain, reflectanceBias: this.reflectanceBias, reflectanceGain: this.reflectanceGain, solarIrradiance: this.solarIrradiance });
  }
};
r([m({ json: { name: "BandName", write: true } })], o8.prototype, "name", void 0), r([m({ json: { name: "WavelengthMin", read: { reader: n7 }, write: true } })], o8.prototype, "minWavelength", void 0), r([m({ json: { name: "WavelengthMax", read: { reader: n7 }, write: true } })], o8.prototype, "maxWavelength", void 0), r([m({ json: { name: "RadianceBias", read: { reader: n7 }, write: true } })], o8.prototype, "radianceBias", void 0), r([m({ json: { name: "RadianceGain", read: { reader: n7 }, write: true } })], o8.prototype, "radianceGain", void 0), r([m({ json: { name: "ReflectanceBias", read: { reader: n7 }, write: true } })], o8.prototype, "reflectanceBias", void 0), r([m({ json: { name: "ReflectanceGain", read: { reader: n7 }, write: true } })], o8.prototype, "reflectanceGain", void 0), r([m({ json: { name: "SolarIrradiance", read: { reader: n7 }, write: true } })], o8.prototype, "solarIrradiance", void 0), o8 = t6 = r([a2("esri.layers.support.RasterBandInfo")], o8);

// node_modules/@arcgis/core/layers/support/rasterEnums.js
var a8 = i2()({ RSP_NearestNeighbor: "nearest", RSP_BilinearInterpolation: "bilinear", RSP_CubicConvolution: "cubic", RSP_Majority: "majority" });
var i9 = i2()({ esriNoDataMatchAny: "any", esriNoDataMatchAll: "all" });
var n8 = i2()({ U1: "u1", U2: "u2", U4: "u4", U8: "u8", S8: "s8", U16: "u16", S16: "s16", U32: "u32", S32: "s32", F32: "f32", F64: "f64", C64: "c64", C128: "c128", UNKNOWN: "unknown" });

// node_modules/@arcgis/core/layers/support/RasterSensorInfo.js
var a9;
function n9(o11) {
  return o11 = Number(o11), isNaN(o11) ? void 0 : o11;
}
var u5 = a9 = class extends l {
  constructor() {
    super(...arguments), this.acquisitionDate = void 0, this.cloudCover = void 0, this.productName = void 0, this.sensorName = null, this.sensorAzimuth = void 0, this.sensorElevation = void 0, this.sunAzimuth = void 0, this.sunElevation = void 0;
  }
  readAcquisitionDate(o11) {
    return new Date(o11);
  }
  writeAcquisitionDate(o11, e6) {
    e6.AcquisitionDate = o11.getTime();
  }
  clone() {
    return new a9({ acquisitionDate: this.acquisitionDate, cloudCover: this.cloudCover, productName: this.productName, sensorName: this.sensorName, sensorAzimuth: this.sensorAzimuth, sensorElevation: this.sensorElevation, sunAzimuth: this.sunAzimuth, sunElevation: this.sunElevation });
  }
};
r([m({ type: Date, json: { name: "AcquisitionDate", write: true } })], u5.prototype, "acquisitionDate", void 0), r([o("acquisitionDate")], u5.prototype, "readAcquisitionDate", null), r([r2("acquisitionDate")], u5.prototype, "writeAcquisitionDate", null), r([m({ json: { name: "CloudCover", read: { reader: n9 }, write: true } })], u5.prototype, "cloudCover", void 0), r([m({ json: { name: "ProductName", write: true } })], u5.prototype, "productName", void 0), r([m({ json: { name: "SensorName", write: true } })], u5.prototype, "sensorName", void 0), r([m({ json: { name: "SensorAzimuth", read: { reader: n9 }, write: true } })], u5.prototype, "sensorAzimuth", void 0), r([m({ json: { name: "SensorElevation", read: { reader: n9 }, write: true } })], u5.prototype, "sensorElevation", void 0), r([m({ json: { name: "SunAzimuth", read: { reader: n9 }, write: true } })], u5.prototype, "sunAzimuth", void 0), r([m({ json: { name: "SunElevation", read: { reader: n9 }, write: true } })], u5.prototype, "sunElevation", void 0), u5 = a9 = r([a2("esri.layers.support.RasterSensorInfo")], u5);

// node_modules/@arcgis/core/layers/support/RasterStorageInfo.js
var p4;
var l6 = p4 = class extends l {
  constructor() {
    super(...arguments), this.blockWidth = void 0, this.blockHeight = void 0, this.compression = null, this.origin = null, this.firstPyramidLevel = null, this.maximumPyramidLevel = null, this.pyramidScalingFactor = 2, this.pyramidBlockWidth = null, this.pyramidBlockHeight = null, this.isBsqTile = false, this.isVirtualTileInfo = false, this.tileInfo = null, this.transposeInfo = null, this.blockBoundary = null;
  }
  clone() {
    return new p4({ blockWidth: this.blockWidth, blockHeight: this.blockHeight, compression: this.compression, origin: a(this.origin), firstPyramidLevel: this.firstPyramidLevel, maximumPyramidLevel: this.maximumPyramidLevel, pyramidResolutions: a(this.pyramidResolutions), pyramidScalingFactor: this.pyramidScalingFactor, pyramidBlockWidth: this.pyramidBlockWidth, pyramidBlockHeight: this.pyramidBlockHeight, isVirtualTileInfo: this.isVirtualTileInfo, tileInfo: a(this.tileInfo), transposeInfo: a(this.transposeInfo), blockBoundary: a(this.blockBoundary) });
  }
};
r([m({ type: Number, json: { write: true } })], l6.prototype, "blockWidth", void 0), r([m({ type: Number, json: { write: true } })], l6.prototype, "blockHeight", void 0), r([m({ type: String, json: { write: true } })], l6.prototype, "compression", void 0), r([m({ type: _, json: { write: true } })], l6.prototype, "origin", void 0), r([m({ type: Number, json: { write: true } })], l6.prototype, "firstPyramidLevel", void 0), r([m({ type: Number, json: { write: true } })], l6.prototype, "maximumPyramidLevel", void 0), r([m({ json: { write: true } })], l6.prototype, "pyramidResolutions", void 0), r([m({ type: Number, json: { write: true } })], l6.prototype, "pyramidScalingFactor", void 0), r([m({ type: Number, json: { write: true } })], l6.prototype, "pyramidBlockWidth", void 0), r([m({ type: Number, json: { write: true } })], l6.prototype, "pyramidBlockHeight", void 0), r([m({ json: { write: true } })], l6.prototype, "isBsqTile", void 0), r([m({ type: Boolean, json: { write: true } })], l6.prototype, "isVirtualTileInfo", void 0), r([m({ json: { write: true } })], l6.prototype, "tileInfo", void 0), r([m()], l6.prototype, "transposeInfo", void 0), r([m({ json: { write: true } })], l6.prototype, "blockBoundary", void 0), l6 = p4 = r([a2("esri.layers.support.RasterStorageInfo")], l6);

// node_modules/@arcgis/core/layers/support/RasterInfo.js
var u6;
var m5 = u6 = class extends l {
  constructor(t8) {
    super(t8), this.attributeTable = null, this.bandCount = null, this.colormap = null, this.extent = null, this.format = void 0, this.height = null, this.width = null, this.histograms = null, this.keyProperties = {}, this.multidimensionalInfo = null, this.noDataValue = null, this.pixelSize = null, this.pixelType = null, this.isPseudoSpatialReference = false, this.spatialReference = null, this.statistics = null, this.storageInfo = null, this.transform = null;
  }
  get bandInfos() {
    const t8 = this.keyProperties.BandProperties, { bandCount: e6 } = this;
    if (!t8?.length || t8.length < e6) {
      const t9 = [];
      for (let o12 = 1; o12 <= e6; o12++) t9.push(new o8({ name: "band_" + o12 }));
      return t9;
    }
    const o11 = t8.map((t9) => o8.fromJSON(t9));
    for (let i11 = 0; i11 < o11.length; i11++) o11[i11].name = o11[i11].name || "band_" + (i11 + 1);
    return o11;
  }
  get dataType() {
    const t8 = this.keyProperties?.DataType?.toLowerCase() ?? "generic";
    return "stdtime" === t8 ? "standard-time" : t8;
  }
  get nativeExtent() {
    return this._get("nativeExtent") || this.extent;
  }
  set nativeExtent(t8) {
    t8 && this._set("nativeExtent", t8);
  }
  get nativePixelSize() {
    if (null == this.transform || !this.transform.affectsPixelSize) return this.pixelSize;
    const t8 = this.nativeExtent;
    return { x: t8.width / this.width, y: t8.height / this.height };
  }
  get hasMultidimensionalTranspose() {
    return !!this.storageInfo?.transposeInfo;
  }
  get sensorInfo() {
    if (this.keyProperties?.SensorName) return u5.fromJSON(this.keyProperties);
  }
  clone() {
    return new u6({ attributeTable: a(this.attributeTable), bandCount: this.bandCount, colormap: a(this.colormap), extent: a(this.extent), format: this.format, height: this.height, width: this.width, histograms: a(this.histograms), keyProperties: a(this.keyProperties), multidimensionalInfo: a(this.multidimensionalInfo), noDataValue: this.noDataValue, pixelSize: a(this.pixelSize), pixelType: this.pixelType, isPseudoSpatialReference: this.isPseudoSpatialReference, spatialReference: a(this.spatialReference), statistics: a(this.statistics), storageInfo: a(this.storageInfo), transform: a(this.transform) });
  }
};
r([m({ json: { write: true } })], m5.prototype, "attributeTable", void 0), r([m({ json: { write: true } })], m5.prototype, "bandCount", void 0), r([m({ readOnly: true })], m5.prototype, "bandInfos", null), r([m({ json: { write: true } })], m5.prototype, "colormap", void 0), r([m({ type: String, readOnly: true })], m5.prototype, "dataType", null), r([m({ type: z, json: { write: true } })], m5.prototype, "extent", void 0), r([m({ type: z, json: { write: true } })], m5.prototype, "nativeExtent", null), r([m({ json: { write: true } })], m5.prototype, "nativePixelSize", null), r([m({ json: { write: true } })], m5.prototype, "format", void 0), r([m({ json: { write: true } })], m5.prototype, "height", void 0), r([m({ json: { write: true } })], m5.prototype, "width", void 0), r([m({ json: { write: true } })], m5.prototype, "hasMultidimensionalTranspose", null), r([m({ json: { write: true } })], m5.prototype, "histograms", void 0), r([m({ json: { write: true } })], m5.prototype, "keyProperties", void 0), r([m({ json: { write: true } })], m5.prototype, "multidimensionalInfo", void 0), r([m({ json: { write: true } })], m5.prototype, "noDataValue", void 0), r([m({ json: { write: true } })], m5.prototype, "pixelSize", void 0), r([m({ type: n8.apiValues, json: { write: true } })], m5.prototype, "pixelType", void 0), r([m()], m5.prototype, "isPseudoSpatialReference", void 0), r([m({ readOnly: true })], m5.prototype, "sensorInfo", null), r([m({ type: f, json: { write: true } })], m5.prototype, "spatialReference", void 0), r([m({ json: { write: true } })], m5.prototype, "statistics", void 0), r([m({ type: l6, json: { write: true } })], m5.prototype, "storageInfo", void 0), r([m({ json: { write: true } })], m5.prototype, "transform", void 0), m5 = u6 = r([a2("esri.layers.support.RasterInfo")], m5);

// node_modules/@arcgis/core/layers/support/rasterFunctions/surfaceUtils.js
var s4 = 1;
var n10 = 1 / 111e3;
function a10(t8) {
  let { altitude: e6, azimuth: i11 } = t8;
  const { hillshadeType: s6, pixelSizePower: a13 = 1, pixelSizeFactor: o11 = 1, scalingType: l8, isGCS: r15, resolution: c7 } = t8, h6 = "multi-directional" === s6 ? 2 * t8.zFactor : t8.zFactor, { x: u10, y: f6 } = c7;
  let d5 = h6 / (8 * u10), p6 = h6 / (8 * f6);
  if (r15 && h6 > 1e-3 && (d5 /= n10, p6 /= n10), "adjusted" === l8) if (r15) {
    const t9 = u10 * n10, e7 = f6 * n10;
    d5 = (h6 + t9 ** a13 * o11) / (8 * t9), p6 = (h6 + e7 ** a13 * o11) / (8 * e7);
  } else d5 = (h6 + u10 ** a13 * o11) / (8 * u10), p6 = (h6 + f6 ** a13 * o11) / (8 * f6);
  let x4 = (90 - e6) * Math.PI / 180, w4 = Math.cos(x4), y5 = (360 - i11 + 90) * Math.PI / 180, m7 = Math.sin(x4) * Math.cos(y5), M3 = Math.sin(x4) * Math.sin(y5);
  const z2 = [315, 270, 225, 360, 180, 0], A4 = [60, 60, 60, 60, 60, 90], g6 = new Float32Array([3, 5, 3, 2, 1, 4]), F2 = g6.reduce((t9, e7) => t9 + e7), k4 = g6.map((t9) => t9 / F2), P4 = "multi-directional" === s6 ? z2.length : 1, S4 = new Float32Array(6), C5 = new Float32Array(6), T4 = new Float32Array(6);
  if ("multi-directional" === s6) for (let n12 = 0; n12 < P4; n12++) e6 = A4[n12], i11 = z2[n12], x4 = (90 - e6) * Math.PI / 180, w4 = Math.cos(x4), y5 = (360 - i11 + 90) * Math.PI / 180, m7 = Math.sin(x4) * Math.cos(y5), M3 = Math.sin(x4) * Math.sin(y5), S4[n12] = w4, C5[n12] = m7, T4[n12] = M3;
  else S4.fill(w4), C5.fill(m7), T4.fill(M3);
  return { resolution: c7, factor: [d5, p6], sinZcosA: m7, sinZsinA: M3, cosZ: w4, sinZcosAs: [...C5], sinZsinAs: [...T4], cosZs: [...S4], weights: [...k4], hillshadeType: ["traditional", "multi-directional"].indexOf(s6) };
}
function o9(t8, e6) {
  const { width: i11, height: n12 } = t8, a13 = i11 * n12, o11 = new Uint8Array(a13), l8 = null != t8.mask;
  let r15;
  if (l8) {
    r15 = new Uint8Array(t8.mask);
    for (let t9 = 0; t9 < r15.length; t9++) r15[t9] && (o11[t9] = 1, r15[t9] = 1);
  }
  const c7 = t8.pixels[0], h6 = new Float32Array(a13), u10 = new Float32Array(a13);
  let f6, d5 = 0;
  if (e6) {
    const { resolution: t9 } = e6, i12 = t9 ? (t9.x + t9.y) / 2 : 1;
    d5 = 200 * e6.zFactor / (i12 * i12), f6 = new Float32Array(a13);
  }
  const p6 = e6?.curvatureType;
  let x4, w4, y5, m7, M3, z2, A4, g6;
  for (let F2 = s4; F2 < n12 - s4; F2++) {
    const t9 = F2 * i11;
    for (let e7 = s4; e7 < i11 - s4; e7++) {
      const s6 = t9 + e7;
      if (!r15 || 0 !== r15[s6]) {
        if (r15) {
          if (r15[s6 - i11 - 1] + r15[s6 - i11] + r15[s6 - i11 + 1] + r15[s6 - 1] + r15[s6 + 1] + r15[s6 + i11 - 1] + r15[s6 + i11] + r15[s6 + i11 + 1] < 7) {
            o11[s6] = 0;
            continue;
          }
          x4 = r15[s6 - i11 - 1] ? c7[s6 - i11 - 1] : c7[s6], w4 = r15[s6 - i11] ? c7[s6 - i11] : c7[s6], y5 = r15[s6 - i11 + 1] ? c7[s6 - i11 + 1] : c7[s6], m7 = r15[s6 - 1] ? c7[s6 - 1] : c7[s6], M3 = r15[s6 + 1] ? c7[s6 + 1] : c7[s6], z2 = r15[s6 + i11 - 1] ? c7[s6 + i11 - 1] : c7[s6], A4 = r15[s6 + i11] ? c7[s6 + i11] : c7[s6], g6 = r15[s6 + i11 + 1] ? c7[s6 + i11 + 1] : c7[s6];
        } else x4 = c7[s6 - i11 - 1], w4 = c7[s6 - i11], y5 = c7[s6 - i11 + 1], m7 = c7[s6 - 1], M3 = c7[s6 + 1], z2 = c7[s6 + i11 - 1], A4 = c7[s6 + i11], g6 = c7[s6 + i11 + 1];
        if (h6[s6] = y5 + M3 + M3 + g6 - (x4 + m7 + m7 + z2), u10[s6] = z2 + A4 + A4 + g6 - (x4 + w4 + w4 + y5), null != f6) {
          const t10 = c7[s6], e8 = 0.5 * (m7 + M3) - t10, i12 = 0.5 * (w4 + A4) - t10;
          if ("standard" === p6) f6[s6] = -d5 * (e8 + i12);
          else {
            const t11 = (-x4 + y5 + z2 - g6) / 4, n13 = (-m7 + M3) / 2, a14 = (w4 - A4) / 2, o12 = n13 * n13, l9 = a14 * a14, r16 = o12 + l9;
            r16 && (f6[s6] = "profile" === p6 ? d5 * (e8 * o12 + i12 * l9 + t11 * n13 * a14) / r16 : -d5 * (e8 * l9 + i12 * o12 - t11 * n13 * a14) / r16);
          }
        }
      }
    }
  }
  return { outMask: l8 ? o11 : null, dzxs: h6, dzys: u10, curvatures: f6 };
}
function l7(t8, e6, i11) {
  for (let s6 = 0; s6 < i11; s6++) t8[s6 * e6] = t8[s6 * e6 + 1], t8[(s6 + 1) * e6 - 1] = t8[(s6 + 1) * e6 - 2];
  for (let s6 = 1; s6 < e6 - 1; s6++) t8[s6] = t8[s6 + e6], t8[s6 + (i11 - 1) * e6] = t8[s6 + (i11 - 2) * e6];
}
function r13(n12, r15) {
  if (!r3(n12)) return n12;
  const { factor: c7, sinZcosA: h6, sinZsinA: u10, cosZ: f6, sinZcosAs: d5, sinZsinAs: p6, cosZs: x4, weights: w4 } = a10(r15), [y5, m7] = c7, M3 = "traditional" === r15.hillshadeType, { width: z2, height: A4 } = n12, g6 = new Uint8Array(z2 * A4), { dzxs: F2, dzys: k4, outMask: P4 } = o9(n12);
  for (let t8 = s4; t8 < A4 - s4; t8++) {
    const e6 = t8 * z2;
    for (let t9 = s4; t9 < z2 - s4; t9++) {
      const i11 = e6 + t9;
      if (!P4 || P4[i11]) {
        const t10 = F2[i11] * y5, e7 = k4[i11] * m7, s6 = Math.sqrt(1 + t10 * t10 + e7 * e7);
        let n13 = 0;
        if (M3) {
          let i12 = 255 * (f6 + u10 * e7 - h6 * t10) / s6;
          i12 < 0 && (i12 = 0), n13 = i12;
        } else {
          const i12 = p6.length;
          for (let a13 = 0; a13 < i12; a13++) {
            let i13 = 255 * (x4[a13] + p6[a13] * e7 - d5[a13] * t10) / s6;
            i13 < 0 && (i13 = 0), n13 += i13 * w4[a13];
          }
        }
        g6[i11] = 255 & n13;
      }
    }
  }
  l7(g6, z2, A4);
  return new c2({ width: z2, height: A4, pixels: [g6], mask: P4, pixelType: "u8", validPixelCount: n12.validPixelCount, statistics: [new l3(0, 255)] });
}
function c5(t8, e6, s6, n12) {
  if (!r3(t8) || !r3(e6)) return;
  const { min: a13, max: o11 } = n12, l8 = t8.pixels[0], { pixels: r15, mask: c7 } = e6, h6 = r15[0], u10 = 255.00001 / (o11 - a13), f6 = new Uint8ClampedArray(h6.length), d5 = new Uint8ClampedArray(h6.length), p6 = new Uint8ClampedArray(h6.length), x4 = s6.length - 1;
  for (let i11 = 0; i11 < h6.length; i11++) {
    if (c7 && 0 === c7[i11]) continue;
    const t9 = Math.floor((h6[i11] - a13) * u10), [e7, n13] = s6[t9 < 0 ? 0 : t9 > x4 ? x4 : t9], o12 = l8[i11], r16 = o12 * n13, w4 = r16 * (1 - Math.abs(e7 % 2 - 1)), y5 = o12 - r16;
    switch (Math.floor(e7)) {
      case 0:
        f6[i11] = r16 + y5, d5[i11] = w4 + y5, p6[i11] = y5;
        break;
      case 1:
        f6[i11] = w4 + y5, d5[i11] = r16 + y5, p6[i11] = y5;
        break;
      case 2:
        f6[i11] = y5, d5[i11] = r16 + y5, p6[i11] = w4 + y5;
        break;
      case 3:
        f6[i11] = y5, d5[i11] = w4 + y5, p6[i11] = r16 + y5;
        break;
      case 4:
        f6[i11] = w4 + y5, d5[i11] = y5, p6[i11] = r16 + y5;
        break;
      case 5:
      case 6:
        f6[i11] = r16 + y5, d5[i11] = y5, p6[i11] = w4 + y5;
    }
  }
  t8.pixels = [f6, d5, p6], t8.updateStatistics();
}
function h4(e6, a13) {
  if (!r3(e6)) return e6;
  const r15 = a13.zFactor, c7 = a13.pixelSizePower ?? 1, h6 = a13.pixelSizeFactor ?? 1, u10 = a13.slopeType, f6 = a13.isGCS, { x: d5, y: p6 } = a13.resolution;
  let x4 = r15 / (8 * d5), w4 = r15 / (8 * p6);
  f6 && Math.abs(r15 - 1) < 1e-4 && (x4 /= n10, w4 /= n10), "adjusted" === u10 && (x4 = (r15 + d5 ** c7 * h6) / (8 * d5), w4 = (r15 + p6 ** c7 * h6) / (8 * p6));
  const { dzxs: y5, dzys: m7, outMask: M3 } = o9(e6), { width: z2, height: A4 } = e6, g6 = new Float32Array(z2 * A4);
  for (let t8 = s4; t8 < A4 - s4; t8++) {
    const e7 = t8 * z2;
    for (let t9 = s4; t9 < z2 - s4; t9++) {
      const i11 = e7 + t9;
      if (!M3 || M3[i11]) {
        const s6 = y5[i11] * x4, n12 = m7[i11] * w4, a14 = Math.sqrt(s6 * s6 + n12 * n12);
        g6[e7 + t9] = "percent-rise" === u10 ? 100 * a14 : 57.2957795 * Math.atan(a14);
      }
    }
  }
  l7(g6, z2, A4);
  const F2 = new c2({ width: z2, height: A4, pixels: [g6], mask: M3, pixelType: "f32", validPixelCount: e6.validPixelCount });
  return F2.updateStatistics(), F2;
}
function u7(n12, a13 = {}) {
  if (!r3(n12)) return n12;
  const { resolution: r15 } = a13, c7 = r15 ? 1 / r15.x : 1, h6 = r15 ? 1 / r15.y : 1, { dzxs: u10, dzys: f6, outMask: d5 } = o9(n12), { width: p6, height: x4 } = n12, w4 = new Float32Array(p6 * x4);
  for (let t8 = s4; t8 < x4 - s4; t8++) {
    const e6 = t8 * p6;
    for (let t9 = s4; t9 < p6 - s4; t9++) {
      const i11 = e6 + t9;
      if (!d5 || d5[i11]) {
        const s6 = u10[i11] * c7, n13 = f6[i11] * h6;
        let a14 = -1;
        0 === s6 && 0 === n13 || (a14 = 90 - 57.29578 * Math.atan2(n13, -s6), a14 < 0 && (a14 += 360), 360 === a14 ? a14 = 0 : a14 > 360 && (a14 %= 360)), w4[e6 + t9] = a14;
      }
    }
  }
  l7(w4, p6, x4);
  return new c2({ width: p6, height: x4, pixels: [w4], mask: d5, pixelType: "f32", validPixelCount: n12.validPixelCount, statistics: [new l3(-1, 360)] });
}
function f4(e6, s6) {
  if (!r3(e6)) return e6;
  const { curvatures: n12, outMask: a13 } = o9(e6, s6), { width: r15, height: c7 } = e6;
  l7(n12, r15, c7);
  const h6 = new c2({ width: r15, height: c7, pixels: [n12], mask: a13, pixelType: "f32", validPixelCount: e6.validPixelCount });
  return h6.updateStatistics(), h6;
}
function d3(t8, e6, i11) {
  const { hillshadeType: s6, altitude: n12, azimuth: a13, zFactor: o11, pixelSizeFactor: l8, pixelSizePower: r15, slopeType: c7 } = t8;
  return { hillshadeType: s6, altitude: n12, azimuth: a13, zFactor: o11, pixelSizePower: r15, pixelSizeFactor: l8, scalingType: "scaled" === c7 ? "adjusted" : "none", resolution: e6, isGCS: i11 };
}

// node_modules/@arcgis/core/renderers/support/colorRampUtils.js
var C4 = ["random", "ndvi", "ndvi2", "ndvi3", "elevation", "gray", "hillshade"];
var m6 = [{ id: "aspect", type: "multipart", colorRamps: [{ fromColor: [190, 190, 190], toColor: [255, 45, 8] }, { fromColor: [255, 45, 8], toColor: [255, 181, 61] }, { fromColor: [255, 181, 61], toColor: [255, 254, 52] }, { fromColor: [255, 254, 52], toColor: [0, 251, 50] }, { fromColor: [0, 251, 50], toColor: [255, 254, 52] }, { fromColor: [0, 253, 255], toColor: [0, 181, 255] }, { fromColor: [0, 181, 255], toColor: [26, 35, 253] }, { fromColor: [26, 35, 253], toColor: [255, 57, 251] }, { fromColor: [255, 57, 251], toColor: [255, 45, 8] }] }, { id: "black-to-white", fromColor: [0, 0, 0], toColor: [255, 255, 255] }, { id: "blue-bright", fromColor: [204, 204, 255], toColor: [0, 0, 224] }, { id: "blue-light-to-dark", fromColor: [211, 229, 232], toColor: [46, 100, 140] }, { id: "blue-green-bright", fromColor: [203, 245, 234], toColor: [48, 207, 146] }, { id: "blue-green-light-to-dark", fromColor: [216, 242, 237], toColor: [21, 79, 74] }, { id: "brown-light-to-dark", fromColor: [240, 236, 170], toColor: [102, 72, 48] }, { id: "brown-to-blue-green-diverging-right", type: "multipart", colorRamps: [{ fromColor: [156, 85, 31], toColor: [255, 255, 191] }, { fromColor: [255, 255, 191], toColor: [33, 130, 145] }] }, { id: "brown-to-blue-green-diverging-dark", type: "multipart", colorRamps: [{ fromColor: [110, 70, 45], toColor: [204, 204, 102] }, { fromColor: [204, 204, 102], toColor: [48, 100, 102] }] }, { id: "coefficient-bias", fromColor: [214, 214, 255], toColor: [0, 57, 148] }, { id: "cold-to-hot-diverging", type: "multipart", colorRamps: [{ fromColor: [69, 117, 181], toColor: [255, 255, 191] }, { fromColor: [255, 255, 191], toColor: [214, 47, 39] }] }, { id: "condition-number", type: "multipart", colorRamps: [{ fromColor: [0, 97, 0], toColor: [255, 255, 0] }, { fromColor: [255, 255, 0], toColor: [255, 34, 0] }] }, { id: "cyan-to-purple", type: "multipart", colorRamps: [{ fromColor: [0, 245, 245], toColor: [0, 0, 245] }, { fromColor: [0, 0, 245], toColor: [245, 0, 245] }] }, { id: "cyan-light-to-blue-dark", type: "multipart", colorRamps: [{ fromColor: [182, 237, 240], toColor: [31, 131, 224] }, { fromColor: [31, 131, 224], toColor: [9, 9, 145] }] }, { id: "distance", fromColor: [255, 200, 0], toColor: [0, 0, 255] }, { id: "elevation1", type: "multipart", colorRamps: [{ fromColor: [175, 240, 233], toColor: [255, 255, 179] }, { fromColor: [255, 255, 179], toColor: [0, 128, 64] }, { fromColor: [0, 128, 64], toColor: [252, 186, 3] }, { fromColor: [252, 186, 3], toColor: [128, 0, 0] }, { fromColor: [120, 0, 0], toColor: [105, 48, 13] }, { fromColor: [105, 48, 13], toColor: [171, 171, 171] }, { fromColor: [171, 171, 171], toColor: [255, 252, 255] }] }, { id: "elevation2", type: "multipart", colorRamps: [{ fromColor: [118, 219, 211], toColor: [255, 255, 199] }, { fromColor: [255, 255, 199], toColor: [255, 255, 128] }, { fromColor: [255, 255, 128], toColor: [217, 194, 121] }, { fromColor: [217, 194, 121], toColor: [135, 96, 38] }, { fromColor: [135, 96, 38], toColor: [150, 150, 181] }, { fromColor: [150, 150, 181], toColor: [181, 150, 181] }, { fromColor: [181, 150, 181], toColor: [255, 252, 255] }] }, { id: "errors", fromColor: [255, 235, 214], toColor: [196, 10, 10] }, { id: "gray-light-to-dark", fromColor: [219, 219, 219], toColor: [69, 69, 69] }, { id: "green-bright", fromColor: [204, 255, 204], toColor: [14, 204, 14] }, { id: "green-light-to-dark", fromColor: [220, 245, 233], toColor: [34, 102, 51] }, { id: "green-to-blue", type: "multipart", colorRamps: [{ fromColor: [32, 204, 16], toColor: [0, 242, 242] }, { fromColor: [0, 242, 242], toColor: [2, 33, 227] }] }, { id: "orange-bright", fromColor: [255, 235, 204], toColor: [240, 118, 5] }, { id: "orange-light-to-dark", fromColor: [250, 233, 212], toColor: [171, 65, 36] }, { id: "partial-spectrum", type: "multipart", colorRamps: [{ fromColor: [242, 241, 162], toColor: [255, 255, 0] }, { fromColor: [255, 255, 0], toColor: [255, 0, 0] }, { fromColor: [252, 3, 69], toColor: [176, 7, 237] }, { fromColor: [176, 7, 237], toColor: [2, 29, 173] }] }, { id: "partial-spectrum-1-diverging", type: "multipart", colorRamps: [{ fromColor: [135, 38, 38], toColor: [240, 149, 12] }, { fromColor: [240, 149, 12], toColor: [255, 255, 191] }, { fromColor: [255, 255, 191], toColor: [74, 80, 181] }, { fromColor: [74, 80, 181], toColor: [39, 32, 122] }] }, { id: "partial-spectrum-2-diverging", type: "multipart", colorRamps: [{ fromColor: [115, 77, 42], toColor: [201, 137, 52] }, { fromColor: [201, 137, 52], toColor: [255, 255, 191] }, { fromColor: [255, 255, 191], toColor: [91, 63, 176] }, { fromColor: [91, 63, 176], toColor: [81, 13, 97] }] }, { id: "pink-to-yellow-green-diverging-bright", type: "multipart", colorRamps: [{ fromColor: [158, 30, 113], toColor: [255, 255, 191] }, { fromColor: [255, 255, 191], toColor: [99, 110, 45] }] }, { id: "pink-to-yellow-green-diverging-dark", type: "multipart", colorRamps: [{ fromColor: [97, 47, 73], toColor: [204, 204, 102] }, { fromColor: [204, 204, 102], toColor: [22, 59, 15] }] }, { id: "precipitation", type: "multipart", colorRamps: [{ fromColor: [194, 82, 60], toColor: [237, 161, 19] }, { fromColor: [237, 161, 19], toColor: [255, 255, 0] }, { fromColor: [255, 255, 0], toColor: [0, 219, 0] }, { fromColor: [0, 219, 0], toColor: [32, 153, 143] }, { fromColor: [32, 153, 143], toColor: [11, 44, 122] }] }, { id: "prediction", type: "multipart", colorRamps: [{ fromColor: [40, 146, 199], toColor: [250, 250, 100] }, { fromColor: [250, 250, 100], toColor: [232, 16, 20] }] }, { id: "purple-bright", fromColor: [255, 204, 255], toColor: [199, 0, 199] }, { id: "purple-to-green-diverging-bright", type: "multipart", colorRamps: [{ fromColor: [77, 32, 150], toColor: [255, 255, 191] }, { fromColor: [255, 255, 191], toColor: [20, 122, 11] }] }, { id: "purple-to-green-diverging-dark", type: "multipart", colorRamps: [{ fromColor: [67, 14, 89], toColor: [204, 204, 102] }, { fromColor: [204, 204, 102], toColor: [24, 79, 15] }] }, { id: "purple-blue-bright", fromColor: [223, 184, 230], toColor: [112, 12, 242] }, { id: "purple-blue-light-to-dark", fromColor: [229, 213, 242], toColor: [93, 44, 112] }, { id: "purple-red-bright", fromColor: [255, 204, 225], toColor: [199, 0, 99] }, { id: "purple-red-light-to-dark", fromColor: [250, 215, 246], toColor: [143, 17, 57] }, { id: "red-bright", fromColor: [255, 204, 204], toColor: [219, 0, 0] }, { id: "red-light-to-dark", fromColor: [255, 224, 224], toColor: [143, 10, 10] }, { id: "red-to-blue-diverging-bright", type: "multipart", colorRamps: [{ fromColor: [196, 69, 57], toColor: [255, 255, 191] }, { fromColor: [255, 255, 191], toColor: [48, 95, 207] }] }, { id: "red-to-blue-diverging-dark", type: "multipart", colorRamps: [{ fromColor: [107, 13, 13], toColor: [204, 204, 102] }, { fromColor: [204, 204, 102], toColor: [13, 53, 97] }] }, { id: "red-to-green", type: "multipart", colorRamps: [{ fromColor: [245, 0, 0], toColor: [245, 245, 0] }, { fromColor: [245, 245, 0], toColor: [0, 245, 0] }] }, { id: "red-to-green-diverging-bright", type: "multipart", colorRamps: [{ fromColor: [186, 20, 20], toColor: [255, 255, 191] }, { fromColor: [255, 255, 191], toColor: [54, 145, 33] }] }, { id: "red-to-green-diverging-dark", type: "multipart", colorRamps: [{ fromColor: [97, 21, 13], toColor: [204, 204, 102] }, { fromColor: [204, 204, 102], toColor: [16, 69, 16] }] }, { id: "slope", type: "multipart", colorRamps: [{ fromColor: [56, 168, 0], toColor: [255, 255, 0] }, { fromColor: [255, 255, 0], toColor: [255, 0, 0] }] }, { id: "spectrum-full-bright", type: "multipart", colorRamps: [{ fromColor: [255, 0, 0], toColor: [255, 255, 0] }, { fromColor: [255, 255, 0], toColor: [0, 255, 255] }, { fromColor: [0, 255, 255], toColor: [0, 0, 255] }] }, { id: "spectrum-full-dark", type: "multipart", colorRamps: [{ fromColor: [153, 0, 0], toColor: [153, 153, 0] }, { fromColor: [153, 153, 0], toColor: [0, 153, 153] }, { fromColor: [0, 153, 153], toColor: [0, 0, 153] }] }, { id: "spectrum-full-light", type: "multipart", colorRamps: [{ fromColor: [255, 153, 153], toColor: [255, 255, 153] }, { fromColor: [255, 255, 153], toColor: [153, 255, 255] }, { fromColor: [153, 255, 255], toColor: [153, 153, 255] }] }, { id: "surface", type: "multipart", colorRamps: [{ fromColor: [112, 153, 89], toColor: [242, 238, 162] }, { fromColor: [242, 238, 162], toColor: [242, 206, 133] }, { fromColor: [242, 206, 133], toColor: [194, 140, 124] }, { fromColor: [194, 140, 124], toColor: [255, 242, 255] }] }, { id: "temperature", type: "multipart", colorRamps: [{ fromColor: [255, 252, 255], toColor: [255, 0, 255] }, { fromColor: [255, 0, 255], toColor: [0, 0, 255] }, { fromColor: [0, 0, 255], toColor: [0, 255, 255] }, { fromColor: [0, 255, 255], toColor: [0, 255, 0] }, { fromColor: [0, 255, 0], toColor: [255, 255, 0] }, { fromColor: [255, 255, 0], toColor: [255, 128, 0] }, { fromColor: [255, 128, 0], toColor: [128, 0, 0] }] }, { id: "white-to-black", fromColor: [255, 255, 255], toColor: [0, 0, 0] }, { id: "yellow-to-dark-red", type: "multipart", colorRamps: [{ fromColor: [255, 255, 128], toColor: [242, 167, 46] }, { fromColor: [242, 167, 46], toColor: [107, 0, 0] }] }, { id: "yellow-to-green-to-dark-blue", type: "multipart", colorRamps: [{ fromColor: [255, 255, 128], toColor: [56, 224, 9] }, { fromColor: [56, 224, 9], toColor: [26, 147, 171] }, { fromColor: [26, 147, 171], toColor: [12, 16, 120] }] }, { id: "yellow-to-red", fromColor: [245, 245, 0], toColor: [255, 0, 0] }, { id: "yellow-green-bright", fromColor: [236, 252, 204], toColor: [157, 204, 16] }, { id: "yellow-green-light-to-dark", fromColor: [215, 240, 175], toColor: [96, 107, 45] }];
var a11 = new o2({ Aspect: "aspect", "Black to White": "black-to-white", "Blue Bright": "blue-bright", "Blue Light to Dark": "blue-light-to-dark", "Blue-Green Bright": "blue-green-bright", "Blue-Green Light to Dark": "blue-green-light-to-dark", "Brown Light to Dark": "brown-light-to-dark", "Brown to Blue Green Diverging, Bright": "brown-to-blue-green-diverging-right", "Brown to Blue Green Diverging, Dark": "brown-to-blue-green-diverging-dark", "Coefficient Bias": "coefficient-bias", "Cold to Hot Diverging": "cold-to-hot-diverging", "Condition Number": "condition-number", "Cyan to Purple": "cyan-to-purple", "Cyan-Light to Blue-Dark": "cyan-light-to-blue-dark", Distance: "distance", "Elevation #1": "elevation1", "Elevation #2": "elevation2", Errors: "errors", "Gray Light to Dark": "gray-light-to-dark", "Green Bright": "green-bright", "Green Light to Dark": "green-light-to-dark", "Green to Blue": "green-to-blue", "Orange Bright": "orange-bright", "Orange Light to Dark": "orange-light-to-dark", "Partial Spectrum": "partial-spectrum", "Partial Spectrum 1 Diverging": "partial-spectrum-1-diverging", "Partial Spectrum 2 Diverging": "partial-spectrum-2-diverging", "Pink to YellowGreen Diverging, Bright": "pink-to-yellow-green-diverging-bright", "Pink to YellowGreen Diverging, Dark": "pink-to-yellow-green-diverging-dark", Precipitation: "precipitation", Prediction: "prediction", "Purple Bright": "purple-bright", "Purple to Green Diverging, Bright": "purple-to-green-diverging-bright", "Purple to Green Diverging, Dark": "purple-to-green-diverging-dark", "Purple-Blue Bright": "purple-blue-bright", "Purple-Blue Light to Dark": "purple-blue-light-to-dark", "Purple-Red Bright": "purple-red-bright", "Purple-Red Light to Dark": "purple-red-light-to-dark", "Red Bright": "red-bright", "Red Light to Dark": "red-light-to-dark", "Red to Blue Diverging, Bright": "red-to-blue-diverging-bright", "Red to Blue Diverging, Dark": "red-to-blue-diverging-dark", "Red to Green": "red-to-green", "Red to Green Diverging, Bright": "red-to-green-diverging-bright", "Red to Green Diverging, Dark": "red-to-green-diverging-dark", Slope: "slope", "Spectrum-Full Bright": "spectrum-full-bright", "Spectrum-Full Dark": "spectrum-full-dark", "Spectrum-Full Light": "spectrum-full-light", Surface: "surface", Temperature: "temperature", "White to Black": "white-to-black", "Yellow to Dark Red": "yellow-to-dark-red", "Yellow to Green to Dark Blue": "yellow-to-green-to-dark-blue", "Yellow to Red": "yellow-to-red", "Yellow-Green Bright": "yellow-green-bright", "Yellow-Green Light to Dark": "yellow-green-light-to-dark" });
function g5(o11, r15) {
  if (!o11 || !r15 || o11.length !== r15.length) return false;
  for (let t8 = 0; t8 < o11.length; t8++) if (o11[t8] > r15[t8] + 2 || o11[t8] < r15[t8] - 2) return false;
  return true;
}
function p5(o11) {
  const r15 = o11.clone();
  return r15.fromColor = o11.toColor, r15.toColor = o11.fromColor, r15.algorithm = o11.algorithm, r15;
}
function u8(o11) {
  if ("multipart" === o11.type) {
    const r15 = o11.clone();
    return r15.colorRamps?.length ? (r15.colorRamps = r15.colorRamps.reverse().map((o12) => p5(o12)), r15) : r15;
  }
  return p5(o11);
}
function f5(r15, t8) {
  if (!r15) return;
  const l8 = t8 ?? m6;
  let e6 = null;
  return "algorithmic" === r15.type ? l8.some((o11) => {
    if (g5(r15.fromColor.toRgb(), o11.fromColor) && g5(r15.toColor.toRgb(), o11.toColor)) return e6 = o11.id, true;
  }) : "multipart" === r15.type && l8.some((t9) => {
    const l9 = r15.colorRamps, i11 = t9.colorRamps;
    if (l9 && i11 && l9.length === i11.length && !i11.some((r16, t10) => {
      if (!g5(l9[t10].fromColor.toRgb(), new l2(r16.fromColor).toRgb()) || !g5(l9[t10].toColor.toRgb(), new l2(r16.toColor).toRgb())) return true;
    })) {
      if (e6) return true;
      e6 = t9.id;
    }
  }), e6;
}
function s5(o11, r15, t8 = false) {
  if (!o11) return;
  let l8 = false, e6 = f5(o11, r15);
  return null != e6 || t8 || (l8 = true, e6 = f5(o11 = u8(o11), r15)), e6 ? { id: e6, inverted: l8 } : void 0;
}
function c6(o11, r15 = false) {
  const t8 = "string" == typeof o11 ? o11 : s5(o11, void 0, r15)?.id;
  return t8 ? a11.toJSON(t8) : null;
}
function d4(o11, r15 = "esriCIELabAlgorithm") {
  const t8 = m6.find(({ id: r16 }) => r16 === o11);
  return t8 ? t8.colorRamps ? { type: "multipart", colorRamps: t8.colorRamps.map((o12) => ({ type: "algorithmic", algorithm: r15, fromColor: [...o12.fromColor], toColor: [...o12.toColor] })) } : { type: "algorithmic", algorithm: r15, fromColor: [...t8.fromColor], toColor: [...t8.toColor] } : null;
}
function h5(o11) {
  const r15 = (o11 = o11 || {}).numColors || 256, t8 = o11.distanceOffset || 0, l8 = null != o11.isCustomInterval ? o11.isCustomInterval : null !== o11.distanceInterval && o11.distanceInterval !== 1 / (r15 - 1), e6 = o11.distanceInterval || 1 / (r15 - 1);
  return { ...o11, numColors: r15, distanceOffset: t8, interpolateAlpha: !!o11.interpolateAlpha, distanceInterval: e6, isCustomInterval: l8, weights: o11.weights };
}
function b3(o11, r15, t8) {
  const { numColors: l8, distanceOffset: e6, distanceInterval: i11, isCustomInterval: n12 } = t8, C5 = 0 === o11.s, m7 = 0 === r15.s;
  let a13 = o11.h, g6 = r15.h;
  C5 && !m7 ? a13 = g6 : m7 && !C5 && (r15 = { ...r15, h: a13 }, g6 = a13);
  let p6, u10 = Math.abs(g6 - a13);
  const f6 = 360;
  u10 < f6 / 2 ? p6 = (g6 - a13) * i11 : (u10 = f6 - u10, p6 = a13 > g6 ? u10 * i11 : -u10 * i11);
  const s6 = (r15.s - o11.s) * i11, c7 = (r15.v - o11.v) * i11;
  let { s: d5, v: h6 } = o11, b4 = a13;
  if (e6) {
    const o12 = e6 / i11;
    b4 = (b4 + o12 * p6 + f6) % f6, d5 += o12 * s6, h6 += o12 * c7;
  }
  const v5 = [];
  for (let k4 = 0; k4 < l8 - 1; k4++) v5.push({ h: b4, s: d5, v: h6 }), b4 = (b4 + p6 + f6) % f6, d5 += s6, h6 += c7;
  return v5.push(n12 ? { h: b4, s: d5, v: h6 } : r15), v5;
}
function v3(o11, r15, t8) {
  const { numColors: l8, distanceOffset: e6, distanceInterval: i11, isCustomInterval: n12 } = t8;
  let { l: C5, a: m7, b: a13 } = o11;
  const g6 = (r15.l - C5) * i11, p6 = (r15.a - m7) * i11, u10 = (r15.b - a13) * i11, f6 = [];
  if (e6) {
    const o12 = e6 / i11;
    C5 += o12 * g6, m7 += o12 * p6, a13 += o12 * u10;
  }
  for (let s6 = 0; s6 < l8 - 1; s6++) f6.push({ l: C5, a: m7, b: a13 }), C5 += g6, m7 += p6, a13 += u10;
  return f6.push(n12 ? { l: C5, a: m7, b: a13 } : r15), f6;
}
function k3(o11, r15, t8) {
  const { numColors: l8, distanceOffset: e6, distanceInterval: i11, isCustomInterval: n12 } = t8, C5 = o11.h, m7 = r15.h, a13 = 2 * Math.PI;
  let g6;
  if (C5 <= m7) {
    const o12 = m7 - C5, r16 = m7 - C5 - a13;
    g6 = Math.abs(r16) < Math.abs(o12) ? r16 : o12;
  } else {
    const o12 = m7 + a13 - C5, r16 = m7 - C5;
    g6 = Math.abs(r16) < Math.abs(o12) ? r16 : o12;
  }
  const p6 = g6 * i11, u10 = (r15.l - o11.l) * i11, f6 = (r15.c - o11.c) * i11;
  let { l: s6, c: c7, h: d5 } = o11;
  if (e6) {
    const o12 = e6 / i11;
    s6 += o12 * u10, c7 += o12 * f6, d5 = (d5 + o12 * p6 + a13) % a13;
  }
  const h6 = [];
  for (let b4 = 0; b4 < l8 - 1; b4++) h6.push({ l: s6, c: c7, h: d5 }), s6 += u10, c7 += f6, d5 = (d5 + p6 + a13) % a13;
  return h6.push(n12 ? { l: s6, c: c7, h: d5 } : r15), h6;
}
function y4(o11, i11) {
  let { fromColor: n12, toColor: C5 } = o11;
  n12 = [...n12], C5 = [...C5], 3 === n12.length && (n12 = n12.concat([255])), 3 === C5.length && (C5 = C5.concat([255]));
  const m7 = o11.algorithm || "esriCIELabAlgorithm", a13 = h5(i11), { numColors: g6, distanceOffset: p6, isCustomInterval: u10, interpolateAlpha: f6 } = a13;
  if (1 === g6 && 0 === p6) return [n12];
  if (2 === g6 && 0 === p6 && !u10) return [n12, C5];
  const s6 = { r: n12[0], g: n12[1], b: n12[2] }, c7 = { r: C5[0], g: C5[1], b: C5[2] }, d5 = "esriCIELabAlgorithm" === m7 ? v3(C(s6), C(c7), a13) : "esriHSVAlgorithm" === m7 ? b3(B(s6), B(c7), a13) : k3(H(s6), H(c7), a13), y5 = [], R3 = n12[3] ?? 255, w4 = ((C5[3] ?? 255) - R3) / (g6 - 1);
  for (let r15 = 0; r15 < g6; r15++) {
    const { r: o12, g: t8, b: l8 } = U(d5[r15]), i12 = f6 ? Math.round(R3 + w4 * r15) : 255;
    y5.push([o12, t8, l8, i12]);
  }
  return y5;
}
function R2(o11, r15) {
  const { numColors: t8, interpolateAlpha: l8 } = h5(r15);
  let e6 = r15?.weights;
  const { colorRamps: i11 } = o11;
  if (e6) {
    const o12 = e6.reduce((o13, r16) => o13 + r16);
    e6 = e6.map((r16) => r16 / o12);
  } else {
    e6 = [];
    for (let o12 = 0; o12 < i11.length; o12++) e6[o12] = 1 / i11.length;
  }
  const n12 = [], C5 = 1 / (t8 - 1);
  let m7 = 0, a13 = false;
  for (let p6 = 0; p6 < i11.length; p6++) {
    const o12 = n12.length, r16 = a13 ? 0 : o12 * C5 - m7;
    m7 += e6[p6];
    let g7 = p6 === i11.length - 1 ? t8 - 1 - o12 : (e6[p6] - r16) / C5;
    if (a13 = Math.ceil(g7) === g7, g7 = Math.ceil(g7), 0 === g7) continue;
    const u10 = y4(i11[p6], { numColors: g7, interpolateAlpha: l8, distanceOffset: r16 / e6[p6], distanceInterval: C5 / e6[p6] });
    n12.push(...u10);
  }
  const g6 = [...i11[i11.length - 1].toColor];
  return 3 === g6.length && g6.push(255), n12.push(g6), n12;
}
function w3(o11, r15) {
  const t8 = t(o11) ? o11.toJSON() : o11;
  return "multipart" === t8.type ? R2(t8, r15) : y4(t8, r15);
}
function B3(o11, r15) {
  const t8 = w3(o11, r15), l8 = r15?.interpolateAlpha;
  return t8.forEach((o12, r16) => {
    o12.unshift(r16), l8 || o12.pop();
  }), t8;
}
function D3(o11) {
  const t8 = [];
  for (let l8 = 0; l8 < o11.length; l8 += 4) {
    const e6 = B({ r: o11[l8], g: o11[l8 + 1], b: o11[l8 + 2] });
    t8.push([e6.h / 60, e6.s / 100, 255 * e6.v / 100]);
  }
  return t8;
}
function I3(o11) {
  const t8 = B(o11);
  return { type: "HsvColor", Hue: t8.h, Saturation: t8.s, Value: t8.v, AlphaValue: 255 };
}
function G2(o11) {
  const r15 = o11.toJSON();
  return { Algorithm: r15?.Algorithm || "esriHSVAlgorithm", type: "AlgorithmicColorRamp", FromColor: I3(o11.fromColor), ToColor: I3(o11.toColor) };
}
function A3(o11) {
  const r15 = c6(o11);
  if (!r15) return null;
  if ("algorithmic" === o11.type) return { ...G2(o11), Name: r15 };
  if (o11.colorRamps) {
    const t8 = o11.colorRamps.map(G2);
    return { type: "MultiPartColorRamp", NumColorRamps: t8.length, ArrayOfColorRamp: t8, Name: r15 };
  }
  return null;
}
function P3(o11) {
  const r15 = o11.reverse().map((o12) => {
    const r16 = o12.toString(16);
    return r16.length < 2 ? "0" + r16 : r16;
  });
  return 4294967295 & Number.parseInt(r15.join(""), 16);
}

// node_modules/@arcgis/core/renderers/support/rasterRendererChecks.js
function n11(n12) {
  return ["u8", "s8"].includes(n12.pixelType) && null != n12.statistics?.[0]?.min && null != n12.statistics[0]?.max && 1 === n12.bandCount;
}
function t7(t8, e6) {
  const { attributeTable: u10, bandCount: r15 } = t8;
  if (null == u10 && n11(t8)) return true;
  if (null == u10 || r15 > 1) return false;
  if (e6) {
    if (null == u10.fields.find((n12) => n12.name.toLowerCase() === e6.toLowerCase())) return false;
  }
  return true;
}
function e5(n12) {
  const { bandCount: t8, dataType: e6, pixelType: u10 } = n12;
  return "elevation" === e6 || "generic" === e6 && 1 === t8 && ("s16" === u10 || "s32" === u10 || "f32" === u10 || "f64" === u10);
}
function u9(n12, t8 = false) {
  const { bandCount: e6, colormap: u10, pixelType: r15 } = n12;
  return 1 === e6 && (!!u10?.length || !t8 && "u8" === r15);
}
function r14(n12, t8 = false) {
  const { attributeTable: e6, bandCount: u10 } = n12;
  return 1 === u10 && (!t8 || null != e6 || null != n12.histograms);
}
function o10(n12) {
  const { dataType: t8 } = n12;
  return "vector-uv" === t8 || "vector-magdir" === t8;
}
function i10(n12) {
  const { dataType: t8 } = n12;
  return "vector-uv" === t8 || "vector-magdir" === t8;
}
function a12(n12) {
  return !!n12?.length && n12.length <= 16384;
}

// node_modules/@arcgis/core/renderers/support/RasterSymbolizer.js
var _3 = class extends l {
  constructor(e6) {
    super(e6), this.lookup = { rendererJSON: {} }, this.canRenderInWebGL = false;
  }
  bind() {
    const { rendererJSON: e6 } = this;
    if (!e6) return { success: false };
    let r15;
    switch (this.lookup = { rendererJSON: {} }, e6.type) {
      case "uniqueValue":
        r15 = this._updateUVRenderer(e6);
        break;
      case "rasterColormap":
        r15 = this._updateColormapRenderer(e6);
        break;
      case "rasterStretch":
        r15 = this._updateStretchRenderer(e6);
        break;
      case "classBreaks":
        r15 = this._updateClassBreaksRenderer(e6);
        break;
      case "rasterShadedRelief":
        r15 = this._updateShadedReliefRenderer(e6);
        break;
      case "vectorField":
        r15 = this._updateVectorFieldRenderer();
        break;
      case "flowRenderer":
        r15 = this._updateFlowRenderer();
    }
    return r15;
  }
  symbolize(e6) {
    let r15 = e6?.pixelBlock;
    if (!T3(r15)) return r15;
    if (e6.simpleStretchParams && "rasterStretch" === this.rendererJSON.type) return this.simpleStretch(r15, e6.simpleStretchParams);
    try {
      let t8;
      switch (r15.pixels.length > 3 && (r15 = r15.extractBands(e6.bandIds ?? [0, 1, 2])), this.rendererJSON.type) {
        case "uniqueValue":
        case "rasterColormap":
          t8 = this._symbolizeColormap(r15);
          break;
        case "classBreaks":
          t8 = this._symbolizeClassBreaks(r15);
          break;
        case "rasterStretch":
          t8 = this._symbolizeStretch(r15, e6.bandIds);
          break;
        case "rasterShadedRelief": {
          const s6 = e6.extent, a13 = s6.spatialReference.isGeographic, o11 = { x: (s6.xmax - s6.xmin) / r15.width, y: (s6.ymax - s6.ymin) / r15.height };
          t8 = this._symbolizeShadedRelief(r15, { isGCS: a13, resolution: o11 });
          break;
        }
      }
      return t8;
    } catch (s6) {
      return i.getLogger(this).error("symbolize", s6.message), r15;
    }
  }
  simpleStretch(e6, r15) {
    if (!T3(e6)) return e6;
    try {
      return e6.pixels.length > 3 && (e6 = e6.extractBands([0, 1, 2])), y3(e6, { ...r15, isRenderer: true });
    } catch (s6) {
      return i.getLogger(this).error("symbolize", s6.message), e6;
    }
  }
  generateWebGLParameters(e6) {
    const { rendererJSON: r15 } = this;
    switch (r15.type) {
      case "uniqueValue":
      case "rasterColormap":
      case "classBreaks":
        return this._generateColormapWebGLParams("classBreaks" === r15.type);
      case "rasterStretch":
        return this._generateStretchWebGLParams(e6.pixelBlock, r15, e6.bandIds);
      case "rasterShadedRelief":
        return this._generateShadedReliefWebGLParams(r15, e6.isGCS, e6.resolution ?? void 0);
      case "vectorField":
        return this._generateVectorFieldWebGLParams(r15);
      default:
        return null;
    }
  }
  _isLUTChanged(e6) {
    const r15 = this.lookup.rendererJSON;
    if (!r15) return true;
    const { rendererJSON: t8 } = this;
    if ("colorRamp" in t8 && t8.colorRamp) {
      const s6 = t8.colorRamp;
      if (e6) return JSON.stringify(s6) !== JSON.stringify(r15.colorRamp);
    }
    return JSON.stringify(t8) !== JSON.stringify(r15);
  }
  _symbolizeColormap(e6) {
    if (this._isLUTChanged()) {
      if (!this.bind().success) return e6;
    }
    return f2(e6, this.lookup.colormapLut);
  }
  _symbolizeClassBreaks(e6) {
    const { canUseIndexedLUT: r15 } = this._analyzeClassBreaks(this.rendererJSON);
    if (this._isLUTChanged()) {
      if (!this.bind().success) return e6;
    }
    return r15 ? f2(e6, this.lookup.colormapLut) : p(e6, this.lookup.remapLut ?? []);
  }
  _symbolizeStretch(e6, r15) {
    if (!e6) return null;
    const { rasterInfo: t8, lookup: s6 } = this, { pixelType: a13, bandCount: o11 } = t8, i11 = this.rendererJSON, u10 = ["u8", "u16", "s8", "s16"].includes(a13);
    let c7;
    const { dra: f6 } = i11, { gamma: b4 } = s6;
    if ("histogramEqualization" === i11.stretchType) {
      const a14 = f6 ? null : s6.histogramLut, o12 = d2(i11, { rasterInfo: t8, pixelBlock: e6, bandIds: r15, returnHistogramLut: !a14 }), n12 = "u8" === t8.pixelType && !f6 && a7(t8.histograms?.[0]) ? e6 : y3(e6, { ...o12, gamma: b4, isRenderer: true });
      c7 = c3(n12, { lut: f6 ? o12.histogramLut : r15?.length ? r15.map((e7) => a14[e7]) : a14, offset: 0 });
    } else if (u10) {
      let n12;
      if (f6) {
        const s7 = d2(i11, { rasterInfo: t8, pixelBlock: e6, bandIds: r15 });
        n12 = l5({ pixelType: a13, ...s7, gamma: b4, rounding: "floor" });
      } else {
        if (this._isLUTChanged()) {
          if (!this.bind().success) return e6;
        }
        n12 = s6.stretchLut;
      }
      if (!n12) return e6;
      o11 > 1 && null != r15 && r15.length === e6?.pixels.length && n12.lut.length === o11 && (n12 = { lut: r15.map((e7) => n12.lut[e7]), offset: n12.offset }), c7 = c3(e6, n12);
    } else {
      const s7 = d2(i11, { rasterInfo: t8, pixelBlock: e6, bandIds: r15 });
      c7 = y3(e6, { ...s7, gamma: b4, isRenderer: true });
    }
    if (i11.colorRamp) {
      if (this._isLUTChanged(true)) {
        if (!this.bind().success) return e6;
      }
      c7 = f2(c7, s6.colormapLut);
    }
    return c7;
  }
  _symbolizeShadedRelief(e6, r15) {
    const t8 = this.rendererJSON, s6 = { ...t8, ...r15 }, a13 = r13(e6, s6);
    if (!t8.colorRamp) return a13;
    if (this._isLUTChanged(true)) {
      if (!this.bind().success) return a13;
    }
    const { hsvMap: o11 } = this.lookup;
    if (!o11) return a13;
    const n12 = this.rasterInfo.statistics?.[0] ?? { min: 0, max: 8e3 };
    return c5(a13, e6, o11, n12), a13;
  }
  _isVectorFieldData() {
    const { bandCount: e6, dataType: r15 } = this.rasterInfo;
    return 2 === e6 && ("vector-magdir" === r15 || "vector-uv" === r15);
  }
  _updateVectorFieldRenderer() {
    return this._isVectorFieldData() ? { success: true } : { success: false, error: `Unsupported data type "${this.rasterInfo.dataType}"; VectorFieldRenderer only supports "vector-magdir" and "vector-uv".` };
  }
  _updateFlowRenderer() {
    return this._isVectorFieldData() ? { success: true } : { success: false, error: `Unsupported data type "${this.rasterInfo.dataType}"; FlowRenderer only supports "vector-magdir" and "vector-uv".` };
  }
  _updateUVRenderer(e6) {
    const { bandCount: r15, attributeTable: t8, pixelType: s6 } = this.rasterInfo, a13 = e6.field1;
    if (!a13) return { success: false, error: "Unsupported renderer; missing UniqueValueRenderer.field." };
    const o11 = e6.defaultSymbol, n12 = 1 === r15 && ["u8", "s8"].includes(s6);
    if (!t7(this.rasterInfo, a13) && !n12) return { success: false, error: "Unsupported data; UniqueValueRenderer is only supported on single band data with a valid raster attribute table." };
    const i11 = [];
    if (null != t8) {
      const r16 = t8.fields.find((e7) => "value" === e7.name.toLowerCase());
      if (!r16) return { success: false, error: "Unsupported data; the data's raster attribute table does not have a value field." };
      t8.features.forEach((t9) => {
        const s7 = e6.uniqueValueInfos?.find((e7) => String(e7.value) === String(t9.attributes[a13])), n13 = s7?.symbol?.color;
        n13 ? i11.push([t9.attributes[r16.name]].concat(n13)) : o11 && i11.push([t9.attributes[r16.name]].concat(o11.color));
      });
    } else {
      if ("value" !== a13.toLowerCase()) return { success: false, error: 'Unsupported renderer; UniqueValueRenderer.field must be "Value" when raster attribute table is not available.' };
      e6.uniqueValueInfos?.forEach((e7) => {
        const r16 = e7?.symbol?.color;
        r16 ? i11.push([parseInt("" + e7.value, 10)].concat(r16)) : o11 && i11.push([parseInt("" + e7.value, 10)].concat(o11?.color));
      });
    }
    if (0 === i11.length) return { success: false, error: "Invalid UniqueValueRenderer. Cannot find matching records in the raster attribute table." };
    const l8 = h({ colormap: i11 });
    return this.lookup = { rendererJSON: e6, colormapLut: l8 }, this.canRenderInWebGL = a12(l8?.indexedColormap), { success: true };
  }
  _updateColormapRenderer(e6) {
    if (!u9(this.rasterInfo)) return { success: false, error: "Unsupported data; the data source does not have a colormap." };
    const r15 = e6.colormapInfos.map((e7) => [e7.value].concat(e7.color)).sort((e7, r16) => e7[0] - r16[0]);
    if (!r15 || 0 === r15.length) return { success: false, error: "Unsupported renderer; ColormapRenderer must have meaningful colormapInfos." };
    const t8 = h({ colormap: r15 });
    return this.lookup = { rendererJSON: e6, colormapLut: t8 }, this.canRenderInWebGL = a12(t8?.indexedColormap), { success: true };
  }
  _updateShadedReliefRenderer(e6) {
    if (!e5(this.rasterInfo)) return { success: false, error: `Unsupported data type "${this.rasterInfo.dataType}"; ShadedReliefRenderer only supports "elevation", or single band float/s16 data.` };
    if (e6.colorRamp) {
      const r15 = B3(e6.colorRamp, { interpolateAlpha: true }), t8 = h({ colormap: r15 }), s6 = D3(t8.indexedColormap);
      this.lookup = { rendererJSON: e6, colormapLut: t8, hsvMap: s6 };
    } else this.lookup = { rendererJSON: e6 };
    return this.canRenderInWebGL = true, { success: true };
  }
  _analyzeClassBreaks(e6) {
    const { attributeTable: r15, pixelType: t8 } = this.rasterInfo, s6 = r15?.fields.find((e7) => "value" === e7.name.toLowerCase()), a13 = r15?.fields.find((r16) => r16.name.toLowerCase() === e6.field.toLowerCase()), o11 = null != s6 && null !== a13;
    return { canUseIndexedLUT: ["u8", "u16", "s8", "s16"].includes(t8) || o11, tableValueField: s6, tableBreakField: a13 };
  }
  _updateClassBreaksRenderer(e6) {
    const { attributeTable: r15 } = this.rasterInfo, { canUseIndexedLUT: t8, tableValueField: s6, tableBreakField: a13 } = this._analyzeClassBreaks(e6), o11 = e6.classBreakInfos;
    if (!o11?.length) return { success: false, error: "Unsupported renderer; missing or invalid ClassBreaksRenderer.classBreakInfos." };
    const n12 = o11.sort((e7, r16) => e7.classMaxValue - r16.classMaxValue), i11 = n12[n12.length - 1];
    let l8 = e6.minValue;
    if (!t8) {
      const r16 = [];
      for (let e7 = 0; e7 < n12.length; e7++) r16.push({ value: n12[e7].classMinValue ?? l8, mappedColor: n12[e7].symbol.color }), l8 = n12[e7].classMaxValue;
      return r16.push({ value: i11.classMaxValue, mappedColor: i11.symbol.color }), this.lookup = { rendererJSON: e6, remapLut: r16 }, this.canRenderInWebGL = false, { success: true };
    }
    const c7 = [];
    if (null != r15 && null != s6 && null !== a13 && s6 !== a13) {
      const t9 = s6.name, o12 = a13.name, i12 = n12[n12.length - 1], { classMaxValue: u10 } = i12;
      l8 = e6.minValue;
      for (const e7 of r15.features) {
        const r16 = e7.attributes[t9], s7 = e7.attributes[o12], a14 = s7 === u10 ? i12 : s7 < l8 ? null : n12.find(({ classMaxValue: e8 }) => e8 > s7);
        a14 && c7.push([r16].concat(a14.symbol.color));
      }
    } else {
      l8 = Math.floor(e6.minValue);
      for (let e7 = 0; e7 < n12.length; e7++) {
        const r16 = n12[e7];
        for (let e8 = l8; e8 < r16.classMaxValue; e8++) c7.push([e8].concat(r16.symbol.color));
        l8 = Math.ceil(r16.classMaxValue);
      }
      i11.classMaxValue === l8 && c7.push([i11.classMaxValue].concat(i11.symbol.color));
    }
    const p6 = h({ colormap: c7, fillUnspecified: false });
    return this.lookup = { rendererJSON: e6, colormapLut: p6 }, this.canRenderInWebGL = a12(p6?.indexedColormap), { success: true };
  }
  _updateStretchRenderer(e6) {
    let { stretchType: r15, dra: t8 } = e6;
    if (!("none" === r15 || e6.statistics?.length || v4(this.rasterInfo.statistics) || t8)) return { success: false, error: "Unsupported renderer; StretchRenderer.statistics is required when dynamic range adjustment is not used." };
    const s6 = e6.histograms || this.rasterInfo.histograms;
    !V2(e6.stretchType) || s6?.length || t8 || (r15 = "minMax");
    const { computeGamma: a13, useGamma: o11, colorRamp: n12 } = e6;
    let { gamma: i11 } = e6;
    if (o11 && a13 && !i11?.length) {
      const r16 = e6.statistics?.length ? e6.statistics : this.rasterInfo.statistics;
      i11 = f3(this.rasterInfo.pixelType, r16);
    }
    const l8 = this.rasterInfo.pixelType, c7 = !t8 && ["u8", "u16", "s8", "s16"].includes(l8);
    if ("histogramEqualization" === r15) {
      const r16 = s6.map((e7) => r12(e7));
      this.lookup = { rendererJSON: e6, histogramLut: r16 };
    } else if (c7) {
      const r16 = d2(e6, { rasterInfo: this.rasterInfo }), t9 = l5({ pixelType: l8, ...r16, gamma: o11 ? i11 : null, rounding: "floor" });
      this.lookup = { rendererJSON: e6, stretchLut: t9 };
    } else this.lookup = { rendererJSON: e6 };
    if (n12 && !O3(n12)) {
      const r16 = B3(n12, { interpolateAlpha: true });
      this.lookup.colormapLut = h({ colormap: r16 }), this.lookup.rendererJSON = e6;
    }
    return this.lookup.gamma = o11 && i11?.length ? i11 : null, this.canRenderInWebGL = "histogramEqualization" !== r15, { success: true };
  }
  _generateColormapWebGLParams(e6) {
    const { indexedColormap: r15, offset: t8 } = this.lookup.colormapLut || {};
    return { colormap: r15, colormapOffset: t8, isClassBreaks: e6, type: "lut" };
  }
  _generateStretchWebGLParams(e6, r15, t8) {
    const { colormapLut: s6 } = this.lookup, a13 = r15.colorRamp ? s6?.indexedColormap : null, o11 = r15.colorRamp ? s6?.offset : null;
    "histogramEqualization" === r15.stretchType && (r15 = { ...r15, stretchType: "minMax" });
    const { gamma: n12 } = this.lookup, i11 = !(!r15.useGamma || !n12?.some((e7) => 1 !== e7)), { minCutOff: l8, maxCutOff: u10, minOutput: c7, maxOutput: p6 } = d2(r15, { rasterInfo: this.rasterInfo, pixelBlock: e6, bandIds: t8 });
    let m7 = 0;
    null != e6 && (m7 = e6.getPlaneCount(), 2 === m7 && ((e6 = e6.clone()).statistics = [e6.statistics[0]], e6.pixels = [e6.pixels[0]]));
    const { bandCount: h6 } = this.rasterInfo, f6 = Math.min(3, t8?.length || m7 || h6, h6), b4 = a13 || i11 ? 1 : 255, g6 = new Float32Array(f6);
    if (i11 && n12) for (let d5 = 0; d5 < f6; d5++) n12[d5] > 1 ? n12[d5] > 2 ? g6[d5] = 6.5 + (n12[d5] - 2) ** 2.5 : g6[d5] = 6.5 + 100 * (2 - n12[d5]) ** 4 : g6[d5] = 1;
    1 === l8.length && (l8[2] = l8[1] = l8[0]), 1 === u10.length && (u10[2] = u10[1] = u10[0]);
    const y5 = i11 && n12 ? [n12[0], n12[1] ?? n12[0], n12[2] ?? n12[0]] : [1, 1, 1], S4 = i11 ? [g6[0], g6[1] ?? g6[0], g6[2] ?? g6[0]] : [1, 1, 1], x4 = u10.map((e7, r16) => u10[r16] === l8[r16] ? 0 : (p6 - c7) / (u10[r16] - l8[r16]) / b4);
    return { bandCount: f6, minOutput: c7 / b4, maxOutput: p6 / b4, minCutOff: l8, maxCutOff: u10, factor: x4, useGamma: i11, gamma: y5, gammaCorrection: S4, colormap: a13, colormapOffset: o11, stretchType: r15.stretchType, type: "stretch" };
  }
  _generateShadedReliefWebGLParams(e6, r15 = false, t8 = { x: 0, y: 0 }) {
    const { colormapLut: s6 } = this.lookup, a13 = e6.colorRamp ? s6?.indexedColormap : null, o11 = e6.colorRamp ? s6?.offset : null, n12 = { ...e6, isGCS: r15, resolution: t8 }, i11 = a10(n12), l8 = this.rasterInfo.statistics?.[0];
    return { ...i11, minValue: l8?.min ?? 0, maxValue: l8?.max ?? 8e3, hillshadeType: "traditional" === e6.hillshadeType ? 0 : 1, type: "hillshade", colormap: a13, colormapOffset: o11 };
  }
  _generateVectorFieldWebGLParams(e6) {
    const { style: r15, inputUnit: t8, outputUnit: s6, visualVariables: a13, symbolTileSize: o11, flowRepresentation: n12 } = e6, i11 = this.rasterInfo.statistics?.[0].min ?? 0, l8 = this.rasterInfo.statistics?.[0].max ?? 50, u10 = a13?.find((e7) => "sizeInfo" === e7.type) ?? { maxDataValue: l8, maxSize: 0.8 * o11, minDataValue: i11, minSize: 0.2 * o11 }, c7 = u10.minDataValue ?? i11, p6 = u10.maxDataValue ?? l8, d5 = null != u10.maxSize && null != u10.minSize ? [u10.minSize / o11, u10.maxSize / o11] : [0.2, 0.8];
    if ("wind_speed" === r15) {
      const e7 = (d5[0] + d5[1]) / 2;
      d5[0] = d5[1] = e7;
    }
    const m7 = null != c7 && null != p6 ? [c7, p6] : null;
    let h6 = null;
    if ("classified_arrow" === r15) if (null != c7 && null != p6 && null != u10) {
      h6 = [];
      const e7 = (u10.maxDataValue - u10.minDataValue) / 5;
      for (let r16 = 0; r16 < 6; r16++) h6.push(u10.minDataValue + e7 * r16);
    } else h6 = [0, 1e-6, 3.5, 7, 10.5, 14];
    const f6 = "flow_to" === n12 === ("ocean_current_kn" === r15 || "ocean_current_m" === r15) ? 0 : Math.PI, b4 = a13?.find((e7) => "rotationInfo" === e7.type);
    return { breakValues: h6, dataRange: m7, inputUnit: t8, outputUnit: s6, symbolTileSize: o11, symbolPercentRange: d5, style: r15 || "single_arrow", rotation: f6, rotationType: this.rasterInfo.storageInfo?.tileInfo && "vector-uv" === this.rasterInfo.dataType ? "geographic" : b4?.rotationType || e6.rotationType, type: "vectorField" };
  }
};
function V2(e6) {
  return "percentClip" === e6 || "histogramEqualization" === e6;
}
function v4(e6) {
  return null != e6 && e6.length > 0 && null != e6[0].min && null != e6[0].max;
}
function T3(e6) {
  return r3(e6) && 0 !== e6.validPixelCount;
}
function O3(e6) {
  return "algorithmic" === e6.type && ["0,0,0,255", "0,0,0"].includes(e6.fromColor.join(",")) && ["255,255,255,255", "255,255,255"].includes(e6.toColor.join(","));
}
r([m({ json: { write: true } })], _3.prototype, "rendererJSON", void 0), r([m({ type: m5, json: { write: true } })], _3.prototype, "rasterInfo", void 0), r([m({ json: { write: true } })], _3.prototype, "lookup", void 0), r([m()], _3.prototype, "canRenderInWebGL", void 0), _3 = r([a2("esri.renderers.support.RasterSymbolizer")], _3);

export {
  a8 as a,
  i9 as i,
  n8 as n,
  C4 as C,
  m6 as m,
  a11 as a2,
  c6 as c,
  d4 as d,
  w3 as w,
  B3 as B,
  D3 as D,
  A3 as A,
  P3 as P,
  n6 as n2,
  a6 as a3,
  l6 as l,
  m5 as m2,
  r10 as r,
  e4 as e,
  t5 as t,
  r11 as r2,
  N,
  U2 as U,
  k,
  C2,
  G,
  W,
  H2 as H,
  P2,
  j2 as j,
  t7 as t2,
  e5 as e2,
  u9 as u,
  r14 as r3,
  o10 as o,
  i10 as i2,
  a12 as a4,
  l5 as l2,
  u4 as u2,
  h3 as h,
  p3 as p,
  g4 as g,
  d2,
  M2 as M,
  y3 as y,
  n10 as n3,
  a10 as a5,
  r13 as r4,
  c5 as c2,
  h4 as h2,
  u7 as u3,
  f4 as f,
  d3,
  _3 as _
};
//# sourceMappingURL=chunk-U5MPARPW.js.map
