import {
  N,
  b,
  j as j2,
  q
} from "./chunk-2H2JCT45.js";
import {
  m,
  o as o2
} from "./chunk-NZUIJLHR.js";
import {
  n as n4
} from "./chunk-3MVOHROR.js";
import {
  _,
  n as n3
} from "./chunk-VNTS5E5O.js";
import {
  H,
  o,
  s as s2
} from "./chunk-TMFB3DKM.js";
import {
  L
} from "./chunk-TNW4TPNP.js";
import {
  a,
  n
} from "./chunk-ZAISHGSP.js";
import {
  n as n2
} from "./chunk-RACDQ3AL.js";
import {
  j,
  s
} from "./chunk-OXSERRAR.js";

// node_modules/@arcgis/core/views/support/angularMeasurementUtils.js
var j3;
function R(e, t) {
  if (null == e || null == t) return;
  const r = b2(e, t);
  return null != r ? o2(r, "radians", "geographic") : void 0;
}
!function(e) {
  e.Absolute = "absolute", e.Relative = "relative", e.RelativeBilateral = "relative-bilateral";
}(j3 || (j3 = {}));
var b2 = (() => {
  const e = n2(), t = n2();
  return (r, i) => (o(e, r.x, r.y, r.z ?? 0), o(t, i.x, i.y, i.z ?? 0), y(e, t, r.spatialReference, i.spatialReference));
})();
var y = (() => {
  const e = n3(), t = n2(), r = n2();
  return (i, a2, l, u) => {
    if (H(i, a2)) return;
    const f = N(l), v = N(u);
    if (f && v && s(f, v) && n4(i, l, t, f) && n4(a2, u, r, v)) {
      const { azimuth: e2 } = q(V, t, r, f);
      return null != e2 ? j(e2, "degrees", "radians") : void 0;
    }
    e[0] = a2[0] - i[0], e[1] = a2[1] - i[1];
    let d = L(_, e);
    return e[0] < 0 && (d = k - d), d;
  };
})();
function x(e, t, r, i = j3.Absolute) {
  if (t && r) switch (i) {
    case j3.Absolute:
      return R(t, r);
    case j3.Relative:
      return w(z(e, t, r), j3.Relative);
    case j3.RelativeBilateral:
      return w(z(e, t, r), j3.RelativeBilateral);
  }
}
function z(e, t, r) {
  if (!e || !t || !r) return;
  const o3 = b2(e, t), n5 = b2(t, r);
  return null != o3 && null != n5 ? o2(n5 - o3, "radians", "geographic") : void 0;
}
function w(e, t) {
  if (null != e) switch (t) {
    case j3.Absolute:
      return A(e);
    case j3.Relative: {
      const t2 = T(e);
      let r = I.normalize(t2, 0, true);
      return -180 === r && (r = 180), o2(r, "degrees", "geographic");
    }
    case j3.RelativeBilateral: {
      const t2 = T(e), r = Math.abs(I.normalize(t2, 0, true));
      return o2(r, "degrees", "geographic");
    }
  }
}
function A(e) {
  const t = T(e), r = C.normalize(t, 0, true);
  return o2(r, "degrees", "geographic");
}
var M = (() => {
  const e = n2();
  return (t, i, n5, a2, s3, c = "geodesic") => {
    s2(e, i);
    const f = T(s3);
    if ("geodesic" === c) {
      const r = N(n5);
      if (r && n4(e, n5, e, r)) return j2(t, e, f, a2, r), t[2] = i[2], !!n4(t, r, t, n5);
    }
    const p = m(f, "geographic", "arithmetic"), v = j(p, "degrees", "radians"), h = i[0] + a2 * Math.cos(v), j4 = i[1] + a2 * Math.sin(v), R2 = i[2];
    return o(t, h, j4, R2), true;
  };
})();
function T(e) {
  if (null != e) return m(q2(e), e.rotationType, "geographic");
}
function U(e) {
  if (null != e) return m(q2(e), e.rotationType, "arithmetic");
}
function q2(e) {
  return j(e.value, e.unit, "degrees");
}
var V = new b();
var k = 2 * Math.PI;
var C = a;
var I = new n(-180, 180);

export {
  j3 as j,
  R,
  y,
  x,
  w,
  A,
  M,
  T,
  U
};
//# sourceMappingURL=chunk-U6CQ42B3.js.map
