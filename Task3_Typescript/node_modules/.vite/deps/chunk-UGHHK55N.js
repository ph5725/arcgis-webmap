import {
  g
} from "./chunk-LFWK3CIR.js";
import {
  t
} from "./chunk-5SRIFOTG.js";
import {
  k
} from "./chunk-F4KXGA4J.js";
import {
  a as a3,
  s as s3
} from "./chunk-2KVNXQA7.js";
import {
  n
} from "./chunk-65K4DQAH.js";
import {
  V
} from "./chunk-X3R5OB6L.js";
import {
  m as m2
} from "./chunk-XHYOFJ4U.js";
import {
  C
} from "./chunk-6PV45IYU.js";
import {
  p
} from "./chunk-SRQCQD63.js";
import {
  f
} from "./chunk-PK2ZR2SJ.js";
import {
  r as r2
} from "./chunk-YFPGM5UE.js";
import {
  i as i2
} from "./chunk-Y2ZIOB7Y.js";
import {
  l
} from "./chunk-E3KEUGUG.js";
import {
  b,
  m
} from "./chunk-N3XLUQJI.js";
import {
  a2
} from "./chunk-JUAD7TJ6.js";
import {
  r
} from "./chunk-5TPMG26T.js";
import {
  H
} from "./chunk-ZWFY3WY5.js";
import {
  I,
  pt
} from "./chunk-LQFTAGIV.js";
import {
  s as s2,
  u2 as u
} from "./chunk-GZ2P4SCJ.js";
import {
  i2 as i
} from "./chunk-XWG6QGFK.js";
import {
  a,
  s,
  y
} from "./chunk-GWNLQRNM.js";

// node_modules/@arcgis/core/support/BasemapStyle.js
var l2 = class extends b {
  constructor(o) {
    super(o), this.apiKey = null, this.id = null, this.language = null, this.places = null, this.serviceUrl = "https://basemapstyles-api.arcgis.com/arcgis/rest/services/styles/v2", this.worldview = null;
  }
  get languageParameter() {
    const o = this.language;
    let s4 = "local" === o || "global" === o ? o : m2(o ?? i2()) ?? "global";
    return s4 = "no" === s4 ? "nb" : s4, s4;
  }
};
r([m()], l2.prototype, "apiKey", void 0), r([m()], l2.prototype, "id", void 0), r([m()], l2.prototype, "language", void 0), r([m()], l2.prototype, "places", void 0), r([m()], l2.prototype, "serviceUrl", void 0), r([m()], l2.prototype, "worldview", void 0), l2 = r([a2("esri.support.BasemapStyle")], l2);
var p2 = l2;

// node_modules/@arcgis/core/Basemap.js
var _;
var U = 0;
var x = _ = class extends l.JSONSupportMixin(p) {
  constructor(e) {
    super(e), this.id = null, this.portalItem = null, this.spatialReference = null, this.style = null, this.thumbnailUrl = null, this.title = "Basemap", this.id = Date.now().toString(16) + "-basemap-" + U++, this.baseLayers = new V(), this.referenceLayers = new V();
    const r3 = (e2) => {
      e2.parent && e2.parent !== this && "remove" in e2.parent && e2.parent.remove(e2), e2.parent = this, "elevation" === e2.type && i.getLogger(this).error(`Layer '${e2.title}, id:${e2.id}' of type '${e2.type}' is not supported as a basemap layer and will therefore be ignored.`);
    }, t2 = (e2) => {
      e2.parent = null;
    };
    this.addHandles([this.baseLayers.on("after-add", (e2) => r3(e2.item)), this.referenceLayers.on("after-add", (e2) => r3(e2.item)), this.baseLayers.on("after-remove", (e2) => t2(e2.item)), this.referenceLayers.on("after-remove", (e2) => t2(e2.item))]);
  }
  initialize() {
    this.when().catch((e) => {
      i.getLogger(this).error("#load()", `Failed to load basemap (title: '${this.title}', id: '${this.id}')`, e);
    }), this.resourceInfo && this.read(this.resourceInfo.data, this.resourceInfo.context);
  }
  destroy() {
    const e = this.baseLayers.toArray();
    for (const t2 of e) t2.destroy();
    const r3 = this.referenceLayers.toArray();
    for (const t2 of r3) t2.destroy();
    this.baseLayers.destroy(), this.referenceLayers.destroy(), this.portalItem = u(this.portalItem);
  }
  normalizeCtorArgs(e) {
    return e && "resourceInfo" in e && (this._set("resourceInfo", e.resourceInfo), delete (e = { ...e }).resourceInfo), e;
  }
  set baseLayers(e) {
    this._set("baseLayers", n(e, this._get("baseLayers")));
  }
  _writeBaseLayers(e, r3, t2) {
    const s4 = [];
    e ? (t2 = { ...t2, layerContainerType: "basemap" }, this.baseLayers.forEach((e2) => {
      const r4 = g(e2, t2.webmap ? t2.webmap.getLayerJSONFromResourceInfo(e2) : null, t2);
      null != r4 && s4.push(r4);
    }), this.referenceLayers.forEach((e2) => {
      const r4 = g(e2, t2.webmap ? t2.webmap.getLayerJSONFromResourceInfo(e2) : null, t2);
      null != r4 && ("scene" !== e2.type && (r4.isReference = true), s4.push(r4));
    }), r3.baseMapLayers = s4) : r3.baseMapLayers = s4;
  }
  set referenceLayers(e) {
    this._set("referenceLayers", n(e, this._get("referenceLayers")));
  }
  writeTitle(e, r3) {
    r3.title = e || "Basemap";
  }
  load(e) {
    return this.addResolvingPromise(this._loadFromSource(e)), Promise.resolve(this);
  }
  loadAll() {
    return t(this, (e) => {
      e(this.baseLayers, this.referenceLayers);
    });
  }
  clone() {
    const e = { id: this.id, title: this.title, portalItem: this.portalItem, baseLayers: this.baseLayers.map((e2) => y(e2) ? e2.clone() : e2), referenceLayers: this.referenceLayers.map((e2) => y(e2) ? e2.clone() : e2) };
    return this.loaded && (e.loadStatus = "loaded"), new _({ resourceInfo: this.resourceInfo }).set(e);
  }
  read(e, r3) {
    this.resourceInfo || this._set("resourceInfo", { data: e, context: r3 }), super.read(e, r3);
  }
  write(e, r3) {
    return e = e || {}, r3?.origin || (r3 = { origin: "web-map", ...r3 }), super.write(e, r3), !this.loaded && this.resourceInfo?.data.baseMapLayers && (e.baseMapLayers = this.resourceInfo.data.baseMapLayers.map((e2) => {
      const r4 = a(e2);
      return r4.url && pt(r4.url) && (r4.url = `https:${r4.url}`), r4.templateUrl && pt(r4.templateUrl) && (r4.templateUrl = `https:${r4.templateUrl}`), r4;
    })), e;
  }
  async _loadFromSource(e) {
    const { resourceInfo: r3, portalItem: t2, style: s4 } = this;
    s2(e);
    const a4 = [];
    if (r3) {
      const t3 = r3.context ? r3.context.url : null;
      if (a4.push(this._loadLayersFromJSON(r3.data, t3, e)), r3.data.id && !r3.data.title) {
        const e2 = r3.data.id;
        a4.push(s3(e2).then((e3) => {
          e3 && this.read({ title: e3 }, r3.context);
        }));
      }
    } else t2 ? a4.push(this._loadFromItem(t2, e)) : s4 && a4.push(this._loadFromStylesService(s4, e));
    await Promise.all(a4);
  }
  async _loadLayersFromJSON(e, r3, t2) {
    const s4 = this.resourceInfo?.context, a4 = this.portalItem?.portal || s4?.portal || null, o = F[s4?.origin || ""] ?? "web-map", { populateOperationalLayers: i3 } = await import("./layersCreator-NB7JC7SG.js"), n2 = [];
    if (s2(t2), e.baseMapLayers && Array.isArray(e.baseMapLayers)) {
      const t3 = { context: { ...s4, origin: o, url: r3, portal: a4, layerContainerType: "basemap" }, defaultLayerType: "DefaultTileLayer" }, l3 = (e2) => "web-scene" === o && "ArcGISSceneServiceLayer" === e2.layerType || e2.isReference, p3 = i3(this.baseLayers, e.baseMapLayers.filter((e2) => !l3(e2)), t3);
      n2.push(p3);
      const c = i3(this.referenceLayers, e.baseMapLayers.filter(l3), t3);
      n2.push(c);
    }
    await Promise.allSettled(n2);
  }
  async _loadFromItem(e, r3) {
    const t2 = await e.load(r3), s4 = await t2.fetchData("json", r3), a4 = I(e.itemUrl ?? "");
    return this._set("resourceInfo", { data: s4.baseMap ?? {}, context: { origin: M[e.type || ""] ?? "web-map", portal: e.portal || C.getDefault(), url: a4 } }), this.read(this.resourceInfo.data, this.resourceInfo.context), this.read({ spatialReference: s4.spatialReference }, this.resourceInfo.context), this.read({ title: e.title, thumbnailUrl: e.thumbnailUrl }, { origin: "portal-item", portal: e.portal || C.getDefault(), url: a4 }), this._loadLayersFromJSON(this.resourceInfo.data, a4, r3);
  }
  async _loadFromStylesService(e, s4) {
    const a4 = e.serviceUrl.endsWith("/webmaps") ? e.serviceUrl.slice(0, -8) : e.serviceUrl, o = `${a4}/styles/${e.id}/self`, i3 = `${a4}/webmaps/${e.id}`, n2 = e.apiKey ?? s.apiKeys.basemapStyles, [l3, p3] = await Promise.all([(await H(o, { query: { token: n2 }, signal: s4?.signal })).data, (await H(i3, { query: { language: e.languageParameter, places: e.places, worldview: e.worldview, token: n2 }, signal: s4?.signal })).data]);
    this.thumbnailUrl ??= l3.thumbnailUrl;
    const c = I(i3);
    if (this._set("resourceInfo", { data: p3.baseMap ?? {}, context: { origin: "web-map", url: c } }), this.read(this.resourceInfo.data, this.resourceInfo.context), this.read({ spatialReference: p3.spatialReference }, this.resourceInfo.context), await this._loadLayersFromJSON(this.resourceInfo.data, c, s4), n2) for (const r3 of [...this.baseLayers, ...this.referenceLayers]) "apiKey" in r3 && (r3.apiKey = n2);
  }
  static fromId(e) {
    const r3 = a3[e];
    return r3 ? r3.itemId ? new _({ portalItem: { id: r3.itemId, portal: { url: "https://www.arcgis.com" } } }) : _.fromJSON(r3, r3.is3d ? { origin: "web-scene", portal: new C({ url: "https://www.arcgis.com" }) } : { origin: "web-map" }) : null;
  }
};
r([m({ json: { write: { ignoreOrigin: true, target: "baseMapLayers", writer(e, r3, t2, s4) {
  this._writeBaseLayers(e, r3, s4);
} }, origins: { "web-scene": { write: { ignoreOrigin: true, target: { baseMapLayers: { type: V } }, writer(e, r3, t2, s4) {
  this._writeBaseLayers(e, r3, s4);
} } } } } })], x.prototype, "baseLayers", null), r([m({ type: String, json: { origins: { "web-scene": { write: true } } } })], x.prototype, "id", void 0), r([m({ type: k })], x.prototype, "portalItem", void 0), r([m()], x.prototype, "referenceLayers", null), r([m({ readOnly: true })], x.prototype, "resourceInfo", void 0), r([m({ type: f })], x.prototype, "spatialReference", void 0), r([m({ type: p2 })], x.prototype, "style", void 0), r([m()], x.prototype, "thumbnailUrl", void 0), r([m({ type: String, json: { origins: { "web-scene": { write: { isRequired: true } } } } })], x.prototype, "title", void 0), r([r2("title")], x.prototype, "writeTitle", null), x = _ = r([a2("esri.Basemap")], x);
var M = { "Web Scene": "web-scene", "Web Map": "web-map", "Link Chart": "link-chart" };
var F = { "web-scene": "web-scene", "web-map": "web-map", "link-chart": "link-chart" };
var O = x;

export {
  O
};
//# sourceMappingURL=chunk-UGHHK55N.js.map
