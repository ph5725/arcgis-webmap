import {
  r as r3
} from "./chunk-6FVEDEHP.js";
import {
  e as e3,
  r as r2
} from "./chunk-F6DB34F6.js";
import {
  L,
  e as e6,
  f as f2,
  t as t4,
  v
} from "./chunk-EMBDDCJP.js";
import {
  h
} from "./chunk-MDCTPMKN.js";
import {
  a,
  m,
  n2 as n3
} from "./chunk-KQMSRGRD.js";
import {
  d,
  o,
  t as t2
} from "./chunk-4TBDRMZ4.js";
import {
  u3 as u2
} from "./chunk-RS3I6DPK.js";
import {
  e as e7,
  e2 as e8,
  s as s2,
  t2 as t3
} from "./chunk-4XEYVSQH.js";
import {
  e as e5
} from "./chunk-XSPND757.js";
import {
  e as e10,
  i as i2
} from "./chunk-QY6CN52R.js";
import {
  o as o2
} from "./chunk-VT5VIQO4.js";
import {
  p
} from "./chunk-4D63UIH5.js";
import {
  d as d2,
  f,
  p as p2
} from "./chunk-ENL2JUSP.js";
import {
  e as e4
} from "./chunk-7KQYSRGY.js";
import {
  e as e9
} from "./chunk-6FK2OY3E.js";
import {
  s
} from "./chunk-PEF2Q5HH.js";
import {
  i
} from "./chunk-A4KKV2O6.js";
import {
  n as n2,
  u
} from "./chunk-ZPAWXU2P.js";
import {
  e as e2
} from "./chunk-FYCLQ3SU.js";
import {
  n,
  t
} from "./chunk-6EOJZ6DP.js";
import {
  e
} from "./chunk-UZRZVWLE.js";
import {
  r
} from "./chunk-VNTS5E5O.js";

// node_modules/@arcgis/core/views/3d/webgl-engine/core/shaderLibrary/attributes/PathVertexPosition.glsl.js
var n4 = 8;
function f3(e11, c) {
  const { attributes: f4, vertex: d4 } = e11;
  f4.add(e.POSITION, "vec3"), f4.add(e.PROFILEVERTEXANDNORMAL, "vec4"), f4.add(e.PROFILEAUXDATA, "vec3"), f4.add(e.PROFILERIGHT, "vec2"), f4.add(e.PROFILEUP, "vec2"), d4.code.add(n`bool isCapVertex() {
return profileAuxData.z == 1.0;
}`), d4.uniforms.add(new e9("size", (e12) => e12.size));
  const { vvSize: u3, vvColor: m2, vvOpacity: x2 } = c;
  u3 ? (f4.add(e.SIZEFEATUREATTRIBUTE, "float"), d4.uniforms.add(new e2("vvSizeMinSize", (e12) => e12.vvSize.minSize), new e2("vvSizeMaxSize", (e12) => e12.vvSize.maxSize), new e2("vvSizeOffset", (e12) => e12.vvSize.offset), new e2("vvSizeFactor", (e12) => e12.vvSize.factor), new e2("vvSizeFallback", (e12) => e12.vvSize.fallback)), d4.code.add(n`vec2 getSize() {
float value = sizeFeatureAttribute;
if (isnan(value)) {
return vvSizeFallback.xz;
}
return size * clamp(vvSizeOffset + value * vvSizeFactor, vvSizeMinSize, vvSizeMaxSize).xz;
}`)) : d4.code.add(n`vec2 getSize(){
return size;
}`), x2 ? (f4.add(e.OPACITYFEATUREATTRIBUTE, "float"), d4.constants.add("vvOpacityNumber", "int", n4), d4.uniforms.add(new s2("vvOpacityValues", (e12) => e12.vvOpacity.values, n4), new s2("vvOpacityOpacities", (e12) => e12.vvOpacity.opacityValues, n4), new s("vvOpacityFallback", (e12) => e12.vvOpacity.fallback)), d4.code.add(n`vec4 applyOpacity(vec4 color) {
float value = opacityFeatureAttribute;
if (isnan(value)) {
return vec4(color.rgb, vvOpacityFallback);
}
if (value <= vvOpacityValues[0]) {
return vec4( color.xyz, vvOpacityOpacities[0]);
}
for (int i = 1; i < vvOpacityNumber; ++i) {
if (vvOpacityValues[i] >= value) {
float f = (value - vvOpacityValues[i-1]) / (vvOpacityValues[i] - vvOpacityValues[i-1]);
return vec4( color.xyz, mix(vvOpacityOpacities[i-1], vvOpacityOpacities[i], f));
}
}
return vec4( color.xyz, vvOpacityOpacities[vvOpacityNumber - 1]);
}`)) : d4.code.add(n`vec4 applyOpacity(vec4 color){
return color;
}`), m2 ? (f4.add(e.COLORFEATUREATTRIBUTE, "float"), d4.constants.add("vvColorNumber", "int", e8), d4.uniforms.add(new s2("vvColorValues", (e12) => e12.vvColor.values, e8), new e7("vvColorColors", (e12) => e12.vvColor.colors, e8), new e4("vvColorFallback", (e12) => e12.vvColor.fallback)), d4.code.add(n`vec4 getColor() {
float value = colorFeatureAttribute;
if (isnan(value)) {
return applyOpacity(vvColorFallback);
}
if (value <= vvColorValues[0]) {
return applyOpacity(vvColorColors[0]);
}
for (int i = 1; i < vvColorNumber; ++i) {
if (vvColorValues[i] >= value) {
float f = (value - vvColorValues[i-1]) / (vvColorValues[i] - vvColorValues[i-1]);
return applyOpacity(mix(vvColorColors[i-1], vvColorColors[i], f));
}
}
return applyOpacity(vvColorColors[vvColorNumber - 1]);
}`)) : d4.code.add(n`vec4 getColor(){
return applyOpacity(vec4(1, 1, 1, 1));
}`), d4.code.add(n`vec3 decompressAxis(vec2 axis) {
float z = 1.0 - abs(axis.x) - abs(axis.y);
return normalize(vec3(axis + sign(axis) * min(z, 0.0), z));
}
vec3 calculateVPos() {
vec2 size = getSize();
vec3 origin = position;
vec3 right = decompressAxis(profileRight);
vec3 up = decompressAxis(profileUp);
vec2 profileVertex = profileVertexAndNormal.xy * size;`), d4.code.add(n`if(isCapVertex()) {
float positionOffsetAlongProfilePlaneNormal = profileAuxData.x * size[0];
vec3 forward = cross(up, right);
vec3 offset = right * profileVertex.x + up * profileVertex.y + forward * positionOffsetAlongProfilePlaneNormal;
return origin + offset;
}
vec2 rotationRight = vec2(profileAuxData.x, profileAuxData.y);
float maxDistance = length(rotationRight);`), d4.code.add(n`rotationRight = maxDistance > 0.0 ? normalize(rotationRight) : vec2(0, 0);
float rx = dot(profileVertex, rotationRight);
if (abs(rx) > maxDistance) {
vec2 rotationUp = vec2(-rotationRight.y, rotationRight.x);
float ry = dot(profileVertex, rotationUp);
profileVertex = rotationRight * maxDistance * sign(rx) + rotationUp * ry;
}
vec3 offset = right * profileVertex.x + up * profileVertex.y;
return origin + offset;
}`), d4.code.add(n`vec3 localNormal() {
vec3 right = decompressAxis(profileRight);
vec3 up = decompressAxis(profileUp);
vec3 normal = right * profileVertexAndNormal.z + up * profileVertexAndNormal.w;
if(isCapVertex()) {
vec3 forward = cross(up, right);
normal += forward * profileAuxData.y;
}
return normal;
}`);
}
var d3 = class extends t3 {
  constructor() {
    super(...arguments), this.size = r(1, 1);
  }
};

// node_modules/@arcgis/core/chunks/Path.glsl.js
function x(x2) {
  const V2 = new i(), { vertex: _, fragment: M, varyings: $ } = V2;
  f(_, x2), $.add("vpos", "vec3", { invariant: true }), V2.include(f3, x2);
  const { output: z, spherical: H, pbrMode: N, receiveShadows: E, hasBloom: G, snowCover: T } = x2, k = u(z);
  switch ((k || z === n2.ObjectAndLayerIdColor) && (V2.include(o, x2), V2.include(h, x2), V2.include(d, x2), V2.include(e5, x2), V2.include(i2, x2), $.add("vnormal", "vec3"), $.add("vcolor", "vec4"), _.main.add(n`
      vpos = calculateVPos();
      vnormal = normalize(localNormal());
      forwardViewPosDepth((view * vec4(vpos, 1.0)).xyz);

      gl_Position = transformPosition(proj, view, vpos);

      ${k ? "forwardLinearDepth();" : ""}
      forwardObjectAndLayerIdColor();

      vcolor = getColor();`)), z) {
    case n2.ColorEmission:
    case n2.Color:
      V2.include(m, x2), V2.include(L, x2), M.include(t4, x2), V2.include(h, x2), V2.include(e3, x2), M.include(p, x2), V2.include(u2, x2), d2(M, x2), v(M), f2(M), M.uniforms.add(_.uniforms.get("localOrigin"), new e2("ambient", (e11) => e11.ambient), new e2("diffuse", (e11) => e11.diffuse), new s("opacity", (e11) => e11.opacity)), M.include(e10), M.include(r2, x2), a(M), M.main.add(n`
        discardBySlice(vpos);
        discardByTerrainDepth();

        shadingParams.viewDirection = normalize(vpos - cameraPosition);
        shadingParams.normalView = vnormal;
        vec3 normal = shadingNormal(shadingParams);
        float ssao = evaluateAmbientOcclusionInverse();

        vec3 posWorld = vpos + localOrigin;
        vec3 normalGround = ${H ? "normalize(posWorld);" : "vec3(0.0, 0.0, 1.0);"}

        vec3 albedo = vcolor.rgb * max(ambient, diffuse); // combine the old material parameters into a single one
        float combinedOpacity = vcolor.a * opacity;

        ${t(T, n`float snow = getSnow(normal, normalGround);
                 albedo = mix(albedo, vec3(1), snow);
                 ssao = mix(ssao, 1.0, snow);`)}

        float additionalAmbientScale = additionalDirectedAmbientLight(posWorld);
        vec3 additionalLight = ssao * mainLightIntensity * additionalAmbientScale * ambientBoostFactor * lightingGlobalFactor;
        float shadow = ${E ? "max(lightingGlobalFactor * (1.0 - additionalAmbientScale), readShadowMap(vpos, linearDepth));" : H ? "lightingGlobalFactor * (1.0 - additionalAmbientScale);" : "0.0;"}

        ${t(N === n3.Schematic, `float additionalAmbientIrradiance = additionalAmbientIrradianceFactor * mainLightIntensity[2];
           vec4 emission = ${G ? "vec4(0.0)" : "getEmissions(albedo)"};
           ${t(T, "mrr = applySnowToMRR(mrr, snow);\n              emission = snowCoverForEmissions(emission, snow);")}`)}

        vec3 shadedColor = ${N === n3.Schematic ? "evaluateSceneLightingPBR(normal, albedo, shadow, 1.0 - ssao, additionalLight, shadingParams.viewDirection, normalGround, mrr, emission, additionalAmbientIrradiance);" : "evaluateSceneLighting(normal, albedo, shadow, 1.0 - ssao, additionalLight);"}
        vec4 finalColor = vec4(shadedColor, combinedOpacity);
        outputColorHighlightOID(finalColor, vpos, albedo ${t(T, ", snow")});`);
      break;
    case n2.Depth:
      V2.include(o, x2), _.main.add(n`vpos = calculateVPos();
gl_Position = transformPosition(proj, view, vpos);`), V2.fragment.include(p, x2), M.main.add(n`discardBySlice(vpos);`);
      break;
    case n2.Shadow:
    case n2.ShadowHighlight:
    case n2.ShadowExcludeHighlight:
    case n2.ViewshedShadow:
      V2.include(o, x2), t2(V2), $.add("depth", "float"), _.main.add(n`vpos = calculateVPos();
gl_Position = transformPositionWithDepth(proj, view, vpos, nearFar, depth);`), V2.fragment.include(p, x2), V2.include(e6, x2), M.main.add(n`discardBySlice(vpos);
outputDepth(depth);`);
      break;
    case n2.ObjectAndLayerIdColor:
      V2.fragment.include(p, x2), M.main.add(n`discardBySlice(vpos);
outputObjectAndLayerIdColor();`);
      break;
    case n2.Normal:
      V2.include(o, x2), V2.include(r3, x2), p2(_), $.add("vnormal", "vec3"), _.main.add(n`vpos = calculateVPos();
vnormal = normalize((viewNormal * vec4(localNormal(), 1.0)).xyz);
gl_Position = transformPosition(proj, view, vpos);`), V2.fragment.include(p, x2), M.main.add(n`discardBySlice(vpos);
vec3 normal = normalize(vnormal);
if (gl_FrontFacing == false) normal = -normal;
fragColor = vec4(vec3(0.5) + 0.5 * normal, 1.0);`);
      break;
    case n2.Highlight:
      V2.include(o, x2), V2.include(r3, x2), $.add("vnormal", "vec3"), _.main.add(n`vpos = calculateVPos();
gl_Position = transformPosition(proj, view, vpos);`), V2.fragment.include(p, x2), V2.include(o2, x2), M.main.add(n`discardBySlice(vpos);
calculateOcclusionAndOutputHighlight();`);
  }
  return V2;
}
var V = Object.freeze(Object.defineProperty({ __proto__: null, build: x }, Symbol.toStringTag, { value: "Module" }));

export {
  d3 as d,
  x,
  V
};
//# sourceMappingURL=chunk-UL72MRRE.js.map
