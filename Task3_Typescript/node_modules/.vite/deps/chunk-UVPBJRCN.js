import {
  l as l3,
  p
} from "./chunk-TZWHWOLK.js";
import {
  l as l2,
  m2
} from "./chunk-U5MPARPW.js";
import {
  g
} from "./chunk-B6C7UPBZ.js";
import {
  f as f2,
  s,
  u
} from "./chunk-SYPTUUSZ.js";
import {
  r as r2
} from "./chunk-EOMIFMDH.js";
import {
  a as a2
} from "./chunk-TVM3SZJR.js";
import {
  z
} from "./chunk-O5TPFXRT.js";
import {
  _
} from "./chunk-Q6XRAGMA.js";
import {
  f
} from "./chunk-PK2ZR2SJ.js";
import {
  l
} from "./chunk-E3KEUGUG.js";
import {
  m
} from "./chunk-N3XLUQJI.js";
import {
  a2 as a
} from "./chunk-JUAD7TJ6.js";
import {
  x
} from "./chunk-VHLUKPRH.js";
import {
  r
} from "./chunk-5TPMG26T.js";
import {
  H
} from "./chunk-ZWFY3WY5.js";

// node_modules/@arcgis/core/renderers/support/RasterPresetRenderer.js
var d = class extends a2.ClonableMixin(l) {
  constructor(e) {
    super(e), this.name = void 0, this.method = "none", this.value = void 0, this.bandIds = void 0, this.renderer = void 0;
  }
};
r([m({ type: String, json: { write: { isRequired: true } } })], d.prototype, "name", void 0), r([m({ type: ["raster-function-template", "variable", "none"], json: { write: { isRequired: true } } }), r2({ rasterFunctionTemplate: "raster-function-template", variable: "variable", none: "none" })], d.prototype, "method", void 0), r([m({ type: String, json: { write: { isRequired: true } } })], d.prototype, "value", void 0), r([m({ type: [x], json: { write: { isRequired: true } } })], d.prototype, "bandIds", void 0), r([m({ types: l3, json: { write: true, origins: { "web-scene": { types: p, write: { overridePolicy: (e) => ({ enabled: e && "vector-field" !== e.type && "flow" !== e.type }) } } } } })], d.prototype, "renderer", void 0), d = r([a("esri.renderers.support.RasterPresetRenderer")], d);

// node_modules/@arcgis/core/layers/mixins/RasterPresetRendererMixin.js
var o = (o2) => {
  let i = class extends o2 {
    constructor() {
      super(...arguments), this.activePresetRendererName = null, this.presetRenderers = null;
    }
  };
  return r([m({ type: String, json: { name: "layerDefinition.activePresetRendererName", write: { allowNull: true } } })], i.prototype, "activePresetRendererName", void 0), r([m({ type: [d], json: { name: "layerDefinition.presetRenderers", write: true } })], i.prototype, "presetRenderers", void 0), i = r([a("esri.layers.mixins.RasterPresetRendererMixin")], i), i;
};

// node_modules/@arcgis/core/rest/imageService/fetchRasterInfo.js
async function m3(m4, f4, p3) {
  const c2 = f2(m4), { rasterFunction: d2, sourceJSON: h } = f4 || {}, g2 = d2 ? JSON.stringify(d2.rasterFunctionDefinition || d2) : null, y = u({ ...c2.query, renderingRule: g2, f: "json" }), x2 = s(y, p3);
  m4 = c2.path;
  const S = h || await H(m4, x2).then((e) => e.data), b = S.hasRasterAttributeTable ? H(`${m4}/rasterAttributeTable`, x2) : null, v = S.hasColormap ? H(`${m4}/colormap`, x2) : null, V = S.hasHistograms ? H(`${m4}/histograms`, x2) : null, D = S.currentVersion >= 10.3 ? H(`${m4}/keyProperties`, x2) : null, I = S.hasMultidimensions ? H(`${m4}/multidimensionalInfo`, x2) : null, T = await Promise.allSettled([b, v, V, D, I]);
  let R = null;
  if (S.minValues && S.minValues.length === S.bandCount) {
    R = [];
    for (let e = 0; e < S.minValues.length; e++) R.push({ min: S.minValues[e], max: S.maxValues[e], avg: S.meanValues[e], stddev: S.stdvValues[e] });
  }
  const j = z.fromJSON(S.extent), w = Math.ceil(j.width / S.pixelSizeX - 0.1), M = Math.ceil(j.height / S.pixelSizeY - 0.1), N = f.fromJSON(S.spatialReference || S.extent.spatialReference), O = "fulfilled" === T[0].status ? T[0].value?.data : null, J = O?.features?.length ? g.fromJSON(O) : null, k = "fulfilled" === T[1].status ? T[1].value?.data.colormap : null, C = k?.length ? k : null, P = "fulfilled" === T[2].status ? T[2].value?.data.histograms : null, z2 = P?.[0]?.counts?.length ? P : null, F = "fulfilled" === T[3].status ? T[3].value?.data ?? {} : {}, $ = "fulfilled" === T[4].status ? T[4].value?.data.multidimensionalInfo : null, E = $?.variables?.length ? $ : null;
  E && E.variables.forEach((e) => {
    e.statistics?.length && e.statistics.forEach((e2) => {
      e2.avg = e2.mean, e2.stddev = e2.standardDeviation;
    }), e.dimensions?.forEach((e2) => {
      "StdTime" !== e2.name || e2.recurring || e2.unit || (e2.unit = "ISO8601");
    });
  });
  const { defaultVariable: H2, serviceDataType: L } = S;
  H2 && H2 !== F.DefaultVariable && (F.DefaultVariable = H2), L?.includes("esriImageServiceDataTypeVector") && !L.includes(F.DataType) && (F.DataType = L.replace("esriImageServiceDataType", ""));
  let A = S.noDataValue;
  S.noDataValues?.length && S.noDataValues.some((e) => e !== A) && (A = S.noDataValues);
  const q = S.transposeInfo ? new l2({ blockWidth: 256, blockHeight: 256, pyramidBlockWidth: 256, pyramidBlockHeight: 256, pyramidScalingFactor: 2, compression: "lerc", origin: new _({ x: S.extent.xmin, y: S.extent.ymax, spatialReference: N }), firstPyramidLevel: 1, maximumPyramidLevel: Math.max(0, Math.round(Math.log(Math.max(w, M)) / Math.LN2 - 8)), transposeInfo: S.transposeInfo }) : void 0;
  return new m2({ width: w, height: M, bandCount: S.bandCount, extent: z.fromJSON(S.extent), spatialReference: N, pixelSize: new _({ x: S.pixelSizeX, y: S.pixelSizeY, spatialReference: N }), pixelType: S.pixelType.toLowerCase(), statistics: R, attributeTable: J, colormap: C, histograms: z2, keyProperties: F, noDataValue: A, multidimensionalInfo: E, storageInfo: q });
}
function f3(e, t, a3) {
  return m3(e, { sourceJSON: t }, a3);
}
function p2(e, t, a3) {
  return m3(e, { rasterFunction: t }, a3);
}
function c(e, t) {
  e.attributeTable || (t.hasRasterAttributeTable = false), e.histograms || (t.hasHistograms = false), e.colormap || (t.hasColormap = false), e.multidimensionalInfo || (t.hasMultidimensions = false);
}

export {
  f3 as f,
  p2 as p,
  c,
  o
};
//# sourceMappingURL=chunk-UVPBJRCN.js.map
