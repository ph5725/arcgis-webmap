import {
  e as e3
} from "./chunk-BDLVUYG2.js";
import {
  e as e2,
  u as u2
} from "./chunk-6QA2BVC5.js";
import {
  DateTime
} from "./chunk-UY6B6IVT.js";
import {
  u3 as u
} from "./chunk-N3XLUQJI.js";
import {
  f
} from "./chunk-GZ2P4SCJ.js";
import {
  s
} from "./chunk-XWG6QGFK.js";
import {
  e,
  t
} from "./chunk-GWNLQRNM.js";

// node_modules/@arcgis/core/support/loadArcade.js
var a;
function e4() {
  return a || (a = (async () => {
    const [a3, e7, r2] = await Promise.all([import("./arcadeUtils-CPVYF7QC.js"), import("./batchExec-DPCVCSQ7.js"), import("./aiServices-ZMRNNSGQ.js")]);
    return { arcade: a3.arcade, arcadeUtils: a3, batchExec: e7, aiServices: r2, Dictionary: a3.Dictionary, Feature: a3.arcadeFeature, Voxel: a3.Voxel };
  })()), a;
}

// node_modules/@arcgis/core/support/dateUtils.js
var t2 = "HH:mm";
var l = "HH:mm:ss";
var m = "HH:mm:ss.SSS";
var i = [m, l, t2, "TT"];
var s2 = "yyyy-MM-dd";
function e5(r2) {
  if (!r2 || !e2(r2)) return null;
  const t4 = DateTime.fromFormat(r2, s2);
  return t4.isValid ? t4 : null;
}
function H(t4) {
  return t4 && e2(t4) ? f(i, (r2) => {
    const n = DateTime.fromFormat(t4, r2);
    return n.isValid ? n : null;
  }) ?? null : null;
}
function c(r2) {
  if (!r2 || !e2(r2)) return null;
  const t4 = DateTime.fromISO(r2);
  return t4.isValid ? t4 : null;
}

// node_modules/@arcgis/core/layers/support/domainUtils.js
var r;
!function(e7) {
  e7.VALUE_OUT_OF_RANGE = "domain-validation-error::value-out-of-range", e7.INVALID_CODED_VALUE = "domain-validation-error::invalid-coded-value";
}(r || (r = {}));
var l2 = /* @__PURE__ */ new Set(["integer", "small-integer", "long", "big-integer", "esriFieldTypeInteger", "esriFieldTypeSmallInteger", "esriFieldTypeLong", "esriFieldTypeBigInteger"]);
function u3(e7) {
  return null != e7 && l2.has(e7.type);
}
function a2(e7) {
  return null != e7 && ("date-only" === e7.type || "esriFieldTypeDateOnly" === e7.type);
}
function o(e7) {
  return null != e7 && ("timestamp-offset" === e7.type || "esriFieldTypeTimestampOffset" === e7.type);
}
function s3(e7) {
  return null != e7 && ("time-only" === e7.type || "esriFieldTypeTimeOnly" === e7.type);
}
var m2 = /* @__PURE__ */ new Set([...["single", "double"], ...["esriFieldTypeSingle", "esriFieldTypeDouble"]]);
var c2 = u(l2, m2);
function f2(e7, n) {
  const i2 = n ?? e7?.domain;
  if (!i2 || "range" !== i2.type) return;
  const t4 = "range" in i2 ? i2.range[0] : i2.minValue, r2 = "range" in i2 ? i2.range[1] : i2.maxValue, l3 = u3(e7);
  return a2(e7) || s3(e7) || o(e7) ? { ...F(e7, r2, t4), isInteger: l3 } : { min: null != t4 && "number" == typeof t4 ? t4 : null, max: null != r2 && "number" == typeof r2 ? r2 : null, rawMin: t4, rawMax: r2, isInteger: l3 };
}
function F(e7, r2, l3) {
  return a2(e7) ? { min: e5(l3)?.toMillis(), max: e5(r2)?.toMillis(), rawMin: l3, rawMax: r2 } : s3(e7) ? { min: H(l3)?.toMillis(), max: H(r2)?.toMillis(), rawMin: l3, rawMax: r2 } : o(e7) ? { min: c(l3)?.toMillis(), max: c(r2)?.toMillis(), rawMin: l3, rawMax: r2 } : { max: null, min: null };
}

// node_modules/@arcgis/core/support/arcadeExpressionUtils.js
function t3(t4) {
  if (!t4) return;
  const e7 = t4.match(o2);
  return e7?.groups ? e7.groups.doubleQuoted ?? e7.groups.singleQuoted ?? e7.groups.dotNotation : void 0;
}
var o2 = /^(\$feature\[(?:"(?<doubleQuoted>[^"]+)"|'(?<singleQuoted>[^']+)')\]|\$feature\.(?<dotNotation>[a-zA-Z_][a-zA-Z0-9_]*))$/i;
function e6(t4) {
  return t4.match(u4)?.[1]?.replace(/\\'/g, "'") ?? null;
}
var u4 = /^hash\(\$feature\['((\\'|[^'])+)'\]\) \* 8\.381e-8$/;

// node_modules/@arcgis/core/layers/support/fieldUtils.js
var c3 = /^([0-9_])/;
var d = /[^a-z0-9_\u0080-\uffff]+/gi;
function p(e7) {
  if (null == e7) return null;
  return e7.trim().replaceAll(d, "_").replace(c3, "F$1") || null;
}
var m3 = ["field", "field2", "field3", "normalizationField", "rotationInfo.field", "proportionalSymbolInfo.field", "proportionalSymbolInfo.normalizationField", "colorInfo.field", "colorInfo.normalizationField"];
var y = ["field", "normalizationField"];
function g(e7, n) {
  if (null != e7 && null != n) {
    for (const i2 of Array.isArray(e7) ? e7 : [e7]) if (F2(m3, i2, n), "visualVariables" in i2 && i2.visualVariables) for (const e8 of i2.visualVariables) F2(y, e8, n);
  }
}
function F2(e7, t4, r2) {
  if (e7) for (const l3 of e7) {
    const e8 = t(l3, t4), o3 = e8 && "function" != typeof e8 && r2.get(e8);
    o3 && e(l3, o3.name, t4);
  }
}
function I(e7, n) {
  if (null != e7 && n?.fields?.length) if ("startField" in e7) {
    const i2 = n.get(e7.startField), t4 = n.get(e7.endField);
    e7.startField = i2?.name ?? null, e7.endField = t4?.name ?? null;
  } else {
    const i2 = n.get(e7.startTimeField), t4 = n.get(e7.endTimeField);
    e7.startTimeField = i2?.name ?? null, e7.endTimeField = t4?.name ?? null;
  }
}
var b = /* @__PURE__ */ new Set();
function w(e7, n) {
  return e7 && n ? (b.clear(), T(b, e7, n), Array.from(b).sort()) : [];
}
function T(e7, n, i2) {
  if (i2) if (n?.fields?.length) if (i2.includes("*")) for (const { name: t4 } of n.fields) e7.add(t4);
  else for (const t4 of i2) x(e7, n, t4);
  else {
    if (i2.includes("*")) return e7.clear(), void e7.add("*");
    for (const n2 of i2) null != n2 && e7.add(n2);
  }
}
function x(e7, n, i2) {
  if ("string" == typeof i2) if (n) {
    const t4 = n.get(i2);
    t4 && e7.add(t4.name);
  } else e7.add(i2);
}
function h(e7, n) {
  return null == n || null == e7 ? [] : n.includes("*") ? (e7.fields ?? []).map((e8) => e8.name) : n;
}
function _(e7, n, i2 = 1) {
  if (!n || !e7) return [];
  if (n.includes("*")) return ["*"];
  const t4 = w(e7, n);
  return t4.length / e7.fields.length >= i2 ? ["*"] : t4;
}
async function E(e7, n, i2) {
  if (!i2) return;
  let t4;
  const r2 = t3(i2);
  if (r2) t4 = [r2];
  else {
    const { arcadeUtils: e8 } = await e4();
    t4 = e8.extractFieldNames(i2, n?.fields?.map((e9) => e9.name));
  }
  for (const l3 of t4) x(e7, n, l3);
}
async function A(n, i2, t4) {
  if (t4 && "1=1" !== t4) {
    const l3 = await e3(t4, i2);
    if (!l3.isStandardized) throw new s("fieldUtils:collectFilterFields", "Where clause is not standardized", { where: t4 });
    T(n, i2, l3.fieldNames);
  }
}
function v({ displayField: e7, fields: n }) {
  return e7 || (n?.length ? N(n, "name-or-title") || N(n, "unique-identifier") || N(n, "type-or-category") || S(n) : null);
}
function S(e7) {
  for (const n of e7) {
    if (!n?.name) continue;
    const e8 = n.name.toLowerCase();
    if (e8.includes("name") || e8.includes("title")) return n.name;
  }
  return null;
}
function N(e7, n) {
  for (const i2 of e7) if (i2?.valueType && i2.valueType === n) return i2.name;
  return null;
}
async function L(e7, n) {
  if (!n) return;
  const i2 = n.elevationInfo?.featureExpressionInfo;
  return i2 ? i2.collectRequiredFields(e7, n.fieldsIndex) : void 0;
}
function O(e7, n, i2) {
  i2.onStatisticExpression ? E(e7, n, i2.onStatisticExpression.expression) : e7.add(i2.onStatisticField);
}
async function D(e7, n, i2) {
  if (!n || !i2 || !("fields" in i2)) return;
  const t4 = [], r2 = i2.popupTemplate;
  t4.push(V(e7, n, r2)), i2.fields && t4.push(...i2.fields.map(async (i3) => O(e7, n.fieldsIndex, i3))), await Promise.all(t4);
}
async function M(e7, n) {
  const { fieldsIndex: i2, trackInfo: t4 } = n;
  if (!n || !t4 || !i2) return;
  const r2 = [t4.latestObservations.renderer?.collectRequiredFields(e7, i2), t4.previousObservations.renderer?.collectRequiredFields(e7, i2), t4.trackLines.renderer?.collectRequiredFields(e7, i2)];
  t4.popupTemplate && r2.push(V(e7, n, t4.popupTemplate));
  for (const l3 of [t4.latestObservations.labelingInfo, t4.previousObservations.labelingInfo, t4.trackLines.labelingInfo]) if (l3) for (const n2 of l3) r2.push(Z(e7, i2, n2));
  await Promise.all(r2);
}
async function V(e7, n, i2) {
  const t4 = [];
  i2?.expressionInfos && t4.push(...i2.expressionInfos.map((i3) => E(e7, n.fieldsIndex, i3.expression)));
  const r2 = i2?.content;
  if (Array.isArray(r2)) for (const l3 of r2) "expression" === l3.type && l3.expressionInfo && t4.push(E(e7, n.fieldsIndex, l3.expressionInfo.expression));
  await Promise.all(t4);
}
async function R(e7, n, i2) {
  n && (n.timeInfo && i2?.timeExtent && T(e7, n.fieldsIndex, [n.timeInfo.startField, n.timeInfo.endField]), n.floorInfo && T(e7, n.fieldsIndex, [n.floorInfo.floorField]), null != i2?.where && await A(e7, n.fieldsIndex, i2.where));
}
async function j(e7, n, i2) {
  n && i2 && await Promise.all(i2.map((i3) => U(e7, n, i3)));
}
async function U(e7, n, i2) {
  n && i2 && (i2.valueExpression ? await E(e7, n.fieldsIndex, i2.valueExpression) : i2.field && x(e7, n.fieldsIndex, i2.field));
}
function C(e7) {
  return e7 ? w(e7.fieldsIndex, Y(e7)) : [];
}
function G(e7) {
  if (!e7) return [];
  const n = e7.geometryFieldsInfo;
  return n ? w(e7.fieldsIndex, [n.shapeAreaField, n.shapeLengthField]) : [];
}
async function P(e7, n, i2) {
  if (!n || !i2) return;
  const t4 = n.fieldsIndex;
  await Promise.all(i2.filters.map((n2) => A(e7, t4, n2.where)));
}
var q = /* @__PURE__ */ new Set(["oid", "global-id", "guid"]);
var X = /* @__PURE__ */ new Set(["oid", "global-id"]);
var z = [/^fnode_$/i, /^tnode_$/i, /^lpoly_$/i, /^rpoly_$/i, /^poly_$/i, /^shape$/i, /^shape_$/i, /^subclass$/i, /^subclass_$/i, /^rings_ok$/i, /^rings_nok$/i, /objectid/i, /^perimeter_/i, /_perimeter$/i, /_i$/i];
function B(e7) {
  const n = /* @__PURE__ */ new Set();
  J(e7).forEach((e8) => n.add(e8)), G(e7).forEach((e8) => n.add(e8.toLowerCase()));
  const i2 = e7 && "infoFor3D" in e7 ? e7.infoFor3D : void 0;
  return i2 && (Object.values(i2.assetMapFieldRoles).forEach((e8) => n.add(e8.toLowerCase())), Object.values(i2.transformFieldRoles).forEach((e8) => n.add(e8.toLowerCase()))), Array.from(n);
}
function Y(e7) {
  if (!e7) return [];
  const n = "editFieldsInfo" in e7 && e7.editFieldsInfo;
  if (!n) return [];
  const { creationDateField: i2, creatorField: t4, editDateField: r2, editorField: l3 } = n;
  return [i2, t4, r2, l3].filter(Boolean);
}
function J(e7) {
  return Y(e7).map((e8) => e8.toLowerCase());
}
function W(e7, n) {
  return e7.editable && !q.has(e7.type) && !J(n).includes(e7.name?.toLowerCase() ?? "");
}
function H2(e7, n) {
  const i2 = e7.name?.toLowerCase() ?? "";
  return !(null != n?.objectIdField && i2 === n.objectIdField.toLowerCase() || null != n?.globalIdField && i2 === n.globalIdField.toLowerCase() || B(n).includes(i2) || X.has(e7.type) || z.some((e8) => e8.test(i2)));
}
async function Q(e7, n) {
  const { labelingInfo: i2, fieldsIndex: t4 } = n;
  i2?.length && await Promise.all(i2.map((n2) => Z(e7, t4, n2)));
}
async function Z(e7, n, i2) {
  if (!i2) return;
  const t4 = i2.getLabelExpression(), r2 = i2.where;
  if ("arcade" === t4.type) await E(e7, n, t4.expression);
  else {
    const i3 = t4.expression.match(/{[^}]*}/g);
    i3 && i3.forEach((i4) => {
      x(e7, n, i4.slice(1, -1));
    });
  }
  await A(e7, n, r2);
}
function ee(e7) {
  const n = e7.defaultValue;
  return void 0 !== n && oe(e7, n) ? n : e7.nullable ? null : void 0;
}
function ne(e7) {
  const n = "string" == typeof e7 ? { type: e7 } : e7;
  return Fe(n) ? 255 : "esriFieldTypeDate" === n.type || "date" === n.type ? 8 : void 0;
}
function ie(e7) {
  return "number" == typeof e7 && !isNaN(e7) && isFinite(e7);
}
function te(e7) {
  return null === e7 || ie(e7);
}
function re(e7) {
  return null === e7 || Number.isInteger(e7);
}
function le() {
  return true;
}
function oe(e7, n) {
  let i2;
  switch (e7.type) {
    case "date":
    case "integer":
    case "long":
    case "small-integer":
    case "big-integer":
    case "esriFieldTypeDate":
    case "esriFieldTypeInteger":
    case "esriFieldTypeLong":
    case "esriFieldTypeSmallInteger":
    case "esriFieldTypeBigInteger":
      i2 = e7.nullable ? re : Number.isInteger;
      break;
    case "double":
    case "single":
    case "esriFieldTypeSingle":
    case "esriFieldTypeDouble":
      i2 = e7.nullable ? te : ie;
      break;
    case "string":
    case "esriFieldTypeString":
      i2 = e7.nullable ? u2 : e2;
      break;
    default:
      i2 = le;
  }
  return 1 === arguments.length ? i2 : i2(n);
}
var se = ["integer", "small-integer", "big-integer", "long"];
var ae = ["single", "double"];
var ue = [...se, ...ae];
var fe = ["esriFieldTypeInteger", "esriFieldTypeSmallInteger", "esriFieldTypeLong", "esriFieldTypeBigInteger"];
var ce = ["esriFieldTypeSingle", "esriFieldTypeDouble"];
var de = /* @__PURE__ */ new Set([...se, ...fe]);
var pe = /* @__PURE__ */ new Set([...ae, ...ce]);
var me = u(de, pe);
function ye(e7) {
  return null != e7 && de.has(e7.type);
}
function ge(e7) {
  return null != e7 && me.has(e7.type);
}
function Fe(e7) {
  return null != e7 && ("string" === e7.type || "esriFieldTypeString" === e7.type);
}
function Ie(e7) {
  return null != e7 && ("date" === e7.type || "esriFieldTypeDate" === e7.type);
}
function be(e7) {
  return null != e7 && ("date-only" === e7.type || "esriFieldTypeDateOnly" === e7.type);
}
function we(e7) {
  return null != e7 && ("timestamp-offset" === e7.type || "esriFieldTypeTimestampOffset" === e7.type);
}
function Te(e7) {
  return null != e7 && ("time-only" === e7.type || "esriFieldTypeTimeOnly" === e7.type);
}
function xe(e7) {
  return null != e7 && ("oid" === e7.type || "esriFieldTypeOID" === e7.type);
}
function he(e7) {
  return null != e7 && ("global-id" === e7.type || "esriFieldTypeGlobalID" === e7.type);
}
function _e(e7, n) {
  return null === Se(e7, n);
}
var Ee;
var Ae;
function ve(e7) {
  return null == e7 || "number" == typeof e7 && isNaN(e7) ? null : e7;
}
function Se(e7, n) {
  return null == e7 || e7.nullable && null === n ? null : oe(e7, n) ? ge(e7) && !Ne(e7.type, Number(n)) ? Ee.OUT_OF_RANGE : null : Ae.INVALID_TYPE;
}
function Ne(e7, n) {
  const i2 = "string" == typeof e7 ? Le(e7) : e7;
  if (!i2) return false;
  const t4 = i2.min, r2 = i2.max;
  return i2.isInteger ? Number.isInteger(n) && n >= t4 && n <= r2 : n >= t4 && n <= r2;
}
function Le(e7) {
  switch (e7) {
    case "esriFieldTypeSmallInteger":
    case "small-integer":
      return De;
    case "esriFieldTypeInteger":
    case "esriFieldTypeLong":
    case "integer":
    case "long":
      return Me;
    case "esriFieldTypeBigInteger":
    case "big-integer":
      return Ve;
    case "esriFieldTypeSingle":
    case "single":
      return Re;
    case "esriFieldTypeDouble":
    case "double":
      return je;
  }
}
!function(e7) {
  e7.OUT_OF_RANGE = "numeric-range-validation-error::out-of-range";
}(Ee || (Ee = {})), function(e7) {
  e7.INVALID_TYPE = "type-validation-error::invalid-type";
}(Ae || (Ae = {}));
var De = { min: -32768, max: 32767, isInteger: true, rawMin: -32768, rawMax: 32767 };
var Me = { min: -2147483648, max: 2147483647, isInteger: true, rawMin: -2147483648, rawMax: 2147483647 };
var Ve = { min: -Number.MAX_SAFE_INTEGER, max: Number.MAX_SAFE_INTEGER, isInteger: true, rawMin: -Number.MAX_SAFE_INTEGER, rawMax: Number.MAX_SAFE_INTEGER };
var Re = { min: -34e37, max: 12e37, isInteger: false, rawMin: -34e37, rawMax: 12e37 };
var je = { min: -Number.MAX_VALUE, max: Number.MAX_VALUE, isInteger: false, rawMin: -Number.MAX_VALUE, rawMax: Number.MAX_VALUE };
function Ue(e7, n, i2) {
  switch (e7) {
    case r.INVALID_CODED_VALUE:
      return `Value ${i2} is not in the coded domain - field: ${n.name}, domain: ${JSON.stringify(n.domain)}`;
    case r.VALUE_OUT_OF_RANGE:
      return `Value ${i2} is out of the range of valid values - field: ${n.name}, domain: ${JSON.stringify(n.domain)}`;
    case Ae.INVALID_TYPE:
      return `Value ${i2} is not a valid value for the field type - field: ${n.name}, type: ${n.type}, nullable: ${n.nullable}`;
    case Ee.OUT_OF_RANGE: {
      const { min: e8, max: t4 } = Le(n.type);
      return `Value ${i2} is out of range for the number type - field: ${n.name}, type: ${n.type}, value range is ${e8} to ${t4}`;
    }
  }
}
function ke(e7, n) {
  return !Ce(e7, n, null);
}
function Ce(e7, n, i2) {
  if (!e7?.attributes || !n) {
    if (null != i2) for (const e8 of n ?? []) i2.add(e8);
    return true;
  }
  const t4 = new Set(Object.keys(e7.attributes));
  let r2 = false;
  for (const l3 of n) if (!t4.has(l3)) {
    if (r2 = true, null == i2) break;
    i2.add(l3);
  }
  return r2;
}
function Pe(e7) {
  return !!e7 && ["raster.itempixelvalue", "raster.servicepixelvalue"].some((n) => e7.toLowerCase().startsWith(n));
}
function Xe(e7) {
  const n = e7?.match(/{[^}]+}/g);
  return n ? n.map((e8) => e8.slice(1, -1).split(":")[0].trim()) : [];
}

export {
  f2 as f,
  e6 as e,
  e4 as e2,
  p,
  g,
  I,
  w,
  T,
  x,
  h,
  _,
  E,
  v,
  L,
  D,
  M,
  R,
  j,
  C,
  P,
  W,
  H2 as H,
  Q,
  ee,
  ne,
  ye,
  ge,
  Fe,
  Ie,
  be,
  we,
  Te,
  xe,
  he,
  _e,
  ve,
  Se,
  Ue,
  ke,
  Pe,
  Xe
};
//# sourceMappingURL=chunk-VCRP2PLV.js.map
