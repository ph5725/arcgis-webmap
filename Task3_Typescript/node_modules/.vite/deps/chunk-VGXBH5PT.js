import {
  Xe,
  e2 as e,
  ke
} from "./chunk-VCRP2PLV.js";
import {
  d
} from "./chunk-HPGYEHVI.js";
import {
  V
} from "./chunk-X3R5OB6L.js";
import {
  b,
  m
} from "./chunk-N3XLUQJI.js";
import {
  a2 as a
} from "./chunk-JUAD7TJ6.js";
import {
  r
} from "./chunk-5TPMG26T.js";
import {
  L
} from "./chunk-FXKORAMT.js";

// node_modules/@arcgis/core/layers/support/TitleCreator.js
var d2 = "relationships/";
var p = "expression/";
var u = class extends b {
  constructor(e2) {
    super(e2), this._featureUtils = null, this.effectivePopupTemplate = null;
  }
  get _arcadeTask() {
    if (this.expressionsUsedInTitle.length > 0) {
      return this._get("_arcadeTask") || d(() => e());
    }
    return null;
  }
  get featureUtilsPromise() {
    return this._get("featureUtilsPromise") ?? import("./featureUtils-EQGFFETF.js").then((e2) => this._featureUtils = e2);
  }
  get calculatedExpressions() {
    const e2 = new V();
    if (!this.expressionsUsedInTitle.length) return e2;
    if (!this._arcadeTask?.value) {
      for (const t of this.expressionsUsedInTitle ?? []) e2.push({ name: t.name, invalid: true });
      return e2;
    }
    for (const t of this.expressionsUsedInTitle) try {
      const s = this._arcadeTask.value.arcade.parseScript(t.expression, ["$layer", "$map", "$datastore"]);
      if (s.isAsync) {
        e2.push({ name: t.name, invalid: true });
        break;
      }
      e2.push({ name: t.name, syntax: s, invalid: false, func: this._arcadeTask.value.arcade.compileScript(s, { vars: { $feature: "any" } }) });
    } catch {
      e2.push({ name: t.name, invalid: true });
      break;
    }
    return e2;
  }
  get expressionsUsedInTitle() {
    let e2 = this.effectivePopupTemplate?.title ?? "";
    return "string" != typeof e2 ? [] : (e2 = e2.toLowerCase(), this.effectivePopupTemplate?.expressionInfos?.filter((t) => e2.includes(`{expression/${t.name.toLowerCase()}}`)) ?? []);
  }
  get fieldInfoMap() {
    return this._featureUtils ? this._createFieldInfoMap(this._featureUtils.getAllFieldInfos(this.effectivePopupTemplate)) : null;
  }
  get hasBadExpressions() {
    return this.calculatedExpressions.some((e2) => true === e2.invalid);
  }
  get requiredFields() {
    const e2 = /* @__PURE__ */ new Set();
    if (this._arcadeTask?.value && !this.hasBadExpressions) for (const s of this.calculatedExpressions?.toArray() ?? []) try {
      const t2 = this._arcadeTask.value.arcade.extractFieldLiterals(s.syntax);
      for (const s2 of t2) {
        const t3 = s2.split("."), i = this.fieldsIndex.get(t3.at(-1) ?? "");
        i && e2.add(i.name);
      }
    } catch {
    }
    const t = this._extractFieldNames(this.workingTitle);
    for (const s of t) {
      const t2 = this.fieldsIndex.get(s);
      t2 && e2.add(t2.name);
    }
    return null != this.objectIdField && e2.add(this.objectIdField), e2;
  }
  get titleFromDisplayField() {
    let e2 = "";
    return this.displayField && (e2 = this.fieldsIndex.get(this.displayField)?.name ?? ""), e2 || (e2 = this.fieldsIndex.get(this.objectIdField)?.name ?? ""), e2 ? `{${e2}}` : "";
  }
  get workingTitle() {
    const e2 = this.effectivePopupTemplate ? this.effectivePopupTemplate.title : "";
    return "" === e2 || null == e2 || this.hasBadExpressions || "string" != typeof e2 ? this.titleFromDisplayField : e2;
  }
  async getTitle(e2, t, s) {
    const i = t.getObjectId() ?? t.attributes[e2.objectIdField];
    return (await this.getTitles(e2, [t], s)).get(i) ?? "";
  }
  async getTitles(e2, t, s) {
    const i = /* @__PURE__ */ new Map(), r2 = s?.timeZone ?? "system";
    try {
      const [{ substituteFieldsInLinksAndAttributes: a2 }] = await Promise.all([this.featureUtilsPromise, this._arcadeTask?.promise]);
      s?.fetchMissingFields && (t = await this._checkAndReQueryGraphics(e2, t));
      const { fieldInfoMap: o, workingTitle: l } = this, n = l && o;
      t.forEach((t2) => {
        const s2 = t2.getObjectId() ?? t2.attributes[e2.objectIdField], c = n ? a2({ attributes: t2.attributes, expressionAttributes: null, fieldInfoMap: o, globalAttributes: this._createFormattedAttributes(e2, t2, r2).global, layer: e2, text: l }) : "";
        i.set(s2, c);
      });
    } catch {
    }
    return i;
  }
  async _checkAndReQueryGraphics(e2, t) {
    const i = t.map((t2) => t2.getObjectId() ?? t2.attributes[e2.objectIdField]).filter(L);
    if (i.length !== t.length) return t;
    if (t.some((e3) => !ke(e3, this.requiredFields))) {
      const s = e2.createQuery();
      s.where = "1=1", s.outFields = [...this.requiredFields], s.objectIds = i;
      const r2 = await e2.queryFeatures(s);
      if (r2?.features.length === t.length) return r2.features;
    }
    return t;
  }
  _createFieldInfoMap(e2) {
    const t = /* @__PURE__ */ new Map();
    if (!e2) return t;
    for (const s of e2) {
      if (!s.fieldName) continue;
      const e3 = this.fieldsIndex.get(s.fieldName), i = e3?.name ?? s.fieldName;
      s.fieldName = i, t.set(i.toLowerCase(), s);
    }
    return t;
  }
  _createFormattedAttributes(e2, t, s = "system") {
    const i = this.effectivePopupTemplate?.fieldInfos ?? [], r2 = {};
    if (!this._featureUtils) return {};
    if (!this.hasBadExpressions && this.calculatedExpressions.length > 0 && this._arcadeTask?.value) {
      const s2 = this._arcadeTask.value.Feature.createFromGraphicLikeObject(t.geometry, t.attributes, e2, null);
      for (const e3 of this.calculatedExpressions) try {
        r2[`expression/${e3.name}`] = e3.func({ vars: { $feature: s2 } });
      } catch {
      }
    }
    const a2 = { ...t.attributes, ...r2 };
    return { global: this._featureUtils.formatAttributes({ fieldInfos: i, attributes: a2, graphic: t, timeZone: s, layer: e2, fieldInfoMap: this.fieldInfoMap }), content: [] };
  }
  _extractFieldNames(e2) {
    return Xe(e2).filter((e3) => !(0 === e3.indexOf(d2) || 0 === e3.indexOf(p)));
  }
};
r([m({ readOnly: true })], u.prototype, "_arcadeTask", null), r([m()], u.prototype, "_featureUtils", void 0), r([m({ readOnly: true })], u.prototype, "featureUtilsPromise", null), r([m({ readOnly: true })], u.prototype, "calculatedExpressions", null), r([m()], u.prototype, "displayField", void 0), r([m()], u.prototype, "effectivePopupTemplate", void 0), r([m()], u.prototype, "expressionsUsedInTitle", null), r([m()], u.prototype, "fieldsIndex", void 0), r([m()], u.prototype, "fieldInfoMap", null), r([m()], u.prototype, "fields", void 0), r([m()], u.prototype, "objectIdField", void 0), r([m()], u.prototype, "requiredFields", null), u = r([a("esri.layers.support.TitleCreator")], u);

export {
  u
};
//# sourceMappingURL=chunk-VGXBH5PT.js.map
