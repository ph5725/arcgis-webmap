import {
  u
} from "./chunk-S7IJH524.js";
import {
  i2 as i
} from "./chunk-XWG6QGFK.js";

// node_modules/@arcgis/core/core/accessorSupport/ensureType.js
var r = () => i.getLogger("esri.core.accessorSupport.ensureTypes");
function t(e) {
  if (null == e) return e;
  const n = new Date(e);
  return isNaN(n.getTime()) ? (r().error("Accessor#set", `Invalid date value: '${e}', falling back to current date`), /* @__PURE__ */ new Date()) : n;
}
function o(e) {
  return null == e ? e : !!e;
}
function u2(e) {
  return null == e ? e : e.toString();
}
function a(e, n = 0) {
  return null == e ? e : (e = parseFloat(e), isNaN(e) ? n : e);
}
function s(e) {
  return null == e ? e : Math.round(parseFloat(e));
}
function l(e) {
  return null;
}
function i2(e, n) {
  return (r2) => {
    let t2 = e(r2);
    return null != n.step && (t2 = Math.round(t2 / n.step) * n.step), null != n.min && (t2 = Math.max(n.min, t2)), null != n.max && (t2 = Math.min(n.max, t2)), t2;
  };
}
function c(e) {
  return e?.constructor && void 0 !== e.constructor.__accessorMetadata__;
}
function f(e, n) {
  return null != n && e && !(n instanceof e);
}
function p(e) {
  return e && "isCollection" in e;
}
function y(e) {
  return e?.Type ? "function" == typeof e.Type ? e.Type : e.Type.base : null;
}
function v(e, n) {
  if (!n?.constructor || !p(n.constructor)) return g(e, n) ? n : new e(n);
  const r2 = y(e.prototype.itemType), t2 = y(n.constructor.prototype.itemType);
  return r2 ? t2 ? r2 === t2 ? n : r2.prototype.isPrototypeOf(t2.prototype) ? new e(n) : (g(e, n), n) : new e(n) : n;
}
function g(e, n) {
  return !!c(n) && (r().error("Accessor#set", "Assigning an instance of '" + (n.declaredClass || "unknown") + "' which is not a subclass of '" + h(e) + "'"), true);
}
function m(e, n) {
  return null == n ? n : p(e) ? v(e, n) : f(e, n) ? g(e, n) ? n : new e(n) : n;
}
function h(e) {
  return e?.prototype?.declaredClass || "unknown";
}
var d = /* @__PURE__ */ new WeakMap();
function b(e) {
  switch (e) {
    case Number:
      return (e2) => a(e2);
    case x:
      return s;
    case Boolean:
      return o;
    case String:
      return u2;
    case Date:
      return t;
    case D:
      return l;
    default:
      return u(d, e, () => m.bind(null, e));
  }
}
function w(e, n) {
  const r2 = b(e);
  return 1 === arguments.length ? r2 : r2(n);
}
function A(e, n, r2) {
  return 1 === arguments.length ? A.bind(null, e) : n ? Array.isArray(n) ? n.map((n2) => e(n2, r2)) : [e(n, r2)] : n;
}
function $(e, n) {
  return 1 === arguments.length ? A((n2) => w(e, n2)) : A((n2) => w(e, n2), n);
}
function j(e, n, r2) {
  return 0 !== n && Array.isArray(r2) ? r2.map((r3) => j(e, n - 1, r3)) : e(r2);
}
function k(e, n, r2) {
  if (2 === arguments.length) return (r3) => k(e, n, r3);
  if (!r2) return r2;
  r2 = j(e, n, r2);
  let t2 = n, o2 = r2;
  for (; t2 > 0 && Array.isArray(o2); ) t2--, o2 = o2[0];
  if (void 0 !== o2) for (let u3 = 0; u3 < t2; u3++) r2 = [r2];
  return r2;
}
function M(e, n, r2) {
  return 2 === arguments.length ? k((n2) => w(e, n2), n) : k((n2) => w(e, n2), n, r2);
}
function N(e) {
  return !!Array.isArray(e) && !e.some((n) => {
    const r2 = typeof n;
    return !("string" === r2 || "number" === r2 || "function" === r2 && e.length > 1);
  });
}
function T(e, n) {
  if (2 === arguments.length) return T(e).call(null, n);
  const t2 = /* @__PURE__ */ new Set(), o2 = e.filter((e2) => "function" != typeof e2), u3 = e.filter((e2) => "function" == typeof e2);
  for (const r2 of e) "string" != typeof r2 && "number" != typeof r2 || t2.add(r2);
  let a2 = null, s2 = null;
  return (e2, n2) => {
    if (null == e2) return e2;
    const l2 = typeof e2, i3 = "string" === l2 || "number" === l2;
    return i3 && (t2.has(e2) || u3.some((e3) => "string" === l2 && e3 === String || "number" === l2 && e3 === Number)) || "object" === l2 && u3.some((n3) => !f(e2, n3)) ? e2 : (i3 && o2.length ? (a2 || (a2 = o2.map((e3) => "string" == typeof e3 ? `'${e3}'` : `${e3}`).join(", ")), r().error("Accessor#set", `'${e2}' is not a valid value for this property, only the following values are valid: ${a2}`)) : "object" == typeof e2 && u3.length ? (s2 || (s2 = u3.map((e3) => h(e3)).join(", ")), r().error("Accessor#set", `'${e2}' is not a valid value for this property, value must be one of ${s2}`)) : r().error("Accessor#set", `'${e2}' is not a valid value for this property`), n2 && (n2.valid = false), null);
  };
}
function S(e, n) {
  if (2 === arguments.length) return S(e).call(null, n);
  const t2 = {}, o2 = [], u3 = [];
  for (const r2 in e.typeMap) {
    const n2 = e.typeMap[r2];
    t2[r2] = w(n2), o2.push(h(n2)), u3.push(r2);
  }
  const a2 = () => `'${o2.join("', '")}'`, s2 = () => `'${u3.join("', '")}'`, l2 = "string" == typeof e.key ? (n2) => n2[e.key] : e.key;
  return (n2) => {
    if (e.base && !f(e.base, n2)) return n2;
    if (null == n2) return n2;
    const o3 = l2(n2) || e.defaultKeyValue, u4 = t2[o3];
    if (!u4) return r().error("Accessor#set", `Invalid property value, value needs to be one of ${a2()}, or a plain object that can autocast (having .type = ${s2()})`), null;
    if (!f(e.typeMap[o3], n2)) return n2;
    if ("string" == typeof e.key && !c(n2)) {
      const r2 = {};
      for (const t3 in n2) t3 !== e.key && (r2[t3] = n2[t3]);
      return u4(r2);
    }
    return u4(n2);
  };
}
var x = class {
};
var D = class {
};
var _ = { native: (e) => ({ type: "native", value: e }), array: (e) => ({ type: "array", value: e }), oneOf: (e) => ({ type: "one-of", values: e }) };
function B(e) {
  if (!e || !("type" in e)) return false;
  switch (e.type) {
    case "native":
    case "array":
    case "one-of":
      return true;
  }
  return false;
}
function C(e) {
  switch (e.type) {
    case "native":
      return w(e.value);
    case "array":
      return A(C(e.value));
    case "one-of":
      return I(e);
    default:
      return null;
  }
}
function I(e) {
  let n = null;
  return (t2, o2) => L(t2, e) ? t2 : (null == n && (n = F(e)), r().error("Accessor#set", `Invalid property value, value needs to be of type ${n}`), o2 && (o2.valid = false), null);
}
function F(e) {
  switch (e.type) {
    case "native":
      switch (e.value) {
        case Number:
          return "number";
        case String:
          return "string";
        case Boolean:
          return "boolean";
        case x:
          return "integer";
        case Date:
          return "date";
        case D:
          return "null";
        default:
          return h(e.value);
      }
    case "array":
      return `array of ${F(e.value)}`;
    case "one-of": {
      const n = e.values.map((e2) => F(e2));
      return `one of ${n.slice(0, -1)} or ${n[n.length - 1]}`;
    }
  }
  return "unknown";
}
function L(e, n) {
  if (null == e) return true;
  switch (n.type) {
    case "native":
      switch (n.value) {
        case Number:
        case x:
          return "number" == typeof e;
        case Boolean:
          return "boolean" == typeof e;
        case String:
          return "string" == typeof e;
        case D:
          return null === e;
      }
      return e instanceof n.value;
    case "array":
      return !!Array.isArray(e) && !e.some((e2) => !L(e2, n.value));
    case "one-of":
      return n.values.some((n2) => L(e, n2));
  }
}

export {
  u2 as u,
  a,
  s,
  i2 as i,
  m,
  w,
  A,
  $,
  k,
  M,
  N,
  T,
  S,
  x,
  D,
  _,
  B,
  C
};
//# sourceMappingURL=chunk-VHLUKPRH.js.map
