import {
  n
} from "./chunk-7Z3AF3B2.js";
import {
  d
} from "./chunk-OXSERRAR.js";
import {
  h
} from "./chunk-FXKORAMT.js";

// node_modules/@arcgis/core/geometry/support/coordsUtils.js
function e(n2) {
  if (!n2) return null;
  if (Array.isArray(n2)) return n2;
  const t = n2.hasZ, r = n2.hasM;
  if ("point" === n2.type) return r && t ? [n2.x, n2.y, n2.z, n2.m] : t ? [n2.x, n2.y, n2.z] : r ? [n2.x, n2.y, n2.m] : [n2.x, n2.y];
  if ("polygon" === n2.type) return n2.rings.slice();
  if ("polyline" === n2.type) return n2.paths.slice();
  if ("multipoint" === n2.type) return n2.points.slice();
  if ("extent" === n2.type) {
    const t2 = n2.clone().normalize();
    if (!t2) return null;
    let r2 = false, e2 = false;
    return t2.forEach((n3) => {
      n3.hasZ && (r2 = true), n3.hasM && (e2 = true);
    }), t2.map((n3) => {
      const t3 = [[n3.xmin, n3.ymin], [n3.xmin, n3.ymax], [n3.xmax, n3.ymax], [n3.xmax, n3.ymin], [n3.xmin, n3.ymin]];
      if (r2 && n3.hasZ) {
        const r3 = 0.5 * (n3.zmax - n3.zmin);
        for (let n4 = 0; n4 < t3.length; n4++) t3[n4].push(r3);
      }
      if (e2 && n3.hasM) {
        const r3 = 0.5 * (n3.mmax - n3.mmin);
        for (let n4 = 0; n4 < t3.length; n4++) t3[n4].push(r3);
      }
      return t3;
    });
  }
  return null;
}
function i(n2, t) {
  const r = t[0] - n2[0], e2 = t[1] - n2[1];
  if (n2.length > 2 && t.length > 2) {
    const i2 = n2[2] - t[2];
    return Math.sqrt(r * r + e2 * e2 + i2 * i2);
  }
  return Math.sqrt(r * r + e2 * e2);
}
function o(n2, t, r) {
  const e2 = n2[0] + r * (t[0] - n2[0]), i2 = n2[1] + r * (t[1] - n2[1]);
  return n2.length > 2 && t.length > 2 ? [e2, i2, n2[2] + r * (t[2] - n2[2])] : [e2, i2];
}
function s(n2, t, r, e2) {
  return f(n2, t, r[e2], r[e2 + 1]);
}
function f(n2, t, r, e2) {
  const [i2, o2] = t, [s2, f2] = r, [u, l2] = e2, c2 = u - s2, h3 = l2 - f2, p2 = c2 * c2 + h3 * h3, a2 = (i2 - s2) * c2 + (o2 - f2) * h3, y2 = Math.min(1, Math.max(0, a2 / p2));
  return n2[0] = s2 + c2 * y2, n2[1] = f2 + h3 * y2, n2;
}
function l(n2, t, r, e2, i2, o2) {
  let s2 = r, f2 = e2, u = i2 - s2, l2 = o2 - f2;
  if (0 !== u || 0 !== l2) {
    const r2 = ((n2 - s2) * u + (t - f2) * l2) / (u * u + l2 * l2);
    r2 > 1 ? (s2 = i2, f2 = o2) : r2 > 0 && (s2 += u * r2, f2 += l2 * r2);
  }
  return u = n2 - s2, l2 = t - f2, u * u + l2 * l2;
}
function c(n2, t) {
  return o(n2, t, 0.5);
}
function h2(n2) {
  const t = n2.length;
  let r = 0;
  for (let e2 = 0; e2 < t - 1; ++e2) r += i(n2[e2], n2[e2 + 1]);
  return r;
}
function p(n2, t) {
  if (t <= 0) return n2[0];
  const r = n2.length;
  let e2 = 0;
  for (let s2 = 0; s2 < r - 1; ++s2) {
    const r2 = i(n2[s2], n2[s2 + 1]);
    if (t - e2 < r2) {
      const i2 = (t - e2) / r2;
      return o(n2[s2], n2[s2 + 1], i2);
    }
    e2 += r2;
  }
  return n2[r - 1];
}
function a(n2, r = n.X, e2 = n.Y) {
  let i2 = 0;
  const o2 = n2.length;
  let s2 = n2[0];
  for (let t = 1; t < o2; t++) {
    const o3 = n2[t];
    i2 += (o3[r] - s2[r]) * (o3[e2] + s2[e2]), s2 = o3;
  }
  if (y(n2)) {
    const t = n2[0];
    i2 += (t[r] - s2[r]) * (t[e2] + s2[e2]);
  }
  return i2 >= 0;
}
function y(t) {
  const r = t.length;
  return r > 0 && !h(t[0], t[r - 1]);
}
function m(n2) {
  "rings" in n2 && (g(n2), x(n2));
}
function g(n2) {
  if ("rings" in n2) for (const t of n2.rings) y(t) && t.push(t[0].slice());
}
function x(n2) {
  if (!("rings" in n2)) return false;
  if (0 === n2.rings.length || a(n2.rings[0])) return false;
  for (const t of n2.rings) t.reverse();
  return true;
}
function M(n2) {
  if ("polygon" !== n2.type && "polyline" !== n2.type) return n2;
  return z("polygon" === n2.type ? n2.rings : n2.paths, n2.spatialReference), n2;
}
function z(n2, t) {
  const e2 = d(t);
  if (!e2) return;
  const i2 = e2.valid[0], o2 = e2.valid[1], s2 = o2 - i2;
  for (const r of n2) {
    let n3 = 1 / 0, t2 = -1 / 0;
    for (const s3 of r) {
      const r2 = v(s3[0], i2, o2);
      n3 = Math.min(n3, r2), t2 = Math.max(t2, r2), s3[0] = r2;
    }
    const e3 = t2 - n3;
    s2 - e3 < e3 && r.forEach((n4) => {
      n4[0] < 0 && (n4[0] += s2);
    });
  }
}
function v(n2, t, r) {
  const e2 = r - t;
  return n2 < t ? r - (t - n2) % e2 : n2 > r ? t + (n2 - t) % e2 : n2;
}
function j(n2, t) {
  if (n2 === t) return true;
  if (n2.type !== t.type) return false;
  if ("point" === n2.type || "mesh" === n2.type || "extent" === n2.type) return true;
  if ("multipoint" === n2.type) return n2.points.length === t.points.length;
  const [r, e2] = "polyline" === n2.type ? [n2.paths, t.paths] : [n2.rings, t.rings];
  return r.length === e2.length && r.every((n3, t2) => n3.length === e2[t2].length);
}

export {
  e,
  i,
  s,
  f,
  l,
  c,
  h2 as h,
  p,
  a,
  m,
  g,
  M,
  z,
  j
};
//# sourceMappingURL=chunk-VNTEV3V4.js.map
