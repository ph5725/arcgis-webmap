import {
  r
} from "./chunk-GULEPNE6.js";
import {
  l
} from "./chunk-KE3WBZYL.js";
import {
  L
} from "./chunk-FXKORAMT.js";

// node_modules/@arcgis/core/widgets/Legend/support/colorRampUtils.js
var r2 = new l([64, 64, 64]);
function n(l2, e) {
  const r3 = [], n2 = l2.length - 1;
  return 5 === l2.length ? r3.push(0, 2, 4) : r3.push(0, n2), l2.map((l3, t2) => r3.includes(t2) ? r(l3, t2, n2, e) : null);
}
async function t(l2, o, r3) {
  let t2 = false, u2 = [], s2 = [];
  if (l2.stops) {
    const e = l2.stops;
    u2 = e.map((l3) => l3.value), t2 = e.some((l3) => !!l3.label), t2 && (s2 = e.map((l3) => l3.label));
  }
  const i2 = u2[0], c2 = u2[u2.length - 1];
  if (null == i2 && null == c2) return null;
  const p = t2 ? null : n(u2, r3);
  return (await Promise.all(u2.map(async (e, r4) => {
    const n2 = "opacity" === l2.type ? await a(e, l2, o) : (await import("./visualVariableUtils-YHLE7DFA.js")).getColor(l2, e), u3 = t2 ? s2[r4] : p?.[r4] ?? "";
    return null == n2 ? null : { value: e, color: n2, label: u3 };
  }))).filter(L).reverse();
}
async function a(e, o, n2) {
  const t2 = new l(n2 ?? r2), a2 = (await import("./visualVariableUtils-YHLE7DFA.js")).getOpacity(o, e);
  return null != a2 && (t2.a = a2), t2;
}
function u(l2) {
  let e = false, o = [], r3 = [];
  o = l2.map((l3) => l3.value), e = l2.some((l3) => !!l3.label), e && (r3 = l2.map((l3) => l3.label ?? ""));
  const t2 = o[0], a2 = o[o.length - 1];
  if (null == t2 && null == a2) return null;
  const u2 = e ? null : n(o);
  return o.map((o2, n2) => ({ value: o2, color: s(o2, l2), label: e ? r3[n2] : u2?.[n2] ?? "" })).reverse();
}
function s(e, o) {
  const { startIndex: r3, endIndex: n2, weight: t2 } = i(e, o);
  if (r3 === n2) return o[r3].color;
  const a2 = l.blendColors(o[r3].color, o[n2].color, t2);
  return new l(a2);
}
function i(l2, e) {
  let o = 0, r3 = e.length - 1;
  return e.some((e2, n2) => l2 < e2.value ? (r3 = n2, true) : (o = n2, false)), { startIndex: o, endIndex: r3, weight: (l2 - e[o].value) / (e[r3].value - e[o].value) };
}
function c(e, o) {
  let r3 = [];
  if (e && "multipart" === e.type) e.colorRamps.reverse().forEach((n2, t2) => {
    0 === t2 ? r3.push({ value: o.max, color: new l(n2.toColor), label: "high" }) : r3.push({ value: null, color: new l(n2.toColor), label: "" }), t2 === e.colorRamps.length - 1 ? r3.push({ value: o.min, color: new l(n2.fromColor), label: "low" }) : r3.push({ value: null, color: new l(n2.fromColor), label: "" });
  });
  else {
    let n2, t2;
    e && "algorithmic" === e.type ? (n2 = e.fromColor, t2 = e.toColor) : (n2 = [0, 0, 0, 1], t2 = [255, 255, 255, 1]), r3 = [{ value: o.max, color: new l(t2), label: "high" }, { value: o.min, color: new l(n2), label: "low" }];
  }
  return r3;
}

export {
  t,
  u,
  s,
  c
};
//# sourceMappingURL=chunk-VQ6WKTQP.js.map
