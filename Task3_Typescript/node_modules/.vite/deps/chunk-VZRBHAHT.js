import {
  h
} from "./chunk-YIXK32VF.js";
import {
  s
} from "./chunk-NO2XQDLB.js";
import {
  l
} from "./chunk-A3VAC24F.js";
import {
  b,
  m
} from "./chunk-N3XLUQJI.js";
import {
  a2 as a
} from "./chunk-JUAD7TJ6.js";
import {
  r
} from "./chunk-5TPMG26T.js";
import {
  has
} from "./chunk-FXKORAMT.js";

// node_modules/@arcgis/core/views/2d/engine/webgl/animations/instructions.js
var t;
!function(t3) {
  t3.Local = "Local", t3.Global = "Global";
}(t || (t = {}));
var o = class {
  generateSource(t3) {
    const o3 = [];
    for (let a3 = 1; a3 < this.length; a3++) o3.push(`vec4 atom${a3} = texture(${t3.animationTexture}, (pointer + 0.5) / size);`), o3.push("pointer.x += 1.0;");
    for (let a3 = 0; a3 < this.ins; a3++) o3.push("top--;"), o3.push(`vec4 in${this.ins - a3 - 1} = stack[top];`);
    for (let a3 = 0; a3 < this.outs; a3++) o3.push(`vec4 out${a3};`);
    const { microcode: e4 } = this;
    for (const a3 of e4) o3.push(a3);
    for (let a3 = 0; a3 < this.outs; a3++) o3.push(`stack[top] = out${a3};`), o3.push("top++;"), o3.push(`if (top >= ${x}) { top = ${x - 1}; }`);
    return o3;
  }
};
var e = 128;
var a2 = class extends o {
  constructor() {
    super(...arguments), this.opcode = ++e, this.length = 1, this.ins = 0, this.outs = 0, this.microcode = ["break;"];
  }
  encode() {
    return [[this.opcode, 0, 0, 0]];
  }
};
var i = class extends o {
  constructor() {
    super(...arguments), this.opcode = ++e, this.length = 1, this.ins = 0, this.outs = 1, this.microcode = ["out0 = vec4(atom0.y, atom0.y, atom0.y, atom0.y);"];
  }
  encode(t3) {
    return [[this.opcode, t3, 0, 0]];
  }
};
var n = class extends o {
  constructor() {
    super(...arguments), this.opcode = ++e, this.length = 1, this.ins = 0, this.outs = 1, this.microcode = ["out0 = vec4(atom0.yzw, 0.0);"];
  }
  encode(t3) {
    return [[this.opcode, t3[0] || 0, t3[1] || 0, t3[2] || 0]];
  }
};
var r2 = class extends o {
  constructor() {
    super(...arguments), this.opcode = ++e, this.length = 2, this.ins = 0, this.outs = 1, this.microcode = ["out0 = atom1;"];
  }
  encode(t3) {
    return [[this.opcode, 0, 0, 0], t3];
  }
};
function s2(t3) {
  return [`float duration = clamp(${t3.duration}, 0.05, 3600.0);`, `float startTimeOffset = ${t3.startTimeOffset};`, `float repeatDelay = ${t3.repeatDelay};`, `float timeOriginSelector = ${t3.timeOriginSelector};`, `float repeatType = ${t3.repeatType};`, `float easing = ${t3.easing};`, `float playAnimation = ${t3.playAnimation} * (1.0 - step(0.0, -${t3.duration}));`, `float reverseAnimation = ${t3.reverseAnimation};`, "float time = globalTime - (timeOriginSelector == 1.0 ? localTimeOrigin : 0.0);", "time *= playAnimation;", "time *= 1.0 - reverseAnimation * 2.0;", "float period = duration + repeatDelay;", "time += reverseAnimation == 1.0 ? (period - startTimeOffset - 0.001) : startTimeOffset + 0.001;", "float omega = time / period;", "float oi = floor(omega);", "omega = repeatType == 1.0 || repeatType == 3.0 ? omega - oi : omega;", "float of = omega * period;", "of = (clamp(of, reverseAnimation * repeatDelay, period - (1.0 - reverseAnimation) * repeatDelay) - reverseAnimation * repeatDelay) / duration;", "of = easing == 2.0 ? pow(of, 3.0) : of;", "of = easing == 3.0 ? 1.0 - pow(1.0 - of, 3.0) : of;", "of = easing == 4.0 ? of < 0.5 ? 4.0 * pow(of, 3.0) : 1.0 - pow(-2.0 * of + 2.0, 3.0) / 2.0 : of;", "bool oscillate = repeatType == 3.0 && mod(oi, 2.0) == 1.0;", `${t3.out} = oscillate ? 1.0 - of : of;`];
}
var l2 = { Linear: 1, EaseIn: 2, EaseOut: 3, EaseInOut: 4 };
var m2 = { Loop: 1, None: 2, Oscillate: 3 };
var c = { Local: 1, Global: 2 };
function f(t3) {
  const o3 = l2[t3.easing], e4 = m2[t3.repeatType], a3 = c[t3.timeOriginSelector];
  return [[t3.duration, t3.startTimeOffset, t3.repeatDelay, a3], [e4, o3, t3.playAnimation, t3.reverseAnimation]];
}
var p = class extends o {
  constructor() {
    super(...arguments), this.opcode = ++e, this.length = 10, this.ins = 1, this.outs = 1, this.microcode = ["vec2 fromTranslation = atom1.xy;", "vec2 toTranslation = atom1.zw;", "float fromRotation = atom2.x;", "float toRotation = atom2.y;", "float fromScale = atom2.z;", "float toScale = atom2.w;", "bool relativeTranslation = atom9.x == 1.0;", "bool absoluteScale = atom9.y == 1.0;", "vec2 translationMultiplier = relativeTranslation ? pixelDimensions : vec2(1.0, 1.0);", "float scaleDivisor = absoluteScale ? pixelDimensions.y : 1.0;", "float fTranslation;", "{", ...s2({ duration: "atom3.x", startTimeOffset: "atom3.y", repeatDelay: "atom3.z", timeOriginSelector: "atom3.w", repeatType: "atom4.x", easing: "atom4.y", playAnimation: "atom4.z", reverseAnimation: "atom4.w", out: "fTranslation" }), "}", "float fRotation;", "{", ...s2({ duration: "atom5.x", startTimeOffset: "atom5.y", repeatDelay: "atom5.z", timeOriginSelector: "atom5.w", repeatType: "atom6.x", easing: "atom6.y", playAnimation: "atom6.z", reverseAnimation: "atom6.w", out: "fRotation" }), "}", "float fScale;", "{", ...s2({ duration: "atom7.x", startTimeOffset: "atom7.y", repeatDelay: "atom7.z", timeOriginSelector: "atom7.w", repeatType: "atom8.x", easing: "atom8.y", playAnimation: "atom8.z", reverseAnimation: "atom8.w", out: "fScale" }), "}", "vec2 aTranslation = mix(fromTranslation, toTranslation, fTranslation);", "float aRotation = mix(fromRotation, toRotation, fRotation);", "float aScale = mix(fromScale, toScale, fScale);", "vec2 pTranslation = in0.xy;", "float pRotation = in0.z;", "float pScale = in0.w;", "aTranslation *= translationMultiplier;", "aScale /= scaleDivisor;", "float rotation = pRotation + aRotation;", "float scale = pScale * aScale;", "float sin1 = sin(pRotation);", "float cos1 = cos(pRotation);", "float s1 = pScale;", "float x1 = pTranslation.x;", "float y1 = pTranslation.y;", "float x2 = aTranslation.x;", "float y2 = aTranslation.y;", "\n    vec2 translation = vec2(\n      cos1 * s1 * x2 - sin1 * s1 * y2 + x1,\n      sin1 * s1 * x2 + cos1 * s1 * y2 + y1\n    );\n    ", "out0 = vec4(translation, rotation, scale);"];
  }
  encode(t3) {
    return [[this.opcode, 0, 0, 0], [t3.translation.from[0], t3.translation.from[1], t3.translation.to[0], t3.translation.to[1]], [t3.rotation.from, t3.rotation.to, t3.scale.from, t3.scale.to], ...f(t3.translation.timing), ...f(t3.rotation.timing), ...f(t3.scale.timing), [t3.relativeTranslation ? 1 : 0, t3.absoluteScale ? 1 : 0, 0, 0]];
  }
};
var u = class extends o {
  constructor() {
    super(...arguments), this.opcode = ++e, this.length = 7, this.ins = 1, this.outs = 1, this.microcode = ["float fromOpacity = atom0.y;", "float toOpacity = atom0.z;", "vec4 fromColor = atom1;", "vec4 toColor = atom2;", "float fColor;", "{", ...s2({ duration: "atom3.x", startTimeOffset: "atom3.y", repeatDelay: "atom3.z", timeOriginSelector: "atom3.w", repeatType: "atom4.x", easing: "atom4.y", playAnimation: "atom4.z", reverseAnimation: "atom4.w", out: "fColor" }), "}", "float fOpacity;", "{", ...s2({ duration: "atom5.x", startTimeOffset: "atom5.y", repeatDelay: "atom5.z", timeOriginSelector: "atom5.w", repeatType: "atom6.x", easing: "atom6.y", playAnimation: "atom6.z", reverseAnimation: "atom6.w", out: "fOpacity" }), "}", "vec4 aColor = mix(fromColor, toColor, fColor);", "aColor.a *= mix(fromOpacity, toOpacity, fOpacity);", "vec4 pColor = in0;", "out0 = aColor * pColor;"];
  }
  encode(t3) {
    return [[this.opcode, t3.opacity.from, t3.opacity.to, 0], [t3.color.from[0], t3.color.from[1], t3.color.from[2], t3.color.from[3]], [t3.color.to[0], t3.color.to[1], t3.color.to[2], t3.color.to[3]], ...f(t3.color.timing), ...f(t3.opacity.timing)];
  }
};
var h2 = class extends o {
  constructor() {
    super(...arguments), this.opcode = ++e, this.length = 4, this.ins = 1, this.outs = 1, this.microcode = ["float fromShift = atom0.y;", "float toShift = atom0.z;", "float duration = atom1.x;", "bool multiplyByLineLength = atom3.x == 1.0;", "float fShift;", "{", ...s2({ duration: "duration", startTimeOffset: "atom1.y", repeatDelay: "atom1.z", timeOriginSelector: "atom1.w", repeatType: "atom2.x", easing: "atom2.y", playAnimation: "atom2.z", reverseAnimation: "atom2.w", out: "fShift" }), "}", "toShift *= multiplyByLineLength ? lineLength : 1.0;", "float aShift = mix(fromShift, toShift, fShift);", "vec4 pShift = in0;", "out0 = mod(aShift + pShift, lineLength);"];
  }
  encode(t3) {
    return [[this.opcode, t3.shift.from, t3.shift.to, 0], ...f(t3.shift.timing), [t3.multiplyByLineLength ? 1 : 0, 0, 0, 0]];
  }
};
var y = { scalar: new i(), vector3: new n(), vector4: new r2(), animatedTransform: new p(), animatedColor: new u(), animatedShift: new h2(), ret: new a2() };
var d = 40;
var x = 4;
function g(t3) {
  const o3 = [];
  o3.push(`float globalTime = ${t3.globalTime};`), o3.push(`float localTimeOrigin = ${t3.localTimeOrigin};`), o3.push(`float lineLength = ${t3.lineLength};`), o3.push(`vec2 pointer = ${t3.animationPointer};`), o3.push(`vec2 size = ${t3.animationTextureSize};`), o3.push("int top = 0;"), o3.push(`vec4 stack[${x}];`), o3.push(`for (int counter = 0; counter < ${d}; counter++) {`), o3.push(`vec4 atom0 = texture(${t3.animationTexture}, (pointer + 0.5) / size);`), o3.push("pointer.x += 1.0;"), o3.push(`vec2 pixelDimensions = ${t3.pixelDimensions};`), o3.push("if (false) {");
  for (const e4 in y) {
    const a3 = y[e4];
    o3.push(`} else if (int(atom0.x) == ${a3.opcode}) {`);
    for (const e5 of a3.generateSource(t3)) o3.push(e5);
  }
  return o3.push("} // End if-else."), o3.push("} // End for."), o3.push(`${t3.out} = top > 0 ? stack[top - 1] : vec4(0.0);`), o3.join("\n");
}

// node_modules/@arcgis/core/views/2d/engine/webgl/shaderGraph/techniques/markers/markerConstants.js
var o2 = { bitset: { isSDF: 0, isMapAligned: 1, scaleSymbolsProportionally: 2, overrideOutlineColor: 3, colorLocked: 4, isStroke: 5 } };

// node_modules/@arcgis/core/views/2d/engine/webgl/shaderGraph/techniques/fill/gradientFillConstants.js
var r3 = { linear: 0, rectangular: 1, circular: 2 };
var e2 = { isAbsolute: 0, isDiscrete: 1 };

// node_modules/@arcgis/core/views/2d/engine/webgl/shaderGraph/techniques/line/gradientStrokeConstants.js
var e3 = { isAlongLine: 0, isAbsoluteSize: 1, isDiscrete: 2 };

// node_modules/@arcgis/core/views/2d/layers/support/UpdateTracking2D.js
var d2 = class extends b {
  constructor(t3) {
    super(t3), this.debugName = "", this._updatingHandles = new h(), this._idToUpdatingState = new s();
  }
  get updating() {
    const t3 = this._updatingHandles.updating || Array.from(this._idToUpdatingState.values()).some((t4) => t4);
    if (has("esri-2d-log-updating")) {
      const r4 = Array.from(this._idToUpdatingState.entries()).map(([t4, r5]) => `-> ${t4}: ${r5}`).join("\n");
      console.log(`${this.debugName}: Updating: ${t3}
-> Handles: ${this._updatingHandles.updating}
${r4}`);
    }
    return t3;
  }
  addUpdateTracking(t3, r4) {
    const s4 = l(() => r4.updating, (r5) => this._idToUpdatingState.set(t3, r5), { sync: true });
    this.addHandles(s4);
  }
  addPromise(t3) {
    return this._updatingHandles.addPromise(t3);
  }
};
r([m({ constructOnly: true })], d2.prototype, "debugName", void 0), r([m({ readOnly: true })], d2.prototype, "updating", null), d2 = r([a("esri.views.2d.layers.support.UpdateTracking2D")], d2);

// node_modules/@arcgis/core/views/2d/engine/webgl/DisplayId.js
var n2 = 8388607;
var t2 = 8388608;
var f2 = (t3) => t3 & n2;
function s3(n3, r4) {
  return ((r4 ? t2 : 0) | n3) >>> 0;
}

export {
  o2 as o,
  t,
  y,
  g,
  r3 as r,
  e2 as e,
  e3 as e2,
  n2 as n,
  f2 as f,
  s3 as s,
  d2 as d
};
//# sourceMappingURL=chunk-VZRBHAHT.js.map
