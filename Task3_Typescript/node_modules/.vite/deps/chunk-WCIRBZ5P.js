import {
  v
} from "./chunk-CAZNHUEV.js";
import {
  L,
  sn
} from "./chunk-7NMH5MM5.js";
import {
  V
} from "./chunk-X3R5OB6L.js";
import {
  P
} from "./chunk-52HWRRRQ.js";
import {
  r as r2
} from "./chunk-YFPGM5UE.js";
import {
  l
} from "./chunk-E3KEUGUG.js";
import {
  m
} from "./chunk-N3XLUQJI.js";
import {
  a2,
  s
} from "./chunk-JUAD7TJ6.js";
import {
  r
} from "./chunk-5TPMG26T.js";
import {
  H
} from "./chunk-ZWFY3WY5.js";
import {
  I
} from "./chunk-LQFTAGIV.js";
import {
  a
} from "./chunk-GWNLQRNM.js";

// node_modules/@arcgis/core/layers/support/SceneModification.js
var m2;
var f = m2 = class extends l {
  constructor(e) {
    super(e), this.geometry = null, this.type = "clip";
  }
  writeGeometry(e, r3, o, s2) {
    if (s2.layer?.spatialReference && !s2.layer.spatialReference.equals(this.geometry.spatialReference)) {
      if (!L(e.spatialReference, s2.layer.spatialReference)) return void (s2?.messages && s2.messages.push(new s("scenemodification:unsupported", "Scene modifications with incompatible spatial references are not supported", { modification: this, spatialReference: s2.layer.spatialReference, context: s2 })));
      const p = new P();
      sn(e, p, s2.layer.spatialReference), r3[o] = p.toJSON(s2);
    } else r3[o] = e.toJSON(s2);
    delete r3[o].spatialReference;
  }
  clone() {
    return new m2({ geometry: a(this.geometry), type: this.type });
  }
};
r([m({ type: P }), v()], f.prototype, "geometry", void 0), r([r2(["web-scene", "portal-item"], "geometry")], f.prototype, "writeGeometry", null), r([m({ type: ["clip", "mask", "replace"], nonNullable: true }), v()], f.prototype, "type", void 0), f = m2 = r([a2("esri.layers.support.SceneModification")], f);

// node_modules/@arcgis/core/layers/support/SceneModifications.js
var m3;
var n = m3 = class extends l.JSONSupportMixin(V.ofType(f)) {
  constructor(r3) {
    super(r3), this.url = null;
  }
  clone() {
    return new m3({ url: this.url, items: this.items.map((r3) => r3.clone()) });
  }
  toJSON(r3) {
    return this.toArray().map((o) => o.toJSON(r3)).filter((r4) => !!r4.geometry);
  }
  static fromJSON(r3, o) {
    const t = new m3();
    for (const e of r3) t.add(f.fromJSON(e, o));
    return t;
  }
  static async fromUrl(r3, t, e) {
    const i = { url: I(r3), origin: "service" }, c = await H(r3, { responseType: "json", signal: e?.signal }), n2 = t.toJSON(), a3 = [];
    for (const o of c.data) a3.push(f.fromJSON({ ...o, geometry: { ...o.geometry, spatialReference: n2 } }, i));
    return new m3({ url: r3, items: a3 });
  }
};
r([m({ type: String })], n.prototype, "url", void 0), n = m3 = r([a2("esri.layers.support.SceneModifications")], n);

export {
  n
};
//# sourceMappingURL=chunk-WCIRBZ5P.js.map
