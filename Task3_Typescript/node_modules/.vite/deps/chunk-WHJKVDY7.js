import {
  t as t2
} from "./chunk-OIYN2A3E.js";
import {
  o as o2
} from "./chunk-G3V62EXP.js";
import {
  C as C2,
  C2 as C3,
  P,
  U,
  X,
  Y,
  _,
  f as f2,
  g,
  j,
  m,
  rt,
  t as t3,
  v,
  w,
  ye,
  yn
} from "./chunk-JSDQVIZI.js";
import {
  n4 as n
} from "./chunk-GEY3MNEN.js";
import {
  e as e2
} from "./chunk-I7SMTGBD.js";
import {
  r as r3
} from "./chunk-JOUWZB2W.js";
import {
  t
} from "./chunk-5WTH3GBK.js";
import {
  e as e3
} from "./chunk-IGBV77N3.js";
import {
  mt
} from "./chunk-55AFRDJF.js";
import {
  E
} from "./chunk-3PPDORWL.js";
import {
  M,
  f,
  h,
  i,
  o
} from "./chunk-DRAQJS2F.js";
import {
  C,
  D,
  O,
  R
} from "./chunk-BZYXFNL4.js";
import {
  L
} from "./chunk-X3UT6DT7.js";
import {
  r as r2
} from "./chunk-MPV4X4LZ.js";
import {
  u as u2
} from "./chunk-7BWCD63N.js";
import {
  d
} from "./chunk-OXSERRAR.js";
import {
  e,
  r
} from "./chunk-5TPMG26T.js";
import {
  u2 as u
} from "./chunk-GZ2P4SCJ.js";

// node_modules/@arcgis/core/views/2d/engine/webgl/shaderGraph/techniques/shaders/OverlayShader.js
var x = class extends C3 {
};
r([f2(0, C2)], x.prototype, "pos", void 0), r([f2(1, C2)], x.prototype, "uv", void 0);
var g2 = class extends v {
};
var w2 = class extends P {
};
r([g(rt)], w2.prototype, "dvs", void 0);
var S = class extends P {
};
r([g(C2)], S.prototype, "perspective", void 0), r([g(C2)], S.prototype, "texSize", void 0), r([g(_)], S.prototype, "wrapAroundShift", void 0), r([g(_)], S.prototype, "opacity", void 0), r([g(U)], S.prototype, "texture", void 0);
var j2 = class extends j {
  constructor() {
    super(...arguments), this.type = "OverlayShader";
  }
  vertex(t4) {
    const o3 = t4.uv.divide(this.config.texSize), e4 = new _(1).add(ye(o3, this.config.perspective)), r4 = new X(t4.pos.add(new C2(this.config.wrapAroundShift, 0)), 1), p = this.transform.dvs.multiply(r4);
    return { uv: o3, glPosition: new Y(p.xy.multiply(e4), 0, e4) };
  }
  fragment(t4) {
    const o3 = yn(this.config.texture, t4.uv).multiply(this.config.opacity), e4 = new w();
    return e4.fragColor = o3, e4;
  }
};
r([g(w2)], j2.prototype, "transform", void 0), r([g(S)], j2.prototype, "config", void 0), r([e(0, m(x))], j2.prototype, "vertex", null), r([e(0, m(g2))], j2.prototype, "fragment", null);

// node_modules/@arcgis/core/views/2d/engine/webgl/shaderGraph/techniques/overlay/OverlayTechnique.js
var m2 = class extends t3 {
  constructor() {
    super(...arguments), this.type = e2.Overlay, this._mesh = null, this.shaders = { overlay: new j2() };
  }
  render(e4, t4) {
    const { context: r4, painter: i2 } = e4, o3 = this._getMesh(e4, t4);
    i2.setPipelineState(t2);
    const { isWrapAround: h2, wrapAroundShift: p } = t4.config, u4 = { ...t4.config, wrapAroundShift: 0 }, m3 = { shader: this.shaders.overlay, uniforms: { transform: t4.transform, config: u4 }, defines: null, optionalAttributes: null, useComputeBuffer: false };
    i2.setPipelineState({ ...t2, stencil: { write: false, test: { compare: C.EQUAL, op: { fail: D.KEEP, zFail: D.KEEP, zPass: D.REPLACE }, ref: 0, mask: 255 } } }), i2.submitDrawMeshUntyped(r4, m3, o3), h2 && (u4.wrapAroundShift = p, i2.submitDrawMeshUntyped(r4, m3, o3));
  }
  shutdown() {
    u(this._mesh);
  }
  _getMesh(e4, s) {
    const { context: r4 } = e4;
    if (this._mesh) {
      const e5 = this._mesh.vertexBuffers.get("positions");
      if (!e5) throw new Error("Buffer not found");
      e5.buffer.setData(s.position);
    } else {
      const e5 = null != s.index ? s.index.length : s.position.length / 2;
      this._mesh = new o2(r4, { vertex: { positions: { data: s.position, attributes: [new t("pos", 2, O.FLOAT, 0, 8)] }, uvs: { data: s.tex, attributes: [new t("uv", 2, O.UNSIGNED_SHORT, 0, 4)] } }, index: null != s.index ? { index: { data: s.index } } : void 0, groups: [{ index: null != s.index ? "index" : void 0, primitive: R.TRIANGLE_STRIP }], parts: [{ group: 0, start: 0, count: e5 }] });
    }
    return this._mesh;
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/OverlayContainer.js
var u3 = class extends n {
  constructor() {
    super(...arguments), this._viewStateId = -1, this._dvsMat3 = e3(), this._overlayTechnique = new m2();
  }
  get dvsMat3() {
    return this._dvsMat3;
  }
  beforeRender(t4) {
    this._updateMatrices(t4), this._updateOverlays(t4, this.children);
    for (const e4 of this.children) e4.beforeRender(t4);
  }
  doRender(t4) {
    if (t4.drawPhase !== E.MAP || !this.visible) return;
    super.doRender(t4);
    const e4 = this._overlayTechnique;
    for (const r4 of this.children) r4.draw(t4, e4);
  }
  onDetach() {
    this._overlayTechnique.shutdown();
  }
  _updateMatrices(a) {
    const { state: h2 } = a, { id: m3, size: d2, pixelRatio: p, resolution: f3, rotation: u4, viewpoint: v2, displayMat3: _2 } = h2;
    if (this._viewStateId === m3) return;
    const M2 = u2(u4), g3 = p * d2[0], y = p * d2[1];
    this._localOrigin = v2.targetGeometry.clone();
    const { x: w3, y: x2 } = this._localOrigin, b = L(w3, h2.spatialReference);
    this._localOrigin.x = b, this._localOrigin.y = x2;
    const j3 = f3 * g3, O2 = f3 * y, R2 = o(this._dvsMat3);
    i(R2, R2, _2), M(R2, R2, r2(g3 / 2, y / 2)), f(R2, R2, r3(g3 / j3, -y / O2, 1)), h(R2, R2, -M2), this._viewStateId = m3;
  }
  _updateOverlays(e4, r4) {
    const { state: o3 } = e4, { rotation: i2, spatialReference: s, worldScreenWidth: a, size: n2, viewpoint: l } = o3, c = this._localOrigin;
    let d2, p = 0;
    const f3 = d(s);
    if (f3 && s.isWrappable) {
      const e5 = n2[0], r5 = n2[1], c2 = u2(i2), h2 = Math.abs(Math.cos(c2)), u4 = Math.abs(Math.sin(c2)), v2 = Math.round(e5 * h2 + r5 * u4), [_2, M2] = f3.valid, g3 = mt(s), { x: y, y: w3 } = l.targetGeometry, x2 = [y, w3], b = [0, 0];
      o3.toScreen(b, x2);
      const j3 = [0, 0];
      let O2;
      O2 = v2 > a ? 0.5 * a : 0.5 * v2;
      const R2 = Math.floor((y + 0.5 * g3) / g3), q = _2 + R2 * g3, S2 = M2 + R2 * g3, G = [b[0] + O2, 0];
      o3.toMap(j3, G), j3[0] > S2 && (p = g3), G[0] = b[0] - O2, o3.toMap(j3, G), j3[0] < q && (p = -g3), d2 = { worldWidth: g3, xBounds: [_2, M2] };
    }
    for (const t4 of r4) t4.updateDrawCoords(c, p, o3, d2);
  }
};

export {
  u3 as u
};
//# sourceMappingURL=chunk-WHJKVDY7.js.map
