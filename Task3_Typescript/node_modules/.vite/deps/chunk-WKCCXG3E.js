import {
  p as p2
} from "./chunk-ZWJOMK2U.js";
import {
  i as i5
} from "./chunk-Y2ZAHGIO.js";
import {
  t as t3
} from "./chunk-ZCE5HP23.js";
import {
  C
} from "./chunk-Y2QTREQA.js";
import {
  t as t4
} from "./chunk-OV7XVIQP.js";
import {
  e as e5,
  h as h3,
  i as i3,
  r
} from "./chunk-JQSXFLSD.js";
import {
  e as e4
} from "./chunk-VNLFNBKT.js";
import {
  e as e7,
  n as n4
} from "./chunk-NMP7ZOVG.js";
import {
  M,
  e as e6,
  i as i4,
  s as s6
} from "./chunk-YHYQP7QX.js";
import {
  A as A2,
  Bi,
  Fi,
  G as G4,
  X,
  Y,
  a as a4,
  zi
} from "./chunk-RP7FUW55.js";
import {
  n as n3
} from "./chunk-MPV4X4LZ.js";
import {
  S as S2,
  o as o2
} from "./chunk-TNW4TPNP.js";
import {
  A,
  E as E2,
  G as G3,
  H,
  I as I3,
  L as L2,
  N as N2,
  P as P3,
  S,
  T as T2,
  U,
  V as V2,
  ee,
  g,
  h as h2,
  v,
  w as w2
} from "./chunk-DJJNSAUR.js";
import {
  n as n2
} from "./chunk-PZBXBPVO.js";
import {
  B,
  E,
  G as G2,
  K,
  L,
  N,
  P as P2,
  Q,
  R,
  T,
  V,
  Z,
  a as a3,
  b as b2,
  l as l4,
  le,
  m as m4,
  o,
  oe,
  te,
  u as u5,
  w,
  y as y2
} from "./chunk-TMC6HYGQ.js";
import {
  u as u4
} from "./chunk-NOGWEW4X.js";
import {
  l as l3,
  s as s5
} from "./chunk-SRJX4QLW.js";
import {
  e as e3,
  u as u3
} from "./chunk-MUKDJQWB.js";
import {
  l as l2,
  m as m3,
  s as s4,
  u as u2,
  y
} from "./chunk-N3A2BVTW.js";
import {
  I,
  P,
  f as f3,
  i as i2,
  l,
  n,
  t as t2
} from "./chunk-52HWRRRQ.js";
import {
  f as f2,
  h,
  m
} from "./chunk-VNTEV3V4.js";
import {
  a as a2,
  c,
  f as f4
} from "./chunk-OGOQOMMV.js";
import {
  I as I2,
  b,
  e as e2,
  m as m2,
  p,
  s as s3,
  u,
  x
} from "./chunk-6GWORUT3.js";
import {
  s as s2
} from "./chunk-FPSA4NFH.js";
import {
  G
} from "./chunk-O5TPFXRT.js";
import {
  f
} from "./chunk-PK2ZR2SJ.js";
import {
  e
} from "./chunk-JUAD7TJ6.js";
import {
  i2 as i,
  s
} from "./chunk-XWG6QGFK.js";
import {
  a
} from "./chunk-GWNLQRNM.js";
import {
  has,
  t
} from "./chunk-FXKORAMT.js";

// node_modules/@arcgis/core/symbols/cim/effects/EffectAddControlPoints.js
var _e = class _e {
  static local() {
    return null === _e.instance && (_e.instance = new _e()), _e.instance;
  }
  execute(e18, s18, n20, i19) {
    return new t5(e18, s18);
  }
};
_e.instance = null;
var e8 = _e;
var t5 = class {
  constructor(e18, t17) {
    this._inputGeometries = e18, this._angleTolerance = void 0 !== t17.angleTolerance ? t17.angleTolerance : 120, this._maxCosAngle = Math.cos((1 - Math.abs(this._angleTolerance) / 180) * Math.PI);
  }
  next() {
    let e18 = this._inputGeometries.next();
    if (!e18) return null;
    for (; e18; ) {
      if ("esriGeometryPolygon" === e18.geometryType) this._isClosed = true;
      else if ("esriGeometryPolyline" === e18.geometryType) this._isClosed = false;
      else {
        if ("esriGeometryEnvelope" !== e18.geometryType) {
          e18 = this._inputGeometries.next();
          continue;
        }
        if (this._maxCosAngle) return e18;
        this._isClosed = true;
      }
      for (; e18.nextPath(); ) this._processPath(e18);
      return e18.reset(), e18;
    }
    return null;
  }
  _processPath(e18) {
    if (e18.nextPoint()) {
      const t17 = e18.x, s18 = e18.y;
      let n20 = t17, i19 = s18, o10 = e18.pathSize, l14 = 0, r19 = 0, a13 = 0, h12 = 0, c6 = 0, _6 = 0;
      this._isClosed && ++o10;
      for (let u14 = 1; e18.nextPoint() || u14 < o10; ++u14) {
        let x6, m10;
        this._isClosed && u14 === o10 - 1 ? (x6 = t17, m10 = s18) : (x6 = e18.x, m10 = e18.y);
        const y7 = x6 - n20, g2 = m10 - i19, C3 = Math.sqrt(y7 * y7 + g2 * g2);
        if (u14 > 1 && C3 > 0 && a13 > 0) {
          (l14 * y7 + r19 * g2) / C3 / a13 <= this._maxCosAngle && e18.setControlPointAt(u14 - 1);
        }
        1 === u14 && (h12 = y7, c6 = g2, _6 = C3), C3 > 0 && (n20 = x6, i19 = m10, l14 = y7, r19 = g2, a13 = C3);
      }
      if (this._isClosed && a13 > 0 && _6 > 0) {
        (l14 * h12 + r19 * c6) / _6 / a13 <= this._maxCosAngle && e18.setControlPointAt(0);
      }
    }
  }
};

// node_modules/@arcgis/core/geometry/GeometryCursor.js
var a5 = class {
  static fromOptimized(t17, e18, s18 = false, i19 = false, h12 = 1) {
    return new p3().initialize(t17, e18, s18, i19, h12);
  }
  static fromJSON(t17, e18 = false, s18 = false) {
    const [i19, h12] = u6(t17);
    return new c2().initialize(i19, h12, e18, s18, 1);
  }
  static fromOptimizedCIM(t17, e18, s18 = false, i19 = false, h12 = 1) {
    return new y3().initialize(t17, e18, s18, i19, h12);
  }
  static fromJSONCIM(t17, e18 = false, s18 = false, i19 = 1) {
    const [h12, r19] = u6(t17);
    return new m5().initialize(h12, r19, e18, s18, i19);
  }
  static fromFeatureSetReader(t17) {
    const e18 = t17.readGeometryForDisplay(), s18 = t17.geometryType;
    return e18 && s18 ? this.fromOptimized(e18, s18) : null;
  }
  static fromFeatureSetReaderCIM(t17) {
    const e18 = t17.readGeometryForDisplay(), s18 = t17.geometryType;
    return e18 && s18 ? this.fromOptimizedCIM(e18, s18) : null;
  }
  static createEmptyOptimized(t17, e18 = false, s18 = false, i19 = 1) {
    return new p3().initialize(new e4(), t17, e18, s18, i19);
  }
  static createEmptyJSON(t17, e18 = false, s18 = false) {
    return new c2().initialize([], t17, e18, s18, 1);
  }
  static createEmptyOptimizedCIM(t17, e18 = false, s18 = false, i19 = 1) {
    return new y3().initialize(new e4(), t17, e18, s18, i19);
  }
  static createEmptyJSONCIM(t17, e18 = false, s18 = false, i19 = 1) {
    return new m5().initialize([], t17, e18, s18, i19);
  }
  asJSON() {
    const t17 = t2(this);
    return "esriGeometryEnvelope" === this.geometryType ? { xmin: t17[0][0][0], ymin: t17[0][0][1], xmax: t17[0][2][0], ymax: t17[0][2][1] } : "esriGeometryMultipoint" === this.geometryType ? { points: t17.flat() } : "esriGeometryPoint" === this.geometryType ? { x: t17[0][0][0], y: t17[0][0][1] } : "esriGeometryPolygon" === this.geometryType ? { rings: t17 } : { paths: t17 };
  }
  getCurrentRingArea() {
    if (this.pathSize < 3) return 0;
    let t17, e18, s18 = 0;
    if (this.seekPathStart(), !this.nextPoint()) return 0;
    t17 = this.x, e18 = this.y;
    const i19 = t17, h12 = e18;
    for (; this.nextPoint(); ) s18 += (t17 - this.x) * (e18 + this.y), t17 = this.x, e18 = this.y;
    return s18 += (t17 - i19) * (e18 + h12), -0.5 * s18;
  }
  invertY() {
    this.yFactor *= -1;
  }
};
var p3 = class _p2 extends a5 {
  constructor() {
    super(...arguments), this._end = -1;
  }
  initialize(t17, e18, s18, i19, h12) {
    return this.hasZ = s18, this.hasM = i19, this.geometryType = e18, this._stride = 2 + Number(s18) + Number(i19), this._geometry = t17, this._pathIndex = -1, this._pathOffset = 0, this._pointOffset = -this._stride, this._end = -1, this.yFactor = h12, this;
  }
  reset() {
    this.initialize(this._geometry, this.geometryType, this.hasZ, this.hasM, this.yFactor);
  }
  seekPath(t17) {
    if (t17 >= 0 && t17 < this.totalSize) {
      if (this._pathIndex < t17) for (; this._pathIndex < t17 && this.nextPath(); ) ;
      else if (this._pathIndex > t17) for (; this._pathIndex > t17 && this.prevPath(); ) ;
      return true;
    }
    return false;
  }
  seekPathStart() {
    this._pointOffset = this._pathOffset - this._stride;
  }
  seekPathEnd() {
    this._pointOffset = this._end;
  }
  seekInPath(t17) {
    const e18 = this._pathOffset + t17 * this._stride;
    return e18 >= 0 && e18 < this._end && (this._pointOffset = e18, true);
  }
  nextPoint() {
    return (this._pointOffset += this._stride) < this._end;
  }
  prevPoint() {
    return (this._pointOffset -= this._stride) >= this._pathOffset;
  }
  nextPath() {
    return !(this.pathIndex >= this.totalSize - 1) && (this._pathIndex >= 0 && (this._pathOffset += this._stride * this.pathSize), this._pathIndex++, this._pointOffset = this._pathOffset - this._stride, this._end = this._pointOffset + this._stride + this._stride * this.pathSize, true);
  }
  prevPath() {
    return !(this.pathIndex <= 0) && (this._pathIndex--, this._end = this._pathOffset, this._pathOffset -= this._stride * this.pathSize, this._pointOffset = this._pathOffset - this._stride, true);
  }
  getCurrentPath() {
    const t17 = this._end, e18 = this._geometry.coords, s18 = this._pathOffset;
    return new _p2().initialize(new e4([this.pathSize], e18.slice(s18, t17)), this.geometryType, this.hasZ, this.hasM, this.yFactor);
  }
  pathLength() {
    const t17 = this._end, e18 = this._stride, s18 = this._geometry.coords;
    let i19 = 0;
    for (let h12 = this._pathOffset + e18; h12 < t17; h12 += e18) {
      const t18 = s18[h12 - e18], r19 = s18[h12 - e18 + 1], n20 = s18[h12] - t18, o10 = s18[h12 + 1] - r19;
      i19 += Math.sqrt(n20 * n20 + o10 * o10);
    }
    return i19;
  }
  startPath() {
    this._geometry.lengths.push(0);
  }
  pushPath(t17) {
    this.startPath(), this.pushPoints(t17);
  }
  pushPoint(t17) {
    for (let e18 = 0; e18 < this._stride; ++e18) this._geometry.coords.push(t17[e18]);
    this._geometry.lengths[this.totalSize - 1]++;
  }
  pushXY(t17, e18) {
    this._geometry.coords.push(t17, e18), this._geometry.lengths[this.totalSize - 1]++;
  }
  pushPoints(t17) {
    for (const e18 of t17) for (let t18 = 0; t18 < this._stride; ++t18) this._geometry.coords.push(e18[t18]);
    this._geometry.lengths[this.totalSize - 1] += t17.length;
  }
  pushCursor(t17) {
    const e18 = t17.asOptimized();
    this._geometry.coords.push(...e18.coords), this._geometry.lengths.push(...e18.lengths);
  }
  asOptimized() {
    const t17 = this._geometry.clone();
    if (1 !== this.yFactor) for (let e18 = 1; e18 < t17.coords.length; e18 += this._stride) t17.coords[e18] *= this.yFactor;
    return "esriGeometryPoint" === this.geometryType && (t17.lengths.length = 0), t17;
  }
  isClosed() {
    const t17 = this._geometry.coords, e18 = this._pathOffset, s18 = this._end - this._stride;
    for (let i19 = 0; i19 < this._stride; i19++) if (t17[e18 + i19] !== t17[s18 + i19]) return false;
    return true;
  }
  clone() {
    return new _p2().initialize(this._geometry.clone(), this.geometryType, this.hasZ, this.hasM, this.yFactor);
  }
  get totalPoints() {
    return this._geometry.isPoint ? 1 : this._geometry.lengths.reduce((t17, e18) => t17 + e18);
  }
  get pathSize() {
    const { lengths: t17 } = this._geometry;
    return this._geometry.isPoint ? 1 : this._pathIndex < 0 || this._pathIndex > t17.length - 1 ? 0 : t17[this._pathIndex];
  }
  get totalSize() {
    return this._geometry.isPoint ? 1 : this._geometry.lengths.length;
  }
  get x() {
    return this._geometry.coords[this._pointOffset];
  }
  set x(t17) {
    this._geometry.coords[this._pointOffset] = t17;
  }
  get y() {
    return this.yFactor * this._geometry.coords[this._pointOffset + 1];
  }
  set y(t17) {
    this._geometry.coords[this._pointOffset + 1] = this.yFactor * t17;
  }
  get z() {
    return this._geometry.coords[this._pointOffset + 2];
  }
  set z(t17) {
    this._geometry.coords[this._pointOffset + 2] = t17;
  }
  get m() {
    const t17 = this.hasZ ? 3 : 2;
    return this._geometry.coords[this._pointOffset + t17];
  }
  set m(t17) {
    this._geometry.coords[this._pointOffset + 3] = t17;
  }
  get pathIndex() {
    return this._pathIndex;
  }
  get _coordIndex() {
    return this._pointOffset / this._stride;
  }
};
function _(t17) {
  const e18 = [t17.x, t17.y];
  return t17.z && e18.push(t17.z), t17.m && e18.push(t17.m), e18;
}
function u6(t17) {
  return y(t17) ? [t17.rings, "esriGeometryPolygon"] : s4(t17) ? [t17.paths, "esriGeometryPolyline"] : u2(t17) ? [[t17.points], "esriGeometryMultipoint"] : m3(t17) ? [[[[t17.xmin, t17.ymin], [t17.xmin, t17.ymax], [t17.xmax, t17.ymax], [t17.xmax, t17.ymin], [t17.xmin, t17.ymin]]], "esriGeometryEnvelope"] : l2(t17) ? [[[_(t17)]], "esriGeometryPoint"] : [[], "esriGeometryPolyline"];
}
var c2 = class _c extends a5 {
  initialize(t17, e18, s18, i19, h12) {
    return this._paths = t17, this.geometryType = e18, this.hasZ = s18, this.hasM = i19, this._pathIndex = this._pointIndex = -1, this.yFactor = h12, this._mIndex = this.hasZ ? 3 : 2, this;
  }
  reset() {
    this._pathIndex = this._pointIndex = -1;
  }
  seekPath(t17) {
    return this._pathIndex = t17, this._pointIndex = -1, t17 >= 0 && t17 < this.totalSize && (this._currentPath = this._paths[t17], true);
  }
  seekPathStart() {
    this._pointIndex = -1;
  }
  seekPathEnd() {
    this._pointIndex = this._currentPath.length;
  }
  seekInPath(t17) {
    return t17 >= 0 && t17 < this._currentPath.length && (this._pointIndex = t17, this._currentPoint = this._currentPath[this._pointIndex], true);
  }
  nextPoint() {
    return this._currentPoint = this._currentPath[++this._pointIndex], this._pointIndex < this._currentPath.length;
  }
  prevPoint() {
    return this._currentPoint = this._currentPath[--this._pointIndex], this._pointIndex >= 0;
  }
  nextPath() {
    return this._pointIndex = -1, this._currentPath = this._paths[++this._pathIndex], this._pathIndex < this.totalSize;
  }
  prevPath() {
    return this.pathIndex > 0 && (this._pointIndex = -1, this._pathIndex--, this._currentPath = this._paths[this._pathIndex], true);
  }
  pathLength() {
    const t17 = this._currentPath.length, e18 = this._currentPath;
    let s18 = 0;
    for (let i19 = 1; i19 < t17; i19++) {
      const t18 = e18[i19 - 1], h12 = e18[i19], r19 = t18[0], n20 = t18[1], o10 = h12[0] - r19, a13 = h12[1] - n20;
      s18 += Math.sqrt(o10 * o10 + a13 * a13);
    }
    return s18;
  }
  startPath() {
    this._paths.push([]);
  }
  getCurrentPath() {
    return new _c().initialize([this._currentPath], this.geometryType, this.hasZ, this.hasM, this.yFactor);
  }
  pushPath(t17) {
    this._paths.push(t17);
  }
  pushPoint(t17) {
    this._paths[this.totalSize - 1].push(t17);
  }
  pushXY(t17, e18) {
    this._paths[this.totalSize - 1].push([t17, e18]);
  }
  pushPoints(t17) {
    this._paths[this.totalSize - 1].push(...t17);
  }
  pushCursor(t17) {
    const s18 = t2(t17);
    for (const e18 of s18) this.pushPath(e18);
  }
  asOptimized() {
    const t17 = new e4();
    if ("esriGeometryPoint" === this.geometryType) t17.coords.push(...this._paths[0][0]), t17.lengths.length = 0;
    else for (const e18 of this._paths) {
      for (const s18 of e18) t17.coords.push(s18[0]), t17.coords.push(s18[1] * this.yFactor), this.hasZ && t17.coords.push(s18[2]), this.hasM && t17.coords.push(s18[this._mIndex]);
      t17.lengths.push(e18.length);
    }
    return t17;
  }
  isClosed() {
    const t17 = this._currentPath[0], e18 = this._currentPath[this._currentPath.length - 1];
    for (let s18 = 0; s18 < t17.length; s18++) if (t17[s18] !== e18[s18]) return false;
    return true;
  }
  clone() {
    return new _c().initialize(a(this._paths), this.geometryType, this.hasZ, this.hasM, this.yFactor);
  }
  get totalPoints() {
    return this._paths.map((t17) => t17.length).reduce((t17, e18) => t17 + e18);
  }
  get pathSize() {
    return this._pathIndex < 0 || this._pathIndex > this.totalSize - 1 ? -1 : this._paths[this._pathIndex].length;
  }
  get totalSize() {
    return this._paths.length;
  }
  get x() {
    return this._currentPoint[0];
  }
  set x(t17) {
    this._currentPoint[0] = t17;
  }
  get y() {
    return this.yFactor * this._currentPoint[1];
  }
  set y(t17) {
    this._currentPoint[1] = this.yFactor * t17;
  }
  get z() {
    return this._currentPoint[2];
  }
  set z(t17) {
    this._currentPoint[2] = t17;
  }
  get m() {
    return this._currentPoint[this._mIndex];
  }
  set m(t17) {
    this._currentPoint[this._mIndex] = t17;
  }
  get pathIndex() {
    return this._pathIndex;
  }
};
var d = 4;
var l5 = 1;
var y3 = class _y extends p3 {
  initialize(t17, e18, s18, i19, h12) {
    return super.initialize(t17, e18, s18, i19, h12), this._controlPoints || (this._controlPoints = this._controlPoints = new Array(this.totalSize).fill(void 0).map((t18) => /* @__PURE__ */ new Set())), this;
  }
  startPath() {
    super.startPath(), this._controlPoints.push(/* @__PURE__ */ new Set());
  }
  clone() {
    const t17 = new _y().initialize(this._geometry.clone(), this.geometryType, this.hasZ, this.hasM, this.yFactor);
    return t17._controlPoints = this._controlPoints, t17;
  }
  setControlPoint() {
    this._controlPoints[this.pathIndex].add(this._coordIndex);
  }
  getControlPoint() {
    return this._controlPoints[this.pathIndex].has(this._coordIndex);
  }
  setControlPointAt(t17) {
    this._controlPoints[this.pathIndex].add(t17);
  }
  getControlPointAt(t17) {
    return this._controlPoints[this.pathIndex].has(t17);
  }
};
var m5 = class _m2 extends c2 {
  initialize(t17, e18, s18, i19, h12) {
    return super.initialize(t17, e18, s18, i19, h12);
  }
  clone() {
    return new _m2().initialize(a(this._paths), this.geometryType, this.hasZ, this.hasM, this.yFactor);
  }
  setControlPoint() {
    this._paths[this.pathIndex][this._pointIndex][d] = l5;
  }
  getControlPoint() {
    return this._paths[this.pathIndex][this._pointIndex][d] === l5;
  }
  setControlPointAt(t17) {
    this._paths[this.pathIndex][t17][d] = l5;
  }
  getControlPointAt(t17) {
    return this._paths[this.pathIndex][t17][d] === l5;
  }
};

// node_modules/@arcgis/core/symbols/cim/CIMPlacements.js
var t6 = class {
  constructor() {
    this.setIdentity();
  }
  getAngle() {
    return (null == this.rz || 0 === this.rz && 1 !== this.rzCos && 0 !== this.rzSin) && (this.rz = Math.atan2(this.rzSin, this.rzCos)), this.rz;
  }
  setIdentity() {
    this.tx = 0, this.ty = 0, this.tz = 0, this.s = 1, this.rx = 0, this.ry = 0, this.rz = 0, this.rzCos = 1, this.rzSin = 0;
  }
  setTranslate(t17, s18) {
    this.tx = t17, this.ty = s18;
  }
  setTranslateZ(t17) {
    this.tz = t17;
  }
  setRotateCS(t17, s18) {
    this.rz = void 0, this.rzCos = t17, this.rzSin = s18;
  }
  setRotate(t17) {
    this.rz = t17, this.rzCos = void 0, this.rzSin = void 0;
  }
  setRotateY(t17) {
    this.ry = t17;
  }
  setScale(t17) {
    this.s = t17;
  }
  setMeasure(t17) {
    this.m = t17;
  }
};

// node_modules/@arcgis/core/symbols/cim/CIMCursor.js
function e9(t17, e18) {
  t17[4] = e18;
}
var i6 = class {
  constructor(e18, i19 = true, r19 = true, s18 = 0) {
    this.isClosed = false, this.geometryCursor = null, this.geometryCursor = !i19 && "esriGeometryPolygon" === e18.geometryType || !r19 && "esriGeometryPolyline" === e18.geometryType ? null : e18, this.geomUnitsPerPoint = s18, this.iterateMultiPath = false, this.iteratePath = false, this.internalPlacement = new t6();
  }
  next() {
    if (!this.geometryCursor) return null;
    const t17 = this.processMultiPath(this.geometryCursor);
    return this.iterateMultiPath && t17 || (this.geometryCursor = null), t17;
  }
  processMultiPath(t17) {
    for (; this.iteratePath || t17.pathIndex < t17.totalSize - 1; ) {
      this.iteratePath || t17.nextPath(), this.iterateMultiPath = true;
      const e18 = this.processPath(t17);
      if (e18) return e18;
    }
    return this.iterateMultiPath = false, null;
  }
};
var r2 = class {
  constructor(t17, e18, i19, r19 = 0) {
    this.isClosed = false, this.inputGeometries = t17, this.acceptPolygon = e18, this.acceptPolyline = i19, this.geomUnitsPerPoint = r19, this.iteratePath = false, this.multiPathCursor = null;
  }
  next() {
    for (; ; ) {
      if (!this.multiPathCursor) {
        let t17 = this.inputGeometries.next();
        for (; t17 && (this.isClosed = this.acceptPolygon && "esriGeometryPolygon" === t17.geometryType || "esriGeometryEnvelope" === t17.geometryType, this.multiPathCursor = t17, !this.multiPathCursor); ) t17 = this.inputGeometries.next();
        if (!this.multiPathCursor) return null;
      }
      for (; this.iteratePath || this.multiPathCursor.nextPath(); ) {
        this.multiPathCursor.seekPathStart();
        const t17 = this.processPath(this.multiPathCursor);
        if (t17) return t17;
      }
      this.multiPathCursor = null;
    }
  }
};

// node_modules/@arcgis/core/symbols/cim/CurveHelper.js
var n5 = 0.03;
var s7 = class {
  constructor(t17 = 0, e18 = false) {
  }
  isEmpty(t17) {
    if (!t17.nextPoint()) return true;
    let e18, n20, s18, r19;
    for (e18 = t17.x, n20 = t17.y; t17.nextPoint(); e18 = n20, n20 = r19) if (s18 = t17.x, r19 = t17.y, s18 !== e18 || r19 !== n20) return t17.seekPathStart(), false;
    return t17.seekPathStart(), true;
  }
  normalize(t17) {
    const e18 = Math.sqrt(t17[0] * t17[0] + t17[1] * t17[1]);
    0 !== e18 && (t17[0] /= e18, t17[1] /= e18);
  }
  getLength(t17, e18, n20, s18) {
    const r19 = n20 - t17, o10 = s18 - e18;
    return Math.sqrt(r19 * r19 + o10 * o10);
  }
  getSegLength(t17) {
    const [[e18, n20], [s18, r19]] = t17;
    return this.getLength(e18, n20, s18, r19);
  }
  getCoord2D(t17, e18, n20, s18, r19) {
    return [t17 + (n20 - t17) * r19, e18 + (s18 - e18) * r19];
  }
  getSegCoord2D(t17, e18) {
    const [[n20, s18], [r19, o10]] = t17;
    return this.getCoord2D(n20, s18, r19, o10, e18);
  }
  getAngle(t17, e18, n20, s18, r19) {
    const o10 = n20 - t17, i19 = s18 - e18;
    return Math.atan2(i19, o10);
  }
  getAngleCS(t17, e18, n20, s18, r19, o10) {
    null == t17 && (t17 = [0, 0]);
    const i19 = s18 - e18, u14 = r19 - n20, h12 = Math.sqrt(i19 * i19 + u14 * u14);
    return 0 !== h12 ? (t17[0] = i19 / h12, t17[1] = u14 / h12, t17) : (t17[0] = 1, t17[1] = 0, t17);
  }
  getSegAngleCS(t17, e18, n20) {
    const [[s18, r19], [o10, i19]] = e18;
    return this.getAngleCS(t17, s18, r19, o10, i19, n20);
  }
  cut(t17, e18, n20, s18, r19, o10) {
    return [r19 <= 0 ? [t17, e18] : this.getCoord2D(t17, e18, n20, s18, r19), o10 >= 1 ? [n20, s18] : this.getCoord2D(t17, e18, n20, s18, o10)];
  }
  getSubCurve(e18, n20, s18) {
    const r19 = a5.createEmptyOptimizedCIM("esriGeometryPolyline");
    return this.appendSubCurve(r19, e18, n20, s18) ? r19 : null;
  }
  appendSubCurve(t17, e18, n20, s18) {
    t17.startPath(), e18.seekPathStart();
    let r19 = 0, o10 = true;
    if (!e18.nextPoint()) return false;
    let i19 = e18.x, u14 = e18.y;
    for (; e18.nextPoint(); ) {
      const h12 = this.getLength(i19, u14, e18.x, e18.y);
      if (0 !== h12) {
        if (o10) {
          if (r19 + h12 > n20) {
            const l14 = (n20 - r19) / h12;
            let a13 = 1, c6 = false;
            r19 + h12 >= s18 && (a13 = (s18 - r19) / h12, c6 = true);
            const f6 = this.cut(i19, u14, e18.x, e18.y, l14, a13);
            if (f6 && t17.pushPoints(f6), c6) break;
            o10 = false;
          }
        } else {
          if (r19 + h12 > s18) {
            const n21 = this.cut(i19, u14, e18.x, e18.y, 0, (s18 - r19) / h12);
            n21 && t17.pushPoint(n21[1]);
            break;
          }
          t17.pushXY(e18.x, e18.y);
        }
        r19 += h12, i19 = e18.x, u14 = e18.y;
      } else i19 = e18.x, u14 = e18.y;
    }
    return true;
  }
  getCIMPointAlong(t17, e18) {
    if (!t17.nextPoint()) return null;
    let n20, s18, r19, o10, i19 = 0;
    for (n20 = t17.x, s18 = t17.y; t17.nextPoint(); n20 = r19, s18 = o10) {
      r19 = t17.x, o10 = t17.y;
      const u14 = this.getLength(n20, s18, r19, o10);
      if (0 !== u14) {
        if (i19 + u14 > e18) {
          const t18 = (e18 - i19) / u14;
          return this.getCoord2D(n20, s18, r19, o10, t18);
        }
        i19 += u14;
      }
    }
    return null;
  }
  offset(t17, n20, s18, r19, o10) {
    if (!t17 || t17.length < 2) return null;
    let i19 = 0, u14 = t17[i19++], h12 = i19;
    for (; i19 < t17.length; ) {
      const e18 = t17[i19];
      e18[0] === u14[0] && e18[1] === u14[1] || (i19 !== h12 && (t17[h12] = t17[i19]), u14 = t17[h12++]), i19++;
    }
    const l14 = t17[0][0] === t17[h12 - 1][0] && t17[0][1] === t17[h12 - 1][1];
    if (l14 && --h12, h12 < (l14 ? 3 : 2)) return null;
    const a13 = [];
    u14 = l14 ? t17[h12 - 1] : null;
    let c6 = t17[0];
    for (let f6 = 0; f6 < h12; f6++) {
      const o11 = f6 === h12 - 1 ? l14 ? t17[0] : null : t17[f6 + 1];
      if (u14) if (o11) {
        const t18 = [o11[0] - c6[0], o11[1] - c6[1]];
        this.normalize(t18);
        const i20 = [c6[0] - u14[0], c6[1] - u14[1]];
        this.normalize(i20);
        const h13 = i20[0] * t18[1] - i20[1] * t18[0], l15 = i20[0] * t18[0] + i20[1] * t18[1];
        if (0 === h13 && 1 === l15) {
          c6 = o11;
          continue;
        }
        if (h13 >= 0 == n20 <= 0) {
          if (l15 < 1) {
            const e18 = [t18[0] - i20[0], t18[1] - i20[1]];
            this.normalize(e18);
            const s19 = Math.sqrt((1 + l15) / 2);
            if (s19 > 1 / r19) {
              const t19 = -Math.abs(n20) / s19;
              a13.push([c6[0] - e18[0] * t19, c6[1] - e18[1] * t19]);
            }
          }
        } else switch (s18) {
          case N.Mitered: {
            const e18 = Math.sqrt((1 + l15) / 2);
            if (e18 > 0 && 1 / e18 < r19) {
              const s19 = [t18[0] - i20[0], t18[1] - i20[1]];
              this.normalize(s19);
              const r20 = Math.abs(n20) / e18;
              a13.push([c6[0] - s19[0] * r20, c6[1] - s19[1] * r20]);
              break;
            }
          }
          case N.Bevelled:
            a13.push([c6[0] + i20[1] * n20, c6[1] - i20[0] * n20]), a13.push([c6[0] + t18[1] * n20, c6[1] - t18[0] * n20]);
            break;
          case N.Rounded:
            if (l15 < 1) {
              a13.push([c6[0] + i20[1] * n20, c6[1] - i20[0] * n20]);
              const e18 = Math.floor(2.5 * (1 - l15));
              if (e18 > 0) {
                const s19 = 1 / e18;
                let r20 = s19;
                for (let o12 = 1; o12 < e18; o12++, r20 += s19) {
                  const e19 = [i20[1] * (1 - r20) + t18[1] * r20, -i20[0] * (1 - r20) - t18[0] * r20];
                  this.normalize(e19), a13.push([c6[0] + e19[0] * n20, c6[1] + e19[1] * n20]);
                }
              }
              a13.push([c6[0] + t18[1] * n20, c6[1] - t18[0] * n20]);
            }
            break;
          case N.Square:
          default:
            if (h13 < 0) a13.push([c6[0] + (i20[1] + i20[0]) * n20, c6[1] + (i20[1] - i20[0]) * n20]), a13.push([c6[0] + (t18[1] - t18[0]) * n20, c6[1] - (t18[0] + t18[1]) * n20]);
            else {
              const e18 = Math.sqrt((1 + Math.abs(l15)) / 2), s19 = [t18[0] - i20[0], t18[1] - i20[1]];
              this.normalize(s19);
              const r20 = n20 / e18;
              a13.push([c6[0] - s19[0] * r20, c6[1] - s19[1] * r20]);
            }
        }
      } else {
        const t18 = [c6[0] - u14[0], c6[1] - u14[1]];
        this.normalize(t18), a13.push([c6[0] + t18[1] * n20, c6[1] - t18[0] * n20]);
      }
      else {
        const t18 = [o11[0] - c6[0], o11[1] - c6[1]];
        this.normalize(t18), a13.push([c6[0] + t18[1] * n20, c6[1] - t18[0] * n20]);
      }
      u14 = c6, c6 = o11;
    }
    return a13.length < (l14 ? 3 : 2) ? null : (l14 && a13.push([a13[0][0], a13[0][1]]), a13);
  }
};

// node_modules/@arcgis/core/symbols/cim/effects/EffectArrow.js
var c3 = 1.7320508075688772;
var u7 = 5;
var h4 = P2.OpenEnded;
var _p = class _p {
  static local() {
    return null === _p.instance && (_p.instance = new _p()), _p.instance;
  }
  execute(t17, e18, r19, n20, o10) {
    return new P4(t17, e18, r19);
  }
};
_p.instance = null;
var p4 = _p;
var P4 = class extends r2 {
  constructor(t17, e18, r19) {
    super(t17, false, true), this._curveHelper = new s7(), this._width = (void 0 !== e18.width ? e18.width : u7) * r19, this._arrowType = void 0 !== e18.geometricEffectArrowType ? e18.geometricEffectArrowType : void 0 !== e18.arrowType ? e18.arrowType : h4, this._offsetFlattenError = n5 * r19;
  }
  processPath(e18) {
    const r19 = a5.createEmptyOptimizedCIM(e18.geometryType);
    switch (this._arrowType) {
      case P2.OpenEnded:
      default:
        this._constructSimpleArrow(r19, e18, true);
        break;
      case P2.Block:
        this._constructSimpleArrow(r19, e18, false);
        break;
      case P2.Crossed:
        this._constructCrossedArrow(r19, e18);
    }
    return r19;
  }
  _constructSimpleArrow(t17, r19, n20) {
    const o10 = r19.pathLength();
    let s18 = this._width;
    o10 < 2 * s18 && (s18 = o10 / 2);
    const i19 = this._curveHelper.getSubCurve(r19, 0, o10 - s18);
    if (!i19 || !i19.nextPath()) return;
    i19.seekPathStart();
    const c6 = s18 / 2;
    if (this._curveHelper.isEmpty(i19)) return;
    const u14 = n(i19), h12 = this._constructOffset(u14, -c6);
    if (!h12) return;
    const p8 = this._constructOffset(u14, c6);
    if (!p8) return;
    const P6 = this._constructArrowBasePoint(h12, -c6 / 2);
    if (!P6) return;
    const l14 = this._constructArrowBasePoint(p8, c6 / 2);
    if (!l14) return;
    r19.seekInPath(r19.pathSize - 1);
    const a13 = [r19.x, r19.y];
    t17.pushPath(p8), t17.nextPath(), t17.nextPoint(), t17.setControlPoint(), t17.pushPoint(l14), t17.nextPoint(), t17.setControlPoint(), t17.pushPoint(a13), t17.nextPoint(), t17.setControlPoint(), t17.pushPoint(P6), t17.nextPoint(), t17.setControlPoint(), t17.pushPoints(h12.reverse()), t17.setControlPoint(), n20 || (t17.setControlPointAt(0), t17.setControlPointAt(t17.pathSize - 1), t17.pushPoint(p8[0])), t17.reset();
  }
  _constructCrossedArrow(t17, r19) {
    const n20 = r19.pathLength();
    let o10 = this._width;
    n20 < o10 * (1 + c3 + 1) && (o10 = n20 / (1 + c3 + 1)), r19.seekPathStart();
    const s18 = this._curveHelper.getSubCurve(r19, 0, n20 - o10 * (1 + c3));
    if (!s18) return;
    s18.nextPath();
    const i19 = o10 / 2;
    if (this._curveHelper.isEmpty(s18)) return;
    const u14 = n(s18), h12 = this._constructOffset(u14, i19);
    if (!h12) return;
    const p8 = this._constructOffset(u14, -i19);
    if (!p8) return;
    const P6 = this._curveHelper.getSubCurve(r19, 0, n20 - o10);
    if (!P6) return;
    if (P6.nextPath(), this._curveHelper.isEmpty(P6)) return;
    const l14 = n(P6), a13 = this._constructOffset(l14, i19);
    if (!a13) return;
    const f6 = this._constructOffset(l14, -i19);
    if (!f6) return;
    const _6 = a13[a13.length - 1], m10 = this._constructArrowBasePoint(a13, i19 / 2);
    if (!m10) return;
    const C3 = f6[f6.length - 1], w5 = this._constructArrowBasePoint(f6, -i19 / 2);
    if (!w5) return;
    r19.seekInPath(r19.pathSize - 1);
    const x6 = [r19.x, r19.y];
    t17.pushPath(h12), t17.nextPath(), t17.nextPoint(), t17.setControlPoint(), t17.pushPoint(C3), t17.nextPoint(), t17.setControlPoint(), t17.pushPoint(w5), t17.nextPoint(), t17.setControlPoint(), t17.pushPoint(x6), t17.nextPoint(), t17.setControlPoint(), t17.pushPoint(m10), t17.nextPoint(), t17.setControlPoint(), t17.pushPoint(_6), t17.nextPoint(), t17.setControlPoint(), t17.pushPoints(p8.reverse()), t17.nextPoint(), t17.setControlPoint(), t17.reset();
  }
  _constructOffset(t17, e18) {
    return this._curveHelper.offset(t17, e18, N.Rounded, 4, this._offsetFlattenError);
  }
  _constructArrowBasePoint(t17, e18) {
    if (!t17 || t17.length < 2) return null;
    const r19 = t17[t17.length - 2], n20 = t17[t17.length - 1], o10 = [n20[0] - r19[0], n20[1] - r19[1]];
    return this._curveHelper.normalize(o10), [n20[0] + o10[1] * e18, n20[1] - o10[0] * e18];
  }
};

// node_modules/@arcgis/core/symbols/cim/CIMEffects.js
var r3 = 512;
var n6;
var s8 = class {
  constructor(t17) {
    this._geometry = t17;
  }
  next() {
    const t17 = this._geometry;
    return this._geometry = null, t17;
  }
};
function i7(s18, i19, l14) {
  if (!s18) return null;
  n6 || (n6 = new e5(0, 0, 0, 1));
  const y7 = l14 ? -1 : 1, m10 = "esriGeometryPolygon" === s18.geometryType, c6 = m10 ? i3.Polygon : i3.LineString, p8 = m10 ? 3 : 2;
  let u14, f6;
  for (n6.reset(c6), n6.setPixelMargin(i19 + 1), n6.setExtent(r3); s18.nextPath(); ) if (!(s18.pathSize < p8)) {
    for (s18.nextPoint(), u14 = s18.x, f6 = y7 * s18.y, n6.moveTo(u14, f6); s18.nextPoint(); ) u14 = s18.x, f6 = y7 * s18.y, n6.lineTo(u14, f6);
    m10 && n6.close();
  }
  const g2 = n6.result(false);
  if (g2) {
    const e18 = a5.createEmptyOptimizedCIM(s18.geometryType);
    for (const t17 of g2) {
      e18.startPath();
      for (const o10 of t17) e18.pushXY(o10.x, y7 * o10.y);
    }
    return e18.reset(), e18;
  }
  return null;
}

// node_modules/@arcgis/core/symbols/cim/effects/EffectBuffer.js
var _m = class _m {
  static local() {
    return null === _m.instance && (_m.instance = new _m()), _m.instance;
  }
  execute(e18, t17, i19, s18, r19, n20, o10) {
    return new l6(e18, t17, i19, s18, r19, n20, o10);
  }
};
_m.instance = null;
var m6 = _m;
var l6 = class {
  constructor(e18, t17, i19, s18, o10, m10, l14) {
    this._preventClipping = l14, this._inputGeometries = e18, this._tileKey = s18, this._geometryEngine = o10, this._curveHelper = new s7(), this._size = (void 0 !== t17.size ? t17.size : 1) * i19, this._maxInflateSize = m10 * i19, this._offsetFlattenError = n5 * i19;
  }
  next() {
    let r19;
    for (; r19 = this._inputGeometries.next(); ) {
      if (0 === this._size) return r19;
      if ("esriGeometryEnvelope" === r19.geometryType) {
        if (this._size > 0) {
          const i19 = a5.createEmptyOptimizedCIM(r19.geometryType), s18 = t2(r19)[0], n21 = this._curveHelper.offset(s18, this._size, N.Rounded, 4, this._offsetFlattenError);
          if (n21) return i19.pushPath(n21), i19;
        } else if (this._size < 0) {
          const t17 = r19.asJSON();
          if (Math.min(t17.xmax - t17.xmin, t17.ymax - t17.ymin) + 2 * this._size > 0) return a5.fromJSONCIM({ xmin: t17.xmin - this._size, xmax: t17.xmax + this._size, ymin: t17.ymin - this._size, ymax: t17.ymax + this._size });
        }
      }
      const n20 = this._geometryEngine;
      if (null == n20) return null;
      const m10 = !this._preventClipping && this._tileKey ? i7(r19, this._maxInflateSize, true) : r19;
      if (!m10) continue;
      const l14 = n20.buffer(f.WebMercator, m10.asJSON(), this._size, 1);
      return l14 ? a5.fromJSONCIM(l14) : null;
    }
    return null;
  }
};

// node_modules/@arcgis/core/symbols/cim/effects/EffectControlMeasureLine.js
var _r = class _r {
  static local() {
    return null === _r.instance && (_r.instance = new _r()), _r.instance;
  }
  execute(s18, t17, i19, h12, e18) {
    return new _2(s18, t17, i19);
  }
};
_r.instance = null;
var r4 = _r;
var _2 = class {
  constructor(s18, t17, i19) {
    this._defaultPointSize = 20, this._inputGeometries = s18, this._geomUnitsPerPoint = i19, this._rule = t17.rule ?? R.FullGeometry, this._defaultSize = this._defaultPointSize * i19;
  }
  next() {
    let i19;
    for (; i19 = this._inputGeometries.next(); ) {
      const h12 = this._processGeom(t2(i19));
      if (h12?.length) return a5.fromJSONCIM({ paths: h12 });
    }
    return null;
  }
  _clone(s18) {
    return [s18[0], s18[1]];
  }
  _mid(s18, t17) {
    return [(s18[0] + t17[0]) / 2, (s18[1] + t17[1]) / 2];
  }
  _mix(s18, t17, i19, h12) {
    return [s18[0] * t17 + i19[0] * h12, s18[1] * t17 + i19[1] * h12];
  }
  _add(s18, t17) {
    return [s18[0] + t17[0], s18[1] + t17[1]];
  }
  _add2(s18, t17, i19) {
    return [s18[0] + t17, s18[1] + i19];
  }
  _sub(s18, t17) {
    return [s18[0] - t17[0], s18[1] - t17[1]];
  }
  _dist(s18, t17) {
    return Math.sqrt((s18[0] - t17[0]) * (s18[0] - t17[0]) + (s18[1] - t17[1]) * (s18[1] - t17[1]));
  }
  _norm(s18) {
    return Math.sqrt(s18[0] * s18[0] + s18[1] * s18[1]);
  }
  _normalize(s18, t17 = 1) {
    const i19 = t17 / this._norm(s18);
    s18[0] *= i19, s18[1] *= i19;
  }
  _leftPerpendicular(s18) {
    const t17 = -s18[1], i19 = s18[0];
    s18[0] = t17, s18[1] = i19;
  }
  _leftPerp(s18) {
    return [-s18[1], s18[0]];
  }
  _rightPerpendicular(s18) {
    const t17 = s18[1], i19 = -s18[0];
    s18[0] = t17, s18[1] = i19;
  }
  _rightPerp(s18) {
    return [s18[1], -s18[0]];
  }
  _dotProduct(s18, t17) {
    return s18[0] * t17[0] + s18[1] * t17[1];
  }
  _crossProduct(s18, t17) {
    return s18[0] * t17[1] - s18[1] * t17[0];
  }
  _rotateDirect(s18, t17, i19) {
    const h12 = s18[0] * t17 - s18[1] * i19, e18 = s18[0] * i19 + s18[1] * t17;
    s18[0] = h12, s18[1] = e18;
  }
  _makeCtrlPt(s18) {
    const t17 = [s18[0], s18[1]];
    return e9(t17, 1), t17;
  }
  _addAngledTicks(s18, t17, i19, h12) {
    const e18 = this._sub(i19, t17);
    this._normalize(e18);
    const r19 = this._crossProduct(e18, this._sub(h12, t17));
    let _6;
    _6 = r19 > 0 ? this._rightPerp(e18) : this._leftPerp(e18);
    const c6 = Math.abs(r19) / 2, u14 = [];
    u14.push([t17[0] + (_6[0] - e18[0]) * c6, t17[1] + (_6[1] - e18[1]) * c6]), u14.push(t17), u14.push(i19), u14.push([i19[0] + (_6[0] + e18[0]) * c6, i19[1] + (_6[1] + e18[1]) * c6]), s18.push(u14);
  }
  _addBezier2(s18, t17, i19, h12, e18) {
    if (0 === e18--) return void s18.push(h12);
    const r19 = this._mid(t17, i19), _6 = this._mid(i19, h12), c6 = this._mid(r19, _6);
    this._addBezier2(s18, t17, r19, c6, e18), this._addBezier2(s18, c6, _6, h12, e18);
  }
  _addBezier3(s18, t17, i19, h12, e18, r19) {
    if (0 === r19--) return void s18.push(e18);
    const _6 = this._mid(t17, i19), c6 = this._mid(i19, h12), u14 = this._mid(h12, e18), o10 = this._mid(_6, c6), a13 = this._mid(c6, u14), n20 = this._mid(o10, a13);
    this._addBezier3(s18, t17, _6, o10, n20, r19), this._addBezier3(s18, n20, a13, u14, e18, r19);
  }
  _add90DegArc(s18, t17, i19, h12, e18) {
    const r19 = e18 ?? this._crossProduct(this._sub(i19, t17), this._sub(h12, t17)) > 0, _6 = this._mid(t17, i19), c6 = this._sub(_6, t17);
    r19 ? this._leftPerpendicular(c6) : this._rightPerpendicular(c6), _6[0] += c6[0], _6[1] += c6[1], this._addBezier3(s18, t17, this._mix(t17, 0.33333, _6, 0.66667), this._mix(i19, 0.33333, _6, 0.66667), i19, 4);
  }
  _addArrow(s18, t17, i19) {
    const h12 = t17[0], e18 = t17[1], r19 = t17[t17.length - 1], _6 = this._sub(h12, e18), c6 = this._norm(_6);
    this._normalize(_6);
    const u14 = Math.abs(this._crossProduct(_6, this._sub(r19, e18)));
    let o10 = this._dotProduct(_6, this._sub(r19, e18));
    o10 < 0.05 * c6 ? o10 = 0.05 * c6 : o10 > 0.95 * c6 && (o10 = 0.95 * c6);
    const a13 = 0.5 * u14, n20 = this._leftPerp(_6), p8 = [e18[0] + _6[0] * o10, e18[1] + _6[1] * o10], d4 = t17.length - 1, l14 = [];
    l14.push(i19 ? [-n20[0], -n20[1]] : n20);
    let b5 = [-_6[0], -_6[1]];
    for (let P6 = 1; P6 < d4 - 1; P6++) {
      const s19 = this._sub(t17[P6 + 1], t17[P6]);
      this._normalize(s19);
      const i20 = this._dotProduct(s19, b5), h13 = this._crossProduct(s19, b5), e19 = Math.sqrt((1 + i20) / 2), r20 = this._sub(s19, b5);
      this._normalize(r20), r20[0] /= e19, r20[1] /= e19, l14.push(h13 < 0 ? [-r20[0], -r20[1]] : r20), b5 = s19;
    }
    l14.push(this._rightPerp(b5));
    for (let P6 = l14.length - 1; P6 > 0; P6--) s18.push([t17[P6][0] + l14[P6][0] * a13, t17[P6][1] + l14[P6][1] * a13]);
    s18.push([p8[0] + l14[0][0] * a13, p8[1] + l14[0][1] * a13]), s18.push([p8[0] + l14[0][0] * u14, p8[1] + l14[0][1] * u14]), s18.push(h12), s18.push([p8[0] - l14[0][0] * u14, p8[1] - l14[0][1] * u14]), s18.push([p8[0] - l14[0][0] * a13, p8[1] - l14[0][1] * a13]);
    for (let P6 = 1; P6 < l14.length; P6++) s18.push([t17[P6][0] - l14[P6][0] * a13, t17[P6][1] - l14[P6][1] * a13]);
  }
  _addDash(s18, t17, i19) {
    const h12 = this._norm(i19) / 7;
    this._normalize(i19);
    let e18 = [];
    for (let r19 = 0; r19 <= 7; r19++) e18.push([t17[0] + i19[0] * r19 * h12, t17[1] + i19[1] * r19 * h12]), 1 & r19 && (s18.push(e18), e18 = []);
  }
  _cp2(s18, t17, i19) {
    return s18.length >= 2 ? s18[1] : this._add2(s18[0], t17 * this._defaultSize, i19 * this._defaultSize);
  }
  _cp3(s18, t17, i19, h12) {
    if (s18.length >= 3) return s18[2];
    const e18 = this._mix(s18[0], 1 - i19, t17, i19), r19 = this._sub(t17, s18[0]);
    return this._normalize(r19), this._rightPerpendicular(r19), [e18[0] + r19[0] * h12 * this._defaultSize, e18[1] + r19[1] * h12 * this._defaultSize];
  }
  _arrowPath(s18) {
    if (s18.length > 2) return s18;
    const t17 = s18[0], i19 = this._cp2(s18, -4, 0), h12 = this._sub(t17, i19);
    this._normalize(h12);
    const e18 = this._rightPerp(h12);
    return [t17, i19, [t17[0] + (e18[0] - h12[0]) * this._defaultSize, t17[1] + (e18[1] - h12[1]) * this._defaultSize]];
  }
  _arrowLastSeg(s18) {
    const t17 = s18[0], i19 = this._cp2(s18, -4, 0);
    let h12;
    if (s18.length >= 3) h12 = s18[s18.length - 1];
    else {
      const s19 = this._sub(t17, i19);
      this._normalize(s19);
      const e18 = this._rightPerp(s19);
      h12 = [t17[0] + (e18[0] - s19[0]) * this._defaultSize, t17[1] + (e18[1] - s19[1]) * this._defaultSize];
    }
    return [i19, h12];
  }
  _processGeom(s18) {
    if (!s18) return null;
    const t17 = [];
    for (const r19 of s18) {
      const s19 = r19.length > 1 && h(r19) < this._defaultSize;
      if (!r19 || 0 === r19.length || s19) continue;
      const _6 = r19.length;
      let c6 = r19[0];
      switch (this._rule) {
        case R.PerpendicularFromFirstSegment: {
          const s20 = this._cp2(r19, 0, -1), i19 = this._cp3(r19, s20, 0.5, 4), h12 = [];
          h12.push(i19), h12.push(this._mid(c6, s20)), t17.push(h12);
          break;
        }
        case R.ReversedFirstSegment: {
          const s20 = this._cp2(r19, 0, -1);
          t17.push([s20, c6]);
          break;
        }
        case R.PerpendicularToSecondSegment: {
          if (r19.length < 3) return [];
          const s20 = this._cp2(r19, -4, 1), i19 = this._cp3(r19, s20, 0.882353, -1.94), h12 = [];
          h12.push(this._mid(s20, i19)), h12.push(c6), t17.push(h12);
          break;
        }
        case R.SecondSegmentWithTicks: {
          if (r19.length < 3) return [];
          const s20 = this._cp2(r19, -4, 1), i19 = this._cp3(r19, s20, 0.882353, -1.94), h12 = this._sub(i19, s20);
          let e18;
          e18 = this._crossProduct(h12, this._sub(c6, s20)) > 0 ? this._rightPerp(h12) : this._leftPerp(h12);
          const _7 = [];
          _7.push([s20[0] + (e18[0] - h12[0]) / 3, s20[1] + (e18[1] - h12[1]) / 3]), _7.push(s20), _7.push(i19), _7.push([i19[0] + (e18[0] + h12[0]) / 3, i19[1] + (e18[1] + h12[1]) / 3]), t17.push(_7);
          break;
        }
        case R.DoublePerpendicular: {
          const s20 = this._cp2(r19, 0, -1), i19 = this._cp3(r19, s20, 0.5, 3), h12 = this._mid(c6, s20), e18 = this._sub(h12, i19);
          this._normalize(e18);
          const _7 = this._crossProduct(e18, this._sub(c6, i19));
          this._leftPerpendicular(e18);
          const u14 = [];
          u14.push(c6), u14.push([i19[0] + e18[0] * _7, i19[1] + e18[1] * _7]), t17.push(u14);
          const o10 = [];
          o10.push([i19[0] - e18[0] * _7, i19[1] - e18[1] * _7]), o10.push(s20), t17.push(o10);
          break;
        }
        case R.OppositeToFirstSegment: {
          const s20 = this._cp2(r19, 0, -1), i19 = this._cp3(r19, s20, 0.5, 3), h12 = this._mid(c6, s20), e18 = this._sub(h12, i19);
          this._normalize(e18);
          const _7 = this._crossProduct(e18, this._sub(c6, i19));
          this._leftPerpendicular(e18);
          const u14 = [];
          u14.push([i19[0] + e18[0] * _7, i19[1] + e18[1] * _7]), u14.push([i19[0] - e18[0] * _7, i19[1] - e18[1] * _7]), t17.push(u14);
          break;
        }
        case R.TriplePerpendicular: {
          const s20 = this._cp2(r19, 0, -1), i19 = this._cp3(r19, s20, 0.5, 4), h12 = this._mid(c6, s20), e18 = this._sub(h12, i19);
          this._normalize(e18);
          const _7 = this._crossProduct(e18, this._sub(c6, i19));
          this._leftPerpendicular(e18);
          const u14 = [];
          u14.push([i19[0] + e18[0] * _7 * 0.8, i19[1] + e18[1] * _7 * 0.8]), u14.push([h12[0] + 0.8 * (c6[0] - h12[0]), h12[1] + 0.8 * (c6[1] - h12[1])]), t17.push(u14), t17.push([i19, h12]);
          const o10 = [];
          o10.push([i19[0] - e18[0] * _7 * 0.8, i19[1] - e18[1] * _7 * 0.8]), o10.push([h12[0] + 0.8 * (s20[0] - h12[0]), h12[1] + 0.8 * (s20[1] - h12[1])]), t17.push(o10);
          break;
        }
        case R.HalfCircleFirstSegment: {
          const s20 = this._cp2(r19, 0, -1), i19 = this._cp3(r19, s20, 0.5, 4), h12 = this._mid(c6, s20);
          let e18 = this._sub(s20, c6);
          const _7 = Math.cos(Math.PI / 18), u14 = Math.sin(Math.PI / 18), o10 = Math.sqrt((1 + _7) / 2), a13 = Math.sqrt((1 - _7) / 2), n20 = [];
          let p8;
          this._crossProduct(e18, this._sub(i19, c6)) > 0 ? (n20.push(c6), e18 = this._sub(c6, h12), p8 = s20) : (n20.push(s20), e18 = this._sub(s20, h12), p8 = c6), this._rotateDirect(e18, o10, a13), e18[0] /= o10, e18[1] /= o10;
          for (let t18 = 1; t18 <= 18; t18++) n20.push(this._add(h12, e18)), this._rotateDirect(e18, _7, u14);
          n20.push(p8), t17.push(n20);
          break;
        }
        case R.HalfCircleSecondSegment: {
          const s20 = this._cp2(r19, 0, -1), i19 = this._cp3(r19, s20, 1, -1);
          let h12 = this._sub(c6, s20);
          this._normalize(h12);
          const e18 = this._crossProduct(h12, this._sub(i19, s20)) / 2;
          this._leftPerpendicular(h12);
          const _7 = [s20[0] + h12[0] * e18, s20[1] + h12[1] * e18];
          h12 = this._sub(s20, _7);
          const u14 = Math.cos(Math.PI / 18);
          let o10 = Math.sin(Math.PI / 18);
          e18 > 0 && (o10 = -o10);
          const a13 = [s20];
          for (let t18 = 1; t18 <= 18; t18++) this._rotateDirect(h12, u14, o10), a13.push(this._add(_7, h12));
          t17.push(a13);
          break;
        }
        case R.HalfCircleExtended: {
          const s20 = this._cp2(r19, 0, -2), i19 = this._cp3(r19, s20, 1, -1);
          let h12;
          if (_6 >= 4) h12 = r19[3];
          else {
            const t18 = this._sub(c6, s20);
            h12 = this._add(i19, t18);
          }
          const e18 = this._dist(s20, i19) / 2 / 0.75, u14 = this._sub(s20, c6);
          this._normalize(u14, e18);
          const o10 = this._sub(i19, h12);
          this._normalize(o10, e18);
          const a13 = [h12, i19];
          t17.push(a13);
          const n20 = [this._clone(i19)];
          this._addBezier3(n20, i19, this._add(i19, o10), this._add(s20, u14), s20, 4), n20.push(c6), t17.push(n20);
          break;
        }
        case R.OpenCircle: {
          const s20 = this._cp2(r19, -2, 0), i19 = this._sub(s20, c6), h12 = Math.cos(Math.PI / 18), e18 = -Math.sin(Math.PI / 18), _7 = [s20];
          for (let t18 = 1; t18 <= 33; t18++) this._rotateDirect(i19, h12, e18), _7.push(this._add(c6, i19));
          t17.push(_7);
          break;
        }
        case R.CoverageEdgesWithTicks: {
          const s20 = this._cp2(r19, 0, -1);
          let i19, h12;
          if (_6 >= 3) i19 = r19[2];
          else {
            const t18 = this._sub(s20, c6), h13 = this._leftPerp(t18);
            i19 = [c6[0] + h13[0] - 0.25 * t18[0], c6[1] + h13[1] - 0.25 * t18[1]];
          }
          if (_6 >= 4) h12 = r19[3];
          else {
            const t18 = this._mid(c6, s20), e19 = this._sub(c6, s20);
            this._normalize(e19), this._leftPerpendicular(e19);
            const r20 = this._crossProduct(e19, this._sub(i19, t18));
            this._rightPerpendicular(e19), h12 = [i19[0] + e19[0] * r20 * 2, i19[1] + e19[1] * r20 * 2];
          }
          const e18 = this._sub(s20, c6);
          let u14, o10;
          u14 = this._crossProduct(e18, this._sub(i19, c6)) > 0 ? this._rightPerp(e18) : this._leftPerp(e18), o10 = [], o10.push(i19), o10.push(c6), o10.push([c6[0] + (u14[0] - e18[0]) / 3, c6[1] + (u14[1] - e18[1]) / 3]), t17.push(o10), u14 = this._crossProduct(e18, this._sub(h12, s20)) > 0 ? this._rightPerp(e18) : this._leftPerp(e18), o10 = [], o10.push([s20[0] + (u14[0] + e18[0]) / 3, s20[1] + (u14[1] + e18[1]) / 3]), o10.push(s20), o10.push(h12), t17.push(o10);
          break;
        }
        case R.GapExtentWithDoubleTicks: {
          const s20 = this._cp2(r19, 0, 2), i19 = this._cp3(r19, s20, 0, 1);
          let h12;
          if (_6 >= 4) h12 = r19[3];
          else {
            const t18 = this._sub(s20, c6);
            h12 = this._add(i19, t18);
          }
          this._addAngledTicks(t17, c6, s20, this._mid(i19, h12)), this._addAngledTicks(t17, i19, h12, this._mid(c6, s20));
          break;
        }
        case R.GapExtentMidline: {
          const s20 = this._cp2(r19, 2, 0), i19 = this._cp3(r19, s20, 0, 1);
          let h12;
          if (_6 >= 4) h12 = r19[3];
          else {
            const t18 = this._sub(s20, c6);
            h12 = this._add(i19, t18);
          }
          const e18 = [];
          e18.push(this._mid(c6, i19)), e18.push(this._mid(s20, h12)), t17.push(e18);
          break;
        }
        case R.Chevron: {
          const s20 = this._cp2(r19, -1, -1);
          let i19;
          if (_6 >= 3) i19 = r19[2];
          else {
            const t18 = this._sub(s20, c6);
            this._leftPerpendicular(t18), i19 = this._add(c6, t18);
          }
          t17.push([s20, this._makeCtrlPt(c6), i19]);
          break;
        }
        case R.PerpendicularWithArc: {
          const s20 = this._cp2(r19, 0, -2), i19 = this._cp3(r19, s20, 0.5, -1), h12 = this._sub(s20, c6), e18 = this._norm(h12);
          h12[0] /= e18, h12[1] /= e18;
          const u14 = this._crossProduct(h12, this._sub(i19, c6));
          let o10 = this._dotProduct(h12, this._sub(i19, c6));
          o10 < 0.05 * e18 ? o10 = 0.05 * e18 : o10 > 0.95 * e18 && (o10 = 0.95 * e18);
          const a13 = [c6[0] + h12[0] * o10, c6[1] + h12[1] * o10];
          let n20 = this._leftPerp(h12), p8 = [];
          if (p8.push([a13[0] - n20[0] * u14, a13[1] - n20[1] * u14]), p8.push([a13[0] + n20[0] * u14, a13[1] + n20[1] * u14]), t17.push(p8), _6 >= 4) {
            const s21 = r19[3];
            let i20 = this._dotProduct(h12, this._sub(s21, c6));
            i20 < 0.1 * e18 ? i20 = 0.1 * e18 : i20 > 0.9 * e18 && (i20 = 0.9 * e18);
            const _7 = [c6[0] + h12[0] * i20, c6[1] + h12[1] * i20], u15 = this._crossProduct(h12, this._sub(s21, c6)), o11 = [];
            o11.push([_7[0] - n20[0] * u15, _7[1] - n20[1] * u15]), o11.push([_7[0] + n20[0] * u15, _7[1] + n20[1] * u15]), t17.push(o11);
          }
          const d4 = [s20[0] + n20[0] * u14, s20[1] + n20[1] * u14];
          n20 = this._sub(s20, d4);
          const l14 = Math.cos(Math.PI / 18);
          let b5 = Math.sin(Math.PI / 18);
          u14 < 0 && (b5 = -b5), p8 = [c6, s20];
          for (let t18 = 1; t18 <= 9; t18++) this._rotateDirect(n20, l14, b5), p8.push(this._add(d4, n20));
          t17.push(p8);
          break;
        }
        case R.ClosedHalfCircle: {
          const s20 = this._cp2(r19, 2, 0), i19 = this._mid(c6, s20), h12 = this._sub(s20, i19), e18 = Math.cos(Math.PI / 18), _7 = Math.sin(Math.PI / 18), u14 = [c6, s20];
          for (let t18 = 1; t18 <= 18; t18++) this._rotateDirect(h12, e18, _7), u14.push(this._add(i19, h12));
          t17.push(u14);
          break;
        }
        case R.TripleParallelExtended: {
          const s20 = this._cp2(r19, 0, -2), i19 = this._cp3(r19, s20, 1, -2), e18 = this._mid(c6, s20), _7 = this._sub(i19, s20);
          this._normalize(_7);
          const u14 = Math.abs(this._crossProduct(_7, this._sub(e18, s20))) / 2, o10 = this._dist(s20, i19), a13 = [s20, c6];
          a13.push([c6[0] + _7[0] * o10 * 0.5, c6[1] + _7[1] * o10 * 0.5]), t17.push(a13);
          const n20 = [];
          n20.push([e18[0] - _7[0] * u14, e18[1] - _7[1] * u14]), n20.push([e18[0] + _7[0] * o10 * 0.375, e18[1] + _7[1] * o10 * 0.375]), e9(n20[n20.length - 1], 1), n20.push([e18[0] + _7[0] * o10 * 0.75, e18[1] + _7[1] * o10 * 0.75]), t17.push(n20);
          const p8 = [s20, i19];
          t17.push(p8);
          break;
        }
        case R.ParallelWithTicks: {
          const s20 = this._cp2(r19, 3, 0), i19 = this._cp3(r19, s20, 0.5, -1), h12 = this._sub(i19, s20);
          this._normalize(h12);
          const e18 = this._crossProduct(h12, this._sub(i19, c6));
          this._leftPerpendicular(h12), this._addAngledTicks(t17, c6, s20, i19), this._addAngledTicks(t17, this._mix(c6, 1, h12, e18), this._mix(s20, 1, h12, e18), this._mid(c6, s20));
          break;
        }
        case R.Parallel: {
          const s20 = this._cp2(r19, 3, 0), i19 = this._cp3(r19, s20, 0.5, -1), h12 = this._sub(s20, c6);
          this._normalize(h12);
          const e18 = this._leftPerp(h12), _7 = this._crossProduct(h12, this._sub(i19, c6));
          let u14 = [c6, s20];
          t17.push(u14), u14 = [], u14.push([c6[0] + e18[0] * _7, c6[1] + e18[1] * _7]), u14.push([s20[0] + e18[0] * _7, s20[1] + e18[1] * _7]), t17.push(u14);
          break;
        }
        case R.PerpendicularToFirstSegment: {
          const s20 = this._cp2(r19, 3, 0), i19 = this._cp3(r19, s20, 0.5, -1), h12 = this._mid(c6, s20), e18 = this._sub(s20, c6);
          this._normalize(e18);
          const _7 = this._crossProduct(e18, this._sub(i19, c6));
          this._leftPerpendicular(e18);
          const u14 = [];
          u14.push([h12[0] - e18[0] * _7 * 0.25, h12[1] - e18[1] * _7 * 0.25]), u14.push([h12[0] + e18[0] * _7 * 1.25, h12[1] + e18[1] * _7 * 1.25]), t17.push(u14);
          break;
        }
        case R.ParallelOffset: {
          const s20 = this._cp2(r19, 3, 0), i19 = this._cp3(r19, s20, 0.5, -1), h12 = this._sub(s20, c6);
          this._normalize(h12);
          const e18 = this._crossProduct(h12, this._sub(i19, c6));
          this._leftPerpendicular(h12);
          const _7 = [];
          _7.push([c6[0] - h12[0] * e18, c6[1] - h12[1] * e18]), _7.push([s20[0] - h12[0] * e18, s20[1] - h12[1] * e18]), t17.push(_7);
          const u14 = [];
          u14.push([c6[0] + h12[0] * e18, c6[1] + h12[1] * e18]), u14.push([s20[0] + h12[0] * e18, s20[1] + h12[1] * e18]), t17.push(u14);
          break;
        }
        case R.OffsetOpposite: {
          const s20 = this._cp2(r19, 3, 0), i19 = this._cp3(r19, s20, 0.5, -1), h12 = this._sub(s20, c6);
          this._normalize(h12);
          const e18 = this._crossProduct(h12, this._sub(i19, c6));
          this._leftPerpendicular(h12);
          const _7 = [];
          _7.push([c6[0] - h12[0] * e18, c6[1] - h12[1] * e18]), _7.push([s20[0] - h12[0] * e18, s20[1] - h12[1] * e18]), t17.push(_7);
          break;
        }
        case R.OffsetSame: {
          const s20 = this._cp2(r19, 3, 0), i19 = this._cp3(r19, s20, 0.5, -1), h12 = this._sub(s20, c6);
          this._normalize(h12);
          const e18 = this._crossProduct(h12, this._sub(i19, c6));
          this._leftPerpendicular(h12);
          const _7 = [];
          _7.push([c6[0] + h12[0] * e18, c6[1] + h12[1] * e18]), _7.push([s20[0] + h12[0] * e18, s20[1] + h12[1] * e18]), t17.push(_7);
          break;
        }
        case R.CircleWithArc: {
          let s20 = this._cp2(r19, 3, 0);
          const i19 = this._cp3(r19, s20, 0.5, -1);
          let e18, u14;
          if (_6 >= 4) e18 = r19[3], u14 = this._crossProduct(this._sub(e18, s20), this._sub(i19, s20)) > 0;
          else {
            e18 = s20, u14 = this._crossProduct(this._sub(e18, c6), this._sub(i19, c6)) > 0;
            const t18 = 24 * this._geomUnitsPerPoint, h12 = this._sub(e18, c6);
            this._normalize(h12, t18);
            const r20 = Math.sqrt(2) / 2;
            this._rotateDirect(h12, r20, u14 ? r20 : -r20), s20 = this._add(c6, h12);
          }
          const o10 = this._sub(s20, c6), a13 = Math.cos(Math.PI / 18), n20 = Math.sin(Math.PI / 18), p8 = [s20];
          for (let t18 = 1; t18 <= 36; t18++) this._rotateDirect(o10, a13, n20), p8.push(this._add(c6, o10));
          this._add90DegArc(p8, s20, e18, i19, u14), e9(p8[p8.length - 8], 1), t17.push(p8);
          break;
        }
        case R.DoubleJog: {
          let s20, i19 = this._cp2(r19, -3, 1), h12 = this._cp3(r19, i19, -1, -0.5);
          if (_6 >= 4) s20 = r19[3];
          else {
            const t18 = c6;
            c6 = i19, s20 = h12;
            const e19 = this._dist(c6, t18), r20 = this._dist(s20, t18);
            let _7 = 30 * this._geomUnitsPerPoint;
            0.5 * e19 < _7 && (_7 = 0.5 * e19), 0.5 * r20 < _7 && (_7 = 0.5 * r20), i19 = this._mix(c6, _7 / e19, t18, (e19 - _7) / e19), h12 = this._mix(s20, _7 / r20, t18, (r20 - _7) / r20);
          }
          const e18 = this._mid(c6, i19), u14 = this._mid(s20, h12), o10 = this._dist(c6, i19), a13 = this._dist(h12, s20);
          let n20 = Math.min(o10, a13) / 8;
          n20 = Math.min(n20, 24 * this._geomUnitsPerPoint);
          const p8 = Math.cos(Math.PI / 4);
          let d4 = this._sub(c6, i19);
          this._normalize(d4, n20), this._crossProduct(d4, this._sub(s20, i19)) > 0 ? this._rotateDirect(d4, p8, -p8) : this._rotateDirect(d4, p8, p8);
          let l14 = [];
          l14.push(i19), l14.push(this._add(e18, d4)), l14.push(this._sub(e18, d4)), l14.push(c6), t17.push(l14), d4 = this._sub(s20, h12), this._normalize(d4, n20), this._crossProduct(d4, this._sub(c6, h12)) < 0 ? this._rotateDirect(d4, p8, p8) : this._rotateDirect(d4, p8, -p8), l14 = [], l14.push(h12), l14.push(this._add(u14, d4)), l14.push(this._sub(u14, d4)), l14.push(s20), t17.push(l14);
          break;
        }
        case R.PerpendicularOffset: {
          const s20 = this._cp2(r19, -4, 1), i19 = this._cp3(r19, s20, 0.882353, -1.94), h12 = this._sub(i19, s20);
          this._crossProduct(h12, this._sub(c6, s20)) > 0 ? this._rightPerpendicular(h12) : this._leftPerpendicular(h12);
          const e18 = [h12[0] / 8, h12[1] / 8], _7 = this._sub(this._mid(s20, i19), e18);
          t17.push([_7, c6]);
          break;
        }
        case R.LineExcludingLastSegment: {
          const s20 = this._arrowPath(r19), i19 = [];
          let h12 = s20.length - 2;
          for (; h12--; ) i19.push(s20[h12]);
          t17.push(i19);
          break;
        }
        case R.MultivertexArrow: {
          const s20 = this._arrowPath(r19), i19 = [];
          this._addArrow(i19, s20, false), t17.push(i19);
          break;
        }
        case R.CrossedArrow: {
          const s20 = this._arrowPath(r19), i19 = [];
          this._addArrow(i19, s20, true), t17.push(i19);
          break;
        }
        case R.ChevronArrow: {
          const [s20, i19] = this._arrowLastSeg(r19), h12 = 10 * this._geomUnitsPerPoint, e18 = this._sub(c6, s20), _7 = this._norm(e18);
          this._normalize(e18);
          const u14 = this._crossProduct(e18, this._sub(i19, s20));
          let o10 = this._dotProduct(e18, this._sub(i19, s20));
          o10 < 0.05 * _7 ? o10 = 0.05 * _7 : o10 > 0.95 * _7 - h12 && (o10 = 0.95 * _7 - h12);
          const a13 = [s20[0] + e18[0] * o10, s20[1] + e18[1] * o10], n20 = this._leftPerp(e18), p8 = [];
          p8.push([a13[0] + n20[0] * u14 + e18[0] * h12, a13[1] + n20[1] * u14 + e18[1] * h12]), p8.push(c6), p8.push([a13[0] - n20[0] * u14 + e18[0] * h12, a13[1] - n20[1] * u14 + e18[1] * h12]), t17.push(p8);
          break;
        }
        case R.ChevronArrowOffset: {
          const [s20, i19] = this._arrowLastSeg(r19), h12 = this._sub(c6, s20), e18 = this._norm(h12);
          this._normalize(h12);
          const _7 = this._crossProduct(h12, this._sub(i19, s20));
          let u14 = this._dotProduct(h12, this._sub(i19, s20));
          u14 < 0.05 * e18 ? u14 = 0.05 * e18 : u14 > 0.95 * e18 && (u14 = 0.95 * e18);
          const o10 = [s20[0] + h12[0] * u14, s20[1] + h12[1] * u14];
          this._leftPerpendicular(h12);
          const a13 = [];
          a13.push([o10[0] + h12[0] * _7 * 0.5, o10[1] + h12[1] * _7 * 0.5]), a13.push(this._mid(o10, c6)), a13.push([o10[0] - h12[0] * _7 * 0.5, o10[1] - h12[1] * _7 * 0.5]), t17.push(a13);
          break;
        }
        case R.PartialFirstSegment: {
          const [s20, i19] = this._arrowLastSeg(r19), h12 = this._sub(c6, s20), e18 = this._norm(h12);
          this._normalize(h12);
          let _7 = this._dotProduct(h12, this._sub(i19, s20));
          _7 < 0.05 * e18 ? _7 = 0.05 * e18 : _7 > 0.95 * e18 && (_7 = 0.95 * e18);
          const u14 = [s20[0] + h12[0] * _7, s20[1] + h12[1] * _7];
          t17.push([s20, u14]);
          break;
        }
        case R.Arch: {
          const s20 = this._cp2(r19, 0, -1), i19 = this._cp3(r19, s20, 0.5, 1), h12 = this._sub(c6, s20), e18 = this._mix(i19, 1, h12, 0.55), _7 = this._mix(i19, 1, h12, -0.55), u14 = [c6];
          this._addBezier2(u14, c6, e18, i19, 4), this._addBezier2(u14, i19, _7, s20, 4), t17.push(u14);
          break;
        }
        case R.CurvedParallelTicks: {
          const s20 = this._cp2(r19, -4, 1), i19 = this._cp3(r19, s20, 0.882353, -1.94), h12 = this._sub(i19, s20);
          this._crossProduct(h12, this._sub(c6, s20)) > 0 ? this._rightPerpendicular(h12) : this._leftPerpendicular(h12);
          const e18 = [h12[0] / 8, h12[1] / 8], _7 = this._sub(this._mid(s20, i19), e18), u14 = this._sub(this._mix(s20, 0.75, i19, 0.25), e18), o10 = this._sub(this._mix(s20, 0.25, i19, 0.75), e18), a13 = [s20];
          this._addBezier2(a13, s20, u14, _7, 3), this._addBezier2(a13, _7, o10, i19, 3), t17.push(a13);
          for (let r20 = 0; r20 < 8; r20++) {
            const s21 = a13[2 * r20 + 1], i20 = [this._clone(s21)];
            i20.push(this._add(s21, [h12[0] / 4, h12[1] / 4])), t17.push(i20);
          }
          break;
        }
        case R.Arc90Degrees: {
          const s20 = this._cp2(r19, 0, -1), i19 = this._cp3(r19, s20, 0.5, 1), h12 = [s20];
          this._add90DegArc(h12, s20, c6, i19), t17.push(h12);
          break;
        }
        case R.TipWithPerpendicularAndTicks: {
          const [s20, i19] = this._arrowLastSeg(r19), h12 = 10 * this._geomUnitsPerPoint, e18 = this._sub(c6, s20), _7 = this._norm(e18);
          this._normalize(e18);
          let u14 = this._crossProduct(e18, this._sub(i19, s20)), o10 = this._dotProduct(e18, this._sub(i19, s20));
          o10 < 0.05 * _7 ? o10 = 0.05 * _7 : o10 > 0.95 * _7 - h12 && (o10 = 0.95 * _7 - h12);
          const a13 = this._leftPerp(e18), n20 = [c6[0] - e18[0] * h12, c6[1] - e18[1] * h12], p8 = 0.5 * Math.max(_7 - o10 - h12, h12);
          u14 = Math.abs(u14);
          const d4 = [];
          d4.push([n20[0] + a13[0] * (u14 + p8) - e18[0] * p8, n20[1] + a13[1] * (u14 + p8) - e18[1] * p8]), d4.push([n20[0] + a13[0] * u14, n20[1] + a13[1] * u14]), d4.push([n20[0] - a13[0] * u14, n20[1] - a13[1] * u14]), d4.push([n20[0] - a13[0] * (u14 + p8) - e18[0] * p8, n20[1] - a13[1] * (u14 + p8) - e18[1] * p8]), t17.push(d4), t17.push([n20, c6]);
          break;
        }
        case R.ConcentricCircles: {
          const s20 = this._cp2(r19, 1, 0), i19 = this._cp3(r19, s20, 2, 0), e18 = Math.cos(Math.PI / 18), u14 = Math.sin(Math.PI / 18);
          let o10 = this._dist(s20, c6), a13 = [o10, 0], n20 = [];
          for (let t18 = 0; t18 <= 36; t18++) n20.push(this._add(c6, a13)), this._rotateDirect(a13, e18, u14);
          if (t17.push(n20), _6 >= 4) {
            n20 = [];
            const s21 = r19[3];
            o10 = this._dist(s21, c6), a13 = [o10, 0];
            for (let t18 = 0; t18 <= 36; t18++) n20.push(this._add(c6, a13)), 0 === t18 && (n20.push(this._add(c6, a13)), e9(n20[1], 1)), this._rotateDirect(a13, e18, u14);
            t17.push(n20);
          }
          n20 = [], o10 = this._dist(i19, c6), a13 = [o10, 0];
          for (let t18 = 0; t18 <= 36; t18++) n20.push(this._add(c6, a13)), this._rotateDirect(a13, e18, u14);
          t17.push(n20);
          break;
        }
        case R.DoubleJogArrow: {
          c6 = this._arrowPath(r19)[0];
          const [s20, i19] = this._arrowLastSeg(r19), h12 = this._sub(c6, s20), e18 = this._norm(h12);
          this._normalize(h12);
          const _7 = Math.abs(this._crossProduct(h12, this._sub(i19, c6)));
          let u14 = Math.abs(this._dotProduct(h12, this._sub(i19, c6)));
          u14 < 0.05 * e18 ? u14 = 0.05 * e18 : u14 > 0.95 * e18 && (u14 = 0.95 * e18);
          const o10 = Math.max(_7, u14), a13 = this._leftPerp(h12);
          let n20 = [];
          const p8 = [c6[0] - h12[0] * u14 * 0.5 + a13[0] * _7 * 0.5, c6[1] - h12[1] * u14 * 0.5 + a13[1] * _7 * 0.5];
          n20.push([p8[0], p8[1]]), p8[0] += h12[0] * o10 * 0.5 + a13[0] * o10 * 0.4, p8[1] += h12[1] * o10 * 0.5 + a13[1] * o10 * 0.4, n20.push([p8[0], p8[1]]), p8[0] -= a13[0] * o10 * 0.25, p8[1] -= a13[1] * o10 * 0.25, n20.push([p8[0], p8[1]]), p8[0] += h12[0] * o10 * 0.5 + a13[0] * o10 * 0.4, p8[1] += h12[1] * o10 * 0.5 + a13[1] * o10 * 0.4, n20.push([p8[0], p8[1]]), t17.push(n20), n20 = [], p8[0] = c6[0] - h12[0] * u14 * 0.5 - a13[0] * _7 * 0.5, p8[1] = c6[1] - h12[1] * u14 * 0.5 - a13[1] * _7 * 0.5, n20.push([p8[0], p8[1]]), p8[0] += h12[0] * o10 * 0.5 - a13[0] * o10 * 0.4, p8[1] += h12[1] * o10 * 0.5 - a13[1] * o10 * 0.4, n20.push([p8[0], p8[1]]), p8[0] += a13[0] * o10 * 0.25, p8[1] += a13[1] * o10 * 0.25, n20.push([p8[0], p8[1]]), p8[0] += h12[0] * o10 * 0.5 - a13[0] * o10 * 0.4, p8[1] += h12[1] * o10 * 0.5 - a13[1] * o10 * 0.4, n20.push([p8[0], p8[1]]), t17.push(n20);
          break;
        }
        case R.LinkedChevrons: {
          const s20 = this._cp2(r19, -5, 0), i19 = this._cp3(r19, s20, -0.2, 1), h12 = this._sub(c6, s20);
          this._normalize(h12);
          const e18 = this._leftPerp(h12), _7 = Math.abs(this._crossProduct(h12, this._sub(i19, s20)));
          t17.push([s20, c6]);
          const u14 = [];
          u14.push([c6[0] - h12[0] * _7 + e18[0] * _7, c6[1] - h12[1] * _7 + e18[1] * _7]), u14.push(c6), u14.push([c6[0] - h12[0] * _7 - e18[0] * _7, c6[1] - h12[1] * _7 - e18[1] * _7]), t17.push(u14), this._addDash(t17, s20, [-h12[0] * _7 + e18[0] * _7, -h12[1] * _7 + e18[1] * _7]), this._addDash(t17, s20, [-h12[0] * _7 - e18[0] * _7, -h12[1] * _7 - e18[1] * _7]);
          break;
        }
        case R.SegmentThenHalfCircle: {
          const s20 = this._cp2(r19, 2, 0), i19 = this._cp3(r19, s20, 1.5, 0);
          let h12;
          h12 = _6 >= 4 ? r19[3] : this._cp3(r19, s20, 1.25, -0.5);
          const e18 = this._sub(s20, c6);
          this._normalize(e18);
          const u14 = 0.5 * this._dist(s20, i19), o10 = this._crossProduct(e18, this._sub(h12, c6)) > 0, a13 = Math.cos(Math.PI / 18);
          let n20 = Math.sin(Math.PI / 18);
          o10 && (n20 = -n20);
          const p8 = [c6, s20];
          e18[0] *= u14, e18[1] *= u14;
          const d4 = this._add(s20, e18);
          e18[0] = -e18[0], e18[1] = -e18[1];
          for (let t18 = 1; t18 <= 18; t18++) this._rotateDirect(e18, a13, n20), p8.push(this._add(d4, e18));
          t17.push(p8);
          break;
        }
        case R.LineWithStraightTicks: {
          const s20 = this._cp2(r19, -2, 1), i19 = this._cp3(r19, s20, -1, -0.5), h12 = this._sub(i19, s20);
          this._normalize(h12);
          const e18 = this._dotProduct(h12, this._sub(s20, c6)), _7 = this._dotProduct(h12, this._sub(i19, c6));
          let u14 = [c6];
          u14.push([c6[0] + h12[0] * e18, c6[1] + h12[1] * e18]), u14.push(s20), t17.push(u14), u14 = [c6], u14.push([c6[0] + h12[0] * _7, c6[1] + h12[1] * _7]), u14.push(i19), t17.push(u14);
          break;
        }
        case R.DoubleCurve: {
          const s20 = this._cp2(r19, -5, -1), i19 = this._cp3(r19, s20, 2, 0), e18 = Math.atan2(1, 5), _7 = Math.cos(e18), u14 = Math.sin(e18), o10 = this._sub(s20, c6), a13 = this._dist(c6, s20);
          this._normalize(o10), this._rotateDirect(o10, _7, -u14);
          const n20 = [c6];
          n20.push([c6[0] + o10[0] * a13 * 0.5, c6[1] + o10[1] * a13 * 0.5]), e9(n20[1], 1), n20.push([c6[0] + o10[0] * a13 * 0.8, c6[1] + o10[1] * a13 * 0.8]), this._addBezier2(n20, n20[2], [c6[0] + o10[0] * a13, c6[1] + o10[1] * a13], s20, 3);
          const p8 = this._sub(i19, s20), d4 = this._dist(s20, i19);
          this._normalize(p8), this._rotateDirect(p8, _7, -u14), this._addBezier2(n20, s20, [i19[0] - p8[0] * d4, i19[1] - p8[1] * d4], [i19[0] - p8[0] * d4 * 0.8, i19[1] - p8[1] * d4 * 0.8], 3), n20.push(i19), t17.push(n20);
          break;
        }
        case R.ParallelWithTicksByWidth: {
          const s20 = this._cp2(r19, 0, -1), i19 = this._cp3(r19, s20, 0.5, 3), h12 = this._sub(s20, c6);
          this._normalize(h12);
          const e18 = this._crossProduct(h12, this._sub(i19, c6));
          this._leftPerpendicular(h12), e18 > 0 ? (this._addAngledTicks(t17, c6, [c6[0] + h12[0] * e18, c6[1] + h12[1] * e18], s20), this._addAngledTicks(t17, s20, [s20[0] + h12[0] * e18, s20[1] + h12[1] * e18], c6)) : (this._addAngledTicks(t17, [c6[0] + h12[0] * e18, c6[1] + h12[1] * e18], c6, s20), this._addAngledTicks(t17, [s20[0] + h12[0] * e18, s20[1] + h12[1] * e18], c6, s20));
          break;
        }
        case R.EnclosingRoundedRectangle: {
          const s20 = this._cp2(r19, 3, -2), t18 = [Math.min(c6[0], s20[0]), Math.max(c6[1], s20[1])], i19 = [Math.max(c6[0], s20[0]), Math.min(c6[1], s20[1])], h12 = i19[0] - t18[0], e18 = t18[1] - i19[1], _7 = Math.min(h12, e18) / 10, u14 = [];
          u14.push([t18[0] + _7 + 0.75 * (h12 - 2 * _7), t18[1]]), u14.push([i19[0] - _7, t18[1]]), this._add90DegArc(u14, [i19[0] - _7, t18[1]], [i19[0], t18[1] - _7], [i19[0], t18[1]]), u14.push([i19[0], i19[1] + _7]), this._add90DegArc(u14, [i19[0], i19[1] + _7], [i19[0] - _7, i19[1]], i19), u14.push([t18[0] + _7, i19[1]]), this._add90DegArc(u14, [t18[0] + _7, i19[1]], [t18[0], i19[1] + _7], [t18[0], i19[1]]), u14.push([t18[0], t18[1] - _7]), this._add90DegArc(u14, [t18[0], t18[1] - _7], [t18[0] + _7, t18[1]], t18), u14.push([t18[0] + _7 + 0.75 * (h12 - 2 * _7), t18[1]]);
          break;
        }
        case R.FullGeometry:
        default:
          t17.push(r19);
      }
    }
    return t17;
  }
};

// node_modules/@arcgis/core/symbols/cim/effects/EffectCut.js
var _r2 = class _r2 {
  static local() {
    return null === _r2.instance && (_r2.instance = new _r2()), _r2.instance;
  }
  execute(e18, t17, i19, r19, s18) {
    return new u8(e18, t17, i19);
  }
};
_r2.instance = null;
var r5 = _r2;
var u8 = class extends r2 {
  constructor(e18, t17, r19) {
    super(e18, true, true), this._curveHelper = new s7(), this._beginCut = (void 0 !== t17.beginCut ? t17.beginCut : 1) * r19, this._endCut = (void 0 !== t17.endCut ? t17.endCut : 1) * r19, this._middleCut = (void 0 !== t17.middleCut ? t17.middleCut : 0) * r19, this._invert = void 0 !== t17.invert && t17.invert, this._beginCut < 0 && (this._beginCut = 0), this._endCut < 0 && (this._endCut = 0), this._middleCut < 0 && (this._middleCut = 0);
  }
  processPath(t17) {
    const { _beginCut: i19, _endCut: r19, _middleCut: u14 } = this, s18 = t17.pathLength(), n20 = a5.createEmptyOptimizedCIM("esriGeometryPolyline");
    if (this._invert) {
      if (0 !== i19 || 0 !== r19 || 0 !== u14) if (i19 + r19 + u14 >= s18) for (n20.startPath(); t17.nextPoint(); ) n20.pushXY(t17.x, t17.y);
      else this._curveHelper.appendSubCurve(n20, t17, 0, i19), this._curveHelper.appendSubCurve(n20, t17, 0.5 * (s18 - u14), 0.5 * (s18 + u14)), this._curveHelper.appendSubCurve(n20, t17, s18 - r19, r19);
    } else if (0 === i19 && 0 === r19 && 0 === u14) for (n20.startPath(); t17.nextPoint(); ) n20.pushXY(t17.x, t17.y);
    else i19 + r19 + u14 < s18 && (0 === u14 ? this._curveHelper.appendSubCurve(n20, t17, i19, s18 - r19) : (this._curveHelper.appendSubCurve(n20, t17, i19, 0.5 * (s18 - u14)), this._curveHelper.appendSubCurve(n20, t17, 0.5 * (s18 + u14), s18 - r19)));
    return 0 === n20.totalSize ? null : n20;
  }
};

// node_modules/@arcgis/core/symbols/cim/GeometryWalker.js
var i8 = 1e-7;
var n7 = class {
  constructor() {
    this._values = [], this.extPtGap = 0, this.ctrlPtGap = 0, this._length = 0, this._currentValue = 0;
  }
  isEmpty() {
    return 0 === this._values.length;
  }
  size() {
    return this._values.length;
  }
  init(t17, e18, s18 = true) {
    if (this._setEmpty(), !t17 || 0 === t17.length) return false;
    for (let n20 = 0; n20 < t17.length; n20++) {
      let e19 = Math.abs(t17[n20]);
      s18 && e19 < i8 && (e19 = i8), this._values.push(e19), this._length += e19;
    }
    return e18 && 1 & t17.length && (this._length *= 2), 0 !== this._length && (this.ctrlPtGap = this.extPtGap = 0, this._currentValue = -1, true);
  }
  scale(t17) {
    const e18 = this._values ? this._values.length : 0;
    for (let s18 = 0; s18 < e18; ++s18) this._values[s18] *= t17;
    this._length *= t17, this.extPtGap *= t17, this.ctrlPtGap *= t17;
  }
  addValue(t17) {
    this._length += t17, this._values.push(t17);
  }
  firstValue() {
    return this._values[0];
  }
  lastValue() {
    return this._values[this._values.length - 1];
  }
  nextValue() {
    return this._currentValue++, this._currentValue === this._values.length && (this._currentValue = 0), this._values[this._currentValue];
  }
  reset() {
    this._currentValue = -1;
  }
  length() {
    return this._length;
  }
  _setEmpty() {
    this.extPtGap = this.ctrlPtGap = this._length = 0, this._currentValue = -1, this._values.length = 0;
  }
};
var h5 = class {
  constructor() {
    this.pt = null, this.ca = 0, this.sa = 0;
  }
};
var r6;
!function(t17) {
  t17[t17.FAIL = 0] = "FAIL", t17[t17.END = 1] = "END", t17[t17.CONTINUE = 2] = "CONTINUE";
}(r6 || (r6 = {}));
var a6 = class {
  constructor() {
    this.reset();
  }
  reset() {
    this.segment = null, this.segmentLength = 0, this.abscissa = 0, this.isPathEnd = false, this.isPartEnd = false;
  }
  isValid() {
    return null !== this.segment;
  }
  copyTo(t17) {
    t17.segment = this.segment, t17.segmentLength = this.segmentLength, t17.abscissa = this.abscissa, t17.isPathEnd = this.isPathEnd, t17.isPartEnd = this.isPartEnd;
  }
};
var o3 = class extends s7 {
  constructor(t17 = 0, e18 = false) {
    super(t17, e18), this._tempPos = new a6(), this._tempPt = [0, 0], this._tolerance = n5, this._currentPosition = new a6();
  }
  updateTolerance(t17) {
    this._tolerance = n5 * t17;
  }
  init(t17, e18, s18 = true) {
    return s18 ? (this._patternLength = e18.length(), this._partExtPtGap = e18.extPtGap, this._partCtrlPtGap = e18.ctrlPtGap) : (this._patternLength = 0, this._partExtPtGap = 0, this._partCtrlPtGap = 0), this._currentPosition.reset(), this._partSegCount = 0, this._pathCursor = t17, this._seg = -1, this._setPosAtNextPart();
  }
  curPositionIsValid() {
    return this._currentPosition.isValid();
  }
  nextPosition(t17, e18 = r6.FAIL) {
    const s18 = new a6();
    return !!this._nextPosition(t17, s18, null, e18) && (s18.copyTo(this._currentPosition), true);
  }
  curPointAndAngle(t17) {
    t17.pt = this._getPoint(this._currentPosition);
    const [e18, s18] = this._getAngleCS(this._tempPt, this._currentPosition);
    t17.ca = e18, t17.sa = s18;
  }
  nextPointAndAngle(t17, e18, s18 = r6.FAIL) {
    const i19 = this._tempPos;
    if (!this._nextPosition(t17, i19, null, s18)) return false;
    i19.copyTo(this._currentPosition), e18.pt = this._getPoint(i19);
    const [n20, h12] = this._getAngleCS(this._tempPt, i19);
    return e18.ca = n20, e18.sa = h12, true;
  }
  nextCurve(e18) {
    if (0 === e18) return null;
    const s18 = a5.createEmptyOptimizedCIM("esriGeometryPolyline");
    s18.startPath(), s18.nextPath();
    const i19 = new a6();
    return this._nextPosition(e18, i19, s18, r6.END) ? (i19.copyTo(this._currentPosition), s18) : null;
  }
  isPathEnd() {
    return this._currentPosition.isPathEnd;
  }
  getPathEnd() {
    return this._currentPosition.segment[1];
  }
  getPt(t17) {
    return this._pathCursor.seekInPath(t17), [this._pathCursor.x, this._pathCursor.y];
  }
  getSeg(t17) {
    return [this.getPt(t17), this.getPt(t17 + 1)];
  }
  _nextPosition(t17, e18, s18, i19) {
    if (this._currentPosition.isPathEnd) return false;
    let n20 = this._currentPosition.abscissa;
    for (this._currentPosition.segmentLength > 0 && (n20 /= this._currentPosition.segmentLength), this._currentPosition.copyTo(e18); e18.abscissa + t17 * this._partLengthRatio > e18.segmentLength + this._tolerance; ) {
      if (s18) {
        if (0 === s18.pathSize) if (0 === n20) {
          const t19 = e18.segment[0];
          s18.pushXY(t19[0], t19[1]);
        } else s18.pushPoint(this.getSegCoord2D(e18.segment, n20));
        const t18 = e18.segment[1];
        s18.pushXY(t18[0], t18[1]);
      }
      if (n20 = 0, t17 -= (e18.segmentLength - e18.abscissa) / this._partLengthRatio, this._partSegCount) e18.segment = this._nextSegment(), e18.segmentLength = this.getSegLength(e18.segment), e18.abscissa = 0, this._partSegCount--;
      else {
        if (!this._setPosAtNextPart()) return i19 !== r6.FAIL && (e18.segmentLength = this.getSegLength(e18.segment), e18.isPartEnd = true, i19 === r6.END ? (e18.abscissa = e18.segmentLength, e18.isPathEnd = true) : e18.abscissa = e18.segmentLength + t17, true);
        this._currentPosition.copyTo(e18);
      }
    }
    if (e18.abscissa += t17 * this._partLengthRatio, s18) {
      0 === s18.pathSize && (0 === n20 ? s18.pushPoint(e18.segment[0]) : s18.pushPoint(this.getSegCoord2D(e18.segment, n20)));
      const t18 = e18.abscissa / e18.segmentLength;
      1 === t18 ? s18.pushPoint(e18.segment[1]) : s18.pushPoint(this.getSegCoord2D(e18.segment, t18));
    }
    return this._partSegCount || Math.abs(e18.abscissa - e18.segmentLength) < this._tolerance && (e18.isPathEnd = this._partIsLast, e18.isPartEnd = true), true;
  }
  _getPoint(t17) {
    const e18 = t17.segmentLength <= 0 ? 0 : t17.abscissa / t17.segmentLength;
    return this.getSegCoord2D(this._currentPosition.segment, e18);
  }
  _getAngleCS(t17, e18) {
    const s18 = e18.segmentLength <= 0 ? 0 : e18.abscissa / e18.segmentLength;
    return this.getSegAngleCS(t17, this._currentPosition.segment, s18);
  }
  _setPosAtNextPart() {
    for (; this._partSegCount; ) this._hasNextSegment() && this._nextSegment(), this._partSegCount--;
    if (!this._hasNextSegment()) return false;
    for (this._partLength = 0, this._partIsLast = true, this._partSegCount = 0; this._hasNextSegment(); ) if (this._partLength += this.getSegLength(this._nextSegment()), this._partSegCount++, this._pathCursor.getControlPointAt(this._getEndPointIndex())) {
      this._partIsLast = !this._hasNextSegment();
      break;
    }
    let t17 = this._partSegCount;
    for (; t17; ) this._previousSegment(), --t17;
    this._currentPosition.segment = this._nextSegment(), this._currentPosition.segmentLength = this.getSegLength(this._currentPosition.segment), this._currentPosition.abscissa = 0, this._currentPosition.isPathEnd = this._currentPosition.isPartEnd = false, --this._partSegCount;
    const e18 = this._getStartPointIndex();
    this._ctrlPtBegin = this._pathCursor.getControlPointAt(e18);
    let s18 = e18 + this._partSegCount + 1;
    if (s18 >= this._pathCursor.pathSize && (s18 = 0), this._ctrlPtEnd = this._pathCursor.getControlPointAt(s18), this._patternLength > 0) {
      const t18 = this._ctrlPtBegin ? this._partCtrlPtGap : this._partExtPtGap, e19 = this._ctrlPtEnd ? this._partCtrlPtGap : this._partExtPtGap;
      let s19 = Math.round((this._partLength - (t18 + e19)) / this._patternLength);
      s19 <= 0 && (s19 = t18 + e19 > 0 ? 0 : 1), this._partLengthRatio = this._partLength / (t18 + e19 + s19 * this._patternLength), this._partLengthRatio < 0.01 && (this._partLengthRatio = 1);
    } else this._partLengthRatio = 1;
    return true;
  }
  _hasNextSegment() {
    return this._seg < this._pathCursor.pathSize - 2;
  }
  _previousSegment() {
    return this.getSeg(--this._seg);
  }
  _nextSegment() {
    return this.getSeg(++this._seg);
  }
  _getStartPointIndex() {
    return this._seg;
  }
  _getEndPointIndex() {
    return this._seg + 1;
  }
};

// node_modules/@arcgis/core/symbols/cim/effects/EffectDashes.js
var _h = class _h {
  static local() {
    return null === _h.instance && (_h.instance = new _h()), _h.instance;
  }
  execute(t17, e18, s18, i19, r19) {
    return new l7(t17, e18, s18);
  }
};
_h.instance = null;
var h6 = _h;
var l7 = class extends r2 {
  constructor(t17, e18, s18) {
    super(t17, true, true), this._firstCurve = null, this._walker = new o3(), this._walker.updateTolerance(s18), this._endings = e18.lineDashEnding, this._customDashPos = -(e18.offsetAlongLine ?? 0) * s18, this._offsetAtEnd = (e18.customEndingOffset ?? 0) * s18;
    let i19 = H(e18).dashTemplate;
    null == i19 && (i19 = []), i19.length % 2 && (i19 = [...i19, ...i19]), this._pattern = new n7(), this._pattern.init(i19, true), this._pattern.scale(s18);
  }
  processPath(s18) {
    if (0 === this._pattern.length()) {
      this.iteratePath = false;
      const i19 = n(s18);
      return a5.fromJSONCIM({ paths: [i19] });
    }
    if (!this.iteratePath) {
      let r20 = true;
      switch (this._endings) {
        case b2.HalfPattern:
        case b2.HalfGap:
        default:
          this._pattern.extPtGap = 0;
          break;
        case b2.FullPattern:
          this.isClosed || (this._pattern.extPtGap = 0.5 * this._pattern.firstValue());
          break;
        case b2.FullGap:
          this.isClosed || (this._pattern.extPtGap = 0.5 * this._pattern.lastValue());
          break;
        case b2.NoConstraint:
          this.isClosed || (r20 = false);
          break;
        case b2.Custom:
          this.isClosed || (this._pattern.extPtGap = 0.5 * this._offsetAtEnd);
      }
      const a14 = s18.pathLength();
      if (this._pattern.isEmpty() || a14 < 0.1 * this._pattern.length()) {
        const i19 = n(s18);
        return a5.fromJSONCIM({ paths: [i19] });
      }
      if (!this._walker.init(s18, this._pattern, r20)) {
        const i19 = n(s18);
        return a5.fromJSONCIM({ paths: [i19] });
      }
    }
    let r19;
    if (this.iteratePath) r19 = this._pattern.nextValue();
    else {
      let t17;
      switch (this._endings) {
        case b2.HalfPattern:
        default:
          t17 = 0.5 * this._pattern.firstValue();
          break;
        case b2.HalfGap:
          t17 = 0.5 * -this._pattern.lastValue();
          break;
        case b2.FullGap:
          t17 = -this._pattern.lastValue();
          break;
        case b2.FullPattern:
          t17 = 0;
          break;
        case b2.NoConstraint:
        case b2.Custom:
          t17 = -this._customDashPos;
      }
      let e18 = t17 / this._pattern.length();
      e18 -= Math.floor(e18), t17 = e18 * this._pattern.length(), this._pattern.reset(), r19 = this._pattern.nextValue();
      let s19 = false;
      for (; t17 >= r19; ) t17 -= r19, r19 = this._pattern.nextValue(), s19 = !s19;
      r19 -= t17, s19 ? (this._walker.nextPosition(r19), r19 = this._pattern.nextValue()) : this.isClosed && (this._firstCurve = this._walker.nextCurve(r19), r19 = this._pattern.nextValue(), this._walker.nextPosition(r19), r19 = this._pattern.nextValue());
    }
    let a13 = this._walker.nextCurve(r19);
    if (a13) if (this._walker.isPathEnd()) {
      if (this.iteratePath = false, this._firstCurve) {
        for (this._firstCurve.nextPath(); this._firstCurve.nextPoint(); ) a13.pushXY(this._firstCurve.x, this._firstCurve.y);
        this._firstCurve = null;
      }
    } else r19 = this._pattern.nextValue(), !this._walker.nextPosition(r19) || this._walker.isPathEnd() ? (this.iteratePath = false, this._firstCurve && (a13.pushCursor(this._firstCurve), this._firstCurve = null)) : this.iteratePath = true;
    else this.iteratePath = false, a13 = this._firstCurve, this._firstCurve = null;
    return a13?.reset(), a13;
  }
};

// node_modules/@arcgis/core/symbols/cim/effects/EffectDonut.js
var _s = class _s {
  static local() {
    return null === _s.instance && (_s.instance = new _s()), _s.instance;
  }
  execute(t17, i19, e18, n20, s18, o10, h12) {
    return new r7(t17, i19, e18, n20, s18, o10, h12);
  }
};
_s.instance = null;
var s9 = _s;
var r7 = class {
  constructor(t17, i19, e18, s18, r19, o10, h12) {
    switch (this._preventClipping = h12, this._inputGeometries = t17, this._tileKey = s18, this._geometryEngine = r19, this._maxInflateSize = o10 * e18, this._width = (void 0 !== i19.width ? i19.width : 2) * e18, i19.method) {
      case B.Mitered:
      case B.Bevelled:
      case B.Rounded:
      case B.TrueBuffer:
      case B.Square:
    }
    this._option = i19.option;
  }
  next() {
    let n20;
    for (; n20 = this._inputGeometries.next(); ) {
      if ("esriGeometryEnvelope" === n20.geometryType && this._width > 0) {
        const i19 = n20.asJSON();
        return Math.min(i19.xmax - i19.xmin, i19.ymax - i19.ymin) - 2 * this._width < 0 ? n20 : a5.fromJSONCIM({ paths: [[[i19.xmin + this._width, i19.ymin + this._width], [i19.xmax - this._width, i19.ymin + this._width], [i19.xmax - this._width, i19.ymax - this._width], [i19.xmin + this._width, i19.ymax - this._width], [i19.xmin + this._width, i19.ymin + this._width]], [[i19.xmin, i19.ymin], [i19.xmin, i19.ymax], [i19.xmax, i19.ymax], [i19.xmax, i19.ymin], [i19.xmin, i19.ymin]]] });
      }
      if ("esriGeometryPolygon" === n20.geometryType) {
        if (0 === this._width) return n20.clone();
        const t17 = this._geometryEngine;
        if (null == t17) return null;
        const s18 = !this._preventClipping && this._tileKey ? i7(n20, this._maxInflateSize, true) : n20.clone();
        if (!s18) continue;
        const r19 = t17.buffer(f.WebMercator, s18.asJSON(), -this._width, 1);
        if (r19) {
          for (const i19 of r19.rings) if (i19) {
            s18.startPath();
            for (const t18 of i19.reverse()) s18.pushXY(t18[0], s18.yFactor * t18[1]);
          }
        }
        return s18;
      }
    }
    return null;
  }
};

// node_modules/@arcgis/core/symbols/cim/effects/EffectEnclosingPolygon.js
var _o = class _o {
  static local() {
    return null === _o.instance && (_o.instance = new _o()), _o.instance;
  }
  execute(e18, t17, n20, r19, o10) {
    return new s10(e18, t17, n20, o10);
  }
};
_o.instance = null;
var o4 = _o;
var s10 = class {
  constructor(e18, t17, n20, r19) {
    this._inputGeometries = e18, this._medhod = t17.method, this._geometryEngine = r19;
  }
  next() {
    let e18 = this._inputGeometries.next();
    const t17 = this._medhod;
    for (; null != e18; ) {
      if (e18.totalSize > 0) switch (t17) {
        case L.RectangularBox:
          return i9(e18);
        case L.ConvexHull:
          return this._constructConvexHull(e18);
        default:
          return u9(e18);
      }
      e18 = this._inputGeometries.next();
    }
    return null;
  }
  _constructConvexHull(n20) {
    switch (n20.geometryType) {
      case "esriGeometryPolyline":
      case "esriGeometryPolygon": {
        const r19 = this._geometryEngine;
        if (null == r19) return null;
        const o10 = r19.convexHull(f.WebMercator, n20.asJSON());
        return o10 ? a5.fromJSONCIM(o10) : null;
      }
      case "esriGeometryEnvelope":
        return n20;
      default:
        return null;
    }
  }
};
function i9(t17) {
  const r19 = c(t17), o10 = { xmin: r19[0], ymin: r19[1], xmax: r19[2], ymax: r19[3] };
  return a5.fromJSONCIM(o10);
}
function u9(t17) {
  switch (t17.geometryType) {
    case "esriGeometryPolyline": {
      const n20 = [];
      for (; t17.nextPath(); ) l8(t17, n20);
      return a5.fromJSONCIM({ rings: n20 });
    }
    case "esriGeometryPolygon":
    case "esriGeometryEnvelope":
      return t17;
    default:
      return null;
  }
}
function l8(e18, t17) {
  if (e18.seekPathStart(), !e18.nextPoint()) return;
  const n20 = e18.x, r19 = e18.y, o10 = [[n20, r19]];
  for (t17.push(o10); e18.nextPoint(); ) o10.push([e18.x, e18.y]);
  o10.push([n20, r19]);
}

// node_modules/@arcgis/core/symbols/cim/effects/EffectJog.js
var _e2 = class _e2 {
  static local() {
    return null === _e2.instance && (_e2.instance = new _e2()), _e2.instance;
  }
  execute(t17, i19, s18, e18, o10) {
    return new n8(t17, i19, s18);
  }
};
_e2.instance = null;
var e10 = _e2;
var n8 = class extends r2 {
  constructor(t17, i19, e18) {
    super(t17, false, true), this._curveHelper = new s7(), this._length = (void 0 !== i19.length ? i19.length : 20) * e18, this._angle = void 0 !== i19.angle ? i19.angle : 225, this._position = void 0 !== i19.position ? i19.position : 50, this._length < 0 && (this._length = -this._length), this._position < 20 && (this._position = 20), this._position > 80 && (this._position = 80), this._mirror = false;
  }
  processPath(i19) {
    const s18 = a5.createEmptyOptimizedCIM("esriGeometryPolyline");
    if (this._curveHelper.isEmpty(i19)) return null;
    i19.seekInPath(0);
    const e18 = i19.x, n20 = i19.y;
    i19.seekInPath(i19.pathSize - 1);
    const o10 = i19.x, r19 = i19.y, h12 = [o10 - e18, r19 - n20];
    this._curveHelper.normalize(h12);
    const l14 = e18 + (o10 - e18) * this._position / 100, a13 = n20 + (r19 - n20) * this._position / 100, _6 = Math.cos((90 - this._angle) / 180 * Math.PI);
    let p8 = Math.sin((90 - this._angle) / 180 * Math.PI);
    this._mirror && (p8 = -p8), this._mirror = !this._mirror;
    const c6 = [l14 - this._length / 2 * _6, a13 - this._length / 2 * p8], m10 = [l14 + this._length / 2 * _6, a13 + this._length / 2 * p8];
    return s18.pushPath([[e18, n20], c6, m10, [o10, r19]]), s18;
  }
};

// node_modules/@arcgis/core/symbols/cim/effects/EffectMove.js
var _t = class _t {
  static local() {
    return null === _t.instance && (_t.instance = new _t()), _t.instance;
  }
  execute(t17, s18, n20, i19, o10) {
    return new e11(t17, s18, n20);
  }
};
_t.instance = null;
var t7 = _t;
var e11 = class {
  constructor(t17, e18, s18) {
    this._inputGeometries = t17, this._offsetX = void 0 !== e18.offsetX ? e18.offsetX * s18 : 0, this._offsetY = void 0 !== e18.offsetY ? e18.offsetY * s18 : 0;
  }
  next() {
    let t17 = this._inputGeometries.next();
    for (; t17; ) {
      if (t17.totalSize > 0) return this._move(t17.clone(), this._offsetX, this._offsetY);
      t17 = this._inputGeometries.next();
    }
    return null;
  }
  _move(t17, e18, s18) {
    for (; t17.nextPath(); ) for (; t17.nextPoint(); ) t17.x = t17.x + e18, t17.y = t17.y + s18;
    return t17.reset(), t17;
  }
};

// node_modules/@arcgis/core/symbols/cim/effects/EffectOffset.js
var m7 = 10;
var _h2 = class _h2 {
  static local() {
    return null === _h2.instance && (_h2.instance = new _h2()), _h2.instance;
  }
  execute(t17, e18, s18, i19, o10, r19, n20) {
    return new l9(t17, e18, s18, i19, o10, r19, n20);
  }
};
_h2.instance = null;
var h7 = _h2;
var l9 = class {
  constructor(t17, e18, s18, i19, o10, f6, h12) {
    this._preventClipping = h12, this._inputGeometries = t17, this._tileKey = i19, this._geometryEngine = o10, this._curveHelper = new s7(), this._offset = (e18.offset ?? 1) * s18, this._method = e18.method, this._maxInflateSize = Math.max(Math.abs(f6 * s18), m7), this._option = e18.option, this._offsetFlattenError = n5 * s18;
  }
  next() {
    let r19;
    for (; r19 = this._inputGeometries.next(); ) {
      if (0 === this._offset) return r19.clone();
      if ("esriGeometryEnvelope" === r19.geometryType) {
        if (this._method === N.Rounded && this._offset > 0) {
          const s19 = n(r19), i19 = this._curveHelper.offset(s19, -this._offset, this._method, 4, this._offsetFlattenError);
          if (i19) {
            const e18 = a5.createEmptyOptimizedCIM(r19.geometryType);
            return e18.pushPath(i19), e18;
          }
          return null;
        }
        const s18 = r19.asJSON();
        if (m3(s18) && Math.min(s18.xmax - s18.xmin, s18.ymax - s18.ymin) + 2 * this._offset > 0) return a5.fromJSONCIM({ xmin: s18.xmin - this._offset, xmax: s18.xmax + this._offset, ymin: s18.ymin - this._offset, ymax: s18.ymax + this._offset });
      }
      const n20 = this._geometryEngine;
      if (null == n20) continue;
      const m10 = !this._preventClipping && this._tileKey ? i7(r19, this._maxInflateSize, true) : r19.clone();
      if (!m10) continue;
      const h12 = n20.offset(f.WebMercator, m10.asJSON(), -this._offset, 1, this._method, 4, this._offsetFlattenError);
      return h12 ? a5.fromJSONCIM(h12) : null;
    }
    return null;
  }
};

// node_modules/@arcgis/core/symbols/cim/effects/EffectRadial.js
var _n = class _n {
  static local() {
    return null === _n.instance && (_n.instance = new _n()), _n.instance;
  }
  execute(t17, e18, i19, n20, s18) {
    return new r8(t17, e18, i19);
  }
};
_n.instance = null;
var n9 = _n;
var r8 = class {
  constructor(t17, e18, n20) {
    this._inputGeometries = t17, this._length = (void 0 !== e18.length ? e18.length : n2.CIMGeometricEffectRadial.length) * n20, this._angle = void 0 !== e18.angle ? e18.angle * Math.PI / 180 : n2.CIMGeometricEffectRadial.angle, this._lx = Math.cos(this._angle) * this._length, this._ly = Math.sin(this._angle) * this._length;
  }
  next() {
    let i19 = this._inputGeometries.next();
    for (; i19; ) {
      if ("esriGeometryPoint" === i19.geometryType || "esriGeometryMultipoint" === i19.geometryType) {
        const e18 = a5.createEmptyOptimizedCIM("esriGeometryPolyline");
        return i19.nextPath() && i19.nextPoint() && e18.pushPath([[i19.x, i19.y], [i19.x + this._lx, i19.y + this._ly]]), e18;
      }
      if ("esriGeometryPolygon" === i19.geometryType) {
        const n20 = I(i19);
        if (!n20) return null;
        const r19 = a5.createEmptyOptimizedCIM("esriGeometryPolyline");
        return r19.pushPath([[n20[0], n20[1]], [n20[0] + this._lx, n20[1] + this._ly]]), r19;
      }
      i19 = this._inputGeometries.next();
    }
    return null;
  }
};

// node_modules/@arcgis/core/symbols/cim/effects/EffectReverse.js
var _e3 = class _e3 {
  static local() {
    return null === _e3.instance && (_e3.instance = new _e3()), _e3.instance;
  }
  execute(e18, n20, r19, s18, i19) {
    return new t8(e18, n20, r19);
  }
};
_e3.instance = null;
var e12 = _e3;
var t8 = class {
  constructor(e18, t17, n20) {
    this._inputGeometries = e18, this._reverse = void 0 === t17.reverse || t17.reverse;
  }
  next() {
    let e18 = this._inputGeometries.next();
    for (; e18; ) {
      if (!this._reverse) return e18;
      if ("esriGeometryPolyline" === e18.geometryType) return n10(e18.clone());
      e18 = this._inputGeometries.next();
    }
    return null;
  }
};
function n10(e18) {
  for (; e18.nextPath(); ) for (let t17 = 0; t17 < e18.pathSize / 2; t17++) {
    e18.seekInPath(t17);
    const n20 = e18.x, r19 = e18.y;
    e18.seekInPath(e18.pathSize - t17 - 1);
    const s18 = e18.x, i19 = e18.y;
    e18.x = n20, e18.y = r19, e18.seekInPath(t17), e18.x = s18, e18.y = i19;
  }
  return e18.reset(), e18;
}

// node_modules/@arcgis/core/symbols/cim/effects/EffectRotate.js
var _e4 = class _e4 {
  static local() {
    return null === _e4.instance && (_e4.instance = new _e4()), _e4.instance;
  }
  execute(t17, e18, r19, s18, o10) {
    return new n11(t17, e18, r19);
  }
};
_e4.instance = null;
var e13 = _e4;
var n11 = class {
  constructor(t17, e18, n20) {
    this._inputGeometries = t17, this._rotateAngle = void 0 !== e18.angle ? e18.angle * Math.PI / 180 : 0;
  }
  next() {
    let e18 = this._inputGeometries.next();
    for (; e18; ) {
      if (0 === this._rotateAngle || "esriGeometryPoint" === e18.geometryType) return e18;
      if (e18.totalSize > 0) {
        const n20 = c(e18), r19 = (n20[2] + n20[0]) / 2, s18 = (n20[3] + n20[1]) / 2;
        return e18.reset(), this._rotate(e18.clone(), r19, s18);
      }
      e18 = this._inputGeometries.next();
    }
    return null;
  }
  _rotate(t17, e18, n20) {
    const r19 = Math.cos(this._rotateAngle), s18 = Math.sin(this._rotateAngle);
    for (; t17.nextPath(); ) for (; t17.nextPoint(); ) {
      const o10 = t17.x - e18, i19 = t17.y - n20;
      t17.x = e18 + o10 * r19 - i19 * s18, t17.y = n20 + o10 * s18 + i19 * r19;
    }
    return t17.reset(), t17;
  }
};

// node_modules/@arcgis/core/symbols/cim/effects/EffectScale.js
var _e5 = class _e5 {
  static local() {
    return null === _e5.instance && (_e5.instance = new _e5()), _e5.instance;
  }
  execute(t17, e18, s18, o10, n20) {
    return new r9(t17, e18, s18);
  }
};
_e5.instance = null;
var e14 = _e5;
var r9 = class {
  constructor(t17, e18, r19) {
    this._inputGeometries = t17, this._xFactor = void 0 !== e18.xScaleFactor ? e18.xScaleFactor : 1.15, this._yFactor = void 0 !== e18.yScaleFactor ? e18.yScaleFactor : 1.15;
  }
  next() {
    const e18 = this._inputGeometries.next();
    if (e18) {
      if (1 === this._xFactor && 1 === this._yFactor) return e18;
      if ("esriGeometryPoint" === e18.geometryType) return e18;
      if (e18.totalSize > 0) {
        const r19 = c(e18), s18 = (r19[2] + r19[0]) / 2, o10 = (r19[3] + r19[1]) / 2;
        return e18.reset(), this._scaleCursor(e18.clone(), s18, o10);
      }
    }
    return null;
  }
  _scaleCursor(t17, e18, r19) {
    for (; t17.nextPath(); ) for (; t17.nextPoint(); ) t17.x = e18 + (t17.x - e18) * this._xFactor, t17.y = r19 + (t17.y - r19) * this._yFactor;
    return t17.reset(), t17;
  }
};

// node_modules/@arcgis/core/geometry/support/PolylineBuilder.js
var t9 = class {
  constructor() {
    this._polyline = [];
  }
  beginPath(t17) {
    this._polyline.push([t17]);
  }
  lineTo(t17) {
    if (0 === this._polyline.length) throw new Error("No path started. Call beginPath first.");
    this._polyline[this._polyline.length - 1].push(t17);
  }
  getPointCount() {
    return this._polyline.reduce((t17, e18) => t17 + e18.length, 0);
  }
  addSegment(t17, e18, l14) {
    l14 && this.beginPath(t17), this.lineTo(e18);
  }
  getXY(t17) {
    let e18 = 0;
    for (const l14 of this._polyline) {
      if (t17 < e18 + l14.length) return l14[t17 - e18];
      e18 += l14.length;
    }
    return null;
  }
  getGeometry() {
    return this._polyline;
  }
};

// node_modules/@arcgis/core/symbols/cim/effects/EffectSuppress.js
var _r3 = class _r3 {
  static local() {
    return null === _r3.instance && (_r3.instance = new _r3()), _r3.instance;
  }
  execute(t17, e18, n20, r19, o10) {
    return new s11(t17, e18, n20);
  }
};
_r3.instance = null;
var r10 = _r3;
var s11 = class extends r2 {
  constructor(t17, e18, n20) {
    super(t17, false, true), this._suppress = void 0 !== e18.suppress && e18.suppress, this._invert = void 0 !== e18.invert && e18.invert;
  }
  processPath(n20) {
    if (n20.totalSize <= 0) return null;
    if (!this._suppress) {
      const e18 = a5.createEmptyOptimizedCIM("esriGeometryPolygon", false, false, n20.yFactor);
      for (n20.seekPathEnd(); n20.nextPoint(); ) e18.pushXY(n20.x, n20.y);
      return e18;
    }
    const r19 = [], s18 = new Array(n20.pathSize);
    let o10 = 0;
    for (n20.seekPathStart(); n20.nextPoint(); ) s18[o10++] = n20.getControlPoint(), r19.push([n20.x, n20.y]);
    let i19 = true, l14 = true, h12 = false, p8 = !this._invert;
    o10 = 0;
    const u14 = new t9();
    let c6 = r19[0];
    for (; o10 < r19.length; ) {
      const t17 = r19[o10 + 1], e18 = s18[o10], n21 = s18[o10 + 1];
      o10++, l14 && (p8 = e18 || n21 ? this._invert : !this._invert, l14 = false), p8 ? (u14.addSegment(c6, t17, i19), i19 = false) : h12 = true, c6 = t17, n21 && (p8 ? (p8 = false, i19 = true) : p8 = true);
    }
    const a13 = u14.getGeometry();
    if (0 === a13.length) return null;
    if (!h12 && r19[0][0] === r19[r19.length - 1][0] && r19[0][1] === r19[r19.length - 1][1]) {
      const e18 = a13[a13.length - 1];
      return e18[0][0] === e18[e18.length - 1][0] && e18[0][1] === e18[e18.length - 1][1] || e18.push([e18[0][0], e18[0][1]]), a5.fromJSONCIM({ paths: a13 });
    }
    const g2 = a13[a13.length - 1];
    return u14.getPointCount() > 1 && "esriGeometryPolygon" === n20.geometryType && g2[0][0] === g2[g2.length - 1][0] && g2[0][1] === g2[g2.length - 1][1] && a13.length > 1 && (a13[a13.length - 1].push(...a13[0]), a13.splice(0, 1)), a5.fromJSONCIM({ paths: a13 });
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/mesh/templates/segmentUtils.js
function e15(t17, e18, n20) {
  return t17[0] = e18[0] - n20[0], t17[1] = e18[1] - n20[1], t17;
}
function n12(t17, e18) {
  return Math.sqrt(t17 * t17 + e18 * e18);
}
function s12(t17) {
  const e18 = n12(t17[0], t17[1]);
  t17[0] /= e18, t17[1] /= e18;
}
function i10(t17, e18) {
  return n12(t17[0] - e18[0], t17[1] - e18[1]);
}
function r11(t17, e18) {
  return t17[e18 + 1];
}
function h8(t17) {
  return t17.length - 1;
}
function a7(t17) {
  let e18 = 0;
  for (let n20 = 0; n20 < h8(t17); n20++) e18 += d2(t17, n20);
  return e18;
}
function d2(t17, e18, n20 = 1) {
  let [s18, i19] = r11(t17, e18);
  return [s18, i19] = [Math.round(s18), Math.round(i19)], Math.sqrt(s18 * s18 + i19 * i19) * n20;
}
var u10 = class _u {
  constructor(t17, e18, n20, s18, i19) {
    this._segments = t17, this._index = e18, this._distance = n20, this._xStart = s18, this._yStart = i19, this._done = false;
  }
  static create(t17) {
    return new _u(t17, 0, 0, t17[0][0], t17[0][1]);
  }
  clone() {
    return new _u(this._segments, this._index, this._distance, this.xStart, this.yStart);
  }
  equals(t17) {
    return this._index === t17._index || t17._index === this._index - 1 && (0 === this._distance || 1 === t17._distance) || t17._index === this._index + 1 && (1 === this._distance || 0 === t17._distance);
  }
  leq(t17) {
    return this._index < t17._index || this._index === t17._index && this._distance <= t17._distance;
  }
  geq(t17) {
    return this._index > t17._index || this._index === t17._index && this._distance >= t17._distance;
  }
  get _segment() {
    return this._segments[this._index + 1];
  }
  get angle() {
    const t17 = this.dy, e18 = (0 * t17 + -1 * -this.dx) / (1 * this.length);
    let n20 = Math.acos(e18);
    return t17 > 0 && (n20 = 2 * Math.PI - n20), n20;
  }
  get xStart() {
    return this._xStart;
  }
  get yStart() {
    return this._yStart;
  }
  get x() {
    return this.xStart + this.distance * this.dx;
  }
  get y() {
    return this.yStart + this.distance * this.dy;
  }
  get dx() {
    return this._segment[0];
  }
  get dy() {
    return this._segment[1];
  }
  get xMidpoint() {
    return this.xStart + 0.5 * this.dx;
  }
  get yMidpoint() {
    return this.yStart + 0.5 * this.dy;
  }
  get xEnd() {
    return this.xStart + this.dx;
  }
  get yEnd() {
    return this.yStart + this.dy;
  }
  get length() {
    const { dx: t17, dy: e18 } = this;
    return Math.sqrt(t17 * t17 + e18 * e18);
  }
  get remainingLength() {
    return this.length * (1 - this._distance);
  }
  get backwardLength() {
    return this.length * this._distance;
  }
  get distance() {
    return this._distance;
  }
  get done() {
    return this._done;
  }
  hasPrev() {
    return this._index - 1 >= 0;
  }
  hasNext() {
    return this._index + 1 < h8(this._segments);
  }
  next() {
    return this.hasNext() ? (this._xStart += this.dx, this._yStart += this.dy, this._distance = 0, this._index += 1, this) : null;
  }
  prev() {
    return this.hasPrev() ? (this._index -= 1, this._xStart -= this.dx, this._yStart -= this.dy, this._distance = 1, this) : (this._done = true, null);
  }
  _seekBackwards(t17, e18) {
    const n20 = this.backwardLength;
    if (t17 <= n20) return this._distance = (n20 - t17) / this.length, this;
    let s18 = this.backwardLength;
    for (; this.prev(); ) {
      if (s18 + this.length > t17) return this._seekBackwards(t17 - s18);
      s18 += this.length;
    }
    return this._distance = 0, e18 ? this : null;
  }
  seek(t17, e18 = false) {
    if (t17 < 0) return this._seekBackwards(Math.abs(t17), e18);
    if (t17 <= this.remainingLength) return this._distance = (this.backwardLength + t17) / this.length, this;
    let n20 = this.remainingLength;
    for (; this.next(); ) {
      if (n20 + this.length > t17) return this.seek(t17 - n20, e18);
      n20 += this.length;
    }
    return this._distance = 1, e18 ? this : null;
  }
};
function c4(e18, n20, s18, i19 = true) {
  const r19 = a7(e18), h12 = u10.create(e18), d4 = r19 / 2;
  if (!i19) return h12.seek(d4), void (h12.x < a4 && h12.y < a4 && h12.x >= 0 && h12.y >= 0 && s18(h12.clone(), 0, d4 + 0 * n20, r19));
  const c6 = Math.max((r19 - n20) / 2, 0), o10 = Math.floor(c6 / n20), _6 = d4 - o10 * n20;
  h12.seek(_6);
  for (let a13 = -o10; a13 <= o10; a13++) h12.x < a4 && h12.y < a4 && h12.x >= 0 && h12.y >= 0 && s18(h12.clone(), a13, d4 + a13 * n20, r19), h12.seek(n20);
}
function l10(t17, e18) {
  const n20 = e18;
  for (let s18 = 0; s18 < t17.length; s18++) {
    let e19 = t17[s18];
    x2(e19, n20);
    const i19 = [];
    i19.push(e19[0]);
    for (let t18 = 1; t18 < e19.length; t18++) {
      const [n21, s19] = e19[t18 - 1], [r19, h12] = e19[t18], a13 = r19 - n21, d4 = h12 - s19;
      i19.push([a13, d4]);
    }
    t17[s18] = i19, e19 = i19;
  }
  return t17;
}
function x2(t17, n20) {
  const r19 = 1e-6;
  if (n20 <= 0) return;
  const h12 = t17.length;
  if (h12 < 3) return;
  const a13 = [];
  let d4 = 0;
  a13.push(0);
  for (let e18 = 1; e18 < h12; e18++) d4 += i10(t17[e18], t17[e18 - 1]), a13.push(d4);
  n20 = Math.min(n20, 0.2 * d4);
  const u14 = [];
  u14.push(t17[0][0]), u14.push(t17[0][1]);
  const c6 = t17[h12 - 1][0], o10 = t17[h12 - 1][1], _6 = e15([0, 0], t17[0], t17[1]);
  s12(_6), t17[0][0] += n20 * _6[0], t17[0][1] += n20 * _6[1], e15(_6, t17[h12 - 1], t17[h12 - 2]), s12(_6), t17[h12 - 1][0] += n20 * _6[0], t17[h12 - 1][1] += n20 * _6[1];
  for (let e18 = 1; e18 < h12; e18++) a13[e18] += n20;
  a13[h12 - 1] += n20;
  const l14 = 0.5 * n20;
  for (let e18 = 1; e18 < h12 - 1; e18++) {
    let s18 = 0, i19 = 0, d5 = 0;
    for (let h13 = e18 - 1; h13 >= 0 && !(a13[h13 + 1] < a13[e18] - l14); h13--) {
      const u15 = l14 + a13[h13 + 1] - a13[e18], c7 = a13[h13 + 1] - a13[h13], o11 = a13[e18] - a13[h13] < l14 ? 1 : u15 / c7;
      if (Math.abs(o11) < r19) break;
      const _7 = o11 * o11, x6 = o11 * u15 - 0.5 * _7 * c7, g2 = o11 * c7 / n20, f6 = t17[h13 + 1], y7 = t17[h13][0] - f6[0], k = t17[h13][1] - f6[1];
      s18 += g2 / x6 * (f6[0] * o11 * u15 + 0.5 * _7 * (u15 * y7 - c7 * f6[0]) - _7 * o11 * c7 * y7 / 3), i19 += g2 / x6 * (f6[1] * o11 * u15 + 0.5 * _7 * (u15 * k - c7 * f6[1]) - _7 * o11 * c7 * k / 3), d5 += g2;
    }
    for (let u15 = e18 + 1; u15 < h12 && !(a13[u15 - 1] > a13[e18] + l14); u15++) {
      const h13 = l14 - a13[u15 - 1] + a13[e18], c7 = a13[u15] - a13[u15 - 1], o11 = a13[u15] - a13[e18] < l14 ? 1 : h13 / c7;
      if (Math.abs(o11) < r19) break;
      const _7 = o11 * o11, x6 = o11 * h13 - 0.5 * _7 * c7, g2 = o11 * c7 / n20, f6 = t17[u15 - 1], y7 = t17[u15][0] - f6[0], k = t17[u15][1] - f6[1];
      s18 += g2 / x6 * (f6[0] * o11 * h13 + 0.5 * _7 * (h13 * y7 - c7 * f6[0]) - _7 * o11 * c7 * y7 / 3), i19 += g2 / x6 * (f6[1] * o11 * h13 + 0.5 * _7 * (h13 * k - c7 * f6[1]) - _7 * o11 * c7 * k / 3), d5 += g2;
    }
    u14.push(s18 / d5), u14.push(i19 / d5);
  }
  u14.push(c6), u14.push(o10);
  for (let e18 = 0, s18 = 0; e18 < h12; e18++) t17[e18][0] = u14[s18++], t17[e18][1] = u14[s18++];
}

// node_modules/@arcgis/core/symbols/cim/effects/EffectTaperedPolygon.js
var y4 = () => i.getLogger("esri.symbols.cim.effects.EffectTaperedPolygon");
var _x = class _x {
  static local() {
    return null === _x.instance && (_x.instance = new _x()), _x.instance;
  }
  execute(t17, e18, s18, o10, i19) {
    return new p5(t17, e18, s18, o10, i19);
  }
};
_x.instance = null;
var x3 = _x;
var p5 = class extends r2 {
  constructor(t17, e18, s18, o10, i19) {
    super(t17, false, true), this._slopeS = 0, this._slopeC = 1, this._lastTangent1 = new h3(NaN, NaN), this._lastWidth = 0, this._tileKey = null, this._halfFromWidth = Math.abs(void 0 !== e18.fromWidth ? e18.fromWidth : 0) * s18 * 0.5, this._halfToWidth = Math.abs(void 0 !== e18.toWidth ? e18.toWidth : 1) * s18 * 0.5, this._originalLength = (void 0 !== e18.length ? e18.length : 0) * s18, this._length = 0, this._tileKey = o10, this._geometryEngine = i19;
  }
  processPath(e18) {
    if (e18.totalSize <= 0) return null;
    if (this._halfFromWidth <= 0 && this._halfToWidth <= 0) {
      const t17 = a5.createEmptyOptimizedCIM("esriGeometryPolygon", false, false, e18.yFactor);
      for (e18.seekPathEnd(); e18.prevPoint(); ) t17.pushXY(e18.x, e18.y);
      for (e18.seekPathStart(); e18.nextPoint(); ) t17.pushXY(e18.x, e18.y);
      return t17;
    }
    const a13 = [];
    e18.seekPathStart();
    let h12 = 0, x6 = 0;
    for (; e18.nextPoint(); ) a13.push([e18.x - h12, e18.y - x6]), h12 = e18.x, x6 = e18.y;
    let p8 = this._geometryEngine?.simplify(f.WebMercator, { paths: [a13] });
    p8 || null != this._tileKey || (p8 = { paths: [a13] });
    const _6 = y(p8) ? p8.rings : s4(p8) ? p8.paths : null;
    if (!_6) return y4().error(new s("mapview-bad-resource", "Unable to process geometry")), null;
    const f6 = new t9(), d4 = new t9();
    let m10 = 0;
    for (const t17 of _6) {
      h12 = t17[0][0], x6 = t17[0][1];
      for (let e19 = 1; e19 < t17.length; e19++) {
        const s18 = h12 + t17[e19][0], o10 = x6 + t17[e19][1];
        m10 += Math.sqrt((s18 - h12) * (s18 - h12) + (o10 - x6) * (o10 - x6)), h12 = s18, x6 = o10;
      }
    }
    if (0 === this._originalLength || this._originalLength > m10) {
      this._length = m10;
      const t17 = (this._halfToWidth - this._halfFromWidth) / this._length;
      if (Math.abs(t17) < 1) {
        const e19 = t17 * t17;
        this._slopeC = Math.sqrt(1 / (1 + e19)), this._slopeS = Math.sqrt(e19 / (1 + e19)), t17 < 0 && (this._slopeS = -this._slopeS);
      } else this._slopeC = this._slopeS = 0.7071;
    } else this._length = this._originalLength, this._slopeC = 1, this._slopeS = 0;
    let g2 = 0;
    const u14 = [];
    for (const t17 of _6) {
      const e19 = u10.create(t17), s18 = u10.create(t17);
      this._setFromOffset(s18, f6, d4);
      let o10 = s18.next(), i19 = e19;
      for (; o10 && i19; ) g2 = this._setOffset(i19, o10, g2, f6, d4), i19 = e19.next(), o10 = s18.next();
      i19 = e19, i19 && this._setToOffset(i19, g2, f6, d4);
      const n20 = f6.getGeometry(), r19 = d4.getGeometry(), l14 = [];
      for (const t18 of n20) l14.push(...t18);
      for (let t18 = r19.length - 1; t18 >= 0; t18--) {
        const e20 = r19[t18];
        for (let t19 = e20.length - 1; t19 >= 0; t19--) l14.push(e20[t19]);
      }
      u14.push(l14);
    }
    const S4 = { rings: u14 };
    m(S4);
    let T4 = this._geometryEngine?.simplify(f.WebMercator, S4);
    if (!T4) {
      if (null != this._tileKey) return null;
      T4 = S4;
    }
    return a5.fromJSONCIM(T4);
  }
  _setFromOffset(t17, e18, s18) {
    const o10 = this._halfFromWidth, i19 = new h3(t17.xEnd - t17.xStart, t17.yEnd - t17.yStart);
    i19.normalize(), i19.scale(o10), e18.beginPath([t17.xStart - i19.y, t17.yStart + i19.x]), s18.beginPath([t17.xStart + i19.y, t17.yStart - i19.x]);
  }
  _setToOffset(t17, e18, s18, o10) {
    let i19;
    i19 = (e18 += Math.sqrt((t17.xEnd - t17.xStart) * (t17.xEnd - t17.xStart) + (t17.yEnd - t17.yStart) * (t17.yEnd - t17.yStart))) >= this._length ? this._halfToWidth : this._halfFromWidth + (this._halfToWidth - this._halfFromWidth) * e18 / this._length;
    const n20 = new h3(t17.xEnd - t17.xStart, t17.yEnd - t17.yStart);
    n20.normalize(), n20.scale(i19), s18.lineTo([t17.xEnd - n20.y, t17.yEnd + n20.x]), o10.lineTo([t17.xEnd + n20.y, t17.yEnd - n20.x]);
  }
  _setOffset(e18, s18, o10, i19, n20) {
    const r19 = Math.sqrt((e18.xEnd - e18.xStart) * (e18.xEnd - e18.xStart) + (e18.yEnd - e18.yStart) * (e18.yEnd - e18.yStart));
    let l14;
    l14 = o10 + r19 >= this._length ? this._halfToWidth : this._halfFromWidth + (this._halfToWidth - this._halfFromWidth) * (o10 + r19) / this._length, o10 += r19;
    const h12 = new h3(e18.xEnd, e18.yEnd), c6 = new h3(e18.xEnd - e18.xStart, e18.yEnd - e18.yStart);
    c6.normalize();
    const x6 = new h3(s18.xEnd - s18.xStart, s18.yEnd - s18.yStart);
    x6.normalize();
    const p8 = c6.x * x6.y - c6.y * x6.x;
    let _6;
    _6 = 0 === Math.abs(p8) ? new h3(x6.x, x6.y) : new h3((x6.x - c6.x) / p8, (x6.y - c6.y) / p8);
    const f6 = i19.getPointCount(), d4 = n20.getPointCount();
    c6.leftPerpendicular(), x6.leftPerpendicular();
    const m10 = c6.x * x6.x + c6.y * x6.y;
    if (m10 > 0.99) {
      const t17 = new h3((c6.x + x6.x) * l14 / 2, (c6.y + x6.y) * l14 / 2), e19 = t17.clone();
      e19.rotate(this._slopeC, this._slopeS), i19.lineTo([h12.x + e19.x, h12.y + e19.y]);
      const s19 = t17.clone();
      s19.rotateReverse(this._slopeC, this._slopeS), n20.lineTo([h12.x - s19.x, h12.y - s19.y]);
    } else {
      if (p8 < 0) {
        const e19 = _6.clone().scale(-l14);
        e19.rotateReverse(this._slopeC, this._slopeS);
        const s20 = n20.getXY(d4 - 1);
        s20 || y4().error(new s("mapview-bad-resource", "Unable to process geometry, index out of scope"));
        const o12 = h3.add(h12, e19), i20 = h3.sub(o12, h3.fromArray(s20));
        if (c6.x * i20.y - c6.y * i20.x > 0) {
          const t17 = new h3(-c6.x * l14, -c6.y * l14);
          t17.rotateReverse(this._slopeC, this._slopeS);
          const e20 = new h3(-x6.x * l14, -x6.y * l14);
          e20.rotateReverse(this._slopeC, this._slopeS), n20.lineTo([h12.x + t17.x, h12.y + t17.y]), n20.lineTo([h12.x, h12.y]), n20.lineTo([h12.x + e20.x, h12.y + e20.y]);
        } else n20.lineTo([h12.x + e19.x, h12.y + e19.y]);
      } else {
        const e19 = _6.clone().scale(l14);
        e19.rotate(this._slopeC, this._slopeS);
        const s20 = i19.getXY(f6 - 1);
        s20 || y4().error(new s("mapview-bad-resource", "Unable to process geometry, index out of scope"));
        const o12 = h3.add(h12, e19), n21 = h3.sub(o12, h3.fromArray(s20));
        if (c6.x * n21.y - c6.y * n21.x > 0) {
          const t17 = c6.clone().scale(l14);
          t17.rotate(this._slopeC, this._slopeS);
          const e20 = x6.clone().scale(l14);
          e20.rotate(this._slopeC, this._slopeS), i19.lineTo([h12.x + t17.x, h12.y + t17.y]), i19.lineTo([h12.x, h12.y]), i19.lineTo([h12.x + e20.x, h12.y + e20.y]);
        } else i19.lineTo([h12.x + e19.x, h12.y + e19.y]);
      }
      const s19 = Math.acos(m10);
      let o11 = 1;
      if (l14 > 0.25) {
        const t17 = 2 * Math.acos(1 - 0.25 / l14);
        t17 < s19 && (o11 = Math.round(s19 / t17));
      }
      const r20 = Math.cos(s19 / o11), g2 = Math.sin(s19 / o11), u14 = c6.clone();
      if (p8 < 0) {
        u14.rotate(this._slopeC, this._slopeS);
        const s20 = i19.getXY(f6 - 1);
        s20 || y4().error(new s("mapview-bad-resource", "Unable to process geometry, index out of scope"));
        const o12 = h3.add(h12, u14.clone().scale(this._lastWidth)), n21 = h3.sub(o12, h3.fromArray(s20)), r21 = c6.x * n21.y - c6.y * n21.x;
        if (!isNaN(this._lastTangent1.x) && !isNaN(this._lastTangent1.y) && r21 > 0) {
          const t17 = new h3(e18.xStart, e18.yStart), s21 = this._lastTangent1.clone().scale(this._lastWidth);
          s21.rotate(this._slopeC, this._slopeS);
          const o13 = c6.clone().scale(this._lastWidth);
          o13.rotate(this._slopeC, this._slopeS), i19.lineTo([t17.x + s21.x, t17.y + s21.y]), i19.lineTo([t17.x, t17.y]), i19.lineTo([t17.x + o13.x, t17.y + o13.y]);
        }
      } else {
        u14.scale(-1).rotateReverse(this._slopeC, this._slopeS);
        const s20 = n20.getXY(d4 - 1);
        s20 || y4().error(new s("mapview-bad-resource", "Unable to process geometry, index out of scope"));
        const o12 = h3.add(h12, u14.clone().scale(this._lastWidth)), i20 = h3.sub(o12, h3.fromArray(s20)), r21 = c6.x * i20.y - c6.y * i20.x;
        if (!isNaN(this._lastTangent1.x) && !isNaN(this._lastTangent1.y) && r21 > 0) {
          const t17 = new h3(e18.xStart, e18.yStart), s21 = this._lastTangent1.clone().scale(-this._lastWidth);
          s21.rotateReverse(this._slopeC, this._slopeS);
          const o13 = c6.clone().scale(-this._lastWidth);
          o13.rotateReverse(this._slopeC, this._slopeS), n20.lineTo([t17.x + s21.x, t17.y + s21.y]), n20.lineTo([t17.x, t17.y]), n20.lineTo([t17.x + o13.x, t17.y + o13.y]);
        }
      }
      u14.scale(l14);
      for (let t17 = 0; t17 <= o11; t17++) p8 < 0 ? (i19.lineTo([h12.x + u14.x, h12.y + u14.y]), u14.rotateReverse(r20, g2)) : (n20.lineTo([h12.x + u14.x, h12.y + u14.y]), u14.rotate(r20, g2));
    }
    return this._lastTangent1.setCoords(c6.x, c6.y), this._lastWidth = l14, o10;
  }
};

// node_modules/@arcgis/core/symbols/cim/effects/EffectWave.js
var _n2 = class _n2 {
  static local() {
    return null === _n2.instance && (_n2.instance = new _n2()), _n2.instance;
  }
  execute(t17, e18, i19, s18, h12) {
    return new r12(t17, e18, i19);
  }
};
_n2.instance = null;
var n13 = _n2;
var r12 = class {
  constructor(t17, e18, h12) {
    this._inputGeometries = t17, this._height = (void 0 !== e18.amplitude ? e18.amplitude : 2) * h12, this._period = (void 0 !== e18.period ? e18.period : 3) * h12, this._style = e18.waveform, this._height <= 0 && (this._height = Math.abs(this._height)), this._period <= 0 && (this._period = Math.abs(this._period)), this._pattern = new n7(), this._pattern.addValue(this._period), this._pattern.addValue(this._period), this._walker = new o3(), this._walker.updateTolerance(h12);
  }
  next() {
    let t17 = this._inputGeometries.next();
    for (; t17; ) {
      if (0 === this._height || 0 === this._period) return t17;
      const e18 = this._processGeom(t17);
      if (e18) return e18;
      t17 = this._inputGeometries.next();
    }
    return null;
  }
  _processGeom(i19) {
    const s18 = a5.createEmptyOptimizedCIM(i19.geometryType);
    for (; i19.nextPath(); ) {
      s18.startPath();
      const t17 = i19.pathLength();
      if (this._walker.init(i19, this._pattern)) switch (this._style) {
        case E.Sinus:
        default:
          this._constructCurve(s18, t17, false);
          break;
        case E.Square:
          this._constructSquare(s18, t17);
          break;
        case E.Triangle:
          this._constructTriangle(s18, t17);
          break;
        case E.Random:
          this._constructCurve(s18, t17, true);
      }
      else for (; i19.nextPoint(); ) s18.pushXY(i19.x, i19.y);
    }
    return s18;
  }
  _constructCurve(t17, e18, i19) {
    let s18 = Math.round(e18 / this._period);
    0 === s18 && (s18 = 1);
    const n20 = s18 * 16 + 1, r19 = e18 / s18, a13 = this._period / 16, o10 = 1 / n20, p8 = 2 * Math.PI * e18 / r19, _6 = 2 * Math.PI * Math.random(), u14 = 2 * Math.PI * Math.random(), c6 = 2 * Math.PI * Math.random(), l14 = 0.75 - Math.random() / 2, d4 = 0.75 - Math.random() / 2, g2 = new h5();
    this._walker.curPointAndAngle(g2), t17.pushPoint(g2.pt);
    let w5 = 0;
    for (; ; ) {
      if (!this._walker.nextPointAndAngle(a13, g2)) {
        t17.pushPoint(this._walker.getPathEnd());
        break;
      }
      {
        const e19 = w5;
        let s19;
        if (w5 += o10, i19) {
          const t18 = this._height / 2 * (1 + 0.3 * Math.sin(l14 * p8 * e19 + _6));
          s19 = t18 * Math.sin(p8 * e19 + u14), s19 += t18 * Math.sin(d4 * p8 * e19 + c6), s19 /= 2;
        } else s19 = 0.5 * this._height * Math.sin(0.5 * p8 * e19);
        t17.pushXY(g2.pt[0] - s19 * g2.sa, g2.pt[1] + s19 * g2.ca);
      }
    }
  }
  _constructSquare(t17, e18) {
    Math.round(e18 / this._period);
    let i19 = true;
    for (; ; ) {
      let e19 = false;
      if (this._walker.curPositionIsValid()) {
        const s18 = new h5();
        this._walker.curPointAndAngle(s18);
        const n20 = new h5();
        if (this._walker.nextPointAndAngle(this._period, n20)) {
          const r19 = new h5();
          this._walker.nextPointAndAngle(this._period, r19) && (i19 ? (t17.pushPoint(s18.pt), i19 = false) : t17.pushPoint(s18.pt), t17.pushXY(s18.pt[0] - this._height / 2 * s18.sa, s18.pt[1] + this._height / 2 * s18.ca), t17.pushXY(n20.pt[0] - this._height / 2 * n20.sa, n20.pt[1] + this._height / 2 * n20.ca), t17.pushXY(n20.pt[0] + this._height / 2 * n20.sa, n20.pt[1] - this._height / 2 * n20.ca), t17.pushXY(r19.pt[0] + this._height / 2 * r19.sa, r19.pt[1] - this._height / 2 * r19.ca), e19 = true);
        }
      }
      if (!e19) {
        t17.pushPoint(this._walker.getPathEnd());
        break;
      }
    }
  }
  _constructTriangle(t17, e18) {
    Math.round(e18 / this._period);
    let i19 = true;
    for (; ; ) {
      let e19 = false;
      if (this._walker.curPositionIsValid()) {
        const s18 = new h5();
        this._walker.curPointAndAngle(s18);
        const n20 = new h5();
        if (this._walker.nextPointAndAngle(this._period / 2, n20)) {
          const r19 = new h5();
          this._walker.nextPointAndAngle(this._period, r19) && (this._walker.nextPosition(this._period / 2) && (i19 ? (t17.pushPoint(s18.pt), i19 = false) : t17.pushPoint(s18.pt), t17.pushXY(n20.pt[0] - this._height / 2 * n20.sa, n20.pt[1] + this._height / 2 * n20.ca), t17.pushXY(r19.pt[0] + this._height / 2 * r19.sa, r19.pt[1] - this._height / 2 * r19.ca)), e19 = true);
        }
      }
      if (!e19) {
        t17.pushPoint(this._walker.getPathEnd());
        break;
      }
    }
  }
};

// node_modules/@arcgis/core/symbols/cim/placements/PlacementAlongLineSameSize.js
var _a = class _a {
  static local() {
    return null === _a.instance && (_a.instance = new _a()), _a.instance;
  }
  execute(t17, e18, s18, i19, n20) {
    return new r13(t17, e18, s18);
  }
};
_a.instance = null;
var a8 = _a;
var r13 = class extends i6 {
  constructor(t17, e18, n20) {
    super(t17), this._geometryWalker = new o3(), this._geometryWalker.updateTolerance(n20), this._angleToLine = e18.angleToLine ?? true, this._offset = (e18.offset ? e18.offset : 0) * n20, this._originalEndings = e18.endings, this._offsetAtEnd = (e18.customEndingOffset ? e18.customEndingOffset : 0) * n20, this._position = -(e18.offsetAlongLine ? e18.offsetAlongLine : 0) * n20, this._pattern = new n7(), this._pattern.init(e18.placementTemplate, false), this._pattern.scale(n20), this._endings = this._originalEndings;
  }
  processPath(t17) {
    if (this._pattern.isEmpty()) return null;
    let s18;
    if (this.iteratePath) s18 = this._pattern.nextValue();
    else {
      this._originalEndings === Z.WithFullGap && this.isClosed ? this._endings = Z.WithMarkers : this._endings = this._originalEndings, this._pattern.extPtGap = 0;
      let i20, n20 = true;
      switch (this._endings) {
        case Z.NoConstraint:
          i20 = -this._position, i20 = this._adjustPosition(i20), n20 = false;
          break;
        case Z.WithHalfGap:
        default:
          i20 = -this._pattern.lastValue() / 2;
          break;
        case Z.WithFullGap:
          i20 = -this._pattern.lastValue(), this._pattern.extPtGap = this._pattern.lastValue();
          break;
        case Z.WithMarkers:
          i20 = 0;
          break;
        case Z.Custom:
          i20 = -this._position, i20 = this._adjustPosition(i20), this._pattern.extPtGap = 0.5 * this._offsetAtEnd;
      }
      if (!this._geometryWalker.init(t17, this._pattern, n20)) return null;
      this._pattern.reset();
      let a13 = 0;
      for (; i20 > a13; ) i20 -= a13, a13 = this._pattern.nextValue();
      a13 -= i20, s18 = a13, this.iteratePath = true;
    }
    const i19 = new h5();
    return this._geometryWalker.nextPointAndAngle(s18, i19) ? this._endings === Z.WithFullGap && this._geometryWalker.isPathEnd() ? (this.iteratePath = false, null) : this._endings === Z.WithMarkers && this._geometryWalker.isPathEnd() && (this.iteratePath = false, this.isClosed) ? null : (this.internalPlacement.setTranslate(i19.pt[0] - this._offset * i19.sa, i19.pt[1] + this._offset * i19.ca), this._angleToLine && this.internalPlacement.setRotateCS(i19.ca, i19.sa), this.internalPlacement) : (this.iteratePath = false, null);
  }
  _adjustPosition(t17) {
    let e18 = t17 / this._pattern.length();
    return e18 -= Math.floor(e18), e18 * this._pattern.length();
  }
};

// node_modules/@arcgis/core/symbols/cim/placements/PlacementAtExtremities.js
var _i = class _i {
  static local() {
    return null === _i.instance && (_i.instance = new _i()), _i.instance;
  }
  execute(t17, e18, s18, i19, n20) {
    return new r14(t17, e18, s18);
  }
};
_i.instance = null;
var i11 = _i;
var r14 = class extends i6 {
  constructor(t17, s18, i19) {
    super(t17, false, true), this._curveHelper = new s7(), this._placePerPart = s18.placePerPart ?? false, this._angleToLine = void 0 === s18.angleToLine || s18.angleToLine, this._offset = void 0 !== s18.offset ? s18.offset * i19 : 0, this._type = s18.extremityPlacement, this._position = void 0 !== s18.offsetAlongLine ? s18.offsetAlongLine * i19 : 0, this._beginProcessed = false;
  }
  processMultiPath(t17) {
    return this._placePerPart ? super.processMultiPath(t17) : this.processPath(t17);
  }
  processPath(t17) {
    let e18;
    switch (this._type) {
      case o.Both:
      default:
        this._beginProcessed ? (e18 = this._atExtremities(t17, this._position, false), this._beginProcessed = false, this.iterateMultiPath = false, this.iteratePath = false) : (e18 = this._atExtremities(t17, this._position, true), this._beginProcessed = true, this.iterateMultiPath = true, this.iteratePath = true);
        break;
      case o.JustBegin:
        e18 = this._atExtremities(t17, this._position, true);
        break;
      case o.JustEnd:
        e18 = this._atExtremities(t17, this._position, false);
      case o.None:
    }
    return e18;
  }
  _atExtremities(t17, e18, s18) {
    if (this._placePerPart || (s18 ? t17.seekPath(0) : t17.seekPath(t17.totalSize - 1)), s18 || t17.seekPathEnd(), s18 ? t17.nextPoint() : t17.prevPoint()) {
      let i19 = 0, [r19, n20] = [0, 0], [a13, o10] = [t17.x, t17.y];
      const h12 = [0, 0];
      for (; s18 ? t17.nextPoint() : t17.prevPoint(); ) {
        r19 = a13, n20 = o10, a13 = t17.x, o10 = t17.y;
        const s19 = this._curveHelper.getLength(r19, n20, a13, o10);
        if (i19 + s19 > e18) {
          const t18 = (e18 - i19) / s19, [l14, c6] = this._curveHelper.getAngleCS(h12, r19, n20, a13, o10, t18), P6 = this._curveHelper.getCoord2D(r19, n20, a13, o10, t18);
          return this.internalPlacement.setTranslate(P6[0] - this._offset * c6, P6[1] + this._offset * l14), this._angleToLine && this.internalPlacement.setRotateCS(-l14, -c6), this.internalPlacement;
        }
        i19 += s19;
      }
    }
    return null;
  }
};

// node_modules/@arcgis/core/symbols/cim/placements/PlacementAtRatioPositions.js
var _a2 = class _a2 {
  static local() {
    return null === _a2.instance && (_a2.instance = new _a2()), _a2.instance;
  }
  execute(t17, i19, s18, e18, n20) {
    return new h9(t17, i19, s18);
  }
};
_a2.instance = null;
var a9 = _a2;
var h9 = class extends i6 {
  constructor(t17, e18, n20) {
    super(t17), this._walker = new o3(), this._walker.updateTolerance(n20), this._angleToLine = void 0 === e18.angleToLine || e18.angleToLine, this._offset = void 0 !== e18.offset ? e18.offset * n20 : 0, this._beginGap = void 0 !== e18.beginPosition ? e18.beginPosition * n20 : 0, this._endGap = void 0 !== e18.endPosition ? e18.endPosition * n20 : 0, this._flipFirst = void 0 === e18.flipFirst || e18.flipFirst, this._pattern = new n7(), this._pattern.init(e18.positionArray, false, false), this._subPathLen = 0, this._posCount = this._pattern.size(), this._isFirst = true, this._prevPos = 0;
  }
  processPath(t17) {
    if (this._pattern.isEmpty()) return null;
    let i19;
    if (this.iteratePath) {
      const t18 = this._pattern.nextValue() * this._subPathLen, s19 = this._beginGap + t18;
      i19 = s19 - this._prevPos, this._prevPos = s19;
    } else {
      if (this._posCount = this._pattern.size(), this._isFirst = true, this._prevPos = 0, this._subPathLen = t17.pathLength() - this._beginGap - this._endGap, this._subPathLen < 0) return this.iteratePath = false, null;
      if (!this._walker.init(t17, this._pattern, false)) return null;
      this._pattern.reset();
      const s19 = this._pattern.nextValue() * this._subPathLen, e18 = this._beginGap + s19;
      i19 = e18 - this._prevPos, this._prevPos = e18, this.iteratePath = true;
    }
    const s18 = new h5();
    if (!this._walker.nextPointAndAngle(i19, s18, r6.END)) return this.iteratePath = false, null;
    this.internalPlacement.setTranslate(s18.pt[0] - this._offset * s18.sa, s18.pt[1] + this._offset * s18.ca);
    const a13 = this._isFirst && this._flipFirst;
    let h12, r19;
    return this._angleToLine ? (h12 = s18.ca, r19 = s18.sa) : (h12 = 1, r19 = 0), a13 && (h12 = -h12, r19 = -r19), this.internalPlacement.setRotateCS(h12, r19), this._isFirst = false, this._posCount--, 0 === this._posCount && (this.iteratePath = false), this.internalPlacement;
  }
};

// node_modules/@arcgis/core/symbols/cim/placements/PlacementInsidePolygon.js
var e16 = 512;
var h10 = 10;
var n14 = 24;
var _3 = 1e-6;
var _r4 = class _r4 {
  static local() {
    return null === _r4.instance && (_r4.instance = new _r4()), _r4.instance;
  }
  execute(t17, s18, i19, e18, h12) {
    return new a10(t17, s18, i19, e18, h12);
  }
};
_r4.instance = null;
var r15 = _r4;
var a10 = class _a3 {
  constructor(h12, n20, _6, r19, a13) {
    if (this._xMin = 0, this._xMax = 0, this._yMin = 0, this._yMax = 0, this._currentX = 0, this._currentY = 0, this._accelerationMap = null, this._testInsidePolygon = false, this._verticalSubdivision = true, this._stepX = Math.abs(n20.stepX ?? 16) * _6, this._stepY = Math.abs(n20.stepY ?? 16) * _6, this._stepX = Math.round(128 * this._stepX) / 128, this._stepY = Math.round(128 * this._stepY) / 128, 0 !== this._stepX && 0 !== this._stepY) {
      if (this._gridType = n20.gridType ?? K.Fixed, this._gridType === K.Random) {
        const s18 = n20.seed ?? 13, i19 = 1;
        this._randomLCG = new t(s18 * i19), this._randomness = (n20.randomness ?? 100) / 100, this._gridAngle = 0, this._shiftOddRows = false, this._cosAngle = 1, this._sinAngle = 0, this._offsetX = 0, this._offsetY = 0, this._buildRandomValues();
      } else {
        if (this._randomness = 0, this._gridAngle = n20.gridAngle ?? 0, this._shiftOddRows = n20.shiftOddRows ?? false, this._offsetX = (n20.offsetX ?? 0) * _6, this._offsetY = (n20.offsetY ?? 0) * _6, this._cosAngle = Math.cos(this._gridAngle / 180 * Math.PI), this._sinAngle = -Math.sin(this._gridAngle / 180 * Math.PI), this._stepX) if (this._offsetX < 0) for (; this._offsetX < -0.5 * this._stepX; ) this._offsetX += this._stepX;
        else for (; this._offsetX >= 0.5 * this._stepX; ) this._offsetX -= this._stepX;
        if (this._stepY) if (this._offsetY < 0) for (; this._offsetY < -0.5 * this._stepY; ) this._offsetY += this._stepY;
        else for (; this._offsetY >= 0.5 * this._stepY; ) this._offsetY -= this._stepY;
      }
      if (this._graphicOriginX = 0, this._graphicOriginY = 0, null != r19) {
        const [t17, s18, i19, h13] = r19.split("/"), n21 = parseFloat(t17), _7 = parseFloat(s18), a14 = parseFloat(i19), o10 = parseFloat(h13);
        this._graphicOriginX = -(o10 * 2 ** n21 + a14) * e16, this._graphicOriginY = _7 * e16, this._testInsidePolygon = true;
      }
      this._internalPlacement = new t6(), this._calculateMinMax(h12), this._geometryCursor = h12;
    }
  }
  next() {
    return this._geometryCursor ? this._nextInside() : null;
  }
  _buildRandomValues() {
    if (!_a3._randValues) {
      _a3._randValues = [];
      for (let t17 = 0; t17 < n14; t17++) for (let s18 = 0; s18 < n14; s18++) _a3._randValues.push(this._randomLCG.getFloat()), _a3._randValues.push(this._randomLCG.getFloat());
    }
  }
  _calculateMinMax(t17) {
    let s18, i19, h12, n20, _6, r19, a13, o10, l14, f6, c6, u14, p8, M4;
    this._xMin = 0, this._xMax = 0, this._yMin = 0, this._yMax = 0, a13 = o10 = p8 = c6 = Number.MAX_VALUE, l14 = f6 = M4 = u14 = -Number.MAX_VALUE;
    const g2 = 1 !== this._cosAngle;
    for (t17.reset(); t17.nextPath(); ) for (; t17.nextPoint(); ) r19 = t17.x, _6 = t17.y, s18 = r19 - this._graphicOriginX - this._offsetX, i19 = _6 - this._graphicOriginY - this._offsetY, g2 ? (h12 = this._cosAngle * s18 - this._sinAngle * i19, n20 = this._sinAngle * s18 + this._cosAngle * i19) : (h12 = s18, n20 = i19), a13 = Math.min(a13, h12), l14 = Math.max(l14, h12), o10 = Math.min(o10, n20), f6 = Math.max(f6, n20), c6 = Math.min(c6, _6), u14 = Math.max(u14, _6), p8 = Math.min(p8, r19), M4 = Math.max(M4, r19);
    c6 = c6 !== Number.MAX_VALUE ? c6 : -512 - this._stepY, u14 = u14 !== -Number.MAX_VALUE ? u14 : this._stepY, p8 = p8 !== Number.MAX_VALUE ? p8 : -this._stepX, M4 = M4 !== -Number.MAX_VALUE ? M4 : e16 + this._stepX;
    const d4 = u14 - c6, X2 = M4 - p8;
    if (this._verticalSubdivision = d4 >= X2, this._polygonMin = this._verticalSubdivision ? c6 : p8, this._testInsidePolygon) {
      let t18 = 0 - this._graphicOriginX - this._offsetX - this._stepX, s19 = e16 - this._graphicOriginX - this._offsetX + this._stepX, i20 = -512 - this._graphicOriginY - this._offsetY - this._stepY, h13 = 0 - this._graphicOriginY - this._offsetY + this._stepY;
      if (g2) {
        const e18 = [[t18, i20], [t18, h13], [s19, i20], [s19, h13]];
        t18 = i20 = Number.MAX_VALUE, s19 = h13 = -Number.MAX_VALUE;
        for (const n21 of e18) {
          const e19 = this._cosAngle * n21[0] - this._sinAngle * n21[1], _7 = this._sinAngle * n21[0] + this._cosAngle * n21[1];
          t18 = Math.min(t18, e19), s19 = Math.max(s19, e19), i20 = Math.min(i20, _7), h13 = Math.max(h13, _7);
        }
      }
      a13 = a13 !== Number.MAX_VALUE ? Math.max(a13, t18) : t18, o10 = o10 !== Number.MAX_VALUE ? Math.max(o10, i20) : i20, l14 = l14 !== -Number.MAX_VALUE ? Math.min(l14, s19) : s19, f6 = f6 !== -Number.MAX_VALUE ? Math.min(f6, h13) : h13;
    }
    this._xMin = Math.round(a13 / this._stepX), this._xMax = Math.round(l14 / this._stepX), this._yMin = Math.round(o10 / this._stepY), this._yMax = Math.round(f6 / this._stepY), this._currentX = this._xMax + 1, this._currentY = this._yMin - 1, this._buildAccelerationMap(t17, p8, M4, c6, u14);
  }
  _buildAccelerationMap(t17, s18, i19, n20, _6) {
    t17.reset();
    const r19 = /* @__PURE__ */ new Map(), a13 = this._verticalSubdivision, o10 = a13 ? _6 - n20 : i19 - s18;
    let f6 = Math.ceil(o10 / h10);
    if (f6 <= 1) return;
    const c6 = Math.floor(o10 / f6);
    let u14, p8, M4, g2, d4, X2, m10, x6, A4, Y3, y7;
    for (f6++, this._delta = c6, a13 ? (A4 = -512 - 2 * this._stepY, Y3 = 2 * this._stepY, y7 = n20) : (A4 = -2 * this._stepX, Y3 = e16 + 2 * this._stepX, y7 = s18); t17.nextPath(); ) if (!(t17.pathSize < 2) && t17.nextPoint()) for (u14 = t17.x, p8 = t17.y; t17.nextPoint(); u14 = M4, p8 = g2) {
      if (M4 = t17.x, g2 = t17.y, a13) {
        if (p8 === g2 || p8 < A4 && g2 < A4 || p8 > Y3 && g2 > Y3) continue;
        d4 = Math.min(p8, g2), X2 = Math.max(p8, g2);
      } else {
        if (u14 === M4 || u14 < A4 && M4 < A4 || u14 > Y3 && M4 > Y3) continue;
        d4 = Math.min(u14, M4), X2 = Math.max(u14, M4);
      }
      for (; d4 < X2; ) m10 = Math.floor((d4 - y7) / c6), l11(m10, u14, p8, M4, g2, r19), d4 += c6;
      x6 = Math.floor((X2 - y7) / c6), x6 > m10 && l11(x6, u14, p8, M4, g2, r19);
    }
    this._accelerationMap = r19;
  }
  _nextInside() {
    for (; ; ) {
      if (this._currentX > this._xMax) {
        if (this._currentY++, this._currentY > this._yMax) return null;
        this._currentX = this._xMin, this._shiftOddRows && this._currentY % 2 && this._currentX--;
      }
      let t17 = this._currentX * this._stepX + this._offsetX;
      this._shiftOddRows && this._currentY % 2 && (t17 += 0.5 * this._stepX);
      const s18 = this._currentY * this._stepY + this._offsetY;
      let e18, h12;
      if (this._currentX++, this._gridType === K.Random) {
        const i19 = (this._currentX % n14 + n14) % n14, _6 = (this._currentY % n14 + n14) % n14;
        e18 = this._graphicOriginX + t17 + this._stepX * this._randomness * (0.5 - _a3._randValues[_6 * n14 + i19]) * 2 / 3, h12 = this._graphicOriginY + s18 + this._stepY * this._randomness * (0.5 - _a3._randValues[_6 * n14 + i19 + 1]) * 2 / 3;
      } else e18 = this._graphicOriginX + this._cosAngle * t17 + this._sinAngle * s18, h12 = this._graphicOriginY - this._sinAngle * t17 + this._cosAngle * s18;
      if (!this._testInsidePolygon || this._isInsidePolygon(e18, h12, this._geometryCursor)) return this._internalPlacement.setTranslate(e18, h12), this._internalPlacement;
    }
  }
  _isInsidePolygon(t17, s18, i19) {
    if (null == this._accelerationMap) return o5(t17, s18, i19);
    t17 += _3, s18 += _3;
    const e18 = this._verticalSubdivision, h12 = e18 ? s18 : t17, n20 = Math.floor((h12 - this._polygonMin) / this._delta), r19 = this._accelerationMap.get(n20);
    if (!r19) return false;
    let a13, l14, f6, c6 = 0;
    for (const _6 of r19) {
      if (a13 = _6[0], l14 = _6[1], e18) {
        if (a13[1] > s18 == l14[1] > s18) continue;
        f6 = (l14[0] - a13[0]) * (s18 - a13[1]) - (l14[1] - a13[1]) * (t17 - a13[0]);
      } else {
        if (a13[0] > t17 == l14[0] > t17) continue;
        f6 = (l14[1] - a13[1]) * (t17 - a13[0]) - (l14[0] - a13[0]) * (s18 - a13[1]);
      }
      f6 > 0 ? c6++ : c6--;
    }
    return 0 !== c6;
  }
};
function o5(t17, s18, i19) {
  let e18, h12, n20, r19, a13 = 0;
  for (t17 += _3, s18 += _3, i19.reset(); i19.nextPath(); ) if (i19.nextPoint()) for (e18 = i19.x, h12 = i19.y; i19.nextPoint(); e18 = n20, h12 = r19) {
    if (n20 = i19.x, r19 = i19.y, h12 > s18 == r19 > s18) continue;
    (n20 - e18) * (s18 - h12) - (r19 - h12) * (t17 - e18) > 0 ? a13++ : a13--;
  }
  return 0 !== a13;
}
function l11(t17, s18, i19, e18, h12, n20) {
  let _6 = n20.get(t17);
  _6 || (_6 = [], n20.set(t17, _6)), _6.push([[s18, i19], [e18, h12]]);
}

// node_modules/@arcgis/core/symbols/cim/placements/PlacementOnLine.js
var i12 = 1e-3;
var _s2 = class _s2 {
  static local() {
    return null === _s2.instance && (_s2.instance = new _s2()), _s2.instance;
  }
  execute(t17, e18, n20, i19, s18) {
    return new r16(t17, e18, n20);
  }
};
_s2.instance = null;
var s13 = _s2;
var r16 = class extends i6 {
  constructor(t17, n20, s18) {
    super(t17), this._curveHelper = new s7(), this._angleToLine = void 0 === n20.angleToLine || n20.angleToLine, this._offset = void 0 !== n20.offset ? n20.offset * s18 : 0, this._relativeTo = n20.relativeTo, this._position = void 0 !== n20.startPointOffset ? n20.startPointOffset * s18 : 0, this._epsilon = i12 * s18;
  }
  processPath(t17) {
    const e18 = this._position;
    if (this._relativeTo === Q.SegmentMidpoint) {
      if (this.iteratePath || (this.iteratePath = true), t17.nextPoint()) {
        let [e19, n20] = [t17.x, t17.y], [i20, s18] = [0, 0];
        const r19 = [0, 0];
        for (; t17.nextPoint(); ) {
          i20 = t17.x, s18 = t17.y;
          const o10 = this._curveHelper.getLength(e19, n20, i20, s18);
          if (o10 < this._epsilon) {
            e19 = i20, n20 = s18;
            continue;
          }
          const a13 = 0.5 + this._position / o10, [l14, h12] = this._curveHelper.getAngleCS(r19, e19, n20, i20, s18, a13), c6 = this._curveHelper.getCoord2D(e19, n20, i20, s18, a13);
          return this.internalPlacement.setTranslate(c6[0] - this._offset * h12, c6[1] + this._offset * l14), this._angleToLine && this.internalPlacement.setRotateCS(l14, h12), this.internalPlacement;
        }
      }
      return this.iteratePath = false, null;
    }
    const i19 = this._relativeTo === Q.LineEnd;
    return this.onLine(t17, e18, i19);
  }
  onLine(t17, e18, i19) {
    let s18, r19 = false;
    switch (this._relativeTo) {
      case Q.LineMiddle:
      default:
        t17.seekPathStart(), s18 = t17.pathLength() / 2 + e18;
        break;
      case Q.LineBeginning:
        s18 = e18;
        break;
      case Q.LineEnd:
        s18 = e18, r19 = true;
    }
    i19 ? t17.seekPathEnd() : t17.seekPathStart();
    let o10 = 0;
    if (i19 ? t17.prevPoint() : t17.nextPoint()) {
      let [e19, n20] = [t17.x, t17.y], [a13, l14] = [0, 0];
      const h12 = [0, 0];
      for (; i19 ? t17.prevPoint() : t17.nextPoint(); ) {
        a13 = t17.x, l14 = t17.y;
        const i20 = this._curveHelper.getLength(e19, n20, a13, l14);
        if (o10 + i20 > s18) {
          const t18 = (s18 - o10) / i20, [c6, f6] = this._curveHelper.getAngleCS(h12, e19, n20, a13, l14, t18), u14 = this._curveHelper.getCoord2D(e19, n20, a13, l14, t18), _6 = r19 ? -this._offset : this._offset;
          return this.internalPlacement.setTranslate(u14[0] - _6 * f6, u14[1] + _6 * c6), this._angleToLine && (r19 ? this.internalPlacement.setRotateCS(-c6, -f6) : this.internalPlacement.setRotateCS(c6, f6)), this.internalPlacement;
        }
        e19 = a13, n20 = l14, o10 += i20;
      }
    }
    return null;
  }
};

// node_modules/@arcgis/core/symbols/cim/placements/PlacementOnVertices.js
var s14 = 1e-15;
var _i2 = class _i2 {
  static local() {
    return null === _i2.instance && (_i2.instance = new _i2()), _i2.instance;
  }
  execute(t17, e18, s18, i19, o10) {
    return new n15(t17, e18, s18);
  }
};
_i2.instance = null;
var i13 = _i2;
var n15 = class extends i6 {
  constructor(t17, s18, i19) {
    super(t17), this._curveHelper = new s7(), this._angleToLine = void 0 === s18.angleToLine || s18.angleToLine, this._offset = void 0 !== s18.offset ? s18.offset * i19 : 0, this._endPoints = void 0 === s18.placeOnEndPoints || s18.placeOnEndPoints, this._controlPoints = void 0 === s18.placeOnControlPoints || s18.placeOnControlPoints, this._regularVertices = void 0 === s18.placeOnRegularVertices || s18.placeOnRegularVertices, this._tags = [], this._tagIterator = 0;
  }
  processPath(t17) {
    if (this.iteratePath || (this._preparePath(t17), this.iteratePath = true), this._tagIterator >= this._tags.length) return this._tags.length = 0, this._tagIterator = 0, this.iteratePath = false, null;
    const e18 = this._tags[this._tagIterator];
    this._angleToLine && this.internalPlacement.setRotate(e18[2]);
    let s18 = e18[0], i19 = e18[1];
    if (0 !== this._offset) {
      const t18 = Math.cos(e18[2]), n20 = Math.sin(e18[2]);
      s18 -= this._offset * n20, i19 += this._offset * t18;
    }
    return this.internalPlacement.setTranslate(s18, i19), this._tagIterator++, this.internalPlacement;
  }
  _preparePath(t17) {
    this._tags.length = 0, this._tagIterator = 0, t17.seekPathStart();
    const e18 = t17.isClosed();
    let s18 = 0, i19 = false, n20 = 0, a13 = 0;
    if (t17.seekPathStart(), t17.nextPoint()) {
      let r19 = t17.x, h12 = t17.y, l14 = t17.getControlPoint(), _6 = true, c6 = t17.nextPoint();
      for (; c6; ) {
        const g2 = t17.x, P6 = t17.y, u14 = t17.getControlPoint();
        (this._angleToLine || 0 !== this._offset) && (n20 = this._curveHelper.getAngle(r19, h12, g2, P6, 0)), _6 ? (_6 = false, e18 ? (s18 = n20, i19 = l14) : (this._endPoints || this._controlPoints && l14) && this._tags.push([r19, h12, n20])) : l14 ? this._controlPoints && this._tags.push([r19, h12, o6(a13, n20)]) : this._regularVertices && this._tags.push([r19, h12, o6(a13, n20)]), (this._angleToLine || 0 !== this._offset) && (a13 = this._curveHelper.getAngle(r19, h12, g2, P6, 1)), c6 = t17.nextPoint(), c6 || (e18 ? u14 || i19 ? this._controlPoints && this._tags.push([g2, P6, o6(a13, s18)]) : this._regularVertices && this._tags.push([g2, P6, o6(a13, s18)]) : (this._endPoints || this._controlPoints && u14) && this._tags.push([g2, P6, a13])), r19 = g2, h12 = P6, l14 = u14;
      }
    }
    this._tagIterator = 0;
  }
};
function o6(t17, e18) {
  const i19 = Math.PI;
  for (; Math.abs(e18 - t17) > i19 + 2 * s14; ) e18 - t17 > i19 ? e18 -= 2 * i19 : e18 += 2 * i19;
  return (t17 + e18) / 2;
}

// node_modules/@arcgis/core/geometry/support/labelPoint.js
var N3 = 100 * 222045e-21;
function l12(t17) {
  if (0 === t17.totalSize) return null;
  const a13 = c(t17);
  if (!a13) return null;
  const o10 = 4 * (Math.abs(a13[0]) + Math.abs(a13[2]) + Math.abs(a13[1]) + Math.abs(a13[3]) + 1) * N3;
  let s18 = 0, c6 = 0;
  t17.reset();
  for (let e18 = 0; t17.nextPath(); e18++) {
    const n20 = t17.getCurrentRingArea();
    n20 > c6 && (c6 = n20, s18 = e18);
  }
  if (t17.seekPath(s18), 0 === t17.pathSize) return null;
  t17.seekPathStart();
  const l14 = f4(t17);
  if (Math.abs(c6) <= 2 * o10 * o10) return [(l14[0] + l14[2]) / 2, (l14[1] + l14[3]) / 2];
  t17.seekPathStart();
  const x6 = i2(t17, u());
  if (null === x6) return null;
  if (t17.totalPoints < 4) return x6;
  const m10 = [[NaN, NaN], [NaN, NaN], [NaN, NaN], [NaN, NaN]], d4 = [NaN, NaN, NaN, NaN], P6 = [NaN, NaN, NaN, NaN];
  let y7 = false, M4 = f5(x6, t17, true);
  0 === M4.distance && (y7 = true, m10[0][0] = x6[0], m10[0][1] = x6[1], M4 = f5(x6, t17, false)), d4[0] = M4.distance, P6[0] = 0;
  const b5 = [NaN, NaN];
  let S4 = false, k = 0.25, z2 = -1, g2 = NaN;
  do {
    if (g2 = NaN, m10[1] = h11(t17, w3(l14[0], l14[2], k), o10, a13), isNaN(m10[1][0]) || isNaN(m10[1][1]) || (M4 = f5(m10[1], t17, false), g2 = M4.distance), !isNaN(g2) && g2 > o10 && u12(m10[1], t17)) S4 = true, d4[1] = g2, P6[1] = p6(m10[1], x6);
    else if (!isNaN(g2) && g2 > z2 && (z2 = g2, b5[0] = m10[1][0], b5[1] = m10[1][1]), k -= 0.01, k < 0.1) {
      if (!(z2 >= 0)) break;
      S4 = true, d4[1] = z2, m10[1][0] = b5[0], m10[1][1] = b5[1], P6[1] = p6(m10[1], x6);
    }
  } while (!S4);
  S4 = false, k = 0.5, z2 = -1;
  let q2 = 0.01, j2 = 1;
  do {
    if (g2 = NaN, m10[2] = h11(t17, w3(l14[0], l14[2], k), o10, a13), isNaN(m10[2][0]) || isNaN(m10[2][1]) || (M4 = f5(m10[2], t17, false), g2 = M4.distance), !isNaN(g2) && g2 > o10 && u12(m10[2], t17)) S4 = true, d4[2] = g2, P6[2] = p6(m10[2], x6);
    else if (!isNaN(g2) && g2 > z2) z2 = g2, b5[0] = m10[2][0], b5[1] = m10[2][1];
    else if (g2 > z2 && (z2 = g2, b5[0] = m10[2][0], b5[1] = m10[2][1]), k = 0.5 + q2 * j2, q2 += 0.01, j2 *= -1, k < 0.3 || k > 0.7) {
      if (!(z2 >= 0)) break;
      S4 = true, d4[2] = z2, m10[2][0] = b5[0], m10[2][1] = b5[1], P6[2] = p6(m10[2], x6);
    }
  } while (!S4);
  S4 = false, k = 0.75, z2 = -1;
  do {
    if (g2 = NaN, m10[3] = h11(t17, w3(l14[0], l14[2], k), o10, a13), isNaN(m10[3][0]) || isNaN(m10[3][1]) || (M4 = f5(m10[3], t17, false), g2 = M4.distance), !isNaN(g2) && g2 > o10 && u12(m10[3], t17)) S4 = true, d4[3] = g2, P6[3] = p6(m10[3], x6);
    else if (g2 > z2 && (z2 = g2, b5[0] = m10[3][0], b5[1] = m10[3][1]), k += 0.01, k > 0.9) {
      if (!(z2 >= 0)) break;
      S4 = true, d4[3] = z2, m10[3][0] = b5[0], m10[3][1] = b5[1], P6[3] = p6(m10[3], x6);
    }
  } while (!S4);
  const T4 = [0, 1, 2, 3], D = y7 ? 0 : 1;
  let R4;
  for (let e18 = D; e18 < 4; e18++) for (let t18 = D; t18 < 3; t18++) {
    const e19 = P6[t18], n20 = P6[t18 + 1];
    C2(e19, n20) > 0 && (R4 = T4[t18], T4[t18] = T4[t18 + 1], T4[t18 + 1] = R4, P6[t18] = n20, P6[t18 + 1] = e19);
  }
  let B3 = D, Q3 = 0, U3 = 0;
  for (let e18 = D; e18 < 4; e18++) {
    switch (e18) {
      case 0:
        U3 = 2 * d4[T4[e18]];
        break;
      case 1:
        U3 = 1.66666666 * d4[T4[e18]];
        break;
      case 2:
        U3 = 1.33333333 * d4[T4[e18]];
        break;
      case 3:
        U3 = d4[T4[e18]];
    }
    U3 > Q3 && (Q3 = U3, B3 = T4[e18]);
  }
  return m10[B3];
}
function u12(t17, e18) {
  let n20, i19, r19, a13, o10 = 0;
  for (e18.reset(); e18.nextPath() && e18.nextPoint(); ) for (n20 = e18.x, i19 = e18.y; e18.nextPoint(); n20 = r19, i19 = a13) {
    if (r19 = e18.x, a13 = e18.y, i19 > t17[1] == a13 > t17[1]) continue;
    (r19 - n20) * (t17[1] - i19) - (a13 - i19) * (t17[0] - n20) > 0 ? o10++ : o10--;
  }
  return 0 !== o10;
}
function f5(t17, e18, n20) {
  if (n20 && u12(t17, e18)) return { coord: t17, distance: 0 };
  let i19 = 1 / 0, r19 = 0, a13 = 0, s18 = [0, 0], c6 = [0, 0];
  const N5 = [0, 0];
  for (e18.reset(); e18.nextPath() && e18.nextPoint(); ) if (!(e18.pathSize < 2)) for (s18[0] = e18.x, s18[1] = e18.y; e18.nextPoint(); s18 = c6) {
    c6 = [e18.x, e18.y], f2(N5, t17, s18, c6);
    const n21 = p6(t17, N5);
    n21 < i19 && (i19 = n21, r19 = N5[0], a13 = N5[1]);
  }
  return { coord: [r19, a13], distance: Math.sqrt(i19) };
}
function h11(t17, n20, i19, r19) {
  const a13 = [n20, 0];
  let o10 = 1 / 0, s18 = 1 / 0, N5 = false, l14 = false;
  const u14 = [[n20, r19[1] - 1], [n20, r19[3] + 1]], f6 = [0, 0], h12 = [0, 0], m10 = [0, 0], d4 = [[0, 0], [0, 0]], P6 = u();
  for (t17.reset(); t17.nextPath() && t17.nextPoint(); ) if (!(t17.pathSize < 2)) for (d4[0][0] = t17.x, d4[0][1] = t17.y; t17.nextPoint(); d4[0][0] = d4[1][0], d4[0][1] = d4[1][1]) {
    if (d4[1][0] = t17.x, d4[1][1] = t17.y, null === x4(P6, d4)) continue;
    if (h12[0] = u14[0][0], h12[1] = u14[0][1], m10[0] = u14[1][0], m10[1] = u14[1][1], 0 === M2(P6, h12, m10)) continue;
    if (!G(u14[0], u14[1], d4[0], d4[1], f6)) continue;
    const e18 = f6[1];
    o10 > s18 ? e18 < o10 && (o10 = e18, N5 = true) : e18 < s18 && (s18 = e18, l14 = true);
  }
  return N5 && l14 ? a13[1] = (o10 + s18) / 2 : a13[0] = a13[1] = NaN, a13;
}
function x4(t17, n20) {
  if (n20.length < 2) return null;
  t17 || (t17 = u());
  const [i19, r19] = n20[0], [a13, o10] = n20[1];
  return t17[0] = Math.min(i19, a13), t17[1] = Math.min(r19, o10), t17[2] = Math.max(i19, a13), t17[3] = Math.max(r19, o10), t17;
}
var m8 = 1;
var d3 = 4;
var P5 = 3;
var y5 = 12;
function M2(t17, e18, n20) {
  let i19 = b3(e18, t17), r19 = b3(n20, t17);
  const a13 = t17[0], o10 = t17[1], s18 = t17[2], c6 = t17[3];
  if (i19 & r19) return 0;
  if (!(i19 | r19)) return 4;
  const N5 = (i19 ? 1 : 0) | (r19 ? 2 : 0);
  do {
    const N6 = n20[0] - e18[0], l14 = n20[1] - e18[1];
    if (N6 > l14) i19 & P5 ? (i19 & m8 ? (e18[1] += l14 * (a13 - e18[0]) / N6, e18[0] = a13) : (e18[1] += l14 * (s18 - e18[0]) / N6, e18[0] = s18), i19 = b3(e18, t17)) : r19 & P5 ? (r19 & m8 ? (n20[1] += l14 * (a13 - n20[0]) / N6, n20[0] = a13) : (n20[1] += l14 * (s18 - n20[0]) / N6, n20[0] = s18), r19 = b3(n20, t17)) : i19 ? (i19 & d3 ? (e18[0] += N6 * (o10 - e18[1]) / l14, e18[1] = o10) : (e18[0] += N6 * (c6 - e18[1]) / l14, e18[1] = c6), i19 = b3(e18, t17)) : (r19 & d3 ? (n20[0] += N6 * (o10 - n20[1]) / l14, n20[1] = o10) : (n20[0] += N6 * (c6 - n20[1]) / l14, n20[1] = c6), r19 = b3(n20, t17));
    else if (i19 & y5 ? (i19 & d3 ? (e18[0] += N6 * (o10 - e18[1]) / l14, e18[1] = o10) : (e18[0] += N6 * (c6 - e18[1]) / l14, e18[1] = c6), i19 = b3(e18, t17)) : r19 & y5 ? (r19 & d3 ? (n20[0] += N6 * (o10 - n20[1]) / l14, n20[1] = o10) : (n20[0] += N6 * (c6 - n20[1]) / l14, n20[1] = c6), r19 = b3(n20, t17)) : i19 ? (i19 & m8 ? (e18[1] += l14 * (a13 - e18[0]) / N6, e18[0] = a13) : (e18[1] += l14 * (s18 - e18[0]) / N6, e18[0] = s18), i19 = b3(e18, t17)) : (r19 & m8 ? (n20[1] += l14 * (a13 - n20[0]) / N6, n20[0] = a13) : (n20[1] += l14 * (s18 - n20[0]) / N6, n20[0] = s18), r19 = b3(n20, t17)), i19 & r19) return 0;
  } while (i19 | r19);
  return N5;
}
function b3(t17, e18) {
  return (t17[0] < e18[0] ? 1 : 0) | (t17[0] > e18[2] ? 1 : 0) << 1 | (t17[1] < e18[1] ? 1 : 0) << 2 | (t17[1] > e18[3] ? 1 : 0) << 3;
}
function w3(t17, e18, n20) {
  return t17 + (e18 - t17) * n20;
}
function p6(t17, e18) {
  return (t17[0] - e18[0]) * (t17[0] - e18[0]) + (t17[1] - e18[1]) * (t17[1] - e18[1]);
}
function C2(t17, e18) {
  if (t17 < e18) return -1;
  if (t17 > e18) return 1;
  if (t17 === e18) return 0;
  const n20 = isNaN(t17), i19 = isNaN(e18);
  return n20 < i19 ? -1 : n20 > i19 ? 1 : 0;
}

// node_modules/@arcgis/core/symbols/cim/placements/PlacementPolygonCenter.js
var _o2 = class _o2 {
  static local() {
    return null === _o2.instance && (_o2.instance = new _o2()), _o2.instance;
  }
  execute(t17, e18, s18, n20, r19) {
    return new i14(t17, e18, s18);
  }
};
_o2.instance = null;
var o7 = _o2;
var i14 = class {
  constructor(t17, e18, s18) {
    this._geometryCursor = t17, this._offsetX = void 0 !== e18.offsetX ? e18.offsetX * s18 : 0, this._offsetY = void 0 !== e18.offsetY ? e18.offsetY * s18 : 0, this._method = void 0 !== e18.method ? e18.method : V.OnPolygon, this._placementPerPart = void 0 !== e18.placePerPart && e18.placePerPart, this._internalPlacement = new t6();
  }
  next() {
    const t17 = this._geometryCursor;
    if (!t17) return null;
    if (!this._placementPerPart) return this._geometryCursor = null, this._polygonCenter(t17);
    for (; t17.nextPath(); ) if (!(t17.getCurrentRingArea() < 0)) return this._polygonCenter(t17.getCurrentPath());
    return this._geometryCursor = null, null;
  }
  _polygonCenter(n20) {
    let o10 = false;
    switch (this._method) {
      case V.CenterOfMass:
        {
          const t17 = f3(n20);
          t17 && (this._internalPlacement.setTranslate(t17[0] + this._offsetX, t17[1] + this._offsetY), o10 = true);
        }
        break;
      case V.BoundingBoxCenter:
        {
          const e18 = c(n20);
          e18 && (this._internalPlacement.setTranslate((e18[2] + e18[0]) / 2 + this._offsetX, (e18[3] + e18[1]) / 2 + this._offsetY), o10 = true);
        }
        break;
      case V.OnPolygon:
      default: {
        const t17 = l12(n20);
        null !== t17 && (this._internalPlacement.setTranslate(t17[0] + this._offsetX, t17[1] + this._offsetY), o10 = true);
      }
    }
    return o10 ? this._internalPlacement : null;
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/alignmentUtils.js
var t11 = () => i.getLogger("esri.views.2d.engine.webgl.alignmentUtils");
var r17;
var n16;
function a11(e18) {
  if (!e18) return r17.Center;
  switch (e18) {
    case "Left":
    case "left":
      return r17.Left;
    case "Right":
    case "right":
      return r17.Right;
    case "Justify":
      return t11().warnOnce("Horizontal alignment 'justify' is not implemented. Falling back to 'center'."), r17.Center;
    case "Center":
    case "center":
      return r17.Center;
  }
}
function c5(e18) {
  if (!e18) return n16.Center;
  switch (e18) {
    case "Top":
    case "top":
      return n16.Top;
    case "Center":
    case "middle":
      return n16.Center;
    case "Baseline":
    case "baseline":
      return n16.Baseline;
    case "Bottom":
    case "bottom":
      return n16.Bottom;
  }
}
function o8(e18) {
  switch (e18) {
    case "above-left":
    case "esriServerPointLabelPlacementAboveLeft":
      return ["right", "bottom"];
    case "above-center":
    case "above-along":
    case "esriServerPointLabelPlacementAboveCenter":
    case "esriServerLinePlacementAboveAlong":
      return ["center", "bottom"];
    case "above-right":
    case "esriServerPointLabelPlacementAboveRight":
      return ["left", "bottom"];
    case "center-left":
    case "esriServerPointLabelPlacementCenterLeft":
      return ["right", "middle"];
    case "center-center":
    case "center-along":
    case "esriServerPointLabelPlacementCenterCenter":
    case "esriServerLinePlacementCenterAlong":
    case "always-horizontal":
    case "esriServerPolygonPlacementAlwaysHorizontal":
      return ["center", "middle"];
    case "center-right":
    case "esriServerPointLabelPlacementCenterRight":
      return ["left", "middle"];
    case "below-left":
    case "esriServerPointLabelPlacementBelowLeft":
      return ["right", "top"];
    case "below-center":
    case "below-along":
    case "esriServerPointLabelPlacementBelowCenter":
    case "esriServerLinePlacementBelowAlong":
      return ["center", "top"];
    case "below-right":
    case "esriServerPointLabelPlacementBelowRight":
      return ["left", "top"];
    default:
      return console.debug(`Found invalid placement type ${e18}`), ["center", "middle"];
  }
}
function i15(e18) {
  switch (e18) {
    case r17.Right:
    case "right":
      return -1;
    case r17.Center:
    case "center":
      return 0;
    case r17.Left:
    case "left":
      return 1;
    default:
      return console.debug(`Found invalid horizontal alignment ${e18}`), 0;
  }
}
function s15(e18) {
  switch (e18) {
    case n16.Top:
    case "top":
      return 1;
    case n16.Center:
    case "middle":
      return 0;
    case n16.Bottom:
    case n16.Baseline:
    case "baseline":
    case "bottom":
      return -1;
    default:
      return console.debug(`Found invalid vertical alignment ${e18}`), 0;
  }
}
!function(e18) {
  e18[e18.Left = -1] = "Left", e18[e18.Center = 0] = "Center", e18[e18.Right = 1] = "Right";
}(r17 || (r17 = {})), function(e18) {
  e18[e18.Top = 1] = "Top", e18[e18.Center = 0] = "Center", e18[e18.Bottom = -1] = "Bottom", e18[e18.Baseline = 2] = "Baseline";
}(n16 || (n16 = {}));

// node_modules/@arcgis/core/symbols/cim/CIMImageColorSubstitutionHelper.js
var t12 = class {
  applyColorSubstitution(t17, a13) {
    if (!a13) return t17;
    this._rasterizationCanvas || (this._rasterizationCanvas = document.createElement("canvas"));
    const { width: e18, height: n20 } = t17, o10 = this._rasterizationCanvas, r19 = o10.getContext("2d", { willReadFrequently: true });
    t17 !== o10 && (o10.width = e18, o10.height = n20, r19.drawImage(t17, 0, 0, e18, n20));
    const i19 = r19.getImageData(0, 0, e18, n20).data;
    if (a13) {
      for (const l14 of a13) if (l14 && l14.oldColor && 4 === l14.oldColor.length && l14.newColor && 4 === l14.newColor.length) {
        const [t18, a14, e19, n21] = l14.oldColor, [o11, r20, s19, h12] = l14.newColor;
        if (t18 === o11 && a14 === r20 && e19 === s19 && n21 === h12) continue;
        for (let l15 = 0; l15 < i19.length; l15 += 4) t18 === i19[l15] && a14 === i19[l15 + 1] && e19 === i19[l15 + 2] && n21 === i19[l15 + 3] && (i19[l15] = o11, i19[l15 + 1] = r20, i19[l15 + 2] = s19, i19[l15 + 3] = h12);
      }
    }
    const s18 = new ImageData(i19, e18, n20);
    return r19.putImageData(s18, 0, 0), o10;
  }
  tintImageData(t17, a13) {
    if (!a13 || a13.length < 4) return t17;
    this._rasterizationCanvas || (this._rasterizationCanvas = document.createElement("canvas"));
    const { width: e18, height: n20 } = t17, o10 = this._rasterizationCanvas, r19 = o10.getContext("2d", { willReadFrequently: true });
    t17 !== o10 && (o10.width = e18, o10.height = n20, r19.drawImage(t17, 0, 0, e18, n20));
    const i19 = r19.getImageData(0, 0, e18, n20), s18 = new Uint8Array(i19.data), l14 = [a13[0] / 255, a13[1] / 255, a13[2] / 255, a13[3] / 255];
    for (let g2 = 0; g2 < s18.length; g2 += 4) s18[g2] *= l14[0], s18[g2 + 1] *= l14[1], s18[g2 + 2] *= l14[2], s18[g2 + 3] *= l14[3];
    const h12 = new ImageData(new Uint8ClampedArray(s18.buffer), e18, n20);
    return r19.putImageData(h12, 0, 0), o10;
  }
};

// node_modules/@arcgis/core/symbols/cim/CIMOperators.js
function R2(P6) {
  if (!P6) return null;
  switch (P6.type) {
    case "CIMGeometricEffectAddControlPoints":
      return e8.local();
    case "CIMGeometricEffectArrow":
      return p4.local();
    case "CIMGeometricEffectBuffer":
      return m6.local();
    case "CIMGeometricEffectControlMeasureLine":
      return r4.local();
    case "CIMGeometricEffectCut":
      return r5.local();
    case "CIMGeometricEffectDashes":
      return h6.local();
    case "CIMGeometricEffectDonut":
      return s9.local();
    case "CIMGeometricEffectJog":
      return e10.local();
    case "CIMGeometricEffectMove":
      return t7.local();
    case "CIMGeometricEffectOffset":
      return h7.local();
    case "CIMGeometricEffectRadial":
      return n9.local();
    case "CIMGeometricEffectReverse":
      return e12.local();
    case "CIMGeometricEffectRotate":
      return e13.local();
    case "CIMGeometricEffectScale":
      return e14.local();
    case "CIMGeometricEffectSuppress":
      return r10.local();
    case "CIMGeometricEffectTaperedPolygon":
      return x3.local();
    case "CIMGeometricEffectWave":
      return n13.local();
    case "CIMGeometricEffectEnclosingPolygon":
      return o4.local();
  }
  return null;
}
function S3(e18) {
  if (!e18) return null;
  switch (e18.type) {
    case "CIMMarkerPlacementAlongLineSameSize":
      return a8.local();
    case "CIMMarkerPlacementAtExtremities":
      return i11.local();
    case "CIMMarkerPlacementAtRatioPositions":
      return a9.local();
    case "CIMMarkerPlacementInsidePolygon":
      return r15.local();
    case "CIMMarkerPlacementOnLine":
      return s13.local();
    case "CIMMarkerPlacementOnVertices":
      return i13.local();
    case "CIMMarkerPlacementPolygonCenter":
      return o7.local();
  }
  return null;
}

// node_modules/@arcgis/core/symbols/cim/imageUtils.js
function t13(t17) {
  const e18 = t17.getFrame(0);
  if (e18 instanceof HTMLImageElement || e18 instanceof HTMLCanvasElement) return e18;
  const n20 = document.createElement("canvas");
  n20.width = t17.width, n20.height = t17.height;
  const a13 = n20.getContext("2d");
  return e18 instanceof ImageData ? a13.putImageData(e18, 0, 0) : a13.drawImage(e18, 0, 0), n20;
}

// node_modules/@arcgis/core/symbols/cim/mathUtils.js
function t14(t17, n20 = 0) {
  if (0 === n20) return t17;
  const r19 = Math.cos(n20), o10 = Math.sin(n20), [c6, e18] = t17;
  return [c6 * r19 + e18 * -o10, c6 * o10 + e18 * r19];
}

// node_modules/@arcgis/core/symbols/cim/Rect.js
var t15 = class _t3 {
  constructor(t17 = 0, h12 = 0, i19 = 0, s18 = 0) {
    this.x = t17, this.y = h12, this.width = i19, this.height = s18;
  }
  static fromExtent(h12) {
    return new _t3(h12.xmin, -h12.ymax, h12.xmax - h12.xmin, h12.ymax - h12.ymin);
  }
  get isEmpty() {
    return this.width <= 0 || this.height <= 0;
  }
  union(t17) {
    this.x = Math.min(this.x, t17.x), this.y = Math.min(this.y, t17.y), this.width = Math.max(this.width, t17.width), this.height = Math.max(this.height, t17.height);
  }
};

// node_modules/@arcgis/core/symbols/cim/TextRasterizer.js
function i16(e18) {
  return `rgb(${e18.slice(0, 3).toString()})`;
}
function n17(e18) {
  return `rgba(${e18.slice(0, 3).toString()},${e18[3]})`;
}
var s16 = class {
  constructor(e18) {
    e18 && (this._textRasterizationCanvas = e18);
  }
  rasterizeText(e18, s18) {
    this._textRasterizationCanvas || (this._textRasterizationCanvas = document.createElement("canvas"));
    const a13 = this._textRasterizationCanvas, h12 = a13.getContext("2d", { willReadFrequently: true });
    r18(h12, s18), this._parameters = s18, this._textLines = e18.split(/\r?\n/), this._lineHeight = this._computeLineHeight();
    const { decoration: l14, weight: d4 } = s18.font;
    this._lineThroughWidthOffset = l14 && "line-through" === l14 ? 0.1 * this._lineHeight : 0;
    const c6 = null != s18.backgroundColor || null != s18.borderLine, _6 = c6 ? s5 : 0, u14 = this._computeTextWidth(h12, s18) + 2 * _6, g2 = this._lineHeight * this._textLines.length + 2 * _6;
    if (a13.width = u14 + 2 * this._lineThroughWidthOffset, a13.height = g2, 0 === a13.width || 0 === a13.height) return a13.width = a13.height = 1, { size: [0, 0], image: new Uint32Array(0), sdf: false, simplePattern: false, anchorX: 0, anchorY: 0, canvas: a13 };
    this._renderedLineHeight = Math.round(this._lineHeight), this._renderedOutlineSize = (s18.outline.size || 0) * s18.pixelRatio, this._renderedHaloSize = (s18.halo.size || 0) * s18.pixelRatio, this._renderedWidth = u14, this._renderedHeight = g2, this._lineThroughWidthOffset *= s18.pixelRatio;
    const f6 = (s18.outline && s18.outline.color) ?? [0, 0, 0, 0], m10 = s18.color ?? [0, 0, 0, 0], p8 = s18.halo && s18.halo.color ? s18.halo.color : [0, 0, 0, 0];
    this._fillStyle = n17(m10), this._outlineStyle = n17(f6), this._haloStyle = i16(p8);
    const x6 = this._renderedLineHeight, z2 = this._renderedOutlineSize, b5 = this._renderedHaloSize;
    h12.save(), h12.clearRect(0, 0, a13.width, a13.height), r18(h12, s18);
    const w5 = _6 * s18.pixelRatio, v3 = o9(h12.textAlign, this._renderedWidth - 2 * w5, this._renderedHaloSize + this._renderedOutlineSize) + w5, S4 = b5 + z2 + w5, y7 = b5 > 0;
    let R4 = this._lineThroughWidthOffset, C3 = 0;
    if (c6) {
      h12.save();
      const e19 = s18.backgroundColor ?? [0, 0, 0, 0], t17 = s18.borderLine?.color ?? [0, 0, 0, 0], i19 = 2 * (s18.borderLine?.size ?? 0);
      h12.fillStyle = n17(e19), h12.strokeStyle = n17(t17), h12.lineWidth = i19, h12.fillRect(0, 0, a13.width, a13.height), h12.strokeRect(0, 0, a13.width, a13.height), h12.restore();
    }
    y7 && this._renderHalo(h12, v3, S4, R4, C3, s18), z2 > 0 && this._renderOutline(h12, v3, S4, R4, C3, s18), C3 += S4, R4 += v3;
    for (const t17 of this._textLines) y7 ? (h12.globalCompositeOperation = "destination-out", h12.fillStyle = "rgb(0, 0, 0)", h12.fillText(t17, R4, C3), h12.globalCompositeOperation = "source-over", h12.fillStyle = this._fillStyle, h12.fillText(t17, R4, C3)) : (h12.fillStyle = this._fillStyle, h12.fillText(t17, R4, C3)), l14 && "none" !== l14 && this._renderDecoration(h12, R4, C3, l14, d4), C3 += x6;
    h12.restore();
    const H3 = this._renderedWidth + 2 * this._lineThroughWidthOffset, W2 = this._renderedHeight, T4 = h12.getImageData(0, 0, H3, W2), k = new Uint8Array(T4.data);
    if (s18.premultiplyColors) {
      let e19;
      for (let t17 = 0; t17 < k.length; t17 += 4) e19 = k[t17 + 3] / 255, k[t17] = k[t17] * e19, k[t17 + 1] = k[t17 + 1] * e19, k[t17 + 2] = k[t17 + 2] * e19;
    }
    let L4, O3;
    switch (s18.horizontalAlignment) {
      case "left":
        L4 = -0.5;
        break;
      case "right":
        L4 = 0.5;
        break;
      default:
        L4 = 0;
    }
    switch (s18.verticalAlignment) {
      case "bottom":
        O3 = -0.5;
        break;
      case "top":
        O3 = 0.5;
        break;
      case "baseline":
        O3 = -1 / 6;
        break;
      default:
        O3 = 0;
    }
    return { size: [H3, W2], image: new Uint32Array(k.buffer), sdf: false, simplePattern: false, anchorX: L4, anchorY: O3, canvas: a13 };
  }
  _renderHalo(e18, t17, i19, n20, s18, o10) {
    const a13 = this._renderedWidth, h12 = this._renderedHeight;
    this._outlineRasterizationCanvas || (this._outlineRasterizationCanvas = document.createElement("canvas")), this._outlineRasterizationCanvas.width = a13, this._outlineRasterizationCanvas.height = h12;
    const l14 = this._outlineRasterizationCanvas, d4 = l14.getContext("2d");
    d4.clearRect(0, 0, a13, h12), r18(d4, o10);
    const { decoration: c6, weight: _6 } = o10.font;
    d4.fillStyle = this._haloStyle, d4.strokeStyle = this._haloStyle, d4.lineJoin = "round", this._renderOutlineNative(d4, t17, i19, c6, _6, this._renderedHaloSize + this._renderedOutlineSize), e18.globalAlpha = this._parameters.halo.color[3], e18.drawImage(l14, 0, 0, a13, h12, n20, s18, a13, h12), e18.globalAlpha = 1;
  }
  _renderOutline(e18, t17, i19, n20, s18, o10) {
    const a13 = this._renderedWidth, h12 = this._renderedHeight;
    this._outlineRasterizationCanvas || (this._outlineRasterizationCanvas = document.createElement("canvas")), this._outlineRasterizationCanvas.width = a13, this._outlineRasterizationCanvas.height = h12;
    const l14 = this._outlineRasterizationCanvas, d4 = l14.getContext("2d");
    d4.clearRect(0, 0, a13, h12), r18(d4, o10);
    const { decoration: c6, weight: _6 } = o10.font;
    d4.fillStyle = this._outlineStyle, d4.strokeStyle = this._outlineStyle, d4.lineJoin = "round", this._renderOutlineNative(d4, t17, i19, c6, _6, this._renderedOutlineSize), e18.globalAlpha = this._parameters.outline.color[3], e18.drawImage(l14, 0, 0, a13, h12, n20, s18, a13, h12), e18.globalAlpha = 1;
  }
  _renderOutlineNative(e18, t17, i19, n20, s18, r19) {
    const o10 = this._renderedLineHeight;
    for (const a13 of this._textLines) {
      const h12 = 2 * r19, l14 = 5, d4 = 0.1;
      for (let r20 = 0; r20 < l14; r20++) {
        const o11 = (1 - (l14 - 1) * d4 + r20 * d4) * h12;
        e18.lineWidth = o11, e18.strokeText(a13, t17, i19), n20 && "none" !== n20 && this._renderDecoration(e18, t17, i19, n20, s18, o11);
      }
      i19 += o10;
    }
  }
  computeTextSize(e18, t17) {
    this._textRasterizationCanvas || (this._textRasterizationCanvas = document.createElement("canvas"));
    const i19 = this._textRasterizationCanvas, n20 = i19.getContext("2d");
    r18(n20, t17), this._parameters = t17, this._textLines = e18.split(/\r?\n/), this._lineHeight = this._computeLineHeight();
    const s18 = this._computeTextWidth(n20, t17), o10 = this._lineHeight * this._textLines.length;
    return i19.width = s18, i19.height = o10, [s18 * t17.pixelRatio, o10 * t17.pixelRatio];
  }
  _computeTextWidth(t17, i19) {
    let n20 = 0;
    for (const e18 of this._textLines) n20 = Math.max(n20, t17.measureText(e18).width);
    const s18 = i19.font;
    return ("italic" === s18.style || "oblique" === s18.style || "string" == typeof s18.weight && ("bold" === s18.weight || "bolder" === s18.weight) || "number" == typeof s18.weight && s18.weight > 600) && (n20 += 0.3 * t17.measureText("w").width), n20 += 2 * u3(this._parameters.halo.size), Math.round(n20);
  }
  _computeLineHeightBase() {
    return 1.275 * this._parameters.size;
  }
  _computeLineHeight() {
    let t17 = this._computeLineHeightBase();
    const i19 = this._parameters.font.decoration;
    return i19 && "underline" === i19 && (t17 *= 1.3), Math.round(t17 + 2 * u3(this._parameters.halo.size));
  }
  _renderDecoration(e18, t17, i19, n20, s18, r19) {
    let o10 = 0.9 * this._lineHeight;
    const a13 = "bold" === s18 ? 0.06 : "bolder" === s18 ? 0.09 : 0.04;
    switch (e18.textAlign) {
      case "center":
        t17 -= this._renderedWidth / 2;
        break;
      case "right":
        t17 -= this._renderedWidth;
    }
    const h12 = e18.textBaseline;
    if ("underline" === n20) switch (o10 = 0.9 * this._computeLineHeightBase(), h12) {
      case "top":
        i19 += o10;
        break;
      case "middle":
        i19 += o10 / 2;
    }
    else if ("line-through" === n20) switch (h12) {
      case "top":
        i19 += o10 / 1.5;
        break;
      case "middle":
        i19 += o10 / 3;
    }
    const l14 = r19 ? 1.5 * r19 : Math.ceil(o10 * a13);
    e18.save(), e18.beginPath(), e18.strokeStyle = e18.fillStyle, e18.lineWidth = l14, e18.moveTo(t17 - this._lineThroughWidthOffset, i19), e18.lineTo(t17 + this._renderedWidth + 2 * this._lineThroughWidthOffset, i19), e18.stroke(), e18.restore();
  }
};
function r18(t17, i19) {
  const n20 = Math.max(i19.size, 0.5), s18 = i19.font, r19 = `${s18.style} ${s18.weight} ${u3(n20).toFixed(1)}px ${s18.family}, sans-serif`;
  let o10;
  switch (t17.font = r19, t17.textBaseline = "top", i19.horizontalAlignment) {
    case "left":
    default:
      o10 = "left";
      break;
    case "right":
      o10 = "right";
      break;
    case "center":
      o10 = "center";
  }
  t17.textAlign = o10;
}
function o9(e18, t17, i19) {
  return "center" === e18 ? 0.5 * t17 : "right" === e18 ? t17 - i19 : i19;
}

// node_modules/@arcgis/core/views/2d/engine/svgUtils.js
function t16(t17) {
  return document.createElementNS("http://www.w3.org/2000/svg", t17);
}
function e17() {
  const e18 = t16("svg");
  return e18.setAttribute("style", "position: absolute;"), e18.setAttribute("width", "0"), e18.setAttribute("height", "0"), e18.setAttribute("aria-hidden", "true"), e18.setAttribute("role", "presentation"), document.body.appendChild(e18), e18;
}
function n18(t17) {
  return null != t17 && document.body.removeChild(t17), null;
}

// node_modules/@arcgis/core/views/2d/engine/webgl/mesh/templates/shapingUtils.js
var _4 = 22;
var l13 = 4;
var u13 = _4 + l13;
var x5 = _4 - 6;
var p7 = 3;
var b4 = Math.PI / 180;
var y6 = 8;
var w4 = 1.5;
var L3 = class {
  constructor(t17, s18, e18, i19) {
    this._rotationT = n4(), this._xBounds = 0, this._yBounds = 0, this.minZoom = 0, this.maxZoom = 255, this._bounds = null;
    const h12 = e18.rect, n20 = new Float32Array(8);
    t17 *= i19, s18 *= i19;
    const r19 = e18.code ? h12.width * i19 : e18.metrics.width, a13 = e18.code ? h12.height * i19 : e18.metrics.height;
    this.width = r19, this.height = a13, n20[0] = t17, n20[1] = s18, n20[2] = t17 + r19, n20[3] = s18, n20[4] = t17, n20[5] = s18 + a13, n20[6] = t17 + r19, n20[7] = s18 + a13, this._data = n20, this._setTextureCoords(h12), this._scale = i19, this._mosaic = e18, this.x = t17, this.y = s18, this.maxOffset = Math.max(t17 + r19, s18 + a13);
  }
  get mosaic() {
    return this._mosaic;
  }
  set angle(s18) {
    this._angle = s18, M(this._rotationT, -s18), this._setOffsets();
  }
  get angle() {
    return this._angle;
  }
  get xTopLeft() {
    return this._data[0];
  }
  get yTopLeft() {
    return this._data[1];
  }
  get xBottomRight() {
    return this._data[6];
  }
  get yBottomRight() {
    return this._data[7];
  }
  get texcoords() {
    return this._texcoords;
  }
  get textureBinding() {
    return this._mosaic.textureBinding;
  }
  get offsets() {
    return this._offsets || this._setOffsets(), this._offsets;
  }
  get char() {
    return String.fromCharCode(this._mosaic.code);
  }
  get code() {
    return this._mosaic.code;
  }
  get bounds() {
    if (!this._bounds) {
      const { height: t17, width: e18 } = this._mosaic.metrics, i19 = e18 * this._scale, n20 = Math.abs(t17) * this._scale, r19 = new Float32Array(8);
      r19[0] = this.x, r19[1] = this.y, r19[2] = this.x + i19, r19[3] = this.y, r19[4] = this.x, r19[5] = this.y + n20, r19[6] = this.x + i19, r19[7] = this.y + n20;
      const a13 = e6(n4(), this._rotationT, this._transform);
      e7(r19, r19, a13);
      let f6 = 1 / 0, c6 = 1 / 0, m10 = -1 / 0, d4 = -1 / 0;
      for (let s18 = 0; s18 < 4; s18++) {
        const t18 = r19[2 * s18], e19 = r19[2 * s18 + 1];
        f6 = Math.min(f6, t18), c6 = Math.min(c6, e19), m10 = Math.max(m10, t18), d4 = Math.max(d4, e19);
      }
      const _6 = m10 - f6, l14 = d4 - c6, u14 = f6 + _6 / 2, x6 = c6 + l14 / 2;
      this._bounds = new i5(u14, x6, _6, l14);
    }
    return this._bounds;
  }
  setTransform(t17) {
    this._transform = t17, this._offsets = null;
  }
  _setOffsets() {
    this._offsets || (this._offsets = { topLeft: [0, 0], topRight: [0, 0], bottomLeft: [0, 0], bottomRight: [0, 0] });
    const t17 = e6(n4(), this._rotationT, this._transform);
    this._offsets.topLeft[0] = this._data[0], this._offsets.topLeft[1] = this._data[1], this._offsets.topRight[0] = this._data[2], this._offsets.topRight[1] = this._data[3], this._offsets.bottomLeft[0] = this._data[4], this._offsets.bottomLeft[1] = this._data[5], this._offsets.bottomRight[0] = this._data[6], this._offsets.bottomRight[1] = this._data[7], S2(this._offsets.topLeft, this._offsets.topLeft, t17), S2(this._offsets.topRight, this._offsets.topRight, t17), S2(this._offsets.bottomLeft, this._offsets.bottomLeft, t17), S2(this._offsets.bottomRight, this._offsets.bottomRight, t17);
  }
  _setTextureCoords({ x: t17, y: s18, width: e18, height: i19 }) {
    this._texcoords = { topLeft: [t17, s18], topRight: [t17 + e18, s18], bottomLeft: [t17, s18 + i19], bottomRight: [t17 + e18, s18 + i19] };
  }
};
var M3 = (t17, s18) => ({ code: 0, page: 0, sdf: true, rect: new t4(0, 0, 11, 8), textureBinding: s18, metrics: { advance: 0, height: 4, width: t17, left: 0, top: 0 } });
function R3(t17, s18) {
  return t17.forEach((t18) => S2(t18, t18, s18)), { topLeft: t17[0], topRight: t17[1], bottomLeft: t17[2], bottomRight: t17[3] };
}
var B2 = class {
  constructor(t17, s18, e18) {
    this._rotation = 0, this._decorate(t17, s18, e18), this.glyphs = t17, this.bounds = this._createBounds(t17), this.isMultiline = s18.length > 1, this._hasRotation = 0 !== e18.angle, this._transform = this._createGlyphTransform(this.bounds, e18), this._borderLineSizePx = e18.borderLineSizePx, (e18.borderLineSizePx || e18.hasBackground) && ([this.bounds, this.textBox] = this.shapeBackground(this._transform));
    for (const i19 of t17) i19.setTransform(this._transform);
  }
  setRotation(e18) {
    if (0 === e18 && 0 === this._rotation) return;
    this._rotation = e18;
    const i19 = this._transform, h12 = M(n4(), e18);
    e6(i19, h12, i19);
    for (const t17 of this.glyphs) t17.setTransform(this._transform);
  }
  _decorate(t17, s18, e18) {
    if (!e18.decoration || "none" === e18.decoration || !t17.length) return;
    const i19 = e18.scale, o10 = "underline" === e18.decoration ? u13 : x5, h12 = t17[0].textureBinding;
    for (const n20 of s18) {
      const s19 = n20.startX * i19, e19 = n20.startY * i19, r19 = (n20.width + n20.glyphWidthEnd) * i19;
      t17.push(new L3(s19, e19 + o10 * i19, M3(r19, h12), 1));
    }
  }
  shapeBackground(t17) {
    const s18 = this._borderLineSizePx || 0, e18 = (w4 + s18) / 2, i19 = this._borderLineSizePx ? e18 : 0, { xmin: o10, ymin: h12, xmax: n20, ymax: r19, x: a13, y: f6, width: c6, height: m10 } = this.bounds, d4 = [o10 - y6, h12 - y6], _6 = [n20 + y6, h12 - y6], l14 = [o10 - y6, r19 + y6], u14 = [n20 + y6, r19 + y6], x6 = R3([[d4[0] - e18, d4[1] - e18], [_6[0] + e18, _6[1] - e18], [d4[0] + i19, d4[1] + i19], [_6[0] - i19, _6[1] + i19]], t17), p8 = R3([[l14[0] + i19, l14[1] - i19], [u14[0] - i19, u14[1] - i19], [l14[0] - e18, l14[1] + e18], [u14[0] + e18, u14[1] + e18]], t17), b5 = R3([[d4[0] - e18, d4[1] - e18], [d4[0] + i19, d4[1] + i19], [l14[0] - e18, l14[1] + e18], [l14[0] + i19, l14[1] - i19]], t17), L4 = R3([[_6[0] - i19, _6[1] + i19], [_6[0] + e18, _6[1] - e18], [u14[0] - i19, u14[1] - i19], [u14[0] + e18, u14[1] + e18]], t17), M4 = { main: R3([d4, _6, l14, u14], t17), top: x6, bot: p8, left: b5, right: L4 };
    return [new i5(a13, f6, c6 + 2 * e18, m10 + 2 * e18), M4];
  }
  get boundsT() {
    const t17 = this.bounds, s18 = o2(n3(), t17.x, t17.y);
    if (S2(s18, s18, this._transform), this._hasRotation) {
      const e18 = Math.max(t17.width, t17.height);
      return new i5(s18[0], s18[1], e18, e18);
    }
    return new i5(s18[0], s18[1], t17.width, t17.height);
  }
  _createBounds(t17) {
    let s18 = 1 / 0, e18 = 1 / 0, i19 = 0, o10 = 0;
    for (const r19 of t17) s18 = Math.min(s18, r19.xTopLeft), e18 = Math.min(e18, r19.yTopLeft), i19 = Math.max(i19, r19.xBottomRight), o10 = Math.max(o10, r19.yBottomRight);
    const h12 = i19 - s18, n20 = o10 - e18;
    return new i5(s18 + h12 / 2, e18 + n20 / 2, h12, n20);
  }
  _createGlyphTransform(t17, s18) {
    const h12 = b4 * s18.angle, n20 = n4(), f6 = n3();
    return i4(n20, n20, o2(f6, s18.xOffset, -s18.yOffset)), s18.useCIMAngleBehavior ? s6(n20, n20, h12) : (i4(n20, n20, o2(f6, t17.x, t17.y)), s6(n20, n20, h12), i4(n20, n20, o2(f6, -t17.x, -t17.y))), n20;
  }
};
var T3 = class {
  constructor(t17, s18, e18, i19, o10, h12) {
    this.glyphWidthEnd = 0, this.startX = 0, this.startY = 0, this.start = Math.max(0, Math.min(s18, e18)), this.end = Math.max(0, Math.max(s18, e18)), this.end < t17.length && (this.glyphWidthEnd = t17[this.end].metrics.width), this.width = i19, this.yMin = o10, this.yMax = h12;
  }
};
var v2 = (t17) => 10 === t17;
var j = (t17) => 32 === t17;
function A3(t17, s18, e18) {
  const i19 = new Array(), o10 = 1 / e18.scale, h12 = e18.maxLineWidth * o10, n20 = s18 ? t17.length - 1 : 0, r19 = s18 ? -1 : t17.length, a13 = s18 ? -1 : 1;
  let f6 = n20, c6 = 0, m10 = 0, d4 = f6, g2 = d4, _6 = 0, l14 = 1 / 0, u14 = 0;
  for (; f6 !== r19; ) {
    const { code: s19, metrics: e19 } = t17[f6], o11 = Math.abs(e19.top);
    if (v2(s19) || j(s19) || (l14 = Math.min(l14, o11), u14 = Math.max(u14, o11 + e19.height)), v2(s19)) f6 !== n20 && (i19.push(new T3(t17, d4, f6 - a13, c6, l14 === 1 / 0 ? 0 : l14, u14)), l14 = 1 / 0, u14 = 0), c6 = 0, d4 = f6 + a13, g2 = f6 + a13, m10 = 0;
    else if (j(s19)) g2 = f6 + a13, m10 = 0, _6 = e19.advance, c6 += e19.advance;
    else if (c6 > h12) {
      if (g2 !== d4) {
        const s20 = g2 - 2 * a13;
        c6 -= _6, i19.push(new T3(t17, d4, s20, c6 - m10, l14, u14)), l14 = 1 / 0, u14 = 0, d4 = g2, c6 = m10;
      } else i19.push(new T3(t17, d4, f6 - a13, c6, l14, u14)), l14 = 1 / 0, u14 = 0, d4 = f6, g2 = f6, c6 = 0;
      c6 += e19.advance, m10 += e19.advance;
    } else c6 += e19.advance, m10 += e19.advance;
    f6 += a13;
  }
  const x6 = new T3(t17, d4, f6 - a13, c6, l14, u14);
  return x6.start >= 0 && x6.end < t17.length && i19.push(x6), i19;
}
function z(t17, s18) {
  let e18 = 0;
  for (let h12 = 0; h12 < t17.length; h12++) {
    const { width: s19 } = t17[h12];
    e18 = Math.max(s19, e18);
  }
  const i19 = "underline" === s18.decoration ? l13 : 0, o10 = t17[0].yMin;
  return { x: 0, y: o10, height: t17[t17.length - 1].yMax + s18.lineHeight * (t17.length - 1) + i19 - o10, width: e18 };
}
function O(t17, s18) {
  const e18 = s18.scale, i19 = new Array(), { glyphs: o10, isRightToLeft: h12 } = t17, n20 = A3(o10, h12, s18), r19 = n20.length ? z(n20, s18) : { y: 0, height: 0 }, a13 = a11(s18.horizontalAlignment), d4 = c5(s18.verticalAlignment), g2 = d4 === n16.Baseline ? 1 : 0, _6 = g2 ? 0 : d4 - 1, l14 = (1 - g2) * -r19.y + _6 * (r19.height / 2) + -22 * (g2 ? 1 : 0);
  for (let f6 = 0; f6 < n20.length; f6++) {
    const { start: h13, end: r20, width: c6 } = n20[f6];
    let m10 = -1 * (a13 + 1) * (c6 / 2) - p7;
    const d5 = (t17.isRightToLeft ? n20.length - 1 - f6 : f6) * s18.lineHeight + l14 - p7;
    n20[f6].startX = m10, n20[f6].startY = d5;
    for (let t18 = h13; t18 <= r20; t18++) {
      const s19 = o10[t18];
      if (v2(s19.code)) continue;
      const h14 = new L3(m10 + s19.metrics.left, d5 - s19.metrics.top, s19, e18);
      m10 += s19.metrics.advance, i19.push(h14);
    }
  }
  return new B2(i19, n20, s18);
}

// node_modules/@arcgis/core/views/2d/layers/graphics/graphicsUtils.js
var i17 = 50;
function m9(n20) {
  if (!n20) return null;
  const { xmin: e18, ymin: t17, xmax: o10, ymax: i19, spatialReference: m10 } = n20;
  return new P({ rings: [[[e18, t17], [e18, i19], [o10, i19], [o10, t17], [e18, t17]]], spatialReference: m10 });
}
function s17(r19) {
  return e3(Math.round(u3(r19)));
}
function a12(e18) {
  const r19 = e3(zi), i19 = e3(Bi);
  return Math.max(r19, Math.min(e18 || i19, i19));
}

// node_modules/@arcgis/core/symbols/cim/CIMSymbolDrawHelper.js
var nt = Math.PI / 180;
var at = 0.5;
var lt = () => i.getLogger("esri.symbols.cim.CIMSymbolDrawHelper");
var ht = class _ht {
  constructor(t17) {
    this._t = t17;
  }
  static createIdentity() {
    return new _ht([1, 0, 0, 0, 1, 0]);
  }
  clone() {
    const t17 = this._t;
    return new _ht(t17.slice());
  }
  transform(t17) {
    const e18 = this._t;
    return [e18[0] * t17[0] + e18[1] * t17[1] + e18[2], e18[3] * t17[0] + e18[4] * t17[1] + e18[5]];
  }
  static createScale(t17, e18) {
    return new _ht([t17, 0, 0, 0, e18, 0]);
  }
  scale(t17, e18) {
    const r19 = this._t;
    return r19[0] *= t17, r19[1] *= t17, r19[2] *= t17, r19[3] *= e18, r19[4] *= e18, r19[5] *= e18, this;
  }
  scaleRatio() {
    return Math.sqrt(this._t[0] * this._t[0] + this._t[1] * this._t[1]);
  }
  static createTranslate(t17, e18) {
    return new _ht([0, 0, t17, 0, 0, e18]);
  }
  translate(t17, e18) {
    const r19 = this._t;
    return r19[2] += t17, r19[5] += e18, this;
  }
  static createRotate(t17) {
    const e18 = Math.cos(t17), r19 = Math.sin(t17);
    return new _ht([e18, -r19, 0, r19, e18, 0]);
  }
  rotate(t17) {
    return _ht.multiply(this, _ht.createRotate(t17), this);
  }
  angle() {
    const t17 = this._t[0], e18 = this._t[3], r19 = Math.sqrt(t17 * t17 + e18 * e18);
    return [t17 / r19, e18 / r19];
  }
  static multiply(t17, e18, r19) {
    const i19 = t17._t, s18 = e18._t, o10 = i19[0] * s18[0] + i19[3] * s18[1], n20 = i19[1] * s18[0] + i19[4] * s18[1], a13 = i19[2] * s18[0] + i19[5] * s18[1] + s18[2], l14 = i19[0] * s18[3] + i19[3] * s18[4], h12 = i19[1] * s18[3] + i19[4] * s18[4], c6 = i19[2] * s18[3] + i19[5] * s18[4] + s18[5], m10 = r19._t;
    return m10[0] = o10, m10[1] = n20, m10[2] = a13, m10[3] = l14, m10[4] = h12, m10[5] = c6, r19;
  }
  invert() {
    const t17 = this._t;
    let e18 = t17[0] * t17[4] - t17[1] * t17[3];
    if (0 === e18) return new _ht([0, 0, 0, 0, 0, 0]);
    e18 = 1 / e18;
    const r19 = (t17[1] * t17[5] - t17[2] * t17[4]) * e18, i19 = (t17[2] * t17[3] - t17[0] * t17[5]) * e18, s18 = t17[4] * e18, o10 = -t17[1] * e18, n20 = -t17[3] * e18, a13 = t17[0] * e18;
    return new _ht([s18, o10, r19, n20, a13, i19]);
  }
};
var ct = class {
  constructor(t17, e18) {
    this._resourceManager = t17, this._transfos = [], this._sizeTransfos = [], this._geomUnitsPerPoint = 1, this._placementPool = new e(t6, void 0, void 0, 100), this._earlyReturn = false, this._mapRotation = 0, this._transfos.push(e18 || ht.createIdentity()), this._sizeTransfos.push(e18 ? e18.scaleRatio() : 1);
  }
  setTransform(t17, e18) {
    this._transfos = [t17 || ht.createIdentity()], this._sizeTransfos = [e18 || (t17 ? t17.scaleRatio() : 1)];
  }
  setGeomUnitsPerPoint(t17) {
    this._geomUnitsPerPoint = t17;
  }
  transformPt(t17) {
    return this._transfos[this._transfos.length - 1].transform(t17);
  }
  transformSize(t17) {
    return t17 * this._sizeTransfos[this._sizeTransfos.length - 1];
  }
  reverseTransformPt(t17) {
    return this._transfos[this._transfos.length - 1].invert().transform(t17);
  }
  reverseTransformSize(t17) {
    return t17 / this._sizeTransfos[this._sizeTransfos.length - 1];
  }
  reverseTransformScalar(t17) {
    return t17 / this._transfos[this._transfos.length - 1].scaleRatio();
  }
  getTransformAngle() {
    return this._transfos[this._transfos.length - 1].angle();
  }
  geomUnitsPerPoint() {
    return this.isEmbedded() ? 1 : this._geomUnitsPerPoint;
  }
  prevGeomUnitsPerPoint() {
    return this._transfos.length > 2 ? 1 : this._geomUnitsPerPoint;
  }
  isEmbedded() {
    return this._transfos.length > 1;
  }
  back() {
    return this._transfos[this._transfos.length - 1];
  }
  push(t17, e18) {
    const r19 = e18 ? t17.scaleRatio() : 1;
    ht.multiply(t17, this.back(), t17), this._transfos.push(t17), this._sizeTransfos.push(this._sizeTransfos[this._sizeTransfos.length - 1] * r19);
  }
  pop() {
    this._transfos.splice(-1, 1), this._sizeTransfos.splice(-1, 1);
  }
  drawSymbol(t17, e18, r19) {
    if (t17) switch (t17.type) {
      case "CIMPointSymbol":
      case "CIMLineSymbol":
      case "CIMPolygonSymbol":
        this.drawMultiLayerSymbol(t17, e18);
        break;
      case "CIMTextSymbol":
        this.drawTextSymbol(t17, e18, r19);
    }
  }
  drawMultiLayerSymbol(t17, e18) {
    if (!t17 || !e18) return;
    const r19 = t17.symbolLayers;
    if (!r19) return;
    const i19 = t17.effects;
    if (i19 && i19.length > 0) {
      const t18 = this.executeEffects(i19, e18);
      if (t18) {
        let e19 = t18.next();
        for (; e19; ) this.drawSymbolLayers(r19, e19.asJSON()), e19 = t18.next();
      }
    } else this.drawSymbolLayers(r19, e18);
  }
  executeEffects(t17, e18) {
    const r19 = this._resourceManager.geometryEngine;
    let i19 = new s8(a5.fromJSONCIM(e18));
    for (const s18 of t17) {
      const t18 = R2(s18);
      t18 && (i19 = t18.execute(i19, s18, this.geomUnitsPerPoint(), null, r19));
    }
    return i19;
  }
  drawSymbolLayers(t17, e18) {
    let r19 = t17.length;
    for (; r19--; ) {
      const i19 = t17[r19];
      if (!i19 || false === i19.enable) continue;
      const s18 = i19.effects;
      if (s18 && s18.length > 0) {
        const t18 = this.executeEffects(s18, e18);
        if (t18) {
          let e19 = null;
          for (; (e19 = t18.next()) && (this.drawSymbolLayer(i19, e19.asJSON()), !this._earlyReturn); ) ;
        }
      } else this.drawSymbolLayer(i19, e18);
      if (this._earlyReturn) return;
    }
  }
  drawSymbolLayer(t17, e18) {
    switch (t17.type) {
      case "CIMSolidFill":
        this.drawSolidFill(e18, t17.color, t17.path);
        break;
      case "CIMHatchFill":
        this.drawHatchFill(e18, t17);
        break;
      case "CIMPictureFill":
        this.drawPictureFill(e18, t17);
        break;
      case "CIMGradientFill":
        this.drawGradientFill(e18, t17);
        break;
      case "CIMSolidStroke":
        this.drawSolidStroke(e18, t17.color, t17.width, t17.capStyle, t17.joinStyle, t17.miterLimit, t17.path);
        break;
      case "CIMPictureStroke":
        this.drawPictureStroke(e18, t17);
        break;
      case "CIMGradientStroke":
        this.drawGradientStroke(e18, t17);
        break;
      case "CIMCharacterMarker":
      case "CIMPictureMarker":
      case "CIMVectorMarker":
        this.drawMarkerLayer(t17, e18);
    }
  }
  drawHatchFill(t17, e18) {
    const r19 = dt(e18, t17, this.geomUnitsPerPoint());
    r19 && (this.pushClipPath(t17), this.drawMultiLayerSymbol(e18.lineSymbol, r19), this.popClipPath());
  }
  drawPictureFill(t17, e18) {
  }
  drawGradientFill(t17, e18) {
  }
  drawPictureStroke(t17, e18) {
  }
  drawGradientStroke(t17, e18) {
  }
  drawMarkerLayer(t17, e18) {
    const r19 = t17.markerPlacement;
    if (r19) {
      const i19 = S3(r19);
      if (i19) {
        const s18 = "CIMMarkerPlacementInsidePolygon" === r19.type || "CIMMarkerPlacementPolygonCenter" === r19.type && r19.clipAtBoundary;
        s18 && this.pushClipPath(e18);
        const o10 = i19.execute(a5.fromJSONCIM(e18), r19, this.geomUnitsPerPoint(), null, this._resourceManager.geometryEngine);
        if (o10) {
          let e19 = null;
          for (; (e19 = o10.next()) && (this.drawMarker(t17, e19), !this._earlyReturn); ) ;
        }
        s18 && this.popClipPath();
      }
    } else {
      const r20 = this._placementPool.acquire();
      if (l2(e18)) r20.tx = e18.x, r20.ty = e18.y, this.drawMarker(t17, r20);
      else if (y(e18)) {
        const i19 = l(e18);
        i19 && ([r20.tx, r20.ty] = i19, this.drawMarker(t17, r20));
      } else if (s4(e18)) {
        for (const i19 of e18.paths) for (const e19 of i19) if (r20.tx = e19[0], r20.ty = e19[1], this.drawMarker(t17, r20), this._earlyReturn) break;
      } else for (const i19 of e18.points) if (r20.tx = i19[0], r20.ty = i19[1], this.drawMarker(t17, r20), this._earlyReturn) break;
      this._placementPool.release(r20);
    }
  }
  drawMarker(t17, e18) {
    switch (t17.type) {
      case "CIMCharacterMarker":
      case "CIMPictureMarker":
        this.drawPictureMarker(t17, e18);
        break;
      case "CIMVectorMarker":
        this.drawVectorMarker(t17, e18);
    }
  }
  drawPictureMarker(t17, e18) {
    if (!t17) return;
    const r19 = this._resourceManager.getResource(t17.url), i19 = h2(t17.size, n2.CIMPictureMarker.size);
    if (null == r19 || i19 <= 0) return;
    const s18 = r19.width, o10 = r19.height;
    if (!s18 || !o10) return;
    const n20 = s18 / o10, a13 = h2(t17.scaleX, 1), l14 = ht.createIdentity(), h12 = t17.anchorPoint;
    if (h12) {
      let e19 = h12.x, r20 = h12.y;
      "Absolute" !== t17.anchorPointUnits && (e19 *= i19 * n20 * a13, r20 *= i19), l14.translate(-e19, -r20);
    }
    let c6 = h2(t17.rotation);
    t17.rotateClockwise && (c6 = -c6), this._mapRotation && (c6 += this._mapRotation), c6 && l14.rotate(c6 * nt);
    let m10 = h2(t17.offsetX), f6 = h2(t17.offsetY);
    if (m10 || f6) {
      if (this._mapRotation) {
        const t18 = nt * this._mapRotation, e19 = Math.cos(t18), r20 = Math.sin(t18), i20 = m10 * r20 + f6 * e19;
        m10 = m10 * e19 - f6 * r20, f6 = i20;
      }
      l14.translate(m10, f6);
    }
    const u14 = this.geomUnitsPerPoint();
    1 !== u14 && l14.scale(u14, u14);
    const d4 = e18.getAngle();
    d4 && l14.rotate(d4), l14.translate(e18.tx, e18.ty), this.push(l14, false), this.drawImage(t17, i19), this.pop();
  }
  drawVectorMarker(t17, e18) {
    if (!t17) return;
    const r19 = t17.markerGraphics;
    if (!r19) return;
    const i19 = h2(t17.size, n2.CIMVectorMarker.size), s18 = t17.frame, o10 = s18 ? s18.ymax - s18.ymin : 0, n20 = i19 && o10 ? i19 / o10 : 1, a13 = ht.createIdentity();
    s18 && a13.translate(0.5 * -(s18.xmax + s18.xmin), 0.5 * -(s18.ymax + s18.ymin));
    const l14 = t17.anchorPoint;
    if (l14) {
      let e19 = l14.x, r20 = l14.y;
      "Absolute" !== t17.anchorPointUnits ? s18 && (e19 *= s18.xmax - s18.xmin, r20 *= s18.ymax - s18.ymin) : (e19 /= n20, r20 /= n20), a13.translate(-e19, -r20);
    }
    1 !== n20 && a13.scale(n20, n20);
    let h12 = h2(t17.rotation);
    t17.rotateClockwise && (h12 = -h12), this._mapRotation && (h12 += this._mapRotation), h12 && a13.rotate(h12 * nt);
    let c6 = h2(t17.offsetX), m10 = h2(t17.offsetY);
    if (c6 || m10) {
      if (this._mapRotation) {
        const t18 = nt * this._mapRotation, e19 = Math.cos(t18), r20 = Math.sin(t18), i20 = c6 * r20 + m10 * e19;
        c6 = c6 * e19 - m10 * r20, m10 = i20;
      }
      a13.translate(c6, m10);
    }
    const f6 = this.geomUnitsPerPoint();
    1 !== f6 && a13.scale(f6, f6);
    const u14 = e18.getAngle();
    u14 && a13.rotate(u14), a13.translate(e18.tx, e18.ty), this.push(a13, t17.scaleSymbolsProportionally);
    for (const d4 of r19) {
      d4?.symbol && d4.geometry || lt().error("Invalid marker graphic", d4);
      let t18 = d4.textString;
      if ("number" == typeof t18 && (t18 = t18.toString()), this.drawSymbol(d4.symbol, d4.geometry, t18), this._earlyReturn) break;
    }
    this.pop();
  }
  drawTextSymbol(t17, e18, r19) {
    if (!t17) return;
    if (!l2(e18)) return;
    if (h2(t17.height, n2.CIMTextSymbol.height) <= 0) return;
    const i19 = ht.createIdentity();
    let s18 = h2(t17.angle);
    s18 = -s18, s18 && i19.rotate(s18 * nt);
    const o10 = h2(t17.offsetX), n20 = h2(t17.offsetY);
    (o10 || n20) && i19.translate(o10, n20);
    const a13 = this.geomUnitsPerPoint();
    1 !== a13 && i19.scale(a13, a13), i19.translate(e18.x, e18.y), this.push(i19, false), this.drawText(t17, r19), this.pop();
  }
};
var mt = class extends ct {
  constructor(t17, e18) {
    super(t17, e18), this.reset();
  }
  reset() {
    this._xmin = this._ymin = 1 / 0, this._xmax = this._ymax = -1 / 0, this._clipCount = 0;
  }
  envelope() {
    return new t15(this._xmin, this._ymin, this._xmax - this._xmin, this._ymax - this._ymin);
  }
  bounds() {
    return e2(this._xmin, this._ymin, this._xmax, this._ymax);
  }
  drawSolidFill(t17) {
    if (t17 && !(this._clipCount > 0)) if (y(t17)) this._processPath(t17.rings, 0);
    else if (s4(t17)) this._processPath(t17.paths, 0);
    else if (m3(t17)) {
      const e18 = yt(t17);
      e18 && this._processPath(e18.rings, 0);
    } else console.error("drawSolidFill Unexpected geometry type!");
  }
  drawSolidStroke(t17, e18, r19) {
    if (!t17 || this._clipCount > 0 || null == r19 || r19 <= 0) return;
    const i19 = Math.max(0.5 * this.transformSize(h2(r19, n2.CIMSolidStroke.width)), 0.5 * at);
    if (y(t17)) this._processPath(t17.rings, i19);
    else if (s4(t17)) this._processPath(t17.paths, i19);
    else if (m3(t17)) {
      const e19 = yt(t17);
      e19 && this._processPath(e19.rings, i19);
    } else console.error("drawSolidStroke unexpected geometry type!");
  }
  drawMarkerLayer(t17, e18) {
    y(e18) && t17.markerPlacement && ("CIMMarkerPlacementInsidePolygon" === t17.markerPlacement.type || "CIMMarkerPlacementPolygonCenter" === t17.markerPlacement.type && t17.markerPlacement.clipAtBoundary) ? this._processPath(e18.rings, 0) : super.drawMarkerLayer(t17, e18);
  }
  drawHatchFill(t17, e18) {
    this.drawSolidFill(t17);
  }
  drawPictureFill(t17, e18) {
    this.drawSolidFill(t17);
  }
  drawGradientFill(t17, e18) {
    this.drawSolidFill(t17);
  }
  drawPictureStroke(t17, e18) {
    this.drawSolidStroke(t17, null, e18.width);
  }
  drawGradientStroke(t17, e18) {
    this.drawSolidStroke(t17, null, e18.width);
  }
  pushClipPath(t17) {
    this.drawSolidFill(t17), this._clipCount++;
  }
  popClipPath() {
    this._clipCount--;
  }
  drawImage(t17, e18) {
    const { url: r19 } = t17, i19 = h2(t17.scaleX, 1);
    let s18 = i19 * e18, o10 = e18;
    const n20 = this._resourceManager.getResource(r19);
    if (null != n20) {
      const t18 = n20.height / n20.width;
      s18 = i19 * (e18 ? t18 > 1 ? e18 : e18 / t18 : n20.width), o10 = e18 ? t18 > 1 ? e18 * t18 : e18 : n20.height;
    }
    this._merge(this.transformPt([-s18 / 2, -o10 / 2]), 0), this._merge(this.transformPt([-s18 / 2, o10 / 2]), 0), this._merge(this.transformPt([s18 / 2, -o10 / 2]), 0), this._merge(this.transformPt([s18 / 2, o10 / 2]), 0);
  }
  drawText(t17, e18) {
    if (!e18 || 0 === e18.length) return;
    this._textRasterizer || (this._textRasterizer = new s16());
    const r19 = St(t17);
    let [i19, s18] = this._textRasterizer.computeTextSize(e18, r19);
    i19 = e3(i19), s18 = e3(s18);
    const n20 = this.transformSize(1) * this.reverseTransformScalar(1);
    i19 *= n20, s18 *= n20;
    let a13 = 0;
    switch (t17.horizontalAlignment) {
      case "Left":
        a13 = i19 / 2;
        break;
      case "Right":
        a13 = -i19 / 2;
    }
    let l14 = 0;
    switch (t17.verticalAlignment) {
      case "Bottom":
        l14 = s18 / 2;
        break;
      case "Top":
        l14 = -s18 / 2;
        break;
      case "Baseline":
        l14 = s18 / 6;
    }
    this._merge(this.transformPt([-i19 / 2 + a13, -s18 / 2 + l14]), 0), this._merge(this.transformPt([-i19 / 2 + a13, s18 / 2 + l14]), 0), this._merge(this.transformPt([i19 / 2 + a13, -s18 / 2 + l14]), 0), this._merge(this.transformPt([i19 / 2 + a13, s18 / 2 + l14]), 0);
  }
  _processPath(t17, e18) {
    if (t17) for (const r19 of t17) {
      const t18 = r19 ? r19.length : 0;
      if (t18 > 1) {
        this._merge(this.transformPt(r19[0]), e18);
        for (let i19 = 1; i19 < t18; i19++) this._merge(this.transformPt(r19[i19]), e18);
      }
    }
  }
  _merge(t17, e18) {
    t17[0] - e18 < this._xmin && (this._xmin = t17[0] - e18), t17[0] + e18 > this._xmax && (this._xmax = t17[0] + e18), t17[1] - e18 < this._ymin && (this._ymin = t17[1] - e18), t17[1] + e18 > this._ymax && (this._ymax = t17[1] + e18);
  }
};
var ft = class extends ct {
  constructor() {
    super(...arguments), this._searchPoint = [0, 0], this._searchDistPoint = 0, this._textInfo = null, this._svg = null, this._path = null, this._canvas = null;
  }
  destroy() {
    this._svg = n18(this._svg), this._path = null, this._canvas = null;
  }
  hitTest(t17, e18, r19, i19, s18, a13) {
    const l14 = a13 * u3(1);
    this.setTransform(), this.setGeomUnitsPerPoint(l14), this._searchPoint = [(t17[0] + t17[2]) / 2, (t17[1] + t17[3]) / 2], this._searchDistPoint = (t17[2] - t17[0]) / 2 / l14, this._textInfo = i19;
    const h12 = e18 && ("CIMPointSymbol" === e18.type && "Map" !== e18.angleAlignment || "CIMTextSymbol" === e18.type);
    if (this._mapRotation = h12 ? s18 : 0, !has("esri-mobile")) {
      const t18 = e3(X * window.devicePixelRatio), r20 = e3(Y);
      !(("CIMLineSymbol" === e18?.type || "CIMPolygonSymbol" === e18?.type) && e18.symbolLayers?.some(I3)) && "CIMMeshSymbol" !== e18?.type && (U(e18) ?? 0) < r20 && (this._searchDistPoint = t18);
    }
    return this._earlyReturn = false, this.drawSymbol(e18, r19), this._earlyReturn;
  }
  executeEffects(t17, e18) {
    return "CIMGeometricEffectDashes" === t17.at(-1)?.type && (t17 = t17.slice(0, -1)), super.executeEffects(t17, e18);
  }
  drawSolidFill(t17, e18, r19) {
    null != r19 ? this._hittestSvgPath(t17, r19, true) : this._hitTestFill(t17);
  }
  drawHatchFill(t17, e18) {
    this._hitTestFill(t17);
  }
  drawPictureFill(t17, e18) {
    this._hitTestFill(t17);
  }
  drawGradientFill(t17, e18) {
    this._hitTestFill(t17);
  }
  drawSolidStroke(t17, e18, r19, i19, s18, o10, n20) {
    null != n20 ? this._hittestSvgPath(t17, n20, false, r19) : this._hitTestStroke(t17, r19);
  }
  drawPictureStroke(t17, e18) {
    this._hitTestStroke(t17, e18.width);
  }
  drawGradientStroke(t17, e18) {
    this._hitTestStroke(t17, e18.width);
  }
  drawMarkerLayer(t17, e18) {
    t17.markerPlacement && ("CIMMarkerPlacementInsidePolygon" === t17.markerPlacement.type || "CIMMarkerPlacementPolygonCenter" === t17.markerPlacement.type && t17.markerPlacement.clipAtBoundary) ? this._hitTestFill(e18) : super.drawMarkerLayer(t17, e18);
  }
  pushClipPath(t17) {
  }
  popClipPath() {
  }
  drawImage(t17, e18) {
    const { url: r19 } = t17, i19 = h2(t17.scaleX, 1), s18 = this._resourceManager.getResource(r19);
    if (null == s18 || 0 === s18.height || 0 === e18) return;
    const o10 = e18 * this.geomUnitsPerPoint(), n20 = o10 * i19 * (s18.width / s18.height), a13 = this.reverseTransformPt(this._searchPoint), l14 = this._searchDistPoint;
    Math.abs(a13[0]) < n20 / 2 + l14 && Math.abs(a13[1]) < o10 / 2 + l14 && (this._earlyReturn = true);
  }
  drawText(t17, e18) {
    const r19 = this._textInfo;
    if (!r19) return;
    const i19 = r19.get(t17);
    if (!i19) return;
    if (!i19.glyphMosaicItems.glyphs.length) return;
    const s18 = s17(h2(t17.height, n2.CIMTextSymbol.height)), { lineGapType: o10, lineGap: n20 } = t17, a13 = o10 ? Pt(o10, h2(n20), s18) : 0, l14 = "CIMBackgroundCallout" === t17.callout?.type, h12 = O(i19.glyphMosaicItems, { scale: s18 / A2, angle: 0, xOffset: 0, yOffset: 0, horizontalAlignment: t17.horizontalAlignment, verticalAlignment: t17.verticalAlignment, maxLineWidth: a12(t17.lineWidth), lineHeight: G4 * Math.max(0.25, Math.min(a13 || 1, 4)), decoration: t17.font.decoration || "none", useCIMAngleBehavior: true, hasBackground: l14 }), c6 = this.reverseTransformPt(this._searchPoint), m10 = c6[0], f6 = c6[1];
    for (const u14 of h12.glyphs) if (m10 > u14.xTopLeft && m10 < u14.xBottomRight && f6 > -u14.yBottomRight && f6 < -u14.yTopLeft) {
      this._earlyReturn = true;
      break;
    }
  }
  _hitTestFill(t17) {
    let e18 = null;
    if (m3(t17)) {
      const r20 = t17;
      e18 = [[[r20.xmin, r20.ymin], [r20.xmin, r20.ymax], [r20.xmax, r20.ymax], [r20.xmax, r20.ymin], [r20.xmin, r20.ymin]]];
    } else if (y(t17)) e18 = t17.rings;
    else {
      if (!s4(t17)) return;
      e18 = t17.paths;
    }
    const r19 = this.reverseTransformPt(this._searchPoint);
    if (gt(r19, e18) && (this._earlyReturn = true), !this._earlyReturn) {
      pt(r19, e18, this.reverseTransformScalar(this._searchDistPoint) * this.prevGeomUnitsPerPoint()) && (this._earlyReturn = true);
    }
  }
  _getSvgPath() {
    return null != this._svg && null != this._path || (this._svg ??= e17(), this._path ??= t16("path"), this._svg.appendChild(this._path)), this._path;
  }
  _getCanvasContext(t17, e18) {
    return this._canvas ??= document.createElement("canvas"), this._canvas.width = t17, this._canvas.height = e18, this._canvas.getContext("2d", { willReadFrequently: true });
  }
  _hittestSvgPath(t17, e18, r19, i19 = 0) {
    const s18 = this.reverseTransformScalar(this._searchDistPoint) * this.prevGeomUnitsPerPoint(), o10 = this.reverseTransformPt(this._searchPoint), n20 = u();
    a2(n20, t17);
    const a13 = { x: n20[0], y: n20[1], width: n20[2] - n20[0], height: n20[3] - n20[1] }, h12 = this._getSvgPath();
    h12.setAttribute("d", e18);
    const c6 = h12.getBBox();
    let m10 = Math.max(c6.width / a13.width, c6.height / a13.height), f6 = 1;
    const u14 = 2 * s18 * m10;
    u14 < 1 && (f6 = 2 / u14, m10 *= f6, c6.x *= f6, c6.y *= f6, c6.width *= f6, c6.height *= f6);
    const d4 = 1 + i19 * m10 / 2, g2 = this._getCanvasContext(c6.width + 2 * d4, c6.height + 2 * d4);
    g2.setTransform(f6, 0, 0, f6, -c6.x + d4, -c6.y + d4);
    const _6 = new Path2D(e18);
    r19 ? g2.fill(_6) : (g2.lineWidth = i19 * (m10 / f6), g2.stroke(_6));
    const y7 = (a13.width * m10 - c6.width) / 2, P6 = (a13.height * m10 - c6.height) / 2, S4 = Math.floor((o10[0] - a13.x - s18) * m10 - y7 + d4), w5 = Math.floor((a13.height - (o10[1] - a13.y) - s18) * m10 + P6 + d4), x6 = Math.ceil(2 * s18 * m10), M4 = Math.ceil(2 * s18 * m10), b5 = g2.getImageData(S4, w5, x6, M4).data;
    for (let l14 = 3; l14 < b5.length; l14 += 4) if (b5[l14] > 127.5) return void (this._earlyReturn = true);
  }
  _hitTestStroke(t17, e18) {
    let r19 = null;
    if (m3(t17)) {
      const e19 = t17;
      r19 = [[[e19.xmin, e19.ymin], [e19.xmin, e19.ymax], [e19.xmax, e19.ymax], [e19.xmax, e19.ymin], [e19.xmin, e19.ymin]]];
    } else if (y(t17)) r19 = t17.rings;
    else {
      if (!s4(t17)) return;
      r19 = t17.paths;
    }
    pt(this.reverseTransformPt(this._searchPoint), r19, h2(e18, n2.CIMSolidStroke.width) * this.geomUnitsPerPoint() / 2 + this.reverseTransformScalar(this._searchDistPoint) * this.prevGeomUnitsPerPoint()) && (this._earlyReturn = true);
  }
};
var ut = class extends ct {
  constructor(t17, e18, r19, i19) {
    super(e18, r19), this._applyAdditionalRenderProps = i19, this._colorSubstitutionHelper = new t12(), this._ctx = t17;
  }
  drawSolidFill(t17, e18) {
    if (!t17) return;
    if (y(t17)) this._buildPath(t17.rings, true);
    else if (s4(t17)) this._buildPath(t17.paths, true);
    else if (m3(t17)) this._buildPath(yt(t17).rings, true);
    else {
      if (!u2(t17)) return;
      console.log("CanvasDrawHelper.drawSolidFill - No implementation!");
    }
    const r19 = this._ctx;
    r19.fillStyle = "string" == typeof e18 ? e18 : "rgba(" + Math.round(e18[0]) + "," + Math.round(e18[1]) + "," + Math.round(e18[2]) + "," + (e18[3] ?? 255) / 255 + ")", r19.fill("evenodd");
  }
  drawSolidStroke(t17, e18, r19, i19, s18, o10) {
    if (!t17 || !e18 || 0 === r19) return;
    if (y(t17)) this._buildPath(t17.rings, true);
    else if (s4(t17)) this._buildPath(t17.paths, false);
    else {
      if (!m3(t17)) return void console.log("CanvasDrawHelper.drawSolidStroke isn't implemented!");
      this._buildPath(yt(t17).rings, true);
    }
    const n20 = this._ctx;
    n20.strokeStyle = "string" == typeof e18 ? e18 : "rgba(" + Math.round(e18[0]) + "," + Math.round(e18[1]) + "," + Math.round(e18[2]) + "," + (e18[3] ?? 255) / 255 + ")", n20.lineWidth = Math.max(this.transformSize(r19), at), this._setCapStyle(i19), this._setJoinStyle(s18), n20.miterLimit = o10, n20.stroke();
  }
  pushClipPath(t17) {
    if (this._ctx.save(), y(t17)) this._buildPath(t17.rings, true);
    else if (s4(t17)) this._buildPath(t17.paths, true);
    else {
      if (!m3(t17)) return;
      this._buildPath(yt(t17).rings, true);
    }
    this._ctx.clip("evenodd");
  }
  popClipPath() {
    this._ctx.restore();
  }
  drawImage(t17, e18) {
    const { colorSubstitutions: r19, url: i19, tintColor: s18 } = t17, o10 = h2(t17.scaleX, 1), n20 = this._resourceManager.getResource(i19);
    if (null == n20) return;
    let a13 = e18 * (n20.width / n20.height), l14 = e18;
    e18 || (a13 = n20.width, l14 = n20.height);
    const h12 = V2(i19) || "src" in n20 && V2(n20.src);
    let c6 = "getFrame" in n20 ? t13(n20) : n20;
    r19 && (c6 = this._colorSubstitutionHelper.applyColorSubstitution(c6, r19)), this._applyAdditionalRenderProps && !h12 && s18 && (c6 = this._colorSubstitutionHelper.tintImageData(c6, s18));
    const m10 = this.transformPt([0, 0]), [f6, u14] = this.getTransformAngle(), d4 = this.transformSize(1), g2 = this._ctx;
    g2.save(), g2.setTransform({ m11: o10 * d4 * f6, m12: o10 * d4 * u14, m21: -d4 * u14, m22: d4 * f6, m41: m10[0], m42: m10[1] }), g2.drawImage(c6, -a13 / 2, -l14 / 2, a13, l14), g2.restore();
  }
  drawText(t17, e18) {
    if (!e18 || 0 === e18.length) return;
    this._textRasterizer || (this._textRasterizer = new s16());
    const r19 = St(t17, this.transformSize(e3(1))), i19 = this._textRasterizer.rasterizeText(e18, r19);
    if (!i19) return;
    const { size: s18, anchorX: n20, anchorY: a13, canvas: l14 } = i19, h12 = s18[0] * (n20 + 0.5), c6 = s18[1] * (a13 - 0.5), m10 = this._ctx, f6 = this.transformPt([0, 0]), [u14, d4] = this.getTransformAngle(), g2 = 1;
    m10.save(), m10.setTransform({ m11: g2 * u14, m12: g2 * d4, m21: -1 * d4, m22: g2 * u14, m41: f6[0] - g2 * h12, m42: f6[1] + g2 * c6 }), m10.drawImage(l14, 0, 0), m10.restore();
  }
  drawPictureFill(t17, e18) {
    if (!t17) return;
    let { colorSubstitutions: r19, height: i19, offsetX: s18, offsetY: o10, rotation: n20, scaleX: a13, tintColor: l14, url: h12 } = e18;
    const c6 = this._resourceManager.getResource(h12);
    if (null == c6) return;
    if (y(t17)) this._buildPath(t17.rings, true);
    else if (s4(t17)) this._buildPath(t17.paths, true);
    else if (m3(t17)) this._buildPath(yt(t17).rings, true);
    else {
      if (!u2(t17)) return;
      console.log("CanvasDrawHelper.drawPictureFill - No implementation!");
    }
    const m10 = this._ctx, f6 = V2(h12) || "src" in c6 && V2(c6.src);
    let u14, d4 = "getFrame" in c6 ? t13(c6) : c6;
    if (r19 && (d4 = this._colorSubstitutionHelper.applyColorSubstitution(d4, r19)), this._applyAdditionalRenderProps) {
      f6 || l14 && (d4 = this._colorSubstitutionHelper.tintImageData(d4, l14)), u14 = m10.createPattern(d4, "repeat");
      const t18 = this.transformSize(1);
      n20 || (n20 = 0), s18 ? s18 *= t18 : s18 = 0, o10 ? o10 *= t18 : o10 = 0, i19 && (i19 *= t18);
      const e19 = i19 ? i19 / c6.height : 1, r20 = a13 && i19 ? a13 * i19 / c6.width : 1;
      if (0 !== n20 || 1 !== e19 || 1 !== r20 || 0 !== s18 || 0 !== o10) {
        const t19 = new DOMMatrix();
        t19.rotateSelf(0, 0, -n20).translateSelf(s18, o10).scaleSelf(r20, e19, 1), u14.setTransform(t19);
      }
    } else u14 = m10.createPattern(d4, "repeat");
    m10.save(), m10.fillStyle = u14, m10.fill("evenodd"), m10.restore();
  }
  drawPictureStroke(t17, r19) {
    if (!t17) return;
    let { colorSubstitutions: i19, capStyle: s18, joinStyle: o10, miterLimit: a13, tintColor: l14, url: h12, width: c6 } = r19;
    const m10 = this._resourceManager.getResource(h12);
    if (null == m10) return;
    let f6;
    if (y(t17)) f6 = t17.rings;
    else if (s4(t17)) f6 = t17.paths;
    else {
      if (!m3(t17)) return u2(t17) ? void console.log("CanvasDrawHelper.drawPictureStroke - No implementation!") : void 0;
      f6 = yt(t17).rings;
    }
    c6 || (c6 = m10.width);
    const u14 = V2(h12) || "src" in m10 && V2(m10.src);
    let d4 = "getFrame" in m10 ? t13(m10) : m10;
    i19 && (d4 = this._colorSubstitutionHelper.applyColorSubstitution(d4, i19)), this._applyAdditionalRenderProps && (u14 || l14 && (d4 = this._colorSubstitutionHelper.tintImageData(d4, l14)));
    const g2 = Math.max(this.transformSize(u3(c6)), 0.5), p8 = g2 / d4.width, _6 = this._ctx, x6 = _6.createPattern(d4, "repeat-y");
    let M4, b5;
    _6.save(), this._setCapStyle(s18), this._setJoinStyle(o10), void 0 !== a13 && (_6.miterLimit = a13), _6.lineWidth = g2;
    for (let n20 of f6) if (n20 = a(n20), xt(n20), n20 && !(n20.length <= 1)) {
      M4 = this.transformPt(n20[0]);
      for (let t18 = 1; t18 < n20.length; t18++) {
        b5 = this.transformPt(n20[t18]);
        const e18 = _t2(M4, b5), r20 = new DOMMatrix();
        r20.translateSelf(0, M4[1] - g2 / 2).scaleSelf(p8, p8, 1).rotateSelf(0, 0, 90 - e18), x6.setTransform(r20), _6.strokeStyle = x6, _6.beginPath(), _6.moveTo(M4[0], M4[1]), _6.lineTo(b5[0], b5[1]), _6.stroke(), M4 = b5;
      }
    }
    _6.restore();
  }
  drawGradientFill(t17, e18) {
    if (!t17) return;
    let r19;
    if (y(t17)) r19 = t17.rings;
    else if (s4(t17)) r19 = t17.paths;
    else {
      if (!m3(t17)) return void lt().error("Unable to draw gradient fill");
      r19 = yt(t17).rings;
    }
    this._buildPath(r19, true);
    const { angle: s18, gradientMethod: o10, gradientSize: a13, gradientSizeUnits: l14 } = e18, h12 = n2.CIMGradientFill, p8 = e18.gradientType ?? h12.gradientType, _6 = -s2(s18 ?? 0), w5 = I2();
    for (const i19 of r19) {
      const t18 = i19 ? i19.length : 0;
      if (t18 > 1) for (let e19 = 0; e19 < t18; e19++) {
        let t19 = this.transformPt(i19[e19]);
        "Linear" !== o10 && "Rectangular" !== o10 || (t19 = t14(t19, -_6)), m2(w5, t19);
      }
    }
    const [x6, M4, b5, k] = w5, C3 = this._ctx;
    switch (C3.save(), o10) {
      case "Buffered":
        lt().error(`Gradient method "${o10}" currently unsupported.`);
        break;
      case "Linear": {
        const t18 = (M4 + k) / 2, r20 = "Absolute" === l14 ? this.transformSize(u3(a13)) : ee(a13, h12.gradientSize) * (b5 - x6), [i19, s19] = "Discrete" === p8 ? [b5, b5 - r20] : [x6 + r20, x6], o11 = t14([i19, t18], _6), c6 = t14([s19, t18], _6), m10 = C3.createLinearGradient(o11[0], o11[1], c6[0], c6[1]);
        p2(m10, e18), C3.fillStyle = m10, C3.fill("evenodd");
        break;
      }
      case "Circular": {
        const t18 = p(w5), r20 = b(w5) / 2, i19 = "Absolute" === l14 ? this.transformSize(u3(a13)) : ee(a13, h12.gradientSize) * r20, [s19, o11] = "Discrete" === p8 ? [r20, r20 - i19] : [i19, 0], c6 = C3.createRadialGradient(t18[0], t18[1], s19, t18[0], t18[1], o11);
        p2(c6, e18), C3.fillStyle = c6, C3.fill("evenodd");
        break;
      }
      case "Rectangular": {
        const r20 = p(w5), i19 = r20[0], s19 = r20[1], o11 = t14(r20, _6), c6 = (r21, i20, s20, n20, a14, l15, h13, c7) => {
          C3.save(), this.pushClipPath(t17);
          const m11 = t14([a14, l15], _6), f6 = t14([h13, c7], _6);
          C3.beginPath(), C3.moveTo(o11[0], o11[1]), C3.lineTo(m11[0], m11[1]), C3.lineTo(f6[0], f6[1]), C3.lineTo(o11[0], o11[1]), C3.clip();
          const u14 = t14([r21, i20], _6), d4 = t14([s20, n20], _6), g3 = C3.createLinearGradient(u14[0], u14[1], d4[0], d4[1]);
          p2(g3, e18), C3.fillStyle = g3, C3.fill("evenodd"), C3.restore();
        };
        let m10 = "Absolute" === l14 ? this.transformSize(u3(a13)) : ee(a13, h12.gradientSize) * (x(w5) / 2), [g2, y7] = "Discrete" === p8 ? [b5, b5 - m10] : [i19 + m10, i19];
        c6(g2, s19, y7, s19, b5, M4, b5, k), [g2, y7] = "Discrete" === p8 ? [x6, x6 + m10] : [i19 - m10, i19], c6(g2, s19, y7, s19, x6, k, x6, M4), m10 = "Absolute" === l14 ? this.transformSize(u3(a13)) : ee(a13, h12.gradientSize) * (s3(w5) / 2);
        let [P6, S4] = "Discrete" === p8 ? [k, k - m10] : [s19 + m10, s19];
        c6(i19, P6, i19, S4, b5, k, x6, k), [P6, S4] = "Discrete" === p8 ? [M4, M4 + m10] : [s19 - m10, s19], c6(i19, P6, i19, S4, x6, M4, b5, M4);
        break;
      }
    }
    C3.restore();
  }
  drawGradientStroke(t17, r19) {
    const { capStyle: i19, gradientMethod: s18, gradientSize: o10, gradientSizeUnits: a13, joinStyle: l14, miterLimit: h12, width: c6 } = r19;
    if (!t17 || 0 === c6) return;
    let m10;
    if (y(t17)) m10 = t17.rings;
    else if (s4(t17)) m10 = t17.paths;
    else {
      if (!m3(t17)) return void lt().error("Unable to draw gradient stroke");
      m10 = yt(t17).rings;
    }
    const f6 = r19.gradientType ?? n2.CIMGradientStroke.gradientType, u14 = Math.max(this.transformSize(u3(c6)), 0.5), d4 = this._ctx;
    let g2, p8;
    d4.save(), this._setCapStyle(i19), this._setJoinStyle(l14), void 0 !== h12 && (d4.miterLimit = h12), d4.lineWidth = u14;
    for (let _6 of m10) {
      if (_6 = a(_6), xt(_6), !_6 || _6.length <= 1) continue;
      let t18 = 0;
      g2 = this.transformPt(_6[0]);
      for (let e18 = 1; e18 < _6.length; e18++) {
        p8 = this.transformPt(_6[e18]);
        const r20 = p8[0] - g2[0], i21 = p8[1] - g2[1];
        t18 += Math.sqrt(r20 * r20 + i21 * i21), g2 = p8;
      }
      const i20 = "Absolute" === a13 ? this.transformSize(u3(o10)) : ee(o10, n2.CIMGradientStroke.gradientSize) * ("AcrossLine" === s18 ? u14 : t18);
      let l15 = 0;
      g2 = this.transformPt(_6[0]);
      for (let e18 = 1; e18 < _6.length; e18++) {
        p8 = this.transformPt(_6[e18]);
        const o11 = p8[0] - g2[0], n20 = p8[1] - g2[1], a14 = Math.sqrt(o11 * o11 + n20 * n20);
        let h13, c7, m11, y7;
        switch (s18) {
          case "AcrossLine": {
            const [t19, e19] = t14([o11 / a14, n20 / a14], -Math.PI / 2), r20 = u14 / 2, s19 = "Discrete" === f6 ? r20 : i20 - r20;
            h13 = (g2[0] + p8[0]) / 2 + t19 * s19, c7 = (g2[1] + p8[1]) / 2 + e19 * s19, m11 = h13 - t19 * i20, y7 = c7 - e19 * i20;
            break;
          }
          case "AlongLine": {
            const e19 = o11 / a14, r20 = n20 / a14;
            "Discrete" === f6 ? (h13 = g2[0] - e19 * l15, c7 = g2[1] - r20 * l15, m11 = h13 + e19 * i20, y7 = c7 + r20 * i20) : (m11 = g2[0] + e19 * (t18 - l15), y7 = g2[1] + r20 * (t18 - l15), h13 = m11 - e19 * i20, c7 = y7 - r20 * i20);
            break;
          }
          default:
            return lt().error("Unrecognized gradient method:", s18), void d4.restore();
        }
        const P6 = d4.createLinearGradient(h13, c7, m11, y7);
        p2(P6, r19), d4.strokeStyle = P6, d4.beginPath(), d4.moveTo(g2[0], g2[1]), d4.lineTo(p8[0], p8[1]), d4.stroke(), l15 += a14, g2 = p8;
      }
    }
    d4.restore();
  }
  _buildPath(t17, e18) {
    const r19 = this._ctx;
    if (r19.beginPath(), t17) for (const i19 of t17) {
      const t18 = i19 ? i19.length : 0;
      if (t18 > 1) {
        let s18 = this.transformPt(i19[0]);
        r19.moveTo(s18[0], s18[1]);
        for (let e19 = 1; e19 < t18; e19++) s18 = this.transformPt(i19[e19]), r19.lineTo(s18[0], s18[1]);
        e18 && r19.closePath();
      }
    }
  }
  _setCapStyle(t17) {
    switch (t17) {
      case w.Butt:
        this._ctx.lineCap = "butt";
        break;
      case w.Round:
        this._ctx.lineCap = "round";
        break;
      case w.Square:
        this._ctx.lineCap = "square";
    }
  }
  _setJoinStyle(t17) {
    switch (t17) {
      case G2.Bevel:
        this._ctx.lineJoin = "bevel";
        break;
      case G2.Round:
        this._ctx.lineJoin = "round";
        break;
      case G2.Miter:
        this._ctx.lineJoin = "miter";
    }
  }
};
function dt(t17, e18, r19) {
  let i19 = h2(t17.separation, n2.CIMHatchFill.separation) * r19, s18 = h2(t17.rotation);
  if (0 === i19) return null;
  i19 < 0 && (i19 = -i19);
  let o10 = 0;
  const n20 = 0.5 * i19;
  for (; o10 > n20; ) o10 -= i19;
  for (; o10 < -n20; ) o10 += i19;
  const a13 = u();
  a2(a13, e18), a13[0] -= n20, a13[1] -= n20, a13[2] += n20, a13[3] += n20;
  const h12 = [[a13[0], a13[1]], [a13[0], a13[3]], [a13[2], a13[3]], [a13[2], a13[1]]];
  for (; s18 > 180; ) s18 -= 180;
  for (; s18 < 0; ) s18 += 180;
  const c6 = Math.cos(s18 * nt), m10 = Math.sin(s18 * nt), f6 = -i19 * m10, u14 = i19 * c6;
  let d4, g2, _6, y7;
  o10 = h2(t17.offsetX) * r19 * m10 - h2(t17.offsetY) * r19 * c6, d4 = _6 = Number.MAX_VALUE, g2 = y7 = -Number.MAX_VALUE;
  for (const l14 of h12) {
    const t18 = l14[0], e19 = l14[1], r20 = c6 * t18 + m10 * e19, i20 = -m10 * t18 + c6 * e19;
    d4 = Math.min(d4, r20), _6 = Math.min(_6, i20), g2 = Math.max(g2, r20), y7 = Math.max(y7, i20);
  }
  _6 = Math.floor(_6 / i19) * i19;
  let P6 = c6 * d4 - m10 * _6 - f6 * o10 / i19, S4 = m10 * d4 + c6 * _6 - u14 * o10 / i19, w5 = c6 * g2 - m10 * _6 - f6 * o10 / i19, x6 = m10 * g2 + c6 * _6 - u14 * o10 / i19;
  const M4 = 1 + Math.round((y7 - _6) / i19), b5 = [];
  for (let l14 = 0; l14 < M4; l14++) P6 += f6, S4 += u14, w5 += f6, x6 += u14, b5.push([[P6, S4], [w5, x6]]);
  return { paths: b5 };
}
function gt(t17, e18) {
  let r19 = 0;
  for (const i19 of e18) {
    const e19 = i19.length;
    for (let s18 = 1; s18 < e19; s18++) {
      const e20 = i19[s18 - 1], o10 = i19[s18];
      if (e20[1] > t17[1] == o10[1] > t17[1]) continue;
      (o10[0] - e20[0]) * (t17[1] - e20[1]) - (o10[1] - e20[1]) * (t17[0] - e20[0]) > 0 ? r19++ : r19--;
    }
  }
  return 0 !== r19;
}
function pt(t17, e18, r19) {
  for (const i19 of e18) {
    const e19 = i19.length;
    for (let s18 = 1; s18 < e19; s18++) {
      const e20 = i19[s18 - 1], o10 = i19[s18];
      let n20 = (o10[0] - e20[0]) * (o10[0] - e20[0]) + (o10[1] - e20[1]) * (o10[1] - e20[1]);
      if (0 === n20) continue;
      n20 = Math.sqrt(n20);
      const a13 = ((o10[0] - e20[0]) * (t17[1] - e20[1]) - (o10[1] - e20[1]) * (t17[0] - e20[0])) / n20;
      if (Math.abs(a13) < r19) {
        const i20 = ((o10[0] - e20[0]) * (t17[0] - e20[0]) + (o10[1] - e20[1]) * (t17[1] - e20[1])) / n20;
        if (i20 > -r19 && i20 < n20 + r19) return true;
      }
    }
  }
  return false;
}
function _t2(t17, e18) {
  const r19 = e18[0] - t17[0], i19 = e18[1] - t17[1];
  return 180 / Math.PI * Math.atan2(i19, r19);
}
var yt = (t17) => t17 ? { spatialReference: t17.spatialReference, rings: [[[t17.xmin, t17.ymin], [t17.xmin, t17.ymax], [t17.xmax, t17.ymax], [t17.xmax, t17.ymin], [t17.xmin, t17.ymin]]] } : null;
var Pt = (t17, e18, r19) => {
  switch (t17) {
    case "ExtraLeading":
      return 1 + e18 / r19;
    case "Multiple":
      return e18;
    case "Exact":
      return e18 / r19;
  }
};
function St(e18, r19 = 1) {
  const i19 = T2(e18), s18 = L2(e18.fontStyleName), o10 = e18.fontFamilyName ?? t3, { weight: n20, style: a13 } = s18, l14 = r19 * (e18.height || 5), h12 = v(e18.horizontalAlignment), c6 = E2(e18.verticalAlignment), m10 = A(e18), f6 = A(e18.haloSymbol), u14 = null != f6 ? r19 * (e18.haloSize ?? 0) : 0, d4 = N2(e18.symbol), g2 = r19 * (G3(e18.symbol) || 0), p8 = "CIMBackgroundCallout" === e18.callout?.type ? e18.callout.backgroundSymbol : null, _6 = A(p8), y7 = G3(p8), P6 = N2(p8);
  return { color: m10, size: l14, horizontalAlignment: h12, verticalAlignment: c6, font: { family: o10, style: P3(a13), weight: w2(n20), decoration: i19 }, outline: { size: g2 || 0, color: d4 }, halo: { size: u14 || 0, color: f6, style: a13 }, backgroundColor: _6, borderLine: null != y7 && null != P6 ? { size: y7, color: P6 } : null, pixelRatio: 1, premultiplyColors: true };
}
var wt = 1e-4;
function xt(t17) {
  let e18, r19, i19, s18, o10, n20 = t17[0], a13 = 1;
  for (; a13 < t17.length; ) e18 = t17[a13][0] - n20[0], r19 = t17[a13][1] - n20[1], s18 = 0 !== e18 ? r19 / e18 : Math.PI / 2, void 0 !== i19 && Math.abs(s18 - i19) <= wt ? (t17.splice(a13 - 1, 1), n20 = o10) : (o10 = n20, n20 = t17[a13], a13++), i19 = s18;
}

// node_modules/@arcgis/core/core/BidiText.js
var n19 = new C();
function i18(r19) {
  if (null == r19) return ["", false];
  if (!n19.hasBidiChar(r19)) return [r19, false];
  let i19;
  return i19 = "rtl" === n19.checkContextual(r19) ? "IDNNN" : "ICNNN", [n19.bidiTransform(r19, i19, "VLYSN"), true];
}

// node_modules/@arcgis/core/symbols/cim/CIMSymbolHelper.js
var N4 = Math.PI;
var Y2 = N4 / 2;
var _5 = Math.PI / 180;
var U2 = 96 / 72;
var q = 1.4142135623730951;
var H2 = 2;
var O2 = 4;
var W = () => i.getLogger("esri.symbols.cim.CIMSymbolHelper");
function $(e18) {
  let t17;
  switch (e18.type) {
    case "cim":
      return e18.data;
    case "web-style":
      return e18;
    case "simple-marker": {
      const r19 = te2.fromSimpleMarker(e18);
      if (!r19) throw new Error("InternalError: Cannot convert symbol to CIM");
      t17 = r19;
      break;
    }
    case "picture-marker":
      t17 = te2.fromPictureMarker(e18);
      break;
    case "simple-line":
      t17 = te2.fromSimpleLineSymbol(e18);
      break;
    case "simple-fill":
      t17 = te2.fromSimpleFillSymbol(e18);
      break;
    case "picture-fill":
      t17 = te2.fromPictureFillSymbol(e18);
      break;
    case "text":
      t17 = te2.fromTextSymbol(e18);
  }
  return { type: "CIMSymbolReference", symbol: t17 };
}
function J(e18, t17, r19) {
  switch (t17.type) {
    case "CIMSymbolReference":
      return J(e18, t17.symbol, r19);
    case "CIMPointSymbol":
      null == r19 && (r19 = { x: 0, y: 0 }), e18.drawSymbol(t17, r19);
      break;
    case "CIMLineSymbol":
      null == r19 && (r19 = { paths: [[[0, 0], [10, 0]]] }), e18.drawSymbol(t17, r19);
      break;
    case "CIMPolygonSymbol":
      null == r19 && (r19 = { rings: [[[0, 0], [0, 10], [10, 10], [10, 0], [0, 0]]] }), e18.drawSymbol(t17, r19);
      break;
    case "CIMTextSymbol": {
      const r20 = { x: 0, y: 0 };
      e18.drawSymbol(t17, r20);
      break;
    }
    case "CIMVectorMarker": {
      const r20 = new t6();
      e18.drawMarker(t17, r20);
      break;
    }
  }
  return e18.envelope();
}
function K2(e18) {
  if (!e18) return 0;
  switch (e18.type) {
    case "CIMMarkerPlacementAlongLineSameSize":
    case "CIMMarkerPlacementAlongLineRandomSize":
    case "CIMMarkerPlacementAtExtremities":
    case "CIMMarkerPlacementAtMeasuredUnits":
    case "CIMMarkerPlacementAtRatioPositions":
    case "CIMMarkerPlacementOnLine":
    case "CIMMarkerPlacementOnVertices":
      return Math.abs(e18.offset);
    default:
      return 0;
  }
}
function Q2(e18) {
  if (!e18) return 0;
  switch (e18.type) {
    case "CIMGeometricEffectArrow":
      return Math.abs(0.5 * e18.width);
    case "CIMGeometricEffectBuffer":
      return Math.abs(e18.size);
    case "CIMGeometricEffectControlMeasureLine":
      return 500;
    case "CIMGeometricEffectExtension":
    case "CIMGeometricEffectRadial":
      return Math.abs(e18.length);
    case "CIMGeometricEffectJog":
      return Math.abs(0.5 * e18.length);
    case "CIMGeometricEffectMove":
      return Math.max(Math.abs(h2(e18.offsetX)), Math.abs(h2(e18.offsetY)));
    case "CIMGeometricEffectOffset":
    case "CIMGeometricEffectOffsetTangent":
      return Math.abs(e18.offset);
    case "CIMGeometricEffectRegularPolygon":
      return Math.abs(e18.radius);
    case "CIMGeometricEffectRotate":
    case "CIMGeometricEffectScale":
    default:
      return 0;
    case "CIMGeometricEffectTaperedPolygon":
      return 0.5 * Math.max(Math.abs(e18.fromWidth), Math.abs(e18.toWidth));
    case "CIMGeometricEffectWave":
      return Math.abs(e18.amplitude);
    case "CIMGeometricEffectDonut":
      return Math.abs(e18.width);
  }
}
function Z2(e18) {
  if (!e18) return 0;
  let t17 = 0;
  for (const r19 of e18) t17 += Q2(r19);
  return t17;
}
var ee2 = class {
  static getSymbolInflateSize(e18, t17, r19, o10, a13) {
    return e18 || (e18 = [0, 0, 0, 0]), t17 ? this._getInflateSize(e18, t17, r19, o10, a13) : e18;
  }
  static safeSize(e18) {
    const t17 = Math.max(Math.abs(e18[0]), Math.abs(e18[2])), r19 = Math.max(Math.abs(e18[1]), Math.abs(e18[3]));
    return Math.sqrt(t17 * t17 + r19 * r19);
  }
  static _vectorMarkerBounds(e18, t17, r19, o10) {
    let a13 = true;
    const i19 = u();
    if (t17?.markerGraphics) for (const s18 of t17.markerGraphics) {
      const t18 = [0, 0, 0, 0];
      s18.geometry && (a2(i19, s18.geometry), t18[0] = 0, t18[1] = 0, t18[2] = 0, t18[3] = 0, this.getSymbolInflateSize(t18, s18.symbol, r19, 0, o10), i19[0] += t18[0], i19[1] += t18[1], i19[2] += t18[2], i19[3] += t18[3], a13 ? (e18[0] = i19[0], e18[1] = i19[1], e18[2] = i19[2], e18[3] = i19[3], a13 = false) : (e18[0] = Math.min(e18[0], i19[0]), e18[1] = Math.min(e18[1], i19[1]), e18[2] = Math.max(e18[2], i19[2]), e18[3] = Math.max(e18[3], i19[3])));
    }
    return e18;
  }
  static _getInflateSize(e18, t17, r19, o10, a13) {
    if (ye(t17)) {
      const s18 = this._getLayersInflateSize(e18, t17.symbolLayers, r19, o10, a13), i19 = Z2(t17.effects);
      return i19 > 0 && (s18[0] -= i19, s18[1] -= i19, s18[2] += i19, s18[3] += i19), s18;
    }
    return this._getTextInflatedSize(e18, t17, a13);
  }
  static _getLayersInflateSize(e18, t17, r19, o10, a13) {
    let n20 = true;
    if (!t17) return e18;
    for (const l14 of t17) {
      if (!l14) continue;
      let t18 = [0, 0, 0, 0];
      switch (l14.type) {
        case "CIMSolidFill":
        case "CIMPictureFill":
        case "CIMHatchFill":
        case "CIMGradientFill":
          break;
        case "CIMSolidStroke":
        case "CIMPictureStroke":
        case "CIMGradientStroke": {
          const e19 = l14;
          let r20 = e19.width;
          null != r20 && (e19.capStyle === w.Square || e19.joinStyle === G2.Miter ? r20 /= q : r20 /= 2, t18[0] = -r20, t18[1] = -r20, t18[2] = r20, t18[3] = r20);
          break;
        }
        case "CIMCharacterMarker":
        case "CIMVectorMarker":
        case "CIMPictureMarker": {
          const e19 = l14;
          if ("CIMVectorMarker" === l14.type) {
            const e20 = l14;
            if (t18 = this._vectorMarkerBounds(t18, e20, r19, a13), e20.frame) {
              const r20 = (e20.frame.xmin + e20.frame.xmax) / 2, o11 = (e20.frame.ymin + e20.frame.ymax) / 2;
              if (t18[0] -= r20, t18[1] -= o11, t18[2] -= r20, t18[3] -= o11, null != e20.size) {
                const r21 = e20.size / (e20.frame.ymax - e20.frame.ymin);
                t18[0] *= r21, t18[1] *= r21, t18[2] *= r21, t18[3] *= r21;
              }
            }
          } else if ("CIMPictureMarker" === l14.type) {
            const o11 = l14, a14 = r19.getResource(o11.url);
            let s18 = 1;
            if (null != a14 && a14.height && (s18 = a14.width / a14.height), null != e19.size) {
              const r20 = e19.size / 2, a15 = e19.size * s18 * o11.scaleX / 2;
              t18 = [-a15, -r20, a15, r20];
            }
          } else if (null != e19.size) {
            const r20 = e19.size / 2;
            t18 = [-r20, -r20, r20, r20];
          }
          if (e19.anchorPoint) {
            let r20, o11;
            "Absolute" === e19.anchorPointUnits ? (r20 = e19.anchorPoint.x, o11 = e19.anchorPoint.y) : (r20 = e19.anchorPoint.x * (t18[2] - t18[0]), o11 = e19.anchorPoint.y * (t18[3] - t18[1]));
            const a14 = 1.25 * Math.sqrt(r20 * r20 + o11 * o11);
            t18[0] -= a14, t18[1] -= a14, t18[2] += a14, t18[3] += a14;
          }
          let n21 = h2(e19.rotation);
          if (e19.rotateClockwise && (n21 = -n21), o10 && (n21 -= o10), n21) {
            const e20 = _5 * n21, r20 = Math.cos(e20), o11 = Math.sin(e20), a14 = u([r, r, -r, -r]);
            m2(a14, [t18[0] * r20 - t18[1] * o11, t18[0] * o11 + t18[1] * r20]), m2(a14, [t18[0] * r20 - t18[3] * o11, t18[0] * o11 + t18[3] * r20]), m2(a14, [t18[2] * r20 - t18[1] * o11, t18[2] * o11 + t18[1] * r20]), m2(a14, [t18[2] * r20 - t18[3] * o11, t18[2] * o11 + t18[3] * r20]), t18 = a14;
          }
          let c7 = h2(e19.offsetX), m10 = h2(e19.offsetY);
          if (o10) {
            const e20 = _5 * o10, t19 = Math.cos(e20), r20 = Math.sin(e20), a14 = c7 * r20 + m10 * t19;
            c7 = c7 * t19 - m10 * r20, m10 = a14;
          }
          t18[0] += c7, t18[1] += m10, t18[2] += c7, t18[3] += m10;
          const f6 = K2(e19.markerPlacement);
          f6 > 0 && (t18[0] -= f6, t18[1] -= f6, t18[2] += f6, t18[3] += f6);
          break;
        }
      }
      const c6 = Z2(l14.effects);
      c6 > 0 && (t18[0] -= c6, t18[1] -= c6, t18[2] += c6, t18[3] += c6), n20 ? (e18[0] = t18[0], e18[1] = t18[1], e18[2] = t18[2], e18[3] = t18[3], n20 = false) : (e18[0] = Math.min(e18[0], t18[0]), e18[1] = Math.min(e18[1], t18[1]), e18[2] = Math.max(e18[2], t18[2]), e18[3] = Math.max(e18[3], t18[3]));
    }
    return e18;
  }
  static _getTextInflatedSize(e18, t17, r19) {
    const o10 = s17(t17.height ?? n2.CIMTextSymbol.height);
    if (e18[0] = -o10 / 2, e18[1] = -o10 / 2, e18[2] = o10 / 2, e18[3] = o10 / 2, !r19) return e18;
    const a13 = r19.get(t17);
    if (!a13) return e18;
    if (!a13.glyphMosaicItems.glyphs.length) return e18;
    const { lineGapType: s18, lineGap: i19 } = t17, n20 = s18 ? Pt(s18, i19 ?? 0, o10) : 0, l14 = "CIMBackgroundCallout" === t17.callout?.type, c6 = O(a13.glyphMosaicItems, { scale: o10 / A2, angle: h2(t17.angle), xOffset: h2(t17.offsetX), yOffset: h2(t17.offsetY), horizontalAlignment: t17.horizontalAlignment, verticalAlignment: t17.verticalAlignment, maxLineWidth: a12(t17.lineWidth), lineHeight: G4 * Math.max(0.25, Math.min(n20 || 1, 4)), decoration: t17.font.decoration || "none", useCIMAngleBehavior: true, hasBackground: l14 }).boundsT, m10 = Math.sqrt(c6.width * c6.width + c6.height * c6.height);
    return e18[0] -= c6.x + m10, e18[1] -= c6.y - m10, e18[2] += c6.x + m10, e18[3] += -c6.y + m10, e18;
  }
};
var te2 = class _te {
  static getEnvelope(e18, t17, r19) {
    if (!e18) return null;
    const o10 = new mt(r19);
    if (Array.isArray(e18)) {
      let r20;
      for (const a13 of e18) r20 ? r20.union(J(o10, a13, t17)) : r20 = J(o10, a13, t17);
      return r20;
    }
    return J(o10, e18, t17);
  }
  static getTextureInfo(e18, t17, r19, o10, a13) {
    const s18 = o10 ?? this.getEnvelope(e18, null, t17);
    if (!s18) return [0, 0, 0, 0, 1];
    const i19 = Math.max(s18.width, s18.height) * U2;
    let n20 = null != a13 ? Math.max(a13 / i19, 1) : 1;
    n20 *= U2, s18.x *= n20, s18.y *= n20, s18.width *= n20, s18.height *= n20, s18.width = Math.max(Math.ceil(s18.x + s18.width) - Math.floor(s18.x), 1) - 1, s18.height = Math.max(Math.ceil(s18.y + s18.height) - Math.floor(s18.y), 1) - 1;
    let l14 = s18.x + 0.5 * s18.width, c6 = s18.y + 0.5 * s18.height;
    return l14 += s18.x - Math.floor(s18.x), c6 += s18.y - Math.floor(s18.y), o10 || (s18.width += r19, s18.height += r19, l14 += r19 / 2, c6 += r19 / 2), [s18.width, s18.height, l14, c6, n20];
  }
  static getTextureAnchor(e18, t17, r19) {
    const [o10, a13, s18, i19, n20] = this.getTextureInfo(e18, t17, H2, null, r19);
    return [-s18 / o10, -i19 / a13, a13 / n20 * U2];
  }
  static rasterize(e18, t17, r19, o10, a13 = true, s18) {
    const [i19, n20, l14, m10, h12] = this.getTextureInfo(t17, o10, H2, r19, s18);
    e18.width = i19, e18.height = n20;
    const u14 = e18.getContext("2d", { willReadFrequently: true }), M4 = ht.createScale(h12, -h12);
    M4.translate(0.5 * i19 - l14, 0.5 * n20 + m10);
    const p8 = new ut(u14, o10, M4);
    switch (t17.type) {
      case "CIMPointSymbol": {
        const e19 = { type: "point", x: 0, y: 0 };
        p8.drawSymbol(t17, e19);
        break;
      }
      case "CIMVectorMarker": {
        const e19 = new t6();
        p8.drawMarker(t17, e19);
        break;
      }
    }
    const S4 = u14.getImageData(0, 0, e18.width, e18.height), d4 = new Uint8Array(S4.data);
    if (a13) {
      let e19;
      for (let t18 = 0; t18 < d4.length; t18 += 4) e19 = d4[t18 + 3] / 255, d4[t18] = d4[t18] * e19, d4[t18 + 1] = d4[t18 + 1] * e19, d4[t18 + 2] = d4[t18 + 2] * e19;
    }
    return [d4, e18.width, e18.height, -l14 / i19, -m10 / n20];
  }
  static fromTextSymbol(e18) {
    const { text: t17 } = e18;
    return { type: "CIMPointSymbol", symbolLayers: [{ type: "CIMVectorMarker", enable: true, anchorPointUnits: "Relative", dominantSizeAxis3D: "Y", size: 10, billboardMode3D: "FaceNearPlane", frame: { xmin: -5, ymin: -5, xmax: 5, ymax: 5 }, markerGraphics: [{ type: "CIMMarkerGraphic", geometry: { x: 0, y: 0 }, symbol: _te.createCIMTextSymbolfromTextSymbol(e18), textString: t17 }], scaleSymbolsProportionally: true, respectFrame: true }], scaleX: 1, angleAlignment: "Display" };
  }
  static fromPictureFillSymbol(e18) {
    const { height: t17, outline: r19, width: o10, xoffset: a13, xscale: s18, yoffset: i19, yscale: n20 } = e18, l14 = [], c6 = { type: "CIMPolygonSymbol", symbolLayers: l14 };
    if (r19) {
      const e19 = pe(r19);
      e19 && l14.push(e19);
    }
    let m10 = e18.url;
    "esriPFS" === e18.type && e18.imageData && (m10 = e18.imageData);
    const f6 = "angle" in e18 ? e18.angle ?? 0 : 0, y7 = (o10 ?? 0) * (s18 || 1), h12 = (t17 ?? 0) * (n20 || 1);
    return l14.push({ type: "CIMPictureFill", invertBackfaceTexture: false, scaleX: 1, textureFilter: oe.Picture, tintColor: null, url: m10, height: h12, width: y7, offsetX: h2(a13), offsetY: h2(i19), rotation: h2(-f6), colorSubstitutions: null }), c6;
  }
  static fromSimpleFillSymbol(e18) {
    const { color: r19, style: o10, outline: s18 } = e18, i19 = [], n20 = { type: "CIMPolygonSymbol", symbolLayers: i19 };
    if (s18) {
      const e19 = pe(s18);
      e19 && i19.push(e19);
    }
    if (o10 && "solid" !== o10 && "none" !== o10 && "esriSFSSolid" !== o10 && "esriSFSNull" !== o10) {
      const e19 = { type: "CIMLineSymbol", symbolLayers: [{ type: "CIMSolidStroke", color: ne(r19), capStyle: w.Butt, joinStyle: G2.Miter, width: 0.75 }] };
      let s19 = 0;
      const n21 = e3(ue(o10) ? 8 : 10);
      switch (o10) {
        case "vertical":
        case "esriSFSVertical":
          s19 = 90;
          break;
        case "forward-diagonal":
        case "esriSFSForwardDiagonal":
        case "diagonal-cross":
        case "esriSFSDiagonalCross":
          s19 = -45;
          break;
        case "backward-diagonal":
        case "esriSFSBackwardDiagonal":
          s19 = 45;
          break;
        case "cross":
        case "esriSFSCross":
          s19 = 0;
      }
      i19.push({ type: "CIMHatchFill", lineSymbol: e19, offsetX: 0, offsetY: 0, rotation: s19, separation: n21 }), "cross" === o10 || "esriSFSCross" === o10 ? i19.push({ type: "CIMHatchFill", lineSymbol: a(e19), offsetX: 0, offsetY: 0, rotation: 90, separation: n21 }) : "diagonal-cross" !== o10 && "esriSFSDiagonalCross" !== o10 || i19.push({ type: "CIMHatchFill", lineSymbol: a(e19), offsetX: 0, offsetY: 0, rotation: 45, separation: n21 });
    } else !o10 || "solid" !== o10 && "esriSFSSolid" !== o10 || i19.push({ type: "CIMSolidFill", enable: true, color: ne(r19) });
    return n20;
  }
  static fromSimpleLineSymbol(e18) {
    const { cap: t17, color: r19, join: o10, marker: a13, miterLimit: s18, style: i19, width: n20 } = e18;
    let l14 = null;
    "solid" !== i19 && "none" !== i19 && "esriSLSSolid" !== i19 && "esriSLSNull" !== i19 && (l14 = [{ type: "CIMGeometricEffectDashes", dashTemplate: fe(i19, t17), lineDashEnding: "NoConstraint", scaleDash: true, offsetAlongLine: null }]);
    const c6 = [];
    if (a13) {
      let e19;
      switch (a13.placement) {
        case "begin-end":
          e19 = o.Both;
          break;
        case "begin":
          e19 = o.JustBegin;
          break;
        case "end":
          e19 = o.JustEnd;
          break;
        default:
          e19 = o.None;
      }
      const t18 = _te.fromSimpleMarker(a13, n20, r19).symbolLayers[0];
      t18.markerPlacement = { type: "CIMMarkerPlacementAtExtremities", placePerPart: false, angleToLine: true, offset: 0, extremityPlacement: e19, offsetAlongLine: 0 }, c6.push(t18);
    }
    return c6.push({ type: "CIMSolidStroke", color: "none" !== i19 && "esriSLSNull" !== i19 ? ne(r19) : [0, 0, 0, 0], capStyle: oe2(t17), joinStyle: ae(o10), miterLimit: s18, width: n20, effects: l14 }), { type: "CIMLineSymbol", symbolLayers: c6 };
  }
  static fromPictureMarker(e18) {
    const { angle: t17, height: r19, width: o10, xoffset: a13, yoffset: s18 } = e18;
    let i19 = e18.url;
    return "esriPMS" === e18.type && e18.imageData && (i19 = e18.imageData), { type: "CIMPointSymbol", symbolLayers: [{ type: "CIMPictureMarker", invertBackfaceTexture: false, scaleX: 1, textureFilter: oe.Picture, tintColor: null, url: i19, size: r19, width: o10, offsetX: h2(a13), offsetY: h2(s18), rotation: h2(-t17) }] };
  }
  static createCIMTextSymbolfromTextSymbol(t17) {
    const { angle: r19, color: o10, font: a13, haloColor: s18, haloSize: i19, horizontalAlignment: n20, kerning: l14, lineWidth: c6, text: m10, verticalAlignment: f6, xoffset: y7, yoffset: h12, backgroundColor: u14, borderLineColor: M4, borderLineSize: p8 } = t17;
    let S4, d4, L4, z2, D, E3;
    a13 && (S4 = a13.family, d4 = a13.style, L4 = a13.weight, z2 = a13.size, D = a13.decoration);
    let T4 = false;
    if (m10) {
      T4 = i18(m10)[1];
    }
    return (u14 || p8) && (E3 = { type: "CIMBackgroundCallout", margin: null, backgroundSymbol: { type: "CIMPolygonSymbol", symbolLayers: [{ type: "CIMSolidFill", color: ne(u14) }, { type: "CIMSolidStroke", color: ne(M4), width: p8 }] }, accentBarSymbol: null, gap: null, leaderLineSymbol: null, lineStyle: null }), { type: "CIMTextSymbol", angle: r19, blockProgression: T.BTT, depth3D: 1, extrapolateBaselines: true, fontEffects: l4.Normal, fontEncoding: a3.Unicode, fontFamilyName: S4 || "Arial", fontStyleName: le2(d4, L4), fontType: u5.Unspecified, haloSize: i19, height: z2, hinting: y2.Default, horizontalAlignment: se(n20 ?? "center"), kerning: l14, letterWidth: 100, ligatures: true, lineGapType: "Multiple", lineWidth: c6, offsetX: h2(y7), offsetY: h2(h12), strikethrough: "line-through" === D, underline: "underline" === D, symbol: { type: "CIMPolygonSymbol", symbolLayers: [{ type: "CIMSolidFill", enable: true, color: ne(o10) }] }, haloSymbol: { type: "CIMPolygonSymbol", symbolLayers: [{ type: "CIMSolidFill", enable: true, color: ne(s18) }] }, shadowColor: [0, 0, 0, 255], shadowOffsetX: 1, shadowOffsetY: 1, textCase: "Normal", textDirection: T4 ? te.RTL : te.LTR, verticalAlignment: ie(f6 ?? "baseline"), verticalGlyphOrientation: le.Right, wordSpacing: 100, billboardMode3D: m4.FaceNearPlane, callout: E3 };
  }
  static createPictureMarkerRasterizationParam(e18) {
    const { angle: t17, height: r19, width: o10, xoffset: a13, yoffset: s18 } = e18, i19 = e18.url ?? e18.source?.url ?? e18.source?.imageData;
    return i19 ? { type: "sprite-rasterization-param", overrides: [], resource: { type: "CIMPictureMarker", invertBackfaceTexture: false, scaleX: 1, textureFilter: oe.Picture, tintColor: null, url: i19, size: r19, width: o10, offsetX: h2(a13), offsetY: h2(s18), rotation: h2(-t17) } } : null;
  }
  static createPictureFillRasterizationParam(e18) {
    const { width: t17, height: r19, xoffset: o10, yoffset: a13, url: s18 } = e18;
    return s18 ? { type: "sprite-rasterization-param", overrides: [], resource: { type: "CIMPictureFill", scaleX: 1, textureFilter: oe.Picture, tintColor: null, url: s18, width: t17, height: r19, offsetX: h2(o10), offsetY: h2(a13), rotation: 0 } } : null;
  }
  static fromSimpleMarker(e18, t17, r19) {
    const { style: o10 } = e18, a13 = e18.color ?? r19;
    if ("path" === o10 || "esriSMSPath" === o10) {
      const t18 = [];
      if ("outline" in e18 && e18.outline) {
        const r21 = e18.outline;
        t18.push({ type: "CIMSolidStroke", enable: true, width: r21.width, color: ne(r21.color), path: e18.path });
      }
      t18.push({ type: "CIMSolidFill", enable: true, color: ne(a13), path: e18.path });
      const [r20, o11] = he("square");
      return { type: "CIMPointSymbol", symbolLayers: [{ type: "CIMVectorMarker", enable: true, rotation: -h2(e18.angle), size: h2(e18.size || 6), offsetX: h2(e18.xoffset), offsetY: h2(e18.yoffset), scaleSymbolsProportionally: false, frame: r20, markerGraphics: [{ type: "CIMMarkerGraphic", geometry: o11, symbol: { type: "CIMPolygonSymbol", symbolLayers: t18 } }] }] };
    }
    const s18 = [];
    let i19, n20, l14 = e18.size;
    if ("outline" in e18 && e18.outline && "none" !== e18.outline.style && "esriSLSNull" !== e18.outline.style) {
      const t18 = e18.outline, r20 = "solid" !== t18.style && "esriSLSSolid" !== t18.style;
      [i19, n20] = r20 ? he(o10, e18.size) : he(o10);
      const a14 = t18.width ?? u4.width;
      if (r20) {
        const t19 = a14 / e18.size, r21 = (i19.xmax - i19.xmin) * t19 / 2, o11 = (i19.ymax - i19.ymin) * t19 / 2;
        i19.xmin -= r21, i19.xmax += r21, i19.ymin -= o11, i19.ymax += o11, l14 && (l14 += a14);
      }
      const c7 = "cross" !== e18.style && "x" !== e18.style || "dot" === e18?.outline.style || "short-dot" === e18?.outline.style ? b2.HalfGap : b2.FullPattern, m10 = r20 ? [{ type: "CIMGeometricEffectAddControlPoints" }, { type: "CIMGeometricEffectDashes", dashTemplate: fe(t18.style, null).map((e19) => t18.width && t18.width > 0 ? e19 * t18.width : e19), lineDashEnding: c7, controlPointEnding: b2.FullPattern }] : void 0;
      s18.push({ type: "CIMSolidStroke", capStyle: r20 ? w.Round : w.Butt, enable: true, width: a14, color: ne(t18.color), effects: m10 });
    } else !t17 || "line-marker" !== e18.type || "cross" !== e18.style && "x" !== e18.style ? [i19, n20] = he(o10) : ([i19, n20] = he(o10), s18.push({ type: "CIMSolidStroke", enable: true, width: t17, color: ne(a13) }));
    s18.push({ type: "CIMSolidFill", enable: true, color: ne(a13) });
    const c6 = { type: "CIMPolygonSymbol", symbolLayers: s18 };
    return { type: "CIMPointSymbol", symbolLayers: [{ type: "CIMVectorMarker", enable: true, rotation: h2(-e18.angle), size: h2(l14 || 6 * t17), offsetX: h2(e18.xoffset), offsetY: h2(e18.yoffset), scaleSymbolsProportionally: false, frame: i19, markerGraphics: [{ type: "CIMMarkerGraphic", geometry: n20, symbol: c6 }] }] };
  }
  static fromCIMHatchFill(e18, r19) {
    const o10 = r19 * (e18.separation ?? n2.CIMHatchFill.separation), a13 = o10 / 2, s18 = a(e18.lineSymbol);
    s18.symbolLayers?.forEach((e19) => {
      switch (e19.type) {
        case "CIMSolidStroke":
          null != e19.width && (e19.width *= r19), e19.effects?.forEach((e20) => {
            if ("CIMGeometricEffectDashes" === e20.type) {
              const t17 = e20.dashTemplate;
              e20.dashTemplate = t17?.map((e21) => e21 * r19);
            }
          });
          break;
        case "CIMVectorMarker": {
          null != e19.size && (e19.size *= r19);
          const t17 = e19.markerPlacement;
          null != t17 && "placementTemplate" in t17 && (t17.placementTemplate = t17.placementTemplate.map((e20) => e20 * r19));
          break;
        }
      }
    });
    let i19 = this._getLineSymbolPeriod(s18) || O2;
    for (; i19 < O2; ) i19 *= 2;
    const n20 = i19 / 2;
    return { type: "CIMVectorMarker", frame: { xmin: -n20, xmax: n20, ymin: -a13, ymax: a13 }, markerGraphics: [{ type: "CIMMarkerGraphic", geometry: { paths: [[[-n20, 0], [n20, 0]]] }, symbol: s18 }], size: o10 };
  }
  static fetchResources(e18, t17, r19, o10 = null) {
    return e18 && t17 ? (re(e18, (e19) => {
      Me(e19, t17, r19), "url" in e19 && e19.url && r19.push(t17.fetchResource(e19.url, { signal: o10 }));
    }), r19) : r19;
  }
  static fetchFonts(e18, t17, r19) {
    if (e18 && t17) {
      if ("symbolLayers" in e18 && e18.symbolLayers) {
        for (const o10 of e18.symbolLayers) if ("CIMVectorMarker" === o10.type && o10.markerGraphics) for (const e19 of o10.markerGraphics) e19?.symbol && _te.fetchFonts(e19.symbol, t17, r19);
      } else if ("CIMTextSymbol" === e18.type) {
        const { fontFamilyName: o10, fontStyleName: a13 } = e18;
        if (!o10 || "calcitewebcoreicons" === o10.toLowerCase()) return;
        const { style: s18, weight: i19 } = L2(a13), n20 = T2(e18), c6 = new l3({ family: o10, style: s18, weight: i19, decoration: n20 });
        r19.push(t17.loadFont(c6).catch(() => {
          W().error(`Unsupported font ${o10} in CIM symbol`);
        }));
      }
    }
  }
  static _getLineSymbolPeriod(e18) {
    if (e18) {
      const t17 = this._getEffectsRepeat(e18.effects);
      if (t17) return t17;
      if (e18.symbolLayers) {
        for (const r19 of e18.symbolLayers) if (r19) {
          const e19 = this._getEffectsRepeat(r19.effects);
          if (e19) return e19;
          switch (r19.type) {
            case "CIMCharacterMarker":
            case "CIMPictureMarker":
            case "CIMVectorMarker":
            case "CIMObjectMarker3D":
            case "CIMglTFMarker3D": {
              const e20 = this._getPlacementRepeat(r19.markerPlacement);
              if (e20) return e20;
            }
          }
        }
      }
    }
    return 0;
  }
  static _getEffectsRepeat(e18) {
    if (e18) {
      for (const t17 of e18) if (t17) switch (t17.type) {
        case "CIMGeometricEffectDashes": {
          const e19 = t17.dashTemplate;
          if (e19 && e19.length) {
            let t18 = 0;
            for (const r19 of e19) t18 += r19;
            return 1 & e19.length && (t18 *= 2), t18;
          }
          break;
        }
        case "CIMGeometricEffectWave":
          return t17.period;
        default:
          W().error(`unsupported geometric effect type ${t17.type}`);
      }
    }
    return 0;
  }
  static _getPlacementRepeat(e18) {
    if (e18) switch (e18.type) {
      case "CIMMarkerPlacementAlongLineSameSize":
      case "CIMMarkerPlacementAlongLineRandomSize":
      case "CIMMarkerPlacementAlongLineVariableSize": {
        const t17 = e18.placementTemplate;
        if (t17 && t17.length) {
          let e19 = 0;
          for (const r19 of t17) e19 += +r19;
          return 1 & t17.length && (e19 *= 2), e19;
        }
        break;
      }
    }
    return 0;
  }
  static fromCIMInsidePolygon(e18) {
    const t17 = e18.markerPlacement, r19 = { ...e18 };
    r19.markerPlacement = null, r19.anchorPoint = null;
    const s18 = Math.abs(t17.stepX), i19 = Math.abs(t17.stepY), n20 = (t17.randomness ?? 100) / 100;
    let l14, c6, m10, f6;
    if ("Random" === t17.gridType) {
      const e19 = e3(Fi), r20 = Math.max(Math.floor(e19 / s18), 1), y7 = Math.max(Math.floor(e19 / i19), 1);
      l14 = r20 * s18 / 2, c6 = y7 * i19 / 2, m10 = 2 * c6;
      const h12 = new t(t17.seed), u14 = n20 * s18 / 1.5, M4 = n20 * i19 / 1.5;
      f6 = [];
      for (let t18 = 0; t18 < r20; t18++) for (let e20 = 0; e20 < y7; e20++) {
        const r21 = t18 * s18 - l14 + u14 * (0.5 - h12.getFloat()), o10 = e20 * i19 - c6 + M4 * (0.5 - h12.getFloat());
        f6.push({ x: r21, y: o10 }), 0 === t18 && f6.push({ x: r21 + 2 * l14, y: o10 }), 0 === e20 && f6.push({ x: r21, y: o10 + 2 * c6 });
      }
    } else true === t17.shiftOddRows ? (l14 = s18 / 2, c6 = i19, m10 = 2 * i19, f6 = [{ x: -l14, y: 0 }, { x: l14, y: 0 }, { x: 0, y: c6 }, { x: 0, y: -c6 }]) : (l14 = s18 / 2, c6 = i19 / 2, m10 = i19, f6 = [{ x: -s18, y: 0 }, { x: 0, y: -i19 }, { x: -s18, y: -i19 }, { x: 0, y: 0 }, { x: s18, y: 0 }, { x: 0, y: i19 }, { x: s18, y: i19 }, { x: -s18, y: i19 }, { x: s18, y: -i19 }]);
    return { type: "CIMVectorMarker", frame: { xmin: -l14, xmax: l14, ymin: -c6, ymax: c6 }, markerGraphics: f6.map((e19) => ({ type: "CIMMarkerGraphic", geometry: e19, symbol: { type: "CIMPointSymbol", symbolLayers: [r19] } })), size: m10 };
  }
};
function re(e18, t17) {
  if (e18) switch (e18.type) {
    case "CIMPointSymbol":
    case "CIMLineSymbol":
    case "CIMPolygonSymbol": {
      const r19 = e18.symbolLayers;
      if (!r19) return;
      for (const e19 of r19) if (t17(e19), "CIMVectorMarker" === e19.type) {
        const r20 = e19.markerGraphics;
        if (!r20) continue;
        for (const e20 of r20) if (e20) {
          const r21 = e20.symbol;
          r21 && re(r21, t17);
        }
      }
      break;
    }
  }
}
var oe2 = (e18) => {
  if (!e18) return w.Butt;
  switch (e18) {
    case "butt":
      return w.Butt;
    case "square":
      return w.Square;
    case "round":
      return w.Round;
  }
};
var ae = (e18) => {
  if (!e18) return G2.Miter;
  switch (e18) {
    case "miter":
      return G2.Miter;
    case "round":
      return G2.Round;
    case "bevel":
      return G2.Bevel;
  }
};
var se = (e18) => {
  if (null == e18) return "Center";
  switch (e18) {
    case "left":
      return "Left";
    case "right":
      return "Right";
    case "center":
      return "Center";
  }
};
var ie = (e18) => {
  if (null == e18) return "Center";
  switch (e18) {
    case "baseline":
      return "Baseline";
    case "top":
      return "Top";
    case "middle":
      return "Center";
    case "bottom":
      return "Bottom";
  }
};
var ne = (e18) => {
  if (!e18) return [0, 0, 0, 0];
  const { r: t17, g: r19, b: o10, a: a13 } = e18;
  return [t17, r19, o10, 255 * a13];
};
var le2 = (e18, t17) => {
  const r19 = ce(t17), o10 = me(e18);
  return r19 && o10 ? `${r19}-${o10}` : `${r19}${o10}`;
};
var ce = (e18) => {
  if (!e18) return "";
  switch (e18.toLowerCase()) {
    case "bold":
    case "bolder":
      return "bold";
  }
  return "";
};
var me = (e18) => {
  if (!e18) return "";
  switch (e18.toLowerCase()) {
    case "italic":
    case "oblique":
      return "italic";
  }
  return "";
};
var fe = (e18, t17) => {
  const r19 = has("safari") ? 1e-3 : 0, o10 = "butt" === t17;
  switch (e18) {
    case "dash":
    case "esriSLSDash":
      return o10 ? [4, 3] : [3, 4];
    case "dash-dot":
    case "esriSLSDashDot":
      return o10 ? [4, 3, 1, 3] : [3, 4, r19, 4];
    case "dot":
    case "esriSLSDot":
      return o10 ? [1, 3] : [r19, 4];
    case "long-dash":
    case "esriSLSLongDash":
      return o10 ? [8, 3] : [7, 4];
    case "long-dash-dot":
    case "esriSLSLongDashDot":
      return o10 ? [8, 3, 1, 3] : [7, 4, r19, 4];
    case "long-dash-dot-dot":
    case "esriSLSDashDotDot":
      return o10 ? [8, 3, 1, 3, 1, 3] : [7, 4, r19, 4, r19, 4];
    case "short-dash":
    case "esriSLSShortDash":
      return o10 ? [4, 1] : [3, 2];
    case "short-dash-dot":
    case "esriSLSShortDashDot":
      return o10 ? [4, 1, 1, 1] : [3, 2, r19, 2];
    case "short-dash-dot-dot":
    case "esriSLSShortDashDotDot":
      return o10 ? [4, 1, 1, 1, 1, 1] : [3, 2, r19, 2, r19, 2];
    case "short-dot":
    case "esriSLSShortDot":
      return o10 ? [1, 1] : [r19, 2];
    case "solid":
    case "esriSLSSolid":
    case "none":
      return W().error("Unexpected: style does not require rasterization"), [0, 0];
    default:
      return W().error(`Tried to rasterize SLS, but found an unexpected style: ${e18}!`), [0, 0];
  }
};
function ye(e18) {
  return void 0 !== e18.symbolLayers;
}
var he = (e18, t17 = 100) => {
  const r19 = t17 / 2;
  let o10, a13;
  const s18 = e18;
  if ("circle" === s18 || "esriSMSCircle" === s18) {
    const e19 = 0.25;
    let t18 = Math.acos(1 - e19 / r19), s19 = Math.ceil(N4 / t18 / 4);
    0 === s19 && (s19 = 1), t18 = Y2 / s19, s19 *= 4;
    const i19 = [];
    i19.push([r19, 0]);
    for (let o11 = 1; o11 < s19; o11++) i19.push([r19 * Math.cos(o11 * t18), -r19 * Math.sin(o11 * t18)]);
    i19.push([r19, 0]), o10 = { rings: [i19] }, a13 = { xmin: -r19, ymin: -r19, xmax: r19, ymax: r19 };
  } else if ("cross" === s18 || "esriSMSCross" === s18) {
    const e19 = 0;
    o10 = { paths: [[[e19, r19], [e19, -r19]], [[r19, e19], [-r19, e19]]] }, a13 = { xmin: -r19, ymin: -r19, xmax: r19, ymax: r19 };
  } else if ("diamond" === s18 || "esriSMSDiamond" === s18) o10 = { rings: [[[-r19, 0], [0, r19], [r19, 0], [0, -r19], [-r19, 0]]] }, a13 = { xmin: -r19, ymin: -r19, xmax: r19, ymax: r19 };
  else if ("square" === s18 || "esriSMSSquare" === s18) o10 = { rings: [[[-r19, -r19], [-r19, r19], [r19, r19], [r19, -r19], [-r19, -r19]]] }, a13 = { xmin: -r19, ymin: -r19, xmax: r19, ymax: r19 };
  else if ("x" === s18 || "esriSMSX" === s18) o10 = { paths: [[[r19, r19], [-r19, -r19]], [[r19, -r19], [-r19, r19]]] }, a13 = { xmin: -r19, ymin: -r19, xmax: r19, ymax: r19 };
  else if ("triangle" === s18 || "esriSMSTriangle" === s18) {
    const e19 = t17 * 0.5773502691896257, r20 = -e19, s19 = 2 / 3 * t17, i19 = s19 - t17;
    o10 = { rings: [[[r20, i19], [0, s19], [e19, i19], [r20, i19]]] }, a13 = { xmin: r20, ymin: i19, xmax: e19, ymax: s19 };
  } else "arrow" === s18 && (o10 = { rings: [[[-50, 50], [50, 0], [-50, -50], [-33, -20], [-33, 20], [-50, 50]]] }, a13 = { xmin: -r19, ymin: -r19, xmax: r19, ymax: r19 });
  return [a13, o10];
};
var ue = (e18) => "vertical" === e18 || "horizontal" === e18 || "cross" === e18 || "esriSFSCross" === e18 || "esriSFSVertical" === e18 || "esriSFSHorizontal" === e18;
function Me(e18, t17, r19) {
  if (!e18.effects || null != t17.geometryEngine) return;
  if (t17.geometryEnginePromise) return void r19.push(t17.geometryEnginePromise);
  S(e18.effects) && (t17.geometryEnginePromise = g(), r19.push(t17.geometryEnginePromise), t17.geometryEnginePromise.then((e19) => t17.geometryEngine = e19));
}
function pe(e18) {
  if (!e18) return null;
  let t17 = null;
  const { cap: r19, color: o10, join: a13, miterLimit: s18, style: i19, width: n20 } = e18;
  return "solid" !== i19 && "none" !== i19 && "esriSLSSolid" !== i19 && "esriSLSNull" !== i19 && (t17 = [{ type: "CIMGeometricEffectDashes", dashTemplate: fe(i19, r19), lineDashEnding: "NoConstraint", scaleDash: true, offsetAlongLine: null }]), { type: "CIMSolidStroke", color: "esriSLSNull" !== i19 && "none" !== i19 ? ne(o10) : [0, 0, 0, 0], capStyle: oe2(r19), joinStyle: ae(a13), miterLimit: s18, width: n20, effects: t17 };
}

export {
  a5 as a,
  s8 as s,
  i7 as i,
  c4 as c,
  l10 as l,
  l12 as l2,
  R2 as R,
  S3 as S,
  i18 as i2,
  t15 as t,
  t16 as t2,
  e17 as e,
  n18 as n,
  o8 as o,
  i15 as i3,
  s15 as s2,
  O,
  i17 as i4,
  m9 as m,
  ht,
  ft,
  ut,
  $,
  Z2 as Z,
  ee2 as ee,
  te2 as te,
  fe
};
//# sourceMappingURL=chunk-WKCCXG3E.js.map
