import {
  i as i2,
  o,
  r,
  s as s3
} from "./chunk-JD3UVEVP.js";
import {
  o as o2,
  r as r2
} from "./chunk-ROVRMLYN.js";
import {
  f as f2
} from "./chunk-SYPTUUSZ.js";
import {
  f,
  v
} from "./chunk-N3A2BVTW.js";
import {
  P
} from "./chunk-52HWRRRQ.js";
import {
  y
} from "./chunk-OGOQOMMV.js";
import {
  S,
  j
} from "./chunk-Q6XRAGMA.js";
import {
  c,
  d
} from "./chunk-OXSERRAR.js";
import {
  H
} from "./chunk-ZWFY3WY5.js";
import {
  I
} from "./chunk-LQFTAGIV.js";
import {
  i2 as i,
  s as s2
} from "./chunk-XWG6QGFK.js";
import {
  s
} from "./chunk-GWNLQRNM.js";

// node_modules/@arcgis/core/rest/geometryService/cut.js
async function i3(i4, n, p, m3) {
  const a = f2(i4), u = n[0].spatialReference, c2 = { ...m3, responseType: "json", query: { ...a.query, f: "json", sr: c(u), target: JSON.stringify({ geometryType: v(n[0]), geometries: n }), cutter: JSON.stringify(p) } }, f3 = await H(a.path + "/cut", c2), { cutIndexes: y3, geometries: g2 = [] } = f3.data;
  return { cutIndexes: y3, geometries: g2.map((e) => {
    const t = f(e);
    return t.spatialReference = u, t;
  }) };
}

// node_modules/@arcgis/core/rest/geometryService/simplify.js
async function m(m3, p, f3) {
  const n = "string" == typeof m3 ? I(m3) : m3, a = p[0].spatialReference, u = v(p[0]), l = { ...f3, query: { ...n.query, f: "json", sr: c(a), geometries: JSON.stringify(r2(p)) } }, { data: y3 } = await H(n.path + "/simplify", l);
  return o2(y3.geometries, u, a);
}

// node_modules/@arcgis/core/geometry/support/normalizeUtils.js
var m2 = () => i.getLogger("esri.geometry.support.normalizeUtils");
function g(t) {
  return "polygon" === t.type;
}
function y2(t) {
  return "polygon" === t[0].type;
}
function x(t) {
  return "polyline" === t[0].type;
}
function d2(t) {
  const e = [];
  let n = 0, o3 = 0;
  for (let s4 = 0; s4 < t.length; s4++) {
    const r3 = t[s4];
    let i4 = null;
    for (let t2 = 0; t2 < r3.length; t2++) i4 = r3[t2], e.push(i4), 0 === t2 ? (n = i4[0], o3 = n) : (n = Math.min(n, i4[0]), o3 = Math.max(o3, i4[0]));
    i4 && e.push([(n + o3) / 2, 0]);
  }
  return e;
}
function M(t, n) {
  if (!(t instanceof y || t instanceof P)) {
    const t2 = "straightLineDensify: the input geometry is neither polyline nor polygon";
    throw m2().error(t2), new s2("internal:geometry", t2);
  }
  const r3 = o(t), i4 = [];
  for (const e of r3) {
    const t2 = [];
    i4.push(t2), t2.push([e[0][0], e[0][1]]);
    for (let o3 = 0; o3 < e.length - 1; o3++) {
      const s4 = e[o3][0], r4 = e[o3][1], i5 = e[o3 + 1][0], l = e[o3 + 1][1], c2 = Math.sqrt((i5 - s4) * (i5 - s4) + (l - r4) * (l - r4)), f3 = (l - r4) / c2, u = (i5 - s4) / c2, p = c2 / n;
      if (p > 1) {
        for (let l2 = 1; l2 <= p - 1; l2++) {
          const e3 = l2 * n, o5 = u * e3 + s4, i7 = f3 * e3 + r4;
          t2.push([o5, i7]);
        }
        const e2 = (c2 + Math.floor(p - 1) * n) / 2, o4 = u * e2 + s4, i6 = f3 * e2 + r4;
        t2.push([o4, i6]);
      }
      t2.push([i5, l]);
    }
  }
  return g(t) ? new P({ rings: i4, spatialReference: t.spatialReference }) : new y({ paths: i4, spatialReference: t.spatialReference });
}
function w(t, e, n) {
  if (e) {
    const e2 = M(t, 1e6);
    t = S(e2, true);
  }
  return n && (t = s3(t, n)), t;
}
function b(t, e, n) {
  if (Array.isArray(t)) {
    const o3 = t[0];
    if (o3 > e) {
      const n2 = i2(o3, e);
      t[0] = o3 + n2 * (-2 * e);
    } else if (o3 < n) {
      const e2 = i2(o3, n);
      t[0] = o3 + e2 * (-2 * n);
    }
  } else {
    const o3 = t.x;
    if (o3 > e) {
      const n2 = i2(o3, e);
      t = t.clone().offset(n2 * (-2 * e), 0);
    } else if (o3 < n) {
      const e2 = i2(o3, n);
      t = t.clone().offset(e2 * (-2 * n), 0);
    }
  }
  return t;
}
function j2(t, e) {
  let n = -1;
  for (let o3 = 0; o3 < e.cutIndexes.length; o3++) {
    const s4 = e.cutIndexes[o3], r3 = e.geometries[o3], l = o(r3);
    for (let t2 = 0; t2 < l.length; t2++) {
      const e2 = l[t2];
      e2.some((n2) => {
        if (n2[0] < 180) return true;
        {
          let n3 = 0;
          for (let t3 = 0; t3 < e2.length; t3++) {
            const o5 = e2[t3][0];
            n3 = o5 > n3 ? o5 : n3;
          }
          n3 = Number(n3.toFixed(9));
          const o4 = -360 * i2(n3, 180);
          for (let s5 = 0; s5 < e2.length; s5++) {
            const e3 = r3.getPoint(t2, s5);
            r3.setPoint(t2, s5, e3.clone().offset(o4, 0));
          }
          return true;
        }
      });
    }
    if (s4 === n) {
      if (y2(t)) for (const e2 of o(r3)) t[s4] = t[s4].addRing(e2);
      else if (x(t)) for (const e2 of o(r3)) t[s4] = t[s4].addPath(e2);
    } else n = s4, t[s4] = r3;
  }
  return t;
}
async function R(e, n, c2) {
  if (!Array.isArray(e)) return R([e], n);
  n && "string" != typeof n && m2().warn("normalizeCentralMeridian()", "The url object is deprecated, use the url string instead");
  const p = "string" == typeof n ? n : n?.url ?? s.geometryServiceUrl;
  let g2, y3, x2, d3, M2, v3, P3, L2, U = 0;
  const z = [], A = [];
  for (const t of e) if (null != t) if (g2 || (g2 = t.spatialReference, y3 = d(g2), x2 = g2.isWebMercator, v3 = x2 ? 102100 : 4326, d3 = r[v3].maxX, M2 = r[v3].minX, P3 = r[v3].plus180Line, L2 = r[v3].minus180Line), y3) if ("mesh" === t.type) A.push(t);
  else if ("point" === t.type) A.push(b(t.clone(), d3, M2));
  else if ("multipoint" === t.type) {
    const e2 = t.clone();
    e2.points = e2.points.map((t2) => b(t2, d3, M2)), A.push(e2);
  } else if ("extent" === t.type) {
    const e2 = t.clone()._normalize(false, false, y3);
    A.push(e2.rings ? new P(e2) : e2);
  } else if (t.extent) {
    const e2 = t.extent, n2 = i2(e2.xmin, M2) * (2 * d3);
    let o3 = 0 === n2 ? t.clone() : s3(t.clone(), n2);
    e2.offset(n2, 0);
    let { xmin: s4, xmax: r3 } = e2;
    s4 = Number(s4.toFixed(9)), r3 = Number(r3.toFixed(9)), e2.intersects(P3) && r3 !== d3 ? (U = r3 > U ? r3 : U, o3 = w(o3, x2), z.push(o3), A.push("cut")) : e2.intersects(L2) && s4 !== M2 ? (U = r3 * (2 * d3) > U ? r3 * (2 * d3) : U, o3 = w(o3, x2, 360), z.push(o3), A.push("cut")) : A.push(o3);
  } else A.push(t.clone());
  else A.push(t);
  else A.push(t);
  let F = i2(U, d3), N = -90;
  const S2 = F, k = new y();
  for (; F > 0; ) {
    const t = 360 * F - 180;
    k.addPath([[t, N], [t, -1 * N]]), N *= -1, F--;
  }
  if (z.length > 0 && S2 > 0) {
    const t = j2(z, await i3(p, z, k, c2)), n2 = [], o3 = [];
    for (let i4 = 0; i4 < A.length; i4++) {
      const s5 = A[i4];
      if ("cut" !== s5) o3.push(s5);
      else {
        const s6 = t.shift(), r4 = e[i4];
        null != r4 && "polygon" === r4.type && r4.rings && r4.rings.length > 1 && s6.rings.length >= r4.rings.length ? (n2.push(s6), o3.push("simplify")) : o3.push(x2 ? j(s6) : s6);
      }
    }
    if (!n2.length) return o3;
    const s4 = await m(p, n2, c2), r3 = [];
    for (let e2 = 0; e2 < o3.length; e2++) {
      const t2 = o3[e2];
      "simplify" !== t2 ? r3.push(t2) : r3.push(x2 ? j(s4.shift()) : s4.shift());
    }
    return r3;
  }
  const C = [];
  for (let t = 0; t < A.length; t++) {
    const e2 = A[t];
    if ("cut" !== e2) C.push(e2);
    else {
      const t2 = z.shift();
      C.push(true === x2 ? j(t2) : t2);
    }
  }
  return C;
}
function v2(t) {
  if (!t) return null;
  const e = t.extent;
  if (!e) return null;
  const n = t.spatialReference && d(t.spatialReference);
  if (!n) return e;
  const [o3, s4] = n.valid, r3 = 2 * s4, { width: i4 } = e;
  let l, { xmin: c2, xmax: u } = e;
  if ([c2, u] = [u, c2], "extent" === t.type || 0 === i4 || i4 <= s4 || i4 > r3 || c2 < o3 || u > s4) return e;
  switch (t.type) {
    case "polygon":
      if (!(t.rings.length > 1)) return e;
      l = d2(t.rings);
      break;
    case "polyline":
      if (!(t.paths.length > 1)) return e;
      l = d2(t.paths);
      break;
    case "multipoint":
      l = t.points;
  }
  const p = e.clone();
  for (let f3 = 0; f3 < l.length; f3++) {
    let t2 = l[f3][0];
    t2 < 0 ? (t2 += s4, u = Math.max(t2, u)) : (t2 -= s4, c2 = Math.min(t2, c2));
  }
  return p.xmin = c2, p.xmax = u, p.width < i4 ? (p.xmin -= s4, p.xmax -= s4, p) : e;
}
function P2(t, e, n) {
  const o3 = d(n);
  if (null == o3) return t;
  const [s4, r3] = o3.valid, i4 = 2 * r3;
  let l = 0, c2 = 0;
  e > r3 ? l = Math.ceil(Math.abs(e - r3) / i4) : e < s4 && (l = -Math.ceil(Math.abs(e - s4) / i4)), t > r3 ? c2 = Math.ceil(Math.abs(t - r3) / i4) : t < s4 && (c2 = -Math.ceil(Math.abs(t - s4) / i4));
  let u = t + (l - c2) * i4;
  const p = u - e;
  return p > r3 ? u -= i4 : p < s4 && (u += i4), u;
}
function L(t, e) {
  const n = d(e);
  if (n) {
    const [e2, o3] = n.valid, s4 = o3 - e2;
    if (t < e2) for (; t < e2; ) t += s4;
    if (t > o3) for (; t > o3; ) t -= s4;
  }
  return t;
}

export {
  M,
  R,
  v2 as v,
  P2 as P,
  L
};
//# sourceMappingURL=chunk-X3UT6DT7.js.map
