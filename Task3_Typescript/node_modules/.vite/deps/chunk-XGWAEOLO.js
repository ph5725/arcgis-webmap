import {
  i
} from "./chunk-76QJRCNC.js";
import {
  s as s2
} from "./chunk-YL4WUSSA.js";
import {
  h
} from "./chunk-I6IIPG56.js";
import {
  Z
} from "./chunk-JEYXDNAT.js";
import {
  F,
  H,
  O,
  X,
  Y,
  a as a2,
  s
} from "./chunk-DJJNSAUR.js";
import {
  l
} from "./chunk-KE3WBZYL.js";
import {
  a
} from "./chunk-GWNLQRNM.js";

// node_modules/@arcgis/core/symbols/cim/OverrideHelper.js
var y = (e) => {
  if (!e) return [0, 0, 0, 0];
  const { r, g: i2, b: s3, a: t } = e;
  return [r, i2, s3, 255 * t];
};
var _v = class _v {
  static findApplicableOverrides(e, r, i2) {
    if (e && r) {
      if (e.primitiveName) {
        let s3 = false;
        for (const r2 of i2) if (r2.primitiveName === e.primitiveName) {
          s3 = true;
          break;
        }
        if (!s3) for (const t of r) t.primitiveName === e.primitiveName && i2.push(t);
      }
      switch (e.type) {
        case "CIMPointSymbol":
        case "CIMLineSymbol":
        case "CIMPolygonSymbol":
          if (e.effects) for (const s3 of e.effects) _v.findApplicableOverrides(s3, r, i2);
          if (e.symbolLayers) for (const s3 of e.symbolLayers) _v.findApplicableOverrides(s3, r, i2);
          break;
        case "CIMTextSymbol":
          break;
        case "CIMSolidStroke":
        case "CIMPictureStroke":
        case "CIMGradientStroke":
        case "CIMSolidFill":
        case "CIMPictureFill":
        case "CIMHatchFill":
        case "CIMGradientFill":
        case "CIMVectorMarker":
        case "CIMCharacterMarker":
        case "CIMPictureMarker":
          if (e.effects) for (const s3 of e.effects) _v.findApplicableOverrides(s3, r, i2);
          if (e.markerPlacement && _v.findApplicableOverrides(e.markerPlacement, r, i2), "CIMVectorMarker" === e.type) {
            if (e.markerGraphics) for (const s3 of e.markerGraphics) _v.findApplicableOverrides(s3, r, i2), _v.findApplicableOverrides(s3.symbol, r, i2);
          } else "CIMCharacterMarker" === e.type ? _v.findApplicableOverrides(e.symbol, r, i2) : "CIMHatchFill" === e.type ? _v.findApplicableOverrides(e.lineSymbol, r, i2) : "CIMPictureMarker" === e.type && _v.findApplicableOverrides(e.animatedSymbolProperties, r, i2);
      }
    }
  }
  static findEffectOverrides(e, r) {
    if (!e) return null;
    if ("CIMGeometricEffectDashes" === e.type && H(e), !r || !e.primitiveName) return { type: "cim-effect-param", effect: e, overrides: [] };
    const i2 = Y(e), s3 = e.primitiveName, t = [];
    for (const o of r) o.primitiveName === s3 && t.push(Y(o));
    return { type: "cim-effect-param", effect: i2, overrides: X(t) };
  }
  static async resolveSymbolOverrides(e, r, t, o, a3, c, n) {
    if (!e?.symbol) return null;
    let { symbol: p, primitiveOverrides: f } = e;
    const m = !!f;
    if (!m && !o) return p;
    p = a(p), f = a(f);
    let y2 = true;
    if (r || (r = { attributes: {} }, y2 = false), m) {
      if (y2 || (f = f.filter((e2) => !e2.valueExpressionInfo?.expression.includes("$feature"))), n || (f = f.filter((e2) => !e2.valueExpressionInfo?.expression.includes("$view"))), f.length > 0) {
        const e2 = F(r.attributes), i2 = { spatialReference: t, fields: e2, geometryType: a3 };
        await _v.createRenderExpressions(f, i2), _v.evaluateOverrides(f, r, a3 ?? "esriGeometryPoint", c, n, new Z(e2));
      }
      _v.applyOverrides(p, f);
    }
    return o && _v.applyDictionaryTextOverrides(p, r, o, null), p;
  }
  static async createRenderExpressions(e, r) {
    const i2 = [];
    for (const s3 of e) {
      const e2 = s3.valueExpressionInfo;
      if (!e2 || _v._expressionToRenderExpression.has(e2.expression)) continue;
      const o = h(e2.expression, r.spatialReference);
      i2.push(o), o.then((r2) => _v._expressionToRenderExpression.set(e2.expression, r2));
    }
    i2.length > 0 && await Promise.all(i2);
  }
  static evaluateOverrides(e, i2, s3, t, o, a3) {
    const c = { $view: { scale: o?.scale } };
    for (const l2 of e) {
      l2.value && "object" == typeof l2.value && i(l2.value) && ("Color" === l2.propertyName || "StrokeColor" === l2.propertyName) && (l2.value = y(l2.value));
      const e2 = l2.valueExpressionInfo;
      if (!e2) continue;
      const o2 = _v._expressionToRenderExpression.get(e2.expression);
      o2 && (l2.value = s2(o2, i2, c, s3, a3, t));
    }
  }
  static applyDictionaryTextOverrides(e, r, i2, s3, t = "Normal") {
    if (e?.type) switch (e.type) {
      case "CIMPointSymbol":
      case "CIMLineSymbol":
      case "CIMPolygonSymbol":
      case "CIMTextSymbol":
        {
          const o = e.symbolLayers;
          if (!o) return;
          for (const a3 of o) a3 && "CIMVectorMarker" === a3.type && _v.applyDictionaryTextOverrides(a3, r, i2, s3, "CIMTextSymbol" === e.type ? e.textCase : t);
        }
        break;
      case "CIMVectorMarker":
        {
          const t2 = e.markerGraphics;
          if (!t2) return;
          for (const e2 of t2) e2 && _v.applyDictionaryTextOverrides(e2, r, i2, s3);
        }
        break;
      case "CIMMarkerGraphic": {
        const o = e.textString;
        if (o && o.includes("[")) {
          const a3 = a2(o, i2);
          e.textString = s(r, a3, s3, t);
        }
      }
    }
  }
  static applyOverrides(e, r, i2, s3) {
    if (e.primitiveName) {
      for (const t of r) if (t.primitiveName === e.primitiveName) {
        const r2 = O(t.propertyName);
        if (s3 && s3.push({ cim: e, nocapPropertyName: r2, value: e[r2] }), i2) {
          let r3 = false;
          for (const s4 of i2) s4.primitiveName === e.primitiveName && (r3 = true);
          r3 || i2.push(t);
        }
        null != t.value && (e[r2] = t.value);
      }
    }
    switch (e.type) {
      case "CIMPointSymbol":
      case "CIMLineSymbol":
      case "CIMPolygonSymbol":
        if (e.effects) for (const t of e.effects) _v.applyOverrides(t, r, i2, s3);
        if (e.symbolLayers) for (const t of e.symbolLayers) _v.applyOverrides(t, r, i2, s3);
        break;
      case "CIMTextSymbol":
        break;
      case "CIMSolidStroke":
      case "CIMSolidFill":
      case "CIMVectorMarker":
        if (e.effects) for (const t of e.effects) _v.applyOverrides(t, r, i2, s3);
        if ("CIMVectorMarker" === e.type && e.markerGraphics) for (const t of e.markerGraphics) _v.applyOverrides(t, r, i2, s3), _v.applyOverrides(t.symbol, r, i2, s3);
    }
  }
  static restoreOverrides(e) {
    for (const r of e) r.cim[r.nocapPropertyName] = r.value;
  }
  static buildOverrideKey(e) {
    let r = "";
    for (const i2 of e) void 0 !== i2.value && (r += `${i2.primitiveName}${i2.propertyName}${JSON.stringify(i2.value)}`);
    return r;
  }
  static toValue(r, i2) {
    if ("DashTemplate" === r) return i2.split(" ").map((e) => Number(e));
    if ("Color" === r) {
      const r2 = new l(i2).toRgba();
      return r2[3] *= 255, r2;
    }
    return i2;
  }
};
_v._expressionToRenderExpression = /* @__PURE__ */ new Map();
var v = _v;

export {
  v
};
//# sourceMappingURL=chunk-XGWAEOLO.js.map
