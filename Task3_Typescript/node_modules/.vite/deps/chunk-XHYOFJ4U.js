import {
  b,
  i,
  s as s2
} from "./chunk-Y2ZIOB7Y.js";
import {
  L,
  e
} from "./chunk-GZ2P4SCJ.js";
import {
  s
} from "./chunk-XWG6QGFK.js";

// node_modules/@arcgis/core/intl/messages.js
var i2 = { ar: true, bg: true, bs: true, ca: true, cs: true, da: true, de: true, el: true, en: true, es: true, et: true, fi: true, fr: true, he: true, hr: true, hu: true, id: true, it: true, ja: true, ko: true, lt: true, lv: true, nb: "no", nl: true, no: true, nn: "no", pl: true, pt: "pt-BR", "pt-BR": true, "pt-PT": true, ro: true, ru: true, sk: true, sl: true, sr: true, sv: true, th: true, tr: true, uk: true, vi: true, zh: "zh-CN", "zh-CN": true, "zh-HK": true, "zh-TW": true };
function a(t) {
  return t in i2;
}
function c(t) {
  if (a(t)) {
    const n = i2[t];
    return true === n ? t : n;
  }
  return null;
}
var d = [];
var l = /* @__PURE__ */ new Map();
function h(t) {
  for (const n of l.keys()) _(t.pattern, n) && l.delete(n);
}
function u(t) {
  return d.includes(t) || (h(t), d.unshift(t)), e(() => {
    const n = d.indexOf(t);
    n > -1 && (d.splice(n, 1), h(t));
  });
}
async function f(t) {
  const n = i();
  l.has(t) || l.set(t, p(t, n));
  const e2 = l.get(t);
  return e2 && await g.add(e2), e2;
}
function m(t) {
  const n = s2(t);
  return n ? c(t) ?? c(n.language) : null;
}
async function p(n, e2) {
  const r = [];
  for (const t of d) if (_(t.pattern, n)) try {
    return await t.fetchMessageBundle(n, e2);
  } catch (s3) {
    r.push(s3);
  }
  if (r.length) throw new s("intl:message-bundle-error", `Errors occurred while loading "${n}"`, { errors: r });
  throw new s("intl:no-message-bundle-loader", `No loader found for message bundle "${n}"`);
}
function _(t, n) {
  return "string" == typeof t ? n.startsWith(t) : t.test(n);
}
b(() => {
  l.clear();
});
var g = new class {
  constructor() {
    this._numLoading = 0, this._dfd = null;
  }
  async waitForAll() {
    this._dfd && await this._dfd.promise;
  }
  add(t) {
    return this._increase(), t.then(() => this._decrease(), () => this._decrease()), this.waitForAll();
  }
  _increase() {
    this._numLoading++, this._dfd || (this._dfd = L());
  }
  _decrease() {
    this._numLoading = Math.max(this._numLoading - 1, 0), this._dfd && 0 === this._numLoading && (this._dfd.resolve(), this._dfd = null);
  }
}();

export {
  u,
  f,
  m
};
//# sourceMappingURL=chunk-XHYOFJ4U.js.map
