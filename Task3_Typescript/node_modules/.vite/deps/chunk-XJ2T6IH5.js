import {
  n4 as n,
  t as t2
} from "./chunk-GEY3MNEN.js";
import {
  e as e2
} from "./chunk-QARUBZM2.js";
import {
  E as E2,
  o as o2
} from "./chunk-733XT7D4.js";
import {
  $
} from "./chunk-TAPCW5Z5.js";
import {
  t
} from "./chunk-5WTH3GBK.js";
import {
  U2 as U,
  _ as _2,
  g
} from "./chunk-NXHGFG67.js";
import {
  e
} from "./chunk-IGBV77N3.js";
import {
  E
} from "./chunk-3PPDORWL.js";
import {
  S,
  a as a2
} from "./chunk-H6F6O2KE.js";
import {
  M,
  b as b3,
  f,
  h,
  i as i2,
  l as l2,
  o
} from "./chunk-DRAQJS2F.js";
import {
  A,
  C,
  D,
  M as M2,
  O,
  P,
  R,
  Y
} from "./chunk-BZYXFNL4.js";
import {
  r as r2
} from "./chunk-MPV4X4LZ.js";
import {
  d
} from "./chunk-2IMSGFJN.js";
import {
  u
} from "./chunk-MUKDJQWB.js";
import {
  l
} from "./chunk-A3VAC24F.js";
import {
  s as s2
} from "./chunk-FPSA4NFH.js";
import {
  z
} from "./chunk-O5TPFXRT.js";
import {
  _
} from "./chunk-Q6XRAGMA.js";
import {
  b as b2,
  m
} from "./chunk-N3XLUQJI.js";
import {
  a2 as a
} from "./chunk-JUAD7TJ6.js";
import {
  r
} from "./chunk-5TPMG26T.js";
import {
  b,
  s
} from "./chunk-GZ2P4SCJ.js";
import {
  i2 as i
} from "./chunk-XWG6QGFK.js";

// node_modules/@arcgis/core/views/2d/engine/flow/utils.js
function s3(t5) {
  const n3 = a3(u2(t5)), i4 = n3, o4 = true, s6 = Math.max(n3 / 2, 5), r4 = Math.round(u(t5.maxPathLength) / s6) + 1, l7 = 10, { density: c4 } = t5;
  return { smoothing: u(t5.smoothing), interpolate: true, velocityScale: "flow-from" === t5.flowRepresentation ? 1 : -1, verticesPerLine: r4, minSpeedThreshold: 1e-3, segmentLength: s6, maxTurnAngle: 1, collisions: o4, lineCollisionWidth: i4, lineSpacing: l7, density: c4 };
}
function a3(e4) {
  return "constant" === e4.kind ? e4.value[0] : e4.values[e4.values.length - 1];
}
function r3(e4) {
  const t5 = e4.toRgba();
  return [t5[0] / 255, t5[1] / 255, t5[2] / 255, t5[3]];
}
function l3(e4) {
  return { kind: "constant", value: [0.1, 0.1, 0.1, 1] };
}
function u2(t5) {
  if (!t5.hasVisualVariables("size")) return { kind: "constant", value: [u(t5.trailWidth)] };
  const n3 = t5.getVisualVariablesForType("size")[0], i4 = [], o4 = [];
  let s6;
  if (n3.stops) {
    for (const t6 of n3.stops) i4.push(t6.value), o4.push(u(t6.size));
    s6 = n3.stops.length;
  } else i4.push(n3.minDataValue, n3.maxDataValue), o4.push(u(n3.minSize), u(n3.maxSize)), s6 = 2;
  return { kind: "ramp", stops: i4, values: o4, count: s6 };
}
function c(e4) {
  if (!e4.hasVisualVariables("color")) return { kind: "constant", value: r3(e4.color) };
  const t5 = e4.getVisualVariablesForType("color")[0], n3 = [], i4 = [];
  for (const o4 of t5.stops) n3.push(o4.value), Array.prototype.push.apply(i4, r3(o4.color));
  return { kind: "ramp", stops: n3, values: i4, count: t5.stops.length };
}
function p(e4) {
  if (!e4.hasVisualVariables("opacity")) return { kind: "constant", value: [1] };
  const t5 = e4.getVisualVariablesForType("opacity")[0], n3 = [], i4 = [];
  for (const o4 of t5.stops) n3.push(o4.value), i4.push(o4.opacity);
  return { kind: "ramp", stops: n3, values: i4, count: t5.stops.length };
}
function m2(e4, t5, n3, i4) {
  switch (t5) {
    case "int":
      e4.setUniform1iv(n3, i4);
      break;
    case "float":
      e4.setUniform1fv(n3, i4);
      break;
    case "vec2":
      e4.setUniform2fv(n3, i4);
      break;
    case "vec3":
      e4.setUniform3fv(n3, i4);
      break;
    case "vec4":
      e4.setUniform4fv(n3, i4);
  }
}
function f2(e4, t5, n3, i4) {
  "constant" === i4.kind ? m2(e4, n3, `u_${t5}`, i4.value) : (m2(e4, "float", `u_${t5}_stops`, i4.stops), m2(e4, n3, `u_${t5}_values`, i4.values), e4.setUniform1i(`u_${t5}_count`, i4.count));
}
function h2(e4, t5) {
  let n3 = true;
  return n3 = n3 && e4.collisions === t5.collisions, n3 = n3 && e4.density === t5.density, n3 = n3 && e4.interpolate === t5.interpolate, n3 = n3 && e4.lineCollisionWidth === t5.lineCollisionWidth, n3 = n3 && e4.lineSpacing === t5.lineSpacing, n3 = n3 && e4.maxTurnAngle === t5.maxTurnAngle, n3 = n3 && e4.minSpeedThreshold === t5.minSpeedThreshold, n3 = n3 && e4.segmentLength === t5.segmentLength, n3 = n3 && e4.smoothing === t5.smoothing, n3 = n3 && e4.velocityScale === t5.velocityScale, n3 = n3 && e4.verticesPerLine === t5.verticesPerLine, n3;
}
function d2(e4, t5) {
  return e4 === t5 || null != e4 && null != t5 && e4.equals(t5);
}
function g2(e4, t5) {
  if (!h2(e4.simulationSettings, t5.simulationSettings)) return false;
  if (!d2(e4.timeExtent, t5.timeExtent)) return false;
  let n3 = true;
  return n3 = n3 && e4.loadImagery === t5.loadImagery, n3 = n3 && e4.createFlowMesh === t5.createFlowMesh, n3 = n3 && e4.color.kind === t5.color.kind, n3 = n3 && e4.opacity.kind === t5.opacity.kind, n3 = n3 && e4.size.kind === t5.size.kind, n3;
}

// node_modules/@arcgis/core/views/2d/engine/flow/styles/Imagery.js
var f3 = class _f {
  constructor(t5) {
    this._params = t5, this.animated = false;
  }
  isCompatible(t5) {
    if (!(t5 instanceof _f)) return false;
    if (!d2(this._params.timeExtent, t5._params.timeExtent)) return false;
    let e4 = true;
    return e4 = e4 && this._params.loadImagery === t5._params.loadImagery, e4 = e4 && this._params.color.kind === t5._params.color.kind, e4 = e4 && this._params.opacity.kind === t5._params.opacity.kind, e4;
  }
  async load(a4, e4) {
    const { extent: r4, size: s6 } = a4;
    s(e4);
    const o4 = await this._params.loadImagery(r4, s6[0], s6[1], this._params.timeExtent, e4);
    return new x(o4, { color: this._params.color, opacity: this._params.opacity });
  }
  render(t5, a4, r4) {
    const { context: i4 } = t5, { program: n3 } = r4;
    i4.setFaceCullingEnabled(false), i4.setBlendingEnabled(true), i4.setBlendFunction(A.ONE, A.ONE_MINUS_SRC_ALPHA), i4.useProgram(n3), n3.setUniformMatrix3fv("u_dvsMat3", a4.dvsMat3), i4.bindTexture(r4.texture, 0), n3.setUniform1i("u_texture", 0), n3.setUniform1f("u_Min", r4.min), n3.setUniform1f("u_Max", r4.max), f2(n3, "color", "vec4", this._params.color), f2(n3, "opacity", "float", this._params.opacity), i4.bindVAO(r4.vertexArray), i4.drawArrays(R.TRIANGLE_STRIP, 0, 4);
  }
};
var d3 = /* @__PURE__ */ new Map();
d3.set("a_position", 0), d3.set("a_texcoord", 1);
var w = /* @__PURE__ */ new Map([["geometry", [new t("a_position", 2, O.UNSIGNED_SHORT, 0, 8), new t("a_texcoord", 2, O.UNSIGNED_SHORT, 4, 8)]]]);
var u3 = { vsPath: "raster/flow/imagery", fsPath: "raster/flow/imagery", attributes: d3 };
var x = class {
  constructor(t5, a4) {
    this._flowData = t5, this._values = a4;
  }
  attach(t5) {
    const { context: a4 } = t5, { width: e4, height: s6 } = this._flowData, o4 = E2.createVertex(a4, Y.STATIC_DRAW, new Uint16Array([0, 0, 0, 1, e4, 0, 1, 1, 0, s6, 0, 0, e4, s6, 1, 0])), l7 = /* @__PURE__ */ new Map([["geometry", o4]]), _5 = new o2(a4, d3, w, l7), f8 = [];
    "ramp" === this._values.color.kind && f8.push("vvColor"), "ramp" === this._values.opacity.kind && f8.push("vvOpacity");
    const x2 = t5.getProgram(u3, f8);
    let y2 = 1e6, g4 = -1e6;
    for (let r4 = 0; r4 < s6; r4++) for (let t6 = 0; t6 < e4; t6++) if (0 !== this._flowData.mask[r4 * e4 + t6]) {
      const a5 = this._flowData.data[2 * (r4 * e4 + t6)], s7 = this._flowData.data[2 * (r4 * e4 + t6) + 1], o5 = Math.sqrt(a5 * a5 + s7 * s7);
      y2 = Math.min(y2, o5), g4 = Math.max(g4, o5);
    }
    const A2 = new Uint8Array(4 * e4 * s6);
    for (let r4 = 0; r4 < s6; r4++) for (let t6 = 0; t6 < e4; t6++) if (0 !== this._flowData.mask[r4 * e4 + t6]) {
      const a5 = this._flowData.data[2 * (r4 * e4 + t6)], s7 = this._flowData.data[2 * (r4 * e4 + t6) + 1], o5 = (Math.sqrt(a5 * a5 + s7 * s7) - y2) / (g4 - y2);
      A2[4 * (r4 * e4 + t6)] = 255 * o5, A2[4 * (r4 * e4 + t6) + 1] = 0, A2[4 * (r4 * e4 + t6) + 2] = 0, A2[4 * (r4 * e4 + t6) + 3] = 255;
    } else A2[4 * (r4 * e4 + t6)] = 0, A2[4 * (r4 * e4 + t6) + 1] = 0, A2[4 * (r4 * e4 + t6) + 2] = 0, A2[4 * (r4 * e4 + t6) + 3] = 0;
    const b4 = new a2();
    b4.internalFormat = M2.RGBA, b4.wrapMode = P.CLAMP_TO_EDGE, b4.flipped = true, b4.width = e4, b4.height = s6;
    const v = new S(a4, b4, A2);
    this.vertexArray = _5, this.program = x2, this.texture = v, this.min = y2, this.max = g4, this._flowData = null;
  }
  detach() {
    this.vertexArray.dispose(), this.texture.dispose();
  }
  get ready() {
    return this.program.compiled;
  }
};

// node_modules/@arcgis/core/views/2d/engine/flow/styles/Particles.js
var _3 = class __ {
  constructor(t5) {
    this._params = t5;
  }
  get animated() {
    return this._params.flowSpeed > 0;
  }
  isCompatible(t5) {
    return t5 instanceof __ && g2(this._params, t5._params);
  }
  async load(e4, a4) {
    const { extent: s6, size: r4 } = e4;
    s(a4);
    const i4 = await this._params.loadImagery(s6, r4[0], r4[1], this._params.timeExtent, a4), { vertexData: o4, indexData: n3 } = await this._params.createFlowMesh("Particles", this._params.simulationSettings, i4, a4);
    return new c2(o4, n3, { color: this._params.color, opacity: this._params.opacity, size: this._params.size });
  }
  render(t5, e4, s6) {
    const { context: n3 } = t5, { program: m5 } = s6;
    n3.setFaceCullingEnabled(false), n3.setBlendingEnabled(true), n3.setBlendFunction(A.ONE, A.ONE_MINUS_SRC_ALPHA), n3.useProgram(m5), m5.setUniform1f("u_time", e4.time), m5.setUniform1f("u_trailLength", this._params.trailLength), m5.setUniform1f("u_flowSpeed", this._params.flowSpeed), m5.setUniform1f("u_featheringSize", this._params.featheringSize), m5.setUniform1f("u_featheringOffset", this._params.featheringOffset), m5.setUniform1f("u_introFade", this._params.introFade ? 1 : 0), m5.setUniform1f("u_fadeToZero", this._params.fadeToZero ? 1 : 0), m5.setUniform1f("u_decayRate", this._params.decayRate), m5.setUniformMatrix3fv("u_dvsMat3", e4.dvsMat3), m5.setUniformMatrix3fv("u_displayViewMat3", e4.displayViewMat3), f2(m5, "color", "vec4", this._params.color), f2(m5, "opacity", "float", this._params.opacity), f2(m5, "size", "float", this._params.size), n3.bindVAO(s6.vertexArray), n3.drawElements(R.TRIANGLES, s6.indexCount, O.UNSIGNED_INT, 0);
  }
};
var h3 = /* @__PURE__ */ new Map();
h3.set("a_xyts0", 0), h3.set("a_xyts1", 1), h3.set("a_typeIdDurationSeed", 2), h3.set("a_extrudeInfo", 3);
var l4 = /* @__PURE__ */ new Map([["geometry", [new t("a_xyts0", 4, O.FLOAT, 0, 64), new t("a_xyts1", 4, O.FLOAT, 16, 64), new t("a_typeIdDurationSeed", 4, O.FLOAT, 32, 64), new t("a_extrudeInfo", 4, O.FLOAT, 48, 64)]]]);
var f4 = { vsPath: "raster/flow/particles", fsPath: "raster/flow/particles", attributes: h3 };
var c2 = class {
  constructor(t5, e4, a4) {
    this._vertexData = t5, this._indexData = e4, this._values = a4;
  }
  attach(t5) {
    const { context: e4 } = t5, a4 = E2.createVertex(e4, Y.STATIC_DRAW, this._vertexData), r4 = E2.createIndex(e4, Y.STATIC_DRAW, this._indexData), i4 = /* @__PURE__ */ new Map([["geometry", a4]]), o4 = new o2(e4, h3, l4, i4, r4), p3 = [];
    "ramp" === this._values.color.kind && p3.push("vvColor"), "ramp" === this._values.opacity.kind && p3.push("vvOpacity"), "ramp" === this._values.size.kind && p3.push("vvSize");
    const _5 = t5.getProgram(f4, p3);
    this.vertexArray = o4, this.program = _5, this.indexCount = this._indexData.length, this._vertexData = null, this._indexData = null;
  }
  detach() {
    this.vertexArray.dispose();
  }
  get ready() {
    return this.program.compiled;
  }
};

// node_modules/@arcgis/core/views/2d/engine/flow/styles/Stack.js
var t3 = class _t {
  constructor(t5) {
    this._styles = t5;
  }
  get animated() {
    return this._styles.reduce((t5, s6) => t5 || s6.animated, false);
  }
  isCompatible(s6) {
    if (!(s6 instanceof _t)) return false;
    if (this._styles.length !== s6._styles.length) return false;
    const e4 = this._styles.length;
    for (let t5 = 0; t5 < e4; t5++) if (!this._styles[t5].isCompatible(s6._styles[t5])) return false;
    return true;
  }
  async load(t5, e4) {
    const r4 = await Promise.all(this._styles.map((s6) => s6.load(t5, e4)));
    return new s4(r4);
  }
  render(t5, s6, e4) {
    for (let r4 = 0; r4 < this._styles.length; r4++) this._styles[r4].render(t5, s6, e4.resources[r4]);
  }
};
var s4 = class {
  constructor(t5) {
    this.resources = t5;
  }
  attach(t5) {
    for (const s6 of this.resources) s6.attach(t5);
  }
  detach() {
    for (const t5 of this.resources) t5.detach();
  }
  get ready() {
    return this.resources.reduce((t5, s6) => t5 && s6.ready, true);
  }
};

// node_modules/@arcgis/core/views/2d/engine/flow/styles/Streamlines.js
var _4 = class __ {
  constructor(e4) {
    this._params = e4;
  }
  get animated() {
    return this._params.flowSpeed > 0;
  }
  isCompatible(e4) {
    return e4 instanceof __ && g2(this._params, e4._params);
  }
  async load(t5, a4) {
    const { extent: s6, size: r4 } = t5;
    s(a4);
    const i4 = await this._params.loadImagery(s6, r4[0], r4[1], this._params.timeExtent, a4), { vertexData: o4, indexData: n3 } = await this._params.createFlowMesh("Streamlines", this._params.simulationSettings, i4, a4);
    return new d4(o4, n3, { color: this._params.color, opacity: this._params.opacity, size: this._params.size });
  }
  render(e4, t5, s6) {
    const { context: n3 } = e4, { program: m5 } = s6;
    n3.setFaceCullingEnabled(false), n3.setBlendingEnabled(true), n3.setBlendFunction(A.ONE, A.ONE_MINUS_SRC_ALPHA), n3.useProgram(m5), m5.setUniform1f("u_time", t5.time), m5.setUniform1f("u_trailLength", this._params.trailLength), m5.setUniform1f("u_flowSpeed", this._params.flowSpeed), m5.setUniform1f("u_featheringSize", this._params.featheringSize), m5.setUniform1f("u_featheringOffset", this._params.featheringOffset), m5.setUniform1f("u_introFade", this._params.introFade ? 1 : 0), m5.setUniform1f("u_fadeToZero", this._params.fadeToZero ? 1 : 0), m5.setUniform1f("u_decayRate", this._params.decayRate), m5.setUniformMatrix3fv("u_dvsMat3", t5.dvsMat3), m5.setUniformMatrix3fv("u_displayViewMat3", t5.displayViewMat3), f2(m5, "color", "vec4", this._params.color), f2(m5, "opacity", "float", this._params.opacity), f2(m5, "size", "float", this._params.size), n3.bindVAO(s6.vertexArray), n3.drawElements(R.TRIANGLES, s6.indexCount, O.UNSIGNED_INT, 0);
  }
};
var l5 = /* @__PURE__ */ new Map();
l5.set("a_positionAndSide", 0), l5.set("a_timeInfo", 1), l5.set("a_extrude", 2), l5.set("a_speed", 3);
var h4 = /* @__PURE__ */ new Map([["geometry", [new t("a_positionAndSide", 3, O.FLOAT, 0, 36), new t("a_timeInfo", 3, O.FLOAT, 12, 36), new t("a_extrude", 2, O.FLOAT, 24, 36), new t("a_speed", 1, O.FLOAT, 32, 36)]]]);
var f5 = { vsPath: "raster/flow/streamlines", fsPath: "raster/flow/streamlines", attributes: l5 };
var d4 = class {
  constructor(e4, t5, a4) {
    this._vertexData = e4, this._indexData = t5, this._values = a4;
  }
  attach(e4) {
    const { context: t5 } = e4, a4 = E2.createVertex(t5, Y.STATIC_DRAW, this._vertexData), r4 = E2.createIndex(t5, Y.STATIC_DRAW, this._indexData), i4 = /* @__PURE__ */ new Map([["geometry", a4]]), o4 = new o2(t5, l5, h4, i4, r4), p3 = [];
    "ramp" === this._values.color.kind && p3.push("vvColor"), "ramp" === this._values.opacity.kind && p3.push("vvOpacity"), "ramp" === this._values.size.kind && p3.push("vvSize");
    const _5 = e4.getProgram(f5, p3);
    this.vertexArray = o4, this.program = _5, this.indexCount = this._indexData.length, this._vertexData = null, this._indexData = null;
  }
  detach() {
    this.vertexArray.dispose();
  }
  get ready() {
    return this.program.compiled;
  }
};

// node_modules/@arcgis/core/views/2d/engine/flow/createFlowStyle.js
var m3 = 4;
var u4 = 1;
var f6 = 0.5;
var p2 = true;
var d5 = true;
var y = 2.3;
function g3(g4, w2) {
  const { flowSpeed: h7, trailLength: v } = g4, S2 = s3(g4);
  let j = null;
  const k = { opacity: p(g4), size: u2(g4) };
  let x2 = c(g4);
  if ("none" === g4.background) k.color = x2;
  else {
    "constant" === x2.kind && (x2 = { kind: "ramp", stops: [0, 1], values: [0, 0, 0, 1, x2.value[0], x2.value[1], x2.value[2], x2.value[3]], count: 2 });
    const e4 = { loadImagery: w2.loadImagery, timeExtent: w2.timeExtent, color: x2, opacity: { kind: "constant", value: [1] } };
    j = new f3(e4), k.color = l3();
  }
  const I = { loadImagery: w2.loadImagery, createFlowMesh: w2.createFlowMesh, simulationSettings: S2, timeExtent: w2.timeExtent, trailLength: v, flowSpeed: h7, featheringSize: u4, featheringOffset: f6, introFade: p2, fadeToZero: d5, decayRate: y, color: k.color, opacity: k.opacity, size: k.size }, z2 = "butt" === g4.trailCap || a3(u2(g4)) <= m3 ? new _4(I) : new _3(I);
  return null != j ? new t3([j, z2]) : z2;
}

// node_modules/@arcgis/core/views/2d/engine/flow/BrushFlow.js
var s5 = class extends t2 {
  constructor() {
    super(...arguments), this._visualState = { time: 0, dvsMat3: e(), displayViewMat3: e() };
  }
  dispose() {
  }
  prepareState(t5) {
    const { context: e4 } = t5;
    e4.setColorMask(true, true, true, true), e4.setStencilFunction(C.EQUAL, 0, 255);
  }
  draw(t5, e4) {
    const { requestRender: a4, allowDelayedRender: s6 } = t5, { displayData: r4 } = e4;
    if (null == r4) return;
    if ("loaded" === r4.state.name && r4.attach({ context: t5.context, getProgram: (e5, a5) => t5.painter.materialManager.getProgram(e5, a5) }), "attached" !== r4.state.name) return;
    const i4 = r4.state.resources;
    !s6 || i4.ready || null == a4 ? (this._visualState.time = t5.time / 1e3, this._visualState.dvsMat3 = e4.transforms.displayViewScreenMat3, this._visualState.displayViewMat3 = t5.state.displayViewMat3, r4.flowStyle.render({ context: t5.context, getProgram: (e5, a5) => t5.painter.materialManager.getProgram(e5, a5) }, this._visualState, i4), r4.flowStyle.animated && null != a4 && a4()) : a4();
  }
};

// node_modules/@arcgis/core/views/2d/engine/flow/FlowContainer.js
var t4 = class extends n {
  constructor() {
    super(...arguments), this.flowStyle = null;
  }
  doRender(e4) {
    super.doRender(e4);
  }
  prepareRenderPasses(s6) {
    const t5 = s6.registerRenderPass({ name: "flow", brushes: [s5], target: () => this.children, drawPhase: E.MAP });
    return [...super.prepareRenderPasses(s6), t5];
  }
};

// node_modules/@arcgis/core/views/2d/engine/flow/FlowDisplayData.js
var e3 = class {
  constructor(t5, e4, s6, a4) {
    this.state = { name: "created" }, this.flowStyle = t5, this.extent = e4, this.size = s6, this.pixelRatio = a4;
  }
  async load() {
    const t5 = new AbortController();
    this.state = { name: "loading", abortController: t5 };
    const e4 = { extent: this.extent, size: this.size, pixelRatio: this.pixelRatio }, s6 = await this.flowStyle.load(e4, t5.signal);
    this.state = { name: "loaded", resources: s6 };
  }
  attach(e4) {
    if ("loaded" !== this.state.name) return void i.getLogger("esri.views.2d.engine.flow.FlowDisplayData").error("Only loaded resources can be attached.");
    const s6 = this.state.resources;
    s6.attach(e4), this.state = { name: "attached", resources: s6 };
  }
  detach() {
    if ("loading" === this.state.name) return this.state.abortController.abort(), void (this.state = { name: "detached" });
    "attached" === this.state.name && (this.state.resources.detach(), this.state = { name: "detached" });
  }
  update(t5) {
    if (!this.flowStyle.isCompatible(t5.flowStyle)) return false;
    return !(!this.extent.equals(t5.extent) || this.size[0] !== t5.size[0] || this.size[1] !== t5.size[1] || this.pixelRatio !== t5.pixelRatio) && (this.flowStyle = t5.flowStyle, true);
  }
};

// node_modules/@arcgis/core/views/2d/engine/flow/FlowDisplayObject.js
var o3 = class extends e2 {
  constructor() {
    super(...arguments), this._displayData = null;
  }
  get displayData() {
    return this._displayData;
  }
  set displayData(t5) {
    this._displayData = t5, this.requestRender();
  }
  clear() {
    null != this._displayData && (this._displayData.detach(), this._displayData = null, this.requestRender());
  }
  setTransform(r4) {
    const { displayData: l7 } = this;
    if (null == l7) return;
    const o4 = l7.extent.xmin, n3 = l7.extent.ymax, p3 = [0, 0];
    r4.toScreen(p3, [o4, n3]);
    const m5 = (l7.extent.xmax - l7.extent.xmin) / l7.size[0] / r4.resolution, c4 = s2(r4.rotation), { displayViewScreenMat3: x2 } = this.transforms;
    l2(x2, [-1, 1, 0]), f(x2, x2, [2 / (r4.size[0] * r4.pixelRatio), -2 / (r4.size[1] * r4.pixelRatio), 1]), M(x2, x2, [p3[0], p3[1], 0]), h(x2, x2, c4), f(x2, x2, [m5 * r4.pixelRatio, m5 * r4.pixelRatio, 1]);
  }
  _createTransforms() {
    return { displayViewScreenMat3: e() };
  }
};

// node_modules/@arcgis/core/views/2d/engine/flow/FlowStrategy.js
var m4 = 1.15;
var d6 = class extends b2 {
  constructor(t5) {
    super(t5), this._flowDisplayObject = new o3(), this._loading = null;
  }
  initialize() {
    this.flowContainer.addChild(this._flowDisplayObject);
  }
  destroy() {
    this._clear(), this.flowContainer.removeAllChildren();
  }
  get updating() {
    return null != this._loading;
  }
  update(t5) {
    const { flowStyle: o4 } = this.flowContainer;
    if (null == o4) return void this._clear();
    const { extent: e4, rotation: s6, resolution: l7, pixelRatio: r4 } = t5.state, n3 = h5(e4, s6);
    n3.expand(m4);
    const c4 = [Math.round((n3.xmax - n3.xmin) / l7), Math.round((n3.ymax - n3.ymin) / l7)], d8 = new e3(o4, n3, c4, r4);
    if (null != this._loading) {
      if (this._loading.update(d8)) return;
      this._loading.detach(), this._loading = null;
    }
    null != this._flowDisplayObject.displayData && this._flowDisplayObject.displayData.update(d8) || (d8.load().then(() => {
      this._flowDisplayObject.clear(), this._flowDisplayObject.displayData = this._loading, this._loading = null;
    }, (t6) => {
      b(t6) || (i.getLogger(this).error("A resource failed to load.", t6), this._loading = null);
    }), this._loading = d8);
  }
  _clear() {
    this._flowDisplayObject.clear(), null != this._loading && (this._loading.detach(), this._loading = null);
  }
};
function h5(t5, o4) {
  const i4 = new _({ x: (t5.xmax + t5.xmin) / 2, y: (t5.ymax + t5.ymin) / 2, spatialReference: t5.spatialReference }), a4 = t5.xmax - t5.xmin, s6 = t5.ymax - t5.ymin, l7 = Math.abs(Math.cos(s2(o4))), p3 = Math.abs(Math.sin(s2(o4))), c4 = l7 * a4 + p3 * s6, m5 = p3 * a4 + l7 * s6, d8 = new z({ xmin: i4.x - c4 / 2, ymin: i4.y - m5 / 2, xmax: i4.x + c4 / 2, ymax: i4.y + m5 / 2, spatialReference: t5.spatialReference });
  return d8.centerAt(i4), d8;
}
r([m()], d6.prototype, "_loading", void 0), r([m()], d6.prototype, "flowContainer", void 0), r([m()], d6.prototype, "updating", null), d6 = r([a("esri.views.2d.engine.flow.FlowStrategy")], d6);

// node_modules/@arcgis/core/views/2d/engine/flow/FlowView2D.js
var h6 = class extends b2 {
  constructor() {
    super(...arguments), this._loadImagery = (t5, e4, i4, o4, r4) => g(this.layer, t5, e4, i4, o4, r4), this._createFlowMesh = (t5, e4, i4, o4) => this.layer.createFlowMesh({ meshType: t5, flowData: i4, simulationSettings: e4 }, { signal: o4 }), this.attached = false, this.type = "flow", this.timeExtent = null, this.redrawOrRefetch = async () => {
      this._updateVisualization();
    };
  }
  get updating() {
    return !this.attached || this._strategy.updating;
  }
  attach() {
    const { layer: t5 } = this, e4 = () => {
      this._loadImagery = (e5, i4, o4, r4, s6) => g(t5, e5, i4, o4, r4, s6), this._updateVisualization();
    };
    "multidimensionalDefinition" in t5 ? this.addHandles(l(() => t5.multidimensionalDefinition, e4)) : this.addHandles([l(() => t5.mosaicRule, e4), l(() => t5.rasterFunction, e4), l(() => t5.definitionExpression, e4)]), this.container = new t4(), this._strategy = new d6({ flowContainer: this.container }), this._updateVisualization();
  }
  detach() {
    this._strategy.destroy(), this.container?.removeAllChildren(), this.container = null, this.removeHandles();
  }
  update(t5) {
    t5.stationary ? this._strategy.update(t5) : this.layerView.requestUpdate();
  }
  hitTest(t5) {
    return new d({ attributes: {}, geometry: t5.clone(), layer: this.layer });
  }
  moveEnd() {
  }
  async doRefresh() {
  }
  _updateVisualization() {
    const t5 = this.layer.renderer;
    if (null == t5 || "flow" !== t5.type) return;
    const e4 = g3(t5, { loadImagery: this._loadImagery, createFlowMesh: this._createFlowMesh, timeExtent: this.timeExtent });
    this.container.flowStyle = e4, this.layerView.requestUpdate();
  }
};
r([m()], h6.prototype, "_strategy", void 0), r([m()], h6.prototype, "attached", void 0), r([m()], h6.prototype, "container", void 0), r([m()], h6.prototype, "layer", void 0), r([m()], h6.prototype, "layerView", void 0), r([m()], h6.prototype, "type", void 0), r([m()], h6.prototype, "updating", null), r([m()], h6.prototype, "timeExtent", void 0), h6 = r([a("esri.views.2d.engine.flow.FlowView2D")], h6);

// node_modules/@arcgis/core/views/2d/engine/imagery/BrushVectorField.js
var n2 = new Float32Array([0.27058823529411763, 0.4588235294117647, 0.7098039215686275, 1, 0.396078431372549, 0.5372549019607843, 0.7215686274509804, 1, 0.5176470588235295, 0.6196078431372549, 0.7294117647058823, 1, 0.6352941176470588, 0.7058823529411765, 0.7411764705882353, 1, 0.7529411764705882, 0.8, 0.7450980392156863, 1, 0.8705882352941177, 0.8901960784313725, 0.7490196078431373, 1, 1, 1, 0.7490196078431373, 1, 1, 0.8627450980392157, 0.6313725490196078, 1, 0.9803921568627451, 0.7254901960784313, 0.5176470588235295, 1, 0.9607843137254902, 0.596078431372549, 0.4117647058823529, 1, 0.9294117647058824, 0.4588235294117647, 0.3176470588235294, 1, 0.9098039215686274, 0.08235294117647059, 0.08235294117647059, 1]);
var i3 = new Float32Array([0, 92 / 255, 230 / 255, 1]);
var l6 = { beaufort_ft: n2, beaufort_m: n2, beaufort_km: n2, beaufort_mi: n2, beaufort_kn: new Float32Array([0.1568627450980392, 0.5725490196078431, 0.7803921568627451, 1, 0.34901960784313724, 0.6352941176470588, 0.7294117647058823, 1, 0.5058823529411764, 0.7019607843137254, 0.6705882352941176, 1, 0.6274509803921569, 0.7607843137254902, 0.6078431372549019, 1, 0.7490196078431373, 0.8313725490196079, 0.5411764705882353, 1, 0.8549019607843137, 0.9019607843137255, 0.4666666666666667, 1, 0.9803921568627451, 0.9803921568627451, 0.39215686274509803, 1, 0.9882352941176471, 0.8352941176470589, 0.3254901960784314, 1, 0.9882352941176471, 0.7019607843137254, 0.4, 1, 0.9803921568627451, 0.5529411764705883, 0.20392156862745098, 1, 0.9686274509803922, 0.43137254901960786, 0.16470588235294117, 1, 0.9411764705882353, 0.2784313725490196, 0.11372549019607843, 1]), classified_arrow: new Float32Array([0.2196078431372549, 0.6588235294117647, 0, 1, 0.5450980392156862, 1.2117647058823529, 0, 1, 1, 1, 0, 1, 1, 0.5019607843137255, 0, 1, 1, 0, 0, 1]), ocean_current_m: new Float32Array([0.3058823529411765, 0.10196078431372549, 0.6, 1, 0.7019607843137254, 0.10588235294117647, 0.10196078431372549, 1, 0.792156862745098, 0.5019607843137255, 0.10196078431372549, 1, 0.6941176470588235, 0.6941176470588235, 0.6941176470588235, 1]), ocean_current_kn: new Float32Array([0, 0, 0, 1, 0, 0.1450980392156863, 0.39215686274509803, 1, 0.3058823529411765, 0.10196078431372549, 0.6, 1, 0.592156862745098, 0, 0.39215686274509803, 1, 0.7019607843137254, 0.10588235294117647, 0.10196078431372549, 1, 0.6941176470588235, 0.3058823529411765, 0.10196078431372549, 1, 0.792156862745098, 0.5019607843137255, 0.10196078431372549, 1, 0.6941176470588235, 0.7019607843137254, 0.20392156862745098, 1, 0.6941176470588235, 0.6941176470588235, 0.6941176470588235, 1]), simple_scalar: i3, single_arrow: i3, wind_speed: new Float32Array([0, 0, 0, 1]) };
var c3 = [0, 20];
var d7 = class extends t2 {
  constructor() {
    super(...arguments), this._desc = { magdir: { vsPath: "raster/magdir", fsPath: "raster/magdir", attributes: /* @__PURE__ */ new Map([["a_pos", 0], ["a_offset", 1], ["a_vv", 2]]) }, scalar: { vsPath: "raster/scalar", fsPath: "raster/scalar", attributes: /* @__PURE__ */ new Map([["a_pos", 0], ["a_offset", 1], ["a_vv", 2]]) } };
  }
  dispose() {
  }
  prepareState({ context: e4 }) {
    e4.setBlendingEnabled(true), e4.setBlendFunctionSeparate(A.ONE, A.ONE_MINUS_SRC_ALPHA, A.ONE, A.ONE_MINUS_SRC_ALPHA), e4.setColorMask(true, true, true, true), e4.setStencilWriteMask(0), e4.setStencilTestEnabled(true), e4.setStencilOp(D.KEEP, D.KEEP, D.REPLACE);
  }
  draw(e4, a4) {
    if (null == a4.source || 0 === a4.source.validPixelCount) return;
    const { context: t5, timeline: s6 } = e4;
    if (s6.begin(this.name), t5.setStencilFunction(C.EQUAL, a4.stencilRef, 255), a4.updateVectorFieldVAO(e4), "scalar" === e4.renderPass) {
      const t6 = a4.vaoData.scalar;
      t6 && this._drawScalars(e4, a4, t6.vao, t6.elementCount);
    } else {
      const t6 = a4.vaoData.magdir;
      t6 && this._drawTriangles(e4, a4, t6.vao, t6.elementCount);
    }
    s6.end(this.name);
  }
  _drawTriangles(e4, a4, t5, r4) {
    const { context: n3, painter: i4, requestRender: d8, allowDelayedRender: m5 } = e4, { symbolizerParameters: u5 } = a4, f8 = u5.dataRange ? ["dataRange"] : [];
    "geographic" === u5.rotationType && f8.push("rotationGeographic");
    const _5 = i4.materialManager.getProgram(this._desc.magdir, f8);
    if (m5 && null != d8 && !_5.compiled) return void d8();
    n3.useProgram(_5);
    const { coordScale: g4, opacity: p3, transforms: y2 } = a4;
    _5.setUniform2fv("u_coordScale", g4), _5.setUniform1f("u_opacity", p3), _5.setUniformMatrix3fv("u_dvsMat3", y2.displayViewScreenMat3);
    const { style: S2, dataRange: b4, rotation: h7, symbolPercentRange: v } = u5;
    _5.setUniform4fv("u_colors", l6[S2]), _5.setUniform2fv("u_dataRange", b4 || c3), _5.setUniform1f("u_rotation", h7), _5.setUniform2fv("u_symbolPercentRange", v);
    const w2 = this._getSymbolSize(e4, a4);
    _5.setUniform2fv("u_symbolSize", w2), n3.bindVAO(t5), n3.drawElements(R.TRIANGLES, r4, O.UNSIGNED_INT, 0);
  }
  _drawScalars(e4, a4, t5, r4) {
    const { context: n3, painter: i4, requestRender: l7, allowDelayedRender: d8 } = e4, { symbolizerParameters: m5 } = a4, u5 = [];
    "wind_speed" === m5.style ? u5.push("innerCircle") : m5.dataRange && u5.push("dataRange"), "geographic" === m5.rotationType && u5.push("rotationGeographic");
    const f8 = i4.materialManager.getProgram(this._desc.scalar, u5);
    if (d8 && null != l7 && !f8.compiled) return void l7();
    n3.useProgram(f8);
    const { coordScale: _5, opacity: g4, transforms: p3 } = a4;
    f8.setUniform2fv("u_coordScale", _5), f8.setUniform1f("u_opacity", g4), f8.setUniformMatrix3fv("u_dvsMat3", p3.displayViewScreenMat3);
    const { dataRange: y2, symbolPercentRange: S2 } = m5;
    f8.setUniform2fv("u_dataRange", y2 || c3), f8.setUniform2fv("u_symbolPercentRange", S2);
    const b4 = this._getSymbolSize(e4, a4);
    f8.setUniform2fv("u_symbolSize", b4), n3.bindVAO(t5), n3.drawElements(R.TRIANGLES, r4, O.UNSIGNED_INT, 0);
  }
  _getSymbolSize(e4, a4) {
    const t5 = a4.key ? 2 ** (e4.displayLevel - a4.key.level) : a4.resolution / e4.state.resolution, { symbolTileSize: r4 } = a4.symbolizerParameters;
    return [r4 / (Math.round((a4.width - a4.offset[0]) / r4) * r4) / t5, r4 / (Math.round((a4.height - a4.offset[1]) / r4) * r4) / t5];
  }
};

// node_modules/@arcgis/core/views/2d/engine/imagery/RasterVFDisplayObject.js
var f7 = class extends e2 {
  constructor(t5 = null) {
    super(), this._source = null, this._symbolizerParameters = null, this._vaoInvalidated = true, this.coordScale = [1, 1], this.height = null, this.key = null, this.offset = null, this.stencilRef = 0, this.resolution = null, this.pixelRatio = 1, this.x = 0, this.y = 0, this.rotation = 0, this.rawPixelData = null, this.vaoData = null, this.width = null, this.source = t5;
  }
  destroy() {
    null != this.vaoData && (this.vaoData.magdir?.vao.dispose(), this.vaoData.scalar?.vao.dispose(), this.vaoData = null);
  }
  get symbolizerParameters() {
    return this._symbolizerParameters;
  }
  set symbolizerParameters(t5) {
    JSON.stringify(this._symbolizerParameters) !== JSON.stringify(t5) && (this._symbolizerParameters = t5, this.invalidateVAO());
  }
  get source() {
    return this._source;
  }
  set source(t5) {
    this._source = t5, this.invalidateVAO();
  }
  invalidateVAO() {
    this._vaoInvalidated || null == this.vaoData || (this.vaoData.magdir?.vao.dispose(), this.vaoData.scalar?.vao.dispose(), this.vaoData = null, this._vaoInvalidated = true, this.requestRender());
  }
  updateVectorFieldVAO(t5) {
    if (this._vaoInvalidated) {
      if (this._vaoInvalidated = false, null != this.source && null == this.vaoData) {
        const { style: e4 } = this.symbolizerParameters;
        switch (e4) {
          case "beaufort_ft":
          case "beaufort_km":
          case "beaufort_kn":
          case "beaufort_m":
          case "beaufort_mi":
          case "classified_arrow":
          case "ocean_current_kn":
          case "ocean_current_m":
          case "single_arrow":
            {
              const e5 = U(this.source, this.symbolizerParameters), a4 = this._createVectorFieldVAO(t5.context, e5);
              this.vaoData = { magdir: a4 };
            }
            break;
          case "simple_scalar":
            {
              const e5 = _2(this.source, this.symbolizerParameters), a4 = this._createVectorFieldVAO(t5.context, e5);
              this.vaoData = { scalar: a4 };
            }
            break;
          case "wind_speed": {
            const e5 = U(this.source, this.symbolizerParameters), a4 = this._createVectorFieldVAO(t5.context, e5), s6 = _2(this.source, this.symbolizerParameters), i4 = this._createVectorFieldVAO(t5.context, s6);
            this.vaoData = { magdir: a4, scalar: i4 };
          }
        }
      }
      this.ready(), this.requestRender();
    }
  }
  _createTransforms() {
    return { displayViewScreenMat3: e() };
  }
  setTransform(r4) {
    const l7 = o(this.transforms.displayViewScreenMat3), [n3, c4] = r4.toScreenNoRotation([0, 0], [this.x, this.y]), h7 = this.resolution / this.pixelRatio / r4.resolution, m5 = h7 * this.width, u5 = h7 * this.height, d8 = Math.PI * this.rotation / 180;
    M(l7, l7, r2(n3, c4)), M(l7, l7, r2(m5 / 2, u5 / 2)), h(l7, l7, -d8), M(l7, l7, r2(-m5 / 2, -u5 / 2)), b3(l7, l7, r2(m5, u5)), i2(this.transforms.displayViewScreenMat3, r4.displayViewMat3, l7);
  }
  onAttach() {
    this.invalidateVAO();
  }
  onDetach() {
    this.invalidateVAO();
  }
  _createVectorFieldVAO(t5, e4) {
    const { vertexData: a4, indexData: s6 } = e4, i4 = E2.createVertex(t5, Y.STATIC_DRAW, new Float32Array(a4)), r4 = E2.createIndex(t5, Y.STATIC_DRAW, new Uint32Array(s6)), o4 = $("vector-field", { geometry: [{ location: 0, name: "a_pos", count: 2, type: O.FLOAT, normalized: false }, { location: 1, name: "a_offset", count: 2, type: O.FLOAT, normalized: false }, { location: 2, name: "a_vv", count: 2, type: O.FLOAT, normalized: false }] });
    return { vao: new o2(t5, o4.attributes, o4.bufferLayouts, /* @__PURE__ */ new Map([["geometry", i4]]), r4), elementCount: s6.length };
  }
};

export {
  h6 as h,
  d7 as d,
  f7 as f
};
//# sourceMappingURL=chunk-XJ2T6IH5.js.map
