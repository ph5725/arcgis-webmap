import {
  o as o2
} from "./chunk-4PEDH45I.js";
import {
  t
} from "./chunk-JSKJKRHP.js";
import {
  J,
  ks
} from "./chunk-MI6QXJMY.js";
import {
  n as n4
} from "./chunk-3MVOHROR.js";
import {
  V,
  ft
} from "./chunk-BGR5EVZD.js";
import {
  q2 as q
} from "./chunk-RTDWTAVK.js";
import {
  c,
  u as u2
} from "./chunk-QLJ6JQFC.js";
import {
  i
} from "./chunk-TNKA4BMD.js";
import {
  a
} from "./chunk-VKKELZ6R.js";
import {
  o,
  s as s2
} from "./chunk-TMFB3DKM.js";
import {
  l
} from "./chunk-H7XUEHGR.js";
import {
  n as n3,
  r
} from "./chunk-DNZK6PPI.js";
import {
  n as n2
} from "./chunk-RACDQ3AL.js";
import {
  n
} from "./chunk-7Z3AF3B2.js";
import {
  u
} from "./chunk-6GWORUT3.js";
import {
  M
} from "./chunk-FPSA4NFH.js";
import {
  Z,
  s2 as s,
  se
} from "./chunk-OXSERRAR.js";

// node_modules/@arcgis/core/geometry/support/coordinateSystem.js
function h(t2) {
  const { value: e, operations: n5 } = t2;
  return { operations: n5, value: n5.create(e) };
}
function j(t2, e, n5) {
  return t2.operations.setExtent(t2.value, e, n5.value), n5;
}
function d(t2, e) {
  return t2.operations.getExtent(t2.value, e), e;
}
function x(t2) {
  return { operations: t2, value: t2.create() };
}
function A2(t2, e, n5 = x(t2)) {
  return n5.operations = t2, t2.copy(e, n5.value), n5;
}
function b(t2) {
  return A2(ft, V(0, 0, 0, s(t2).radius));
}
var g = 2 ** 50;
function P2() {
  return A2(ks, J([0, 0, 0], [g, 0, 0], [0, g, 0]));
}
function R(t2, e, n5) {
  return t2.operations.axisAt(t2.value, e, n.Z, n5);
}
function S(t2, e, n5, o3) {
  return t2.operations.axisAt(t2.value, e, n5, o3);
}
function k(t2, e, n5) {
  return t2.operations.intersectRay(t2.value, e, n5);
}
function E(t2, e, n5) {
  return t2.operations.intersectRayClosestSilhouette(t2.value, e, n5);
}
function G(t2, e) {
  return t2.operations.altitudeAt(t2.value, e);
}
function O(t2, e, n5, o3) {
  return t2.operations.setAltitudeAt(t2.value, e, n5, o3);
}
function T(n5, o3, r2, i2) {
  return o3 !== i2 && n3(i2, o3), o(q2, i2[12], i2[13], i2[14]), O(n5, q2, r2, q2), i2[12] = q2[0], i2[13] = q2[1], i2[14] = q2[2], i2;
}
function Z2(t2, e, n5) {
  return t2.operations.elevate(t2.value, e, n5.value);
}
var q2 = n2();
var D = n2();

// node_modules/@arcgis/core/views/3d/support/RenderCoordsHelper.js
var B = class _B {
  constructor(t2, e, o3, r2) {
    this.viewingMode = t2, this.spatialReference = e, this.unitInMeters = o3, this._coordinateSystem = r2, this._tmpCoordinateSystem = h(r2), this.referenceEllipsoid = s(e), this.sphericalPCPF = a(e);
  }
  set extent(t2) {
    t2 && j(this._coordinateSystem, t2, this._coordinateSystem);
  }
  get extent() {
    return d(this._coordinateSystem, u());
  }
  getAltitude(t2) {
    return G(this._coordinateSystem, t2);
  }
  setAltitude(t2, e, o3 = t2) {
    return O(this._coordinateSystem, o3, e, t2);
  }
  setAltitudeOfTransformation(t2, e) {
    T(this._coordinateSystem, e, t2, e);
  }
  worldUpAtPosition(t2, e) {
    return R(this._coordinateSystem, t2, e);
  }
  worldBasisAtPosition(t2, e, o3) {
    return S(this._coordinateSystem, t2, e, o3);
  }
  basisMatrixAtPosition(t2, e) {
    const o3 = this.worldBasisAtPosition(t2, n.X, c.get()), i2 = this.worldBasisAtPosition(t2, n.Y, c.get()), s3 = this.worldBasisAtPosition(t2, n.Z, c.get());
    return r(e, o3[0], o3[1], o3[2], 0, i2[0], i2[1], i2[2], 0, s3[0], s3[1], s3[2], 0, 0, 0, 0, 1), e;
  }
  headingAtPosition(e, o3) {
    const r2 = this.worldUpAtPosition(e, c.get()), i2 = this.worldBasisAtPosition(e, n.Y, c.get()), s3 = u2(o3, i2, r2);
    return M(s3);
  }
  intersectManifoldClosestSilhouette(t2, e, o3) {
    return Z2(this._coordinateSystem, e, this._tmpCoordinateSystem), E(this._tmpCoordinateSystem, t2, o3), o3;
  }
  intersectManifold(t2, e, o3) {
    Z2(this._coordinateSystem, e, this._tmpCoordinateSystem);
    const r2 = c.get();
    return k(this._tmpCoordinateSystem, t2, r2) ? s2(o3, r2) : null;
  }
  intersectInfiniteManifold(t2, e, o3) {
    if (this.viewingMode === l.Global) return this.intersectManifold(t2, e, o3);
    Z2(this._coordinateSystem, e, this._tmpCoordinateSystem);
    const r2 = this._tmpCoordinateSystem.value, s3 = c.get();
    return q(r2.plane, t2, s3) ? s2(o3, s3) : null;
  }
  toRenderCoords(t2, e, o3) {
    return t(t2) ? i(t2, e, this.spatialReference) : n4(t2, e, o3, this.spatialReference);
  }
  fromRenderCoords(t2, e, o3 = null) {
    return t(e) ? (null != o3 && (e.spatialReference = o3), o2(t2, this.spatialReference, e) ? e : null) : n4(t2, this.spatialReference, e, o3) ? e : null;
  }
  static create(t2, o3) {
    switch (t2) {
      case l.Local:
        return new _B(l.Local, o3, Z(o3), P2());
      case l.Global:
        return new _B(l.Global, o3, 1, b(o3));
    }
  }
  static renderUnitScaleFactor(t2, e) {
    return se(t2) / se(e);
  }
};

export {
  B
};
//# sourceMappingURL=chunk-XLZA3DH7.js.map
