import {
  $,
  G,
  H,
  K,
  Le,
  Ve,
  W,
  X,
  ee,
  ie,
  ne,
  re,
  s,
  te,
  ye,
  z
} from "./chunk-Q7K6M7G6.js";
import {
  h
} from "./chunk-NY6S6EMV.js";
import {
  a,
  r
} from "./chunk-AQGMTI4V.js";
import {
  e,
  n,
  o,
  t
} from "./chunk-6QA2BVC5.js";
import {
  c
} from "./chunk-Q6XRAGMA.js";

// node_modules/@arcgis/core/arcade/deepClone.js
function i(a2) {
  p = a2;
}
var p;
function f(i2) {
  return null === i2 ? null : ne(i2) ? i2.clone() : z(i2) ? i2 : H(i2) ? i2.clone() : te(i2) ? i2.toArray().map((a2) => f(a2)) : o(i2) ? i2.map((a2) => f(a2)) : $(i2) ? p.createFromArcadeFeature(i2) : X(i2) || K(i2) ? i2 : W(i2) || "esri.arcade.Attachment" === i2?.declaredClass ? i2.deepClone() : ("esri.arcade.Portal" === i2?.declaredClass || ee(i2) || i2 instanceof s || G(i2), i2);
}

// node_modules/@arcgis/core/arcade/Dictionary.js
function p2(t2, e2, s2 = false, r2 = false) {
  if (null == t2) return null;
  if (n(t2) || t(t2) || e(t2) || ne(t2) || re(t2) || ie(t2)) return t2;
  if (o(t2)) {
    const i3 = [];
    for (const n2 of t2) i3.push(p2(n2, e2, s2, r2));
    return i3;
  }
  if (r2 && H(t2)) return t2;
  const i2 = new j();
  i2.immutable = false;
  for (const [n2, o2] of Object.entries(t2)) void 0 !== o2 && i2.setField(n2, p2(o2, e2, s2, r2));
  return i2.immutable = s2, i2;
}
var j = class _j {
  constructor(t2) {
    this.declaredClass = "esri.arcade.Dictionary", this.plain = false, this.immutable = true, t2 instanceof _j ? this.attributes = t2.attributes : null == t2 ? this.attributes = /* @__PURE__ */ Object.create(null) : null != Object.getPrototypeOf(t2) ? this.attributes = { __proto__: null, ...t2 } : this.attributes = t2;
  }
  static containerEntry(t2, e2) {
    return new _j({ __proto__: null, key: t2, value: e2 });
  }
  static textFormatting() {
    const t2 = new _j({ __proto__: null, newline: "\n", tab: "	", singlequote: "'", doublequote: '"', forwardslash: "/", backwardslash: "\\" });
    return t2.immutable = false, t2;
  }
  field(t2) {
    const e2 = t2.toLowerCase(), i2 = this.attributes[t2];
    if (void 0 !== i2) return i2;
    for (const s2 in this.attributes) if (s2.toLowerCase() === e2) return this.attributes[s2];
    throw new a(null, r.FieldNotFound, null, { key: t2 });
  }
  setField(e2, n2) {
    if (this.immutable) throw new a(null, r.Immutable, null);
    if (G(n2)) throw new a(null, r.NoFunctionInDictionary, null);
    const o2 = e2.toLowerCase();
    n2 instanceof Date && (n2 = h.dateJSToArcadeDate(n2));
    if (void 0 === this.attributes[e2]) {
      for (const t2 in this.attributes) if (t2.toLowerCase() === o2) return void (this.attributes[t2] = n2);
      this.attributes[e2] = n2;
    } else this.attributes[e2] = n2;
  }
  hasField(t2) {
    const e2 = t2.toLowerCase();
    if (void 0 !== this.attributes[t2]) return true;
    for (const s2 in this.attributes) if (s2.toLowerCase() === e2) return true;
    return false;
  }
  keys() {
    let t2 = [];
    for (const e2 in this.attributes) t2.push(e2);
    return t2 = t2.sort(), t2;
  }
  castToText(t2 = false) {
    return ye(this.attributes, { useNumbersForDates: t2 });
  }
  static convertObjectToArcadeDictionary(t2, e2, s2 = true, r2 = false) {
    const i2 = new _j();
    i2.immutable = false;
    for (const n2 in t2) {
      const o2 = t2[n2];
      void 0 !== o2 && i2.setField(n2.toString(), p2(o2, e2, s2, r2));
    }
    return i2.immutable = s2, i2;
  }
  static convertJsonToArcade(t2, e2, s2 = false, r2 = false) {
    return p2(t2, e2, s2, r2);
  }
  castAsJson(t2 = null) {
    const e2 = /* @__PURE__ */ Object.create(null);
    for (let s2 in this.attributes) {
      const r2 = this.attributes[s2];
      void 0 !== r2 && (t2?.keyTranslate && (s2 = t2.keyTranslate(s2)), e2[s2] = Le(r2, t2));
    }
    return e2;
  }
  async castDictionaryValueAsJsonAsync(t2, e2, s2, r2 = null, i2) {
    const n2 = await Ve(s2, r2, i2);
    return t2[e2] = n2, n2;
  }
  async castAsJsonAsync(e2 = null, s2 = null) {
    const r2 = /* @__PURE__ */ Object.create(null), i2 = [];
    for (let n2 in this.attributes) {
      const a2 = this.attributes[n2];
      s2?.keyTranslate && (n2 = s2.keyTranslate(n2)), void 0 !== a2 && (z(a2) || a2 instanceof c || a2 instanceof h ? r2[n2] = Le(a2, s2) : i2.push(this.castDictionaryValueAsJsonAsync(r2, n2, a2, e2, s2)));
    }
    return i2.length > 0 && await Promise.all(i2), r2;
  }
  deepClone() {
    const t2 = new _j();
    t2.immutable = false;
    for (const s2 of this.keys()) t2.setField(s2, f(this.field(s2)));
    return t2;
  }
};

export {
  i,
  f,
  j
};
//# sourceMappingURL=chunk-XMAXGUBN.js.map
