import {
  t
} from "./chunk-TKYAZCMB.js";
import {
  r
} from "./chunk-3TBMFSPB.js";
import {
  n
} from "./chunk-PSZLDJJA.js";
import {
  L,
  c3 as c,
  e,
  u3 as u
} from "./chunk-GZ2P4SCJ.js";
import {
  G
} from "./chunk-FXKORAMT.js";

// node_modules/@arcgis/core/core/PerformanceSampler.js
var s = class {
  constructor(s3, t3 = 30) {
    this.name = s3, this._counter = 0, this._samples = new Array(t3);
  }
  push(s3) {
    null != s3 && (this._samples[++this._counter % this._samples.length] = s3);
  }
  set(s3) {
    null != s3 && (this._samples[this._counter % this._samples.length] = s3);
  }
  get median() {
    return this._samples.slice().sort((s3, t3) => s3 - t3)[Math.floor(this._samples.length / 2)];
  }
  get average() {
    return this._samples.reduce((s3, t3) => s3 + t3, 0) / this._samples.length;
  }
  get last() {
    return this._samples[this._counter % this._samples.length];
  }
};

// node_modules/@arcgis/core/core/scheduling.js
var i = class {
  constructor(e2) {
    this.phases = e2, this.paused = false, this.ticks = -1, this.removed = false;
  }
};
var c2 = class {
  constructor(e2) {
    this.callback = e2, this.isActive = true;
  }
  remove() {
    this.isActive = false;
  }
};
var m = 0;
var l = 0;
var u2 = { time: n(0), deltaTime: n(0), elapsedFrameTime: n(0), frameDuration: n(0) };
var p = ["prepare", "preRender", "render", "postRender", "update", "finish"];
var f = [];
var h = new r();
var d = class {
  constructor(e2) {
    this._task = e2;
  }
  remove() {
    this._task.removed = true;
  }
  pause() {
    this._task.paused = true;
  }
  resume() {
    this._task.paused = false, k();
  }
};
function w() {
  null != T && (cancelAnimationFrame(T), T = requestAnimationFrame(D));
}
function k() {
  null == T && (m = performance.now(), T = requestAnimationFrame(D));
}
var v = { frameTasks: h, willDispatch: false, clearFrameTasks: j, dispatch: g, executeFrameTasks: q, reschedule: w };
function A(t3) {
  const n2 = new c2(t3);
  return f.push(n2), v.willDispatch || (v.willDispatch = true, t(g)), n2;
}
function F(e2) {
  const t3 = new i(e2);
  return h.push(t3), k(), new d(t3);
}
var T = null;
function j(e2 = false) {
  h.forAll((e3) => {
    e3.removed = true;
  }), e2 && b();
}
function D() {
  const e2 = performance.now();
  T = null;
  const t3 = h.some((e3) => !e3.paused && !e3.removed);
  T = t3 ? requestAnimationFrame(D) : null, v.executeFrameTasks(e2);
}
function q(e2) {
  const t3 = n(e2 - m);
  m = e2;
  const n2 = l > 0 ? l : 1e3 / 60, r3 = Math.max(0, t3 - n2);
  u2.time = e2, u2.frameDuration = n(n2 - r3);
  for (let s3 = 0; s3 < p.length; s3++) {
    const n3 = performance.now(), r4 = p[s3];
    h.forAll((n4) => {
      if (n4.paused || n4.removed) return;
      0 === s3 && n4.ticks++;
      n4.phases[r4] && (u2.elapsedFrameTime = n(performance.now() - e2), u2.deltaTime = 0 === n4.ticks ? n(0) : t3, n4.phases[r4]?.call(n4, u2));
    }), U[s3].push(performance.now() - n3);
  }
  b(), S.push(performance.now() - e2);
}
var _ = new r();
function b() {
  h.forAll((e2) => {
    e2.removed && _.push(e2);
  }), h.removeUnorderedMany(_.data, _.length), _.clear();
}
function g() {
  for (; f.length; ) {
    const e2 = f.shift();
    e2.isActive && e2.callback();
  }
  v.willDispatch = false;
}
function y(t3 = 1, n2) {
  const a = L(), i2 = () => {
    c(n2) ? a.reject(u()) : 0 === t3 ? a() : (--t3, t(() => i2()));
  };
  return i2(), a.promise;
}
function M(e2) {
  return y(1, e2);
}
async function R(e2) {
  await M(e2), await new Promise((t3) => requestAnimationFrame(() => {
    e2?.aborted || t3();
  }));
}
var U = p.map((e2) => new s(e2));
var S = new s("total");

// node_modules/@arcgis/core/core/accessorSupport/tracking/ObservationHandle.js
var s2 = class {
  constructor(r3, s3) {
    this._observers = r3, this._observer = s3;
  }
  remove() {
    G(this._observers, this._observer);
  }
};

// node_modules/@arcgis/core/core/accessorSupport/ObservableBase.js
var r2 = class {
  constructor() {
    this._observers = null, this.destroyed = false;
  }
  observe(e2) {
    if (this.destroyed || e2.destroyed) return t2;
    null == this._observers && (this._observers = []);
    const r3 = this._observers;
    let o = false, i2 = false;
    const n2 = r3.length;
    for (let s3 = 0; s3 < n2; ++s3) {
      const t3 = r3[s3];
      if (t3.destroyed) i2 = true;
      else if (t3 === e2) {
        o = true;
        break;
      }
    }
    return o || (r3.push(e2), i2 && this._removeDestroyedObservers()), new s2(r3, e2);
  }
  _removeDestroyedObservers() {
    const e2 = this._observers;
    if (!e2 || 0 === e2.length) return;
    const s3 = e2.length;
    let r3 = 0;
    for (let t3 = 0; t3 < s3; ++t3) {
      for (; t3 + r3 < s3; ) {
        if (!e2[t3 + r3].destroyed) break;
        ++r3;
      }
      if (r3 > 0) {
        if (!(t3 + r3 < s3)) break;
        e2[t3] = e2[t3 + r3];
      }
    }
    e2.length = s3 - r3;
  }
  destroy() {
    if (this.destroyed) return;
    this.destroyed = true;
    const e2 = this._observers;
    if (null != e2) {
      for (const s3 of e2) s3.onCommitted();
      this._observers = null;
    }
  }
};
var t2 = e();

export {
  r2 as r,
  s,
  A,
  F,
  y,
  M,
  R
};
//# sourceMappingURL=chunk-XTNIDRTB.js.map
