import {
  n,
  r
} from "./chunk-MPV4X4LZ.js";

// node_modules/@arcgis/core/views/2d/engine/webgl/collisions/BoundingBox.js
var i = class _i {
  constructor(i2, e, s, r2) {
    this.transformedX = 0, this.transformedY = 0, this.center = r(i2, e), this.centerT = n(), this.halfWidth = s / 2, this.halfHeight = r2 / 2, this.width = s, this.height = r2;
  }
  get x() {
    return this.center[0];
  }
  get y() {
    return this.center[1];
  }
  get blX() {
    return this.center[0] + this.halfWidth;
  }
  get blY() {
    return this.center[1] + this.halfHeight;
  }
  get trX() {
    return this.center[0] - this.halfWidth;
  }
  get trY() {
    return this.center[1] - this.halfHeight;
  }
  get xmin() {
    return this.x - this.halfWidth;
  }
  get xmax() {
    return this.x + this.halfWidth;
  }
  get ymin() {
    return this.y - this.halfHeight;
  }
  get ymax() {
    return this.y + this.halfHeight;
  }
  set x(t) {
    this.center[0] = t;
  }
  set y(t) {
    this.center[1] = t;
  }
  clone() {
    return new _i(this.x, this.y, this.width, this.height);
  }
  serialize(t) {
    return t.writeF32(this.center[0]), t.writeF32(this.center[1]), t.push(this.width), t.push(this.height), t;
  }
  findCollisionDelta(t, h = 4) {
    const i2 = Math.abs(t.centerT[0] - this.centerT[0]), e = Math.abs(t.centerT[1] - this.centerT[1]), s = (t.halfWidth + this.halfWidth + h) / i2, r2 = (t.halfHeight + this.halfHeight + h) / e, n2 = Math.min(s, r2);
    return Math.log2(n2);
  }
  extend(t) {
    const h = Math.min(this.xmin, t.xmin), i2 = Math.min(this.ymin, t.ymin), e = Math.max(this.xmax, t.xmax) - h, s = Math.max(this.ymax, t.ymax) - i2, r2 = h + e / 2, n2 = i2 + s / 2;
    this.width = e, this.height = s, this.halfWidth = e / 2, this.halfHeight = s / 2, this.x = r2, this.y = n2;
  }
  static deserialize(t) {
    const h = t.readF32(), e = t.readF32(), s = t.readInt32(), r2 = t.readInt32();
    return new _i(h, e, s, r2);
  }
};

export {
  i
};
//# sourceMappingURL=chunk-Y2ZAHGIO.js.map
