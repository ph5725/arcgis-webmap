import {
  V
} from "./chunk-X3R5OB6L.js";
import {
  l,
  w
} from "./chunk-A3VAC24F.js";
import {
  H,
  s
} from "./chunk-ZWFY3WY5.js";
import {
  e
} from "./chunk-GZ2P4SCJ.js";

// node_modules/@arcgis/core/layers/catalog/catalogUtils.js
var n = /* @__PURE__ */ new WeakMap();
function a(o2) {
  return !o2.destroyed && (n.has(o2) || o2.addHandles([l(() => {
    const e2 = o2.parent;
    return !(!e2 || !("type" in e2)) && ("catalog-dynamic-group" === e2.type || a(e2));
  }, (e2) => n.set(o2, e2), w), e(() => n.delete(o2))]), n.get(o2));
}

// node_modules/@arcgis/core/layers/support/layerUtils.js
function i(e2) {
  return b(e2) || y(e2);
}
function u(e2) {
  return null != e2 && "object" == typeof e2 && "type" in e2 && "feature" === e2.type;
}
function o(e2) {
  return null != e2 && "object" == typeof e2 && "type" in e2 && "graphics" === e2.type;
}
function s2(e2) {
  return null != e2 && "object" == typeof e2 && "type" in e2 && "map-image" === e2.type;
}
function c(e2) {
  return null != e2 && "object" == typeof e2 && "type" in e2 && "knowledge-graph" === e2.type && "layers" in e2;
}
function l2(e2) {
  return null != e2 && "object" == typeof e2 && "type" in e2 && "knowledge-graph-sublayer" === e2.type;
}
function y(e2) {
  return "scene" === e2?.type;
}
function p(e2) {
  return null != e2 && "object" == typeof e2 && "type" in e2 && "subtype-group" === e2.type && "sublayers" in e2;
}
function g(e2) {
  return "subtype-sublayer" === e2?.type;
}
function b(e2) {
  const t = e2?.type;
  return "imagery-tile" === t || "tile" === t || "open-street-map" === t || "vector-tile" === t || "web-tile" === t || "wmts" === t;
}
function d(e2) {
  const t = e2?.type;
  return "base-tile" === t || "tile" === t || "elevation" === t || "imagery-tile" === t || "base-elevation" === t || "open-street-map" === t || "wcs" === t || "web-tile" === t || "wmts" === t || "vector-tile" === t;
}
var h = { Point: "SceneLayer", "3DObject": "SceneLayer", IntegratedMesh: "IntegratedMeshLayer", PointCloud: "PointCloudLayer", Building: "BuildingSceneLayer" };
function j(e2) {
  const t = e2?.type;
  return "building-scene" === t || "integrated-mesh" === t || "point-cloud" === t || "scene" === t;
}
function w2(e2) {
  return "integrated-mesh" === e2 || "integrated-mesh-3dtiles" === e2;
}
function k(e2) {
  return "feature" === e2?.type && !e2.url && "memory" === e2.source?.type;
}
function x(e2) {
  const t = e2?.type;
  return ("feature" === t || "subtype-group" === t || "oriented-imagery" === t) && "feature-layer" === e2?.source?.type;
}
function O(e2) {
  if (e2.activeLayer) {
    const t = e2.activeLayer.tileMatrixSet;
    if (t) return t;
    const n2 = e2.activeLayer.tileMatrixSets;
    if (n2) return n2;
  }
  return null;
}
async function B(n2, r) {
  const i2 = s?.findServerInfo(n2);
  if (null != i2?.currentVersion) return i2.owningSystemUrl || null;
  const u2 = n2.toLowerCase().indexOf("/rest/services");
  if (-1 === u2) return null;
  const o2 = `${n2.slice(0, u2)}/rest/info`, s3 = null != r ? r.signal : null, { data: a2 } = await H(o2, { query: { f: "json" }, responseType: "json", signal: s3 });
  return a2?.owningSystemUrl || null;
}
function P(e2) {
  if (!("capabilities" in e2)) return false;
  switch (e2.type) {
    case "catalog":
    case "catalog-footprint":
    case "csv":
    case "feature":
    case "geojson":
    case "imagery":
    case "knowledge-graph-sublayer":
    case "ogc-feature":
    case "oriented-imagery":
    case "scene":
    case "sublayer":
    case "subtype-group":
    case "subtype-sublayer":
    case "wfs":
      return true;
    default:
      return false;
  }
}
function D(e2) {
  return P(e2) ? "effectiveCapabilities" in e2 ? e2.effectiveCapabilities : e2.capabilities : null;
}
function J(e2) {
  if (!("editingEnabled" in e2)) return false;
  switch (e2.type) {
    case "csv":
    case "feature":
    case "geojson":
    case "oriented-imagery":
    case "scene":
    case "subtype-group":
    case "subtype-sublayer":
      return true;
    default:
      return false;
  }
}
function N(e2) {
  return !!J(e2) && ("effectiveEditingEnabled" in e2 ? e2.effectiveEditingEnabled : e2.editingEnabled);
}
function $(e2) {
  const t = new V();
  for (const n2 of e2.allLayers.concat(e2.allTables)) "csv" === n2.type || a(n2) || ("charts" in n2 && t.push(n2), "subtype-group" === n2.type && t.push(...n2.sublayers));
  return t;
}
function z(e2, t) {
  return null;
}
function A(e2) {
  return null;
}
function G(e2) {
  return !e2 || "Feature Service" === e2.type && !e2.sourceUrl;
}
function H2(e2, t) {
  if (!t || !G(e2)) return;
  const n2 = z(e2.url);
  n2 && (e2.url = n2);
}

export {
  a,
  i,
  u,
  o,
  s2 as s,
  c,
  l2 as l,
  p,
  g,
  b,
  d,
  h,
  j,
  w2 as w,
  k,
  x,
  O,
  B,
  P,
  D,
  N,
  $,
  z,
  A,
  G,
  H2 as H
};
//# sourceMappingURL=chunk-YBJ5GVXQ.js.map
