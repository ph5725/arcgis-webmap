import {
  E
} from "./chunk-733XT7D4.js";
import {
  G as G2,
  S,
  c,
  e as e2
} from "./chunk-H6F6O2KE.js";
import {
  F,
  G,
  H,
  N,
  V,
  X,
  Y,
  e,
  g,
  h,
  k,
  n,
  o,
  t
} from "./chunk-BZYXFNL4.js";
import {
  r2 as r
} from "./chunk-GZ2P4SCJ.js";
import {
  i2 as i
} from "./chunk-XWG6QGFK.js";

// node_modules/@arcgis/core/views/webgl/RenderbufferDescriptor.js
var i2 = class {
  constructor(t2, i3 = 0, h3 = i3) {
    this.internalFormat = t2, this.width = i3, this.height = h3, this.multisampled = false, this.samples = 1;
  }
};
function h2(i3) {
  return i3.width <= 0 || i3.height <= 0 || null == i3.internalFormat ? 0 : i3.width * i3.height * G2(i3.internalFormat);
}

// node_modules/@arcgis/core/views/webgl/Renderbuffer.js
var s = class {
  constructor(r2, s2) {
    this._context = r2, this._descriptor = s2, this.type = e2.Renderbuffer, this._context.instanceCounter.increment(o.Renderbuffer, this);
    const i3 = this._context.gl;
    this.glName = i3.createRenderbuffer(), this._context.bindRenderbuffer(this);
    const { width: n2, height: o2, internalFormat: h3, multisampled: d } = s2;
    d ? i3.renderbufferStorageMultisample(i3.RENDERBUFFER, this.samples, h3, n2, o2) : i3.renderbufferStorage(i3.RENDERBUFFER, h3, n2, o2), this._context.bindRenderbuffer(null);
  }
  get descriptor() {
    return this._descriptor;
  }
  get samples() {
    const e3 = this._descriptor.samples, t2 = this._context.parameters.maxSamples;
    return e3 ? Math.min(e3, t2) : t2;
  }
  get usedMemory() {
    return h2(this._descriptor);
  }
  resize(e3, t2) {
    const r2 = this._descriptor;
    if (r2.width === e3 && r2.height === t2) return;
    r2.width = e3, r2.height = t2;
    const s2 = this._context.gl;
    this._context.bindRenderbuffer(this), r2.multisampled ? s2.renderbufferStorageMultisample(s2.RENDERBUFFER, this.samples, r2.internalFormat, r2.width, r2.height) : s2.renderbufferStorage(s2.RENDERBUFFER, r2.internalFormat, r2.width, r2.height), this._context.bindRenderbuffer(null);
  }
  dispose() {
    this._context && (this._context.gl.deleteRenderbuffer(this.glName), this._context.instanceCounter.decrement(o.Renderbuffer, this), this._context = null);
  }
};

// node_modules/@arcgis/core/views/webgl/FramebufferObject.js
var g2 = () => i.getLogger("esri.views.webgl.FramebufferObject");
var _R = class _R {
  constructor(t2, e3, r2) {
    if (this._context = t2, this._glName = null, this._colorAttachments = /* @__PURE__ */ new Map(), this._depthStencilBuffer = null, this._depthStencilTexture = null, this._initialized = false, t2.instanceCounter.increment(o.FramebufferObject, this), null != e3) {
      const r3 = S2(e3) ? e3 : new S(t2, e3);
      this._colorAttachments.set(e, r3), this._validateTextureDescriptor(r3.descriptor), this._validateColorAttachmentPoint(e);
    }
    if (null != r2) if (A(r2)) this._depthStencilTexture = S2(r2) ? r2 : new S(t2, r2), this._validateTextureDescriptor(this._depthStencilTexture.descriptor);
    else {
      const e4 = F2(r2) ? r2 : new s(t2, r2);
      this._depthStencilBuffer = e4, this._validateRenderbufferDescriptor(e4.descriptor);
    }
  }
  dispose() {
    const { _colorAttachments: t2, _glName: e3 } = this;
    if (0 === t2.size && !this._depthStencilBuffer && !this._depthStencilTexture && !e3) return;
    const { _context: r2 } = this, i3 = r2.getBoundFramebufferObject();
    t2.forEach((t3, e4) => this.detachColorTexture(e4)?.dispose()), this.detachDepthStencilBuffer()?.dispose(), this.detachDepthStencilTexture()?.dispose(), r2.gl.deleteFramebuffer(e3), this._glName = null, r2.bindFramebuffer(i3 === this ? null : i3), r2.instanceCounter.decrement(o.FramebufferObject, this);
  }
  get glName() {
    return this._glName;
  }
  get colorTexture() {
    return this._colorAttachments.get(e);
  }
  get depthStencil() {
    return this._depthStencilTexture || this._depthStencilBuffer;
  }
  get depthStencilTexture() {
    return this._depthStencilTexture;
  }
  get width() {
    const t2 = this._colorAttachments.get(e) ?? this._depthStencilTexture ?? this._depthStencilBuffer;
    return t2?.descriptor?.width ?? 0;
  }
  get height() {
    const t2 = this._colorAttachments.get(e) ?? this._depthStencilTexture ?? this._depthStencilBuffer;
    return t2?.descriptor?.height ?? 0;
  }
  get usedMemory() {
    return [...this._colorAttachments].reduce((t2, [e3, r2]) => t2 + r2.usedMemory, this.depthStencil?.usedMemory ?? 0);
  }
  getColorTexture(t2) {
    const e3 = this._colorAttachments.get(t2);
    return e3 && S2(e3) ? e3 : null;
  }
  get colorAttachments() {
    return [...this._colorAttachments.keys()];
  }
  attachColorTexture(t2, e3 = e) {
    if (!t2) return;
    this._validateColorAttachmentPoint(e3);
    const { descriptor: r2 } = t2;
    this._validateTextureDescriptor(r2), this.detachColorTexture(e3)?.dispose(), this._initialized && (this._context.bindFramebuffer(this), this._framebufferTexture2D(t2.glName, e3)), this._colorAttachments.set(e3, t2);
  }
  detachColorTexture(t2 = e) {
    const e3 = this._colorAttachments.get(t2);
    if (e3) return this._initialized && this._context.temporaryBindFramebufferObject(this, () => {
      this._framebufferTexture2D(null, t2);
    }), this._colorAttachments.delete(t2), e3;
  }
  setColorTextureTarget(t2, e3 = e, r2 = 0) {
    const i3 = this._colorAttachments.get(e3);
    i3 && (t2 === G.TEXTURE_2D_ARRAY ? this._framebufferTextureLayer(i3.glName, e3, t.FRAMEBUFFER, 0, r2) : this._framebufferTexture2D(i3.glName, e3, t2, t.FRAMEBUFFER, 0));
  }
  attachDepthStencil(t2) {
    if (t2) switch (t2.type) {
      case e2.Texture:
        return this._attachDepthStencilTexture(t2);
      case e2.Renderbuffer:
        return this._attachDepthStencilBuffer(t2);
    }
  }
  _attachDepthStencilTexture(t2) {
    if (null == t2) return;
    const { descriptor: e3 } = t2, { pixelFormat: r2, dataType: i3 } = e3;
    r2 === F.DEPTH_STENCIL || r2 === F.DEPTH_COMPONENT ? r2 !== F.DEPTH_STENCIL || i3 === X.UNSIGNED_INT_24_8 ? r2 !== F.DEPTH_COMPONENT || i3 === X.UNSIGNED_INT || i3 === X.UNSIGNED_SHORT ? (this._validateTextureDescriptor(e3), this._disposeDepthStencilAttachments(), this._initialized && (this._context.bindFramebuffer(this), this._framebufferTexture2D(t2.glName, O(r2))), this._depthStencilTexture?.dispose(), this._depthStencilTexture = t2) : console.error("Depth texture must have data type of UNSIGNED_INT or UNSIGNED_SHORT!") : console.error("Depth/Stencil texture must have data type of UNSIGNED_INT_24_8!") : console.error("Depth/Stencil texture must have a pixel type of DEPTH_STENCIL!");
  }
  detachDepthStencilTexture() {
    const t2 = this._depthStencilTexture;
    return t2 && this._initialized && this._context.temporaryBindFramebufferObject(this, () => {
      this._framebufferTexture2D(null, O(t2.descriptor.pixelFormat));
    }), this._depthStencilTexture = null, t2;
  }
  _attachDepthStencilBuffer(t2) {
    if (null == t2) return;
    const e3 = t2.descriptor;
    if (this._validateRenderbufferDescriptor(e3), this._disposeDepthStencilAttachments(), this._initialized) {
      this._context.bindFramebuffer(this);
      const { gl: r2 } = this._context, i3 = this._getGLAttachmentPoint(e3);
      r2.framebufferRenderbuffer(t.FRAMEBUFFER, i3, r2.RENDERBUFFER, t2.glName);
    }
    this._depthStencilBuffer = t2;
  }
  detachDepthStencilBuffer() {
    const t2 = this._depthStencilBuffer;
    if (t2 && this._initialized) {
      const { _context: e3 } = this, r2 = e3.getBoundFramebufferObject();
      e3.bindFramebuffer(this);
      const { gl: i3 } = e3, s2 = this._getGLAttachmentPoint(t2.descriptor);
      i3.framebufferRenderbuffer(t.FRAMEBUFFER, s2, i3.RENDERBUFFER, null), e3.bindFramebuffer(r2);
    }
    return this._depthStencilBuffer = null, t2;
  }
  invalidateAttachments(t2) {
    const { _context: e3 } = this;
    e3.temporaryBindFramebufferObject(this, () => e3.gl.invalidateFramebuffer(t.FRAMEBUFFER, t2), true);
  }
  copyToTexture(t2, e3, r2, i3, s2, n2, o2) {
    (t2 < 0 || e3 < 0 || s2 < 0 || n2 < 0) && console.error("Offsets cannot be negative!"), (r2 <= 0 || i3 <= 0) && console.error("Copy width and height must be greater than zero!");
    const c2 = o2.descriptor;
    o2.descriptor.target !== G.TEXTURE_2D && console.error("Texture target must be TEXTURE_2D!"), (null == c2?.width || null == c2?.height || t2 + r2 > this.width || e3 + i3 > this.height || s2 + r2 > c2.width || n2 + i3 > c2.height) && console.error("Bad dimensions, the current input values will attempt to read or copy out of bounds!");
    const a = this._context, u = a.bindTexture(o2, S.TEXTURE_UNIT_FOR_UPDATES);
    a.setActiveTexture(S.TEXTURE_UNIT_FOR_UPDATES), a.bindFramebuffer(this), a.gl.copyTexSubImage2D(G.TEXTURE_2D, 0, s2, n2, t2, e3, r2, i3), a.bindTexture(u, S.TEXTURE_UNIT_FOR_UPDATES);
  }
  readPixels(t2, e3, r2, i3, s2, n2, h3) {
    (r2 <= 0 || i3 <= 0) && console.error("Copy width and height must be greater than zero!"), h3 || console.error("Target memory is not initialized!"), this._context.bindFramebuffer(this), this._context.gl.readPixels(t2, e3, r2, i3, s2, n2, h3);
  }
  async readPixelsAsync(t2, e3, i3, s2, n2, h3, o2) {
    const { gl: c2 } = this._context, a = E.createPixelPack(this._context, Y.STREAM_READ, o2.byteLength);
    this._context.bindBuffer(a);
    const l = this._context.getBoundFramebufferObject();
    this._context.bindFramebuffer(this), c2.readPixels(t2, e3, i3, s2, n2, h3, 0), this._context.unbindBuffer(N.PIXEL_PACK_BUFFER), this._context.bindFramebuffer(l), await a.getSubDataAsync(o2), a.dispose();
  }
  resize(t2, e3) {
    if (this.width === t2 && this.height === e3) return;
    const r2 = { width: t2, height: e3 };
    B(r2, this._context.parameters.maxTextureSize), this._colorAttachments.forEach((t3) => t3.resize(r2.width, r2.height)), this._depthStencilTexture?.resize(r2.width, r2.height), this._initialized && (B(r2, this._context.parameters.maxRenderbufferSize), this._depthStencilBuffer?.resize(r2.width, r2.height), this._context.getBoundFramebufferObject() === this && this._context.bindFramebuffer(null), this._initialized = false);
  }
  initializeAndBind(t2 = t.FRAMEBUFFER) {
    const { gl: e3 } = this._context;
    if (this._initialized) return void e3.bindFramebuffer(t2, this.glName);
    this._glName && e3.deleteFramebuffer(this._glName);
    const r2 = e3.createFramebuffer();
    if (e3.bindFramebuffer(t2, r2), this._colorAttachments.forEach((e4, r3) => {
      const i3 = U(e4);
      i3 === G.TEXTURE_2D_ARRAY ? this._framebufferTextureLayer(e4.glName, r3, t2, 0, 0) : this._framebufferTexture2D(e4.glName, r3, i3, t2);
    }), this._depthStencilBuffer) {
      const r3 = this._getGLAttachmentPoint(this._depthStencilBuffer.descriptor);
      e3.framebufferRenderbuffer(t2, r3, e3.RENDERBUFFER, this._depthStencilBuffer.glName);
    } else if (this._depthStencilTexture) {
      const e4 = O(this._depthStencilTexture.descriptor.pixelFormat);
      this._framebufferTexture2D(this._depthStencilTexture.glName, e4, U(this._depthStencilTexture), t2);
    }
    if (c()) {
      e3.checkFramebufferStatus(t2) !== e3.FRAMEBUFFER_COMPLETE && console.error("Framebuffer is incomplete!");
    }
    this._glName = r2, this._initialized = true;
  }
  _framebufferTexture2D(t2, e3 = e, r2 = G.TEXTURE_2D, i3 = t.FRAMEBUFFER, s2 = 0) {
    this._context.gl.framebufferTexture2D(i3, e3, r2, t2, s2);
  }
  _framebufferTextureLayer(t2, e3 = e, r2 = t.FRAMEBUFFER, i3 = 0, s2 = 0) {
    this._context.gl.framebufferTextureLayer(r2, e3, t2, i3, s2);
  }
  _disposeDepthStencilAttachments() {
    const t2 = this._context.gl;
    if (this._depthStencilBuffer) {
      if (this._initialized) {
        this._context.bindFramebuffer(this);
        const e3 = this._getGLAttachmentPoint(this._depthStencilBuffer.descriptor);
        t2.framebufferRenderbuffer(t.FRAMEBUFFER, e3, t2.RENDERBUFFER, null);
      }
      this._depthStencilBuffer = r(this._depthStencilBuffer);
    }
    this._depthStencilTexture && (this._initialized && (this._context.bindFramebuffer(this), this._framebufferTexture2D(null, O(this._depthStencilTexture.descriptor.pixelFormat))), this._depthStencilTexture = r(this._depthStencilTexture));
  }
  _validateTextureDescriptor(t2) {
    t2.target !== G.TEXTURE_2D && t2.target !== G.TEXTURE_CUBE_MAP && t2.target !== G.TEXTURE_2D_ARRAY && console.error("Texture type must be TEXTURE_2D, TEXTURE_2D_ARRAY or TEXTURE_CUBE_MAP!"), B(t2, this._context.parameters.maxTextureSize), this._validateBufferDimensions(t2);
  }
  _validateRenderbufferDescriptor(t2) {
    B(t2, this._context.parameters.maxRenderbufferSize), this._validateBufferDimensions(t2);
  }
  _validateBufferDimensions(t2) {
    t2.width <= 0 && (t2.width = this.width), t2.height <= 0 && (t2.height = this.height), this.width > 0 && this.height > 0 && (this.width === t2.width && this.height === t2.height || console.error("Attachment size must match framebuffer size!"));
  }
  _getGLAttachmentPoint(t2) {
    switch (t2.internalFormat) {
      case n.DEPTH_COMPONENT16:
      case n.DEPTH_COMPONENT24:
      case n.DEPTH_COMPONENT32F:
        return h;
      case H.DEPTH24_STENCIL8:
      case H.DEPTH32F_STENCIL8:
        return g;
      case V.STENCIL_INDEX8:
        return k;
    }
  }
  _validateColorAttachmentPoint(e3) {
    if (-1 === _R._MAX_COLOR_ATTACHMENTS) {
      const { gl: t2 } = this._context;
      _R._MAX_COLOR_ATTACHMENTS = t2.getParameter(t2.MAX_COLOR_ATTACHMENTS);
    }
    const r2 = e3 - e;
    r2 + 1 > _R._MAX_COLOR_ATTACHMENTS && i.getLogger("esri.views.webgl.FrameBufferObject").error("esri.FrameBufferObject", `illegal attachment point for color attachment: ${r2 + 1}. Implementation supports up to ${_R._MAX_COLOR_ATTACHMENTS} color attachments`);
  }
};
_R._MAX_COLOR_ATTACHMENTS = -1;
var R = _R;
function S2(t2) {
  return N2(t2) === e2.Texture;
}
function F2(t2) {
  return N2(t2) === e2.Renderbuffer;
}
function A(t2) {
  return S2(t2) || D(t2);
}
function D(t2) {
  return N2(t2) === e2.TextureDescriptor;
}
function N2(t2) {
  return null != t2 && "type" in t2 ? t2.type : null;
}
function B(t2, e3) {
  const r2 = Math.max(t2.width, t2.height);
  if (r2 > e3) {
    g2().warnOnce(`Resizing FBO attachment size ${t2.width}x${t2.height} to device limit ${e3}`);
    const i3 = e3 / r2;
    return t2.width = Math.round(t2.width * i3), t2.height = Math.round(t2.height * i3), false;
  }
  return true;
}
function U(t2) {
  return t2.descriptor.target === G.TEXTURE_CUBE_MAP ? G.TEXTURE_CUBE_MAP_POSITIVE_X : t2.descriptor.target === G.TEXTURE_2D_ARRAY ? G.TEXTURE_2D_ARRAY : G.TEXTURE_2D;
}
function O(t2) {
  return t2 === F.DEPTH_COMPONENT ? h : g;
}

export {
  i2 as i,
  s,
  R
};
//# sourceMappingURL=chunk-YEQJ7SMN.js.map
