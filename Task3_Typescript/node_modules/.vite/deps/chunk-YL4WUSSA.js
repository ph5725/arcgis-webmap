import {
  B,
  C,
  D,
  H
} from "./chunk-AAC6XSCN.js";
import {
  i2 as i,
  s
} from "./chunk-XWG6QGFK.js";

// node_modules/@arcgis/core/views/2d/arcade/callExpressionWithFeature.js
function s2(e, t, o, n, a, s3) {
  if (null == e) return null;
  const u2 = e.references("geometry") && s3 ? i2(t, n, s3) : t, c2 = e.repurposeFeature(u2, a);
  try {
    return e.evaluate(c2, o);
  } catch (m) {
    return i.getLogger("esri.views.2d.support.arcadeOnDemand").warn("Feature arcade evaluation failed:", m), null;
  }
}
var u = /* @__PURE__ */ new Map();
function i2(e, r, t) {
  const { transform: o, hasZ: n, hasM: a } = t;
  u.has(r) || u.set(r, c(r));
  const s3 = u.get(r)(e.geometry, o, n, a);
  return { ...e, geometry: s3 };
}
function c(s3) {
  const u2 = {};
  switch (s3) {
    case "esriGeometryPoint":
      return (e, r, t, o) => C(r, u2, e, t, o);
    case "esriGeometryPolygon":
      return (e, r, t, o) => D(r, u2, e, t, o);
    case "esriGeometryPolyline":
      return (e, r, t, n) => H(r, u2, e, t, n);
    case "esriGeometryMultipoint":
      return (e, r, o, n) => B(r, u2, e, o, n);
    default:
      return i.getLogger("esri.views.2d.support.arcadeOnDemand").error(new s("mapview-arcade", `Unable to handle geometryType: ${s3}`)), (e) => e;
  }
}

export {
  s2 as s
};
//# sourceMappingURL=chunk-YL4WUSSA.js.map
