import {
  c
} from "./chunk-2ZADANKQ.js";
import {
  e
} from "./chunk-6LQLTORF.js";
import {
  i as i2
} from "./chunk-A4KKV2O6.js";
import {
  i
} from "./chunk-QNHQE3IL.js";
import {
  n
} from "./chunk-6EOJZ6DP.js";
import {
  a
} from "./chunk-DRLVYVHZ.js";

// node_modules/@arcgis/core/views/3d/webgl-engine/core/shaderModules/Texture2DUintPassUniform.js
var s = class extends i {
  constructor(e2, s3) {
    super(e2, "usampler2D", a.Pass, (r, o2, t) => r.bindTexture(e2, s3(o2, t)));
  }
};

// node_modules/@arcgis/core/chunks/HighlightDownsample.glsl.js
var o = class extends c {
};
function c2() {
  const l = new i2(), { outputs: o2, fragment: c3 } = l;
  return l.include(e), c3.uniforms.add(new s("highlightTexture", (e2) => e2.highlightTexture)), c3.constants.add("outlineWidth", "int", Math.ceil(n2)), c3.constants.add("cellSize", "int", u), o2.add("fragGrid", "uvec2"), c3.main.add(n`ivec2 inputTextureSize = textureSize(highlightTexture, 0);
ivec2 cellBottomLeftCornerInput = ivec2(ivec2(floor(gl_FragCoord.xy) * vec2(cellSize)));
ivec2 coordMid =  cellBottomLeftCornerInput + ivec2(cellSize >> 1);
uvec2 centreTexel = texelFetch(highlightTexture, coordMid, 0).rg & uvec2(0x55u);
float marginSquare = float(outlineWidth*outlineWidth);
uvec2 outputValue = centreTexel & uvec2(0x55u);
for(int y = -outlineWidth; y <= cellSize + outlineWidth; y+=2) {
int dy = y < 0 ? -y : y > cellSize ? y-cellSize : 0;
int xMargin = dy > 0 ? int(ceil(sqrt(marginSquare - float(dy*dy)))) : outlineWidth;
for(int x = -xMargin; x <= cellSize + xMargin; x+=2) {
ivec2 coord = cellBottomLeftCornerInput + ivec2(x, y);
uvec2[4] texels = uvec2[4] (
texelFetch(highlightTexture,coord+ivec2(0,0),0).rg & uvec2(0x55u),
texelFetch(highlightTexture,coord+ivec2(1,0),0).rg & uvec2(0x55u),
texelFetch(highlightTexture,coord+ivec2(0,1),0).rg & uvec2(0x55u),
texelFetch(highlightTexture,coord+ivec2(1,1),0).rg & uvec2(0x55u)
);
if (texels[0] == texels[1] && texels[1] == texels[2] && texels[2] == texels[3] && texels[3] ==  centreTexel) {
continue;
}
for (int i=0; i<4; ++i){
outputValue |= ((texels[i] ^ centreTexel) << 1);
outputValue |= texels[i];
}
}
}
fragGrid = outputValue;`), l;
}
var u = 32;
var n2 = 9;
var s2 = 0.4;
var a2 = Object.freeze(Object.defineProperty({ __proto__: null, HighlightDownsampleDrawParameters: o, blurSize: s2, build: c2, gridCellPixelSize: u, outlineSize: n2 }, Symbol.toStringTag, { value: "Module" }));

export {
  s,
  o,
  c2 as c,
  u,
  n2 as n,
  s2,
  a2 as a
};
//# sourceMappingURL=chunk-YSZ4SRX4.js.map
