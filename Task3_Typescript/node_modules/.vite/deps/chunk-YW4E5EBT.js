import {
  n as n2,
  o as o2
} from "./chunk-VTZ6LADX.js";
import {
  u
} from "./chunk-TQBLAIQG.js";
import {
  m
} from "./chunk-6TS2ZJL4.js";
import {
  O,
  Q
} from "./chunk-7NMH5MM5.js";
import {
  ne
} from "./chunk-VCRP2PLV.js";
import {
  y
} from "./chunk-IGYEHOTB.js";
import {
  z
} from "./chunk-O5TPFXRT.js";
import {
  f
} from "./chunk-PK2ZR2SJ.js";
import {
  U,
  s as s2
} from "./chunk-OXSERRAR.js";
import {
  n,
  o3 as o
} from "./chunk-N3XLUQJI.js";
import {
  H,
  d
} from "./chunk-ZWFY3WY5.js";
import {
  $t,
  F,
  dt
} from "./chunk-LQFTAGIV.js";
import {
  s
} from "./chunk-XWG6QGFK.js";

// node_modules/@arcgis/core/layers/ogc/wfsUtils.js
var T = "xlink:href";
var S = "2.0.0";
var F2 = "__esri_wfs_id__";
var x = "wfs-layer:getWFSLayerTypeInfo-error";
var C = "wfs-layer:empty-service";
var E = "wfs-layer:feature-type-not-found";
var R = "wfs-layer:geojson-not-supported";
var k = "wfs-layer:kvp-encoding-not-supported";
var P = "wfs-layer:malformed-json";
var j = "wfs-layer:unknown-geometry-type";
var A = "wfs-layer:unknown-field-type";
var N = "wfs-layer:unsupported-spatial-reference";
var G = "wfs-layer:unsupported-wfs-version";
async function v(t, r) {
  const n3 = U2((await H(t, { responseType: "text", query: { SERVICE: "WFS", REQUEST: "GetCapabilities", VERSION: S, ...r?.customParameters }, signal: r?.signal })).data);
  return D(t, n3), n3;
}
function U2(e) {
  const t = te(e);
  ne2(t), ae(t);
  const r = t.firstElementChild, a = n(O2(r));
  return { operations: M(r), get featureTypes() {
    return Array.from(a());
  }, readFeatureTypes: a };
}
var I = ["json", "application/json; subtype=geojson; charset=utf-8", "application/json; subtype=geojson", "application/json", "geojson", "application/geo+json"];
function L(e) {
  for (const t of I) {
    const r = e.findIndex((e2) => e2.toLowerCase() === t);
    if (r >= 0) return e[r];
  }
  return null;
}
function M(e) {
  let r = true;
  const n3 = { GetCapabilities: { url: "" }, DescribeFeatureType: { url: "" }, GetFeature: { url: "", outputFormat: null, supportsPagination: false } }, a = [], o3 = [];
  if (o2(e, { OperationsMetadata: { Parameter: (e2) => {
    if ("outputformat" === e2.getAttribute("name")?.toLowerCase()) return { AllowedValues: { Value: ({ textContent: e3 }) => {
      e3 && a.push(e3);
    } } };
  }, Operation: (e2) => {
    switch (e2.getAttribute("name")) {
      case "GetCapabilities":
        return { DCP: { HTTP: { Get: (e3) => {
          n3.GetCapabilities.url = e3.getAttribute(T);
        } } } };
      case "DescribeFeatureType":
        return { DCP: { HTTP: { Get: (e3) => {
          n3.DescribeFeatureType.url = e3.getAttribute(T);
        } } } };
      case "GetFeature":
        return { DCP: { HTTP: { Get: (e3) => {
          n3.GetFeature.url = e3.getAttribute(T);
        } } }, Parameter: (e3) => {
          if ("outputformat" === e3.getAttribute("name")?.toLowerCase()) return { AllowedValues: { Value: ({ textContent: e4 }) => {
            e4 && o3.push(e4);
          } } };
        } };
    }
  }, Constraint: (e2) => {
    switch (e2.getAttribute("name")) {
      case "KVPEncoding":
        return { DefaultValue: (e3) => {
          r = "true" === e3.textContent.toLowerCase();
        } };
      case "ImplementsResultPaging":
        return { DefaultValue: (e3) => {
          n3.GetFeature.supportsPagination = "true" === e3.textContent.toLowerCase();
        } };
    }
  } } }), n3.GetFeature.outputFormat = L(o3) ?? L(a), !r) throw new s(k, "WFS service doesn't support key/value pair (KVP) encoding");
  if (null == n3.GetFeature.outputFormat) throw new s(R, "WFS service doesn't support GeoJSON output format");
  return n3;
}
function D(e, t) {
  dt(e) && (F(e, t.operations.DescribeFeatureType.url, true) && (t.operations.DescribeFeatureType.url = $t(t.operations.DescribeFeatureType.url)), F(e, t.operations.GetFeature.url, true) && (t.operations.GetFeature.url = $t(t.operations.GetFeature.url)));
}
function V(e) {
  const t = parseInt(e.textContent?.match(/(?<wkid>\d+$)/i)?.groups?.wkid ?? "", 10);
  if (!Number.isNaN(t)) return t;
}
function O2(e) {
  return n2(e, { FeatureTypeList: { FeatureType: (e2) => {
    const t = { typeName: "undefined:undefined", name: "", title: "", description: "", extent: null, namespacePrefix: "", namespaceUri: "", defaultSpatialReference: 4326, supportedSpatialReferences: [] }, r = /* @__PURE__ */ new Set();
    return o2(e2, { Name: (e3) => {
      const { name: r2, prefix: n3 } = re(e3.textContent);
      t.typeName = `${n3}:${r2}`, t.name = r2, t.namespacePrefix = n3, t.namespaceUri = e3.lookupNamespaceURI(n3);
    }, Abstract: (e3) => {
      t.description = e3.textContent;
    }, Title: (e3) => {
      t.title = e3.textContent;
    }, WGS84BoundingBox: (e3) => {
      t.extent = z.fromJSON($(e3));
    }, DefaultCRS: (e3) => {
      const n3 = V(e3);
      n3 && (t.defaultSpatialReference = n3, r.add(n3));
    }, OtherCRS: (e3) => {
      const t2 = V(e3);
      t2 && r.add(t2);
    } }), t.title || (t.title = t.name), r.add(4326), t.supportedSpatialReferences.push(...r), t;
  } } });
}
function $(e) {
  let t, r, n3, a;
  for (const o3 of e.children) switch (o3.localName) {
    case "LowerCorner":
      [t, r] = o3.textContent.split(" ").map((e2) => Number.parseFloat(e2));
      break;
    case "UpperCorner":
      [n3, a] = o3.textContent.split(" ").map((e2) => Number.parseFloat(e2));
  }
  return { xmin: t, ymin: r, xmax: n3, ymax: a, spatialReference: U };
}
function Y(e, t, n3) {
  return o(e, (e2) => n3 ? e2.name === t && e2.namespaceUri === n3 : e2.typeName === t || e2.name === t);
}
async function W(e, t, r, n3 = {}) {
  const { featureType: a, extent: o3 } = await X(e, t, r, n3), { spatialReference: s3 } = oe(e.operations.GetFeature.url, a, n3.spatialReference), { fields: i, geometryType: p, swapXY: u2, objectIdField: c, geometryField: m2 } = await q(e, a, s3, n3);
  return { url: e.operations.GetCapabilities.url, name: a.name, namespaceUri: a.namespaceUri, fields: i, geometryField: m2, geometryType: p, objectIdField: c, spatialReference: n3.spatialReference ?? new f({ wkid: a.defaultSpatialReference }), extent: o3, swapXY: u2, wfsCapabilities: e, customParameters: n3.customParameters };
}
async function X(e, r, n3, a = {}) {
  const o3 = e.readFeatureTypes(), s3 = r ? Y(o3, r, n3) : o3.next().value, { spatialReference: i = new f({ wkid: s3?.defaultSpatialReference }) } = a;
  if (null == s3) throw r ? new s(E, `The type '${r}' could not be found in the service`) : new s(C, "The service is empty");
  let m2 = s3.extent;
  if (m2 && !s2(m2.spatialReference, i)) try {
    await Q(m2.spatialReference, i, void 0, a), m2 = O(m2, i);
  } catch {
    throw new s(N, "Projection not supported");
  }
  return { extent: m2, spatialReference: i, featureType: s3 };
}
async function q(e, r, n3, a = {}) {
  const { typeName: o3 } = r, [s3, i] = await Promise.allSettled([J(e.operations.DescribeFeatureType.url, o3, a), _(e, o3, n3, a)]), p = (e2) => new s(x, `An error occurred while getting info about the feature type '${o3}'`, { error: e2 });
  if ("rejected" === s3.status) throw p(s3.reason);
  if ("rejected" === i.status) throw p(i.reason);
  const { fields: u2, errors: l } = s3.value ?? {}, c = s3.value?.geometryType || i.value?.geometryType, m2 = i.value?.swapXY ?? false;
  if (null == c) throw new s(j, `The geometry type could not be determined for type '${o3}`, { typeName: o3, geometryType: c, fields: u2, errors: l });
  return { ...z2(u2 ?? []), geometryType: c, swapXY: m2 };
}
function z2(e) {
  const t = e.find((e2) => "geometry" === e2.type);
  let r = e.find((e2) => "oid" === e2.type);
  return e = e.filter((e2) => "geometry" !== e2.type), r || (r = new m({ name: F2, type: "oid", alias: F2 }), e.unshift(r)), { geometryField: t?.name ?? null, objectIdField: r.name, fields: e };
}
async function _(t, r, n3, a = {}) {
  let o3, s3 = false;
  const [i, p] = await Promise.all([K(t.operations.GetFeature.url, r, n3, t.operations.GetFeature.outputFormat, { ...a, count: 1 }), H(t.operations.GetFeature.url, { responseType: "text", query: Z(r, n3, void 0, { ...a, count: 1 }), signal: a?.signal })]), u2 = "FeatureCollection" === i.type && i.features[0]?.geometry;
  if (u2) {
    let e;
    switch (o3 = y.fromJSON(u(u2.type)), u2.type) {
      case "Point":
        e = u2.coordinates;
        break;
      case "LineString":
      case "MultiPoint":
        e = u2.coordinates[0];
        break;
      case "MultiLineString":
      case "Polygon":
        e = u2.coordinates[0][0];
        break;
      case "MultiPolygon":
        e = u2.coordinates[0][0][0];
    }
    const t2 = /<[^>]*pos[^>]*> *(-?\d+(?:\.\d+)?) (-?\d+(?:\.\d+)?)/.exec(p.data);
    if (t2) {
      const r2 = e[0].toFixed(3), n4 = e[1].toFixed(3), a2 = parseFloat(t2[1]).toFixed(3);
      r2 === parseFloat(t2[2]).toFixed(3) && n4 === a2 && (s3 = true);
    }
  }
  return { geometryType: o3, swapXY: s3 };
}
async function J(t, r, n3) {
  return Q2(r, (await H(t, { responseType: "text", query: { SERVICE: "WFS", REQUEST: "DescribeFeatureType", VERSION: S, TYPENAME: r, TYPENAMES: r, ...n3?.customParameters }, signal: n3?.signal })).data);
}
function Q2(e, n3) {
  const { name: a } = re(e), o3 = te(n3);
  ae(o3);
  const s3 = o(n2(o3.firstElementChild, { element: (e2) => e2 }), (e2) => e2.getAttribute("name") === a);
  if (null != s3) {
    const e2 = s3.getAttribute("type"), t = e2 ? o(n2(o3.firstElementChild, { complexType: (e3) => e3 }), (t2) => t2.getAttribute("name") === re(e2).name) : o(n2(s3, { complexType: (e3) => e3 }), () => true);
    if (t) return B(t);
  }
  throw new s(E, `Type '${e}' not found in document`, { document: new XMLSerializer().serializeToString(o3) });
}
var H2 = /* @__PURE__ */ new Set(["objectid", "fid"]);
function B(e) {
  const r = [], n3 = [];
  let a;
  const o3 = n2(e, { complexContent: { extension: { sequence: { element: (e2) => e2 } } } });
  for (const s3 of o3) {
    const o4 = s3.getAttribute("name");
    if (!o4) continue;
    let i, p;
    if (s3.hasAttribute("type") ? i = re(s3.getAttribute("type")).name : o2(s3, { simpleType: { restriction: (e2) => (i = re(e2.getAttribute("base")).name, { maxLength: (e3) => {
      p = +e3.getAttribute("value");
    } }) } }), !i) continue;
    const u2 = "true" === s3.getAttribute("nillable");
    let l = false;
    switch (i.toLowerCase()) {
      case "integer":
      case "nonpositiveinteger":
      case "negativeinteger":
      case "long":
      case "int":
      case "short":
      case "byte":
      case "nonnegativeinteger":
      case "unsignedlong":
      case "unsignedint":
      case "unsignedshort":
      case "unsignedbyte":
      case "positiveinteger":
        n3.push(new m({ name: o4, alias: o4, type: "integer", nullable: u2, length: ne("integer") }));
        break;
      case "float":
      case "double":
      case "decimal":
        n3.push(new m({ name: o4, alias: o4, type: "double", nullable: u2, length: ne("double") }));
        break;
      case "boolean":
      case "string":
      case "gyearmonth":
      case "gyear":
      case "gmonthday":
      case "gday":
      case "gmonth":
      case "anyuri":
      case "qname":
      case "notation":
      case "normalizedstring":
      case "token":
      case "language":
      case "idrefs":
      case "entities":
      case "nmtoken":
      case "nmtokens":
      case "name":
      case "ncname":
      case "id":
      case "idref":
      case "entity":
      case "duration":
      case "time":
        n3.push(new m({ name: o4, alias: o4, type: "string", nullable: u2, length: p ?? ne("string") }));
        break;
      case "datetime":
      case "date":
        n3.push(new m({ name: o4, alias: o4, type: "date", nullable: u2, length: p ?? ne("date") }));
        break;
      case "pointpropertytype":
        a = "point", l = true;
        break;
      case "multipointpropertytype":
        a = "multipoint", l = true;
        break;
      case "curvepropertytype":
      case "multicurvepropertytype":
      case "multilinestringpropertytype":
        a = "polyline", l = true;
        break;
      case "surfacepropertytype":
      case "multisurfacepropertytype":
      case "multipolygonpropertytype":
        a = "polygon", l = true;
        break;
      case "geometrypropertytype":
      case "multigeometrypropertytype":
        l = true, r.push(new s(j, `geometry type '${i}' is not supported`, { type: new XMLSerializer().serializeToString(e) }));
        break;
      default:
        r.push(new s(A, `Unknown field type '${i}'`, { type: new XMLSerializer().serializeToString(e) }));
    }
    l && n3.push(new m({ name: o4, alias: o4, type: "geometry", nullable: u2 }));
  }
  for (const t of n3) if ("integer" === t.type && !t.nullable && H2.has(t.name.toLowerCase())) {
    t.type = "oid";
    break;
  }
  return { geometryType: a, fields: n3, errors: r };
}
async function K(r, n3, a, o3, s3) {
  let { data: i } = await H(r, { responseType: "text", query: Z(n3, a, o3, s3), signal: s3?.signal });
  i = i.replaceAll(/": +(-?\d+),(\d+)(,)?/g, '": $1.$2$3');
  try {
    return JSON.parse(i);
  } catch (p) {
    throw new s(P, "Error while parsing the response", { response: i, error: p });
  }
}
function Z(e, t, r, n3) {
  const a = "number" == typeof t ? t : t.wkid;
  return { SERVICE: "WFS", REQUEST: "GetFeature", VERSION: S, TYPENAMES: e, OUTPUTFORMAT: r, SRSNAME: "EPSG:" + a, STARTINDEX: n3?.startIndex, COUNT: n3?.count, ...n3?.customParameters };
}
async function ee(t, r, n3) {
  const a = await H(t, { responseType: "text", query: { SERVICE: "WFS", REQUEST: "GetFeature", VERSION: S, TYPENAMES: r, RESULTTYPE: "hits", ...n3?.customParameters }, signal: n3?.signal }), o3 = /numberMatched=["'](?<numberMatched>\d+)["']/gi.exec(a.data);
  if (o3?.groups) return +o3.groups.numberMatched;
}
function te(e) {
  return new DOMParser().parseFromString(e.trim(), "text/xml");
}
function re(e) {
  const [t, r] = e.split(":");
  return { prefix: r ? t : "", name: r ?? t };
}
function ne2(e) {
  const r = e.firstElementChild?.getAttribute("version");
  if (r && r !== S) throw new s(G, `Unsupported WFS version ${r}. Supported version: ${S}`);
}
function ae(e) {
  let r = "", n3 = "";
  if (o2(e.firstElementChild, { Exception: (e2) => (r = e2.getAttribute("exceptionCode"), { ExceptionText: (e3) => {
    n3 = e3.textContent;
  } }) }), r) throw new s(`wfs-layer:${r}`, n3);
}
function oe(e, t, r) {
  const n3 = { wkid: t.defaultSpatialReference }, a = null != r?.wkid ? { wkid: r.wkid } : n3;
  return { spatialReference: a, getFeatureSpatialReference: d(e) || a.wkid && t.supportedSpatialReferences.includes(a.wkid) ? { wkid: a.wkid } : { wkid: t.defaultSpatialReference } };
}

export {
  F2 as F,
  v,
  Y,
  W,
  z2 as z,
  K,
  ee,
  oe
};
//# sourceMappingURL=chunk-YW4E5EBT.js.map
