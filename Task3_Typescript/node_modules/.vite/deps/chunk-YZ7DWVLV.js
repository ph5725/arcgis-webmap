import {
  o as o2
} from "./chunk-QRQFF5JU.js";
import {
  n,
  p
} from "./chunk-WEJSS4SJ.js";
import {
  n as n2
} from "./chunk-VM7TVSSO.js";
import {
  i as i3
} from "./chunk-MXSL6LZA.js";
import {
  R
} from "./chunk-X3UT6DT7.js";
import {
  i as i2,
  u as u4
} from "./chunk-J7LSFQNH.js";
import {
  f as f3,
  s as s3,
  u as u5
} from "./chunk-SYPTUUSZ.js";
import {
  u as u2
} from "./chunk-6QTMK7BB.js";
import {
  d
} from "./chunk-2IMSGFJN.js";
import {
  u as u3
} from "./chunk-HNQNVI5C.js";
import {
  l as l3
} from "./chunk-KE3WBZYL.js";
import {
  T,
  e2 as e
} from "./chunk-VCRP2PLV.js";
import {
  r as r3
} from "./chunk-BDLVUYG2.js";
import {
  i
} from "./chunk-6QA2BVC5.js";
import {
  V
} from "./chunk-X3R5OB6L.js";
import {
  f as f2,
  v
} from "./chunk-N3A2BVTW.js";
import {
  l as l2,
  m as m3
} from "./chunk-IGYEHOTB.js";
import {
  a as a2
} from "./chunk-A3VAC24F.js";
import {
  z
} from "./chunk-O5TPFXRT.js";
import {
  o
} from "./chunk-JUAPMINU.js";
import {
  f
} from "./chunk-PK2ZR2SJ.js";
import {
  r as r2
} from "./chunk-YFPGM5UE.js";
import {
  Z,
  c
} from "./chunk-OXSERRAR.js";
import {
  l
} from "./chunk-E3KEUGUG.js";
import {
  b,
  m as m2
} from "./chunk-N3XLUQJI.js";
import {
  a2 as a
} from "./chunk-JUAD7TJ6.js";
import {
  m
} from "./chunk-VHLUKPRH.js";
import {
  r
} from "./chunk-5TPMG26T.js";
import {
  H
} from "./chunk-ZWFY3WY5.js";
import {
  u
} from "./chunk-S7IJH524.js";
import {
  k,
  s as s2
} from "./chunk-GZ2P4SCJ.js";
import {
  s
} from "./chunk-XWG6QGFK.js";
import {
  L,
  has
} from "./chunk-FXKORAMT.js";

// node_modules/@arcgis/core/views/layers/support/highlightUtils.js
function i4(i5) {
  if (!i5) return [];
  let e2 = i(i5) ? [i5] : V.isCollection(i5) ? i5.toArray() : Array.isArray(i5) ? i5 : [];
  return e2 = e2?.filter(L), 0 === (e2?.length ?? 0) ? [] : e2;
}

// node_modules/@arcgis/core/rest/operations/identify.js
function o3(e2, r4) {
  const { dpi: n3, gdbVersion: s4, geometry: o4, geometryPrecision: a5, height: m6, historicMoment: p3, layerOption: f5, mapExtent: y, maxAllowableOffset: u8, returnFieldName: c3, returnGeometry: d3, returnUnformattedValues: g, returnZ: x, spatialReference: h, timeExtent: b2, tolerance: E, width: O } = e2.toJSON(), { dynamicLayers: S, layerDefs: j, layerIds: N } = l4(e2), $ = null != r4?.geometry ? r4.geometry : null, I = { historicMoment: p3, geometryPrecision: a5, maxAllowableOffset: u8, returnFieldName: c3, returnGeometry: d3, returnUnformattedValues: g, returnZ: x, tolerance: E }, R3 = $?.toJSON() || o4;
  I.imageDisplay = `${O},${m6},${n3}`, s4 && (I.gdbVersion = s4), R3 && (delete R3.spatialReference, I.geometry = JSON.stringify(R3), I.geometryType = v(R3));
  const U2 = h ?? R3?.spatialReference ?? y?.spatialReference;
  if (U2 && (I.sr = c(U2)), I.time = b2 ? [b2.start, b2.end].join(",") : null, y) {
    const { xmin: e3, ymin: t, xmax: r5, ymax: i5 } = y;
    I.mapExtent = `${e3},${t},${r5},${i5}`;
  }
  return j && (I.layerDefs = j), S && !j && (I.dynamicLayers = S), I.layers = "popup" === f5 ? "visible" : f5, N && !S && (I.layers += `:${N.join(",")}`), I;
}
function l4(e2) {
  const { mapExtent: t, floors: i5, width: o4, sublayers: l5, layerIds: m6, layerOption: p3, gdbVersion: f5 } = e2, y = l5?.find((e3) => null != e3.layer)?.layer?.serviceSublayers, u8 = "popup" === p3, c3 = {}, d3 = i2({ extent: t, width: o4, spatialReference: t?.spatialReference }), g = [], x = (e3) => {
    const t2 = 0 === d3, r4 = 0 === e3.minScale || d3 <= e3.minScale, i6 = 0 === e3.maxScale || d3 >= e3.maxScale;
    if (e3.visible && (t2 || r4 && i6)) if (e3.sublayers) e3.sublayers.forEach(x);
    else {
      if (false === m6?.includes(e3.id) || u8 && (!e3.popupTemplate || !e3.popupEnabled)) return;
      g.unshift(e3);
    }
  };
  if (l5?.forEach(x), l5 && !g.length) c3.layerIds = [];
  else {
    const e3 = i3(g, y, f5), t2 = g.map((e4) => {
      const t3 = n2(i5, e4);
      return e4.toExportImageJSON(t3);
    });
    if (e3) c3.dynamicLayers = JSON.stringify(t2);
    else {
      if (l5) {
        let e5 = g.map(({ id: e6 }) => e6);
        m6 && (e5 = e5.filter((e6) => m6.includes(e6))), c3.layerIds = e5;
      } else m6?.length && (c3.layerIds = m6);
      const e4 = a3(i5, g);
      if (null != e4 && e4.length) {
        const t3 = {};
        for (const r4 of e4) r4.definitionExpression && (t3[r4.id] = r4.definitionExpression);
        Object.keys(t3).length && (c3.layerDefs = JSON.stringify(t3));
      }
    }
  }
  return c3;
}
function a3(t, r4) {
  const i5 = !!t?.length, s4 = r4.filter((e2) => null != e2.definitionExpression || i5 && null != e2.floorInfo);
  return s4.length ? s4.map((r5) => {
    const i6 = n2(t, r5), s5 = r3(i6, r5.definitionExpression);
    return { id: r5.id, definitionExpression: s5 ?? void 0 };
  }) : null;
}

// node_modules/@arcgis/core/rest/support/IdentifyParameters.js
var u6;
var c2 = u6 = class extends l {
  static from(t) {
    return m(u6, t);
  }
  constructor(t) {
    super(t), this.dpi = 96, this.floors = null, this.gdbVersion = null, this.geometry = null, this.geometryPrecision = null, this.height = 400, this.historicMoment = null, this.layerIds = null, this.layerOption = "top", this.mapExtent = null, this.maxAllowableOffset = null, this.returnFieldName = true, this.returnGeometry = false, this.returnM = false, this.returnUnformattedValues = true, this.returnZ = false, this.spatialReference = null, this.sublayers = null, this.timeExtent = null, this.tolerance = null, this.width = 400;
  }
  writeHistoricMoment(t, e2) {
    e2.historicMoment = t && t.getTime();
  }
};
r([m2({ type: Number, json: { write: true } })], c2.prototype, "dpi", void 0), r([m2()], c2.prototype, "floors", void 0), r([m2({ type: String, json: { write: true } })], c2.prototype, "gdbVersion", void 0), r([m2({ types: l2, json: { read: f2, write: true } })], c2.prototype, "geometry", void 0), r([m2({ type: Number, json: { write: true } })], c2.prototype, "geometryPrecision", void 0), r([m2({ type: Number, json: { write: true } })], c2.prototype, "height", void 0), r([m2({ type: Date })], c2.prototype, "historicMoment", void 0), r([r2("historicMoment")], c2.prototype, "writeHistoricMoment", null), r([m2({ type: [Number], json: { write: true } })], c2.prototype, "layerIds", void 0), r([m2({ type: ["top", "visible", "all", "popup"], json: { write: true } })], c2.prototype, "layerOption", void 0), r([m2({ type: z, json: { write: true } })], c2.prototype, "mapExtent", void 0), r([m2({ type: Number, json: { write: true } })], c2.prototype, "maxAllowableOffset", void 0), r([m2({ type: Boolean, json: { write: true } })], c2.prototype, "returnFieldName", void 0), r([m2({ type: Boolean, json: { write: true } })], c2.prototype, "returnGeometry", void 0), r([m2({ type: Boolean, json: { write: true } })], c2.prototype, "returnM", void 0), r([m2({ type: Boolean, json: { write: true } })], c2.prototype, "returnUnformattedValues", void 0), r([m2({ type: Boolean, json: { write: true } })], c2.prototype, "returnZ", void 0), r([m2({ type: f, json: { write: true } })], c2.prototype, "spatialReference", void 0), r([m2({ type: V })], c2.prototype, "sublayers", void 0), r([m2({ type: u2, json: { write: true } })], c2.prototype, "timeExtent", void 0), r([m2({ type: Number, json: { write: true } })], c2.prototype, "tolerance", void 0), r([m2({ type: Number, json: { write: true } })], c2.prototype, "width", void 0), c2 = u6 = r([a("esri.rest.support.IdentifyParameters")], c2);
var d2 = c2;

// node_modules/@arcgis/core/rest/support/IdentifyResult.js
var u7 = class extends l {
  constructor(r4) {
    super(r4), this.displayFieldName = null, this.feature = null, this.layerId = null, this.layerName = null;
  }
  readFeature(r4, t) {
    return d.fromJSON({ attributes: { ...t.attributes }, geometry: { ...t.geometry } });
  }
  writeFeature(r4, e2) {
    if (!r4) return;
    const { attributes: t, geometry: o4 } = r4;
    t && (e2.attributes = { ...t }), null != o4 && (e2.geometry = o4.toJSON(), e2.geometryType = m3.toJSON(o4.type));
  }
};
r([m2({ type: String, json: { write: true } })], u7.prototype, "displayFieldName", void 0), r([m2({ type: d })], u7.prototype, "feature", void 0), r([o("feature", ["attributes", "geometry"])], u7.prototype, "readFeature", null), r([r2("feature")], u7.prototype, "writeFeature", null), r([m2({ type: Number, json: { write: true } })], u7.prototype, "layerId", void 0), r([m2({ type: String, json: { write: true } })], u7.prototype, "layerName", void 0), u7 = r([a("esri.rest.support.IdentifyResult")], u7);
var m4 = u7;

// node_modules/@arcgis/core/rest/identify.js
async function f4(u8, i5, f5) {
  const c3 = (i5 = a4(i5)).geometry ? [i5.geometry] : [], l5 = f3(u8);
  return l5.path += "/identify", R(c3).then((e2) => {
    const t = o3(i5, { geometry: e2?.[0] }), u9 = u5({ ...l5.query, f: "json", ...t }), a5 = s3(u9, f5);
    return H(l5.path, a5).then(m5).then((r4) => p2(r4, i5.sublayers));
  });
}
function m5(r4) {
  const e2 = r4.data;
  return e2.results = e2.results || [], e2.exceededTransferLimit = Boolean(e2.exceededTransferLimit), e2.results = e2.results.map((r5) => m4.fromJSON(r5)), e2;
}
function a4(r4) {
  return r4 = d2.from(r4);
}
function p2(r4, e2) {
  if (!e2?.length) return r4;
  const t = /* @__PURE__ */ new Map();
  function o4(r5) {
    t.set(r5.id, r5), r5.sublayers && r5.sublayers.forEach(o4);
  }
  e2.forEach(o4);
  for (const s4 of r4.results) s4.feature.sourceLayer = t.get(s4.layerId);
  return r4;
}

// node_modules/@arcgis/core/views/layers/support/MapServiceLayerViewHelper.js
var F = null;
function _(e2, t) {
  return "tile" === t.type || "map-image" === t.type;
}
var P = class extends b {
  constructor(e2) {
    super(e2), this._featuresResolutions = /* @__PURE__ */ new WeakMap(), this.highlightGraphics = null, this.highlightGraphicUpdated = null, this.updateHighlightedFeatures = k(async (e3) => {
      this.destroyed || this.updatingHandles.addPromise(this._updateHighlightedFeaturesGeometries(e3).catch(() => {
      }));
    });
  }
  initialize() {
    const e2 = (e3) => {
      for (const t of e3) {
        const { sourceLayer: e4 } = t;
        null != e4 && "geometryType" in e4 && "point" === e4.geometryType && t.visible && (t.visible = false, this.highlightGraphicUpdated?.({ graphic: t, property: "visible", oldValue: true, newValue: false }));
      }
      this.updatingHandles.addPromise(this._updateHighlightedFeaturesSymbols(e3).catch(() => {
      })), this.updateHighlightedFeatures(this._highlightGeometriesResolution);
    };
    this.addHandles([a2(() => this.highlightGraphics, "change", (t) => e2(t.added), { onListenerAdd: (t) => e2(t) })]);
  }
  async fetchPopupFeaturesAtLocation(e2, t) {
    const { layerView: { layer: r4, view: { scale: s4 } } } = this;
    if (!e2) throw new s("fetchPopupFeatures:invalid-area", "Nothing to fetch without area", { layer: r4 });
    const o4 = G(r4.sublayers, s4, t);
    if (!o4.length) return [];
    const a5 = await U(r4, o4);
    if (!((r4.capabilities?.operations?.supportsIdentify ?? true) && r4.version >= 10.5) && !a5) throw new s("fetchPopupFeatures:not-supported", "query operation is disabled for this service", { layer: r4 });
    return a5 ? this._fetchPopupFeaturesUsingQueries(e2, o4, t) : this._fetchPopupFeaturesUsingIdentify(e2, o4, t);
  }
  clearHighlights() {
    this.highlightGraphics?.removeAll();
  }
  async _updateHighlightedFeaturesSymbols(e2) {
    for (const t of e2) this._updateSymbology(t);
  }
  _updateSymbology(e2) {
    if ("point" === e2.geometry?.type) return this._updatePointSymbology(e2);
  }
  _setGraphicSymbol(e2, t) {
    if (!t) return;
    const r4 = e2.symbol;
    e2.symbol = t, this.highlightGraphicUpdated?.({ graphic: e2, property: "symbol", oldValue: r4, newValue: t });
  }
  _updatePointSymbology(e2) {
    const r4 = e2.sourceLayer && "renderer" in e2.sourceLayer && e2.sourceLayer.renderer, { highlightGraphicUpdated: s4, highlightGraphics: i5, layerView: { view: o4 } } = this, a5 = (e3) => {
      e3.visible || (e3.visible = true, s4?.({ graphic: e3, property: "visible", oldValue: false, newValue: true }));
    };
    r4 && "getSymbolAsync" in r4 ? r4.getSymbolAsync(e2).then(async (s5) => {
      s5 ||= new u3();
      let l5 = null;
      const n3 = "visualVariables" in r4 ? r4.visualVariables?.find((e3) => "size" === e3.type) : void 0;
      n3 && (F || (F = (await import("./visualVariableUtils-YHLE7DFA.js")).getSize), l5 = F(n3, e2, { view: o4.type, scale: o4.scale, shape: "simple-marker" === s5.type ? s5.style : null })), l5 ||= "width" in s5 && "height" in s5 && null != s5.width && null != s5.height ? Math.max(s5.width, s5.height) : "size" in s5 ? s5.size : 16, i5?.includes(e2) && (this._setGraphicSymbol(e2, new u3({ style: "square", size: l5, color: new l3([255, 255, 255, 1 / 255]), xoffset: "xoffset" in s5 ? s5.xoffset : 0, yoffset: "yoffset" in s5 ? s5.yoffset : 0 })), a5(e2));
    }) : a5(e2);
  }
  async _updateHighlightedFeaturesGeometries(e2) {
    const { layerView: { layer: t, view: r4 }, highlightGraphics: s4, highlightGraphicUpdated: i5 } = this;
    if (this._highlightGeometriesResolution = e2, !i5 || !s4?.length || !t.capabilities.operations.supportsQuery) return;
    const a5 = this._getTargetResolution(e2), l5 = /* @__PURE__ */ new Map();
    for (const c3 of s4) if (!this._featuresResolutions.has(c3) || this._featuresResolutions.get(c3) > a5) {
      const e3 = c3.sourceLayer;
      u(l5, e3, () => /* @__PURE__ */ new Map()).set(c3.getObjectId(), c3);
    }
    const n3 = Array.from(l5, ([e3, t2]) => {
      const s5 = e3.createQuery();
      return s5.objectIds = [...t2.keys()], s5.outFields = [e3.objectIdField], s5.returnGeometry = true, s5.maxAllowableOffset = a5, s5.outSpatialReference = r4.spatialReference, e3.queryFeatures(s5);
    }), p3 = await Promise.all(n3);
    if (!this.destroyed) for (const { features: o4 } of p3) for (const e3 of o4) {
      const t2 = e3.sourceLayer, r5 = l5.get(t2).get(e3.getObjectId());
      if (r5 && s4.includes(r5)) {
        const t3 = r5.geometry;
        r5.geometry = e3.geometry, i5({ graphic: r5, property: "geometry", oldValue: t3, newValue: r5.geometry }), this._featuresResolutions.set(r5, a5);
      }
    }
  }
  _getTargetResolution(e2) {
    const t = e2 * Z(this.layerView.view.spatialReference), r4 = t / 16;
    return r4 <= 10 ? 0 : e2 / t * r4;
  }
  async _fetchPopupFeaturesUsingIdentify(e2, t, r4) {
    const s4 = await this._createIdentifyParameters(e2, t, r4);
    if (null == s4) return [];
    const { results: i5 } = await f4(this.layerView.layer.parsedUrl, s4, r4);
    return i5.map((e3) => e3.feature);
  }
  async _createIdentifyParameters(e2, t, r4) {
    const { floors: s4, layer: i5, timeExtent: o4, view: { spatialReference: a5, scale: l5 } } = this.layerView;
    if (!t.length) return null;
    await Promise.all(t.map(({ sublayer: e3 }) => e3.load(r4).catch(() => {
    })));
    const n3 = Math.min(has("mapservice-popup-identify-max-tolerance"), i5.allSublayers.reduce((e3, t2) => t2.renderer ? o2({ renderer: t2.renderer, pointerType: r4?.pointerType }) : e3, 2)), p3 = this.createFetchPopupFeaturesQueryGeometry(e2, n3), c3 = u4(l5, a5), u8 = Math.round(p3.width / c3), h = new z({ xmin: p3.center.x - c3 * u8, ymin: p3.center.y - c3 * u8, xmax: p3.center.x + c3 * u8, ymax: p3.center.y + c3 * u8, spatialReference: p3.spatialReference });
    return new d2({ floors: s4, gdbVersion: "gdbVersion" in i5 ? i5.gdbVersion : void 0, geometry: e2, height: u8, layerOption: "popup", mapExtent: h, returnGeometry: true, spatialReference: a5, sublayers: i5.sublayers, timeExtent: o4, tolerance: n3, width: u8 });
  }
  async _fetchPopupFeaturesUsingQueries(e2, t, r4) {
    const { layerView: { floors: i5, timeExtent: o4 } } = this, a5 = t.map(async ({ sublayer: t2, popupTemplate: s4 }) => {
      if (await t2.load(r4).catch(() => {
      }), t2.capabilities && !t2.capabilities.operations.supportsQuery) return [];
      const a6 = t2.createQuery(), n3 = o2({ renderer: t2.renderer, pointerType: r4?.pointerType }), c3 = this.createFetchPopupFeaturesQueryGeometry(e2, n3), u8 = /* @__PURE__ */ new Set(), [h] = await Promise.all([n(t2, s4), t2.renderer?.collectRequiredFields(u8, t2.fieldsIndex)]);
      s2(r4), T(u8, t2.fieldsIndex, h);
      const y = Array.from(u8).sort();
      a6.geometry = c3, a6.outFields = y, a6.timeExtent = o4;
      const m6 = n2(i5, t2);
      if (a6.where = r3(a6.where, m6), t2.capabilities?.query.supportsOrderBy && t2.orderBy?.[0]) {
        const e3 = t2.orderBy[0], r5 = !e3.valueExpression && e3.field, s5 = "ascending" === e3.order ? "asc" : "desc";
        r5 && (a6.orderByFields = [`${r5} ${s5}`]);
      }
      const b2 = this._getTargetResolution(c3.width / n3), w = await V2(s4);
      s2(r4);
      const v2 = "point" === t2.geometryType || w && w.arcadeUtils.hasGeometryOperations(s4);
      v2 || (a6.maxAllowableOffset = b2);
      let { features: j } = await t2.queryFeatures(a6, r4);
      const S = v2 ? 0 : b2;
      j = await R2(t2, j, r4);
      for (const e3 of j) this._featuresResolutions.set(e3, S);
      return j;
    });
    return (await Promise.allSettled(a5)).reduce((e3, t2) => "fulfilled" === t2.status ? [...e3, ...t2.value] : e3, []).filter(L);
  }
};
function G(e2, t, r4) {
  const s4 = [];
  if (!e2) return s4;
  const i5 = (e3) => {
    const o4 = 0 === e3.minScale || t <= e3.minScale, a5 = 0 === e3.maxScale || t >= e3.maxScale;
    if (e3.visible && o4 && a5) {
      if (e3.sublayers) e3.sublayers.forEach(i5);
      else if (e3.popupEnabled) {
        const t2 = p(e3, { ...r4, defaultPopupTemplateEnabled: false });
        null != t2 && s4.unshift({ sublayer: e3, popupTemplate: t2 });
      }
    }
  };
  return e2.map(i5), s4;
}
function V2(e2) {
  return e2.expressionInfos?.length || Array.isArray(e2.content) && e2.content.some((e3) => "expression" === e3.type) ? e() : Promise.resolve();
}
async function U(e2, t) {
  if (e2.capabilities?.operations?.supportsQuery) return true;
  try {
    return await Promise.any(t.map(({ sublayer: e3 }) => e3.load().then(() => e3.capabilities.operations.supportsQuery)));
  } catch {
    return false;
  }
}
async function R2(e2, t, r4) {
  const s4 = e2.renderer;
  return s4 && "defaultSymbol" in s4 && !s4.defaultSymbol && (t = s4.valueExpression ? await Promise.all(t.map((e3) => s4.getSymbolAsync(e3, r4).then((t2) => t2 ? e3 : null))).then((e3) => e3.filter((e4) => null != e4)) : t.filter((e3) => null != s4.getSymbol(e3))), t;
}
r([m2({ constructOnly: true })], P.prototype, "createFetchPopupFeaturesQueryGeometry", void 0), r([m2({ constructOnly: true })], P.prototype, "layerView", void 0), r([m2({ constructOnly: true })], P.prototype, "highlightGraphics", void 0), r([m2({ constructOnly: true })], P.prototype, "highlightGraphicUpdated", void 0), r([m2({ constructOnly: true })], P.prototype, "updatingHandles", void 0), P = r([a("esri.views.layers.support.MapServiceLayerViewHelper")], P);

export {
  i4 as i,
  _,
  P
};
//# sourceMappingURL=chunk-YZ7DWVLV.js.map
