import {
  Ie,
  be,
  e2 as e,
  we
} from "./chunk-VCRP2PLV.js";
import {
  C,
  F,
  N,
  b,
  x
} from "./chunk-KJSBBQ22.js";
import {
  h,
  n
} from "./chunk-LMEOPAGQ.js";

// node_modules/@arcgis/core/smartMapping/support/utils.js
var f2 = ",";
var h2 = { years: 365, months: 30, days: 1, hours: 1 / 24, minutes: 1 / 1440, seconds: 1 / 86400, milliseconds: 1 / 864e5 };
var v = /* @__PURE__ */ new Set(["integer", "small-integer"]);
var T = null;
function $(t) {
  return Ie(t) || be(t) || we(t);
}
async function U(t) {
  const { field: e2, field2: n2, field3: o, normalizationField: r, valueExpression: i } = t;
  let s = [];
  if (i) {
    if (!T) {
      const { arcadeUtils: t2 } = await e();
      T = t2;
    }
    s = T.extractFieldNames(i);
  }
  return e2 && s.push(e2), n2 && s.push(n2), o && s.push(o), r && s.push(r), s;
}
function S(t) {
  return String(t).padStart(2, "0");
}
function k(t, e2, n2) {
  let o;
  if ("date" === e2 || "number" === e2) {
    "number" === e2 && (t = new Date(t));
    o = `TIMESTAMP'${n2 ? t.getFullYear() : t.getUTCFullYear()}-${S((n2 ? t.getMonth() : t.getUTCMonth()) + 1)}-${S(n2 ? t.getDate() : t.getUTCDate())} ${S(n2 ? t.getHours() : t.getUTCHours())}:${S(n2 ? t.getMinutes() : t.getUTCMinutes())}:${S(n2 ? t.getSeconds() : t.getUTCSeconds())}'`;
  } else o = t;
  return o;
}
function C2(t, e2, n2, o) {
  const { hasQueryEngine: r } = t, i = `(${k(n2, D(t, n2), r)} - ${k(e2, D(t, e2), r)})`;
  let s = h2[o], a = "/";
  s < 1 && (s = 1 / s, a = "*");
  return { sqlExpression: 1 === s ? i : `(${i} ${a} ${s})`, sqlWhere: null };
}
function D(t, e2) {
  if (e2 instanceof Date) return "date";
  if ("number" == typeof e2) return "number";
  if ("string" == typeof e2) {
    const n2 = t.getField(e2);
    if ("<now>" === e2.toLowerCase()) return;
    if (Ie(n2)) return "field";
  }
}
function j(t, e2) {
  const n2 = e2 && t.getField(e2);
  return !!n2 && v.has(n2.type);
}
function M(t) {
  return `cast(${t} as float)`;
}
function N2(i, s) {
  const { format: a, timeZoneOptions: l, fieldType: u } = s ?? {};
  let f3, c;
  if (l && ({ timeZone: f3, timeZoneName: c } = h(l.layerTimeZone, l.datesInUnknownTimezone, l.viewTimeZone, N(a || "short-date-short-time"), u)), "string" == typeof i && isNaN(Date.parse("time-only" === u ? `1970-01-01T${i}Z` : i))) return i;
  switch (u) {
    case "date-only": {
      const n2 = N(a || "short-date");
      return "string" == typeof i ? F(i, { ...n2 }) : C(i, { ...n2, timeZone: n });
    }
    case "time-only": {
      const n2 = N(a || "short-time");
      return "string" == typeof i ? b(i, n2) : C(i, { ...n2, timeZone: n });
    }
    case "timestamp-offset": {
      if (!f3 && "string" == typeof i && new Date(i).toISOString() !== i) return i;
      const o = a || l ? N(a || "short-date-short-time") : void 0, r = o ? { ...o, timeZone: f3, timeZoneName: c } : void 0;
      return "string" == typeof i ? x(i, r) : C(i, r);
    }
    default: {
      const n2 = a || l ? N(a || "short-date-short-time") : void 0;
      return C("string" == typeof i ? new Date(i) : i, n2 ? { ...n2, timeZone: f3, timeZoneName: c } : void 0);
    }
  }
}

export {
  f2 as f,
  $,
  U,
  C2 as C,
  j,
  M,
  N2 as N
};
//# sourceMappingURL=chunk-Z7VYTTYM.js.map
