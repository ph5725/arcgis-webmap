import {
  c2
} from "./chunk-625W4ZH5.js";
import {
  t as t2
} from "./chunk-OOBS22NY.js";
import {
  D,
  E,
  H,
  z
} from "./chunk-A4YQJHJZ.js";
import {
  C,
  C2,
  Ce,
  Dt,
  Gt as Gt2,
  K,
  P,
  Qt,
  Re,
  St,
  Te,
  Tt,
  U,
  W,
  We,
  X,
  Xe,
  Xt,
  Y,
  Ye,
  Yt,
  _ as _3,
  _t,
  ce,
  f as f3,
  g as g2,
  hn,
  j,
  ln,
  m as m3,
  nn,
  oe,
  on,
  rt as rt2,
  sn,
  ue,
  v,
  w,
  ye,
  yn,
  zt
} from "./chunk-JSDQVIZI.js";
import {
  n2 as n3
} from "./chunk-GEY3MNEN.js";
import {
  t
} from "./chunk-3JKD2XXM.js";
import {
  J
} from "./chunk-73JRZP7E.js";
import {
  l,
  r as r6
} from "./chunk-CF5GNPLI.js";
import {
  r as r7
} from "./chunk-LYNZJBHM.js";
import {
  _ as _2
} from "./chunk-SHYE33QH.js";
import {
  $,
  Gt,
  Rt,
  bt,
  kt,
  pt,
  rt
} from "./chunk-55AFRDJF.js";
import {
  n as n2
} from "./chunk-VNTS5E5O.js";
import {
  g,
  o as o2,
  r as r4
} from "./chunk-TMFB3DKM.js";
import {
  a as a2
} from "./chunk-RP7FUW55.js";
import {
  o as o3,
  r as r5,
  u as u2
} from "./chunk-TNW4TPNP.js";
import {
  m as m2
} from "./chunk-VUGQF5TL.js";
import {
  c,
  f as f2
} from "./chunk-MUKDJQWB.js";
import {
  n,
  r as r3
} from "./chunk-RACDQ3AL.js";
import {
  o
} from "./chunk-YIV2QKTZ.js";
import {
  f
} from "./chunk-A3VAC24F.js";
import {
  r as r2
} from "./chunk-FPSA4NFH.js";
import {
  _
} from "./chunk-Q6XRAGMA.js";
import {
  b,
  m
} from "./chunk-N3XLUQJI.js";
import {
  a2 as a
} from "./chunk-JUAD7TJ6.js";
import {
  e,
  r
} from "./chunk-5TPMG26T.js";
import {
  u2 as u
} from "./chunk-GZ2P4SCJ.js";
import {
  has
} from "./chunk-FXKORAMT.js";

// node_modules/@arcgis/core/views/2d/engine/webgl/shaders/BitBlitPrograms.js
var e2 = { shaders: { vertexShader: n3("bitBlit/bitBlit.vert"), fragmentShader: n3("bitBlit/bitBlit.frag") }, attributes: /* @__PURE__ */ new Map([["a_pos", 0], ["a_tex", 1]]) };

// node_modules/@arcgis/core/views/2d/engine/webgl/shaders/StencilPrograms.js
var r8 = { shaders: { vertexShader: n3("stencil/stencil.vert"), fragmentShader: n3("stencil/stencil.frag") }, attributes: /* @__PURE__ */ new Map([["a_pos", 0]]) };

// node_modules/@arcgis/core/views/2d/engine/webgl/shaderGraph/techniques/shaders/BlendShader.js
var q = class extends C2 {
};
r([f3(0, C)], q.prototype, "position", void 0);
var z2 = class extends v {
};
var A = class extends P {
};
r([g2(U)], A.prototype, "layerTexture", void 0), r([g2(U)], A.prototype, "backbufferTexture", void 0), r([g2(_3)], A.prototype, "opacity", void 0), r([g2(_3)], A.prototype, "inFadeOpacity", void 0);
var D2 = class extends j {
  constructor() {
    super(...arguments), this.type = "BlendShader";
  }
  vertex(t6) {
    return { uv: t6.position, glPosition: new Y(z(t6.position), 0, 1) };
  }
  fragment(t6) {
    const l4 = new w(), e3 = yn(this.config.layerTexture, t6.uv), n7 = yn(this.config.backbufferTexture, t6.uv), i = zt(_t(e3.a, new _3(0)), e3.rgb, e3.rgb.divide(e3.a)), a4 = zt(_t(n7.a, new _3(0)), n7.rgb, n7.rgb.divide(n7.a)), o4 = this.config.opacity.multiply(e3.a), u3 = n7.a;
    switch (this.blendMode) {
      case "destination-over":
        l4.fragColor = new Y(i.multiply(o4).multiply(D(u3)).add(a4.multiply(u3)), o4.add(u3).subtract(o4.multiply(u3)));
        break;
      case "source-in":
        {
          const t7 = new Y(i.multiply(o4).multiply(u3), o4.multiply(u3)), e4 = new Y(a4.multiply(u3), u3).multiply(D(this.config.opacity)).multiply(this.config.inFadeOpacity);
          l4.fragColor = t7.add(e4);
        }
        break;
      case "destination-in":
        {
          const t7 = new Y(a4.multiply(u3).multiply(o4), u3.multiply(o4)), e4 = new Y(a4.multiply(u3), u3).multiply(new Y(D(this.config.opacity).multiply(this.config.inFadeOpacity)));
          l4.fragColor = t7.add(e4);
        }
        break;
      case "source-out":
        l4.fragColor = new Y(i.multiply(o4).multiply(D(u3)), o4.multiply(D(u3)));
        break;
      case "destination-out":
        l4.fragColor = new Y(a4.multiply(u3).multiply(D(o4)), u3.multiply(D(o4)));
        break;
      case "source-atop":
        l4.fragColor = new Y(i.multiply(o4).multiply(u3).add(a4.multiply(u3.multiply(D(o4)))), u3);
        break;
      case "destination-atop":
        l4.fragColor = new Y(i.multiply(o4.multiply(D(u3))).add(a4.multiply(u3).multiply(o4)), o4);
        break;
      case "xor":
        l4.fragColor = new Y(i.multiply(o4.multiply(D(u3))).add(a4.multiply(u3.multiply(D(o4)))), o4.multiply(D(u3)).add(u3.multiply(D(o4))));
        break;
      case "multiply":
        l4.fragColor = new Y(i.multiply(o4).multiply(a4.multiply(u3)).add(i.multiply(o4).multiply(D(u3))).add(a4.multiply(u3).multiply(D(o4))), o4.add(u3.multiply(D(o4))));
        break;
      case "screen":
        l4.fragColor = new Y(i.add(a4).subtract(i.multiply(a4)).multiply(o4.multiply(u3)).add(i.multiply(o4).multiply(D(u3))).add(a4.multiply(u3).multiply(D(o4))), o4.add(u3.multiply(D(o4))));
        break;
      case "overlay":
        {
          const t7 = new X(H2(a4.r, i.r), H2(a4.g, i.g), H2(a4.b, i.b));
          l4.fragColor = E2(t7, i, a4, o4, u3);
        }
        break;
      case "darken":
        {
          const t7 = Xe(i, a4);
          l4.fragColor = E2(t7, i, a4, o4, u3);
        }
        break;
      case "lighter":
        l4.fragColor = new Y(i.multiply(o4).add(a4.multiply(u3)), o4.add(u3));
        break;
      case "lighten":
        {
          const t7 = Ce(i, a4);
          l4.fragColor = E2(t7, i, a4, o4, u3);
        }
        break;
      case "color-dodge":
        {
          const t7 = ue(new X(I(a4.r, i.r), I(a4.g, i.g), I(a4.b, i.b)), new X(0), new X(1));
          l4.fragColor = E2(t7, i, a4, o4, u3);
        }
        break;
      case "color-burn":
        {
          const t7 = new X(J2(a4.r, i.r), J2(a4.g, i.g), J2(a4.b, i.b));
          l4.fragColor = E2(t7, i, a4, o4, u3);
        }
        break;
      case "hard-light":
        {
          const t7 = new X(K2(a4.r, i.r), K2(a4.g, i.g), K2(a4.b, i.b));
          l4.fragColor = E2(t7, i, a4, o4, u3);
        }
        break;
      case "soft-light":
        {
          const t7 = new X(L(a4.r, i.r), L(a4.g, i.g), L(a4.b, i.b));
          l4.fragColor = E2(t7, i, a4, o4, u3);
        }
        break;
      case "difference":
        {
          const t7 = Qt(a4.subtract(i));
          l4.fragColor = E2(t7, i, a4, o4, u3);
        }
        break;
      case "exclusion":
        {
          const t7 = i.add(a4).subtract(new _3(2).multiply(i).multiply(a4));
          l4.fragColor = E2(t7, i, a4, o4, u3);
        }
        break;
      case "invert":
        l4.fragColor = new Y(new X(1).subtract(a4).multiply(o4).multiply(u3).add(a4.multiply(u3).multiply(D(o4))), u3);
        break;
      case "vivid-light":
        {
          const t7 = new X(ue(N(a4.r, i.r), new _3(0), new _3(1)), ue(N(a4.g, i.g), new _3(0), new _3(1)), ue(N(a4.b, i.b), new _3(0), new _3(1)));
          l4.fragColor = E2(t7, i, a4, o4, u3);
        }
        break;
      case "hue":
        {
          const t7 = Y2(i, a4, a4);
          l4.fragColor = E2(t7, i, a4, o4, u3);
        }
        break;
      case "saturation":
        {
          const t7 = Y2(a4, i, a4);
          l4.fragColor = E2(t7, i, a4, o4, u3);
        }
        break;
      case "color":
        {
          const t7 = X2(i, a4);
          l4.fragColor = E2(t7, i, a4, o4, u3);
        }
        break;
      case "luminosity":
        {
          const t7 = X2(a4, i);
          l4.fragColor = E2(t7, i, a4, o4, u3);
        }
        break;
      case "plus":
        l4.fragColor = ue(new Y(e3.r.add(a4.r), e3.g.add(a4.g), e3.b.add(a4.b), o4.add(u3)), new Y(0), new Y(1));
        break;
      case "minus":
        l4.fragColor = new Y(ue(new X(a4.r.subtract(e3.r), a4.g.subtract(e3.g), a4.b.subtract(e3.b)), new X(0), new X(1)), u3.multiply(o4));
        break;
      case "average":
        {
          const t7 = a4.add(i).divide(2);
          l4.fragColor = E2(t7, i, a4, o4, u3);
        }
        break;
      case "reflect":
        {
          const t7 = ue(new X(Z(a4.r, i.r), Z(a4.g, i.g), Z(a4.b, i.b)), new X(0), new X(1));
          l4.fragColor = E2(t7, i, a4, o4, u3);
        }
        break;
      default:
        l4.fragColor = e3.multiply(this.config.opacity);
    }
    return l4;
  }
};
function E2(t6, l4, e3, r12, n7) {
  return new Y(t6.multiply(r12).multiply(n7).add(l4.multiply(r12).multiply(D(n7))).add(e3.multiply(n7).multiply(D(r12))), r12.add(n7.multiply(D(r12))));
}
function H2(t6, l4) {
  return new _3(1).subtract(ln(new _3(0.5), l4)).multiply(D(new _3(2).multiply(D(l4).multiply(D(t6))))).add(ln(new _3(0.5), l4).multiply(new _3(2).multiply(l4).multiply(t6)));
}
function I(t6, l4) {
  return zt(_t(t6, new _3(0)), new _3(0), zt(_t(l4, new _3(1)), new _3(1), Xe(new _3(1), t6.divide(new _3(1).subtract(l4)))));
}
function J2(t6, l4) {
  return zt(_t(t6, new _3(1)), new _3(1), zt(_t(l4, new _3(0)), new _3(0), D(Xe(new _3(1), D(t6).divide(l4)))));
}
function K2(t6, l4) {
  return new _3(1).subtract(ln(new _3(0.5), l4)).multiply(new _3(2).multiply(l4).multiply(t6)).add(ln(new _3(0.5), l4).multiply(D(new _3(2).multiply(D(l4).multiply(D(t6))))));
}
function L(t6, l4) {
  return Tt([Yt(l4, new _3(0.5)), () => {
    const e3 = new _3(2).multiply(l4), r12 = D(e3), n7 = D(t6);
    return t6.subtract(r12.multiply(t6).multiply(n7));
  }], [Yt(t6, new _3(0.25)), () => {
    const e3 = new _3(2).multiply(l4), r12 = E(e3).multiply(t6), n7 = new _3(16).multiply(t6).subtract(new _3(12)).multiply(t6).add(new _3(3));
    return t6.add(r12.multiply(n7));
  }], [true, () => {
    const e3 = new _3(2).multiply(l4), r12 = E(e3), n7 = hn(t6).subtract(t6);
    return t6.add(r12.multiply(n7));
  }]);
}
function N(t6, l4) {
  const e3 = D(ln(new _3(0.5), l4)).multiply(J2(t6, new _3(2).multiply(l4))), r12 = ln(new _3(0.5), l4).multiply(I(t6, new _3(2).multiply(H(l4, 0.5))));
  return e3.add(r12);
}
function Q(t6) {
  return Xe(Xe(t6.r, t6.g), t6.b);
}
function R(t6) {
  return Ce(Ce(t6.r, t6.g), t6.b);
}
function U2(t6) {
  return ye(t6, new X(0.3, 0.59, 0.11));
}
function V(t6) {
  return R(t6).subtract(Q(t6));
}
function W2(t6) {
  const l4 = U2(t6), e3 = Q(t6), r12 = R(t6);
  return Tt([Xt(e3, new _3(0)), () => {
    const r13 = t6.subtract(l4).multiply(l4), n7 = l4.subtract(e3);
    return l4.add(r13.divide(n7));
  }], [Gt2(r12, new _3(1)), () => {
    const e4 = t6.subtract(l4), n7 = D(l4), i = e4.multiply(n7), a4 = r12.subtract(l4);
    return l4.add(i.divide(a4));
  }], [true, t6]);
}
function X2(t6, l4) {
  const e3 = U2(t6), r12 = U2(l4).subtract(e3);
  return W2(t6.add(new X(r12)));
}
function Y2(t6, l4, e3) {
  const r12 = Q(t6), n7 = V(t6), i = V(l4);
  return X2(zt(Gt2(n7, new _3(0)), () => t6.subtract(r12).multiply(i).divide(n7), new X(0)), e3);
}
function Z(t6, l4) {
  return zt(_t(l4, new _3(1)), l4, () => {
    const e3 = D(l4), r12 = t6.multiply(t6).divide(e3);
    return Xe(r12, new _3(1));
  });
}
r([K], D2.prototype, "blendMode", void 0), r([g2(A)], D2.prototype, "config", void 0), r([e(0, m3(q))], D2.prototype, "vertex", null), r([e(0, m3(z2))], D2.prototype, "fragment", null);

// node_modules/@arcgis/core/views/2d/engine/webgl/shaderGraph/techniques/shaders/OpacityShader.js
var f4 = class extends C2 {
};
r([f3(0, C)], f4.prototype, "position", void 0);
var g3 = class extends v {
};
var x = class extends P {
};
r([g2(U)], x.prototype, "layerTexture", void 0), r([g2(_3)], x.prototype, "opacity", void 0);
var h = class extends j {
  constructor() {
    super(...arguments), this.type = "OpacityShader";
  }
  vertex(t6) {
    return { uv: t6.position, glPosition: new Y(t6.position.subtract(new C(0.5)).multiply(2), 0, 1) };
  }
  fragment(t6) {
    const o4 = new w();
    return o4.fragColor = yn(this.config.layerTexture, t6.uv).multiply(this.config.opacity), o4;
  }
};
r([g2(x)], h.prototype, "config", void 0), r([e(0, m3(f4))], h.prototype, "vertex", null), r([e(0, m3(g3))], h.prototype, "fragment", null);

// node_modules/@arcgis/core/views/2d/engine/webgl/shaders/HighlightPrograms.js
var t3 = { shaders: { vertexShader: n3("highlight/textured.vert"), fragmentShader: n3("highlight/highlight.frag") }, attributes: /* @__PURE__ */ new Map([["a_position", 0], ["a_texcoord", 1]]) };
var r9 = { shaders: { vertexShader: n3("highlight/textured.vert"), fragmentShader: n3("highlight/blur.frag") }, attributes: /* @__PURE__ */ new Map([["a_position", 0], ["a_texcoord", 1]]) };

// node_modules/@arcgis/core/views/2d/engine/webgl/Profiler.js
var r10 = !!has("esri-2d-profiler");
var n4 = class {
  constructor(n7, i) {
    if (this._events = new o(), this._entries = /* @__PURE__ */ new Map(), this._timings = new t(10), this._currentContainer = null, this._currentPass = null, this._currentBrush = null, this._currentSummary = null, !r10) return;
    this._ext = t2(n7.gl, {}), this._debugOutput = i;
    const o4 = n7.gl;
    if (!this.enableCommandLogging) return;
    let a4;
    for (a4 in o4) if ("function" == typeof o4[a4]) {
      const e3 = o4[a4], t6 = a4.includes("draw");
      o4[a4] = (...s3) => (this._events.emit("command", { container: this._currentContainer, pass: this._currentPass, brush: this._currentBrush, method: a4, args: s3, isDrawCommand: t6 }), this._currentSummary && (this._currentSummary.commands++, t6 && this._currentSummary.drawCommands++), e3.apply(o4, s3));
    }
  }
  get enableCommandLogging() {
    return !("object" == typeof r10 && r10.disableCommands);
  }
  recordContainerStart(e3) {
    r10 && (this._currentContainer = e3);
  }
  recordContainerEnd() {
    r10 && (this._currentContainer = null);
  }
  recordPassStart(e3) {
    r10 && (this._currentPass = e3, this._initSummary());
  }
  recordPassEnd() {
    r10 && (this._currentPass = null, this._emitSummary());
  }
  recordBrushStart(e3) {
    r10 && (this._currentBrush = e3);
  }
  recordBrushEnd() {
    r10 && (this._currentBrush = null);
  }
  recordStart(e3) {
    if (r10 && null != this._ext) {
      if (this._entries.has(e3)) {
        const t7 = this._entries.get(e3), s3 = this._ext.resultAvailable(t7.query), r12 = this._ext.disjoint();
        if (s3 && !r12) {
          const s4 = this._ext.getResult(t7.query) / 1e6;
          let r13 = 0;
          if (null != this._timings.enqueue(s4)) {
            const e4 = this._timings.entries, t8 = e4.length;
            let s5 = 0;
            for (const r14 of e4) s5 += r14;
            r13 = s5 / t8;
          }
          const n7 = s4.toFixed(2), i = r13 ? r13.toFixed(2) : "--";
          this.enableCommandLogging ? (console.groupCollapsed(`Frame report for ${e3}, ${n7} ms (${i} last 10 avg)
${t7.commandsLen} Commands (${t7.drawCommands} draw)`), console.log("RenderPass breakdown: "), console.table(t7.summaries), console.log("Commands: ", t7.commands), console.groupEnd()) : console.log(`Frame report for ${e3}, ${n7} ms (${i} last 10 avg)`), this._debugOutput.innerHTML = `${n7} (${i})`;
        }
        for (const e4 of t7.handles) e4.remove();
        this._ext.deleteQuery(t7.query), this._entries.delete(e3);
      }
      const t6 = { name: e3, query: this._ext.createQuery(), commands: [], commandsLen: 0, drawCommands: 0, summaries: [], handles: [] };
      this.enableCommandLogging && (t6.handles.push(this._events.on("command", (e4) => {
        t6.commandsLen++, t6.commands.push(e4), e4.isDrawCommand && t6.drawCommands++;
      })), t6.handles.push(this._events.on("summary", (e4) => {
        t6.summaries.push(e4);
      }))), this._ext.beginTimeElapsed(t6.query), this._entries.set(e3, t6);
    }
  }
  recordEnd(e3) {
    r10 && null != this._ext && this._entries.has(e3) && this._ext.endTimeElapsed();
  }
  _initSummary() {
    this.enableCommandLogging && (this._currentSummary = { container: this._currentContainer, pass: this._currentPass, drawCommands: 0, commands: 0 });
  }
  _emitSummary() {
    this.enableCommandLogging && this._currentSummary && this._events.emit("summary", this._currentSummary);
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/shaderGraph/techniques/shaders/VideoScreenShader.js
var f5 = class extends C2 {
};
r([f3(0, C)], f5.prototype, "position", void 0), r([f3(1, C)], f5.prototype, "texcoord", void 0), r([f3(2, _3)], f5.prototype, "w", void 0);
var g4 = class extends v {
};
var m4 = class extends P {
};
r([g2(U)], m4.prototype, "texture", void 0), r([g2(_3)], m4.prototype, "opacity", void 0);
var h2 = class extends j {
  constructor() {
    super(...arguments), this.type = "VideoScreenShader";
  }
  vertex(o4) {
    const { position: t6, texcoord: e3, w: r12 } = o4;
    return { glPosition: new Y(t6, 0, r12), texcoord: e3 };
  }
  fragment(o4) {
    const t6 = new w();
    return t6.fragColor = yn(this.config.texture, o4.texcoord).multiply(this.config.opacity), t6;
  }
};
r([g2(m4)], h2.prototype, "config", void 0), r([e(0, m3(f5))], h2.prototype, "vertex", null), r([e(0, m3(g4))], h2.prototype, "fragment", null);

// node_modules/@arcgis/core/views/2d/LabelManager.js
var n5 = 7e6;
var c3 = class {
  constructor() {
    this.styles = /* @__PURE__ */ new Map(), this.layerContexts = /* @__PURE__ */ new Map();
  }
  get cachedStyles() {
    return this.styles;
  }
  setLabelClassStyle(e3, t6, s3) {
    this.layerContexts.set(e3, t6), this.styles.set(e3, s3);
  }
};
var p = class extends b {
  constructor(e3) {
    super(e3), this._faderWorkingSet = [], this._styleRepository = new c3(), this.lastUpdateId = -1, this.updateRequested = false, this.view = null;
    const t6 = (e4, t7) => {
      e4.updateLabelVisibility(), e4.requestRender(), e4.isReady && (e4.decluttered = true);
    };
    this.symbolFader = new c2("feature-tile", this._styleRepository, t6, this._faderWorkingSet, a2, n5);
  }
  get updating() {
    return has("esri-2d-log-updating") && console.log(`Updating LabelManager ${this.updateRequested}:
-> updateRequested: ${this.updateRequested}`), this.updateRequested;
  }
  viewChange() {
    this.requestUpdate();
  }
  requestUpdate() {
    this.updateRequested || (this.updateRequested = true, this.view?.requestUpdate());
  }
  processUpdate(e3) {
    this.doUpdate(e3) ? this.updateRequested = false : (this.updateRequested = true, this.view?.requestUpdate());
  }
  setLabelSchemaStyles(e3, t6) {
    let s3;
    switch (e3.type) {
      case "label":
        s3 = e3.classes;
        break;
      case "subtype":
        s3 = Array.from(Object.values(e3.renderers).flatMap((e4) => e4.classes));
        break;
      case "cluster":
        s3 = [...e3.cluster.classes, ...e3.feature.classes];
        break;
      case "track":
        s3 = [...e3.latestObservation.classes, ...e3.previousObservation.classes, ...e3.trackLine.classes];
    }
    for (const r12 of s3) {
      const e4 = d(r12);
      this._styleRepository.setLabelClassStyle(r12.labelClassId, t6, e4);
    }
  }
  doUpdate(e3) {
    const t6 = this.view;
    if (!t6) return false;
    const s3 = t6.allLayerViews.map((e4) => e4.featureContainer).filter((e4) => !!e4 && e4?.hasLabels);
    if (s3.length > 0) {
      this._faderWorkingSet.length = 0;
      for (const t7 of s3) for (const s4 of t7.tiles || []) s4.setTransform(e3.state), this._faderWorkingSet.push(s4);
      const r12 = e3.state.scale, o4 = t6.featuresTilingScheme.scaleToZoom(r12);
      return this.symbolFader.update(o4, e3.state);
    }
    return true;
  }
};
function d(e3) {
  const t6 = "esriGeometryPolyline" === e3.geometryType ? l.MAP : l.VIEWPORT, s3 = "esriGeometryPolyline" === e3.geometryType ? r6.MAP : r6.VIEWPORT;
  return { geometryType: e3.geometryType, iconAllowOverlap: !e3.deconflictionEnabled, iconIgnorePlacement: false, textAllowOverlap: !e3.deconflictionEnabled, textIgnorePlacement: false, iconRotationAlignment: t6, textRotationAlignment: t6, iconTranslateAnchor: s3, iconTranslate: [0, 0], textTranslateAnchor: s3, textTranslate: [0, 0] };
}
r([m()], p.prototype, "updateRequested", void 0), r([m()], p.prototype, "updating", null), r([m()], p.prototype, "view", void 0), p = r([a("esri.views.2d.LabelManager")], p);

// node_modules/@arcgis/core/views/2d/navigation/ZoomBox.js
var n6 = "esri-zoom-box";
var h3 = { container: `${n6}__container`, overlay: `${n6}__overlay`, background: `${n6}__overlay-background`, box: `${n6}__outline` };
var l2 = { zoom: "Shift", counter: "Control" };
var d2 = class extends b {
  constructor(t6) {
    super(t6), this._container = null, this._overlay = null, this._backgroundShape = null, this._boxShape = null, this._box = { x: 0, y: 0, width: 0, height: 0 }, this._rafId = null, this._redraw = this._redraw.bind(this);
  }
  destroy() {
    this.view = null;
  }
  set view(t6) {
    this.removeAllHandles(), this._destroyOverlay(), this._set("view", t6), t6 && this.addHandles([t6.on("drag", [l2.zoom], (t7) => this._handleDrag(t7, 1), _2.INTERNAL), t6.on("drag", [l2.zoom, l2.counter], (t7) => this._handleDrag(t7, -1), _2.INTERNAL)]);
  }
  _start() {
    this._createContainer(), this._createOverlay(), this.navigation.begin();
  }
  _update(t6, e3, i, r12) {
    this._box.x = t6, this._box.y = e3, this._box.width = i, this._box.height = r12, this._rafId || (this._rafId = requestAnimationFrame(this._redraw));
  }
  _end(t6, e3, r12, o4, a4) {
    const n7 = this.view, h4 = n7.toMap(c(t6 + 0.5 * r12, e3 + 0.5 * o4));
    let l4 = Math.max(r12 / n7.width, o4 / n7.height);
    -1 === a4 && (l4 = 1 / l4), this._destroyOverlay(), this.navigation.end(), n7.goTo({ center: h4, scale: n7.scale * l4 }, { animationMode: "always", duration: r7() });
  }
  _updateBox(t6, e3, i, r12) {
    const o4 = this._boxShape;
    o4.setAttributeNS(null, "x", "" + t6), o4.setAttributeNS(null, "y", "" + e3), o4.setAttributeNS(null, "width", "" + i), o4.setAttributeNS(null, "height", "" + r12), o4.setAttributeNS(null, "class", h3.box);
  }
  _updateBackground(t6, e3, i, r12) {
    this._backgroundShape.setAttributeNS(null, "d", this._toSVGPath(t6, e3, i, r12, this.view.width, this.view.height));
  }
  _createContainer() {
    const t6 = document.createElement("div");
    t6.className = h3.container, this.view.root.appendChild(t6), this._container = t6;
  }
  _createOverlay() {
    const t6 = this.view.width, e3 = this.view.height, i = document.createElementNS("http://www.w3.org/2000/svg", "path");
    i.setAttributeNS(null, "d", "M 0 0 L " + t6 + " 0 L " + t6 + " " + e3 + " L 0 " + e3 + " Z"), i.setAttributeNS(null, "class", h3.background);
    const r12 = document.createElementNS("http://www.w3.org/2000/svg", "rect"), o4 = document.createElementNS("http://www.w3.org/2000/svg", "svg");
    o4.setAttributeNS("http://www.w3.org/2000/xmlns/", "xmlns:xlink", "http://www.w3.org/1999/xlink"), o4.setAttributeNS(null, "class", h3.overlay), o4.appendChild(i), o4.appendChild(r12), this._container.appendChild(o4), this._backgroundShape = i, this._boxShape = r12, this._overlay = o4;
  }
  _destroyOverlay() {
    this._container && this._container.parentNode && this._container.parentNode.removeChild(this._container), this._container = this._backgroundShape = this._boxShape = this._overlay = null;
  }
  _toSVGPath(t6, e3, i, r12, o4, s3) {
    const a4 = t6 + i, n7 = e3 + r12;
    return "M 0 0 L " + o4 + " 0 L " + o4 + " " + s3 + " L 0 " + s3 + " ZM " + t6 + " " + e3 + " L " + t6 + " " + n7 + " L " + a4 + " " + n7 + " L " + a4 + " " + e3 + " Z";
  }
  _handleDrag(t6, e3) {
    const i = t6.x, r12 = t6.y, o4 = t6.origin.x, s3 = t6.origin.y;
    let a4, n7, h4, l4;
    switch (i > o4 ? (a4 = o4, h4 = i - o4) : (a4 = i, h4 = o4 - i), r12 > s3 ? (n7 = s3, l4 = r12 - s3) : (n7 = r12, l4 = s3 - r12), t6.action) {
      case "start":
        this._start();
        break;
      case "update":
        this._update(a4, n7, h4, l4);
        break;
      case "end":
        this._end(a4, n7, h4, l4, e3);
    }
    t6.stopPropagation();
  }
  _redraw() {
    if (!this._rafId) return;
    if (this._rafId = null, !this._overlay) return;
    const { x: t6, y: e3, width: i, height: r12 } = this._box;
    this._updateBox(t6, e3, i, r12), this._updateBackground(t6, e3, i, r12), this._rafId = requestAnimationFrame(this._redraw);
  }
};
r([m()], d2.prototype, "navigation", void 0), r([m()], d2.prototype, "view", null), d2 = r([a("esri.views.2d.navigation.ZoomBox")], d2);

// node_modules/@arcgis/core/views/navigation/FilteredFiniteDifference.js
var t4 = class {
  constructor(t6) {
    this._gain = t6, this.lastValue = void 0, this.filteredDelta = void 0;
  }
  update(t6) {
    if (this.hasLastValue()) {
      const e3 = this.computeDelta(t6);
      this._updateDelta(e3);
    }
    this.lastValue = t6;
  }
  reset() {
    this.lastValue = void 0, this.filteredDelta = void 0;
  }
  hasLastValue() {
    return void 0 !== this.lastValue;
  }
  hasFilteredDelta() {
    return void 0 !== this.filteredDelta;
  }
  computeDelta(t6) {
    return void 0 === this.lastValue ? NaN : t6 - this.lastValue;
  }
  _updateDelta(t6) {
    void 0 !== this.filteredDelta ? this.filteredDelta = (1 - this._gain) * this.filteredDelta + this._gain * t6 : this.filteredDelta = t6;
  }
};

// node_modules/@arcgis/core/views/navigation/Momentum.js
var t5 = class {
  constructor(t6, i, o4) {
    this._initialVelocity = t6, this._stopVelocity = i, this._friction = o4, this._duration = Math.abs(Math.log(Math.abs(this._initialVelocity) / this._stopVelocity) / Math.log(1 - this._friction));
  }
  get duration() {
    return this._duration;
  }
  isFinished(t6) {
    return t6 > this.duration;
  }
  get friction() {
    return this._friction;
  }
  value(t6) {
    return this.valueFromInitialVelocity(this._initialVelocity, t6);
  }
  valueDelta(t6, i) {
    const o4 = this.value(t6);
    return this.value(t6 + i) - o4;
  }
  valueFromInitialVelocity(t6, i) {
    i = Math.min(i, this.duration);
    const o4 = 1 - this.friction;
    return t6 * (o4 ** i - 1) / Math.log(o4);
  }
};

// node_modules/@arcgis/core/views/navigation/PanPlanarMomentumEstimator.js
var l3 = class extends t5 {
  constructor(e3, t6, i, s3, n7) {
    super(e3, t6, i), this._sceneVelocity = s3, this.direction = n7;
  }
  value(e3) {
    return super.valueFromInitialVelocity(this._sceneVelocity, e3);
  }
};
var c4 = class {
  constructor(e3 = 300, t6 = 12, i = 0.84) {
    this._minimumInitialVelocity = e3, this._stopVelocity = t6, this._friction = i, this.enabled = true, this._time = new t4(0.6), this._screen = [new t4(0.4), new t4(0.4)], this._scene = [new t4(0.6), new t4(0.6), new t4(0.6)], this._tmpDirection = n();
  }
  add(e3, t6, i) {
    if (this.enabled) {
      if (this._time.hasLastValue()) {
        if (this._time.computeDelta(i) < 0.015) return;
      }
      this._screen[0].update(e3[0]), this._screen[1].update(e3[1]), this._scene[0].update(t6[0]), this._scene[1].update(t6[1]), this._scene[2].update(t6[2]), this._time.update(i);
    }
  }
  reset() {
    this._screen[0].reset(), this._screen[1].reset(), this._scene[0].reset(), this._scene[1].reset(), this._scene[2].reset(), this._time.reset();
  }
  evaluateMomentum() {
    if (!this.enabled || !this._screen[0].hasFilteredDelta() || !this._time.hasFilteredDelta()) return null;
    const e3 = this._screen[0].filteredDelta, t6 = this._screen[1].filteredDelta, i = null == e3 || null == t6 ? 0 : Math.sqrt(e3 * e3 + t6 * t6), s3 = this._time.filteredDelta, n7 = null == s3 || null == i ? 0 : i / s3;
    return Math.abs(n7) < this._minimumInitialVelocity ? null : this.createMomentum(n7, this._stopVelocity, this._friction);
  }
  createMomentum(s3, n7, r12) {
    o2(this._tmpDirection, this._scene[0].filteredDelta ?? 0, this._scene[1].filteredDelta ?? 0, this._scene[2].filteredDelta ?? 0);
    const c5 = r4(this._tmpDirection);
    c5 > 0 && g(this._tmpDirection, this._tmpDirection, 1 / c5);
    const h4 = this._time.filteredDelta;
    return new l3(s3, n7, r12, null == h4 ? 0 : c5 / h4, this._tmpDirection);
  }
};

// node_modules/@arcgis/core/views/2d/navigation/actions/Pan.js
var v2 = class extends b {
  constructor(t6) {
    super(t6), this.animationTime = 0, this.momentumEstimator = new c4(500, 6, 0.92), this.momentum = null, this.tmpMomentum = n(), this.momentumFinished = false, this.viewpoint = new m2({ targetGeometry: new _(), scale: 0, rotation: 0 }), this._previousDrag = null, f(() => this.momentumFinished, () => this.navigation.stop());
  }
  begin(t6, i) {
    this.navigation.begin(), this.momentumEstimator.reset(), this.addToEstimator(i), this._previousDrag = i;
  }
  update(t6, i) {
    this.addToEstimator(i);
    let o4 = i.center.x, e3 = i.center.y;
    const s3 = this._previousDrag;
    o4 = s3 ? s3.center.x - o4 : -o4, e3 = s3 ? e3 - s3.center.y : e3, t6.viewpoint = kt(this.viewpoint, t6.viewpoint, [o4 || 0, e3 || 0]), this._previousDrag = i;
  }
  end(t6, i) {
    this.addToEstimator(i);
    const o4 = t6.navigation.effectiveMomentumEnabled;
    this.momentum = o4 ? this.momentumEstimator.evaluateMomentum() : null, this.animationTime = 0, this.momentum && this.onAnimationUpdate(t6), this._previousDrag = null, this.navigation.end();
  }
  addToEstimator(t6) {
    const i = t6.center.x, o4 = t6.center.y, e3 = f2(-i, o4), m5 = r3(-i, o4, 0);
    this.momentumEstimator.add(e3, m5, 1e-3 * t6.timestamp);
  }
  onAnimationUpdate(t6) {
    this.navigation.animationManager?.animateContinuous(t6.viewpoint, (i, o4) => {
      const { momentum: e3, animationTime: s3, tmpMomentum: m5 } = this, n7 = 1e-3 * o4;
      if (!(this.momentumFinished = !e3 || e3.isFinished(s3))) {
        const o5 = e3.valueDelta(s3, n7);
        g(m5, e3.direction, o5), kt(i, i, m5), t6.constraints.constrainByGeometry(i);
      }
      this.animationTime += n7;
    });
  }
  stopMomentumNavigation() {
    this.momentum && (this.momentumEstimator.reset(), this.momentum = null, this.navigation.stop());
  }
};
r([m()], v2.prototype, "momentumFinished", void 0), r([m()], v2.prototype, "viewpoint", void 0), r([m()], v2.prototype, "navigation", void 0), v2 = r([a("esri.views.2d.navigation.actions.Pan")], v2);

// node_modules/@arcgis/core/views/navigation/MomentumEstimator.js
var s = class {
  constructor(t6 = 2.5, i = 0.01, s3 = 0.95, l4 = 12) {
    this._minimumInitialVelocity = t6, this._stopVelocity = i, this._friction = s3, this._maxVelocity = l4, this.enabled = true, this.value = new t4(0.8), this.time = new t4(0.3);
  }
  add(t6, e3) {
    if (this.enabled && null != e3) {
      if (this.time.hasLastValue()) {
        if (this.time.computeDelta(e3) < 0.01) return;
        if (this.value.hasFilteredDelta()) {
          const e4 = this.value.computeDelta(t6);
          this.value.filteredDelta * e4 < 0 && this.value.reset();
        }
      }
      this.time.update(e3), this.value.update(t6);
    }
  }
  reset() {
    this.value.reset(), this.time.reset();
  }
  evaluateMomentum() {
    if (!this.enabled || !this.value.hasFilteredDelta() || !this.time.hasFilteredDelta()) return null;
    let e3 = this.value.filteredDelta / this.time.filteredDelta;
    return e3 = r2(e3, -this._maxVelocity, this._maxVelocity), Math.abs(e3) < this._minimumInitialVelocity ? null : this.createMomentum(e3, this._stopVelocity, this._friction);
  }
  createMomentum(t6, e3, s3) {
    return new t5(t6, e3, s3);
  }
};

// node_modules/@arcgis/core/views/navigation/RotationMomentumEstimator.js
var a3 = class extends s {
  constructor(t6 = 3, a4 = 0.01, s3 = 0.95, o4 = 12) {
    super(t6, a4, s3, o4);
  }
  add(t6, a4) {
    const s3 = this.value.lastValue;
    if (null != s3) {
      let a5 = t6 - s3;
      for (; a5 > Math.PI; ) a5 -= 2 * Math.PI;
      for (; a5 < -Math.PI; ) a5 += 2 * Math.PI;
      t6 = s3 + a5;
    }
    super.add(t6, a4);
  }
};

// node_modules/@arcgis/core/views/navigation/ZoomMomentumEstimator.js
var r11 = class extends t5 {
  constructor(e3, t6, r12) {
    super(e3, t6, r12);
  }
  value(e3) {
    const t6 = super.value(e3);
    return Math.exp(t6);
  }
  valueDelta(e3, t6) {
    const r12 = super.value(e3), s3 = super.value(e3 + t6) - r12;
    return Math.exp(s3);
  }
};
var s2 = class extends s {
  constructor(e3 = 2.5, t6 = 0.01, r12 = 0.95, s3 = 12) {
    super(e3, t6, r12, s3);
  }
  add(e3, t6) {
    super.add(Math.log(e3), t6);
  }
  createMomentum(e3, t6, s3) {
    return new r11(e3, t6, s3);
  }
};

// node_modules/@arcgis/core/views/2d/navigation/actions/Pinch.js
var _4 = class extends b {
  constructor(t6) {
    super(t6), this._animationTime = 0, this._momentumFinished = false, this._previousAngle = 0, this._previousRadius = 0, this._previousCenter = null, this._rotationMomentumEstimator = new a3(0.6, 0.15, 0.95), this._rotationDirection = 1, this._startAngle = 0, this._startRadius = 0, this._updateTimestamp = null, this._zoomDirection = 1, this._zoomMomentumEstimator = new s2(), this._zoomOnly = null, this.viewpoint = new m2({ targetGeometry: new _(), scale: 0, rotation: 0 }), this.zoomMomentum = null, this.rotateMomentum = null, this.addHandles(f(() => this._momentumFinished, () => this.navigation.stop()));
  }
  begin(t6, o4) {
    this.navigation.begin(), this._rotationMomentumEstimator.reset(), this._zoomMomentumEstimator.reset(), this._zoomOnly = null, this._previousAngle = this._startAngle = o4.angle, this._previousRadius = this._startRadius = o4.radius, this._previousCenter = o4.center, this._updateTimestamp = null, t6.constraints.rotationEnabled && this.addToRotateEstimator(0, o4.timestamp), this.addToZoomEstimator(o4, 1);
  }
  update(t6, o4) {
    null === this._updateTimestamp && (this._updateTimestamp = o4.timestamp);
    const i = o4.angle, s3 = o4.radius, e3 = o4.center, n7 = Math.abs(180 * (i - this._startAngle) / Math.PI), m5 = Math.abs(s3 - this._startRadius), a4 = this._startRadius / s3;
    if (this._previousRadius && this._previousCenter) {
      const r12 = s3 / this._previousRadius;
      let h4 = 180 * (i - this._previousAngle) / Math.PI;
      this._rotationDirection = h4 >= 0 ? 1 : -1, this._zoomDirection = r12 >= 1 ? 1 : -1, t6.constraints.rotationEnabled ? (null === this._zoomOnly && o4.timestamp - this._updateTimestamp > 200 && (this._zoomOnly = m5 - n7 > 0), null === this._zoomOnly || this._zoomOnly ? h4 = 0 : this.addToRotateEstimator(i - this._startAngle, o4.timestamp)) : h4 = 0, this.addToZoomEstimator(o4, a4), this.navigation.setViewpoint([e3.x, e3.y], 1 / r12, h4, [this._previousCenter.x - e3.x, e3.y - this._previousCenter.y]);
    }
    this._previousAngle = i, this._previousRadius = s3, this._previousCenter = e3;
  }
  end(t6) {
    this.rotateMomentum = this._rotationMomentumEstimator.evaluateMomentum(), this.zoomMomentum = this._zoomMomentumEstimator.evaluateMomentum(), this._animationTime = 0, (this.rotateMomentum || this.zoomMomentum) && this.onAnimationUpdate(t6), this.navigation.end();
  }
  addToRotateEstimator(t6, o4) {
    this._rotationMomentumEstimator.add(t6, 1e-3 * o4);
  }
  addToZoomEstimator(t6, o4) {
    this._zoomMomentumEstimator.add(o4, 1e-3 * t6.timestamp);
  }
  canZoomIn(t6) {
    const o4 = t6.scale, i = t6.constraints.effectiveMaxScale;
    return 0 === i || o4 > i;
  }
  canZoomOut(t6) {
    const o4 = t6.scale, i = t6.constraints.effectiveMinScale;
    return 0 === i || o4 < i;
  }
  onAnimationUpdate(t6) {
    this.navigation.animationManager?.animateContinuous(t6.viewpoint, (o4, i) => {
      const s3 = !this.canZoomIn(t6) && this._zoomDirection > 1 || !this.canZoomOut(t6) && this._zoomDirection < 1, e3 = !this.rotateMomentum || this.rotateMomentum.isFinished(this._animationTime), n7 = s3 || !this.zoomMomentum || this.zoomMomentum.isFinished(this._animationTime), h4 = 1e-3 * i;
      if (this._momentumFinished = e3 && n7, !this._momentumFinished) {
        const i2 = this.rotateMomentum ? Math.abs(this.rotateMomentum.valueDelta(this._animationTime, h4)) * this._rotationDirection * 180 / Math.PI : 0;
        let s4 = this.zoomMomentum ? Math.abs(this.zoomMomentum.valueDelta(this._animationTime, h4)) : 1;
        const e4 = n2(), n8 = n2();
        if (this._previousCenter) {
          o3(e4, this._previousCenter.x, this._previousCenter.y), rt(n8, t6.size, t6.padding), u2(e4, e4, n8);
          const { constraints: r12, scale: h5 } = t6, p2 = h5 * s4;
          s4 < 1 && !r12.canZoomInTo(p2) ? (s4 = h5 / r12.effectiveMaxScale, this.zoomMomentum = null, this.rotateMomentum = null) : s4 > 1 && !r12.canZoomOutTo(p2) && (s4 = h5 / r12.effectiveMinScale, this.zoomMomentum = null, this.rotateMomentum = null), Gt(o4, t6.viewpoint, s4, i2, e4, t6.size), t6.constraints.constrainByGeometry(o4);
        }
      }
      this._animationTime += h4;
    });
  }
  stopMomentumNavigation() {
    (this.rotateMomentum || this.zoomMomentum) && (this.rotateMomentum && (this._rotationMomentumEstimator.reset(), this.rotateMomentum = null), this.zoomMomentum && (this._zoomMomentumEstimator.reset(), this.zoomMomentum = null), this.navigation.stop());
  }
};
r([m()], _4.prototype, "_momentumFinished", void 0), r([m()], _4.prototype, "viewpoint", void 0), r([m()], _4.prototype, "navigation", void 0), _4 = r([a("esri.views.2d.navigation.actions.Pinch")], _4);

// node_modules/@arcgis/core/views/2d/navigation/actions/Rotate.js
var d3 = n2();
var g5 = n2();
var f6 = class extends b {
  constructor(t6) {
    super(t6), this._previousCenter = n2(), this.viewpoint = new m2({ targetGeometry: new _(), scale: 0, rotation: 0 });
  }
  begin(t6, e3) {
    this.navigation.begin(), o3(this._previousCenter, e3.center.x, e3.center.y);
  }
  update(t6, e3) {
    const { state: { size: o4, padding: r12 } } = t6;
    o3(d3, e3.center.x, e3.center.y), $(g5, o4, r12), t6.viewpoint = bt(this.viewpoint, t6.state.paddedViewState.viewpoint, pt(g5, this._previousCenter, d3)), r5(this._previousCenter, d3);
  }
  end() {
    this.navigation.end();
  }
};
r([m()], f6.prototype, "viewpoint", void 0), r([m()], f6.prototype, "navigation", void 0), f6 = r([a("esri.views.2d.navigation.actions.Rotate")], f6);

// node_modules/@arcgis/core/views/2d/navigation/MapViewNavigation.js
var v3 = 10;
var g6 = 1;
var d4 = new m2({ targetGeometry: new _() });
var _5 = [0, 0];
var T = 250;
var f7 = class extends b {
  constructor(t6) {
    super(t6), this._endTimer = null, this._lastEventTimestamp = null, this.animationManager = null, this.interacting = false;
  }
  initialize() {
    this.pan = new v2({ navigation: this }), this.rotate = new f6({ navigation: this }), this.pinch = new _4({ navigation: this }), this.zoomBox = new d2({ view: this.view, navigation: this });
  }
  destroy() {
    this.pan = u(this.pan), this.rotate = u(this.rotate), this.pinch = u(this.pinch), this.zoomBox = u(this.zoomBox), this.animationManager = null;
  }
  begin() {
    this.stop(), this._set("interacting", true);
  }
  end() {
    this._lastEventTimestamp = performance.now(), this._startTimer(T);
  }
  async zoom(t6, i = this._getDefaultAnchor()) {
    if (this.begin(), this.view.constraints.snapToZoom && this.view.constraints.effectiveLODs) return t6 < 1 ? this.zoomIn(i) : this.zoomOut(i);
    this.setViewpoint(i, t6, 0, [0, 0]);
  }
  async zoomIn(t6) {
    const i = this.view, o4 = i.constraints.snapToNextScale(i.scale);
    return this._zoomToScale(o4, t6);
  }
  async zoomOut(t6) {
    const i = this.view, o4 = i.constraints.snapToPreviousScale(i.scale);
    return this._zoomToScale(o4, t6);
  }
  setViewpoint(t6, i, o4, n7) {
    this.begin(), this.view.stateManager.state.viewpoint = this._scaleRotateTranslateViewpoint(this.view.viewpoint, t6, i, o4, n7), this.end();
  }
  setViewpointImmediate(t6, i = 0, o4 = [0, 0], n7 = this._getDefaultAnchor()) {
    this.view.stateManager.state.viewpoint = this._scaleRotateTranslateViewpoint(this.view.viewpoint, n7, t6, i, o4);
  }
  continuousRotateClockwise() {
    const t6 = this.view.viewpoint;
    this.animationManager?.animateContinuous(t6, (t7) => {
      bt(t7, t7, -1);
    });
  }
  continuousRotateCounterclockwise() {
    const t6 = this.view.viewpoint;
    this.animationManager?.animateContinuous(t6, (t7) => {
      bt(t7, t7, g6);
    });
  }
  resetRotation() {
    this.view.constraints.rotationEnabled && (this.view.rotation = 0);
  }
  continuousPanLeft() {
    this._continuousPan([-10, 0]);
  }
  continuousPanRight() {
    this._continuousPan([v3, 0]);
  }
  continuousPanUp() {
    this._continuousPan([0, v3]);
  }
  continuousPanDown() {
    this._continuousPan([0, -10]);
  }
  continuousPanVector({ x: t6, y: i }) {
    this._continuousPan([t6 * v3, i * v3]);
  }
  stop() {
    this.pan.stopMomentumNavigation(), this.animationManager?.stop(), this.end(), null !== this._endTimer && (clearTimeout(this._endTimer), this._endTimer = null, this._set("interacting", false));
  }
  _continuousPan(t6) {
    const i = this.view.viewpoint;
    this.animationManager?.animateContinuous(i, (i2) => {
      kt(i2, i2, t6), this.view.constraints.constrainByGeometry(i2);
    });
  }
  _startTimer(t6) {
    return null !== this._endTimer || (this._endTimer = setTimeout(() => {
      this._endTimer = null;
      const t7 = performance.now() - (this._lastEventTimestamp ?? 0);
      t7 < T ? this._endTimer = this._startTimer(t7) : this._set("interacting", false);
    }, t6)), this._endTimer;
  }
  _getDefaultAnchor() {
    const { size: t6, padding: { left: i, right: o4, top: n7, bottom: e3 } } = this.view;
    return _5[0] = 0.5 * (t6[0] - o4 + i), _5[1] = 0.5 * (t6[1] - e3 + n7), _5;
  }
  async _zoomToScale(t6, i = this._getDefaultAnchor()) {
    const { view: o4 } = this, { constraints: n7, scale: e3, viewpoint: s3, size: a4, padding: r12 } = o4, c5 = n7.canZoomInTo(t6), p2 = n7.canZoomOutTo(t6);
    if (!(t6 < e3 && !c5 || t6 > e3 && !p2)) return Rt(d4, s3, t6 / e3, 0, i, a4, r12), n7.constrainByGeometry(d4), o4.goTo(d4, { animate: true, animationMode: "always", duration: r7(), pickClosestTarget: false });
  }
  _scaleRotateTranslateViewpoint(t6, i, o4, n7, e3) {
    const { view: s3 } = this, { size: a4, padding: r12, constraints: h4, scale: p2, viewpoint: u3 } = s3, l4 = p2 * o4, w2 = h4.canZoomInTo(l4), v4 = h4.canZoomOutTo(l4);
    return (o4 < 1 && !w2 || o4 > 1 && !v4) && (o4 = 1), kt(u3, u3, e3), Rt(t6, u3, o4, n7, i, a4, r12), h4.constrainByGeometry(t6);
  }
};
r([m()], f7.prototype, "animationManager", void 0), r([m({ type: Boolean, readOnly: true })], f7.prototype, "interacting", void 0), r([m()], f7.prototype, "pan", void 0), r([m()], f7.prototype, "pinch", void 0), r([m()], f7.prototype, "rotate", void 0), r([m()], f7.prototype, "view", void 0), r([m()], f7.prototype, "zoomBox", void 0), f7 = r([a("esri.views.2d.navigation.MapViewNavigation")], f7);
var y = f7;

// node_modules/@arcgis/core/views/2d/engine/webgl/shaderGraph/techniques/shaders/MagnifierShader.js
var T2 = class extends C2 {
};
r([f3(0, C)], T2.prototype, "position", void 0);
var C3 = class extends v {
};
var j2 = class extends P {
};
r([g2(U)], j2.prototype, "readbackTexture", void 0), r([g2(U)], j2.prototype, "maskTexture", void 0), r([g2(U)], j2.prototype, "overlayTexture", void 0), r([g2(Y)], j2.prototype, "background", void 0), r([g2(Y)], j2.prototype, "drawPos", void 0), r([g2(_3)], j2.prototype, "maskEnabled", void 0), r([g2(_3)], j2.prototype, "overlayEnabled", void 0);
var E3 = class extends j {
  constructor() {
    super(...arguments), this.type = "MagnifierShader";
  }
  vertex(t6) {
    const o4 = t6.position, e3 = t6.position.subtract(new C(0.5)).multiply(this.config.drawPos.zw), r12 = this.config.drawPos.xy.add(e3);
    return { glPosition: new Y(r12, 0, 1), texCoord: o4 };
  }
  fragment(t6) {
    let o4 = yn(this.config.readbackTexture, P2(t6.texCoord));
    o4 = o4.add(new _3(1).subtract(o4.a)).multiply(this.config.background);
    const e3 = zt(_t(this.config.maskEnabled, new _3(1)), yn(this.config.maskTexture, t6.texCoord).a, new _3(1));
    o4 = o4.multiply(e3);
    const n7 = zt(_t(this.config.overlayEnabled, new _3(1)), yn(this.config.overlayTexture, t6.texCoord), new Y(0)), s3 = new w();
    return s3.fragColor = n7.add(new _3(1).subtract(n7.a).multiply(o4)), s3;
  }
};
function P2(t6) {
  const o4 = t6.multiply(new C(2)).subtract(1);
  return zt(_t(o4.x, new _3(0)).and(_t(o4.y, new _3(0))), new C(0.5), () => {
    const t7 = ce(o4.y, o4.x), e3 = We(Re(o4), new _3(J)), r12 = new C(oe(t7), sn(t7));
    return e3.multiply(r12).multiply(new C(0.5)).add(new _3(0.5));
  });
}
r([g2(j2)], E3.prototype, "config", void 0), r([e(0, m3(T2))], E3.prototype, "vertex", null), r([e(0, m3(C3))], E3.prototype, "fragment", null);

// node_modules/@arcgis/core/views/2d/engine/webgl/shaderGraph/techniques/shaders/GridShader.js
var G = class extends C2 {
};
r([f3(0, C)], G.prototype, "position", void 0);
var S = class extends v {
};
var k = class extends P {
};
r([g2(rt2)], k.prototype, "dvs", void 0);
var M = class extends P {
};
r([g2(_3)], M.prototype, "halfWidth", void 0), r([g2(_3)], M.prototype, "aaWidth", void 0), r([g2(_3)], M.prototype, "pxPerCell", void 0), r([g2(Y)], M.prototype, "minorLineColor", void 0), r([g2(Y)], M.prototype, "majorLineColor", void 0), r([g2(W)], M.prototype, "majorLineInterval", void 0);
var _6 = class extends j {
  constructor() {
    super(...arguments), this.type = "GridShader";
  }
  vertex(t6) {
    const o4 = t6.position.multiply(2).subtract(1);
    return { gridPos: this.transform.dvs.multiply(new X(o4, 1)).xy, glPosition: new Y(o4, 0, 1) };
  }
  fragment(t6) {
    const o4 = Qt(t6.gridPos), e3 = Te(o4), i = Xe(e3.x, new _3(1).subtract(e3.x)), n7 = Xe(e3.y, new _3(1).subtract(e3.y)), s3 = new C(i, n7).multiply(this.config.pxPerCell).subtract(this.config.halfWidth), a4 = Xe(s3.x, s3.y), p2 = new _3(1).subtract(on(new _3(0), this.config.aaWidth, a4)), l4 = new W(nn(o4.x)), d5 = new W(nn(o4.y)), c5 = new _3(St(l4, this.config.majorLineInterval)), I2 = new _3(St(d5, this.config.majorLineInterval)), G2 = zt(Xt(s3.x, s3.y), c5, I2), S2 = Gt2(Dt(ln(s3.x, this.config.aaWidth), ln(s3.y, this.config.aaWidth)), new _3(0.5)), k2 = Xe(c5, I2), M2 = zt(S2, k2, G2), _7 = Ye(this.config.majorLineColor, this.config.minorLineColor, Xe(M2, new _3(1))), q2 = new w();
    return q2.fragColor = _7.multiply(p2), q2;
  }
};
r([g2(k)], _6.prototype, "transform", void 0), r([g2(M)], _6.prototype, "config", void 0), r([e(0, m3(G))], _6.prototype, "vertex", null), r([e(0, m3(S))], _6.prototype, "fragment", null);

export {
  e2 as e,
  r8 as r,
  D2 as D,
  h,
  t3 as t,
  r9 as r2,
  n4 as n,
  h2,
  p,
  y,
  E3 as E,
  _6 as _
};
//# sourceMappingURL=chunk-ZHRX45KN.js.map
