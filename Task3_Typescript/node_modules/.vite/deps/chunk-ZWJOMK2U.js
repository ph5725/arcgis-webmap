import {
  o
} from "./chunk-H5K53FMS.js";
import {
  ci
} from "./chunk-RP7FUW55.js";
import {
  n
} from "./chunk-PZBXBPVO.js";
import {
  i as i2
} from "./chunk-FPSA4NFH.js";
import {
  i2 as i
} from "./chunk-XWG6QGFK.js";

// node_modules/@arcgis/core/symbols/cim/constants.js
var e = 15.5;
var i3 = 4;
var o2 = 64;
var r = 1024;
var l = { outlineWidth: 0.75, referenceWidth: 0.75, cap: n.CIMSolidStroke.capstyle, join: n.CIMSolidStroke.joinstyle, miterLimit: n.CIMSolidStroke.miterlimit };

// node_modules/@arcgis/core/symbols/cim/rasterizingUtils.js
var l2 = () => i.getLogger("esri.symbols.cim.rasterizingUtils");
var c = 32;
var h = (o3) => "vertical" === o3 || "horizontal" === o3 || "cross" === o3 || "esriSFSCross" === o3 || "esriSFSVertical" === o3 || "esriSFSHorizontal" === o3;
function f(o3, t, r2) {
  const n2 = t.style, a = i2(Math.ceil(r2)), s = h(n2) ? 8 * a : 16 * a, i4 = 2 * a;
  o3.width = s, o3.height = s;
  const l3 = o3.getContext("2d");
  l3.strokeStyle = "#ffffff", l3.lineWidth = a, l3.beginPath(), "vertical" !== n2 && "cross" !== n2 && "esriSFSCross" !== n2 && "esriSFSVertical" !== n2 || (l3.moveTo(s / 2, -i4), l3.lineTo(s / 2, s + i4)), "horizontal" !== n2 && "cross" !== n2 && "esriSFSCross" !== n2 && "esriSFSHorizontal" !== n2 || (l3.moveTo(-i4, s / 2), l3.lineTo(s + i4, s / 2)), "backward-diagonal" !== n2 && "diagonal-cross" !== n2 && "esriSFSDiagonalCross" !== n2 && "esriSFSBackwardDiagonal" !== n2 || (l3.moveTo(-i4, -i4), l3.lineTo(s + i4, s + i4), l3.moveTo(s - i4, -i4), l3.lineTo(s + i4, i4), l3.moveTo(-i4, s - i4), l3.lineTo(i4, s + i4)), "forward-diagonal" !== n2 && "diagonal-cross" !== n2 && "esriSFSForwardDiagonal" !== n2 && "esriSFSDiagonalCross" !== n2 || (l3.moveTo(s + i4, -i4), l3.lineTo(-i4, s + i4), l3.moveTo(i4, -i4), l3.lineTo(-i4, i4), l3.moveTo(s + i4, s - i4), l3.lineTo(s - i4, s + i4)), l3.stroke();
  const c2 = l3.getImageData(0, 0, o3.width, o3.height), f2 = new Uint8Array(c2.data);
  let m2;
  for (let e2 = 0; e2 < f2.length; e2 += 4) m2 = f2[e2 + 3] / 255, f2[e2] = f2[e2] * m2, f2[e2 + 1] = f2[e2 + 1] * m2, f2[e2 + 2] = f2[e2 + 2] * m2;
  return [f2, o3.width, o3.height, a];
}
function m(t) {
  t.length % 2 == 1 && (t = [...t, ...t]);
  const e2 = t.reduce((o3, t2) => o3 + t2, 0), a = Math.round(e2 * i3), s = 1, i4 = new Float32Array(a * s);
  let l3 = 0, c2 = 0, h2 = 0.5, f2 = true;
  for (const o3 of t) {
    for (l3 = c2, c2 += o3 * i3; h2 <= c2; ) {
      const o4 = h2 - 0.5, t2 = Math.min(Math.abs(h2 - l3), Math.abs(h2 - c2));
      i4[o4] = f2 ? -t2 : t2, h2++;
    }
    f2 = !f2;
  }
  const m2 = i4.length, u2 = new Uint8Array(4 * m2);
  for (let g2 = 0; g2 < m2; ++g2) {
    const t2 = i4[g2] / i3;
    o(t2 / o2 * 0.5 + 0.5, u2, 4 * g2);
  }
  return [u2, a, s];
}
function u(t, e2) {
  null == t && (t = []);
  const r2 = "Butt" === e2, n2 = "Square" === e2, s = !r2 && !n2;
  t.length % 2 == 1 && (t = [...t, ...t]);
  const i4 = e, l3 = 2 * i4;
  let c2 = 0;
  for (const o3 of t) c2 += o3;
  const h2 = Math.round(c2 * i4), f2 = new Float32Array(h2 * l3), m2 = 0.5 * i4;
  let u2 = 0, g2 = 0, d2 = 0.5, p2 = true;
  for (const o3 of t) {
    for (u2 = g2, g2 += o3 * i4; d2 <= g2; ) {
      let o4 = 0.5;
      for (; o4 < l3; ) {
        const t2 = (o4 - 0.5) * h2 + d2 - 0.5, e3 = s ? (o4 - i4) * (o4 - i4) : Math.abs(o4 - i4);
        f2[t2] = p2 ? r2 ? Math.max(Math.max(u2 + m2 - d2, e3), Math.max(d2 - g2 + m2, e3)) : e3 : s ? Math.min((d2 - u2) * (d2 - u2) + e3, (d2 - g2) * (d2 - g2) + e3) : n2 ? Math.min(Math.max(d2 - u2, e3), Math.max(g2 - d2, e3)) : Math.min(Math.max(d2 - u2 + m2, e3), Math.max(g2 + m2 - d2, e3)), o4++;
      }
      d2++;
    }
    p2 = !p2;
  }
  const C2 = f2.length, M2 = new Uint8Array(4 * C2);
  for (let a = 0; a < C2; ++a) {
    const t2 = (s ? Math.sqrt(f2[a]) : f2[a]) / i4;
    o(t2, M2, 4 * a);
  }
  return [M2, h2, l3];
}
function g(o3, t) {
  const { colorRamp: e2, gradientType: r2 } = t, n2 = "CIMFixedColorRamp" === e2.type, a = t.interval || n.CIMGradientFill.interval;
  let i4 = C(e2);
  return n2 && (i4 = M(i4, a)), "Discrete" === r2 || n2 ? w(o3, i4, a) : x(o3, i4);
}
var d;
function p(o3, t) {
  const { colorRamp: e2, gradientType: r2 } = t, n2 = C(e2), a = "CIMFixedColorRamp" === e2.type;
  if ("Continuous" === r2 && !a) return y(o3, n2);
  const i4 = t.interval ?? n.CIMGradientFill.interval;
  if (a) {
    return y(o3, M(n2, i4));
  }
  const l3 = [];
  d ??= document.createElement("canvas"), S(d, n2, i4, 1, 0);
  const c2 = d.getContext("2d").getImageData(0, 0, i4, 1).data;
  for (let s = 0, h2 = 0; s < i4; s++, h2 = 4 * s) {
    const o4 = [c2[h2 + 0], c2[h2 + 1], c2[h2 + 2], c2[h2 + 3]];
    l3.push({ offset: s / i4, color: o4 }), l3.push({ offset: (s + 1) / i4, color: o4 });
  }
  return y(o3, l3);
}
function C(o3) {
  const t = [];
  switch (o3.type) {
    case "CIMPolarContinuousColorRamp":
    case "CIMLinearContinuousColorRamp": {
      "CIMPolarContinuousColorRamp" === o3.type && l2().warnOnce("CIMPolarContinuousColorRamp is currently unsupported. Falling back to CIMLinearContinuousColorRamp.");
      const e2 = o3;
      t.push({ offset: 0, color: [e2.fromColor[0], e2.fromColor[1], e2.fromColor[2], e2.fromColor[3] / 255] }), t.push({ offset: 1, color: [e2.toColor[0], e2.toColor[1], e2.toColor[2], e2.toColor[3] / 255] });
      break;
    }
    case "CIMFixedColorRamp": {
      const e2 = o3, r2 = 1 / (e2.colors.length - 1);
      let n2 = 0;
      for (const o4 of e2.colors) t.push({ offset: n2, color: [o4[0], o4[1], o4[2], o4[3] / 255] }), n2 += r2;
      break;
    }
    case "CIMMultipartColorRamp": {
      const e2 = o3, r2 = e2.weights.reduce((o4, t2) => o4 + t2, 0);
      let n2 = 0;
      for (let o4 = 0; o4 < e2.colorRamps.length; o4++) {
        const a = e2.colorRamps[o4], s = e2.weights[o4], i4 = C(a);
        for (const o5 of i4) t.push({ offset: (n2 + o5.offset * s) / r2, color: o5.color });
        n2 += s;
      }
      break;
    }
    default:
      l2().error(`Color ramp "${o3.type}" currently unsupported.`);
  }
  return t;
}
function M(o3, t) {
  const e2 = [], r2 = (o3.length - 1) / (t - 1);
  for (let n2 = 0; n2 < t; n2++) {
    const a = o3[Math.round(n2 * r2)].color;
    e2.push({ offset: n2 / t, color: a }), e2.push({ offset: (n2 + 1) / t, color: a });
  }
  return e2;
}
function x(o3, t) {
  return S(o3, t, c, 1, ci), F(o3);
}
function w(o3, t, e2) {
  return S(o3, t, e2, 1, ci), F(o3);
}
function y(o3, t, e2 = 0) {
  for (const { offset: r2, color: n2 } of t) o3.addColorStop(Math.min(Math.max(r2, e2), 1 - e2), `rgba(${n2[0]}, ${n2[1]}, ${n2[2]}, ${n2[3]})`);
}
function S(o3, t, e2, r2, n2) {
  const a = e2 + 2 * n2;
  o3.width = a, o3.height = r2;
  const s = (n2 + 1) / a, i4 = o3.getContext("2d", { willReadFrequently: true });
  if (t.length > 0) {
    const o4 = i4.createLinearGradient(0, 0, a, r2);
    y(o4, t, s), i4.fillStyle = o4;
  } else i4.fillStyle = "rgba(128, 128, 128, 1)";
  i4.fillRect(0, 0, a, r2);
}
function F(o3) {
  const { width: t, height: e2 } = o3, r2 = o3.getContext("2d").getImageData(0, 0, t, e2), n2 = new Uint8Array(r2.data);
  for (let a = 0; a < n2.length; a += 4) {
    const o4 = n2[a + 3] / 255;
    n2[a] *= o4, n2[a + 1] *= o4, n2[a + 2] *= o4;
  }
  return [n2, t, e2];
}
function v(o3) {
  const t = o3[0]?.[0]?.[0] ?? 0, e2 = o3[0]?.[0]?.[1] ?? 0, r2 = { ymin: e2, xmin: t, ymax: e2, xmax: t, width: 0, height: 0 };
  for (let n2 = 0; n2 < o3.length; n2++) {
    const t2 = o3[n2];
    for (let o4 = 0; o4 < t2.length; o4++) {
      const e3 = t2[o4][0], n3 = t2[o4][1];
      e3 < r2.xmin && (r2.xmin = e3), e3 > r2.xmax && (r2.xmax = e3), n3 < r2.ymin && (r2.ymin = n3), n3 > r2.ymax && (r2.ymax = n3);
    }
  }
  return r2.width = Math.abs(r2.xmax - r2.xmin), r2.height = Math.abs(r2.ymax - r2.ymin), r2;
}
function T(o3, t) {
  const e2 = v(o3), r2 = 0 === e2.width ? 1 : e2.width, n2 = 0 === e2.height ? 1 : e2.height, a = [];
  for (let s = 0; s < o3.length; s++) {
    const i4 = o3[s], l3 = [];
    for (let o4 = 0; o4 < i4.length; o4++) {
      let a2 = Math.round(i4[o4][0] - e2.xmin), s2 = Math.round(i4[o4][1] - e2.ymin);
      if (a2 = t.xmin + a2 * t.width / r2, s2 = t.ymin + s2 * t.height / n2, isNaN(a2) || isNaN(s2)) throw new Error("Scaled shape has NaN values");
      l3.push([a2, s2]);
    }
    a.push(l3);
  }
  return a;
}
function R(o3, t, e2) {
  const r2 = [];
  for (let n2 = 0; n2 < o3.length; n2++) {
    const a = o3[n2], s = [];
    for (let o4 = 0; o4 < a.length; o4++) {
      const r3 = a[o4][0] + t, n3 = a[o4][1] + e2;
      if (isNaN(r3) || isNaN(n3)) throw new Error("Scaled shape has NaN values");
      s.push([r3, n3]);
    }
    r2.push(s);
  }
  return r2;
}

export {
  i3 as i,
  o2 as o,
  r,
  l,
  f,
  m,
  u,
  g,
  p,
  T,
  R
};
//# sourceMappingURL=chunk-ZWJOMK2U.js.map
