import {
  t as t2
} from "./chunk-IWFEA465.js";
import {
  W
} from "./chunk-RODRBIXX.js";
import {
  p as p2
} from "./chunk-CWLDBABC.js";
import {
  L
} from "./chunk-SHXYOAIC.js";
import {
  t as t3
} from "./chunk-5DVJFLIL.js";
import {
  n as n9
} from "./chunk-B7AMZ4LC.js";
import {
  n as n10,
  o as o4,
  s as s2,
  t as t4
} from "./chunk-KQMSRGRD.js";
import {
  t
} from "./chunk-ZN7Z7TAB.js";
import {
  a2 as a4
} from "./chunk-3ECQNGV5.js";
import {
  e as e4
} from "./chunk-UZRZVWLE.js";
import {
  n as n5,
  n2 as n6,
  o2 as o3
} from "./chunk-V5G6BYVK.js";
import {
  A as A2
} from "./chunk-LG4SF54U.js";
import {
  d as d2,
  o as o2
} from "./chunk-BF6IRMUG.js";
import {
  d,
  l as l2,
  n as n4,
  r as r3
} from "./chunk-24KTNAIE.js";
import {
  n as n8
} from "./chunk-SO2VFJCA.js";
import {
  e as e3,
  i as i4,
  n as n7
} from "./chunk-67CCONUO.js";
import {
  M,
  O,
  T as T2,
  V,
  g,
  o
} from "./chunk-6DBRCIDV.js";
import {
  e
} from "./chunk-NZPABYQQ.js";
import {
  e as e2,
  n as n2
} from "./chunk-CCHJ3WNU.js";
import {
  u
} from "./chunk-KHEIHGIK.js";
import {
  a as a2
} from "./chunk-TB5DDCF3.js";
import {
  i as i3,
  j,
  n as n3
} from "./chunk-DRAQJS2F.js";
import {
  P
} from "./chunk-BZYXFNL4.js";
import {
  a as a3
} from "./chunk-VNTS5E5O.js";
import {
  A,
  E,
  I,
  c,
  i as i2,
  r as r2
} from "./chunk-TMFB3DKM.js";
import {
  a as a5,
  i as i5
} from "./chunk-MPV4X4LZ.js";
import {
  r
} from "./chunk-KHRHKYU2.js";
import {
  l,
  q
} from "./chunk-FKFXOPPT.js";
import {
  h
} from "./chunk-DNZK6PPI.js";
import {
  p
} from "./chunk-6KFXWKZZ.js";
import {
  _
} from "./chunk-HPGYEHVI.js";
import {
  n,
  u as u2
} from "./chunk-RACDQ3AL.js";
import {
  T
} from "./chunk-FPSA4NFH.js";
import {
  H
} from "./chunk-ZWFY3WY5.js";
import {
  a
} from "./chunk-GZ2P4SCJ.js";
import {
  i2 as i,
  s
} from "./chunk-XWG6QGFK.js";

// node_modules/@arcgis/core/views/3d/glTF/internal/TextureTransformUtils.js
function s3(s5) {
  if (null == s5) return null;
  const a6 = null != s5.offset ? s5.offset : a5, n11 = null != s5.rotation ? s5.rotation : 0, e5 = null != s5.scale ? s5.scale : i5, f = n2(1, 0, 0, 0, 1, 0, a6[0], a6[1], 1), c2 = n2(Math.cos(n11), -Math.sin(n11), 0, Math.sin(n11), Math.cos(n11), 0, 0, 0, 1), m = n2(e5[0], 0, 0, 0, e5[1], 0, 0, 0, 1), u3 = e2();
  return i3(u3, c2, m), i3(u3, f, u3), u3;
}

// node_modules/@arcgis/core/views/3d/layers/graphics/ProcessedObjectResource.js
var s4 = class {
  constructor() {
    this.geometries = new Array(), this.materials = new Array(), this.textures = new Array();
  }
};
var t5 = class {
  constructor(t6, e5, r4) {
    this.name = t6, this.lodThreshold = e5, this.pivotOffset = r4, this.stageResources = new s4(), this.numberOfVertices = 0;
  }
};

// node_modules/@arcgis/core/views/3d/layers/graphics/wosrLoader.js
var v = () => i.getLogger("esri.views.3d.layers.graphics.objectResourceUtils");
var j2 = class {
  constructor(e5, t6, r4) {
    this.resource = e5, this.textures = t6, this.cachedMemory = r4;
  }
};
async function A3(e5, t6) {
  const r4 = await I2(e5, t6), n11 = await T3(r4.textureDefinitions ?? {}, t6);
  let o5 = 0;
  for (const s5 in n11) if (n11.hasOwnProperty(s5)) {
    const e6 = n11[s5];
    o5 += e6?.image ? e6.image.width * e6.image.height * 4 : 0;
  }
  return new j2(r4, n11, o5 + u(r4));
}
async function I2(r4, n11) {
  const s5 = n11?.streamDataRequester;
  if (s5) return P2(r4, s5, n11);
  const o5 = await _(H(r4, n11));
  if (true === o5.ok) return o5.value.data;
  a(o5.error), M2(o5.error);
}
async function P2(e5, r4, n11) {
  const s5 = await _(r4.request(e5, "json", n11));
  if (true === s5.ok) return s5.value;
  a(s5.error), M2(s5.error.details.url);
}
function M2(e5) {
  throw new s("", `Request for object resource failed: ${e5}`);
}
function E2(e5) {
  const t6 = e5.params, r4 = t6.topology;
  let n11 = true;
  switch (t6.vertexAttributes || (v().warn("Geometry must specify vertex attributes"), n11 = false), t6.topology) {
    case "PerAttributeArray":
      break;
    case "Indexed":
    case null:
    case void 0: {
      const e6 = t6.faces;
      if (e6) {
        if (t6.vertexAttributes) for (const r5 in t6.vertexAttributes) {
          const t7 = e6[r5];
          t7?.values ? (null != t7.valueType && "UInt32" !== t7.valueType && (v().warn(`Unsupported indexed geometry indices type '${t7.valueType}', only UInt32 is currently supported`), n11 = false), null != t7.valuesPerElement && 1 !== t7.valuesPerElement && (v().warn(`Unsupported indexed geometry values per element '${t7.valuesPerElement}', only 1 is currently supported`), n11 = false)) : (v().warn(`Indexed geometry does not specify face indices for '${r5}' attribute`), n11 = false);
        }
      } else v().warn("Indexed geometries must specify faces"), n11 = false;
      break;
    }
    default:
      v().warn(`Unsupported topology '${r4}'`), n11 = false;
  }
  e5.params.material || (v().warn("Geometry requires material"), n11 = false);
  const s5 = e5.params.vertexAttributes;
  for (const o5 in s5) {
    s5[o5].values || (v().warn("Geometries with externally defined attributes are not yet supported"), n11 = false);
  }
  return n11;
}
function U(e5, t6) {
  const r4 = new Array(), n11 = new Array(), s5 = new Array(), a6 = new t2(), u3 = e5.resource, c2 = r.parse(u3.version || "1.0", "wosr");
  R.validate(c2);
  const p3 = u3.model.name, g2 = u3.model.geometries, h2 = u3.materialDefinitions ?? {}, v2 = e5.textures;
  let j3 = 0;
  const A4 = /* @__PURE__ */ new Map();
  for (let o5 = 0; o5 < g2.length; o5++) {
    const e6 = g2[o5];
    if (!E2(e6)) continue;
    const i6 = q2(e6), u4 = e6.params.vertexAttributes, c3 = [], p4 = (t7) => {
      if ("PerAttributeArray" === e6.params.topology) return null;
      const r5 = e6.params.faces;
      for (const e7 in r5) if (e7 === t7) return r5[e7].values;
      return null;
    }, I3 = u4[e4.POSITION], P3 = I3.values.length / I3.valuesPerElement;
    for (const t7 in u4) {
      const e7 = u4[t7], r5 = e7.values, n12 = p4(t7) ?? A2(P3);
      c3.push([t7, new t(r5, n12, e7.valuesPerElement, true)]);
    }
    const M3 = i6.texture, U2 = v2 && v2[M3];
    if (U2 && !A4.has(M3)) {
      const { image: e7, parameters: t7 } = U2, r5 = new L(e7, t7);
      n11.push(r5), A4.set(M3, r5);
    }
    const O3 = A4.get(M3), T4 = O3 ? O3.id : void 0, R2 = i6.material;
    let B = a6.get(R2, M3);
    if (null == B) {
      const e7 = h2[R2.slice(R2.lastIndexOf("/") + 1)].params;
      1 === e7.transparency && (e7.transparency = 0);
      const r5 = U2 ? k(U2.alphaChannelUsage) : void 0, n12 = { ambient: u2(e7.diffuse), diffuse: u2(e7.diffuse), opacity: 1 - (e7.transparency || 0), textureAlphaMode: r5, textureAlphaCutoff: 0.33, textureId: T4, doubleSided: true, cullFace: e3.None, colorMixMode: e7.externalColorMixMode || "tint", textureAlphaPremultiplied: U2?.parameters.preMultiplyAlpha ?? false };
      t6?.materialParameters && Object.assign(n12, t6.materialParameters), B = new W(n12, t6), a6.set(R2, M3, B);
    }
    s5.push(B);
    const C = new p2(B, c3);
    j3 += c3.find((e7) => e7[0] === e4.POSITION)?.[1]?.indices.length ?? 0, r4.push(C);
  }
  return { engineResources: [{ name: p3, stageResources: { textures: n11, materials: s5, geometries: r4 }, pivotOffset: u3.model.pivotOffset, numberOfVertices: j3, lodThreshold: null }], referenceBoundingBox: O2(r4) };
}
function O2(e5) {
  const t6 = q();
  return e5.forEach((e6) => {
    const r4 = e6.boundingInfo;
    null != r4 && (l(t6, r4.bbMin), l(t6, r4.bbMax));
  }), t6;
}
async function T3(e5, t6) {
  const r4 = new Array();
  for (const o5 in e5) {
    const n12 = e5[o5], s6 = n12.images[0].data;
    if (!s6) {
      v().warn("Externally referenced texture data is not yet supported");
      continue;
    }
    const a6 = n12.encoding + ";base64," + s6, i6 = "/textureDefinitions/" + o5, l3 = "rgba" === n12.channels ? n12.alphaChannelUsage || "transparency" : "none", u3 = { noUnpackFlip: true, wrap: { s: P.REPEAT, t: P.REPEAT }, preMultiplyAlpha: k(l3) !== i4.Opaque }, c2 = t6?.disableTextures ? Promise.resolve(null) : t3(a6, t6);
    r4.push(c2.then((e6) => ({ refId: i6, image: e6, parameters: u3, alphaChannelUsage: l3 })));
  }
  const n11 = await Promise.all(r4), s5 = {};
  for (const o5 of n11) s5[o5.refId] = o5;
  return s5;
}
function k(e5) {
  switch (e5) {
    case "mask":
      return i4.Mask;
    case "maskAndTransparency":
      return i4.MaskBlend;
    case "none":
      return i4.Opaque;
    default:
      return i4.Blend;
  }
}
function q2(e5) {
  const t6 = e5.params;
  return { id: 1, material: t6.material, texture: t6.texture, region: t6.texture };
}
var R = new r(1, 2, "wosr");

// node_modules/@arcgis/core/views/3d/layers/graphics/objectResourceUtils.js
async function Y(e5, t6) {
  const o5 = Z(a2(e5));
  if ("wosr" === o5.fileType) {
    const e6 = await (t6.cache ? t6.cache.loadWOSR(o5.url, t6) : A3(o5.url, t6)), { engineResources: r4, referenceBoundingBox: s6 } = U(e6, t6);
    return { lods: r4, referenceBoundingBox: s6, isEsriSymbolResource: false, isWosr: true };
  }
  let s5;
  if (t6.cache) s5 = await t6.cache.loadGLTF(o5.url, t6, !!t6.usePBR);
  else {
    const { loadGLTF: e6 } = await import("./loader-LAO7GYSX.js");
    s5 = await e6(new n6(t6.streamDataRequester), o5.url, t6, t6.usePBR);
  }
  const i6 = s5.model.meta?.ESRI_proxyEllipsoid, n11 = s5.meta.isEsriSymbolResource && null != i6 && "EsriRealisticTreesStyle" === s5.meta.ESRI_webstyle;
  n11 && !s5.customMeta.esriTreeRendering && (s5.customMeta.esriTreeRendering = true, ie(s5, i6));
  const l3 = !!t6.usePBR, a6 = s5.meta.isEsriSymbolResource ? { usePBR: l3, isSchematic: false, treeRendering: n11, mrrFactors: s2 } : { usePBR: l3, isSchematic: false, treeRendering: false, mrrFactors: t4 }, u3 = { ...t6.materialParameters, treeRendering: n11 }, { engineResources: c2, referenceBoundingBox: m } = ee(s5, a6, u3, t6, o5.specifiedLodIndex, n11);
  return { lods: c2, referenceBoundingBox: m, isEsriSymbolResource: s5.meta.isEsriSymbolResource, isWosr: false };
}
function Z(e5) {
  const r4 = e5.match(/(.*\.(gltf|glb))(\?lod=([0-9]+))?$/);
  if (r4) return { fileType: "gltf", url: r4[1], specifiedLodIndex: null != r4[4] ? Number(r4[4]) : null };
  return e5.match(/(.*\.(json|json\.gz))$/) ? { fileType: "wosr", url: e5, specifiedLodIndex: null } : { fileType: "unknown", url: e5, specifiedLodIndex: null };
}
function ee(e5, r4, t6, o5, s5, i6) {
  const n11 = e5.model, l3 = new Array(), a6 = /* @__PURE__ */ new Map(), u3 = /* @__PURE__ */ new Map(), c2 = n11.lods.length, m = q();
  return n11.lods.forEach((e6, f) => {
    const d3 = true === o5.skipHighLods && (c2 > 1 && 0 === f || c2 > 3 && 1 === f) || false === o5.skipHighLods && null != s5 && f !== s5;
    if (d3 && 0 !== f) return;
    const p3 = new t5(e6.name, e6.lodThreshold, [0, 0, 0]);
    e6.parts.forEach((e7) => {
      const s6 = d3 ? new W({}, o5) : re(n11, e7, p3, r4, t6, a6, u3, o5, i6), { geometry: l4, vertexCount: c3 } = te(e7, s6 ?? new W({}, o5)), g2 = l4.boundingInfo;
      null != g2 && 0 === f && (l(m, g2.bbMin), l(m, g2.bbMax)), null != s6 && (p3.stageResources.geometries.push(l4), p3.numberOfVertices += c3);
    }), d3 || l3.push(p3);
  }), { engineResources: l3, referenceBoundingBox: m };
}
function re(r4, t6, o5, s5, i6, n11, l3, u3, c2) {
  const m = r4.materials.get(t6.material);
  if (null == m) return null;
  const { normal: f, color: d3, texCoord0: p3, tangent: g2 } = t6.attributes, x = t6.material + (f ? "_normal" : "") + (d3 ? "_color" : "") + (p3 ? "_texCoord0" : "") + (g2 ? "_tangent" : ""), T4 = null != t6.attributes.texCoord0, b = null != t6.attributes.normal, h2 = se(m.alphaMode);
  if (!n11.has(x)) {
    if (T4) {
      const e5 = (e6, t8 = false, o7 = false) => {
        if (null != e6 && !l3.has(e6)) {
          const s6 = r4.textures.get(e6);
          if (s6) {
            const r5 = s6.data, i7 = t8 && !n8(r5) ? u3.compressionOptions : void 0;
            l3.set(e6, new L(n8(r5) ? r5.data : r5, { ...s6.parameters, preMultiplyAlpha: !n8(r5) && o7, encoding: n8(r5) ? r5.encoding : void 0, compressionOptions: i7 }));
          }
        }
      }, t7 = h2 !== i4.Opaque && !c2;
      e5(m.colorTexture, t7, h2 !== i4.Opaque), e5(m.normalTexture), e5(m.occlusionTexture, true), e5(m.emissiveTexture), e5(m.metallicRoughnessTexture, true);
    }
    const o6 = 1 / p, f2 = m.color[0] ** o6, d4 = m.color[1] ** o6, p4 = m.color[2] ** o6, g3 = m.emissiveFactor[0] ** o6, y2 = m.emissiveFactor[1] ** o6, w = m.emissiveFactor[2] ** o6, v2 = null != m.colorTexture && T4 ? l3.get(m.colorTexture) : null, R2 = n10(m), j3 = null != m.normalTextureTransform?.scale ? m.normalTextureTransform?.scale : a3;
    n11.set(x, new W({ ...s5, customDepthTest: n7.Lequal, textureAlphaMode: h2, textureAlphaCutoff: m.alphaCutoff, diffuse: [f2, d4, p4], ambient: [f2, d4, p4], opacity: "OPAQUE" === m.alphaMode ? 1 : m.opacity, doubleSided: m.doubleSided, doubleSidedType: "winding-order", cullFace: m.doubleSided ? e3.None : e3.Back, hasVertexColors: !!t6.attributes.color, hasVertexTangents: !!t6.attributes.tangent, normalType: b ? a4.Attribute : a4.ScreenDerivative, castShadows: true, receiveShadows: m.receiveShadows, receiveAmbientOcclusion: m.receiveAmbientOcclusion, textureId: null != v2 ? v2.id : void 0, colorMixMode: m.colorMixMode, normalTextureId: null != m.normalTexture && T4 ? l3.get(m.normalTexture).id : void 0, textureAlphaPremultiplied: null != v2 && !!v2.parameters.preMultiplyAlpha, occlusionTextureId: null != m.occlusionTexture && T4 ? l3.get(m.occlusionTexture).id : void 0, emissiveTextureId: null != m.emissiveTexture && T4 ? l3.get(m.emissiveTexture).id : void 0, metallicRoughnessTextureId: null != m.metallicRoughnessTexture && T4 ? l3.get(m.metallicRoughnessTexture).id : void 0, emissiveBaseColor: [g3, y2, w], mrrFactors: R2 ? o4 : [m.metallicFactor, m.roughnessFactor, s5.mrrFactors[2]], isSchematic: R2, colorTextureTransformMatrix: s3(m.colorTextureTransform), normalTextureTransformMatrix: s3(m.normalTextureTransform), scale: [j3[0], j3[1]], occlusionTextureTransformMatrix: s3(m.occlusionTextureTransform), emissiveTextureTransformMatrix: s3(m.emissiveTextureTransform), metallicRoughnessTextureTransformMatrix: s3(m.metallicRoughnessTextureTransform), ...i6 }, u3));
  }
  const y = n11.get(x);
  if (o5.stageResources.materials.push(y), T4) {
    const e5 = (e6) => {
      null != e6 && o5.stageResources.textures.push(l3.get(e6));
    };
    e5(m.colorTexture), e5(m.normalTexture), e5(m.occlusionTexture), e5(m.emissiveTexture), e5(m.metallicRoughnessTexture);
  }
  return y;
}
function te(e5, r4) {
  const i6 = e5.attributes.position.count, n11 = o3(e5.indices || i6, e5.primitiveType), l3 = n9(3 * i6), { typedBuffer: a6, typedBufferStride: u3 } = e5.attributes.position;
  r3(l3, a6, e5.transform, 3, u3);
  const c2 = [[e4.POSITION, new t(l3, n11, 3, true)]];
  if (null != e5.attributes.normal) {
    const r5 = n9(3 * i6), { typedBuffer: s5, typedBufferStride: l4 } = e5.attributes.normal;
    j(oe, e5.transform), n4(r5, s5, oe, 3, l4), T(oe) && d(r5, r5), c2.push([e4.NORMAL, new t(r5, n11, 3, true)]);
  }
  if (null != e5.attributes.tangent) {
    const r5 = n9(4 * i6), { typedBuffer: o5, typedBufferStride: l4 } = e5.attributes.tangent;
    n3(oe, e5.transform), o2(r5, o5, oe, 4, l4), T(oe) && d(r5, r5, 4), c2.push([e4.TANGENT, new t(r5, n11, 4, true)]);
  }
  if (null != e5.attributes.texCoord0) {
    const r5 = n9(2 * i6), { typedBuffer: t6, typedBufferStride: o5 } = e5.attributes.texCoord0;
    n5(r5, t6, 2, o5), c2.push([e4.UV0, new t(r5, n11, 2, true)]);
  }
  const m = e5.attributes.color;
  if (null != m) {
    const r5 = new Uint8Array(4 * i6);
    4 === m.elementCount ? m instanceof T2 ? d2(r5, m, 1, 255) : (m instanceof g || m instanceof M) && d2(r5, m, 1 / 255, 255) : (r5.fill(255), m instanceof o ? l2(r5, m.typedBuffer, 1, 255, 4, m.typedBufferStride) : (e5.attributes.color instanceof O || e5.attributes.color instanceof V) && l2(r5, m.typedBuffer, 1 / 255, 255, 4, e5.attributes.color.typedBufferStride)), c2.push([e4.COLOR, new t(r5, n11, 4, true)]);
  }
  return { geometry: new p2(r4, c2), vertexCount: i6 };
}
var oe = e2();
function se(e5) {
  switch (e5) {
    case "BLEND":
      return i4.Blend;
    case "MASK":
      return i4.Mask;
    case "OPAQUE":
    case null:
    case void 0:
      return i4.Opaque;
  }
}
function ie(r4, t6) {
  for (let o5 = 0; o5 < r4.model.lods.length; ++o5) {
    const s5 = r4.model.lods[o5];
    for (const i6 of s5.parts) {
      const s6 = i6.attributes.normal;
      if (null == s6) return;
      const a6 = i6.attributes.position, x = a6.count, T4 = n(), b = n(), w = n(), v2 = new Float32Array(4 * x), R2 = new Float32Array(3 * x), j3 = h(e(), i6.transform);
      let B = 0, S = 0;
      for (let n11 = 0; n11 < x; n11++) {
        a6.getVec(n11, b), s6.getVec(n11, T4), E(b, b, i6.transform), c(w, b, t6.center), i2(w, w, t6.radius);
        const l3 = w[2], g2 = r2(w), x2 = Math.min(0.45 + 0.55 * g2 * g2, 1) ** p;
        i2(w, w, t6.radius), null !== j3 && E(w, w, j3), A(w, w), o5 + 1 !== r4.model.lods.length && r4.model.lods.length > 1 && I(w, w, T4, l3 > -1 ? 0.2 : Math.min(-4 * l3 - 3.8, 1)), R2[B] = w[0], R2[B + 1] = w[1], R2[B + 2] = w[2], B += 3, v2[S] = x2, v2[S + 1] = x2, v2[S + 2] = x2, v2[S + 3] = 1, S += 4;
      }
      i6.attributes.normal = new o(R2), i6.attributes.color = new T2(v2);
    }
  }
}

export {
  s3 as s,
  Y,
  Z
};
//# sourceMappingURL=chunk-ZXFTRGC2.js.map
