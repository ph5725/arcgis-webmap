import {
  E,
  a,
  c as c2,
  e,
  e2,
  f as f2,
  i as i3,
  s as s4
} from "./chunk-GOWWJ2HE.js";
import {
  i as i2
} from "./chunk-Y2ZIOB7Y.js";
import {
  n
} from "./chunk-VOLWOTEG.js";
import {
  t
} from "./chunk-TKYAZCMB.js";
import {
  H,
  c,
  f,
  r
} from "./chunk-ZWFY3WY5.js";
import {
  N,
  _
} from "./chunk-LQFTAGIV.js";
import {
  S,
  b,
  l2 as l,
  s as s3,
  w
} from "./chunk-GZ2P4SCJ.js";
import {
  i2 as i,
  s as s2
} from "./chunk-XWG6QGFK.js";
import {
  s
} from "./chunk-GWNLQRNM.js";
import {
  has
} from "./chunk-FXKORAMT.js";

// node_modules/@arcgis/core/core/workers/staticWorkerMessages.js
var a2 = { async request(a6, s6) {
  const r3 = a6.options, n3 = r3.responseType;
  r3.signal = s6?.signal, r3.responseType = "native" === n3 || "native-request-init" === n3 ? "native-request-init" : n3 && ["blob", "json", "text"].includes(n3) && N(a6.url)?.after ? n3 : "array-buffer";
  const i4 = await H(a6.url, r3), o = { data: i4.data, httpStatus: i4.httpStatus, ssl: i4.ssl };
  switch (i4.requestOptions?.responseType) {
    case "native-request-init":
      return delete o.data.signal, o;
    case "blob":
      o.data = await o.data.arrayBuffer();
      break;
    case "json":
      o.data = new TextEncoder().encode(JSON.stringify(o.data)).buffer;
      break;
    case "text":
      o.data = new TextEncoder().encode(o.data).buffer;
  }
  return { result: o, transferList: [o.data] };
} };

// node_modules/@arcgis/core/core/workers/loaderConfig.js
var a3 = {};
function r2(s6) {
  const r3 = { async: s6.async, isDebug: s6.isDebug, locale: s6.locale, baseUrl: s6.baseUrl, has: { ...s6.has }, map: { ...s6.map }, packages: s6.packages?.slice() || [], paths: { ...a3.paths, ...s6.paths } };
  return s6.hasOwnProperty("async") || (r3.async = true), s6.hasOwnProperty("isDebug") || (r3.isDebug = false), s6.baseUrl || (r3.baseUrl = a3.baseUrl), r3;
}

// node_modules/@arcgis/core/core/workers/WorkerFallback.js
var n2 = class {
  constructor() {
    const e3 = document.createDocumentFragment();
    ["addEventListener", "dispatchEvent", "removeEventListener"].forEach((s6) => {
      this[s6] = (...r3) => e3[s6](...r3);
    });
  }
};
var a4 = class {
  constructor() {
    this._dispatcher = new n2(), this._workerPostMessage({ type: e2.HANDSHAKE });
  }
  terminate() {
  }
  get onmessage() {
    return this._onmessageHandler;
  }
  set onmessage(e3) {
    this._onmessageHandler && this.removeEventListener("message", this._onmessageHandler), this._onmessageHandler = e3, e3 && this.addEventListener("message", e3);
  }
  get onmessageerror() {
    return this._onmessageerrorHandler;
  }
  set onmessageerror(e3) {
    this._onmessageerrorHandler && this.removeEventListener("messageerror", this._onmessageerrorHandler), this._onmessageerrorHandler = e3, e3 && this.addEventListener("messageerror", e3);
  }
  get onerror() {
    return this._onerrorHandler;
  }
  set onerror(e3) {
    this._onerrorHandler && this.removeEventListener("error", this._onerrorHandler), this._onerrorHandler = e3, e3 && this.addEventListener("error", e3);
  }
  postMessage(s6) {
    t(() => {
      this._workerMessageHandler(new MessageEvent("message", { data: s6 }));
    });
  }
  dispatchEvent(e3) {
    return this._dispatcher.dispatchEvent(e3);
  }
  addEventListener(e3, s6, r3) {
    this._dispatcher.addEventListener(e3, s6, r3);
  }
  removeEventListener(e3, s6, r3) {
    this._dispatcher.removeEventListener(e3, s6, r3);
  }
  _workerPostMessage(s6) {
    t(() => {
      this.dispatchEvent(new MessageEvent("message", { data: s6 }));
    });
  }
  async _workerMessageHandler(e3) {
    const n3 = f2(e3);
    if (n3 && n3.type === e2.OPEN) {
      const { modulePath: e4, jobId: t2 } = n3;
      let a6 = await E.loadWorker(e4);
      a6 || (a6 = await import(
        /* @vite-ignore */
        /* webpackIgnore: true */
        e4
      ));
      const o = E.connect(a6);
      this._workerPostMessage({ type: e2.OPENED, jobId: t2, data: o });
    }
  }
};

// node_modules/@arcgis/core/core/workers/workerFactory.js
var d = () => i.getLogger("esri.core.workers.workerFactory");
var { HANDSHAKE: m } = e2;
var p = 'let globalId=0;const outgoing=new Map,configuration={CONFIGURATION};self.esriConfig=configuration.esriConfig;const workerPath=self.esriConfig.workers.workerPath,HANDSHAKE=0,OPEN=1,OPENED=2,RESPONSE=3,INVOKE=4,ABORT=5;function createAbortError(){const e=new Error("Aborted");return e.name="AbortError",e}function receiveMessage(e){return e&&e.data?"string"==typeof e.data?JSON.parse(e.data):e.data:null}function invokeStaticMessage(e,o,r){const t=r&&r.signal,n=globalId++;let s=null;return new Promise(((r,i)=>{if(t){if(t.aborted)return i(createAbortError());s=()=>{outgoing.get(n)&&(outgoing.delete(n),self.postMessage({type:5,jobId:n}),i(createAbortError()))},t.addEventListener("abort",s)}outgoing.set(n,{resolve:r,reject:i}),self.postMessage({type:4,jobId:n,methodName:e,abortable:null!=t,data:o})})).finally((()=>{t&&t.removeEventListener("abort",s)}))}let workerRevisionChecked=!1;function checkWorkerRevision(e){if(!workerRevisionChecked&&e.kernelInfo){workerRevisionChecked=!0;const{revision:o,fullVersion:r}=configuration.kernelInfo,{revision:t,fullVersion:n,version:s}=e.kernelInfo;esriConfig.assetsPath!==esriConfig.defaultAssetsPath&&o!==t&&console.warn(`Version mismatch detected between ArcGIS Maps SDK for JavaScript modules and assets. For more information visit https://bit.ly/3QnsuSo.\nModules version: ${r}\nAssets version: ${n??s}\nAssets path: ${esriConfig.assetsPath}`)}}function messageHandler(e){const o=receiveMessage(e);if(!o)return;const r=o.jobId;switch(o.type){case 1:let n;function t(e){const o=n.connect(e);self.postMessage({type:2,jobId:r,data:o},[o])}"function"==typeof define&&define.amd?require([workerPath],(e=>{n=e.default||e,checkWorkerRevision(n),n.loadWorker(o.modulePath).then((e=>e||new Promise((e=>{require([o.modulePath],e)})))).then(t)})):"System"in self&&"function"==typeof System.import?System.import(workerPath).then((e=>(n=e.default,checkWorkerRevision(n),n.loadWorker(o.modulePath)))).then((e=>e||System.import(o.modulePath))).then(t):esriConfig.workers.useDynamicImport?import(workerPath).then((e=>{n=e.default||e,checkWorkerRevision(n),n.loadWorker(o.modulePath).then((e=>e||import(o.modulePath))).then(t)})):(self.RemoteClient||importScripts(workerPath),n=self.RemoteClient.default||self.RemoteClient,checkWorkerRevision(n),n.loadWorker(o.modulePath).then(t));break;case 3:if(outgoing.has(r)){const s=outgoing.get(r);outgoing.delete(r),o.error?s.reject(JSON.parse(o.error)):s.resolve(o.data)}}}self.dojoConfig=configuration.loaderConfig,esriConfig.workers.loaderUrl&&(self.importScripts(esriConfig.workers.loaderUrl),"function"==typeof require&&"function"==typeof require.config&&require.config(configuration.loaderConfig)),self.addEventListener("message",messageHandler),self.postMessage({type:0});';
var g;
var y;
var h = "Failed to create Worker. Fallback to execute module in main thread";
async function k() {
  if (!has("esri-workers")) return w2(new a4());
  if (!g && !y) try {
    const e4 = p.split("{CONFIGURATION}").join(b2());
    g = URL.createObjectURL(new Blob([e4], { type: "text/javascript" }));
  } catch (r3) {
    y = r3 || {};
  }
  let e3;
  if (g) try {
    e3 = new Worker(g, { name: "esri-worker-" + v++ });
  } catch (r3) {
    d().warn(h, y), e3 = new a4();
  }
  else d().warn(h, y), e3 = new a4();
  return w2(e3);
}
async function w2(e3) {
  return new Promise((r3) => {
    function t2(s6) {
      const a6 = f2(s6);
      a6 && a6.type === m && (e3.removeEventListener("message", t2), e3.removeEventListener("error", o), r3(e3));
    }
    function o(r4) {
      r4.preventDefault(), e3.removeEventListener("message", t2), e3.removeEventListener("error", o), d().warn("Failed to create Worker. Fallback to execute module in main thread", r4), (e3 = new a4()).addEventListener("message", t2), e3.addEventListener("error", o);
    }
    e3.addEventListener("message", t2), e3.addEventListener("error", o);
  });
}
function b2() {
  let o;
  if (null != s.default) {
    const e3 = { ...s };
    delete e3.default, o = JSON.parse(JSON.stringify(e3));
  } else o = JSON.parse(JSON.stringify(s));
  o.assetsPath = _(o.assetsPath), o.defaultAssetsPath = o.defaultAssetsPath ? _(o.defaultAssetsPath) : void 0, o.request.interceptors = [], o.log.interceptors = [], o.locale = i2(), o.has = { "esri-csp-restrictions": has("esri-csp-restrictions"), "esri-2d-debug": false, "esri-2d-update-debug": has("esri-2d-update-debug"), "esri-2d-log-updating": has("esri-2d-log-updating"), "featurelayer-pbf": has("featurelayer-pbf"), "featurelayer-fast-triangulation-enabled": has("featurelayer-fast-triangulation-enabled"), "featurelayer-simplify-thresholds": has("featurelayer-simplify-thresholds"), "featurelayer-simplify-payload-size-factors": has("featurelayer-simplify-payload-size-factors"), "featurelayer-simplify-mobile-factor": has("featurelayer-simplify-mobile-factor"), "featurelayer-query-max-depth": has("featurelayer-query-max-depth"), "featurelayer-query-tile-max-features": has("featurelayer-query-tile-max-features"), "featurelayer-query-tile-concurrency": has("featurelayer-query-tile-concurrency"), "featurelayer-query-pausing-enabled": has("featurelayer-query-pausing-enabled"), "featurelayer-snapshot-concurrency": has("featurelayer-snapshot-concurrency"), "featurelayer-snapshot-enabled": has("featurelayer-snapshot-enabled"), "esri-atomics": has("esri-atomics"), "esri-shared-array-buffer": has("esri-shared-array-buffer"), "esri-tiles-debug": has("esri-tiles-debug"), "esri-workers-arraybuffer-transfer": has("esri-workers-arraybuffer-transfer"), "feature-polyline-generalization-factor": has("feature-polyline-generalization-factor"), "host-webworker": 1 }, o.workers.loaderUrl && (o.workers.loaderUrl = _(o.workers.loaderUrl)), o.workers.workerPath ? o.workers.workerPath = _(o.workers.workerPath) : o.workers.workerPath = _(n("esri/core/workers/RemoteClient.js")), o.workers.useDynamicImport = false;
  const n3 = s.workers.loaderConfig, i4 = r2({ baseUrl: n3?.baseUrl, locale: i2(), has: { "csp-restrictions": 1, "dojo-test-sniff": 0, "host-webworker": 1, ...n3?.has }, map: { ...n3?.map }, paths: { ...n3?.paths }, packages: n3?.packages || [] }), l3 = { buildDate: f, fullVersion: r, revision: c };
  return JSON.stringify({ esriConfig: o, loaderConfig: i4, kernelInfo: l3 });
}
var v = 0;

// node_modules/@arcgis/core/core/workers/WorkerOwner.js
var { ABORT: b3, INVOKE: m2, OPEN: _2, OPENED: g2, RESPONSE: u } = e2;
var j = class _j {
  static async create(e3) {
    const t2 = await k();
    return new _j(t2, e3);
  }
  constructor(e3, o) {
    this._outJobs = /* @__PURE__ */ new Map(), this._inJobs = /* @__PURE__ */ new Map(), this.worker = e3, this.id = o, e3.addEventListener("message", this._onMessage.bind(this)), e3.addEventListener("error", (e4) => {
      e4.preventDefault(), i.getLogger("esri.core.workers.WorkerOwner").error(e4);
    });
  }
  terminate() {
    this.worker.terminate();
  }
  async open(e3, t2 = {}) {
    const { signal: o } = t2, r3 = s4();
    return new Promise((t3, n3) => {
      const a6 = { resolve: t3, reject: n3, abortHandle: w(o, () => {
        this._outJobs.delete(r3), this._post({ type: b3, jobId: r3 });
      }) };
      this._outJobs.set(r3, a6), this._post({ type: _2, jobId: r3, modulePath: e3 });
    });
  }
  _onMessage(e3) {
    const t2 = f2(e3);
    if (t2) switch (t2.type) {
      case g2:
        this._onOpenedMessage(t2);
        break;
      case u:
        this._onResponseMessage(t2);
        break;
      case b3:
        this._onAbortMessage(t2);
        break;
      case m2:
        this._onInvokeMessage(t2);
    }
  }
  _onAbortMessage(e3) {
    const t2 = this._inJobs, o = e3.jobId, s6 = t2.get(o);
    s6 && (s6.controller && s6.controller.abort(), t2.delete(o));
  }
  _onInvokeMessage(e3) {
    const { methodName: t2, jobId: o, data: s6, abortable: i4 } = e3, l3 = i4 ? new AbortController() : null, d3 = this._inJobs, h3 = a2[t2];
    let p3;
    try {
      if ("function" != typeof h3) throw new TypeError(`${t2} is not a function`);
      p3 = h3.call(null, s6, { signal: l3 ? l3.signal : null });
    } catch (b4) {
      return void this._post({ type: u, jobId: o, error: i3(b4) });
    }
    S(p3) ? (d3.set(o, { controller: l3, promise: p3 }), p3.then((e4) => {
      d3.has(o) && (d3.delete(o), this._post({ type: u, jobId: o }, e4));
    }, (e4) => {
      d3.has(o) && (d3.delete(o), e4 || (e4 = { message: "Error encountered at method" + t2 }), b(e4) || this._post({ type: u, jobId: o, error: i3(e4 || { message: `Error encountered at method ${t2}` }) }));
    })) : this._post({ type: u, jobId: o }, p3);
  }
  _onOpenedMessage(e3) {
    const { jobId: t2, data: s6 } = e3, r3 = this._outJobs.get(t2);
    r3 && (this._outJobs.delete(t2), l(r3.abortHandle), r3.resolve(s6));
  }
  _onResponseMessage(t2) {
    const { jobId: s6, error: r3, data: n3 } = t2, a6 = this._outJobs.get(s6);
    a6 && (this._outJobs.delete(s6), l(a6.abortHandle), r3 ? a6.reject(s2.fromJSON(JSON.parse(r3))) : a6.resolve(n3));
  }
  _post(e3, t2, o) {
    return a(this.worker, e3, t2, o);
  }
};

// node_modules/@arcgis/core/core/workers/workers.js
var s5 = has("host-browser") ? Math.min(navigator.hardwareConcurrency - 1, has("workers-pool-size") ?? 8) : 0;
var a5 = has("esri-mobile") ? Math.min(s5, 3) : s5;
a5 || (a5 = has("safari") && has("mac") ? 7 : 2);
var c3 = 0;
var l2 = [];
function m3() {
  g3();
}
async function f3(r3, t2) {
  const n3 = new c2(), { registryTarget: i4, ...s6 } = t2;
  return await n3.open(r3, s6), i4 && e(i4, n3), n3;
}
async function p2(e3, o = {}) {
  if ("string" != typeof e3) throw new s2("workers:undefined-module", "modulePath is missing");
  let i4 = o.strategy || "distributed";
  if (has("host-webworker") && !has("esri-workers") && (i4 = "local"), "local" === i4) {
    let r3 = await E.loadWorker(e3);
    r3 || (r3 = await import(
      /* @vite-ignore */
      /* webpackIgnore: true */
      e3
    )), s3(o.signal);
    const i5 = o.client || r3;
    return f3([E.connect(r3, o.schedule)], { ...o, client: i5 });
  }
  if (await g3(), s3(o.signal), "dedicated" === i4) {
    const r3 = c3++ % a5;
    return f3([await l2[r3].open(e3, o)], o);
  }
  if (o.maxNumWorkers && o.maxNumWorkers > 0) {
    const r3 = Math.min(o.maxNumWorkers, a5);
    if (r3 < a5) {
      const t2 = new Array(r3);
      for (let n3 = 0; n3 < r3; ++n3) {
        const r4 = c3++ % a5;
        t2[n3] = l2[r4].open(e3, o);
      }
      return f3(t2, o);
    }
  }
  return f3(l2.map((r3) => r3.open(e3, o)), o);
}
var h2;
var d2 = null;
async function g3() {
  if (d2) return d2;
  h2 = new AbortController();
  const r3 = [];
  for (let t2 = 0; t2 < a5; t2++) {
    const e3 = j.create(t2).then((r4) => (l2[t2] = r4, r4));
    r3.push(e3);
  }
  return d2 = Promise.all(r3), d2;
}

export {
  m3 as m,
  p2 as p
};
//# sourceMappingURL=chunk-ZXGBNDYM.js.map
