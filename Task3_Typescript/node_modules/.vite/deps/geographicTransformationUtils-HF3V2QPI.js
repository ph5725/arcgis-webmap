import {
  c,
  i
} from "./chunk-JEBSIDYN.js";
import {
  G,
  _,
  r
} from "./chunk-ZX46THLM.js";
import "./chunk-N3XLUQJI.js";
import "./chunk-JUAD7TJ6.js";
import "./chunk-VHLUKPRH.js";
import "./chunk-5TPMG26T.js";
import "./chunk-VOLWOTEG.js";
import "./chunk-XTNIDRTB.js";
import "./chunk-FGWIXJQY.js";
import "./chunk-TKYAZCMB.js";
import "./chunk-3TBMFSPB.js";
import "./chunk-PSZLDJJA.js";
import "./chunk-ZWFY3WY5.js";
import "./chunk-LQFTAGIV.js";
import "./chunk-S7IJH524.js";
import "./chunk-GZ2P4SCJ.js";
import "./chunk-XWG6QGFK.js";
import "./chunk-GWNLQRNM.js";
import "./chunk-FXKORAMT.js";
import "./chunk-GNMFMITH.js";

// node_modules/@arcgis/core/geometry/operators/support/geographicTransformationUtils.js
var s;
var i2;
var a;
var c2;
function p() {
  return !!s && r();
}
async function m() {
  if (!p()) {
    const [t, e, r2, p2] = await Promise.all([import("./Envelope2D-GG7XRT5U.js"), import("./ProjectionTransformation-C52QHNIF.js").then((n) => n.aK).then(({ queryTransformationList: n }) => n), import("./ProjectionTransformation-C52QHNIF.js").then((n) => n.aG).then(({ injectPe: n }) => n), import("./apiConverter-OEQWXNM7.js"), _()]);
    c2 = t.Envelope2D.constructEmpty(), s = e, r2(G), i2 = p2.fromExtent, a = p2.fromSpatialReference;
  }
}
function u(n, t, o = null) {
  const e = o ? i2(o).asEnvelope2D() : c2, r2 = s(0, a(n), a(t), e, 1, true);
  return r2.length > 0 ? l(r2[0]) : null;
}
function f(n, t, o = null) {
  const e = o ? i2(o).asEnvelope2D() : c2;
  return s(0, a(n), a(t), e, 0, true).map((n2) => l(n2));
}
function l(n) {
  const t = new c();
  for (let o = 0; o < n.count(); o++) {
    const e = n.getStep(o);
    t.steps.push(new i({ wkid: e.getID(), isInverse: e.isInverted() }));
  }
  return t;
}
export {
  u as getTransformation,
  f as getTransformations,
  p as isLoaded,
  m as load
};
//# sourceMappingURL=geographicTransformationUtils-HF3V2QPI.js.map
