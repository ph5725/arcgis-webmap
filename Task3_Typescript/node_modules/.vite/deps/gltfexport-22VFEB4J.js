import {
  u3 as u2
} from "./chunk-6SLEP34Y.js";
import {
  B
} from "./chunk-DHCIRPC3.js";
import "./chunk-BF6IRMUG.js";
import "./chunk-24KTNAIE.js";
import "./chunk-TNKA4BMD.js";
import "./chunk-VKKELZ6R.js";
import "./chunk-DLD56RZZ.js";
import "./chunk-3SJIVSAT.js";
import "./chunk-HXR4TQII.js";
import {
  n as n2
} from "./chunk-SO2VFJCA.js";
import "./chunk-67CCONUO.js";
import "./chunk-6DBRCIDV.js";
import "./chunk-YSRSL2SU.js";
import {
  N,
  T
} from "./chunk-FQ4JUVCN.js";
import {
  e,
  r,
  t as t2
} from "./chunk-3LL6ALVC.js";
import "./chunk-NZPABYQQ.js";
import "./chunk-CCHJ3WNU.js";
import "./chunk-DRAQJS2F.js";
import {
  O,
  P
} from "./chunk-BZYXFNL4.js";
import "./chunk-VNTS5E5O.js";
import {
  A,
  H,
  _ as _2,
  c,
  o
} from "./chunk-TMFB3DKM.js";
import "./chunk-2JRCX6DU.js";
import "./chunk-TNW4TPNP.js";
import "./chunk-7FAVUXK2.js";
import "./chunk-IVNFIIVI.js";
import "./chunk-7NMH5MM5.js";
import "./chunk-TCIXF7MM.js";
import "./chunk-UGTICYU7.js";
import "./chunk-3MHRDLQO.js";
import "./chunk-KE3WBZYL.js";
import "./chunk-EOMIFMDH.js";
import "./chunk-DNZK6PPI.js";
import "./chunk-7BWCD63N.js";
import {
  p
} from "./chunk-6KFXWKZZ.js";
import {
  _,
  a,
  n,
  t
} from "./chunk-RACDQ3AL.js";
import "./chunk-TEXTBDH7.js";
import "./chunk-TVM3SZJR.js";
import "./chunk-52HWRRRQ.js";
import "./chunk-VNTEV3V4.js";
import "./chunk-OGOQOMMV.js";
import "./chunk-7Z3AF3B2.js";
import "./chunk-6GWORUT3.js";
import {
  s as s3
} from "./chunk-FPSA4NFH.js";
import "./chunk-O5TPFXRT.js";
import "./chunk-Q6XRAGMA.js";
import "./chunk-JUAPMINU.js";
import "./chunk-PK2ZR2SJ.js";
import "./chunk-YFPGM5UE.js";
import "./chunk-OXSERRAR.js";
import "./chunk-7HI4VRVW.js";
import "./chunk-ZX46THLM.js";
import "./chunk-KTUX3OKX.js";
import "./chunk-E3KEUGUG.js";
import "./chunk-N3XLUQJI.js";
import "./chunk-JUAD7TJ6.js";
import "./chunk-VHLUKPRH.js";
import "./chunk-5TPMG26T.js";
import "./chunk-3NBBZ43U.js";
import "./chunk-VOLWOTEG.js";
import "./chunk-XTNIDRTB.js";
import "./chunk-FGWIXJQY.js";
import "./chunk-TKYAZCMB.js";
import "./chunk-3TBMFSPB.js";
import "./chunk-PSZLDJJA.js";
import "./chunk-ZWFY3WY5.js";
import {
  ot,
  tt
} from "./chunk-LQFTAGIV.js";
import {
  u
} from "./chunk-S7IJH524.js";
import {
  s as s2
} from "./chunk-GZ2P4SCJ.js";
import {
  i2 as i,
  s
} from "./chunk-XWG6QGFK.js";
import "./chunk-GWNLQRNM.js";
import {
  G
} from "./chunk-FXKORAMT.js";
import "./chunk-GNMFMITH.js";

// node_modules/@arcgis/core/geometry/support/meshUtils/exporters/gltf/glb.js
var t3;
!function(t4) {
  t4[t4.JSON = 1313821514] = "JSON", t4[t4.BIN = 5130562] = "BIN";
}(t3 || (t3 = {}));
var _e = class _e {
  constructor(i9, s6) {
    if (!i9) throw new Error("GLB requires a JSON gltf chunk");
    this._length = _e.HEADER_SIZE, this._length += _e.CHUNK_HEADER_SIZE;
    const r2 = n3(i9);
    if (this._length += h(r2.byteLength, 4), s6 && (this._length += _e.CHUNK_HEADER_SIZE, this._length += s6.byteLength, s6.byteLength % 4)) throw new Error("Expected BIN chunk length to be divisible by 4 at this point");
    this.buffer = new ArrayBuffer(this._length), this._outView = new DataView(this.buffer), this._writeHeader();
    const _3 = this._writeChunk(r2, 12, t3.JSON, 32);
    s6 && this._writeChunk(s6, _3, t3.BIN);
  }
  _writeHeader() {
    this._outView.setUint32(0, _e.MAGIC, true), this._outView.setUint32(4, _e.VERSION, true), this._outView.setUint32(8, this._length, true);
  }
  _writeChunk(t4, e5, n4, s6 = 0) {
    const r2 = h(t4.byteLength, 4);
    for (this._outView.setUint32(e5, r2, true), this._outView.setUint32(e5 += 4, n4, true), i2(this._outView.buffer, t4, e5 += 4, 0, t4.byteLength), e5 += t4.byteLength; e5 % 4; ) s6 && this._outView.setUint8(e5, s6), e5++;
    return e5;
  }
};
_e.HEADER_SIZE = 12;
_e.CHUNK_HEADER_SIZE = 8;
_e.MAGIC = 1179937895;
_e.VERSION = 2;
var e2 = _e;
function i2(t4, e5, i9, n4, h2) {
  new Uint8Array(t4, i9, h2).set(new Uint8Array(e5, n4, h2), 0);
}
function n3(t4) {
  return new TextEncoder().encode(t4).buffer;
}
function h(t4, e5) {
  return e5 * Math.ceil(t4 / e5);
}

// node_modules/@arcgis/core/geometry/support/meshUtils/exporters/gltf/types.js
var E;
var A2;
var R;
var L;
var o2;
var I;
var N2;
!function(E2) {
  E2[E2.External = 0] = "External", E2[E2.DataURI = 1] = "DataURI", E2[E2.GLB = 2] = "GLB";
}(E || (E = {})), function(E2) {
  E2[E2.External = 0] = "External", E2[E2.DataURI = 1] = "DataURI", E2[E2.GLB = 2] = "GLB";
}(A2 || (A2 = {})), function(E2) {
  E2[E2.ARRAY_BUFFER = 34962] = "ARRAY_BUFFER", E2[E2.ELEMENT_ARRAY_BUFFER = 34963] = "ELEMENT_ARRAY_BUFFER";
}(R || (R = {})), function(E2) {
  E2.SCALAR = "SCALAR", E2.VEC2 = "VEC2", E2.VEC3 = "VEC3", E2.VEC4 = "VEC4", E2.MAT2 = "MAT2", E2.MAT3 = "MAT3", E2.MAT4 = "MAT4";
}(L || (L = {})), function(E2) {
  E2[E2.POINTS = 0] = "POINTS", E2[E2.LINES = 1] = "LINES", E2[E2.LINE_LOOP = 2] = "LINE_LOOP", E2[E2.LINE_STRIP = 3] = "LINE_STRIP", E2[E2.TRIANGLES = 4] = "TRIANGLES", E2[E2.TRIANGLE_STRIP = 5] = "TRIANGLE_STRIP", E2[E2.TRIANGLE_FAN = 6] = "TRIANGLE_FAN";
}(o2 || (o2 = {})), function(E2) {
  E2.OPAQUE = "OPAQUE", E2.MASK = "MASK", E2.BLEND = "BLEND";
}(I || (I = {})), function(E2) {
  E2[E2.NoColor = 0] = "NoColor", E2[E2.FaceColor = 1] = "FaceColor", E2[E2.VertexColor = 2] = "VertexColor";
}(N2 || (N2 = {}));

// node_modules/@arcgis/core/geometry/support/meshUtils/exporters/gltf/bufferview.js
var i3 = class {
  constructor(t4, s6, i9, r2, n4) {
    this._buffer = t4, this._componentType = i9, this._dataType = r2, this._data = [], this._isFinalized = false, this._accessorIndex = -1, this._accessorAttribute = null, this._accessorMin = null, this._accessorMax = null, s6.bufferViews || (s6.bufferViews = []), this.index = s6.bufferViews.length, this._bufferView = { buffer: t4.index, byteLength: -1, target: n4 };
    const a4 = this._getElementSize();
    a4 >= 4 && n4 !== R.ELEMENT_ARRAY_BUFFER && (this._bufferView.byteStride = a4), s6.bufferViews.push(this._bufferView), this._numComponentsForDataType = this._calculateNumComponentsForDataType();
  }
  push(e5) {
    const t4 = this._data.length;
    if (this._data.push(e5), this._accessorIndex >= 0) {
      const s6 = t4 % this._numComponentsForDataType, i9 = this._accessorMin[s6];
      this._accessorMin[s6] = "number" != typeof i9 ? e5 : Math.min(i9, e5);
      const r2 = this._accessorMax[s6];
      this._accessorMax[s6] = "number" != typeof r2 ? e5 : Math.max(r2, e5);
    }
  }
  get dataSize() {
    return this._data.length * this._sizeComponentType();
  }
  get byteSize() {
    function e5(e6, t4) {
      return t4 * Math.ceil(e6 / t4);
    }
    return e5(this.dataSize, 4);
  }
  getByteOffset() {
    if (!this._isFinalized) throw new Error("Cannot get BufferView offset until it is finalized");
    return this._buffer.getByteOffset(this);
  }
  get byteOffset() {
    if (!this._isFinalized) throw new Error("Cannot get BufferView offset until it is finalized");
    return this._buffer.getByteOffset(this);
  }
  _createTypedArray(e5, t4) {
    switch (this._componentType) {
      case O.BYTE:
        return new Int8Array(e5, t4);
      case O.FLOAT:
        return new Float32Array(e5, t4);
      case O.SHORT:
        return new Int16Array(e5, t4);
      case O.UNSIGNED_BYTE:
        return new Uint8Array(e5, t4);
      case O.UNSIGNED_INT:
        return new Uint32Array(e5, t4);
      case O.UNSIGNED_SHORT:
        return new Uint16Array(e5, t4);
    }
  }
  writeOutToBuffer(e5, t4) {
    this._createTypedArray(e5, t4).set(this._data);
  }
  writeAsync(e5) {
    if (this._asyncWritePromise) throw new Error("Can't write multiple bufferView values asynchronously");
    return this._asyncWritePromise = e5.then((e6) => {
      const t4 = new Uint8Array(e6);
      for (let s6 = 0; s6 < t4.length; ++s6) this._data.push(t4[s6]);
      delete this._asyncWritePromise;
    }), this._asyncWritePromise;
  }
  startAccessor(e5) {
    if (this._accessorIndex >= 0) throw new Error("Accessor was started without ending the previous one");
    this._accessorIndex = this._data.length, this._accessorAttribute = e5;
    const t4 = this._numComponentsForDataType;
    this._accessorMin = new Array(t4), this._accessorMax = new Array(t4);
  }
  endAccessor() {
    if (this._accessorIndex < 0) throw new Error("An accessor was not started, but was attempted to be ended");
    const e5 = this._getElementSize(), t4 = this._numComponentsForDataType, i9 = (this._data.length - this._accessorIndex) / t4;
    if (i9 % 1) throw new Error("An accessor was ended with missing component values");
    for (let s6 = 0; s6 < this._accessorMin.length; ++s6) "number" != typeof this._accessorMin[s6] && (this._accessorMin[s6] = 0), "number" != typeof this._accessorMax[s6] && (this._accessorMax[s6] = 0);
    const r2 = { byteOffset: e5 * (this._accessorIndex / t4), componentType: this._componentType, count: i9, type: this._dataType, min: this._accessorMin, max: this._accessorMax, name: this._accessorAttribute };
    switch (this._accessorAttribute) {
      case "TEXCOORD_0":
      case "TEXCOORD_1":
      case "COLOR_0":
      case "WEIGHTS_0":
        switch (this._componentType) {
          case O.UNSIGNED_BYTE:
          case O.UNSIGNED_SHORT:
            r2.normalized = true;
        }
    }
    return this._accessorIndex = -1, this._accessorAttribute = null, this._accessorMin = null, this._accessorMax = null, r2;
  }
  get finalized() {
    return this._finalizedPromise ? this._finalizedPromise : this._isFinalized ? this._finalizedPromise = Promise.resolve() : this._finalizedPromise = new Promise((e5) => this._finalizedPromiseResolve = e5);
  }
  async finalize() {
    const e5 = this._bufferView, t4 = this._buffer.getViewFinalizePromises(this);
    this._asyncWritePromise && t4.push(this._asyncWritePromise), await Promise.allSettled(t4), this._isFinalized = true, e5.byteOffset = this.getByteOffset(), e5.byteLength = this.dataSize, this._finalizedPromiseResolve && this._finalizedPromiseResolve();
  }
  _getElementSize() {
    return this._sizeComponentType() * this._numComponentsForDataType;
  }
  _sizeComponentType() {
    switch (this._componentType) {
      case O.BYTE:
      case O.UNSIGNED_BYTE:
        return 1;
      case O.SHORT:
      case O.UNSIGNED_SHORT:
        return 2;
      case O.UNSIGNED_INT:
      case O.FLOAT:
        return 4;
    }
  }
  _calculateNumComponentsForDataType() {
    switch (this._dataType) {
      case L.SCALAR:
        return 1;
      case L.VEC2:
        return 2;
      case L.VEC3:
        return 3;
      case L.VEC4:
      case L.MAT2:
        return 4;
      case L.MAT3:
        return 9;
      case L.MAT4:
        return 16;
    }
  }
};

// node_modules/@arcgis/core/geometry/support/meshUtils/exporters/gltf/buffer.js
var i4 = class {
  constructor(e5) {
    this._gltf = e5, this._bufferViews = [], this._isFinalized = false, e5.buffers || (e5.buffers = []), this.index = e5.buffers.length;
    const i9 = { byteLength: -1 };
    e5.buffers.push(i9), this._buffer = i9;
  }
  addBufferView(i9, t4, r2) {
    if (this._finalizePromise) throw new Error("Cannot add buffer view after fiinalizing buffer");
    const f3 = new i3(this, this._gltf, i9, t4, r2);
    return this._bufferViews.push(f3), f3;
  }
  getByteOffset(e5) {
    let i9 = 0;
    for (const t4 of this._bufferViews) {
      if (t4 === e5) return i9;
      i9 += t4.byteSize;
    }
    throw new Error("Given bufferView was not present in this buffer");
  }
  getViewFinalizePromises(e5) {
    const i9 = [];
    for (const t4 of this._bufferViews) {
      if (e5 && t4 === e5) return i9;
      i9.push(t4.finalized);
    }
    return i9;
  }
  getArrayBuffer() {
    if (!this._isFinalized) throw new Error("Cannot get ArrayBuffer from Buffer before it is finalized");
    const e5 = this._getTotalSize(), i9 = new ArrayBuffer(e5);
    let t4 = 0;
    for (const r2 of this._bufferViews) r2.writeOutToBuffer(i9, t4), t4 += r2.byteSize;
    return i9;
  }
  finalize() {
    if (this._finalizePromise) throw new Error(`Buffer ${this.index} was already finalized`);
    return this._finalizePromise = Promise.allSettled(this.getViewFinalizePromises()).then(() => {
      this._isFinalized = true;
      const e5 = this.getArrayBuffer();
      this._buffer.byteLength = e5.byteLength, this._buffer.uri = e5;
    }), this._gltf.extras.promises.push(this._finalizePromise), this._finalizePromise;
  }
  _getTotalSize() {
    let e5 = 0;
    for (const i9 of this._bufferViews) e5 += i9.byteSize;
    return e5;
  }
};

// node_modules/@arcgis/core/geometry/support/meshUtils/exporters/gltf/geometry.js
function c2(o4, n4) {
  if (o4.components) for (const t4 of o4.components) t4.faces && "smooth" === t4.shading && e3(t4.faces, n4);
}
function e3(r2, c4) {
  null == c4.normal && (c4.normal = new Float32Array(c4.position.length));
  const { position: e5, normal: m2 } = c4, h2 = r2.length / 3;
  for (let s6 = 0; s6 < h2; ++s6) {
    const c5 = 3 * r2[3 * s6], l3 = 3 * r2[3 * s6 + 1], h3 = 3 * r2[3 * s6 + 2], p2 = o(a2, e5[c5], e5[c5 + 1], e5[c5 + 2]), g = o(i5, e5[l3], e5[l3 + 1], e5[l3 + 2]), u4 = o(f, e5[h3], e5[h3 + 1], e5[h3 + 2]), d2 = c(g, g, p2), j = c(u4, u4, p2), v2 = _2(d2, d2, j);
    m2[c5] += v2[0], m2[c5 + 1] += v2[1], m2[c5 + 2] += v2[2], m2[l3] += v2[0], m2[l3 + 1] += v2[1], m2[l3 + 2] += v2[2], m2[h3] += v2[0], m2[h3 + 1] += v2[1], m2[h3 + 2] += v2[2];
  }
  for (let n4 = 0; n4 < m2.length; n4 += 3) o(l, m2[n4], m2[n4 + 1], m2[n4 + 2]), A(l, l), m2[n4] = l[0], m2[n4 + 1] = l[1], m2[n4 + 2] = l[2];
}
var a2 = n();
var i5 = n();
var f = n();
var l = n();

// node_modules/@arcgis/core/geometry/support/meshUtils/exporters/gltf/imageutils.js
function a3(e5) {
  const t4 = m(e5);
  return null != t4 ? t4.toDataURL() : "";
}
async function i6(n4, r2) {
  const a4 = m(n4);
  if (null == a4) throw new s("imageToArrayBuffer", "Unsupported image type");
  const i9 = o3(n4), s6 = await new Promise((e5) => a4.toBlob(e5, i9));
  if (s2(r2), !s6) throw new s("imageToArrayBuffer", "Failed to encode image");
  const c4 = await s6.arrayBuffer();
  return s2(r2), { data: c4, type: i9 };
}
function o3(e5) {
  if (!(e5 instanceof HTMLImageElement)) return "image/png";
  const t4 = e5.src;
  if (tt(t4)) {
    const e6 = ot(t4);
    return "image/jpeg" === e6?.mediaType ? e6.mediaType : "image/png";
  }
  return /\.png$/i.test(t4) ? "image/png" : /\.(jpg|jpeg)$/i.test(t4) ? "image/jpeg" : "image/png";
}
function m(e5) {
  if (e5 instanceof HTMLCanvasElement) return e5;
  if (e5 instanceof HTMLVideoElement) return null;
  const t4 = document.createElement("canvas");
  t4.width = e5.width, t4.height = e5.height;
  const n4 = t4.getContext("2d");
  return e5 instanceof HTMLImageElement ? n4.drawImage(e5, 0, 0, e5.width, e5.height) : e5 instanceof ImageData && n4.putImageData(e5, 0, 0), t4;
}
function s4(e5) {
  const t4 = [], n4 = new Uint8Array(e5);
  for (let r2 = 0; r2 < n4.length; r2++) t4.push(String.fromCharCode(n4[r2]));
  return "data:application/octet-stream;base64," + btoa(t4.join(""));
}
function c3(e5) {
  if (e5.byteLength < 8) return false;
  const t4 = new Uint8Array(e5);
  return 137 === t4[0] && 80 === t4[1] && 78 === t4[2] && 71 === t4[3] && 13 === t4[4] && 10 === t4[5] && 26 === t4[6] && 10 === t4[7];
}

// node_modules/@arcgis/core/geometry/support/meshUtils/exporters/gltf/gltf.js
var O2 = () => i.getLogger("esri.geometry.support.meshUtils.exporters.gltf.gltf");
var w = class {
  constructor(e5, t4) {
    this.options = t4, this._materialMap = new Array(), this._imageMap = /* @__PURE__ */ new Map(), this._textureMap = /* @__PURE__ */ new Map(), this.gltf = { asset: { version: "2.0", copyright: e5.copyright, generator: e5.generator }, extras: { output: t4.output, binChunkBuffer: null, promises: [] } }, this._addScenes(e5);
  }
  _addScenes(e5) {
    this.gltf.scene = e5.defaultScene;
    const t4 = this.gltf.extras, s6 = t4.output.buffer === E.GLB || t4.output.image === A2.GLB;
    s6 && (t4.binChunkBuffer = new i4(this.gltf)), e5.forEachScene((e6) => {
      this._addScene(e6);
    }), s6 && t4.binChunkBuffer.finalize();
  }
  _addScene(e5) {
    this.gltf.scenes || (this.gltf.scenes = []);
    const t4 = {};
    e5.name && (t4.name = e5.name), e5.forEachNode((e6) => {
      t4.nodes || (t4.nodes = []), t4.nodes.push(...this._addNodes(e6));
    }), this.gltf.scenes.push(t4);
  }
  _addNodes(e5) {
    this.gltf.nodes || (this.gltf.nodes = []);
    const t4 = {};
    e5.name && (t4.name = e5.name);
    const s6 = e5.translation;
    H(s6, a) || (t4.translation = t(s6));
    const r2 = e5.rotation;
    N(r2, r) || (t4.rotation = t2(r2));
    const h2 = e5.scale;
    H(h2, _) || (t4.scale = t(h2));
    const f3 = this.gltf.nodes.length;
    if (this.gltf.nodes.push(t4), e5.mesh && e5.mesh.vertexAttributes.position) {
      const s7 = this._createMeshes(e5.mesh), r3 = [f3];
      if (1 === s7.length) this._addMesh(t4, s7[0]);
      else for (const e6 of s7) {
        const t5 = {};
        this._addMesh(t5, e6), r3.push(this.gltf.nodes.length), this.gltf.nodes.push(t5);
      }
      return r3;
    }
    return e5.forEachNode((e6) => {
      t4.children || (t4.children = []), t4.children.push(...this._addNodes(e6));
    }), [f3];
  }
  _addMesh(e5, t4) {
    this.gltf.meshes ??= [];
    const s6 = this.gltf.meshes.length;
    this.gltf.meshes.push(t4), e5.mesh = s6;
  }
  _createMeshes(e5) {
    const t4 = this.gltf.extras, s6 = t4.output.buffer === E.GLB;
    let r2;
    r2 = s6 ? t4.binChunkBuffer : new i4(this.gltf);
    const i9 = this.options.origin, o4 = e5.vertexSpace.clone();
    o4.origin = [i9.x, i9.y, i9.z ?? 0];
    const a4 = B({ vertexAttributes: e5.vertexAttributes, vertexSpace: e5.vertexSpace, transform: this.options?.ignoreLocalTransform ? null : e5.transform, spatialReference: e5.spatialReference }, o4, { targetUnit: this.options.unitConversionDisabled ? void 0 : "meters" });
    if (!a4) return [];
    c2(e5, a4), v(a4);
    const { position: n4, normal: l3, tangent: c4 } = a4, { uv: u4, color: h2 } = e5.vertexAttributes, g = r2.addBufferView(O.FLOAT, L.VEC3, R.ARRAY_BUFFER);
    let T2, R2, A3, b;
    l3 && (T2 = r2.addBufferView(O.FLOAT, L.VEC3, R.ARRAY_BUFFER)), u4 && (R2 = r2.addBufferView(O.FLOAT, L.VEC2, R.ARRAY_BUFFER)), c4 && (A3 = r2.addBufferView(O.FLOAT, L.VEC4, R.ARRAY_BUFFER)), h2 && (b = r2.addBufferView(O.FLOAT, L.VEC4, R.ARRAY_BUFFER)), g.startAccessor("POSITION"), T2 && T2.startAccessor("NORMAL"), R2 && R2.startAccessor("TEXCOORD_0"), A3 && A3.startAccessor("TANGENT"), b && b.startAccessor("COLOR_0");
    const E2 = a4.position.length / 3;
    for (let f3 = 0; f3 < E2; ++f3) g.push(n4[3 * f3]), g.push(n4[3 * f3 + 1]), g.push(n4[3 * f3 + 2]), T2 && null != l3 && (T2.push(l3[3 * f3]), T2.push(l3[3 * f3 + 1]), T2.push(l3[3 * f3 + 2])), R2 && null != u4 && (R2.push(u4[2 * f3]), R2.push(u4[2 * f3 + 1])), A3 && null != c4 && (A3.push(c4[4 * f3]), A3.push(c4[4 * f3 + 1]), A3.push(c4[4 * f3 + 2]), A3.push(c4[4 * f3 + 3])), b && null != h2 && (b.push(I2(h2[4 * f3] / 255)), b.push(I2(h2[4 * f3 + 1] / 255)), b.push(I2(h2[4 * f3 + 2] / 255)), b.push(h2[4 * f3 + 3] / 255));
    const O3 = g.endAccessor(), w2 = this._addAccessor(g.index, O3);
    let C2, N3, L2, S, B2;
    if (T2) {
      const e6 = T2.endAccessor();
      C2 = this._addAccessor(T2.index, e6);
    }
    if (R2) {
      const e6 = R2.endAccessor();
      N3 = this._addAccessor(R2.index, e6);
    }
    if (A3) {
      const e6 = A3.endAccessor();
      L2 = this._addAccessor(A3.index, e6);
    }
    if (b) {
      const e6 = b.endAccessor();
      S = this._addAccessor(b.index, e6);
    }
    const F = [];
    return e5.components && e5.components.length > 0 && e5.components[0].faces ? (B2 = r2.addBufferView(O.UNSIGNED_INT, L.SCALAR, R.ELEMENT_ARRAY_BUFFER), this._addMeshVertexIndexed(B2, e5.components, F, w2, C2, N3, L2, S)) : this._addMeshVertexNonIndexed(e5.components, F, w2, C2, N3, L2, S), g.finalize(), T2 && T2.finalize(), R2 && R2.finalize(), A3 && A3.finalize(), B2 && B2.finalize(), b && b.finalize(), s6 || r2.finalize(), F;
  }
  _addMaterial(e5) {
    if (null == e5) return;
    const t4 = this._materialMap.indexOf(e5);
    if (-1 !== t4) return t4;
    this.gltf.materials || (this.gltf.materials = []);
    const s6 = {};
    switch (e5.alphaMode) {
      case "mask":
        s6.alphaMode = I.MASK;
        break;
      case "auto":
      case "blend":
        s6.alphaMode = I.BLEND;
    }
    s6.alphaCutoff = e5.alphaCutoff, e5.doubleSided && (s6.doubleSided = e5.doubleSided), s6.pbrMetallicRoughness = {};
    const r2 = (e6) => {
      const t5 = e6.toRgba();
      return t5[0] = I2(t5[0] / 255), t5[1] = I2(t5[1] / 255), t5[2] = I2(t5[2] / 255), t5;
    };
    if (null != e5.color && (s6.pbrMetallicRoughness.baseColorFactor = r2(e5.color)), null != e5.colorTexture && (s6.pbrMetallicRoughness.baseColorTexture = this._createTextureInfo(e5.colorTexture, e5.colorTextureTransform)), null != e5.normalTexture && (s6.normalTexture = this._createTextureInfo(e5.normalTexture, e5.normalTextureTransform)), e5 instanceof u2) {
      if (null != e5.emissiveTexture && (s6.emissiveTexture = this._createTextureInfo(e5.emissiveTexture, e5.emissiveTextureTransform)), null != e5.emissiveColor) {
        const t5 = r2(e5.emissiveColor);
        s6.emissiveFactor = [t5[0], t5[1], t5[2]];
      }
      null != e5.occlusionTexture && (s6.occlusionTexture = this._createTextureInfo(e5.occlusionTexture, e5.occlusionTextureTransform)), null != e5.metallicRoughnessTexture && (s6.pbrMetallicRoughness.metallicRoughnessTexture = this._createTextureInfo(e5.metallicRoughnessTexture, e5.metallicRoughnessTextureTransform)), s6.pbrMetallicRoughness.metallicFactor = e5.metallic, s6.pbrMetallicRoughness.roughnessFactor = e5.roughness;
    } else s6.pbrMetallicRoughness.metallicFactor = 1, s6.pbrMetallicRoughness.roughnessFactor = 1, O2().warnOnce("Meshes exported to GLTF without MeshMaterialMetallicRoughness material will appear different when imported back.");
    const i9 = this.gltf.materials.length;
    return this.gltf.materials.push(s6), this._materialMap.push(e5), i9;
  }
  _createTextureInfo(e5, t4) {
    const s6 = { index: this._addTexture(e5) };
    return t4 ? (s6.extensions || (s6.extensions = {}), s6.extensions.KHR_texture_transform = { scale: t4.scale, offset: t4.offset, rotation: s3(t4.rotation) }, s6) : s6;
  }
  _addTexture(e5) {
    const t4 = this.gltf.textures ?? [];
    return this.gltf.textures = t4, u(this._textureMap, e5, () => {
      const s6 = { sampler: this._addSampler(e5), source: this._addImage(e5) }, r2 = t4.length;
      return t4.push(s6), r2;
    });
  }
  _addImage(e5) {
    const t4 = this._imageMap.get(e5);
    if (null != t4) return t4;
    this.gltf.images || (this.gltf.images = []);
    const s6 = {};
    if (e5.url) s6.uri = e5.url;
    else {
      const t5 = e5.data;
      s6.extras = t5;
      for (let e6 = 0; e6 < this.gltf.images.length; ++e6) if (t5 === this.gltf.images[e6].extras) return e6;
      const r3 = this.gltf.extras;
      switch (r3.output.image) {
        case A2.GLB: {
          const e6 = r3.binChunkBuffer.addBufferView(O.UNSIGNED_BYTE, L.SCALAR);
          if (n2(t5)) null != t5.data && e6.writeOutToBuffer(t5.data, 0);
          else {
            const i9 = i6(t5, this.options.signal).then(({ data: e7, type: t6 }) => (s6.mimeType = t6, e7));
            r3.promises.push(e6.writeAsync(i9).then(() => {
              e6.finalize();
            }));
          }
          s6.bufferView = e6.index;
          break;
        }
        case A2.DataURI:
          if (n2(t5)) {
            O2().warnOnce("Image export for basis compressed textures not available.");
            break;
          }
          s6.uri = a3(t5);
          break;
        default:
          if (n2(t5)) {
            O2().warnOnce("Image export for basis compressed textures not available.");
            break;
          }
          r3.promises.push(i6(t5, this.options.signal).then(({ data: e6, type: t6 }) => {
            s6.uri = e6, s6.mimeType = t6;
          }));
      }
    }
    const r2 = this.gltf.images.length;
    return this.gltf.images.push(s6), this._imageMap.set(e5, r2), r2;
  }
  _addSampler(e5) {
    this.gltf.samplers || (this.gltf.samplers = []);
    let t4 = P.REPEAT, s6 = P.REPEAT;
    if ("string" == typeof e5.wrap) switch (e5.wrap) {
      case "clamp":
        t4 = P.CLAMP_TO_EDGE, s6 = P.CLAMP_TO_EDGE;
        break;
      case "mirror":
        t4 = P.MIRRORED_REPEAT, s6 = P.MIRRORED_REPEAT;
    }
    else {
      switch (e5.wrap.vertical) {
        case "clamp":
          s6 = P.CLAMP_TO_EDGE;
          break;
        case "mirror":
          s6 = P.MIRRORED_REPEAT;
      }
      switch (e5.wrap.horizontal) {
        case "clamp":
          t4 = P.CLAMP_TO_EDGE;
          break;
        case "mirror":
          t4 = P.MIRRORED_REPEAT;
      }
    }
    const r2 = { wrapS: t4, wrapT: s6 };
    for (let o4 = 0; o4 < this.gltf.samplers.length; ++o4) if (JSON.stringify(r2) === JSON.stringify(this.gltf.samplers[o4])) return o4;
    const i9 = this.gltf.samplers.length;
    return this.gltf.samplers.push(r2), i9;
  }
  _addAccessor(e5, t4) {
    this.gltf.accessors || (this.gltf.accessors = []);
    const s6 = { bufferView: e5, byteOffset: t4.byteOffset, componentType: t4.componentType, count: t4.count, type: t4.type, min: t4.min, max: t4.max, name: t4.name };
    t4.normalized && (s6.normalized = true);
    const r2 = this.gltf.accessors.length;
    return this.gltf.accessors.push(s6), r2;
  }
  _addMeshVertexIndexed(e5, t4, s6, r2, i9, o4, a4, n4) {
    const l3 = /* @__PURE__ */ new Map();
    for (const c4 of t4) {
      if (e5.startAccessor("INDICES"), c4.faces) for (let s7 = 0; s7 < c4.faces.length; ++s7) e5.push(c4.faces[s7]);
      const t5 = e5.endAccessor(), u4 = { attributes: { POSITION: r2 }, indices: this._addAccessor(e5.index, t5), material: this._addMaterial(c4.material) };
      i9 && "flat" !== c4.shading && (u4.attributes.NORMAL = i9), o4 && (u4.attributes.TEXCOORD_0 = o4), a4 && "flat" !== c4.shading && (u4.attributes.TANGENT = a4), n4 && (u4.attributes.COLOR_0 = n4);
      const h2 = l3.get(c4.name);
      if (h2) h2.primitives.push(u4);
      else {
        const e6 = { name: c4.name, primitives: [u4] };
        l3.set(c4.name, e6), s6.push(e6);
      }
    }
  }
  _addMeshVertexNonIndexed(e5, t4, s6, r2, i9, o4, a4) {
    const n4 = { primitives: [] };
    t4.push(n4);
    const l3 = { attributes: { POSITION: s6 } };
    r2 && (l3.attributes.NORMAL = r2), i9 && (l3.attributes.TEXCOORD_0 = i9), o4 && (l3.attributes.TANGENT = o4), a4 && (l3.attributes.COLOR_0 = a4), e5 && (l3.material = this._addMaterial(e5[0].material)), n4.primitives.push(l3);
  }
};
function v({ position: e5, normal: t4, tangent: s6 }) {
  C(e5, 3), C(t4, 3), C(s6, 4);
}
function C(e5, t4) {
  if (null != e5) for (let s6 = 1, r2 = 2; s6 < e5.length; s6 += t4, r2 += t4) {
    const t5 = e5[s6], i9 = e5[r2];
    e5[s6] = i9, e5[r2] = -t5;
  }
}
function I2(t4) {
  return t4 ** p;
}

// node_modules/@arcgis/core/geometry/support/meshUtils/exporters/gltf/asset.js
var s5 = class {
  constructor() {
    this.copyright = "", this.defaultScene = 0, this.generator = "", this._scenes = [];
  }
  addScene(e5) {
    if (this._scenes.includes(e5)) throw new Error("Scene already added");
    this._scenes.push(e5);
  }
  removeScene(s6) {
    G(this._scenes, s6);
  }
  forEachScene(e5) {
    this._scenes.forEach(e5);
  }
};

// node_modules/@arcgis/core/geometry/support/meshUtils/exporters/gltf/scene.js
var d = class {
  constructor() {
    this.name = "", this._nodes = [];
  }
  addNode(d2) {
    if (this._nodes.includes(d2)) throw new Error("Node already added");
    this._nodes.push(d2);
  }
  forEachNode(d2) {
    this._nodes.forEach(d2);
  }
};

// node_modules/@arcgis/core/geometry/support/meshUtils/exporters/gltf/node.js
var e4 = class {
  constructor(t4) {
    this.mesh = t4, this.name = "", this.translation = n(), this.rotation = e(), this.scale = t(_), this._nodes = [];
  }
  addNode(t4) {
    if (this._nodes.includes(t4)) throw new Error("Node already added");
    this._nodes.push(t4);
  }
  forEachNode(t4) {
    this._nodes.forEach(t4);
  }
  set rotationAngles(s6) {
    T(this.rotation, s6[0], s6[1], s6[2]);
  }
};

// node_modules/@arcgis/core/geometry/support/meshUtils/exporters/gltf/index.js
var f2 = "model.gltf";
var i7 = "model.glb";
async function u3(u4, l3) {
  const c4 = new w(u4, l3).gltf, p2 = c4.extras.promises;
  let m2 = 1, g = 1, d2 = null;
  await Promise.allSettled(p2), s2(l3.signal);
  const b = l3.jsonSpacing ?? 4, j = /* @__PURE__ */ new Map(), w2 = JSON.stringify(c4, (e5, t4) => {
    if ("extras" !== e5) {
      if (t4 instanceof ArrayBuffer) {
        if (c3(t4)) switch (l3.output?.image) {
          case A2.DataURI:
          case A2.GLB:
            break;
          case A2.External:
          default: {
            const e6 = `img${g}.png`;
            return g++, j.set(e6, t4), e6;
          }
        }
        switch (l3.output?.buffer) {
          case E.DataURI:
            return s4(t4);
          case E.GLB:
            if (d2) throw new Error("Already encountered an ArrayBuffer, there should only be one in the GLB format.");
            return void (d2 = t4);
          case E.External:
          default: {
            const e6 = `data${m2}.bin`;
            return m2++, j.set(e6, t4), e6;
          }
        }
      }
      return t4;
    }
  }, b);
  return l3.output?.buffer === E.GLB || l3.output?.image === A2.GLB ? j.set(i7, new e2(w2, d2).buffer) : j.set(f2, w2), j;
}
async function l2(e5, t4) {
  const r2 = (await u3(e5, { output: { buffer: E.GLB, image: A2.GLB }, jsonSpacing: 0, ...t4 })).get(i7);
  if (!(r2 && r2 instanceof ArrayBuffer)) throw new Error("failed to export to glb");
  return r2;
}

// node_modules/@arcgis/core/geometry/support/meshUtils/exporters/gltf/gltfexport.js
async function i8(i9, t4) {
  const s6 = new s5(), m2 = new d();
  return s6.addScene(m2), m2.addNode(new e4(i9)), await l2(s6, { origin: i9.origin, ...t4 });
}
export {
  i8 as toBinaryGLTF
};
//# sourceMappingURL=gltfexport-22VFEB4J.js.map
