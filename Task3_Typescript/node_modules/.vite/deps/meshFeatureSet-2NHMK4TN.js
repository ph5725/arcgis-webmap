import {
  i as i3,
  n as n2
} from "./chunk-3HA7K4BN.js";
import {
  q
} from "./chunk-ATNMW6ME.js";
import "./chunk-C4ANG4R2.js";
import "./chunk-GYAK76KG.js";
import "./chunk-KKAHMR7F.js";
import "./chunk-RTDWTAVK.js";
import "./chunk-QLJ6JQFC.js";
import {
  i as i2,
  n
} from "./chunk-I7UBWPZD.js";
import "./chunk-YWGFBTRS.js";
import "./chunk-BHCIAS6L.js";
import "./chunk-OIO2MYQF.js";
import "./chunk-LG4SF54U.js";
import "./chunk-4IO5QG2A.js";
import "./chunk-NL6QZ27X.js";
import "./chunk-6SLEP34Y.js";
import "./chunk-DHCIRPC3.js";
import "./chunk-BF6IRMUG.js";
import "./chunk-24KTNAIE.js";
import "./chunk-TNKA4BMD.js";
import "./chunk-VKKELZ6R.js";
import "./chunk-DLD56RZZ.js";
import "./chunk-3SJIVSAT.js";
import "./chunk-HXR4TQII.js";
import "./chunk-6DBRCIDV.js";
import "./chunk-YSRSL2SU.js";
import "./chunk-FQ4JUVCN.js";
import "./chunk-3LL6ALVC.js";
import "./chunk-NZPABYQQ.js";
import "./chunk-CCHJ3WNU.js";
import "./chunk-DRAQJS2F.js";
import "./chunk-VNTS5E5O.js";
import "./chunk-TMFB3DKM.js";
import "./chunk-2JRCX6DU.js";
import "./chunk-TNW4TPNP.js";
import {
  g
} from "./chunk-B6C7UPBZ.js";
import {
  s
} from "./chunk-Z6OMEWWC.js";
import "./chunk-7FAVUXK2.js";
import "./chunk-IVNFIIVI.js";
import "./chunk-6TS2ZJL4.js";
import "./chunk-IBGTNH54.js";
import "./chunk-7NMH5MM5.js";
import "./chunk-TCIXF7MM.js";
import "./chunk-UGTICYU7.js";
import "./chunk-3MHRDLQO.js";
import {
  d
} from "./chunk-2IMSGFJN.js";
import "./chunk-VHTQ5H2C.js";
import "./chunk-YX2VTIZR.js";
import "./chunk-LYSDGL5S.js";
import "./chunk-SRJX4QLW.js";
import "./chunk-WPTJIN2M.js";
import "./chunk-KUP5BM5G.js";
import "./chunk-HNQNVI5C.js";
import "./chunk-G34OBNLT.js";
import "./chunk-WJUYGRZY.js";
import "./chunk-FKFXOPPT.js";
import "./chunk-KE3WBZYL.js";
import "./chunk-EOMIFMDH.js";
import "./chunk-45ILJ6ZH.js";
import "./chunk-VCRP2PLV.js";
import "./chunk-BDLVUYG2.js";
import "./chunk-6QA2BVC5.js";
import "./chunk-HWKQJUGY.js";
import "./chunk-DNZK6PPI.js";
import "./chunk-7BWCD63N.js";
import "./chunk-65K4DQAH.js";
import "./chunk-MUKDJQWB.js";
import "./chunk-6KFXWKZZ.js";
import "./chunk-X3R5OB6L.js";
import "./chunk-RACDQ3AL.js";
import "./chunk-TEXTBDH7.js";
import "./chunk-N3A2BVTW.js";
import "./chunk-IGYEHOTB.js";
import "./chunk-TVM3SZJR.js";
import "./chunk-52HWRRRQ.js";
import "./chunk-VNTEV3V4.js";
import "./chunk-OGOQOMMV.js";
import "./chunk-7Z3AF3B2.js";
import "./chunk-6GWORUT3.js";
import "./chunk-KJSBBQ22.js";
import "./chunk-LMEOPAGQ.js";
import "./chunk-YIV2QKTZ.js";
import "./chunk-A3VAC24F.js";
import "./chunk-FPSA4NFH.js";
import "./chunk-UY6B6IVT.js";
import "./chunk-6PV45IYU.js";
import "./chunk-SRQCQD63.js";
import "./chunk-FIRNXFAH.js";
import {
  z
} from "./chunk-O5TPFXRT.js";
import "./chunk-Q6XRAGMA.js";
import "./chunk-JUAPMINU.js";
import {
  f
} from "./chunk-PK2ZR2SJ.js";
import "./chunk-YFPGM5UE.js";
import "./chunk-OXSERRAR.js";
import "./chunk-7HI4VRVW.js";
import "./chunk-ZX46THLM.js";
import "./chunk-Y2ZIOB7Y.js";
import "./chunk-KTUX3OKX.js";
import "./chunk-E3KEUGUG.js";
import "./chunk-N3XLUQJI.js";
import "./chunk-JUAD7TJ6.js";
import "./chunk-VHLUKPRH.js";
import "./chunk-5TPMG26T.js";
import "./chunk-3NBBZ43U.js";
import "./chunk-VOLWOTEG.js";
import "./chunk-XTNIDRTB.js";
import "./chunk-FGWIXJQY.js";
import "./chunk-TKYAZCMB.js";
import "./chunk-3TBMFSPB.js";
import "./chunk-PSZLDJJA.js";
import "./chunk-ZWFY3WY5.js";
import "./chunk-LQFTAGIV.js";
import {
  u
} from "./chunk-S7IJH524.js";
import "./chunk-GZ2P4SCJ.js";
import {
  i2 as i
} from "./chunk-XWG6QGFK.js";
import "./chunk-GWNLQRNM.js";
import "./chunk-FXKORAMT.js";
import "./chunk-GNMFMITH.js";

// node_modules/@arcgis/core/rest/support/meshFeatureSet.js
var p = () => i.getLogger("esri.rest.support.meshFeatureSet");
function l(t, r, s2) {
  const o = s2.features;
  s2.features = [], delete s2.geometryType;
  const a = g.fromJSON(s2);
  if (a.geometryType = "mesh", !s2.assetMaps) return a;
  const u2 = g2(r, s2.assetMaps), i4 = t.sourceSpatialReference ?? f.WGS84, c = s2.globalIdFieldName, { outFields: m } = t, p2 = null != m && m.length > 0 ? y(m.includes("*") ? null : new Set(m)) : () => ({});
  for (const n3 of o) {
    const t2 = E(n3, c, i4, r, u2);
    a.features.push(new d({ geometry: t2, attributes: p2(n3) }));
  }
  return a;
}
function y(e) {
  return ({ attributes: t }) => {
    if (!t) return {};
    if (!e) return t;
    for (const r in t) e.has(r) || delete t[r];
    return t;
  };
}
function E(e, t, r, n3, a) {
  const u2 = e.attributes[t], i4 = a.get(u2);
  if (null == i4 || !e.geometry) return null;
  const f2 = n2(e.attributes, r, n3.transformFieldRoles), p2 = z.fromJSON(e.geometry);
  p2.spatialReference = r;
  const l2 = i3(e.attributes, n3.transformFieldRoles), y2 = r.isGeographic ? "local" : "georeferenced", E2 = d2(i4);
  return E2 ? q.createWithExternalSource(f2, E2, { extent: p2, transform: l2, vertexSpace: y2, unitConversionDisabled: true }) : q.createIncomplete(f2, { extent: p2, transform: l2, vertexSpace: y2 });
}
var h;
function g2(e, t) {
  const s2 = /* @__PURE__ */ new Map();
  for (const o of t) {
    const t2 = o.parentGlobalId;
    if (null == t2) continue;
    const n3 = o.assetName, a = o.assetType, u2 = o.assetHash, f2 = o.assetURL, c = o.conversionStatus, m = o.seqNo, l2 = s(a, e.supportedFormats);
    if (!l2) {
      p().error("mesh-feature-set:unknown-format", `Service returned an asset of type ${a}, but it does not list it as a supported type`);
      continue;
    }
    const y2 = u(s2, t2, () => ({ files: /* @__PURE__ */ new Map() }));
    u(y2.files, n3, () => ({ name: n3, type: a, mimeType: l2, status: S(c), parts: [] })).parts[m] = { hash: u2, url: f2 };
  }
  return s2;
}
function d2(e) {
  const t = Array.from(e.files.values()), r = new Array();
  for (const s2 of t) {
    if (s2.status !== h.COMPLETED) return null;
    const e2 = new Array();
    for (const t2 of s2.parts) {
      if (!t2) return null;
      e2.push(new n(t2.url, t2.hash));
    }
    r.push(new i2(s2.name, s2.mimeType, e2));
  }
  return { type: "service", assets: r };
}
function S(e) {
  switch (e) {
    case "COMPLETED":
    case "SUBMITTED":
      return h.COMPLETED;
    case "INPROGRESS":
      return h.PENDING;
    default:
      return h.FAILED;
  }
}
!function(e) {
  e[e.FAILED = 0] = "FAILED", e[e.PENDING = 1] = "PENDING", e[e.COMPLETED = 2] = "COMPLETED";
}(h || (h = {}));
export {
  g2 as assetMapFromAssetMapsJSON,
  E as extractMesh,
  l as meshFeatureSetFromJSON
};
//# sourceMappingURL=meshFeatureSet-2NHMK4TN.js.map
