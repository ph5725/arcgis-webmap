import {
  f,
  s,
  u
} from "./chunk-SYPTUUSZ.js";
import {
  o
} from "./chunk-JUAPMINU.js";
import {
  l
} from "./chunk-E3KEUGUG.js";
import {
  m
} from "./chunk-N3XLUQJI.js";
import {
  a2 as a
} from "./chunk-JUAD7TJ6.js";
import "./chunk-VHLUKPRH.js";
import {
  r
} from "./chunk-5TPMG26T.js";
import "./chunk-XTNIDRTB.js";
import "./chunk-FGWIXJQY.js";
import "./chunk-TKYAZCMB.js";
import "./chunk-3TBMFSPB.js";
import "./chunk-PSZLDJJA.js";
import {
  H
} from "./chunk-ZWFY3WY5.js";
import "./chunk-LQFTAGIV.js";
import "./chunk-S7IJH524.js";
import "./chunk-GZ2P4SCJ.js";
import "./chunk-XWG6QGFK.js";
import "./chunk-GWNLQRNM.js";
import "./chunk-FXKORAMT.js";
import "./chunk-GNMFMITH.js";

// node_modules/@arcgis/core/rest/networks/unitIdentifiers/support/UnitQueryResult.js
var n = class extends l {
  constructor(r2) {
    super(r2), this.container = null, this.ranges = null;
  }
  readContainer(r2, t) {
    return { sourceId: t.sourceId, globalId: t.globalId };
  }
  readRanges(r2, t) {
    return [...t.gaps.map((r3) => ({ firstUnit: r3.start, numUnits: r3.end - r3.start + 1, isGap: true })), ...t.unitIdentifiers.map((r3) => ({ firstUnit: r3.firstUnit, numUnits: r3.numUnits, isGap: false, content: { sourceId: r3.sourceId, globalId: r3.globalId } }))];
  }
};
r([m({ type: Object })], n.prototype, "container", void 0), r([o("container", ["sourceId", "globalId"])], n.prototype, "readContainer", null), r([m({ type: [Object] })], n.prototype, "ranges", void 0), r([o("ranges", ["gaps", "unitIdentifiers"])], n.prototype, "readRanges", null), n = r([a("esri.rest.networks.unitIdentifiers.support.UnitQueryResult")], n);

// node_modules/@arcgis/core/rest/networks/unitIdentifiers/queryUnitIdentifiers.js
async function i(i2, n2, u2) {
  const m2 = f(i2), p = n2.toJSON();
  n2.objects && (p.objects = JSON.stringify(n2.objects));
  const c = { ...p, f: "json" }, f2 = u({ ...m2.query, ...c }), j = s(f2, { ...u2, method: "post" }), a2 = `${m2.path}/unitIdentifiers/query`, { data: y } = await H(a2, j);
  return y.objects.map((t) => n.fromJSON(t));
}
export {
  i as queryUnitIdentifiers
};
//# sourceMappingURL=queryUnitIdentifiers-7ZTJDWVK.js.map
