import {
  d
} from "./chunk-W32FQSGL.js";
import "./chunk-2LU4NAEM.js";
import "./chunk-EUGUM3DF.js";
import "./chunk-NEBU5XJO.js";
import {
  f,
  s,
  u
} from "./chunk-SYPTUUSZ.js";
import "./chunk-OGOQOMMV.js";
import "./chunk-6GWORUT3.js";
import "./chunk-FPSA4NFH.js";
import "./chunk-O5TPFXRT.js";
import "./chunk-Q6XRAGMA.js";
import "./chunk-JUAPMINU.js";
import "./chunk-PK2ZR2SJ.js";
import "./chunk-YFPGM5UE.js";
import "./chunk-OXSERRAR.js";
import "./chunk-7HI4VRVW.js";
import "./chunk-ZX46THLM.js";
import "./chunk-KTUX3OKX.js";
import {
  l
} from "./chunk-E3KEUGUG.js";
import {
  m
} from "./chunk-N3XLUQJI.js";
import {
  a2 as a
} from "./chunk-JUAD7TJ6.js";
import "./chunk-VHLUKPRH.js";
import {
  r
} from "./chunk-5TPMG26T.js";
import "./chunk-3NBBZ43U.js";
import "./chunk-VOLWOTEG.js";
import "./chunk-XTNIDRTB.js";
import "./chunk-FGWIXJQY.js";
import "./chunk-TKYAZCMB.js";
import "./chunk-3TBMFSPB.js";
import "./chunk-PSZLDJJA.js";
import {
  H
} from "./chunk-ZWFY3WY5.js";
import "./chunk-LQFTAGIV.js";
import "./chunk-S7IJH524.js";
import "./chunk-GZ2P4SCJ.js";
import "./chunk-XWG6QGFK.js";
import "./chunk-GWNLQRNM.js";
import "./chunk-FXKORAMT.js";
import "./chunk-GNMFMITH.js";

// node_modules/@arcgis/core/rest/networks/support/AssociationGeometriesResult.js
var p = class extends l {
  constructor(o) {
    super(o), this.maxGeometryCountExceeded = false, this.associations = [];
  }
};
r([m({ type: Boolean, json: { write: true } })], p.prototype, "maxGeometryCountExceeded", void 0), r([m({ type: [d], json: { write: true } })], p.prototype, "associations", void 0), p = r([a("esri.rest.networks.support.AssociationGeometriesResult")], p);

// node_modules/@arcgis/core/rest/networks/synthesizeAssociationGeometries.js
async function n(r2, n2, a2) {
  const c = f(r2), f2 = { ...n2.toJSON(), f: "json" }, m2 = u({ ...c.query, ...f2 });
  a2 ? a2.method = "post" : a2 = { method: "post" };
  const p2 = s(m2, a2), u2 = `${c.path}/synthesizeAssociationGeometries`;
  return H(u2, p2).then((t) => i(t, n2.outSpatialReference));
}
function i(t, e) {
  const { data: o } = t;
  if (e) for (const s2 of o.associations) s2.geometry.spatialReference || (s2.geometry.spatialReference = e.clone());
  return p.fromJSON(o);
}
export {
  n as synthesizeAssociationGeometries
};
//# sourceMappingURL=synthesizeAssociationGeometries-4C2JGEPU.js.map
