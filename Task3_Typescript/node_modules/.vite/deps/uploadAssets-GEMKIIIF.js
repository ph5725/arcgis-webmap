import {
  a as a3,
  c,
  d,
  l,
  n as n4,
  p,
  r as r3,
  t as t2,
  t2 as t3,
  u as u3
} from "./chunk-LIOMEBWU.js";
import {
  i as i3,
  n as n3
} from "./chunk-3HA7K4BN.js";
import {
  b,
  f as f2,
  i as i2,
  n as n2,
  y
} from "./chunk-I7UBWPZD.js";
import "./chunk-YWGFBTRS.js";
import "./chunk-BHCIAS6L.js";
import "./chunk-FQ4JUVCN.js";
import "./chunk-3LL6ALVC.js";
import "./chunk-NZPABYQQ.js";
import "./chunk-CCHJ3WNU.js";
import "./chunk-TMFB3DKM.js";
import {
  F,
  a as a2,
  m,
  s as s2,
  u as u2
} from "./chunk-Z6OMEWWC.js";
import "./chunk-IVNFIIVI.js";
import "./chunk-DNZK6PPI.js";
import "./chunk-7BWCD63N.js";
import "./chunk-RACDQ3AL.js";
import {
  r as r2
} from "./chunk-HCYE6OE4.js";
import "./chunk-FPSA4NFH.js";
import "./chunk-Q6XRAGMA.js";
import "./chunk-JUAPMINU.js";
import {
  f
} from "./chunk-PK2ZR2SJ.js";
import "./chunk-YFPGM5UE.js";
import "./chunk-OXSERRAR.js";
import "./chunk-7HI4VRVW.js";
import "./chunk-ZX46THLM.js";
import "./chunk-KTUX3OKX.js";
import "./chunk-E3KEUGUG.js";
import "./chunk-N3XLUQJI.js";
import "./chunk-JUAD7TJ6.js";
import "./chunk-VHLUKPRH.js";
import "./chunk-5TPMG26T.js";
import "./chunk-3NBBZ43U.js";
import "./chunk-VOLWOTEG.js";
import "./chunk-XTNIDRTB.js";
import "./chunk-FGWIXJQY.js";
import "./chunk-TKYAZCMB.js";
import "./chunk-3TBMFSPB.js";
import {
  n,
  r,
  t
} from "./chunk-PSZLDJJA.js";
import {
  H,
  g2 as g
} from "./chunk-ZWFY3WY5.js";
import {
  Dt,
  V
} from "./chunk-LQFTAGIV.js";
import {
  u
} from "./chunk-S7IJH524.js";
import {
  A,
  a,
  e,
  s
} from "./chunk-GZ2P4SCJ.js";
import {
  i2 as i
} from "./chunk-XWG6QGFK.js";
import "./chunk-GWNLQRNM.js";
import {
  has
} from "./chunk-FXKORAMT.js";
import "./chunk-GNMFMITH.js";

// node_modules/@arcgis/core/layers/graphics/sources/support/uploadProgressWeights.js
var e2 = { upload: { createFromFiles: 0.8, loadMesh: 0.2 }, uploadAssetBlobs: { prepareAssetItems: 0.9, uploadAssetItems: 0.1 }, uploadConvertibleSource: { uploadEditSource: 0.5, serviceAssetsToGlb: 0.5 }, uploadLocalMesh: { meshToAssetBlob: 0.5, uploadAssetBlobs: 0.5 } };

// node_modules/@arcgis/core/support/progressUtils.js
function i4(s3, t4 = (s4) => {
}, e3) {
  return new n5(s3, t4, e3);
}
var n5 = class {
  constructor(s3, t4 = (s4) => {
  }, e3) {
    if (this.onProgress = t4, this.taskName = e3, this._progressMap = /* @__PURE__ */ new Map(), this._startTime = void 0, this._timingsMap = /* @__PURE__ */ new Map(), "number" == typeof s3) {
      this._weights = {};
      for (let t5 = 0; t5 < s3; t5++) {
        const e4 = t5, r4 = 1 / s3;
        this._weights[e4] = r4, this._progressMap.set(e4, 0);
      }
    } else this._weights = s3;
    this.emitProgress();
  }
  emitProgress() {
    let s3 = 0;
    for (const [t4, e3] of this._progressMap.entries()) {
      s3 += e3 * this._weights[t4];
    }
    if (1 === s3 && has("enable-feature:esri-3dofl-upload-timings")) {
      const s4 = Math.round(performance.now() - (this._startTime ?? 0)) / 1e3;
      console.log(`${this.taskName} done in ${s4} sec`);
      for (const [t4, e3] of this._timingsMap) {
        const r4 = Math.round(e3.end - e3.start) / 1e3, o = Math.round(r4 / s4 * 100);
        console.log(this.taskName ?? "Task", { stepKey: t4, stepTime: r4, relativeTime: o });
      }
    }
    this.onProgress(s3);
  }
  setProgress(s3, e3) {
    if (this._progressMap.set(s3, e3), has("enable-feature:esri-3dofl-upload-timings")) {
      const r4 = performance.now();
      this._startTime ??= r4;
      const o = u(this._timingsMap, s3, () => ({ start: r4, end: 0 }));
      1 === e3 && (o.end = r4);
    }
    this.emitProgress();
  }
  simulate(s3, t4) {
    return a4((t5) => this.setProgress(s3, t5), t4);
  }
  makeOnProgress(s3) {
    return (t4) => this.setProgress(s3, t4);
  }
};
function a4(t4 = (s3) => {
}, e3 = l2) {
  const r4 = performance.now();
  t4(0);
  const o = setInterval(() => {
    const s3 = performance.now() - r4, o2 = 1 - Math.exp(-s3 / e3);
    t4(o2);
  }, g2);
  return e(() => {
    clearInterval(o), t4(1);
  });
}
function h(s3, t4 = c2) {
  return r(t(s3 * f3 / t4));
}
function m2(s3, t4 = p2) {
  return r(t(s3 * f3 / t4));
}
var c2 = 10;
var p2 = 10;
var f3 = 8e-6;
var g2 = n(50);
var l2 = n(1e3);

// node_modules/@arcgis/core/layers/graphics/sources/support/uploads.js
var n6 = 1e6;
var i5 = 20 * n6;
var p3 = 2e9;
var l3 = 3;
async function m3({ data: m4, name: f4, description: d2 }, u4, h2) {
  let w = null;
  try {
    const y2 = V(u4, "uploads"), j = V(y2, "info"), { data: g3 } = await H(j, { query: { f: "json" }, responseType: "json" });
    s(h2);
    const q2 = g(u4), z2 = g3.maxUploadFileSize * n6, T = q2 ? p3 : z2, U = q2 ? Math.min(i5, z2) : i5;
    if (m4.size > T) throw new Error("Data too large");
    const A2 = V(y2, "register"), { data: E } = await H(A2, { query: { f: "json", itemName: c3(f4), description: d2 }, responseType: "json", method: "post" });
    if (s(h2), !E.success) throw new Error("Registration failed");
    const { itemID: P } = E.item;
    w = V(y2, P);
    const D = V(w, "uploadPart"), I = Math.ceil(m4.size / U), M2 = new Array();
    for (let e3 = 0; e3 < I; ++e3) M2.push(m4.slice(e3 * U, Math.min((e3 + 1) * U, m4.size)));
    const v = M2.slice().reverse(), x = new Array(), F2 = i4(I, h2?.onProgress, "uploadItem"), _2 = async () => {
      for (; 0 !== v.length; ) {
        const t4 = M2.length - v.length, r4 = v.pop(), s3 = new FormData(), n7 = F2.simulate(t4, h(r4.size));
        try {
          s3.append("f", "json"), s3.append("file", r4), s3.append("partId", `${t4}`);
          const { data: a5 } = await H(D, { timeout: 0, body: s3, responseType: "json", method: "post" });
          if (s(h2), !a5.success) throw new Error("Part upload failed");
        } finally {
          n7.remove();
        }
      }
    };
    for (let e3 = 0; e3 < l3 && 0 !== v.length; ++e3) x.push(_2());
    await Promise.all(x);
    const b2 = V(w, "commit"), { data: C } = await H(b2, { query: { f: "json", parts: M2.map((e3, o) => o).join(",") }, responseType: "json", method: "post" });
    if (s(h2), !C.success) throw new Error("Commit failed");
    return C.item;
  } catch (y2) {
    if (null != w) {
      const o = V(w, "delete");
      await H(o, { query: { f: "json" }, responseType: "json", method: "post" });
    }
    throw y2;
  }
}
function c3(e3) {
  return e3.replaceAll("/", "_").replaceAll("\\", "_");
}

// node_modules/@arcgis/core/layers/graphics/sources/support/uploadAssets.js
async function B(e3, s3, t4) {
  const r4 = e3.length;
  if (!r4) return t4?.onProgress?.(1), [];
  const o = i4(r4, t4?.onProgress, "uploadAssets");
  return Promise.all(e3.map((e4, r5) => q(e4, s3, { ...t4, onProgress: o.makeOnProgress(r5) })));
}
async function q(e3, { layer: s3, ongoingUploads: t4 }, r4) {
  const o = t4.get(e3);
  if (o) return o;
  if (!ne(s3)) throw new r3();
  if (L(e3, s3)) return r4?.onProgress?.(1), e3;
  const n7 = H2(e3, s3, r4);
  t4.set(e3, n7);
  try {
    await n7;
  } finally {
    t4.delete(e3);
  }
  return e3;
}
function L(e3, s3) {
  const { parsedUrl: t4 } = s3;
  return null != t4 && e3.metadata.externalSources.some((e4) => f2(e4, t4));
}
async function H2(e3, s3, r4) {
  const { metadata: o } = e3, { displaySource: n7 } = o, a5 = W(n7?.source, s3, { checkForConversionRequired: has("enable-feature:georeferenced-uploads") }), i6 = null != a5 ? $(a5, s3, r4) : o.externalSources.length > 0 ? J(e3, s3, r4) : z(e3, s3, r4), c4 = await i6;
  return s(r4), e3.addExternalSources([c4]), e3;
}
async function $(e3, s3, t4) {
  return { source: { type: "service", assets: await Q(e3, s3, t4) }, original: true, unitConversionDisabled: true };
}
async function J(e3, s3, t4) {
  const r4 = ae(s3), { externalSources: o } = e3.metadata, n7 = M(o, s3);
  if (!n7) throw new n4();
  const a5 = i4(e2.uploadConvertibleSource, t4?.onProgress, "uploadConvertibleSource"), i6 = { type: "service", assets: await Q(n7, s3, { onProgress: a5.makeOnProgress("uploadEditSource") }) };
  e3.addExternalSources([{ source: i6, original: true }]);
  const c4 = n7.reduce((e4, { asset: s4 }) => s4 instanceof File ? e4 + s4.size : e4, 0), u4 = a5.simulate("serviceAssetsToGlb", m2(c4));
  try {
    const { source: o2, transform: n8, origin: a6 } = await se(i6, s3, r4);
    return e3.transform = n8, a6 && (e3.metadata.georeferenced = true, t4?.useAssetOrigin && (e3.vertexSpace.origin = [a6.x, a6.y, a6.z ?? 0], e3.spatialReference = a6.spatialReference)), { source: o2, unitConversionDisabled: true };
  } finally {
    u4.remove();
  }
}
async function z(e3, s3, t4) {
  const r4 = i4(e2.uploadLocalMesh, t4?.onProgress, "uploadLocalMesh"), o = G(e3, s3, { ...t4, onProgress: r4.makeOnProgress("meshToAssetBlob") });
  return { source: { type: "service", assets: await V2([o], s3, { ...t4, onProgress: r4.makeOnProgress("uploadAssetBlobs") }) }, extent: e3.extent.clone(), original: true };
}
async function G(e3, s3, r4) {
  const o = ae(s3), n7 = await e3.load(r4), a5 = await n7.toBinaryGLTF({ origin: n7.origin, signal: r4?.signal, ignoreLocalTransform: true, unitConversionDisabled: true });
  return s(r4), { blob: new Blob([a5], { type: "model/gltf-binary" }), assetName: `${r2()}.glb`, assetType: o };
}
function M(e3, s3) {
  for (const t4 of e3) {
    const e4 = W(t4.source, s3);
    if (e4) return e4;
  }
  return null;
}
function W(e3, { infoFor3D: s3 }, t4 = {}) {
  if (!e3) return null;
  const r4 = b(e3);
  if (!r4) return null;
  const { supportedFormats: o, editFormats: n7 } = s3, a5 = new Array(), i6 = F(s3), c4 = m(s3);
  let u4 = false;
  for (const l4 of r4) {
    const e4 = K(l4, o);
    if (!e4) return null;
    const { assetType: s4 } = e4;
    if (t4.checkForConversionRequired && (s4 === i6 || s4 === c4)) return null;
    n7.includes(s4) && (u4 = true), a5.push(e4);
  }
  return u4 ? a5 : null;
}
function K(e3, s3) {
  const t4 = y(e3, s3);
  return t4 ? { asset: e3, assetType: t4 } : null;
}
async function Q(e3, s3, t4) {
  return V2(e3.map((e4) => X(e4, t4)), s3, t4);
}
async function V2(e3, s3, r4) {
  const o = i4(e2.uploadAssetBlobs, r4?.onProgress, "uploadAssetBlobs"), n7 = await Z(e3, s3, { ...r4, onProgress: o.makeOnProgress("prepareAssetItems") });
  s(r4);
  const a5 = n7.map(({ item: e4 }) => e4), { uploadResults: i6 } = await _(a5, s3, { ...r4, onProgress: o.makeOnProgress("uploadAssetItems") });
  return s(r4), e3.map((e4, t4) => ee(n7[t4], i6[t4], s3));
}
async function X(e3, s3) {
  const { asset: r4, assetType: o } = e3;
  if (r4 instanceof File) return { blob: r4, assetName: r4.name, assetType: o };
  const n7 = await r4.toBlob(s3);
  return s(s3), { blob: n7, assetName: r4.assetName, assetType: o };
}
async function Y(e3, s3, r4) {
  const { blob: n7, assetType: a5, assetName: c4 } = e3;
  let u4 = null;
  try {
    const e4 = await m3({ data: n7, name: c4 }, s3.url, r4);
    s(r4), u4 = { assetType: a5, assetUploadId: e4.itemID };
  } catch (l4) {
    a(l4), ie().warnOnce(`Service ${s3.url} does not support the REST Uploads API.`);
  }
  if (!u4) {
    const e4 = await Dt(n7);
    if (s(r4), !e4.isBase64) throw new u3();
    u4 = { assetType: a5, assetData: e4.data };
  }
  if (!u4) throw new p();
  return { item: u4, assetName: c4 };
}
function Z(e3, s3, r4) {
  const o = i4(e3.length, r4?.onProgress, "prepareAssetItems");
  return Promise.all(e3.map(async (e4, n7) => {
    const a5 = Y(await e4, s3, { ...r4, onProgress: o.makeOnProgress(n7) });
    return s(r4), a5;
  }));
}
async function _(s3, r4, o) {
  const n7 = a4(o?.onProgress);
  try {
    const n8 = await H(V(r4.parsedUrl.path, "uploadAssets"), { timeout: 0, query: { f: "json", assets: JSON.stringify(s3) }, method: "post", responseType: "json" });
    if (s(o), n8.data.uploadResults.length !== s3.length) throw new a3(s3.length, n8.data.uploadResults.length);
    return n8.data;
  } finally {
    n7.remove();
  }
}
function ee(e3, s3, t4) {
  const { success: r4 } = s3;
  if (!r4) {
    const { error: t5 } = s3;
    throw new d(e3.assetName, t5);
  }
  const { assetHash: o } = s3, { assetName: n7, item: { assetType: a5 } } = e3, { infoFor3D: { supportedFormats: i6 } } = t4, c4 = s2(a5, i6);
  if (!c4) throw new c(a5);
  return new i2(n7, c4, [new n2(`${t4.parsedUrl.path}/assets/${o}`, o)]);
}
async function se({ assets: e3 }, s3, t4) {
  const r4 = e3.map(({ assetName: e4, parts: s4 }) => ({ assetName: e4, assetHash: s4[0].partHash }));
  let o;
  try {
    const e4 = V(s3.parsedUrl.path, "convert3D"), n7 = s3.capabilities?.operations.supportsAsyncConvert3D;
    o = (await (n7 ? oe : re)(e4, { query: { f: "json", assets: JSON.stringify(r4), transportType: "esriTransportTypeUrl", targetFormat: t4, async: n7 }, responseType: "json", timeout: 0 })).data;
  } catch (n7) {
    throw new l();
  }
  return te(s3, o);
}
function te(e3, s3) {
  const t4 = { source: { type: "service", assets: s3.assets.map((s4) => {
    const t5 = u2(s4.contentType, e3.infoFor3D.supportedFormats);
    if (!t5) throw new c(t5);
    return new i2(s4.assetName, s4.contentType, [new n2(s4.assetURL, s4.assetHash)]);
  }) }, origin: void 0, transform: void 0 };
  if (has("enable-feature:georeferenced-uploads") && s3.transform) {
    if (t4.transform = i3(s3.transform), s3.spatialReference) {
      const e4 = f.fromJSON(s3.spatialReference);
      t4.origin = n3(s3.transform, e4);
    }
  } else t4.transform = t3(e3.spatialReference);
  return t4;
}
function re(s3, t4) {
  return H(s3, t4);
}
async function oe(s3, t4) {
  const o = (await H(s3, t4)).data.statusUrl;
  for (; ; ) {
    const s4 = (await H(o, { query: { f: "json" }, responseType: "json" })).data;
    switch (s4.status) {
      case "Completed":
        return H(s4.resultUrl, { query: { f: "json" }, responseType: "json" });
      case "CompletedWithErrors":
        throw new Error(s4.status);
      case "Failed ImportChanges":
      case "InProgress":
      case "Pending":
      case "ExportAttachments":
      case "ExportChanges":
      case "ExportingData":
      case "ExportingSnapshot":
      case "ImportAttachments":
      case "ProvisioningReplica":
      case "UnRegisteringReplica":
        break;
      default:
        throw new Error();
    }
    await A(ce);
  }
}
function ne(e3) {
  return !!e3.infoFor3D && !!e3.url;
}
function ae({ infoFor3D: e3 }) {
  const s3 = a2(e3);
  if (!s3) throw new t2();
  return s3;
}
function ie() {
  return i.getLogger("esri.layers.graphics.sources.support.uploadAssets");
}
var ce = n(1e3);
export {
  B as uploadAssets
};
//# sourceMappingURL=uploadAssets-GEMKIIIF.js.map
