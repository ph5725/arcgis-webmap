import {
  i
} from "./chunk-GCCROLU6.js";
import {
  f,
  s as s2,
  u
} from "./chunk-SYPTUUSZ.js";
import "./chunk-E3KEUGUG.js";
import "./chunk-N3XLUQJI.js";
import "./chunk-JUAD7TJ6.js";
import "./chunk-VHLUKPRH.js";
import "./chunk-5TPMG26T.js";
import "./chunk-XTNIDRTB.js";
import "./chunk-FGWIXJQY.js";
import "./chunk-TKYAZCMB.js";
import "./chunk-3TBMFSPB.js";
import "./chunk-PSZLDJJA.js";
import {
  H
} from "./chunk-ZWFY3WY5.js";
import "./chunk-LQFTAGIV.js";
import "./chunk-S7IJH524.js";
import "./chunk-GZ2P4SCJ.js";
import {
  s
} from "./chunk-XWG6QGFK.js";
import "./chunk-GWNLQRNM.js";
import "./chunk-FXKORAMT.js";
import "./chunk-GNMFMITH.js";

// node_modules/@arcgis/core/rest/networks/validateNetworkTopology.js
async function o(t, o2, d2) {
  const l = f(t), u2 = o2.toJSON();
  o2.validationSet && (u2.validationSet = JSON.stringify(o2.validationSet));
  const c = { ...u2, returnEdits: true, f: "json" }, p = u({ ...l.query, ...c }), f2 = s2(p, { ...d2, method: "post" }), k = `${l.path}/validateNetworkTopology`, { data: v } = await H(k, f2);
  return i.fromJSON(n(v));
}
async function d(r, o2, d2) {
  if (!o2.gdbVersion) throw new s("submit-validate-network-topology-job:missing-gdb-version", "version is missing");
  const n2 = f(r), l = o2.toJSON();
  o2.validationSet && (l.validationSet = JSON.stringify(o2.validationSet));
  const u2 = s2(n2.query, { query: u({ ...l, returnEdits: true, async: true, f: "json" }), ...d2, method: "post" }), c = `${n2.path}/validateNetworkTopology`, { data: p } = await H(c, u2);
  return p ? p.statusUrl : null;
}
function n(e) {
  return e.serviceEdits && (e.serviceEdits = e.serviceEdits.map((e2) => (e2.editedFeatures.spatialReference && (e2.editedFeatures.spatialReference = { wkid: e2.editedFeatures.spatialReference.wkid, wkt: e2.editedFeatures.spatialReference.wkt, wkt2: e2.editedFeatures.spatialReference.wkt2, latestWkid: e2.editedFeatures.spatialReference.latestWkid, latestVcsWkid: e2.editedFeatures.spatialReference.latestVcsWkid, vcsWkid: e2.editedFeatures.spatialReference.vcsWkid }), e2 = { layerId: e2.id, editedFeatures: e2.editedFeatures }))), e;
}
export {
  n as handleValidateNetworkTopologyResult,
  d as submitValidateNetworkTopologyJob,
  o as validateNetworkTopology
};
//# sourceMappingURL=validateNetworkTopology-MFBR4PPN.js.map
