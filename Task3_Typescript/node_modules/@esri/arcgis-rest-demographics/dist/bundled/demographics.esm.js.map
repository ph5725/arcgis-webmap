{"version":3,"file":"demographics.esm.js","sources":["../../src/helpers.ts","../../src/getAvailableCountries.ts","../../src/getAvailableDataCollections.ts","../../src/getAvailableGeographyLevels.ts","../../src/getGeography.ts","../../src/queryDemographicData.ts"],"sourcesContent":["/* Copyright (c) 2020 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport { IRequestOptions, IFeatureSet } from \"@esri/arcgis-rest-request\";\n\nconst ARCGIS_ONLINE_GEOENRICHMENTSERVER_URL =\n  \"https://geoenrich.arcgis.com/arcgis/rest/services/World/geoenrichmentserver\";\nexport const ARCGIS_ONLINE_GEOENRICHMENT_URL = `${ARCGIS_ONLINE_GEOENRICHMENTSERVER_URL}/Geoenrichment`;\nexport const ARCGIS_ONLINE_STANDARD_GEOGRAPHY_QUERY_URL = `${ARCGIS_ONLINE_GEOENRICHMENTSERVER_URL}/StandardGeographyQuery`;\n\nexport interface IEndpointOptions extends IRequestOptions {\n  /**\n   * Any ArcGIS Geoenrichment service (example: https://geoenrich.arcgis.com/arcgis/rest/services/World/geoenrichmentserver/Geoenrichment )\n   */\n  endpoint?: string;\n}\n\nexport interface IGeoenrichmentResult {\n  paramName: string;\n  dataType: string;\n  value: {\n    version: string;\n    FeatureSet: IFeatureSet[];\n  };\n}\n","/* Copyright (c) 2020 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport {\n  request,\n  cleanUrl,\n  appendCustomParams,\n  IExtent\n} from \"@esri/arcgis-rest-request\";\n\nimport {\n  ARCGIS_ONLINE_GEOENRICHMENT_URL,\n  IEndpointOptions\n} from \"./helpers.js\";\n\nexport interface IGetAvailableCountriesOptions extends IEndpointOptions {\n  /**\n   * View a description for a given country. If not specified, it will return a list of all countries.\n   */\n  countryCode?: string;\n}\n\nexport interface IGetAvailableCountriesResponse {\n  messages?: string[];\n  countries?: ICountry[];\n  childResources?: any[];\n}\nexport interface ICountry {\n  id: string;\n  name: string;\n  abbr3: string;\n  altName: string;\n  continent: string;\n  distanceUnits: string;\n  esriUnits: string;\n  defaultExtent: IExtent;\n  defaultDatasetID: string;\n  datasets?: string[];\n  hierarchies?: IHierarchy[];\n  defaultDataCollection: string;\n  dataCollections: string;\n  defaultReportTemplate: string;\n  currencySymbol: string;\n  currencyFormat: string;\n}\nexport interface IHierarchy {\n  ID: string;\n  alias: string;\n  shortDescription: string;\n  default: boolean;\n  longDescription: string;\n  locales?: string[];\n  datasets?: string[];\n  levelsInfo: ILevelsInfo;\n  variablesInfo: IVariablesInfo;\n  populationToPolygonSizeRating: number;\n  apportionmentConfidence: number;\n  apportionmentThresholds?: IApportionmentThreshold[];\n  hasMarginOfErrorData?: boolean;\n}\nexport interface ILevelsInfo {\n  geographyLevels?: string[];\n}\nexport interface IVariablesInfo {\n  categories?: string[];\n}\nexport interface IApportionmentThreshold {\n  method: string;\n  dataLayer: string;\n  pointsLayer?: string;\n  maximumSize?: number;\n}\n\n/**\n * Return a list of information for all countries. See the [REST Documentation](https://developers.arcgis.com/rest/geoenrichment/api-reference/countries.htm) for more information.\n *\n * ```js\n * import { getAvailableCountries } from '@esri/arcgis-rest-demographics';\n *\n * getAvailableCountries()\n *   .then((response) => {\n *     response; // => { countries: [ ... ]  }\n *   });\n * ```\n *\n * @param requestOptions Options to pass through to the geoenrichment service.\n * @returns A Promise that will resolve with available geography levels for the request.\n */\nexport function getAvailableCountries(\n  requestOptions?: IGetAvailableCountriesOptions\n): Promise<IGetAvailableCountriesResponse> {\n  let options: IEndpointOptions = {};\n  let endpoint = `${ARCGIS_ONLINE_GEOENRICHMENT_URL}/countries`;\n  if (!requestOptions) {\n    options.params = {};\n  } else {\n    if (requestOptions.endpoint) {\n      endpoint = `${requestOptions.endpoint}/countries`;\n    }\n\n    options = appendCustomParams<IGetAvailableCountriesOptions>(\n      requestOptions,\n      [],\n      { params: { ...requestOptions.params } }\n    );\n    if (requestOptions.countryCode) {\n      endpoint = `${endpoint}/${requestOptions.countryCode}`;\n    }\n  }\n\n  return request(cleanUrl(endpoint), options).then((response: any) => {\n    return response;\n  });\n}\n","/* Copyright (c) 2020 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport {\n  request,\n  cleanUrl,\n  appendCustomParams\n} from \"@esri/arcgis-rest-request\";\n\nimport {\n  ARCGIS_ONLINE_GEOENRICHMENT_URL,\n  IEndpointOptions\n} from \"./helpers.js\";\n\nexport interface IGetAvailableDataCollectionsOptions extends IEndpointOptions {\n  /**\n   * Optional parameter to specify an array of string values that describe what derivative variables to include in the output.\n   */\n  addDerivativeVariables?: string[];\n  /**\n   * Optional parameter to return only values that are not NULL in the output response.\n   */\n  suppressNullValues?: boolean;\n  /**\n   * View a description for a single data collection within a given country. If not specified, will return a list of data collections that can be run in any country.\n   */\n  countryCode?: string;\n  dataCollection?: string;\n}\n\nexport interface IGetAvailableDataCollectionsResponse {\n  DataCollections?: IDataCollection[] | null;\n}\nexport interface IDataCollection {\n  dataCollectionID: string;\n  metadata: IMetadata;\n  data?: IDataInfo[] | null;\n}\nexport interface IMetadata {\n  title: string;\n  name: string;\n  shortDescription: string;\n  longDescription: string;\n  url: string;\n  keywords: string;\n  creationDate: number;\n  lastRevisionDate: number;\n  webmap: string;\n  author: string;\n  countries?: string | null;\n  IsRoyalties: boolean;\n  categories?: ICategory[] | null;\n  filters?: IFilter[] | null;\n  datasets?: string | null;\n  hierarchies: string;\n  coverage?: string | null;\n  mobileinfographics?: string | null;\n  icon?: string | null;\n}\nexport interface ICategory {\n  id: string;\n  name: string;\n  alias: string;\n  description: string;\n  displayOrder: string;\n}\nexport interface IFilter {\n  id: string;\n  name: string;\n  aliasname: string;\n  type: string;\n  rangeMax?: string | null;\n  rangeMin?: string | null;\n  enumValues?: string | null;\n}\nexport interface IDataInfo {\n  id: string;\n  alias: string;\n  type: string;\n  precision: number;\n  length?: null;\n  averageBase?: null;\n  averageBaseAlias?: null;\n  description: string;\n  fieldCategory: string;\n  indexBase?: number | null;\n  percentBase?: string | null;\n  percentBaseAlias?: string | null;\n  popularity?: number | null;\n  units: string;\n  vintage?: string | null;\n  hideInDataBrowser: boolean;\n  filteringTags?: IFilteringTag[] | null;\n  derivative: boolean;\n  provider: string;\n  indexType?: string | null;\n}\nexport interface IFilteringTag {\n  id: string;\n  name: string;\n  value: string;\n}\n\n/**\n * Used to determine the data collections available for usage with the Geoenrichment service. See the [REST Documentation](https://developers.arcgis.com/rest/geoenrichment/api-reference/data-collections.htm) for more information.\n *\n * ```js\n * import { getAvailableDataCollections } from '@esri/arcgis-rest-demographics';\n *\n * getAvailableDataCollections()\n *   .then((response) => {\n *     response; // => { DataCollections: [ ... ]  }\n *   });\n *\n * getAvailableDataCollections({\n *   countryCode: \"se\",\n *   dataCollection: \"EducationalAttainment\"\n * })\n *   .then((response) => {\n *     response.; // => { DataCollections: [ ... ] }\n *   });\n * ```\n *\n * @param requestOptions Options to pass through to the geoenrichment service.\n * @returns A Promise that will resolve with data collections for the request.\n */\nexport function getAvailableDataCollections(\n  requestOptions?: IGetAvailableDataCollectionsOptions\n): Promise<IGetAvailableDataCollectionsResponse> {\n  let options: IGetAvailableDataCollectionsOptions = {};\n  let endpoint = `${ARCGIS_ONLINE_GEOENRICHMENT_URL}/dataCollections`;\n\n  if (!requestOptions) {\n    options.params = {};\n  } else {\n    if (requestOptions.endpoint) {\n      endpoint = `${requestOptions.endpoint}/dataCollections`;\n    }\n    options = appendCustomParams<IGetAvailableDataCollectionsOptions>(\n      requestOptions,\n      [\"addDerivativeVariables\", \"suppressNullValues\"],\n      { params: { ...requestOptions.params } }\n    );\n\n    if (options.params.addDerivativeVariables) {\n      options.params.addDerivativeVariables = JSON.stringify(\n        options.params.addDerivativeVariables\n      );\n    }\n\n    if (requestOptions.countryCode) {\n      endpoint = `${endpoint}/${requestOptions.countryCode}`;\n      if (requestOptions.dataCollection) {\n        endpoint = `${endpoint}/${requestOptions.dataCollection}`;\n      }\n    }\n  }\n\n  // add spatialReference property to individual matches\n  return request(`${cleanUrl(endpoint)}`, options).then((response: any) => {\n    return response;\n  });\n}\n","/* Copyright (c) 2020 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport {\n  request,\n  cleanUrl,\n  appendCustomParams\n} from \"@esri/arcgis-rest-request\";\n\nimport {\n  ARCGIS_ONLINE_GEOENRICHMENT_URL,\n  IEndpointOptions\n} from \"./helpers.js\";\n\nexport interface IGetAvailableGeographyLevelsResponse {\n  messages?: string[] | null;\n  childResources?: any[] | null;\n  childDatasets?: any[] | null;\n  childHierarchies?: any[] | null;\n  geographyLevels?: IGeographyLevel[] | null;\n}\nexport interface IGeographyLevel {\n  countryID: string;\n  countryName: string;\n  datasets?: IDataset[] | null;\n  hierarchies?: IGeographyLevelHierarchy[] | null;\n}\nexport interface IDataset {\n  datasetID: string;\n  branches?: IBranch[] | null;\n  levels?: ILevel[] | null;\n}\nexport interface IBranch {\n  id: string;\n  name: string;\n  levels?: string[] | null;\n}\nexport interface ILevel {\n  id: string;\n  name: string;\n  isWholeCountry: boolean;\n  adminLevel: string;\n  singularName: string;\n  pluralName: string;\n  description?: string | null;\n}\nexport interface IGeographyLevelHierarchy {\n  ID: string;\n  branches?: IBranch[] | null;\n  levels?: ILevel[] | null;\n}\n\n/**\n * Returns a list of available geography data layers, which can then be used in [getGeography()](). See the [REST Documentation](https://developers.arcgis.com/rest/geoenrichment/api-reference/standard-geography-levels.htm) for more information.\n *\n * ```js\n * import { getAvailableGeographyLevels } from '@esri/arcgis-rest-demographics';\n * //\n * getAvailableGeographyLevels()\n *   .then((response) => {\n *     response; // => { geographyLevels: [ ... ]  }\n *   });\n * ```\n *\n * @param requestOptions Options to pass through to the geoenrichment service.\n * @returns A Promise that will resolve with available geography levels for the request.\n */\nexport function getAvailableGeographyLevels(\n  requestOptions?: IEndpointOptions\n): Promise<IGetAvailableGeographyLevelsResponse> {\n  let options: IEndpointOptions = {};\n  let endpoint = `${ARCGIS_ONLINE_GEOENRICHMENT_URL}/StandardGeographyLevels`;\n\n  if (!requestOptions) {\n    options.params = {};\n  } else {\n    if (requestOptions.endpoint) {\n      endpoint = `${requestOptions.endpoint}/StandardGeographyLevels`;\n    }\n    options = appendCustomParams<IEndpointOptions>(requestOptions, [], {\n      params: { ...requestOptions.params }\n    });\n  }\n\n  return request(`${cleanUrl(endpoint)}`, options).then((response: any) => {\n    return response;\n  });\n}\n","/* Copyright (c) 2020 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport {\n  request,\n  cleanUrl,\n  appendCustomParams\n} from \"@esri/arcgis-rest-request\";\n\nimport {\n  ARCGIS_ONLINE_STANDARD_GEOGRAPHY_QUERY_URL,\n  IGeoenrichmentResult,\n  IEndpointOptions\n} from \"./helpers.js\";\n\nexport interface IGetGeographyOptions extends IEndpointOptions {\n  /**\n   * Specify the source country for the search.\n   */\n  sourceCountry?: string;\n  /**\n   * Specify a specific dataset within a defined country.\n   */\n  optionalCountryDataset?: string;\n  /**\n   * Specify which standard geography layers are being queried or searched.\n   */\n  geographyLayers?: string[] | string;\n  /**\n   * Specify which IDs for the standard geography layers are being queried or searched.\n   */\n  geographyIDs?: string[];\n  /**\n   * Specify the text to query and search the standard geography layers specified.\n   */\n  geographyQuery?: string;\n  /**\n   * Return all the subgeographic areas that are within a parent geography.\n   */\n  returnSubGeographyLayer?: boolean;\n  /**\n   * Return all the subgeographic areas that are within a parent geography.\n   */\n  subGeographyLayer?: string;\n  /**\n   * Filter the results of the subgeography features that are returned by a search term.\n   */\n  subGeographyQuery?: string;\n  /**\n   * Request the output geometries in a specified spatial reference system.\n   */\n  outSR?: number;\n  /**\n   * Request the output geometries in the response.\n   */\n  returnGeometry?: boolean;\n  /**\n   * Request the output geometry to return the center point for each feature.\n   */\n  returnCentroids?: boolean;\n  /**\n   * Integer that specifies the level of generalization or detail in the area representations of the administrative boundary or standard geographic data layers.\n   */\n  generalizationLevel?: number;\n  /**\n   * Define if text provided in the geographyQuery parameter should utilize fuzzy search logic.\n   */\n  useFuzzySearch?: boolean;\n  /**\n   * Limits the number of features that are returned from the geographyQuery parameter.\n   */\n  featureLimit?: number;\n  /**\n   * Starts the results on the number of the records specified.\n   */\n  featureOffset?: number;\n  /**\n   * Specifies the language you wish to receive your GeoEnrichment results.\n   */\n  langCode?: string;\n}\n\nexport interface IGetGeographyResponse {\n  results: IGeoenrichmentResult[] | null;\n  messages: string[] | null;\n}\n\n/**\n * Used to get standard geography IDs and features for the supported geographic levels. See the [REST Documentation](https://developers.arcgis.com/rest/geoenrichment/api-reference/standard-geography-query.htm) and the [best practices post](https://www.esri.com/arcgis-blog/products/arcgis-online/uncategorized/best-practices-how-to-query-standard-geographies-branches) for more information.\n *\n * ```js\n * import { getGeography } from '@esri/arcgis-rest-demographics';\n * //\n * getGeography({\n *   sourceCountry: \"CA\",\n *   geographyIDs: [\"35\"]\n * })\n *   .then((response) => {\n *     response.; // => { results: [ ... ] }\n *   });\n * ```\n *\n * @param requestOptions Options to pass through to the service. All properties are optional, but either `geographyIds` or `geographyQuery` must be sent at a minimum.\n * @returns A Promise that will resolve with return data defined and optionally geometry for the feature.\n */\nexport function getGeography(\n  requestOptions?: IGetGeographyOptions\n): Promise<IGetGeographyResponse> {\n  const endpoint = `${\n    requestOptions.endpoint || ARCGIS_ONLINE_STANDARD_GEOGRAPHY_QUERY_URL\n  }/execute`;\n\n  const options = appendCustomParams<IGetGeographyOptions>(\n    requestOptions,\n    [\n      \"sourceCountry\",\n      \"optionalCountryDataset\",\n      \"geographyLayers\",\n      \"geographyIDs\",\n      \"geographyQuery\",\n      \"returnSubGeographyLayer\",\n      \"subGeographyLayer\",\n      \"subGeographyQuery\",\n      \"outSR\",\n      \"returnGeometry\",\n      \"returnCentroids\",\n      \"generalizationLevel\",\n      \"useFuzzySearch\",\n      \"featureLimit\",\n      \"featureOffset\",\n      \"langCode\"\n    ],\n    { params: { ...requestOptions.params } }\n  );\n\n  // the SAAS service does not support anonymous requests\n  if (!requestOptions.authentication) {\n    return Promise.reject(\n      \"Geoenrichment using the ArcGIS service requires authentication\"\n    );\n  }\n\n  // These parameters are passed as JSON-style strings:\n  [\"geographyLayers\", \"geographyIDs\"].forEach((parameter) => {\n    if (options.params[parameter]) {\n      options.params[parameter] = JSON.stringify(options.params[parameter]);\n    }\n  });\n\n  // add spatialReference property to individual matches\n  return request(`${cleanUrl(endpoint)}`, options).then((response: any) => {\n    return response;\n  });\n}\n","/* Copyright (c) 2020 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport {\n  request,\n  cleanUrl,\n  appendCustomParams\n} from \"@esri/arcgis-rest-request\";\n\nimport {\n  ARCGIS_ONLINE_GEOENRICHMENT_URL,\n  IGeoenrichmentResult,\n  IEndpointOptions\n} from \"./helpers.js\";\n\nexport interface IQueryDemographicDataOptions extends IEndpointOptions {\n  /**\n   * Defines the area on a map which is being analyzed\n   */\n  studyAreas: any[];\n  /**\n   * A Data Collection is a preassembled list of attributes that will be used to enrich the input features. Enrichment attributes can describe various types of information such as demographic characteristics and geographic context of the locations or areas submitted as input features in studyAreas.\n   */\n  dataCollections?: string[];\n  /**\n   * Specify a subset of variables to be returned from one or more Data Collections\n   */\n  analysisVariables?: string[];\n  /**\n   * Specify an array of string values that describe what derivative variables to include in the output\n   */\n  addDerivativeVariables?: boolean;\n  /**\n   * Request the output geometries in the response\n   */\n  returnGeometry?: boolean;\n  /**\n   * Define the input geometries in the studyAreas parameter in a specified spatial reference system\n   */\n  inSR?: number;\n  /**\n   * Request the output geometries in a specified spatial reference system\n   */\n  outSR?: number;\n}\n\nexport interface IQueryDemographicDataResponse {\n  results: IGeoenrichmentResult[] | null;\n  messages: string[] | null;\n}\n\n/**\n * Used to get facts about a location or area. See the [REST Documentation](https://developers.arcgis.com/rest/geoenrichment/api-reference/enrich.htm) for more information.\n *\n * ```js\n * import { queryDemographicData } from '@esri/arcgis-rest-demographics';\n * //\n * queryDemographicData({\n *  studyAreas: [{\"geometry\":{\"x\":-117.1956,\"y\":34.0572}}],\n *  authentication\n * })\n *   .then((response) => {\n *     response; // => { results: [ ... ] }\n *   });\n * ```\n *\n * @param requestOptions Options to pass through to the service.\n * @returns A Promise that will resolve with results for the request.\n */\nexport function queryDemographicData(\n  requestOptions?: IQueryDemographicDataOptions\n): Promise<IQueryDemographicDataResponse> {\n  const options = appendCustomParams<IQueryDemographicDataOptions>(\n    requestOptions,\n    [\n      \"studyAreas\",\n      \"dataCollections\",\n      \"analysisVariables\",\n      \"addDerivativeVariables\",\n      \"returnGeometry\",\n      \"inSR\",\n      \"outSR\"\n    ],\n    { params: { ...requestOptions.params } }\n  );\n\n  // the SAAS service does not support anonymous requests\n  if (!requestOptions.authentication) {\n    return Promise.reject(\n      \"Geoenrichment using the ArcGIS service requires authentication\"\n    );\n  }\n\n  // These parameters are passed as JSON-style strings:\n  [\"dataCollections\", \"analysisVariables\"].forEach((parameter) => {\n    if (options.params[parameter]) {\n      options.params[parameter] = JSON.stringify(options.params[parameter]);\n    }\n  });\n\n  // add spatialReference property to individual matches\n  return request(\n    `${cleanUrl(\n      `${requestOptions.endpoint || ARCGIS_ONLINE_GEOENRICHMENT_URL}/enrich`\n    )}`,\n    options\n  ).then((response: any) => {\n    return response;\n  });\n}\n"],"names":[],"mappings":"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"}