{"version":3,"file":"getAvailableCountries.js","sourceRoot":"","sources":["../../src/getAvailableCountries.ts"],"names":[],"mappings":";AAAA;gBACgB;;;AAEhB,mEAKmC;AAEnC,6CAGsB;AA4DtB;;;;;;;;;;;;;;GAcG;AACH,SAAgB,qBAAqB,CACnC,cAA8C;IAE9C,IAAI,OAAO,GAAqB,EAAE,CAAC;IACnC,IAAI,QAAQ,GAAG,GAAG,4CAA+B,YAAY,CAAC;IAC9D,IAAI,CAAC,cAAc,EAAE;QACnB,OAAO,CAAC,MAAM,GAAG,EAAE,CAAC;KACrB;SAAM;QACL,IAAI,cAAc,CAAC,QAAQ,EAAE;YAC3B,QAAQ,GAAG,GAAG,cAAc,CAAC,QAAQ,YAAY,CAAC;SACnD;QAED,OAAO,GAAG,IAAA,wCAAkB,EAC1B,cAAc,EACd,EAAE,EACF,EAAE,MAAM,oBAAO,cAAc,CAAC,MAAM,CAAE,EAAE,CACzC,CAAC;QACF,IAAI,cAAc,CAAC,WAAW,EAAE;YAC9B,QAAQ,GAAG,GAAG,QAAQ,IAAI,cAAc,CAAC,WAAW,EAAE,CAAC;SACxD;KACF;IAED,OAAO,IAAA,6BAAO,EAAC,IAAA,8BAAQ,EAAC,QAAQ,CAAC,EAAE,OAAO,CAAC,CAAC,IAAI,CAAC,CAAC,QAAa,EAAE,EAAE;QACjE,OAAO,QAAQ,CAAC;IAClB,CAAC,CAAC,CAAC;AACL,CAAC;AAzBD,sDAyBC","sourcesContent":["/* Copyright (c) 2020 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport {\n  request,\n  cleanUrl,\n  appendCustomParams,\n  IExtent\n} from \"@esri/arcgis-rest-request\";\n\nimport {\n  ARCGIS_ONLINE_GEOENRICHMENT_URL,\n  IEndpointOptions\n} from \"./helpers.js\";\n\nexport interface IGetAvailableCountriesOptions extends IEndpointOptions {\n  /**\n   * View a description for a given country. If not specified, it will return a list of all countries.\n   */\n  countryCode?: string;\n}\n\nexport interface IGetAvailableCountriesResponse {\n  messages?: string[];\n  countries?: ICountry[];\n  childResources?: any[];\n}\nexport interface ICountry {\n  id: string;\n  name: string;\n  abbr3: string;\n  altName: string;\n  continent: string;\n  distanceUnits: string;\n  esriUnits: string;\n  defaultExtent: IExtent;\n  defaultDatasetID: string;\n  datasets?: string[];\n  hierarchies?: IHierarchy[];\n  defaultDataCollection: string;\n  dataCollections: string;\n  defaultReportTemplate: string;\n  currencySymbol: string;\n  currencyFormat: string;\n}\nexport interface IHierarchy {\n  ID: string;\n  alias: string;\n  shortDescription: string;\n  default: boolean;\n  longDescription: string;\n  locales?: string[];\n  datasets?: string[];\n  levelsInfo: ILevelsInfo;\n  variablesInfo: IVariablesInfo;\n  populationToPolygonSizeRating: number;\n  apportionmentConfidence: number;\n  apportionmentThresholds?: IApportionmentThreshold[];\n  hasMarginOfErrorData?: boolean;\n}\nexport interface ILevelsInfo {\n  geographyLevels?: string[];\n}\nexport interface IVariablesInfo {\n  categories?: string[];\n}\nexport interface IApportionmentThreshold {\n  method: string;\n  dataLayer: string;\n  pointsLayer?: string;\n  maximumSize?: number;\n}\n\n/**\n * Return a list of information for all countries. See the [REST Documentation](https://developers.arcgis.com/rest/geoenrichment/api-reference/countries.htm) for more information.\n *\n * ```js\n * import { getAvailableCountries } from '@esri/arcgis-rest-demographics';\n *\n * getAvailableCountries()\n *   .then((response) => {\n *     response; // => { countries: [ ... ]  }\n *   });\n * ```\n *\n * @param requestOptions Options to pass through to the geoenrichment service.\n * @returns A Promise that will resolve with available geography levels for the request.\n */\nexport function getAvailableCountries(\n  requestOptions?: IGetAvailableCountriesOptions\n): Promise<IGetAvailableCountriesResponse> {\n  let options: IEndpointOptions = {};\n  let endpoint = `${ARCGIS_ONLINE_GEOENRICHMENT_URL}/countries`;\n  if (!requestOptions) {\n    options.params = {};\n  } else {\n    if (requestOptions.endpoint) {\n      endpoint = `${requestOptions.endpoint}/countries`;\n    }\n\n    options = appendCustomParams<IGetAvailableCountriesOptions>(\n      requestOptions,\n      [],\n      { params: { ...requestOptions.params } }\n    );\n    if (requestOptions.countryCode) {\n      endpoint = `${endpoint}/${requestOptions.countryCode}`;\n    }\n  }\n\n  return request(cleanUrl(endpoint), options).then((response: any) => {\n    return response;\n  });\n}\n"]}