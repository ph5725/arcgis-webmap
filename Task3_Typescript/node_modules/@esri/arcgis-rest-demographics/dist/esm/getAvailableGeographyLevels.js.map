{"version":3,"file":"getAvailableGeographyLevels.js","sourceRoot":"","sources":["../../src/getAvailableGeographyLevels.ts"],"names":[],"mappings":"AAAA;gBACgB;AAEhB,OAAO,EACL,OAAO,EACP,QAAQ,EACR,kBAAkB,EACnB,MAAM,2BAA2B,CAAC;AAEnC,OAAO,EACL,+BAA+B,EAEhC,MAAM,cAAc,CAAC;AAwCtB;;;;;;;;;;;;;;GAcG;AACH,MAAM,UAAU,2BAA2B,CACzC,cAAiC;IAEjC,IAAI,OAAO,GAAqB,EAAE,CAAC;IACnC,IAAI,QAAQ,GAAG,GAAG,+BAA+B,0BAA0B,CAAC;IAE5E,IAAI,CAAC,cAAc,EAAE;QACnB,OAAO,CAAC,MAAM,GAAG,EAAE,CAAC;KACrB;SAAM;QACL,IAAI,cAAc,CAAC,QAAQ,EAAE;YAC3B,QAAQ,GAAG,GAAG,cAAc,CAAC,QAAQ,0BAA0B,CAAC;SACjE;QACD,OAAO,GAAG,kBAAkB,CAAmB,cAAc,EAAE,EAAE,EAAE;YACjE,MAAM,oBAAO,cAAc,CAAC,MAAM,CAAE;SACrC,CAAC,CAAC;KACJ;IAED,OAAO,OAAO,CAAC,GAAG,QAAQ,CAAC,QAAQ,CAAC,EAAE,EAAE,OAAO,CAAC,CAAC,IAAI,CAAC,CAAC,QAAa,EAAE,EAAE;QACtE,OAAO,QAAQ,CAAC;IAClB,CAAC,CAAC,CAAC;AACL,CAAC","sourcesContent":["/* Copyright (c) 2020 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport {\n  request,\n  cleanUrl,\n  appendCustomParams\n} from \"@esri/arcgis-rest-request\";\n\nimport {\n  ARCGIS_ONLINE_GEOENRICHMENT_URL,\n  IEndpointOptions\n} from \"./helpers.js\";\n\nexport interface IGetAvailableGeographyLevelsResponse {\n  messages?: string[] | null;\n  childResources?: any[] | null;\n  childDatasets?: any[] | null;\n  childHierarchies?: any[] | null;\n  geographyLevels?: IGeographyLevel[] | null;\n}\nexport interface IGeographyLevel {\n  countryID: string;\n  countryName: string;\n  datasets?: IDataset[] | null;\n  hierarchies?: IGeographyLevelHierarchy[] | null;\n}\nexport interface IDataset {\n  datasetID: string;\n  branches?: IBranch[] | null;\n  levels?: ILevel[] | null;\n}\nexport interface IBranch {\n  id: string;\n  name: string;\n  levels?: string[] | null;\n}\nexport interface ILevel {\n  id: string;\n  name: string;\n  isWholeCountry: boolean;\n  adminLevel: string;\n  singularName: string;\n  pluralName: string;\n  description?: string | null;\n}\nexport interface IGeographyLevelHierarchy {\n  ID: string;\n  branches?: IBranch[] | null;\n  levels?: ILevel[] | null;\n}\n\n/**\n * Returns a list of available geography data layers, which can then be used in [getGeography()](). See the [REST Documentation](https://developers.arcgis.com/rest/geoenrichment/api-reference/standard-geography-levels.htm) for more information.\n *\n * ```js\n * import { getAvailableGeographyLevels } from '@esri/arcgis-rest-demographics';\n * //\n * getAvailableGeographyLevels()\n *   .then((response) => {\n *     response; // => { geographyLevels: [ ... ]  }\n *   });\n * ```\n *\n * @param requestOptions Options to pass through to the geoenrichment service.\n * @returns A Promise that will resolve with available geography levels for the request.\n */\nexport function getAvailableGeographyLevels(\n  requestOptions?: IEndpointOptions\n): Promise<IGetAvailableGeographyLevelsResponse> {\n  let options: IEndpointOptions = {};\n  let endpoint = `${ARCGIS_ONLINE_GEOENRICHMENT_URL}/StandardGeographyLevels`;\n\n  if (!requestOptions) {\n    options.params = {};\n  } else {\n    if (requestOptions.endpoint) {\n      endpoint = `${requestOptions.endpoint}/StandardGeographyLevels`;\n    }\n    options = appendCustomParams<IEndpointOptions>(requestOptions, [], {\n      params: { ...requestOptions.params }\n    });\n  }\n\n  return request(`${cleanUrl(endpoint)}`, options).then((response: any) => {\n    return response;\n  });\n}\n"]}