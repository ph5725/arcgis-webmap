{"version":3,"file":"getGeography.js","sourceRoot":"","sources":["../../src/getGeography.ts"],"names":[],"mappings":"AAAA;gBACgB;AAEhB,OAAO,EACL,OAAO,EACP,QAAQ,EACR,kBAAkB,EACnB,MAAM,2BAA2B,CAAC;AAEnC,OAAO,EACL,0CAA0C,EAG3C,MAAM,cAAc,CAAC;AA0EtB;;;;;;;;;;;;;;;;;GAiBG;AACH,MAAM,UAAU,YAAY,CAC1B,cAAqC;IAErC,MAAM,QAAQ,GAAG,GACf,cAAc,CAAC,QAAQ,IAAI,0CAC7B,UAAU,CAAC;IAEX,MAAM,OAAO,GAAG,kBAAkB,CAChC,cAAc,EACd;QACE,eAAe;QACf,wBAAwB;QACxB,iBAAiB;QACjB,cAAc;QACd,gBAAgB;QAChB,yBAAyB;QACzB,mBAAmB;QACnB,mBAAmB;QACnB,OAAO;QACP,gBAAgB;QAChB,iBAAiB;QACjB,qBAAqB;QACrB,gBAAgB;QAChB,cAAc;QACd,eAAe;QACf,UAAU;KACX,EACD,EAAE,MAAM,oBAAO,cAAc,CAAC,MAAM,CAAE,EAAE,CACzC,CAAC;IAEF,uDAAuD;IACvD,IAAI,CAAC,cAAc,CAAC,cAAc,EAAE;QAClC,OAAO,OAAO,CAAC,MAAM,CACnB,gEAAgE,CACjE,CAAC;KACH;IAED,qDAAqD;IACrD,CAAC,iBAAiB,EAAE,cAAc,CAAC,CAAC,OAAO,CAAC,CAAC,SAAS,EAAE,EAAE;QACxD,IAAI,OAAO,CAAC,MAAM,CAAC,SAAS,CAAC,EAAE;YAC7B,OAAO,CAAC,MAAM,CAAC,SAAS,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC;SACvE;IACH,CAAC,CAAC,CAAC;IAEH,sDAAsD;IACtD,OAAO,OAAO,CAAC,GAAG,QAAQ,CAAC,QAAQ,CAAC,EAAE,EAAE,OAAO,CAAC,CAAC,IAAI,CAAC,CAAC,QAAa,EAAE,EAAE;QACtE,OAAO,QAAQ,CAAC;IAClB,CAAC,CAAC,CAAC;AACL,CAAC","sourcesContent":["/* Copyright (c) 2020 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport {\n  request,\n  cleanUrl,\n  appendCustomParams\n} from \"@esri/arcgis-rest-request\";\n\nimport {\n  ARCGIS_ONLINE_STANDARD_GEOGRAPHY_QUERY_URL,\n  IGeoenrichmentResult,\n  IEndpointOptions\n} from \"./helpers.js\";\n\nexport interface IGetGeographyOptions extends IEndpointOptions {\n  /**\n   * Specify the source country for the search.\n   */\n  sourceCountry?: string;\n  /**\n   * Specify a specific dataset within a defined country.\n   */\n  optionalCountryDataset?: string;\n  /**\n   * Specify which standard geography layers are being queried or searched.\n   */\n  geographyLayers?: string[] | string;\n  /**\n   * Specify which IDs for the standard geography layers are being queried or searched.\n   */\n  geographyIDs?: string[];\n  /**\n   * Specify the text to query and search the standard geography layers specified.\n   */\n  geographyQuery?: string;\n  /**\n   * Return all the subgeographic areas that are within a parent geography.\n   */\n  returnSubGeographyLayer?: boolean;\n  /**\n   * Return all the subgeographic areas that are within a parent geography.\n   */\n  subGeographyLayer?: string;\n  /**\n   * Filter the results of the subgeography features that are returned by a search term.\n   */\n  subGeographyQuery?: string;\n  /**\n   * Request the output geometries in a specified spatial reference system.\n   */\n  outSR?: number;\n  /**\n   * Request the output geometries in the response.\n   */\n  returnGeometry?: boolean;\n  /**\n   * Request the output geometry to return the center point for each feature.\n   */\n  returnCentroids?: boolean;\n  /**\n   * Integer that specifies the level of generalization or detail in the area representations of the administrative boundary or standard geographic data layers.\n   */\n  generalizationLevel?: number;\n  /**\n   * Define if text provided in the geographyQuery parameter should utilize fuzzy search logic.\n   */\n  useFuzzySearch?: boolean;\n  /**\n   * Limits the number of features that are returned from the geographyQuery parameter.\n   */\n  featureLimit?: number;\n  /**\n   * Starts the results on the number of the records specified.\n   */\n  featureOffset?: number;\n  /**\n   * Specifies the language you wish to receive your GeoEnrichment results.\n   */\n  langCode?: string;\n}\n\nexport interface IGetGeographyResponse {\n  results: IGeoenrichmentResult[] | null;\n  messages: string[] | null;\n}\n\n/**\n * Used to get standard geography IDs and features for the supported geographic levels. See the [REST Documentation](https://developers.arcgis.com/rest/geoenrichment/api-reference/standard-geography-query.htm) and the [best practices post](https://www.esri.com/arcgis-blog/products/arcgis-online/uncategorized/best-practices-how-to-query-standard-geographies-branches) for more information.\n *\n * ```js\n * import { getGeography } from '@esri/arcgis-rest-demographics';\n * //\n * getGeography({\n *   sourceCountry: \"CA\",\n *   geographyIDs: [\"35\"]\n * })\n *   .then((response) => {\n *     response.; // => { results: [ ... ] }\n *   });\n * ```\n *\n * @param requestOptions Options to pass through to the service. All properties are optional, but either `geographyIds` or `geographyQuery` must be sent at a minimum.\n * @returns A Promise that will resolve with return data defined and optionally geometry for the feature.\n */\nexport function getGeography(\n  requestOptions?: IGetGeographyOptions\n): Promise<IGetGeographyResponse> {\n  const endpoint = `${\n    requestOptions.endpoint || ARCGIS_ONLINE_STANDARD_GEOGRAPHY_QUERY_URL\n  }/execute`;\n\n  const options = appendCustomParams<IGetGeographyOptions>(\n    requestOptions,\n    [\n      \"sourceCountry\",\n      \"optionalCountryDataset\",\n      \"geographyLayers\",\n      \"geographyIDs\",\n      \"geographyQuery\",\n      \"returnSubGeographyLayer\",\n      \"subGeographyLayer\",\n      \"subGeographyQuery\",\n      \"outSR\",\n      \"returnGeometry\",\n      \"returnCentroids\",\n      \"generalizationLevel\",\n      \"useFuzzySearch\",\n      \"featureLimit\",\n      \"featureOffset\",\n      \"langCode\"\n    ],\n    { params: { ...requestOptions.params } }\n  );\n\n  // the SAAS service does not support anonymous requests\n  if (!requestOptions.authentication) {\n    return Promise.reject(\n      \"Geoenrichment using the ArcGIS service requires authentication\"\n    );\n  }\n\n  // These parameters are passed as JSON-style strings:\n  [\"geographyLayers\", \"geographyIDs\"].forEach((parameter) => {\n    if (options.params[parameter]) {\n      options.params[parameter] = JSON.stringify(options.params[parameter]);\n    }\n  });\n\n  // add spatialReference property to individual matches\n  return request(`${cleanUrl(endpoint)}`, options).then((response: any) => {\n    return response;\n  });\n}\n"]}