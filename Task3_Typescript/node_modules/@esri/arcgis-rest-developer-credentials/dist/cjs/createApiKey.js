"use strict";
/* Copyright (c) 2023 Environmental Systems Research Institute, Inc.
 * Apache-2.0 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.createApiKey = void 0;
const arcgis_rest_portal_1 = require("@esri/arcgis-rest-portal");
const registerApp_js_1 = require("./shared/registerApp.js");
const helpers_js_1 = require("./shared/helpers.js");
const getRegisteredAppInfo_js_1 = require("./shared/getRegisteredAppInfo.js");
/**
 * Used to register an API key. See the [security and authentication](https://developers.arcgis.com/documentation/mapping-apis-and-services/security/api-keys/) for more information about API key.
 *
 * ```js
 * import { createApiKey, IApiKeyResponse } from '@esri/arcgis-rest-developer-credentials';
 * import { ArcGISIdentityManager } from "@esri/arcgis-rest-request";
 *
 * const authSession: ArcGISIdentityManager = await ArcGISIdentityManager.signIn({
 *   username: "xyz_usrName",
 *   password: "xyz_pw"
 * });
 *
 * const threeDaysFromToday = new Date();
 * threeDaysFromToday.setDate(threeDaysFromToday.getDate() + 3);
 * threeDaysFromToday.setHours(23, 59, 59, 999);
 *
 * createApiKey({
 *   title: "xyz_title",
 *   description: "xyz_desc",
 *   tags: ["xyz_tag1", "xyz_tag2"],
 *   privileges: ["premium:user:networkanalysis:routing"],
 *   authentication: authSession,
 *   generateToken1: true, // optional,generate a new token
 *   apiToken1ExpirationDate: threeDaysFromToday  // optional, update expiration date
 * }).then((registeredAPIKey: IApiKeyResponse) => {
 *   // => {accessToken1: "xyz_key", item: {tags: ["xyz_tag1", "xyz_tag2"], ...}, ...}
 * }).catch(e => {
 *   // => an exception object
 * });
 * ```
 *
 * @param requestOptions - Options for {@linkcode createApiKey | createApiKey()}, including necessary params to register an API key and an {@linkcode ArcGISIdentityManager} authentication session.
 * @returns A Promise that will resolve to an {@linkcode IApiKeyResponse} object representing the newly registered API key.
 */
async function createApiKey(requestOptions) {
    requestOptions.httpMethod = "POST";
    // filter param buckets:
    const baseRequestOptions = (0, helpers_js_1.extractBaseRequestOptions)(requestOptions); // snapshot of basic IRequestOptions before customized params being built into it
    const itemAddProperties = [
        "categories",
        "culture",
        "description",
        "documentation",
        "extent",
        "owner",
        "properties",
        "snippet",
        "spatialReference",
        "tags",
        "title",
        "type",
        "typeKeywords",
        "url"
    ];
    /**
     * step 1: create item
     */
    const createItemOption = Object.assign(Object.assign({ item: Object.assign(Object.assign({}, (0, helpers_js_1.filterKeys)(requestOptions, itemAddProperties)), { type: "Application" }) }, baseRequestOptions), { authentication: requestOptions.authentication, params: {
            f: "json"
        } });
    const createItemResponse = await (0, arcgis_rest_portal_1.createItem)(createItemOption);
    /**
     * getRegisteredAppInfoRoute
     */
    const registerAppOptions = Object.assign(Object.assign({ itemId: createItemResponse.id, appType: "multiple", redirect_uris: ["urn:ietf:wg:oauth:2.0:oob"], httpReferrers: requestOptions.httpReferrers || [], privileges: requestOptions.privileges }, baseRequestOptions), { authentication: requestOptions.authentication });
    const registeredAppResponse = await (0, registerApp_js_1.registerApp)(registerAppOptions);
    /**
     * step 3: update item with desired expiration dates
     * you cannot set the expiration date propierties until you
     * regiester the app so this has to be a seperate step
     */
    await (0, arcgis_rest_portal_1.updateItem)(Object.assign(Object.assign({}, baseRequestOptions), { item: Object.assign({ id: createItemResponse.id }, (0, helpers_js_1.buildExpirationDateParams)(requestOptions, true)), authentication: requestOptions.authentication }));
    /*
     * step 4: get item info
     */
    const itemInfo = await (0, arcgis_rest_portal_1.getItem)(registeredAppResponse.itemId, Object.assign(Object.assign({}, baseRequestOptions), { authentication: requestOptions.authentication, params: { f: "json" } }));
    /**
     * step 5: generate tokens if requested
     */
    const generatedTokens = await (0, helpers_js_1.generateApiKeyTokens)(itemInfo.id, (0, helpers_js_1.generateOptionsToSlots)(requestOptions.generateToken1, requestOptions.generateToken2), Object.assign(Object.assign({}, baseRequestOptions), { authentication: requestOptions.authentication }));
    /**
     * step 6: get registered app info to get updated active key status
     */
    const updatedRegisteredAppResponse = await (0, getRegisteredAppInfo_js_1.getRegisteredAppInfo)(Object.assign(Object.assign({}, baseRequestOptions), { itemId: itemInfo.id, authentication: requestOptions.authentication }));
    return Object.assign(Object.assign(Object.assign({}, generatedTokens), (0, helpers_js_1.appToApiKeyProperties)(updatedRegisteredAppResponse)), { item: itemInfo });
}
exports.createApiKey = createApiKey;
//# sourceMappingURL=createApiKey.js.map