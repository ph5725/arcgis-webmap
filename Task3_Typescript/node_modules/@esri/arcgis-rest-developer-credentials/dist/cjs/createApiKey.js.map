{"version":3,"file":"createApiKey.js","sourceRoot":"","sources":["../../src/createApiKey.ts"],"names":[],"mappings":";AAAA;gBACgB;;;AAEhB,iEAMkC;AAMlC,4DAAsD;AAEtD,oDAO6B;AAC7B,8EAAwE;AAExE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAiCG;AACI,KAAK,UAAU,YAAY,CAChC,cAAoC;IAEpC,cAAc,CAAC,UAAU,GAAG,MAAM,CAAC;IAEnC,wBAAwB;IACxB,MAAM,kBAAkB,GAAG,IAAA,sCAAyB,EAAC,cAAc,CAAC,CAAC,CAAC,iFAAiF;IAEvJ,MAAM,iBAAiB,GAA0B;QAC/C,YAAY;QACZ,SAAS;QACT,aAAa;QACb,eAAe;QACf,QAAQ;QACR,OAAO;QACP,YAAY;QACZ,SAAS;QACT,kBAAkB;QAClB,MAAM;QACN,OAAO;QACP,MAAM;QACN,cAAc;QACd,KAAK;KACN,CAAC;IAEF;;OAEG;IACH,MAAM,gBAAgB,iCACpB,IAAI,kCACC,IAAA,uBAAU,EAAC,cAAqB,EAAE,iBAAiB,CAAC,KACvD,IAAI,EAAE,aAAa,OAElB,kBAAkB,KACrB,cAAc,EAAE,cAAc,CAAC,cAAc,EAC7C,MAAM,EAAE;YACN,CAAC,EAAE,MAAM;SACV,GACF,CAAC;IAEF,MAAM,kBAAkB,GAAG,MAAM,IAAA,+BAAU,EAAC,gBAAgB,CAAC,CAAC;IAE9D;;OAEG;IACH,MAAM,kBAAkB,iCACtB,MAAM,EAAE,kBAAkB,CAAC,EAAE,EAC7B,OAAO,EAAE,UAAU,EACnB,aAAa,EAAE,CAAC,2BAA2B,CAAC,EAC5C,aAAa,EAAE,cAAc,CAAC,aAAa,IAAI,EAAE,EACjD,UAAU,EAAE,cAAc,CAAC,UAAU,IAClC,kBAAkB,KACrB,cAAc,EAAE,cAAc,CAAC,cAAc,GAC9C,CAAC;IAEF,MAAM,qBAAqB,GAAG,MAAM,IAAA,4BAAW,EAAC,kBAAkB,CAAC,CAAC;IAEpE;;;;OAIG;IACH,MAAM,IAAA,+BAAU,kCACX,kBAAkB,KACrB,IAAI,kBACF,EAAE,EAAE,kBAAkB,CAAC,EAAE,IACtB,IAAA,sCAAyB,EAAC,cAAc,EAAE,IAAI,CAAC,GAEpD,cAAc,EAAE,cAAc,CAAC,cAAc,IAC7C,CAAC;IAEH;;OAEG;IACH,MAAM,QAAQ,GAAG,MAAM,IAAA,4BAAO,EAAC,qBAAqB,CAAC,MAAM,kCACtD,kBAAkB,KACrB,cAAc,EAAE,cAAc,CAAC,cAAc,EAC7C,MAAM,EAAE,EAAE,CAAC,EAAE,MAAM,EAAE,IACrB,CAAC;IAEH;;OAEG;IACH,MAAM,eAAe,GAAG,MAAM,IAAA,iCAAoB,EAChD,QAAQ,CAAC,EAAE,EACX,IAAA,mCAAsB,EACpB,cAAc,CAAC,cAAc,EAC7B,cAAc,CAAC,cAAc,CAC9B,kCAEI,kBAAkB,KACrB,cAAc,EAAE,cAAc,CAAC,cAAc,IAEhD,CAAC;IAEF;;OAEG;IACH,MAAM,4BAA4B,GAAG,MAAM,IAAA,8CAAoB,kCAC1D,kBAAkB,KACrB,MAAM,EAAE,QAAQ,CAAC,EAAE,EACnB,cAAc,EAAE,cAAc,CAAC,cAAc,IAC7C,CAAC;IAEH,qDACK,eAAe,GACf,IAAA,kCAAqB,EAAC,4BAA4B,CAAC,KACtD,IAAI,EAAE,QAAQ,IACd;AACJ,CAAC;AA7GD,oCA6GC","sourcesContent":["/* Copyright (c) 2023 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport {\n  ICreateItemOptions,\n  createItem,\n  getItem,\n  IItemAdd,\n  updateItem\n} from \"@esri/arcgis-rest-portal\";\nimport {\n  IApiKeyResponse,\n  ICreateApiKeyOptions\n} from \"./shared/types/apiKeyType.js\";\n\nimport { registerApp } from \"./shared/registerApp.js\";\nimport { IRegisterAppOptions } from \"./shared/types/appType.js\";\nimport {\n  appToApiKeyProperties,\n  filterKeys,\n  extractBaseRequestOptions,\n  generateApiKeyTokens,\n  generateOptionsToSlots,\n  buildExpirationDateParams\n} from \"./shared/helpers.js\";\nimport { getRegisteredAppInfo } from \"./shared/getRegisteredAppInfo.js\";\n\n/**\n * Used to register an API key. See the [security and authentication](https://developers.arcgis.com/documentation/mapping-apis-and-services/security/api-keys/) for more information about API key.\n *\n * ```js\n * import { createApiKey, IApiKeyResponse } from '@esri/arcgis-rest-developer-credentials';\n * import { ArcGISIdentityManager } from \"@esri/arcgis-rest-request\";\n *\n * const authSession: ArcGISIdentityManager = await ArcGISIdentityManager.signIn({\n *   username: \"xyz_usrName\",\n *   password: \"xyz_pw\"\n * });\n *\n * const threeDaysFromToday = new Date();\n * threeDaysFromToday.setDate(threeDaysFromToday.getDate() + 3);\n * threeDaysFromToday.setHours(23, 59, 59, 999);\n *\n * createApiKey({\n *   title: \"xyz_title\",\n *   description: \"xyz_desc\",\n *   tags: [\"xyz_tag1\", \"xyz_tag2\"],\n *   privileges: [\"premium:user:networkanalysis:routing\"],\n *   authentication: authSession,\n *   generateToken1: true, // optional,generate a new token\n *   apiToken1ExpirationDate: threeDaysFromToday  // optional, update expiration date\n * }).then((registeredAPIKey: IApiKeyResponse) => {\n *   // => {accessToken1: \"xyz_key\", item: {tags: [\"xyz_tag1\", \"xyz_tag2\"], ...}, ...}\n * }).catch(e => {\n *   // => an exception object\n * });\n * ```\n *\n * @param requestOptions - Options for {@linkcode createApiKey | createApiKey()}, including necessary params to register an API key and an {@linkcode ArcGISIdentityManager} authentication session.\n * @returns A Promise that will resolve to an {@linkcode IApiKeyResponse} object representing the newly registered API key.\n */\nexport async function createApiKey(\n  requestOptions: ICreateApiKeyOptions\n): Promise<IApiKeyResponse> {\n  requestOptions.httpMethod = \"POST\";\n\n  // filter param buckets:\n  const baseRequestOptions = extractBaseRequestOptions(requestOptions); // snapshot of basic IRequestOptions before customized params being built into it\n\n  const itemAddProperties: Array<keyof IItemAdd> = [\n    \"categories\",\n    \"culture\",\n    \"description\",\n    \"documentation\",\n    \"extent\",\n    \"owner\",\n    \"properties\",\n    \"snippet\",\n    \"spatialReference\",\n    \"tags\",\n    \"title\",\n    \"type\",\n    \"typeKeywords\",\n    \"url\"\n  ];\n\n  /**\n   * step 1: create item\n   */\n  const createItemOption: ICreateItemOptions = {\n    item: {\n      ...filterKeys(requestOptions as any, itemAddProperties),\n      type: \"Application\"\n    },\n    ...baseRequestOptions,\n    authentication: requestOptions.authentication,\n    params: {\n      f: \"json\"\n    }\n  };\n\n  const createItemResponse = await createItem(createItemOption);\n\n  /**\n   * getRegisteredAppInfoRoute\n   */\n  const registerAppOptions: IRegisterAppOptions = {\n    itemId: createItemResponse.id,\n    appType: \"multiple\",\n    redirect_uris: [\"urn:ietf:wg:oauth:2.0:oob\"],\n    httpReferrers: requestOptions.httpReferrers || [],\n    privileges: requestOptions.privileges,\n    ...baseRequestOptions,\n    authentication: requestOptions.authentication\n  };\n\n  const registeredAppResponse = await registerApp(registerAppOptions);\n\n  /**\n   * step 3: update item with desired expiration dates\n   * you cannot set the expiration date propierties until you\n   * regiester the app so this has to be a seperate step\n   */\n  await updateItem({\n    ...baseRequestOptions,\n    item: {\n      id: createItemResponse.id,\n      ...buildExpirationDateParams(requestOptions, true)\n    },\n    authentication: requestOptions.authentication\n  });\n\n  /*\n   * step 4: get item info\n   */\n  const itemInfo = await getItem(registeredAppResponse.itemId, {\n    ...baseRequestOptions,\n    authentication: requestOptions.authentication,\n    params: { f: \"json\" }\n  });\n\n  /**\n   * step 5: generate tokens if requested\n   */\n  const generatedTokens = await generateApiKeyTokens(\n    itemInfo.id,\n    generateOptionsToSlots(\n      requestOptions.generateToken1,\n      requestOptions.generateToken2\n    ),\n    {\n      ...baseRequestOptions,\n      authentication: requestOptions.authentication\n    }\n  );\n\n  /**\n   * step 6: get registered app info to get updated active key status\n   */\n  const updatedRegisteredAppResponse = await getRegisteredAppInfo({\n    ...baseRequestOptions,\n    itemId: itemInfo.id,\n    authentication: requestOptions.authentication\n  });\n\n  return {\n    ...generatedTokens,\n    ...appToApiKeyProperties(updatedRegisteredAppResponse),\n    item: itemInfo\n  };\n}\n"]}