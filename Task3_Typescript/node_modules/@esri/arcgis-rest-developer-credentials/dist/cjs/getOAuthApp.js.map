{"version":3,"file":"getOAuthApp.js","sourceRoot":"","sources":["../../src/getOAuthApp.ts"],"names":[],"mappings":";AAAA;gBACgB;;;AAEhB,8EAAwE;AACxE,iEAAmD;AACnD,oDAG6B;AAG7B;;;;;;;;;;;;;;;;;;;;;;;;GAwBG;AACI,KAAK,UAAU,WAAW,CAC/B,cAAmC;IAEnC,MAAM,WAAW,GAAG,MAAM,IAAA,8CAAoB,EAAC,cAAc,CAAC,CAAC;IAE/D,MAAM,QAAQ,GAAG,MAAM,IAAA,4BAAO,EAAC,cAAc,CAAC,MAAM,kCAC/C,IAAA,sCAAyB,EAAC,cAAc,CAAC,KAC5C,cAAc,EAAE,cAAc,CAAC,cAAc,IAC7C,CAAC;IAEH,uCACK,IAAA,oCAAuB,EAAC,WAAW,CAAC,KACvC,IAAI,EAAE,QAAQ,IACd;AACJ,CAAC;AAdD,kCAcC","sourcesContent":["/* Copyright (c) 2023 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport { getRegisteredAppInfo } from \"./shared/getRegisteredAppInfo.js\";\nimport { getItem } from \"@esri/arcgis-rest-portal\";\nimport {\n  appToOAuthAppProperties,\n  extractBaseRequestOptions\n} from \"./shared/helpers.js\";\nimport { IGetOAuthAppOptions, IOAuthApp } from \"./shared/types/oAuthType.js\";\n\n/**\n * Used to retrieve the OAuth2.0 app with given `itemId`. See the [OAuth2.0](https://developers.arcgis.com/documentation/mapping-apis-and-services/security/oauth-2.0/) for more information.\n *\n * ```js\n * import { getOAuthApp, IOAuthApp } from '@esri/arcgis-rest-developer-credentials';\n * import { ArcGISIdentityManager } from \"@esri/arcgis-rest-request\";\n *\n * const authSession: ArcGISIdentityManager = await ArcGISIdentityManager.signIn({\n *   username: \"xyz_usrName\",\n *   password: \"xyz_pw\"\n * });\n *\n * getOAuthApp({\n *   itemId: \"xyz_itemId\",\n *   authentication: authSession\n * }).then((retrievedOAuthApp: IOAuthApp) => {\n *   // => {redirect_uris: [\"http://localhost:3000/\"], item: {tags: [\"xyz_tag1\", \"xyz_tag2\"], ...}, ...}\n * }).catch(e => {\n *   // => an exception object\n * });\n * ```\n *\n * @param requestOptions - Options for {@linkcode getOAuthApp | getOAuthApp()}, including `itemId` of which OAuth app to retrieve and an {@linkcode ArcGISIdentityManager} authentication session.\n * @returns A Promise that will resolve to an {@linkcode IOAuthApp} object representing successfully retrieved OAuth app.\n */\nexport async function getOAuthApp(\n  requestOptions: IGetOAuthAppOptions\n): Promise<IOAuthApp> {\n  const appResponse = await getRegisteredAppInfo(requestOptions);\n\n  const itemInfo = await getItem(requestOptions.itemId, {\n    ...extractBaseRequestOptions(requestOptions),\n    authentication: requestOptions.authentication\n  });\n\n  return {\n    ...appToOAuthAppProperties(appResponse),\n    item: itemInfo\n  };\n}\n"]}