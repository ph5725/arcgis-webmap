{"version":3,"file":"invalidateApiKey.js","sourceRoot":"","sources":["../../src/invalidateApiKey.ts"],"names":[],"mappings":";AAAA;gBACgB;;;AAMhB,8EAAwE;AACxE,iEAAwD;AACxD,mEAAoD;AACpD,oDAA6D;AAE7D;;;;;;;;;;;;;;;GAeG;AACI,KAAK,UAAU,gBAAgB,CACpC,cAAwC;IAExC,MAAM,MAAM,GAAG,IAAA,iCAAY,EAAC,cAAc,CAAC,CAAC;IAC5C,MAAM,GAAG,GAAG,GAAG,MAAM,qBAAqB,CAAC;IAE3C,MAAM,OAAO,GAAG,MAAM,IAAA,8CAAoB,EAAC;QACzC,MAAM,EAAE,cAAc,CAAC,MAAM;QAC7B,cAAc,EAAE,cAAc,CAAC,cAAc;KAC9C,CAAC,CAAC;IAEH,MAAM,MAAM,GAAG;QACb,SAAS,EAAE,OAAO,CAAC,SAAS;QAC5B,aAAa,EAAE,OAAO,CAAC,aAAa;QACpC,QAAQ,EAAE,IAAA,mCAAsB,EAAC,cAAc,CAAC,MAAM,CAAC;QACvD,kBAAkB,EAAE,IAAI;QACxB,UAAU,EAAE,oBAAoB;KACjC,CAAC;IAEF,2FAA2F;IAC3F,OAAO,IAAA,6BAAO,EAAC,GAAG,EAAE;QAClB,MAAM;KACP,CAAC,CAAC;AACL,CAAC;AAvBD,4CAuBC","sourcesContent":["/* Copyright (c) 2023 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport {\n  IInvalidateApiKeyOptions,\n  IInvalidateApiKeyResponse\n} from \"./shared/types/apiKeyType.js\";\nimport { getRegisteredAppInfo } from \"./shared/getRegisteredAppInfo.js\";\nimport { getPortalUrl } from \"@esri/arcgis-rest-portal\";\nimport { request } from \"@esri/arcgis-rest-request\";\nimport { slotForInvalidationKey } from \"./shared/helpers.js\";\n\n/**\n * Used to invalidate an API key.\n *\n * ```js\n * import { invalidateApiKey } from \"@esri/arcgis-rest-developer-credentials\";\n *\n * invalidateApiKey({\n *   itemId: ITEM_ID,\n *   authentication,\n *   apiKey: 1, // invalidate the key in slot 1\n * }).then((response) => {\n *   // => {success: true}\n * }).catch(e => {\n *   // => an exception object\n * });\n */\nexport async function invalidateApiKey(\n  requestOptions: IInvalidateApiKeyOptions\n): Promise<IInvalidateApiKeyResponse> {\n  const portal = getPortalUrl(requestOptions);\n  const url = `${portal}/oauth2/revokeToken`;\n\n  const appInfo = await getRegisteredAppInfo({\n    itemId: requestOptions.itemId,\n    authentication: requestOptions.authentication\n  });\n\n  const params = {\n    client_id: appInfo.client_id,\n    client_secret: appInfo.client_secret,\n    apiToken: slotForInvalidationKey(requestOptions.apiKey),\n    regenerateApiToken: true,\n    grant_type: \"client_credentials\"\n  };\n\n  // authentication is not being passed to the request because client_secret acts as the auth\n  return request(url, {\n    params\n  });\n}\n"]}