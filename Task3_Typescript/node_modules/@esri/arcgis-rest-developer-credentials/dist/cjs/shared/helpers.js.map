{"version":3,"file":"helpers.js","sourceRoot":"","sources":["../../../src/shared/helpers.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  IRequestOptions,\n  IAuthenticationManager\n} from \"@esri/arcgis-rest-request\";\nimport { IRegisteredAppResponse, IApp } from \"./types/appType.js\";\nimport { IApiKeyInfo } from \"./types/apiKeyType.js\";\nimport { IOAuthAppInfo } from \"./types/oAuthType.js\";\nimport { generateApiKeyToken } from \"./generateApiKeyToken.js\";\n\n/**\n * @internal\n * Encode special params value (e.g. array type...) in advance in order to make {@linkcode encodeParam} works correctly. Usage is case by case.\n */\nexport const stringifyArrays = (requestOptions: IRequestOptions) => {\n  Object.entries(requestOptions.params).forEach((entry) => {\n    const [key, value] = entry;\n    if (value.constructor.name === \"Array\") {\n      requestOptions.params[key] = JSON.stringify(value);\n    }\n  });\n};\n\n/**\n * @internal\n * Used to convert {@linkcode IRegisteredAppResponse} to {@linkcode IApp}.\n */\nexport function registeredAppResponseToApp(\n  response: IRegisteredAppResponse\n): IApp {\n  const omittedKeys = [\n    \"apnsProdCert\",\n    \"apnsSandboxCert\",\n    \"gcmApiKey\",\n    \"isBeta\",\n    \"customAppLoginShowTriage\"\n  ];\n  const dateKeys = [\"modified\", \"registered\"];\n\n  return Object.keys(response)\n    .filter((key) => !omittedKeys.includes(key))\n    .reduce((obj: any, key) => {\n      if (dateKeys.includes(key)) {\n        obj[key] = new Date((response as any)[key]);\n      } else {\n        obj[key] = (response as any)[key];\n      }\n      return obj;\n    }, {});\n}\n\n/**\n * @internal\n * Used to convert {@linkcode IApp} to {@linkcode IApiKeyInfo} only if `appType` is \"apikey\".\n */\nexport function appToApiKeyProperties(response: IApp): IApiKeyInfo {\n  delete response.client_secret;\n  delete response.redirect_uris;\n  delete response.appType;\n  delete (response as any).customAppLoginShowTriage;\n  delete response.apiKey;\n\n  return response as IApiKeyInfo;\n}\n\n/**\n * @internal\n * Used to convert {@linkcode IApp} to {@linkcode IOAuthAppInfo}.\n */\nexport function appToOAuthAppProperties(response: IApp): IOAuthAppInfo {\n  delete response.appType;\n  delete response.httpReferrers;\n  delete response.privileges;\n  delete response.apiKey;\n  delete (response as any).customAppLoginShowTriage;\n  delete response.isPersonalAPIToken;\n  delete response.apiToken1Active;\n  delete response.apiToken2Active;\n\n  return response as IOAuthAppInfo;\n}\n\n/**\n * @internal\n * Used to extract base request options from a hybrid option and exclude `params` and `authentication`.\n */\nexport function extractBaseRequestOptions<T extends IRequestOptions>(\n  options: T\n): Partial<IRequestOptions> {\n  const requestOptionsProperties: Array<keyof T> = [\n    \"credentials\",\n    \"headers\",\n    \"hideToken\",\n    \"httpMethod\",\n    \"maxUrlLength\",\n    \"portal\",\n    \"rawResponse\",\n    \"signal\",\n    \"suppressWarnings\"\n  ];\n\n  return filterKeys(options, requestOptionsProperties);\n}\n\n/**\n * @internal\n * Used to create a new object including only specified keys from another object.\n */\nexport function filterKeys<T extends object>(\n  object: T,\n  includedKeys: Array<keyof T>\n): any {\n  return includedKeys.reduce(\n    (obj: { [key: string | number | symbol]: any }, ele) => {\n      if (ele in object) {\n        obj[ele] = object[ele];\n      }\n      return obj;\n    },\n    {}\n  );\n}\n\n/**\n * Used to determine if a generated key is in slot 1 or slot 2 key. The full API key should be passed. `undefined` will be returned if the proper slot could not be identified.\n */\nexport function slotForKey(key: string) {\n  const slot = parseInt(key.substring(key.length - 10, key.length - 9));\n\n  if (slot === 1 || slot === 2) {\n    return slot;\n  }\n\n  return undefined;\n}\n\n/**\n * @internal\n * Used to determine which slot to invalidate a key in given a number or a full or patial key.\n */\nexport function slotForInvalidationKey(param: string | 1 | 2) {\n  if (param === 1 || param === 2) {\n    return param;\n  }\n\n  if (typeof param !== \"string\") {\n    return undefined;\n  }\n\n  const fullKeySlot = slotForKey(param);\n  if (fullKeySlot) {\n    return fullKeySlot;\n  }\n}\n\ninterface IGenerateApiKeyTokenOptions extends IRequestOptions {\n  authentication: IAuthenticationManager;\n}\n\n/**\n * @internal\n * Used to generate tokens in slot 1 and/or 2 of an API key.\n */\nexport function generateApiKeyTokens(\n  itemId: string,\n  slots: Array<1 | 2>,\n  requestOptions: IGenerateApiKeyTokenOptions\n) {\n  return Promise.all(\n    slots.map((slot) => {\n      return generateApiKeyToken({\n        itemId,\n        apiKey: slot,\n        ...requestOptions\n      });\n    })\n  ).then((responses) => {\n    return responses\n      .map((responses) => responses.access_token)\n      .reduce((obj, token, index) => {\n        obj[`accessToken${slotForKey(token)}`] = token;\n        return obj;\n      }, {} as { [key: string]: string });\n  });\n}\n\n/**\n * @internal\n * Convert boolean flags to an array of slots for {@linkcode generateApiKeyTokens}.\n */\nexport function generateOptionsToSlots(\n  generateToken1: boolean,\n  generateToken2: boolean\n): Array<1 | 2> {\n  const slots: Array<1 | 2> = [];\n  if (generateToken1) {\n    slots.push(1);\n  }\n  if (generateToken2) {\n    slots.push(2);\n  }\n  return slots;\n}\n\ntype expirationDateParams =\n  | {\n      apiToken1ExpirationDate: Date | -1;\n      apiToken2ExpirationDate: Date | -1;\n    }\n  | {\n      apiToken1ExpirationDate: Date | -1;\n    }\n  | {\n      apiToken2ExpirationDate: Date | -1;\n    }\n  | {};\n\n/**\n * @internal\n * Build params for updating expiration dates\n */\nexport function buildExpirationDateParams(\n  requestOptions: {\n    apiToken1ExpirationDate?: Date;\n    apiToken2ExpirationDate?: Date;\n  },\n  fillDefaults?: boolean\n): expirationDateParams {\n  const updateparams: any = {};\n  if (requestOptions.apiToken1ExpirationDate) {\n    updateparams.apiToken1ExpirationDate =\n      requestOptions.apiToken1ExpirationDate;\n  }\n\n  if (requestOptions.apiToken2ExpirationDate) {\n    updateparams.apiToken2ExpirationDate =\n      requestOptions.apiToken2ExpirationDate;\n  }\n\n  if (fillDefaults && !updateparams.apiToken1ExpirationDate) {\n    updateparams.apiToken1ExpirationDate = -1;\n  }\n\n  if (fillDefaults && !updateparams.apiToken2ExpirationDate) {\n    updateparams.apiToken2ExpirationDate = -1;\n  }\n  return updateparams;\n}\n"]}