"use strict";
/* Copyright (c) 2023 Environmental Systems Research Institute, Inc.
 * Apache-2.0 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.registerApp = void 0;
const arcgis_rest_request_1 = require("@esri/arcgis-rest-request");
const arcgis_rest_portal_1 = require("@esri/arcgis-rest-portal");
const helpers_js_1 = require("./helpers.js");
/**
 * Used to register an app. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/register-app.htm) for more information.
 *
 * Accepted app types:
 * - apikey
 * - multiple
 * - browser
 * - server
 * - native
 *
 * ```js
 * import { registerApp, IApp } from '@esri/arcgis-rest-developer-credentials';
 * import { ArcGISIdentityManager } from "@esri/arcgis-rest-request";
 *
 * const authSession: ArcGISIdentityManager = await ArcGISIdentityManager.signIn({
 *   username: "xyz_usrName",
 *   password: "xyz_pw"
 * });
 *
 * registerApp({
 *   itemId: "xyz_itemId",
 *   appType: "multiple",
 *   redirect_uris: ["http://localhost:3000/"],
 *   httpReferrers: ["http://localhost:3000/"],
 *   privileges: ["premium:user:geocode:temporary", Privileges.FeatureReport],
 *   authentication: authSession
 * }).then((registeredApp: IApp) => {
 *   // => {client_id: "xyz_id", client_secret: "xyz_secret", ...}
 * }).catch(e => {
 *   // => an exception object
 * });
 * ```
 *
 * @param requestOptions - Options for {@linkcode registerApp | registerApp()}, including necessary params to register an app and an {@linkcode ArcGISIdentityManager} authentication session.
 * @returns A Promise that will resolve to an {@linkcode IApp} object representing the newly registered app.
 */
async function registerApp(requestOptions) {
    // build params
    const options = (0, arcgis_rest_request_1.appendCustomParams)(requestOptions, [
        "itemId",
        "appType",
        "redirect_uris",
        "httpReferrers",
        "privileges"
    ]);
    // encode special params value (e.g. array type...) in advance in order to make encodeQueryString() works correctly
    (0, helpers_js_1.stringifyArrays)(options);
    const url = (0, arcgis_rest_portal_1.getPortalUrl)(options) + "/oauth2/registerApp";
    options.httpMethod = "POST";
    options.params.f = "json";
    const registeredAppResponse = await (0, arcgis_rest_request_1.request)(url, options);
    return (0, helpers_js_1.registeredAppResponseToApp)(registeredAppResponse);
}
exports.registerApp = registerApp;
//# sourceMappingURL=registerApp.js.map