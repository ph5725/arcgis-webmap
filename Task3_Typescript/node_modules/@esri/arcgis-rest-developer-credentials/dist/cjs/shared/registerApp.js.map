{"version":3,"file":"registerApp.js","sourceRoot":"","sources":["../../../src/shared/registerApp.ts"],"names":[],"mappings":";AAAA;gBACgB;;;AAEhB,mEAAwE;AACxE,iEAAwD;AAMxD,6CAA2E;AAE3E;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAmCG;AACI,KAAK,UAAU,WAAW,CAC/B,cAAmC;IAEnC,eAAe;IACf,MAAM,OAAO,GAAG,IAAA,wCAAkB,EAAC,cAAc,EAAE;QACjD,QAAQ;QACR,SAAS;QACT,eAAe;QACf,eAAe;QACf,YAAY;KACb,CAAC,CAAC;IACH,mHAAmH;IACnH,IAAA,4BAAe,EAAC,OAAO,CAAC,CAAC;IAEzB,MAAM,GAAG,GAAG,IAAA,iCAAY,EAAC,OAAO,CAAC,GAAG,qBAAqB,CAAC;IAC1D,OAAO,CAAC,UAAU,GAAG,MAAM,CAAC;IAC5B,OAAO,CAAC,MAAM,CAAC,CAAC,GAAG,MAAM,CAAC;IAE1B,MAAM,qBAAqB,GAA2B,MAAM,IAAA,6BAAO,EACjE,GAAG,EACH,OAAO,CACR,CAAC;IAEF,OAAO,IAAA,uCAA0B,EAAC,qBAAqB,CAAC,CAAC;AAC3D,CAAC;AAxBD,kCAwBC","sourcesContent":["/* Copyright (c) 2023 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport { request, appendCustomParams } from \"@esri/arcgis-rest-request\";\nimport { getPortalUrl } from \"@esri/arcgis-rest-portal\";\nimport {\n  IApp,\n  IRegisterAppOptions,\n  IRegisteredAppResponse\n} from \"./types/appType.js\";\nimport { stringifyArrays, registeredAppResponseToApp } from \"./helpers.js\";\n\n/**\n * Used to register an app. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/register-app.htm) for more information.\n *\n * Accepted app types:\n * - apikey\n * - multiple\n * - browser\n * - server\n * - native\n *\n * ```js\n * import { registerApp, IApp } from '@esri/arcgis-rest-developer-credentials';\n * import { ArcGISIdentityManager } from \"@esri/arcgis-rest-request\";\n *\n * const authSession: ArcGISIdentityManager = await ArcGISIdentityManager.signIn({\n *   username: \"xyz_usrName\",\n *   password: \"xyz_pw\"\n * });\n *\n * registerApp({\n *   itemId: \"xyz_itemId\",\n *   appType: \"multiple\",\n *   redirect_uris: [\"http://localhost:3000/\"],\n *   httpReferrers: [\"http://localhost:3000/\"],\n *   privileges: [\"premium:user:geocode:temporary\", Privileges.FeatureReport],\n *   authentication: authSession\n * }).then((registeredApp: IApp) => {\n *   // => {client_id: \"xyz_id\", client_secret: \"xyz_secret\", ...}\n * }).catch(e => {\n *   // => an exception object\n * });\n * ```\n *\n * @param requestOptions - Options for {@linkcode registerApp | registerApp()}, including necessary params to register an app and an {@linkcode ArcGISIdentityManager} authentication session.\n * @returns A Promise that will resolve to an {@linkcode IApp} object representing the newly registered app.\n */\nexport async function registerApp(\n  requestOptions: IRegisterAppOptions\n): Promise<IApp> {\n  // build params\n  const options = appendCustomParams(requestOptions, [\n    \"itemId\",\n    \"appType\",\n    \"redirect_uris\",\n    \"httpReferrers\",\n    \"privileges\"\n  ]);\n  // encode special params value (e.g. array type...) in advance in order to make encodeQueryString() works correctly\n  stringifyArrays(options);\n\n  const url = getPortalUrl(options) + \"/oauth2/registerApp\";\n  options.httpMethod = \"POST\";\n  options.params.f = \"json\";\n\n  const registeredAppResponse: IRegisteredAppResponse = await request(\n    url,\n    options\n  );\n\n  return registeredAppResponseToApp(registeredAppResponse);\n}\n"]}