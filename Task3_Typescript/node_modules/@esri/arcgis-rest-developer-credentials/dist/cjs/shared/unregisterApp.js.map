{"version":3,"file":"unregisterApp.js","sourceRoot":"","sources":["../../../src/shared/unregisterApp.ts"],"names":[],"mappings":";;;AAKA,6CAAyD;AACzD,uEAAiE;AACjE,iEAAwD;AACxD,mEAAoD;AAEpD;;;;;;;;;;;;;;;;;;;;;;;;GAwBG;AACI,KAAK,UAAU,aAAa,CACjC,cAAqC;IAErC,cAAc,CAAC,UAAU,GAAG,MAAM,CAAC;IAEnC,UAAU;IACV,MAAM,kBAAkB,GAAG,IAAA,sCAAyB,EAAC,cAAc,CAAC,CAAC;IACrE,MAAM,YAAY,mCACb,kBAAkB,KACrB,cAAc,EAAE,cAAc,CAAC,cAAc,EAC7C,MAAM,EAAE,cAAc,CAAC,MAAM,GAC9B,CAAC;IAEF,MAAM,WAAW,GAAG,MAAM,IAAA,8CAAoB,EAAC,YAAY,CAAC,CAAC;IAE7D,MAAM,QAAQ,GAAG,WAAW,CAAC,SAAS,CAAC;IAEvC,MAAM,GAAG,GACP,IAAA,iCAAY,EAAC,cAAc,CAAC,GAAG,gBAAgB,QAAQ,aAAa,CAAC;IAEvE,MAAM,qBAAqB,GAA2B,MAAM,IAAA,6BAAO,EAAC,GAAG,kCAClE,kBAAkB,KACrB,cAAc,EAAE,cAAc,CAAC,cAAc,EAC7C,MAAM,EAAE,EAAE,CAAC,EAAE,MAAM,EAAE,IACrB,CAAC;IACH,OAAO,qBAAqB,CAAC;AAC/B,CAAC;AA1BD,sCA0BC","sourcesContent":["import {\n  IGetAppInfoOptions,\n  IUnregisterAppOptions,\n  IUnregisterAppResponse\n} from \"./types/appType.js\";\nimport { extractBaseRequestOptions } from \"./helpers.js\";\nimport { getRegisteredAppInfo } from \"./getRegisteredAppInfo.js\";\nimport { getPortalUrl } from \"@esri/arcgis-rest-portal\";\nimport { request } from \"@esri/arcgis-rest-request\";\n\n/**\n * Used to unregister the app with given `itemId`. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/unregister-app.htm) for more information.\n *\n * ```js\n * import { unregisterApp, IUnregisterAppResponse } from '@esri/arcgis-rest-developer-credentials';\n * import { ArcGISIdentityManager } from \"@esri/arcgis-rest-request\";\n *\n * const authSession: ArcGISIdentityManager = await ArcGISIdentityManager.signIn({\n *   username: \"xyz_usrName\",\n *   password: \"xyz_pw\"\n * });\n *\n * unregisterApp({\n *   itemId: \"xyz_itemId\",\n *   authentication: authSession\n * }).then((unregisteredApp: IUnregisterAppResponse) => {\n *   // => {itemId: \"xyz_itemId\", success: true}\n * }).catch(e => {\n *   // => an exception object\n * });\n * ```\n *\n * @param requestOptions - Options for {@linkcode unregisterApp | unregisterApp()}, including `itemId` of which app to be un-registered and an {@linkcode ArcGISIdentityManager} authentication session.\n * @returns A Promise that will resolve to an {@linkcode IUnregisterAppResponse} object representing un-registration status.\n */\nexport async function unregisterApp(\n  requestOptions: IUnregisterAppOptions\n): Promise<IUnregisterAppResponse> {\n  requestOptions.httpMethod = \"POST\";\n\n  // get app\n  const baseRequestOptions = extractBaseRequestOptions(requestOptions);\n  const getAppOption: IGetAppInfoOptions = {\n    ...baseRequestOptions,\n    authentication: requestOptions.authentication,\n    itemId: requestOptions.itemId\n  };\n\n  const appResponse = await getRegisteredAppInfo(getAppOption);\n\n  const clientId = appResponse.client_id;\n\n  const url =\n    getPortalUrl(requestOptions) + `/oauth2/apps/${clientId}/unregister`;\n\n  const unregisterAppResponse: IUnregisterAppResponse = await request(url, {\n    ...baseRequestOptions,\n    authentication: requestOptions.authentication,\n    params: { f: \"json\" }\n  });\n  return unregisterAppResponse;\n}\n"]}