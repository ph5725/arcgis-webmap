"use strict";
/* Copyright (c) 2023 Environmental Systems Research Institute, Inc.
 * Apache-2.0 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.updateApiKey = void 0;
const getRegisteredAppInfo_js_1 = require("./shared/getRegisteredAppInfo.js");
const helpers_js_1 = require("./shared/helpers.js");
const arcgis_rest_portal_1 = require("@esri/arcgis-rest-portal");
const arcgis_rest_request_1 = require("@esri/arcgis-rest-request");
/**
 * Used to update an API key.
 *
 * Notes about `privileges` and `httpReferrers` options:
 * 1. Provided option will override corresponding old option.
 * 2. Unprovided option will not trigger corresponding option updates.
 *
 * ```js
 * import { updateApiKey, IApiKeyResponse } from '@esri/arcgis-rest-developer-credentials';
 * import { ArcGISIdentityManager } from "@esri/arcgis-rest-request";
 *
 * const authSession: ArcGISIdentityManager = await ArcGISIdentityManager.signIn({
 *   username: "xyz_usrName",
 *   password: "xyz_pw"
 * });
 *
 * const threeDaysFromToday = new Date();
 * threeDaysFromToday.setDate(threeDaysFromToday.getDate() + 3);
 * threeDaysFromToday.setHours(23, 59, 59, 999);
 *
 * updateApiKey({
 *   itemId: "xyz_itemId",
 *   privileges: ["premium:user:geocode:temporary"],
 *   httpReferrers: [], // httpReferrers will be set to be empty
 *   authentication: authSession
 *   generateToken1: true, // optional,generate a new token
 *   apiToken1ExpirationDate: threeDaysFromToday  // optional, update expiration date
 * }).then((updatedAPIKey: IApiKeyResponse) => {
 *   // => {accessToken1: "xyz_key", item: {tags: ["xyz_tag1", "xyz_tag2"], ...}, ...}
 * }).catch(e => {
 *   // => an exception object
 * });
 * ```
 *
 * @param requestOptions - Options for {@linkcode updateApiKey | updateApiKey()}, including `itemId` of which API key to be operated on, optional new `privileges`, optional new `httpReferrers` and an {@linkcode ArcGISIdentityManager} authentication session.
 * @returns A Promise that will resolve to an {@linkcode IApiKeyResponse} object representing updated API key.
 */
async function updateApiKey(requestOptions) {
    requestOptions.httpMethod = "POST";
    const baseRequestOptions = (0, helpers_js_1.extractBaseRequestOptions)(requestOptions); // get base requestOptions snapshot
    /**
     * step 1: update expiration dates if provided. Build the object up to avoid overwriting any existing properties.
     */
    if (requestOptions.apiToken1ExpirationDate ||
        requestOptions.apiToken2ExpirationDate) {
        const updateParams = (0, helpers_js_1.buildExpirationDateParams)(requestOptions);
        await (0, arcgis_rest_portal_1.updateItem)(Object.assign(Object.assign({}, baseRequestOptions), { item: Object.assign({ id: requestOptions.itemId }, updateParams), authentication: requestOptions.authentication }));
    }
    /**
     * step 2: update privileges and httpReferrers if provided. Build the object up to avoid overwriting any existing properties.
     */
    if (requestOptions.privileges || requestOptions.httpReferrers) {
        const getAppOption = Object.assign(Object.assign({}, baseRequestOptions), { authentication: requestOptions.authentication, itemId: requestOptions.itemId });
        const appResponse = await (0, getRegisteredAppInfo_js_1.getRegisteredAppInfo)(getAppOption);
        const clientId = appResponse.client_id;
        const options = (0, arcgis_rest_request_1.appendCustomParams)(Object.assign(Object.assign({}, appResponse), requestOptions), // object with the custom params to look in
        ["privileges", "httpReferrers"] // keys you want copied to the params object
        );
        options.params.f = "json";
        // encode special params value (e.g. array type...) in advance in order to make encodeQueryString() works correctly
        (0, helpers_js_1.stringifyArrays)(options);
        const url = (0, arcgis_rest_portal_1.getPortalUrl)(options) + `/oauth2/apps/${clientId}/update`;
        // Raw response from `/oauth2/apps/${clientId}/update`, apiKey not included because key is same.
        const updateResponse = await (0, arcgis_rest_request_1.request)(url, Object.assign(Object.assign({}, options), { authentication: requestOptions.authentication }));
    }
    /**
     * step 3: get the updated item info to return to the user.
     */
    const updatedItemInfo = await (0, arcgis_rest_portal_1.getItem)(requestOptions.itemId, Object.assign(Object.assign({}, baseRequestOptions), { authentication: requestOptions.authentication, params: { f: "json" } }));
    /**
     * step 4: generate tokens if requested
     */
    const generatedTokens = await (0, helpers_js_1.generateApiKeyTokens)(requestOptions.itemId, (0, helpers_js_1.generateOptionsToSlots)(requestOptions.generateToken1, requestOptions.generateToken2), Object.assign(Object.assign({}, baseRequestOptions), { authentication: requestOptions.authentication }));
    /**
     * step 5: get updated registered app info
     */
    const updatedRegisteredAppResponse = await (0, getRegisteredAppInfo_js_1.getRegisteredAppInfo)(Object.assign(Object.assign({}, baseRequestOptions), { itemId: requestOptions.itemId, authentication: requestOptions.authentication }));
    return Object.assign(Object.assign(Object.assign({}, generatedTokens), (0, helpers_js_1.appToApiKeyProperties)(updatedRegisteredAppResponse)), { item: updatedItemInfo });
}
exports.updateApiKey = updateApiKey;
//# sourceMappingURL=updateApiKey.js.map