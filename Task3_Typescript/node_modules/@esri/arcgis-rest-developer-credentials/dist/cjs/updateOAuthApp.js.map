{"version":3,"file":"updateOAuthApp.js","sourceRoot":"","sources":["../../src/updateOAuthApp.ts"],"names":[],"mappings":";AAAA;gBACgB;;;AAEhB,oDAK6B;AAC7B,iEAAiE;AACjE,mEAAwE;AAOxE,8EAAwE;AAExE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA6BG;AACI,KAAK,UAAU,cAAc,CAClC,cAAmC;IAEnC,cAAc,CAAC,UAAU,GAAG,MAAM,CAAC;IAEnC,UAAU;IACV,MAAM,kBAAkB,GAAG,IAAA,sCAAyB,EAAC,cAAc,CAAC,CAAC,CAAC,mCAAmC;IACzG,MAAM,YAAY,mCACb,kBAAkB,KACrB,cAAc,EAAE,cAAc,CAAC,cAAc,EAC7C,MAAM,EAAE,cAAc,CAAC,MAAM,GAC9B,CAAC;IAEF,MAAM,WAAW,GAAG,MAAM,IAAA,8CAAoB,EAAC,YAAY,CAAC,CAAC;IAE7D,IAAI,WAAW,CAAC,OAAO,KAAK,QAAQ,EAAE;QACpC,MAAM,IAAI,KAAK,CAAC,+BAA+B,CAAC,CAAC;KAClD;IAED,MAAM,QAAQ,GAAG,WAAW,CAAC,SAAS,CAAC;IACvC,MAAM,OAAO,GAAG,IAAA,wCAAkB,kCAAM,WAAW,GAAK,cAAc,GAAI;QACxE,eAAe;KAChB,CAAC,CAAC;IACH,OAAO,CAAC,MAAM,CAAC,CAAC,GAAG,MAAM,CAAC;IAC1B,OAAO,CAAC,MAAM,CAAC,OAAO,GAAG,UAAU,CAAC;IAEpC,mHAAmH;IACnH,IAAA,4BAAe,EAAC,OAAO,CAAC,CAAC;IAEzB,MAAM,GAAG,GAAG,IAAA,iCAAY,EAAC,OAAO,CAAC,GAAG,gBAAgB,QAAQ,SAAS,CAAC;IAEtE,uDAAuD;IACvD,MAAM,cAAc,GAA2B,MAAM,IAAA,6BAAO,EAAC,GAAG,kCAC3D,OAAO,KACV,cAAc,EAAE,cAAc,CAAC,cAAc,IAC7C,CAAC;IAEH,MAAM,GAAG,GAAS,IAAA,uCAA0B,EAAC,cAAc,CAAC,CAAC;IAE7D,MAAM,QAAQ,GAAG,MAAM,IAAA,4BAAO,EAAC,cAAc,CAAC,MAAM,kCAC/C,kBAAkB,KACrB,cAAc,EAAE,cAAc,CAAC,cAAc,EAC7C,MAAM,EAAE,EAAE,CAAC,EAAE,MAAM,EAAE,IACrB,CAAC;IAEH,uCACK,IAAA,oCAAuB,EAAC,GAAG,CAAC,KAC/B,IAAI,EAAE,QAAQ,IACd;AACJ,CAAC;AAjDD,wCAiDC","sourcesContent":["/* Copyright (c) 2023 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport {\n  extractBaseRequestOptions,\n  stringifyArrays,\n  registeredAppResponseToApp,\n  appToOAuthAppProperties\n} from \"./shared/helpers.js\";\nimport { getItem, getPortalUrl } from \"@esri/arcgis-rest-portal\";\nimport { appendCustomParams, request } from \"@esri/arcgis-rest-request\";\nimport {\n  IApp,\n  IGetAppInfoOptions,\n  IRegisteredAppResponse\n} from \"./shared/types/appType.js\";\nimport { IOAuthApp, IUpdateOAuthOptions } from \"./shared/types/oAuthType.js\";\nimport { getRegisteredAppInfo } from \"./shared/getRegisteredAppInfo.js\";\n\n/**\n * Used to update an OAuth2.0 app.\n *\n * Notes about `redirect_uris` options:\n * 1. Provided option will override corresponding old option.\n * 2. Unprovided option will not trigger corresponding option updates.\n *\n * ```js\n * import { updateOAuthApp, IOAuthApp } from '@esri/arcgis-rest-developer-credentials';\n * import { ArcGISIdentityManager } from \"@esri/arcgis-rest-request\";\n *\n * const authSession: ArcGISIdentityManager = await ArcGISIdentityManager.signIn({\n *   username: \"xyz_usrName\",\n *   password: \"xyz_pw\"\n * });\n *\n * updateOAuthApp({\n *   itemId: \"xyz_itemId\",\n *   authentication: authSession\n * }).then((updatedOAuthApp: IOAuthApp) => {\n *   // => This OAuth app will be not be updated because its redirect_uris is not provided.\n *   // => {redirect_uris: [\"http://localhost:3000/\"], item: {tags: [\"xyz_tag1\", \"xyz_tag2\"], ...}, ...}\n * }).catch(e => {\n *   // => an exception object\n * });\n * ```\n *\n * @param requestOptions - Options for {@linkcode updateOAuthApp | updateOAuthApp()}, including `itemId` of which OAuth app to be operated on, optional new `redirect_uris` and an {@linkcode ArcGISIdentityManager} authentication session.\n * @returns A Promise that will resolve to an {@linkcode IOAuthApp} object representing updated OAuth app.\n */\nexport async function updateOAuthApp(\n  requestOptions: IUpdateOAuthOptions\n): Promise<IOAuthApp> {\n  requestOptions.httpMethod = \"POST\";\n\n  // get app\n  const baseRequestOptions = extractBaseRequestOptions(requestOptions); // get base requestOptions snapshot\n  const getAppOption: IGetAppInfoOptions = {\n    ...baseRequestOptions,\n    authentication: requestOptions.authentication,\n    itemId: requestOptions.itemId\n  };\n\n  const appResponse = await getRegisteredAppInfo(getAppOption);\n\n  if (appResponse.appType === \"apikey\") {\n    throw new Error(\"Item is not an OAuth 2.0 app.\");\n  }\n\n  const clientId = appResponse.client_id;\n  const options = appendCustomParams({ ...appResponse, ...requestOptions }, [\n    \"redirect_uris\"\n  ]);\n  options.params.f = \"json\";\n  options.params.appType = \"multiple\";\n\n  // encode special params value (e.g. array type...) in advance in order to make encodeQueryString() works correctly\n  stringifyArrays(options);\n\n  const url = getPortalUrl(options) + `/oauth2/apps/${clientId}/update`;\n\n  // Raw response from `/oauth2/apps/${clientId}/update`.\n  const updateResponse: IRegisteredAppResponse = await request(url, {\n    ...options,\n    authentication: requestOptions.authentication\n  });\n\n  const app: IApp = registeredAppResponseToApp(updateResponse);\n\n  const itemInfo = await getItem(requestOptions.itemId, {\n    ...baseRequestOptions,\n    authentication: requestOptions.authentication,\n    params: { f: \"json\" }\n  });\n\n  return {\n    ...appToOAuthAppProperties(app),\n    item: itemInfo\n  };\n}\n"]}