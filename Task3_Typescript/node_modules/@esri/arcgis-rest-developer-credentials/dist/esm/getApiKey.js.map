{"version":3,"file":"getApiKey.js","sourceRoot":"","sources":["../../src/getApiKey.ts"],"names":[],"mappings":"AAAA;gBACgB;AAEhB,OAAO,EAAE,oBAAoB,EAAE,MAAM,kCAAkC,CAAC;AAKxE,OAAO,EAAE,OAAO,EAAE,MAAM,0BAA0B,CAAC;AACnD,OAAO,EACL,qBAAqB,EACrB,yBAAyB,EAC1B,MAAM,qBAAqB,CAAC;AAE7B;;;;;;;;;;;;;;;;;;;;;;;;GAwBG;AACH,MAAM,CAAC,KAAK,UAAU,SAAS,CAC7B,cAAiC;IAEjC,MAAM,WAAW,GAAG,MAAM,oBAAoB,CAAC,cAAc,CAAC,CAAC;IAE/D,MAAM,QAAQ,GAAG,MAAM,OAAO,CAAC,cAAc,CAAC,MAAM,kCAC/C,yBAAyB,CAAC,cAAc,CAAC,KAC5C,cAAc,EAAE,cAAc,CAAC,cAAc,IAC7C,CAAC;IAEH,uCACK,qBAAqB,CAAC,WAAW,CAAC,KACrC,IAAI,EAAE,QAAQ,IACd;AACJ,CAAC","sourcesContent":["/* Copyright (c) 2023 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport { getRegisteredAppInfo } from \"./shared/getRegisteredAppInfo.js\";\nimport {\n  IApiKeyResponse,\n  IGetApiKeyOptions\n} from \"./shared/types/apiKeyType.js\";\nimport { getItem } from \"@esri/arcgis-rest-portal\";\nimport {\n  appToApiKeyProperties,\n  extractBaseRequestOptions\n} from \"./shared/helpers.js\";\n\n/**\n * Used to retrieve the API key with given `itemId`. See the [security and authentication](https://developers.arcgis.com/documentation/mapping-apis-and-services/security/api-keys/) for more information about API key.\n *\n * ```js\n * import { getApiKey, IApiKeyResponse } from '@esri/arcgis-rest-developer-credentials';\n * import { ArcGISIdentityManager } from \"@esri/arcgis-rest-request\";\n *\n * const authSession: ArcGISIdentityManager = await ArcGISIdentityManager.signIn({\n *   username: \"xyz_usrName\",\n *   password: \"xyz_pw\"\n * });\n *\n * getApiKey({\n *   itemId: \"xyz_itemId\",\n *   authentication: authSession\n * }).then((retrievedAPIKey: IApiKeyResponse) => {\n *   // => {apiKey: \"xyz_key\", item: {tags: [\"xyz_tag1\", \"xyz_tag2\"], ...}, ...}\n * }).catch(e => {\n *   // => an exception object\n * });\n * ```\n *\n * @param requestOptions - Options for {@linkcode getApiKey | getApiKey()}, including `itemId` of which API key to retrieve and an {@linkcode ArcGISIdentityManager} authentication session.\n * @returns A Promise that will resolve to an {@linkcode IApiKeyResponse} object representing successfully retrieved API key.\n */\nexport async function getApiKey(\n  requestOptions: IGetApiKeyOptions\n): Promise<IApiKeyResponse> {\n  const appResponse = await getRegisteredAppInfo(requestOptions);\n\n  const itemInfo = await getItem(requestOptions.itemId, {\n    ...extractBaseRequestOptions(requestOptions),\n    authentication: requestOptions.authentication\n  });\n\n  return {\n    ...appToApiKeyProperties(appResponse),\n    item: itemInfo\n  };\n}\n"]}