{"version":3,"file":"getRegisteredAppInfo.js","sourceRoot":"","sources":["../../../src/shared/getRegisteredAppInfo.ts"],"names":[],"mappings":"AAAA;gBACgB;AAChB,OAAO,EAAE,OAAO,EAAE,MAAM,2BAA2B,CAAC;AACpD,OAAO,EAAE,YAAY,EAAE,MAAM,0BAA0B,CAAC;AAOxD,OAAO,EAAE,0BAA0B,EAAE,MAAM,cAAc,CAAC;AAE1D;;;;;;;;;;;;;;;;;;;;;;;;GAwBG;AACH,MAAM,CAAC,KAAK,UAAU,oBAAoB,CACxC,cAAkC;IAElC,MAAM,QAAQ,GAAG,MAAM,cAAc,CAAC,cAAc,CAAC,WAAW,EAAE,CAAC;IACnE,MAAM,GAAG,GACP,YAAY,CAAC,cAAc,CAAC;QAC5B,kBAAkB,QAAQ,UAAU,cAAc,CAAC,MAAM,oBAAoB,CAAC;IAChF,cAAc,CAAC,UAAU,GAAG,MAAM,CAAC;IAEnC,MAAM,qBAAqB,GAA2B,MAAM,OAAO,CAAC,GAAG,kCAClE,cAAc,KACjB,MAAM,EAAE,EAAE,CAAC,EAAE,MAAM,EAAE,IACrB,CAAC;IAEH,OAAO,0BAA0B,CAAC,qBAAqB,CAAC,CAAC;AAC3D,CAAC","sourcesContent":["/* Copyright (c) 2023 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\nimport { request } from \"@esri/arcgis-rest-request\";\nimport { getPortalUrl } from \"@esri/arcgis-rest-portal\";\n\nimport {\n  IRegisteredAppResponse,\n  IGetAppInfoOptions,\n  IApp\n} from \"./types/appType.js\";\nimport { registeredAppResponseToApp } from \"./helpers.js\";\n\n/**\n * Used to retrieve registered app info. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/registered-app-info.htm) for more information.\n *\n * ```js\n * import { getRegisteredAppInfo, IApp } from '@esri/arcgis-rest-developer-credentials';\n * import { ArcGISIdentityManager } from \"@esri/arcgis-rest-request\";\n *\n * const authSession: ArcGISIdentityManager = await ArcGISIdentityManager.signIn({\n *   username: \"xyz_usrName\",\n *   password: \"xyz_pw\"\n * });\n *\n * getRegisteredAppInfo({\n *   itemId: \"xyz_itemId\",\n *   authentication: authSession\n * }).then((registeredApp: IApp) => {\n *   // => {client_id: \"xyz_id\", client_secret: \"xyz_secret\", ...}\n * }).catch(e => {\n *   // => an exception object\n * });\n * ```\n *\n * @param requestOptions - Options for {@linkcode getRegisteredAppInfo | getRegisteredAppInfo()}, including an itemId of which app to retrieve and an {@linkcode ArcGISIdentityManager} authentication session.\n * @returns A Promise that will resolve to an {@linkcode IApp} object representing successfully retrieved app.\n */\nexport async function getRegisteredAppInfo(\n  requestOptions: IGetAppInfoOptions\n): Promise<IApp> {\n  const userName = await requestOptions.authentication.getUsername();\n  const url =\n    getPortalUrl(requestOptions) +\n    `/content/users/${userName}/items/${requestOptions.itemId}/registeredAppInfo`;\n  requestOptions.httpMethod = \"POST\";\n\n  const registeredAppResponse: IRegisteredAppResponse = await request(url, {\n    ...requestOptions,\n    params: { f: \"json\" }\n  });\n\n  return registeredAppResponseToApp(registeredAppResponse);\n}\n"]}