import { IApiKeyResponse, IUpdateApiKeyOptions } from "./shared/types/apiKeyType.js";
/**
 * Used to update an API key.
 *
 * Notes about `privileges` and `httpReferrers` options:
 * 1. Provided option will override corresponding old option.
 * 2. Unprovided option will not trigger corresponding option updates.
 *
 * ```js
 * import { updateApiKey, IApiKeyResponse } from '@esri/arcgis-rest-developer-credentials';
 * import { ArcGISIdentityManager } from "@esri/arcgis-rest-request";
 *
 * const authSession: ArcGISIdentityManager = await ArcGISIdentityManager.signIn({
 *   username: "xyz_usrName",
 *   password: "xyz_pw"
 * });
 *
 * const threeDaysFromToday = new Date();
 * threeDaysFromToday.setDate(threeDaysFromToday.getDate() + 3);
 * threeDaysFromToday.setHours(23, 59, 59, 999);
 *
 * updateApiKey({
 *   itemId: "xyz_itemId",
 *   privileges: ["premium:user:geocode:temporary"],
 *   httpReferrers: [], // httpReferrers will be set to be empty
 *   authentication: authSession
 *   generateToken1: true, // optional,generate a new token
 *   apiToken1ExpirationDate: threeDaysFromToday  // optional, update expiration date
 * }).then((updatedAPIKey: IApiKeyResponse) => {
 *   // => {accessToken1: "xyz_key", item: {tags: ["xyz_tag1", "xyz_tag2"], ...}, ...}
 * }).catch(e => {
 *   // => an exception object
 * });
 * ```
 *
 * @param requestOptions - Options for {@linkcode updateApiKey | updateApiKey()}, including `itemId` of which API key to be operated on, optional new `privileges`, optional new `httpReferrers` and an {@linkcode ArcGISIdentityManager} authentication session.
 * @returns A Promise that will resolve to an {@linkcode IApiKeyResponse} object representing updated API key.
 */
export declare function updateApiKey(requestOptions: IUpdateApiKeyOptions): Promise<IApiKeyResponse>;
