import { IOAuthApp, IUpdateOAuthOptions } from "./shared/types/oAuthType.js";
/**
 * Used to update an OAuth2.0 app.
 *
 * Notes about `redirect_uris` options:
 * 1. Provided option will override corresponding old option.
 * 2. Unprovided option will not trigger corresponding option updates.
 *
 * ```js
 * import { updateOAuthApp, IOAuthApp } from '@esri/arcgis-rest-developer-credentials';
 * import { ArcGISIdentityManager } from "@esri/arcgis-rest-request";
 *
 * const authSession: ArcGISIdentityManager = await ArcGISIdentityManager.signIn({
 *   username: "xyz_usrName",
 *   password: "xyz_pw"
 * });
 *
 * updateOAuthApp({
 *   itemId: "xyz_itemId",
 *   authentication: authSession
 * }).then((updatedOAuthApp: IOAuthApp) => {
 *   // => This OAuth app will be not be updated because its redirect_uris is not provided.
 *   // => {redirect_uris: ["http://localhost:3000/"], item: {tags: ["xyz_tag1", "xyz_tag2"], ...}, ...}
 * }).catch(e => {
 *   // => an exception object
 * });
 * ```
 *
 * @param requestOptions - Options for {@linkcode updateOAuthApp | updateOAuthApp()}, including `itemId` of which OAuth app to be operated on, optional new `redirect_uris` and an {@linkcode ArcGISIdentityManager} authentication session.
 * @returns A Promise that will resolve to an {@linkcode IOAuthApp} object representing updated OAuth app.
 */
export declare function updateOAuthApp(requestOptions: IUpdateOAuthOptions): Promise<IOAuthApp>;
