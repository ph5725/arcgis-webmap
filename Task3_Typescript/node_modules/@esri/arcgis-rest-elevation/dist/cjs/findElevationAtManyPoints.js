"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.findElevationAtManyPoints = void 0;
const arcgis_rest_request_1 = require("@esri/arcgis-rest-request");
const utils_js_1 = require("./utils.js");
/**
 * This method returns elevations in meters at given longitudes and latitudes
 * within the WGS84 coordinate system. The order of the points returned by this
 * request will be the same as the order of the points passed in the coordinates
 * parameter.
 *
 * If the distance between the furthest West and furthest East coordinate or
 * the furthest North and furthest South coordinate exceeds 50km, the service
 * will return a 400 HTTP response as the distance between these points is too
 * large.
 *
 * By default the elevation is measured with respect to the Earth's mean sea level.
 * It takes into account the local variations in gravity and provides a consistent
 * vertical reference.
 *
 * If the relativeTo query parameter is set to `ellipsoid`, the elevation will be
 * measured with respect to the ellipsoid. This is a mathematical model that
 * approximates the shape of the Earth. It does not consider local variations
 * in gravity and is commonly used in GPS positioning.
 *
 * ```
 * import { findElevationAtManyPoints } from "@esri/arcgis-rest-elevation";
 * import { ApiKeyManager } from "@esri/arcgis-rest-request";
 *
 * const results = await findElevationAtManyPoints({
 *   coordinates: [[31.134167, 29.979167], [31.130833, 29.976111], [31.128333, 29.9725]],
 *   authentication: ApiKeyManager.fromKey("YOUR_ACCESS_TOKEN");
 * });
 *
 * console.log(results)
 * ```
 */
function findElevationAtManyPoints(requestOptions) {
    const options = (0, arcgis_rest_request_1.appendCustomParams)(requestOptions, ["relativeTo"], Object.assign({}, requestOptions));
    options.params.coordinates = JSON.stringify(requestOptions.coordinates);
    return (0, arcgis_rest_request_1.request)(`${utils_js_1.baseUrl}/elevation/at-many-points`, Object.assign({}, options)).then((response) => {
        const r = Object.assign({}, response);
        return r;
    });
}
exports.findElevationAtManyPoints = findElevationAtManyPoints;
//# sourceMappingURL=findElevationAtManyPoints.js.map