{"version":3,"file":"findElevationAtManyPoints.js","sourceRoot":"","sources":["../../src/findElevationAtManyPoints.ts"],"names":[],"mappings":"AAAA,OAAO,EACL,OAAO,EACP,kBAAkB,EAEnB,MAAM,2BAA2B,CAAC;AAGnC,OAAO,EAAE,OAAO,EAAE,MAAM,YAAY,CAAC;AAyBrC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA+BG;AACH,MAAM,UAAU,yBAAyB,CACvC,cAAiD;IAEjD,MAAM,OAAO,GAAQ,kBAAkB,CACrC,cAAc,EACd,CAAC,YAAY,CAAC,oBAET,cAAc,EAEpB,CAAC;IAEF,OAAO,CAAC,MAAM,CAAC,WAAW,GAAG,IAAI,CAAC,SAAS,CAAC,cAAc,CAAC,WAAW,CAAC,CAAC;IAExE,OACE,OAAO,CAAC,GAAG,OAAO,2BAA2B,oBACxC,OAAO,EAEb,CAAC,IAAI,CAAC,CAAC,QAAQ,EAAE,EAAE;QAClB,MAAM,CAAC,qBACF,QAAQ,CACZ,CAAC;QAEF,OAAO,CAAC,CAAC;IACX,CAAC,CAAC,CAAC;AACL,CAAC","sourcesContent":["import {\n  request,\n  appendCustomParams,\n  IRequestOptions\n} from \"@esri/arcgis-rest-request\";\n\nimport { operations } from \"./openapi-types.js\";\nimport { baseUrl } from \"./utils.js\";\n\n// determine the list of allowed params we want to allow as options\n// this should match the array given to appendCustomParams below\ntype queryParams = Pick<\n  operations[\"ElevationAtManyPointsPost\"][\"requestBody\"][\"content\"][\"application/json\"],\n  \"coordinates\" | \"relativeTo\"\n>;\n\n// get the correct type of the response format\ntype successResponse =\n  operations[\"ElevationAtManyPointsPost\"][\"responses\"][\"200\"][\"content\"][\"application/json\"];\n\n/**\n * The response format for {@linkcode findElevationAtPoint};\n */\nexport interface IFindElevationAtManyPointsResponse extends successResponse {}\n\n/**\n * Options for {@linkcode findElevationAtPoint}.\n */\nexport interface IFindElevationAtManyPointsOptions\n  extends Omit<IRequestOptions, \"httpMethod\" | \"f\">,\n    queryParams {}\n\n/**\n * This method returns elevations in meters at given longitudes and latitudes\n * within the WGS84 coordinate system. The order of the points returned by this\n * request will be the same as the order of the points passed in the coordinates\n * parameter.\n *\n * If the distance between the furthest West and furthest East coordinate or\n * the furthest North and furthest South coordinate exceeds 50km, the service\n * will return a 400 HTTP response as the distance between these points is too\n * large.\n *\n * By default the elevation is measured with respect to the Earth's mean sea level.\n * It takes into account the local variations in gravity and provides a consistent\n * vertical reference.\n *\n * If the relativeTo query parameter is set to `ellipsoid`, the elevation will be\n * measured with respect to the ellipsoid. This is a mathematical model that\n * approximates the shape of the Earth. It does not consider local variations\n * in gravity and is commonly used in GPS positioning.\n *\n * ```\n * import { findElevationAtManyPoints } from \"@esri/arcgis-rest-elevation\";\n * import { ApiKeyManager } from \"@esri/arcgis-rest-request\";\n *\n * const results = await findElevationAtManyPoints({\n *   coordinates: [[31.134167, 29.979167], [31.130833, 29.976111], [31.128333, 29.9725]],\n *   authentication: ApiKeyManager.fromKey(\"YOUR_ACCESS_TOKEN\");\n * });\n *\n * console.log(results)\n * ```\n */\nexport function findElevationAtManyPoints(\n  requestOptions: IFindElevationAtManyPointsOptions\n): Promise<IFindElevationAtManyPointsResponse> {\n  const options: any = appendCustomParams<IFindElevationAtManyPointsOptions>(\n    requestOptions,\n    [\"relativeTo\"],\n    {\n      ...requestOptions\n    }\n  );\n\n  options.params.coordinates = JSON.stringify(requestOptions.coordinates);\n\n  return (\n    request(`${baseUrl}/elevation/at-many-points`, {\n      ...options\n    }) as Promise<successResponse>\n  ).then((response) => {\n    const r: IFindElevationAtManyPointsResponse = {\n      ...response\n    };\n\n    return r;\n  });\n}\n"]}