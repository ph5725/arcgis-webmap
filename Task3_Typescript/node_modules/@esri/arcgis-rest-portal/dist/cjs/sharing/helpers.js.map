{"version":3,"file":"helpers.js","sourceRoot":"","sources":["../../../src/sharing/helpers.ts"],"names":[],"mappings":";AAAA;gBACgB;;;AAQhB,iEAAyD;AACzD,6CAA4C;AAoB5C,SAAgB,aAAa,CAC3B,cAA+B,EAC/B,QAAiB;IAEjB,MAAM,gBAAgB,GACpB,QAAQ,IAAK,cAAc,CAAC,cAAsB,CAAC,QAAQ,CAAC,CAAC,kGAAkG;IACjK,MAAM,KAAK,GAAG,cAAc,CAAC,KAAK,IAAI,gBAAgB,CAAC;IACvD,OAAO,GAAG,IAAA,gCAAY,EAAC,cAAc,CAAC,kBAAkB,kBAAkB,CACxE,KAAK,CACN,UAAU,cAAc,CAAC,EAAE,QAAQ,CAAC;AACvC,CAAC;AAVD,sCAUC;AAED,SAAgB,WAAW,CACzB,cAA+B,EAC/B,QAAiB;IAEjB,MAAM,gBAAgB,GACpB,QAAQ,IAAK,cAAc,CAAC,cAAsB,CAAC,QAAQ,CAAC,CAAC,kGAAkG;IACjK,MAAM,KAAK,GAAG,cAAc,CAAC,KAAK,IAAI,gBAAgB,CAAC;IACvD,OAAO,KAAK,KAAK,gBAAgB,CAAC;AACpC,CAAC;AARD,kCAQC;AAED;;;;GAIG;AACH,SAAgB,UAAU,CACxB,cAA4C;IAE5C,OAAO,cAAc,CAAC,cAAc,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC,CAAC,IAAW,EAAE,EAAE;QAClE,OAAO,IAAI,IAAI,IAAI,CAAC,IAAI,KAAK,WAAW,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC;IAC3D,CAAC,CAAC,CAAC;AACL,CAAC;AAND,gCAMC;AAED;;;;;;GAMG;AACH,SAAgB,iBAAiB,CAC/B,cAAoC;IAEpC,qBAAqB;IACrB,OAAO,IAAA,iBAAQ,EAAC,cAAc,CAAC,OAAO,EAAE,cAAc,CAAC;SACpD,IAAI,CAAC,CAAC,KAAa,EAAE,EAAE;QACtB,OAAO,KAAK,CAAC,cAAc,CAAC,UAAU,CAAC;IACzC,CAAC,CAAC;SACD,KAAK,CAAC,GAAG,EAAE;QACV,OAAO,MAAyB,CAAC;IACnC,CAAC,CAAC,CAAC;AACP,CAAC;AAXD,8CAWC","sourcesContent":["/* Copyright (c) 2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport {\n  IAuthenticatedRequestOptions,\n  IGroup,\n  IUser,\n  GroupMembership\n} from \"@esri/arcgis-rest-request\";\nimport { getPortalUrl } from \"../util/get-portal-url.js\";\nimport { getGroup } from \"../groups/get.js\";\nimport { getSelf } from \"../util/get-portal.js\";\n\nexport interface ISharingOptions extends IAuthenticatedRequestOptions {\n  /**\n   * Unique identifier for the item.\n   */\n  id: string;\n  /**\n   * Item owner, if different from the authenticated user.\n   */\n  owner?: string;\n}\n\nexport interface ISharingResponse {\n  notSharedWith?: string[];\n  notUnsharedFrom?: string[];\n  itemId: string;\n}\n\nexport function getSharingUrl(\n  requestOptions: ISharingOptions,\n  username?: string\n): string {\n  const providedUsername =\n    username || (requestOptions.authentication as any).username; // as any workaround for backward compatibility for discovering username from provided auth method\n  const owner = requestOptions.owner || providedUsername;\n  return `${getPortalUrl(requestOptions)}/content/users/${encodeURIComponent(\n    owner\n  )}/items/${requestOptions.id}/share`;\n}\n\nexport function isItemOwner(\n  requestOptions: ISharingOptions,\n  username?: string\n): boolean {\n  const providedUsername =\n    username || (requestOptions.authentication as any).username; // as any workaround for backward compatibility for discovering username from provided auth method\n  const owner = requestOptions.owner || providedUsername;\n  return owner === providedUsername;\n}\n\n/**\n * Check it the user is a full org_admin\n * @param requestOptions\n * @returns Promise resolving in a boolean indicating if the user is an ArcGIS Organization administrator\n */\nexport function isOrgAdmin(\n  requestOptions: IAuthenticatedRequestOptions\n): Promise<boolean> {\n  return requestOptions.authentication.getUser().then((user: IUser) => {\n    return user && user.role === \"org_admin\" && !user.roleId;\n  });\n}\n\n/**\n * Get the User Membership for a particular group. Use this if all you have is the groupId.\n * If you have the group object, check the `userMembership.memberType` property instead of calling this method.\n *\n * @param requestOptions\n * @returns A Promise that resolves with \"owner\" | \"admin\" | \"member\" | \"none\"\n */\nexport function getUserMembership(\n  requestOptions: IGroupSharingOptions\n): Promise<GroupMembership> {\n  // fetch the group...\n  return getGroup(requestOptions.groupId, requestOptions)\n    .then((group: IGroup) => {\n      return group.userMembership.memberType;\n    })\n    .catch(() => {\n      return \"none\" as GroupMembership;\n    });\n}\n\nexport interface IGroupSharingOptions extends ISharingOptions {\n  /**\n   * Group identifier\n   */\n  groupId: string;\n  confirmItemControl?: boolean;\n}\n"]}