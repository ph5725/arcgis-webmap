{"version":3,"file":"invitation.js","sourceRoot":"","sources":["../../../src/users/invitation.ts"],"names":[],"mappings":";AAAA;gBACgB;;;AAEhB,mEAImC;AAEnC,iEAAyD;AACzD,yEAAkE;AA4BlE;;;;;;;;;;;;GAYG;AACI,KAAK,UAAU,kBAAkB,CACtC,cAA4C;IAE5C,IAAI,OAAO,GAAG,EAAE,UAAU,EAAE,KAAK,EAAkC,CAAC;IACpE,MAAM,QAAQ,GAAG,MAAM,IAAA,yCAAiB,EAAC,cAAc,CAAC,CAAC;IACzD,MAAM,SAAS,GAAG,IAAA,gCAAY,EAAC,cAAc,CAAC,CAAC;IAC/C,MAAM,GAAG,GAAG,GAAG,SAAS,oBAAoB,QAAQ,cAAc,CAAC;IACnE,OAAO,mCAAQ,cAAc,GAAK,OAAO,CAAE,CAAC;IAE5C,mBAAmB;IACnB,OAAO,IAAA,6BAAO,EAAC,GAAG,EAAE,OAAO,CAAC,CAAC;AAC/B,CAAC;AAXD,gDAWC;AAOD;;;;;;;;;;;;;;;GAeG;AACI,KAAK,UAAU,iBAAiB,CACrC,cAAyC;IAEzC,MAAM,QAAQ,GAAG,MAAM,IAAA,yCAAiB,EAAC,cAAc,CAAC,CAAC;IACzD,MAAM,SAAS,GAAG,IAAA,gCAAY,EAAC,cAAc,CAAC,CAAC;IAC/C,MAAM,GAAG,GAAG,GAAG,SAAS,oBAAoB,QAAQ,gBAAgB,cAAc,CAAC,YAAY,EAAE,CAAC;IAElG,IAAI,OAAO,GAAG,EAAE,UAAU,EAAE,KAAK,EAA+B,CAAC;IACjE,OAAO,mCAAQ,cAAc,GAAK,OAAO,CAAE,CAAC;IAE5C,mBAAmB;IACnB,OAAO,IAAA,6BAAO,EAAC,GAAG,EAAE,OAAO,CAAC,CAAC;AAC/B,CAAC;AAZD,8CAYC;AAED;;;;;;;;;;;;;;;GAeG;AACI,KAAK,UAAU,gBAAgB,CACpC,cAAyC;IAOzC,MAAM,QAAQ,GAAG,MAAM,IAAA,yCAAiB,EAAC,cAAc,CAAC,CAAC;IACzD,MAAM,SAAS,GAAG,IAAA,gCAAY,EAAC,cAAc,CAAC,CAAC;IAC/C,MAAM,GAAG,GAAG,GAAG,SAAS,oBAAoB,QAAQ,gBAAgB,cAAc,CAAC,YAAY,SAAS,CAAC;IAEzG,MAAM,OAAO,qBAAmC,cAAc,CAAE,CAAC;IACjE,OAAO,IAAA,6BAAO,EAAC,GAAG,EAAE,OAAO,CAAC,CAAC;AAC/B,CAAC;AAdD,4CAcC;AAED;;;;;;;;;;;;;;;GAeG;AACI,KAAK,UAAU,iBAAiB,CACrC,cAAyC;IAOzC,MAAM,QAAQ,GAAG,MAAM,IAAA,yCAAiB,EAAC,cAAc,CAAC,CAAC;IACzD,MAAM,SAAS,GAAG,IAAA,gCAAY,EAAC,cAAc,CAAC,CAAC;IAC/C,MAAM,GAAG,GAAG,GAAG,SAAS,oBAAoB,QAAQ,gBAAgB,cAAc,CAAC,YAAY,UAAU,CAAC;IAE1G,MAAM,OAAO,qBAAmC,cAAc,CAAE,CAAC;IACjE,OAAO,IAAA,6BAAO,EAAC,GAAG,EAAE,OAAO,CAAC,CAAC;AAC/B,CAAC;AAdD,8CAcC","sourcesContent":["/* Copyright (c) 2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport {\n  request,\n  IAuthenticatedRequestOptions,\n  IGroup\n} from \"@esri/arcgis-rest-request\";\n\nimport { getPortalUrl } from \"../util/get-portal-url.js\";\nimport { determineUsername } from \"../util/determine-username.js\";\n\nexport interface IInvitation {\n  id: string;\n  targetType: string;\n  targetId: string;\n  received: number;\n  accepted: boolean;\n  mustApprove: boolean;\n  email: string;\n  role: string;\n  type: string;\n  dateAccepted: number;\n  expiration: number;\n  created: number;\n  username: string;\n  fromUsername: {\n    username: string;\n    fullname?: string;\n  };\n  group?: IGroup;\n  groupId?: string;\n}\n\nexport interface IInvitationResult {\n  userInvitations: IInvitation[];\n}\n\n/**\n * Get all invitations for a user. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/user-invitations.htm) for more information.\n *\n * ```js\n * import { getUserInvitations } from '@esri/arcgis-rest-portal';\n *\n * getUserInvitations({ authentication })\n *   .then(response) // response.userInvitations.length => 3\n * ```\n *\n * @param requestOptions - options to pass through in the request\n * @returns A Promise that will resolve with the user's invitations\n */\nexport async function getUserInvitations(\n  requestOptions: IAuthenticatedRequestOptions\n): Promise<IInvitationResult> {\n  let options = { httpMethod: \"GET\" } as IAuthenticatedRequestOptions;\n  const username = await determineUsername(requestOptions);\n  const portalUrl = getPortalUrl(requestOptions);\n  const url = `${portalUrl}/community/users/${username}/invitations`;\n  options = { ...requestOptions, ...options };\n\n  // send the request\n  return request(url, options);\n}\n\nexport interface IGetUserInvitationOptions\n  extends IAuthenticatedRequestOptions {\n  invitationId: string;\n}\n\n/**\n * Get an invitation for a user by id. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/user-invitation.htm) for more information.\n *\n * ```js\n * import { getUserInvitation } from '@esri/arcgis-rest-portal';\n * // username is inferred from ArcGISIdentityManager\n * getUserInvitation({\n *   invitationId: \"3ef\",\n *   authentication\n * })\n *   .then(response) // => response.accepted => true\n * ```\n *\n * @param requestOptions - options to pass through in the request\n * @returns A Promise that will resolve with the invitation\n */\nexport async function getUserInvitation(\n  requestOptions: IGetUserInvitationOptions\n): Promise<IInvitation> {\n  const username = await determineUsername(requestOptions);\n  const portalUrl = getPortalUrl(requestOptions);\n  const url = `${portalUrl}/community/users/${username}/invitations/${requestOptions.invitationId}`;\n\n  let options = { httpMethod: \"GET\" } as IGetUserInvitationOptions;\n  options = { ...requestOptions, ...options };\n\n  // send the request\n  return request(url, options);\n}\n\n/**\n * Accept an invitation. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/accept-invitation.htm) for more information.\n *\n * ```js\n * import { acceptInvitation } from '@esri/arcgis-rest-portal';\n *\n * acceptInvitation({\n *   invitationId: \"3ef\",\n *   authentication\n * })\n *   .then(response)\n * ```\n *\n * @param requestOptions - Options for the request\n * @returns A Promise that will resolve with the success/failure status of the request\n */\nexport async function acceptInvitation(\n  requestOptions: IGetUserInvitationOptions\n): Promise<{\n  success: boolean;\n  username: string;\n  groupId: string;\n  id: string;\n}> {\n  const username = await determineUsername(requestOptions);\n  const portalUrl = getPortalUrl(requestOptions);\n  const url = `${portalUrl}/community/users/${username}/invitations/${requestOptions.invitationId}/accept`;\n\n  const options: IGetUserInvitationOptions = { ...requestOptions };\n  return request(url, options);\n}\n\n/**\n * Decline an invitation. See the [REST Documentation](https://developers.arcgis.com/rest/users-groups-and-items/decline-invitation.htm) for more information.\n *\n * ```js\n * import { declineInvitation } from '@esri/arcgis-rest-portal';\n * // username is inferred from ArcGISIdentityManager\n * declineInvitation({\n *   invitationId: \"3ef\",\n *   authentication\n * })\n *   .then(response)\n * ```\n *\n * @param requestOptions - Options for the request\n * @returns A Promise that will resolve with the success/failure status of the request\n */\nexport async function declineInvitation(\n  requestOptions: IGetUserInvitationOptions\n): Promise<{\n  success: boolean;\n  username: string;\n  groupId: string;\n  id: string;\n}> {\n  const username = await determineUsername(requestOptions);\n  const portalUrl = getPortalUrl(requestOptions);\n  const url = `${portalUrl}/community/users/${username}/invitations/${requestOptions.invitationId}/decline`;\n\n  const options: IGetUserInvitationOptions = { ...requestOptions };\n  return request(url, options);\n}\n"]}