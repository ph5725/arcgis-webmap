{"version":3,"file":"notification.js","sourceRoot":"","sources":["../../../src/users/notification.ts"],"names":[],"mappings":"AAAA;gBACgB;AAEhB,OAAO,EACL,OAAO,EAER,MAAM,2BAA2B,CAAC;AAEnC,OAAO,EAAE,YAAY,EAAE,MAAM,2BAA2B,CAAC;AACzD,OAAO,EAAE,iBAAiB,EAAE,MAAM,+BAA+B,CAAC;AAsBlE;;;;;;;;;;;;;GAaG;AACH,MAAM,CAAC,KAAK,UAAU,oBAAoB,CACxC,cAA4C;IAE5C,IAAI,OAAO,GAAG,EAAE,UAAU,EAAE,KAAK,EAAkC,CAAC;IAEpE,MAAM,QAAQ,GAAG,MAAM,iBAAiB,CAAC,cAAc,CAAC,CAAC;IACzD,MAAM,SAAS,GAAG,YAAY,CAAC,cAAc,CAAC,CAAC;IAC/C,MAAM,GAAG,GAAG,GAAG,SAAS,oBAAoB,QAAQ,gBAAgB,CAAC;IACrE,OAAO,mCAAQ,cAAc,GAAK,OAAO,CAAE,CAAC;IAE5C,mBAAmB;IACnB,OAAO,OAAO,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;AAC/B,CAAC;AAED;;;;;GAKG;AACH,MAAM,CAAC,KAAK,UAAU,kBAAkB,CACtC,cAA0C;IAE1C,MAAM,QAAQ,GAAG,MAAM,iBAAiB,CAAC,cAAc,CAAC,CAAC;IACzD,MAAM,SAAS,GAAG,YAAY,CAAC,cAAc,CAAC,CAAC;IAC/C,MAAM,GAAG,GAAG,GAAG,SAAS,oBAAoB,QAAQ,kBAAkB,cAAc,CAAC,EAAE,SAAS,CAAC;IAEjG,OAAO,OAAO,CAAC,GAAG,EAAE,cAAc,CAAC,CAAC;AACtC,CAAC","sourcesContent":["/* Copyright (c) 2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport {\n  request,\n  IAuthenticatedRequestOptions\n} from \"@esri/arcgis-rest-request\";\n\nimport { getPortalUrl } from \"../util/get-portal-url.js\";\nimport { determineUsername } from \"../util/determine-username.js\";\n\nexport interface INotification {\n  id: string;\n  type: string;\n  target: string;\n  targetType: string;\n  received: number;\n  data: { [key: string]: any };\n}\n\nexport interface IRemoveNotificationOptions\n  extends IAuthenticatedRequestOptions {\n  /**\n   * Unique identifier of the item.\n   */\n  id: string;\n}\nexport interface INotificationResult {\n  notifications: INotification[];\n}\n\n/**\n * Get notifications for a user.\n *\n * ```js\n * import { getUserNotifications } from '@esri/arcgis-rest-portal';\n *\n * getUserNotifications({ authentication })\n *   .then(results) // results.notifications.length) => 3\n * ```\n *\n *\n * @param requestOptions - options to pass through in the request\n * @returns A Promise that will resolve with the user's notifications\n */\nexport async function getUserNotifications(\n  requestOptions: IAuthenticatedRequestOptions\n): Promise<INotificationResult> {\n  let options = { httpMethod: \"GET\" } as IAuthenticatedRequestOptions;\n\n  const username = await determineUsername(requestOptions);\n  const portalUrl = getPortalUrl(requestOptions);\n  const url = `${portalUrl}/community/users/${username}/notifications`;\n  options = { ...requestOptions, ...options };\n\n  // send the request\n  return request(url, options);\n}\n\n/**\n * Delete a notification.\n *\n * @param requestOptions - Options for the request\n * @returns A Promise that will resolve with the success/failure status of the request\n */\nexport async function removeNotification(\n  requestOptions: IRemoveNotificationOptions\n): Promise<{ success: boolean; notificationId: string }> {\n  const username = await determineUsername(requestOptions);\n  const portalUrl = getPortalUrl(requestOptions);\n  const url = `${portalUrl}/community/users/${username}/notifications/${requestOptions.id}/delete`;\n\n  return request(url, requestOptions);\n}\n"]}