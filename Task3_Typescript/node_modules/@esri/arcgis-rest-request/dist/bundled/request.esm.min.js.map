{"version":3,"file":"request.esm.min.js","sources":["../../src/utils/process-params.ts","../../src/utils/encode-query-string.ts","../../../arcgis-rest-form-data/browser-ponyfill.mjs","../../src/utils/encode-form-data.ts","../../src/utils/ArcGISRequestError.ts","../../src/utils/warn.ts","../../../arcgis-rest-fetch/browser-ponyfill.mjs","../../src/request.ts","../../src/utils/append-custom-params.ts","../../src/utils/ArcGISTokenRequestError.ts","../../src/utils/ErrorTypes.ts","../../src/utils/ArcGISAccessDeniedError.ts","../../src/utils/ArcGISJobError.ts","../../src/utils/clean-url.ts","../../src/utils/decode-query-string.ts","../../src/fetch-token.ts","../../src/AuthenticationManagerBase.ts","../../src/ApplicationCredentialsManager.ts","../../src/ApiKeyManager.ts","../../src/federation-utils.ts","../../src/validate-app-access.ts","../../src/revoke-token.ts","../../src/utils/base-64-url.ts","../../src/utils/generate-random-string.ts","../../src/ArcGISIdentityManager.ts","../../src/utils/generate-code-challenge.ts","../../src/app-tokens.ts","../../src/types/job-statuses.ts","../../src/job.ts","../../node_modules/mitt/dist/mitt.mjs","../../src/utils/process-job-params.ts","../../src/utils/with-options.ts"],"sourcesContent":["/* Copyright (c) 2017 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\n/**\n * Checks parameters to see if we should use FormData to send the request\n * @param params The object whose keys will be encoded.\n * @return A boolean indicating if FormData will be required.\n */\nexport function requiresFormData(params: any) {\n  return Object.keys(params).some((key) => {\n    let value = params[key];\n\n    if (!value) {\n      return false;\n    }\n\n    if (value && value.toParam) {\n      value = value.toParam();\n    }\n\n    const type = value.constructor.name;\n\n    switch (type) {\n      case \"Array\":\n        return false;\n      case \"Object\":\n        return false;\n      case \"Date\":\n        return false;\n      case \"Function\":\n        return false;\n      case \"Boolean\":\n        return false;\n      case \"String\":\n        return false;\n      case \"Number\":\n        return false;\n      default:\n        return true;\n    }\n  });\n}\n\n/**\n * Converts parameters to the proper representation to send to the ArcGIS REST API.\n * @param params The object whose keys will be encoded.\n * @return A new object with properly encoded values.\n */\nexport function processParams(params: any): any {\n  const newParams: any = {};\n\n  Object.keys(params).forEach((key) => {\n    let param = params[key];\n\n    if (param && param.toParam) {\n      param = param.toParam();\n    }\n\n    if (\n      !param &&\n      param !== 0 &&\n      typeof param !== \"boolean\" &&\n      typeof param !== \"string\"\n    ) {\n      return;\n    }\n\n    const type = param.constructor.name;\n\n    let value: any;\n\n    // properly encodes objects, arrays and dates for arcgis.com and other services.\n    // ported from https://github.com/Esri/esri-leaflet/blob/master/src/Request.js#L22-L30\n    // also see https://github.com/Esri/arcgis-rest-js/issues/18:\n    // null, undefined, function are excluded. If you want to send an empty key you need to send an empty string \"\".\n    switch (type) {\n      case \"Array\":\n        // Based on the first element of the array, classify array as an array of arrays, an array of objects\n        // to be stringified, or an array of non-objects to be comma-separated\n        // eslint-disable-next-line no-case-declarations\n        const firstElementType = param[0]?.constructor?.name;\n        value =\n          firstElementType === \"Array\"\n            ? param // pass thru array of arrays\n            : firstElementType === \"Object\"\n            ? JSON.stringify(param) // stringify array of objects\n            : param.join(\",\"); // join other types of array elements\n        break;\n      case \"Object\":\n        value = JSON.stringify(param);\n        break;\n      case \"Date\":\n        value = param.valueOf();\n        break;\n      case \"Function\":\n        value = null;\n        break;\n      case \"Boolean\":\n        value = param + \"\";\n        break;\n      default:\n        value = param;\n        break;\n    }\n    if (\n      value ||\n      value === 0 ||\n      typeof value === \"string\" ||\n      Array.isArray(value)\n    ) {\n      newParams[key] = value;\n    }\n  });\n\n  return newParams;\n}\n","/* Copyright (c) 2017 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport { processParams } from \"./process-params.js\";\n\n/**\n * Encodes keys and parameters for use in a URL's query string.\n *\n * @param key Parameter's key\n * @param value Parameter's value\n * @returns Query string with key and value pairs separated by \"&\"\n */\nexport function encodeParam(key: string, value: any): string {\n  // For array of arrays, repeat key=value for each element of containing array\n  if (Array.isArray(value) && value[0] && Array.isArray(value[0])) {\n    return value\n      .map((arrayElem: string) => encodeParam(key, arrayElem))\n      .join(\"&\");\n  }\n\n  return encodeURIComponent(key) + \"=\" + encodeURIComponent(value);\n}\n\n/**\n * Encodes the passed object as a query string.\n *\n * @param params An object to be encoded.\n * @returns An encoded query string.\n */\nexport function encodeQueryString(params: any): string {\n  const newParams = processParams(params);\n  return Object.keys(newParams)\n    .map((key: any) => {\n      return encodeParam(key, newParams[key]);\n    })\n    .join(\"&\");\n}\n","export const FormData = globalThis.FormData;\nexport const File = globalThis.File;\nexport const Blob = globalThis.Blob;\n","/* Copyright (c) 2017 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport { processParams, requiresFormData } from \"./process-params.js\";\nimport { encodeQueryString } from \"./encode-query-string.js\";\nimport { FormData } from \"@esri/arcgis-rest-form-data\";\n\n/**\n * Encodes parameters in a [FormData](https://developer.mozilla.org/en-US/docs/Web/API/FormData) object in browsers or in a [FormData](https://github.com/form-data/form-data) in Node.js\n *\n * @param params An object to be encoded.\n * @returns The complete [FormData](https://developer.mozilla.org/en-US/docs/Web/API/FormData) object.\n */\nexport function encodeFormData(\n  params: any,\n  forceFormData?: boolean\n): FormData | string {\n  // see https://github.com/Esri/arcgis-rest-js/issues/499 for more info.\n  const useFormData = requiresFormData(params) || forceFormData;\n  const newParams = processParams(params);\n  if (useFormData) {\n    const formData = new FormData();\n\n    Object.keys(newParams).forEach((key: any) => {\n      if (typeof Blob !== \"undefined\" && newParams[key] instanceof Blob) {\n        /* To name the Blob:\n         1. look to an alternate request parameter called 'fileName'\n         2. see if 'name' has been tacked onto the Blob manually\n         3. if all else fails, use the request parameter\n        */\n        const filename = newParams[\"fileName\"] || newParams[key].name || key;\n        formData.append(key, newParams[key], filename);\n      } else {\n        formData.append(key, newParams[key]);\n      }\n    });\n    return formData;\n  } else {\n    return encodeQueryString(params);\n  }\n}\n","/* Copyright (c) 2017 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport { IRequestOptions } from \"./IRequestOptions.js\";\n\n/**\n * This represents a generic error from an ArcGIS endpoint. There will be details about the error in the {@linkcode ArcGISRequestError.message},  {@linkcode ArcGISRequestError.originalMessage} properties on the error. You\n * can also access the original server response at  {@linkcode ArcGISRequestError.response} which may have additional details.\n *\n * ```js\n * request(someUrl, someOptions).catch(e => {\n *   if(e.name === \"ArcGISRequestError\") {\n *     console.log(\"Something went wrong with the request:\", e);\n *     console.log(\"Full server response\", e.response);\n *   }\n * })\n * ```\n */\nexport class ArcGISRequestError extends Error {\n  /**\n   * The name of this error. Will always be `\"ArcGISRequestError\"` to conform with the [`Error`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error) class.\n   */\n  public name: string;\n\n  /**\n   * Formatted error message. See the [`Error`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error) class for more details.\n   */\n  public message: string;\n\n  /**\n   * The errror message return from the request.\n   */\n  public originalMessage: string;\n\n  /**\n   * The error code returned from the request.\n   */\n  public code: string | number;\n\n  /**\n   * The original JSON response the caused the error.\n   */\n  public response: any;\n\n  /**\n   * The URL of the original request that caused the error\n   */\n  public url: string;\n\n  /**\n   * The options of the original request that caused the error\n   */\n  public options: IRequestOptions;\n\n  /**\n   * Create a new `ArcGISRequestError`  object.\n   *\n   * @param message - The error message from the API\n   * @param code - The error code from the API\n   * @param response - The original response from the API that caused the error\n   * @param url - The original url of the request\n   * @param options - The original options and parameters of the request\n   */\n  constructor(\n    message?: string,\n    code?: string | number,\n    response?: any,\n    url?: string,\n    options?: IRequestOptions\n  ) {\n    // 'Error' breaks prototype chain here\n    super(message);\n\n    // restore prototype chain, see https://stackoverflow.com/questions/41102060/typescript-extending-error-class\n    // we don't need to check for Object.setPrototypeOf as in the answers because we are ES2017 now.\n    // Also see https://github.com/Microsoft/TypeScript-wiki/blob/main/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n    // and https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#custom_error_types\n    const actualProto = new.target.prototype;\n    Object.setPrototypeOf(this, actualProto);\n\n    message = message || \"UNKNOWN_ERROR\";\n    code = code || \"UNKNOWN_ERROR_CODE\";\n\n    this.name = \"ArcGISRequestError\";\n    this.message =\n      code === \"UNKNOWN_ERROR_CODE\" ? message : `${code}: ${message}`;\n    this.originalMessage = message;\n    this.code = code;\n    this.response = response;\n    this.url = url;\n    this.options = options;\n  }\n}\n","/* Copyright (c) 2017-2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\n/**\n * Method used internally to surface messages to developers.\n */\nexport function warn(message: string) {\n  if (console && console.warn) {\n    console.warn.apply(console, [message]);\n  }\n}\n","export function getFetch() {\n  return Promise.resolve({\n    fetch: globalThis.fetch,\n    Headers: globalThis.Headers,\n    Response: globalThis.Response,\n    Request: globalThis.Request\n  });\n}\n","/* Copyright (c) 2017-2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport { encodeFormData } from \"./utils/encode-form-data.js\";\nimport { encodeQueryString } from \"./utils/encode-query-string.js\";\nimport { requiresFormData } from \"./utils/process-params.js\";\nimport { ArcGISRequestError } from \"./utils/ArcGISRequestError.js\";\nimport {\n  IRequestOptions,\n  InternalRequestOptions\n} from \"./utils/IRequestOptions.js\";\nimport { IParams } from \"./utils/IParams.js\";\nimport { warn } from \"./utils/warn.js\";\nimport { IRetryAuthError } from \"./utils/retryAuthError.js\";\nimport { getFetch } from \"@esri/arcgis-rest-fetch\";\nimport { IAuthenticationManager } from \"./index.js\";\n\nexport const NODEJS_DEFAULT_REFERER_HEADER = `@esri/arcgis-rest-js`;\n\n/**\n * Sets the default options that will be passed in **all requests across all `@esri/arcgis-rest-js` modules**.\n *\n * ```js\n * import { setDefaultRequestOptions } from \"@esri/arcgis-rest-request\";\n *\n * setDefaultRequestOptions({\n *   authentication: ArcGISIdentityManager // all requests will use this session by default\n * })\n * ```\n *\n * You should **never** set a default `authentication` when you are in a server side environment where you may be handling requests for many different authenticated users.\n *\n * @param options The default options to pass with every request. Existing default will be overwritten.\n * @param hideWarnings Silence warnings about setting default `authentication` in shared environments.\n */\nexport function setDefaultRequestOptions(\n  options: IRequestOptions,\n  hideWarnings?: boolean\n) {\n  if (options.authentication && !hideWarnings) {\n    warn(\n      \"You should not set `authentication` as a default in a shared environment such as a web server which will process multiple users requests. You can call `setDefaultRequestOptions` with `true` as a second argument to disable this warning.\"\n    );\n  }\n  (globalThis as any).DEFAULT_ARCGIS_REQUEST_OPTIONS = options;\n}\n\nexport function getDefaultRequestOptions() {\n  return (\n    (globalThis as any).DEFAULT_ARCGIS_REQUEST_OPTIONS || {\n      httpMethod: \"POST\",\n      params: {\n        f: \"json\"\n      }\n    }\n  );\n}\n\n/**\n * This error is thrown when a request encounters an invalid token error. Requests that use {@linkcode ArcGISIdentityManager} or\n * {@linkcode ApplicationCredentialsManager} in the `authentication` option the authentication manager will automatically try to generate\n * a fresh token using either {@linkcode ArcGISIdentityManager.refreshCredentials} or\n * {@linkcode ApplicationCredentialsManager.refreshCredentials}. If the request with the new token fails you will receive an `ArcGISAuthError`\n * if refreshing the token fails you will receive an instance of {@linkcode ArcGISTokenRequestError}.\n *\n * ```js\n * request(someUrl, {\n *   authentication: identityManager,\n *   // some additional options...\n * }).catch(e => {\n *   if(e.name === \"ArcGISAuthError\") {\n *     console.log(\"Request with a new token failed you might want to have the user authorize again.\")\n *   }\n *\n *   if(e.name === \"ArcGISTokenRequestError\") {\n *     console.log(\"There was an error refreshing the token you might want to have the user authorize again.\")\n *   }\n * })\n * ```\n */\nexport class ArcGISAuthError extends ArcGISRequestError {\n  /**\n   * Create a new `ArcGISAuthError`  object.\n   *\n   * @param message - The error message from the API\n   * @param code - The error code from the API\n   * @param response - The original response from the API that caused the error\n   * @param url - The original url of the request\n   * @param options - The original options of the request\n   */\n  constructor(\n    message = \"AUTHENTICATION_ERROR\",\n    code: string | number = \"AUTHENTICATION_ERROR_CODE\",\n    response?: any,\n    url?: string,\n    options?: IRequestOptions\n  ) {\n    super(message, code, response, url, options);\n    this.name = \"ArcGISAuthError\";\n    this.message =\n      code === \"AUTHENTICATION_ERROR_CODE\" ? message : `${code}: ${message}`;\n\n    // restore prototype chain, see https://stackoverflow.com/questions/41102060/typescript-extending-error-class\n    // we don't need to check for Object.setPrototypeOf as in the answers because we are ES2017 now.\n    // Also see https://github.com/Microsoft/TypeScript-wiki/blob/main/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n    // and https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#custom_error_types\n    const actualProto = new.target.prototype;\n    Object.setPrototypeOf(this, actualProto);\n  }\n\n  public retry(getSession: IRetryAuthError, retryLimit = 1) {\n    let tries = 0;\n\n    const retryRequest = (resolve: any, reject: any) => {\n      tries = tries + 1;\n\n      getSession(this.url, this.options)\n        .then((session) => {\n          const newOptions = {\n            ...this.options,\n            ...{ authentication: session }\n          };\n\n          return internalRequest(this.url, newOptions);\n        })\n        .then((response) => {\n          resolve(response);\n        })\n        .catch((e) => {\n          if (e.name === \"ArcGISAuthError\" && tries < retryLimit) {\n            retryRequest(resolve, reject);\n          } else if (\n            e.name === this.name &&\n            e.message === this.message &&\n            tries >= retryLimit\n          ) {\n            reject(this);\n          } else {\n            reject(e);\n          }\n        });\n    };\n\n    return new Promise((resolve, reject) => {\n      retryRequest(resolve, reject);\n    });\n  }\n}\n\n/**\n * Checks for errors in a JSON response from the ArcGIS REST API. If there are no errors, it will return the `data` passed in. If there is an error, it will throw an `ArcGISRequestError` or `ArcGISAuthError`.\n *\n * @param data The response JSON to check for errors.\n * @param url The url of the original request\n * @param params The parameters of the original request\n * @param options The options of the original request\n * @returns The data that was passed in the `data` parameter\n */\nexport function checkForErrors(\n  response: any,\n  url?: string,\n  params?: IParams,\n  options?: IRequestOptions,\n  originalAuthError?: ArcGISAuthError\n): any {\n  // this is an error message from billing.arcgis.com backend\n  if (response.code >= 400) {\n    const { message, code } = response;\n    throw new ArcGISRequestError(message, code, response, url, options);\n  }\n\n  // error from ArcGIS Online or an ArcGIS Portal or server instance.\n  if (response.error) {\n    const { message, code, messageCode } = response.error;\n    const errorCode = messageCode || code || \"UNKNOWN_ERROR_CODE\";\n\n    if (code === 498 || code === 499) {\n      if (originalAuthError) {\n        throw originalAuthError;\n      } else {\n        throw new ArcGISAuthError(message, errorCode, response, url, options);\n      }\n    }\n\n    throw new ArcGISRequestError(message, errorCode, response, url, options);\n  }\n\n  // error from a status check\n  if (response.status === \"failed\" || response.status === \"failure\") {\n    let message: string;\n    let code = \"UNKNOWN_ERROR_CODE\";\n\n    try {\n      message = JSON.parse(response.statusMessage).message;\n      code = JSON.parse(response.statusMessage).code;\n    } catch (e) {\n      message = response.statusMessage || response.message;\n    }\n\n    throw new ArcGISRequestError(message, code, response, url, options);\n  }\n\n  return response;\n}\n\n/**\n * This is the internal implementation of `request` without the automatic retry behavior to prevent\n * infinite loops when a server continues to return invalid token errors.\n *\n * @param url - The URL of the ArcGIS REST API endpoint.\n * @param requestOptions - Options for the request, including parameters relevant to the endpoint.\n * @returns A Promise that will resolve with the data from the response.\n * @internal\n */\nexport function internalRequest(\n  url: string,\n  requestOptions: InternalRequestOptions\n): Promise<any> {\n  const defaults = getDefaultRequestOptions();\n  const options: IRequestOptions = {\n    ...{ httpMethod: \"POST\" },\n    ...defaults,\n    ...requestOptions,\n    ...{\n      params: {\n        ...defaults.params,\n        ...requestOptions.params\n      },\n      headers: {\n        ...defaults.headers,\n        ...requestOptions.headers\n      }\n    }\n  };\n\n  const { httpMethod, rawResponse } = options;\n\n  const params: IParams = {\n    ...{ f: \"json\" },\n    ...options.params\n  };\n\n  let originalAuthError: ArcGISAuthError = null;\n\n  const fetchOptions: RequestInit = {\n    method: httpMethod,\n    signal: options.signal,\n    /* ensures behavior mimics XMLHttpRequest.\n    needed to support sending IWA cookies */\n    credentials: options.credentials || \"same-origin\"\n  };\n\n  // the /oauth2/platformSelf route will add X-Esri-Auth-Client-Id header\n  // and that request needs to send cookies cross domain\n  // so we need to set the credentials to \"include\"\n  if (\n    options.headers &&\n    options.headers[\"X-Esri-Auth-Client-Id\"] &&\n    url.indexOf(\"/oauth2/platformSelf\") > -1\n  ) {\n    fetchOptions.credentials = \"include\";\n  }\n\n  let authentication: IAuthenticationManager;\n\n  // Check to see if this is a raw token as a string and create a IAuthenticationManager like object for it.\n  // Otherwise this just assumes that options.authentication is an IAuthenticationManager.\n  if (typeof options.authentication === \"string\") {\n    const rawToken = options.authentication;\n\n    authentication = {\n      portal: \"https://www.arcgis.com/sharing/rest\",\n      getToken: () => {\n        return Promise.resolve(rawToken);\n      }\n    };\n\n    /* istanbul ignore else - we don't need to test NOT warning people */\n    if (\n      !options.authentication.startsWith(\"AAPK\") &&\n      !options.authentication.startsWith(\"AATK\") && // doesn't look like an API Key\n      !options.suppressWarnings && // user doesn't want to suppress warnings for this request\n      !(globalThis as any).ARCGIS_REST_JS_SUPPRESS_TOKEN_WARNING // we haven't shown the user this warning yet\n    ) {\n      warn(\n        `Using an oAuth 2.0 access token directly in the token option is discouraged. Consider using ArcGISIdentityManager or Application session. See https://esriurl.com/arcgis-rest-js-direct-token-warning for more information.`\n      );\n\n      (globalThis as any).ARCGIS_REST_JS_SUPPRESS_TOKEN_WARNING = true;\n    }\n  } else {\n    authentication = options.authentication;\n  }\n\n  // for errors in GET requests we want the URL passed to the error to be the URL before\n  // query params are applied.\n  const originalUrl = url;\n\n  return (\n    authentication\n      ? authentication.getToken(url).catch((err) => {\n          /**\n           * append original request url and requestOptions\n           * to the error thrown by getToken()\n           * to assist with retrying\n           */\n          err.url = url;\n          err.options = options;\n          /**\n           * if an attempt is made to talk to an unfederated server\n           * first try the request anonymously. if a 'token required'\n           * error is thrown, throw the UNFEDERATED error then.\n           */\n          originalAuthError = err;\n          return Promise.resolve(\"\");\n        })\n      : Promise.resolve(\"\")\n  )\n    .then((token) => {\n      if (token.length) {\n        params.token = token;\n      }\n\n      if (authentication && authentication.getDomainCredentials) {\n        fetchOptions.credentials = authentication.getDomainCredentials(url);\n      }\n\n      // Custom headers to add to request. IRequestOptions.headers with merge over requestHeaders.\n      const requestHeaders: {\n        [key: string]: any;\n      } = {};\n\n      if (fetchOptions.method === \"GET\") {\n        // Prevents token from being passed in query params when hideToken option is used.\n        /* istanbul ignore if - window is always defined in a browser. Test case is covered by Jasmine in node test */\n        if (\n          params.token &&\n          options.hideToken &&\n          // Sharing API does not support preflight check required by modern browsers https://developer.mozilla.org/en-US/docs/Glossary/Preflight_request\n          typeof window === \"undefined\"\n        ) {\n          requestHeaders[\"X-Esri-Authorization\"] = `Bearer ${params.token}`;\n          delete params.token;\n        }\n        // encode the parameters into the query string\n        const queryParams = encodeQueryString(params);\n        // dont append a '?' unless parameters are actually present\n        const urlWithQueryString =\n          queryParams === \"\" ? url : url + \"?\" + encodeQueryString(params);\n\n        if (\n          // This would exceed the maximum length for URLs by 2000 as default or as specified by the consumer and requires POST\n          (options.maxUrlLength && urlWithQueryString.length > options.maxUrlLength) ||\n          (!options.maxUrlLength && urlWithQueryString.length > 2000) ||\n          // Or if the customer requires the token to be hidden and it has not already been hidden in the header (for browsers)\n          (params.token && options.hideToken)\n        ) {\n          // the consumer specified a maximum length for URLs\n          // and this would exceed it, so use post instead\n          fetchOptions.method = \"POST\";\n\n          // If the token was already added as a Auth header, add the token back to body with other params instead of header\n          if (token.length && options.hideToken) {\n            params.token = token;\n            // Remove existing header that was added before url query length was checked\n            delete requestHeaders[\"X-Esri-Authorization\"];\n          }\n        } else {\n          // just use GET\n          url = urlWithQueryString;\n        }\n      }\n\n      /* updateResources currently requires FormData even when the input parameters dont warrant it.\n  https://developers.arcgis.com/rest/users-groups-and-items/update-resources.htm\n      see https://github.com/Esri/arcgis-rest-js/pull/500 for more info. */\n      const forceFormData = new RegExp(\"/items/.+/updateResources\").test(url);\n\n      if (fetchOptions.method === \"POST\") {\n        fetchOptions.body = encodeFormData(params, forceFormData) as any;\n      }\n\n      // Mixin headers from request options\n      fetchOptions.headers = {\n        ...requestHeaders,\n        ...options.headers\n      };\n\n      // This should have the same conditional for Node JS as ArcGISIdentityManager.refreshWithUsernameAndPassword()\n      // to ensure that generated tokens have the same referer when used in Node with a username and password.\n      /* istanbul ignore next - karma reports coverage on browser tests only */\n      if (\n        (typeof window === \"undefined\" ||\n          (window && typeof window.document === \"undefined\")) &&\n        !fetchOptions.headers.referer\n      ) {\n        fetchOptions.headers.referer = NODEJS_DEFAULT_REFERER_HEADER;\n      }\n\n      /* istanbul ignore else blob responses are difficult to make cross platform we will just have to trust the isomorphic fetch will do its job */\n      if (!requiresFormData(params) && !forceFormData) {\n        fetchOptions.headers[\"Content-Type\"] =\n          \"application/x-www-form-urlencoded\";\n      }\n\n      /**\n       * Check for a global fetch first and use it if available. This allows us to use the default\n       * configuration of fetch-mock in tests.\n       */\n\n      /* istanbul ignore next coverage is based on browser code and we don't test for the absence of global fetch so we can skip the else here. */\n      return globalThis.fetch\n        ? globalThis.fetch(url, fetchOptions)\n        : getFetch().then(({ fetch }) => {\n            return fetch(url, fetchOptions);\n          });\n    })\n    .then((response: any) => {\n      // the request got back an error status code (4xx, 5xx)\n      if (!response.ok) {\n        // we need to determine if the server returned a JSON body with more details.\n        // this is the format used by newer services such as the Places and Style service.\n        return response\n          .json()\n          .then((jsonError: any) => {\n            // The body can be parsed as JSON\n            const { status, statusText } = response;\n            const { message, details } = jsonError.error;\n            const formattedMessage = `${message}. ${\n              details ? details.join(\" \") : \"\"\n            }`.trim();\n\n            throw new ArcGISRequestError(\n              formattedMessage,\n              `HTTP ${status} ${statusText}`,\n              jsonError,\n              url,\n              options\n            );\n          })\n          .catch((e: any) => {\n            // if we already were about to format this as an ArcGISRequestError throw that error\n            if (e.name === \"ArcGISRequestError\") {\n              throw e;\n            }\n\n            // server responded w/ an actual error (404, 500, etc) but we could not parse it as JSON\n            const { status, statusText } = response;\n            throw new ArcGISRequestError(\n              statusText,\n              `HTTP ${status}`,\n              response,\n              url,\n              options\n            );\n          });\n      }\n      if (rawResponse) {\n        return response;\n      }\n      switch (params.f) {\n        case \"json\":\n          return response.json();\n        case \"geojson\":\n          return response.json();\n        case \"html\":\n          return response.text();\n        case \"text\":\n          return response.text();\n        /* istanbul ignore next blob responses are difficult to make cross platform we will just have to trust that isomorphic fetch will do its job */\n        default:\n          return response.blob();\n      }\n    })\n    .then((data) => {\n      // Check for an error in the JSON body of a successful response.\n      // Most ArcGIS Server services will return a successful status code but include an error in the response body.\n      if ((params.f === \"json\" || params.f === \"geojson\") && !rawResponse) {\n        const response = checkForErrors(\n          data,\n          originalUrl,\n          params,\n          options,\n          originalAuthError\n        );\n\n        if (originalAuthError) {\n          /* If the request was made to an unfederated service that\n          didn't require authentication, add the base url and a dummy token\n          to the list of trusted servers to avoid another federation check\n          in the event of a repeat request */\n          const truncatedUrl: string = url\n            .toLowerCase()\n            .split(/\\/rest(\\/admin)?\\/services\\//)[0];\n\n          (options.authentication as any).federatedServers[truncatedUrl] = {\n            token: [],\n            // default to 24 hours\n            expires: new Date(Date.now() + 86400 * 1000)\n          };\n          originalAuthError = null;\n        }\n        return response;\n      } else {\n        return data;\n      }\n    });\n}\n\n/**\n * Generic method for making HTTP requests to ArcGIS REST API endpoints.\n *\n * ```js\n * import { request } from '@esri/arcgis-rest-request';\n *\n * request('https://www.arcgis.com/sharing/rest')\n *   .then(response) // response.currentVersion === 5.2\n *\n * request('https://www.arcgis.com/sharing/rest', {\n *   httpMethod: \"GET\"\n * })\n *\n * request('https://www.arcgis.com/sharing/rest/search', {\n *   params: { q: 'parks' }\n * })\n *   .then(response) // response.total => 78379\n * ```\n *\n * @param url - The URL of the ArcGIS REST API endpoint.\n * @param requestOptions - Options for the request, including parameters relevant to the endpoint.\n * @returns A Promise that will resolve with the data from the response.\n */\nexport function request(\n  url: string,\n  requestOptions: IRequestOptions = { params: { f: \"json\" } }\n): Promise<any> {\n  const { request, ...internalOptions } = requestOptions;\n  // if the user passed in a custom request function, use that instead of the default\n  return request\n    ? request(url, internalOptions)\n    : internalRequest(url, internalOptions).catch((e) => {\n        if (\n          e instanceof ArcGISAuthError &&\n          requestOptions.authentication &&\n          typeof requestOptions.authentication !== \"string\" &&\n          requestOptions.authentication.canRefresh &&\n          requestOptions.authentication.refreshCredentials\n        ) {\n          return e.retry(() => {\n            return (requestOptions.authentication as any).refreshCredentials();\n          }, 1);\n        } else {\n          return Promise.reject(e);\n        }\n      });\n}\n","/* Copyright (c) 2017-2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport { IRequestOptions } from \"./IRequestOptions.js\";\n\n/**\n * Helper for methods with lots of first order request options to pass through as request parameters.\n */\nexport function appendCustomParams<T extends IRequestOptions>(\n  customOptions: T,\n  keys: Array<keyof T>,\n  baseOptions?: Partial<T>\n): IRequestOptions {\n  // NOTE: this must be kept in sync with the keys in IRequestOptions\n  const requestOptionsKeys = [\n    \"params\",\n    \"httpMethod\",\n    \"rawResponse\",\n    \"authentication\",\n    \"hideToken\",\n    \"portal\",\n    \"credentials\",\n    \"maxUrlLength\",\n    \"headers\",\n    \"signal\",\n    \"suppressWarnings\",\n    \"request\"\n  ];\n\n  const options: T = {\n    ...{ params: {} },\n    ...baseOptions,\n    ...customOptions\n  };\n\n  // merge all keys in customOptions into options.params\n  options.params = keys.reduce((value, key) => {\n    if (\n      customOptions[key] ||\n      typeof customOptions[key] === \"boolean\" ||\n      (typeof customOptions[key] === \"number\" &&\n        (customOptions[key] as unknown) === 0)\n    ) {\n      value[key as any] = customOptions[key];\n    }\n    return value;\n  }, options.params);\n\n  // now remove all properties in options that don't exist in IRequestOptions\n  return requestOptionsKeys.reduce((value, key) => {\n    if ((options as any)[key]) {\n      (value as any)[key] = (options as any)[key];\n    }\n    return value;\n  }, {} as IRequestOptions);\n}\n","/* Copyright (c) 2022 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport { IRequestOptions } from \"./IRequestOptions.js\";\n\n/**\n * There are 5 potential error codes that might be thrown by {@linkcode ArcGISTokenRequestError}. 2 of these codes are used by both\n * {@linkcode ArcGISIdentityManager} or {@linkcode ApplicationCredentialsManager}:\n *\n * * `TOKEN_REFRESH_FAILED` when a request for an new access token fails.\n * * `UNKNOWN_ERROR_CODE` the error is unknown. More information may be available in {@linkcode ArcGISTokenRequestError.response}\n *\n * The 3 remaining error codes will only be thrown when using {@linkcode ArcGISIdentityManager}:\n *\n * * `GENERATE_TOKEN_FOR_SERVER_FAILED` when a request for a token for a specific federated server fails.\n * * `REFRESH_TOKEN_EXCHANGE_FAILED` when a request for a new refresh token fails.\n * * `NOT_FEDERATED` when the requested server isn't federated with the portal specified in {@linkcode ArcGISIdentityManager.portal}.\n */\nexport enum ArcGISTokenRequestErrorCodes {\n  TOKEN_REFRESH_FAILED = \"TOKEN_REFRESH_FAILED\",\n  GENERATE_TOKEN_FOR_SERVER_FAILED = \"GENERATE_TOKEN_FOR_SERVER_FAILED\",\n  REFRESH_TOKEN_EXCHANGE_FAILED = \"REFRESH_TOKEN_EXCHANGE_FAILED\",\n  NOT_FEDERATED = \"NOT_FEDERATED\",\n  UNKNOWN_ERROR_CODE = \"UNKNOWN_ERROR_CODE\"\n}\n\n/**\n * This error is thrown when {@linkcode ArcGISIdentityManager} or {@linkcode ApplicationCredentialsManager} fails to refresh a token or generate a new token\n * for a request. Generally in this scenario the credentials are invalid for the request and the you should recreate the {@linkcode ApplicationCredentialsManager}\n * or prompt the user to authenticate again with {@linkcode ArcGISIdentityManager}. See {@linkcode ArcGISTokenRequestErrorCodes} for a more detailed description of\n * the possible error codes.\n *\n * ```js\n * request(someUrl, {\n *   authentication: someAuthenticationManager\n * }).catch(e => {\n *   if(e.name === \"ArcGISTokenRequestError\") {\n *     // ArcGIS REST JS could not generate an appropriate token for this request\n *     // All credentials are likely invalid and the authentication process should be restarted\n *   }\n * })\n * ```\n */\nexport class ArcGISTokenRequestError extends Error {\n  /**\n   * The name of this error. Will always be `\"ArcGISTokenRequestError\"` to conform with the [`Error`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error) class.\n   */\n  public name: string;\n\n  /**\n   * Formatted error message. See the [`Error`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error) class for more details.\n   */\n  public message: string;\n\n  /**\n   * The error message return from the request.\n   */\n  public originalMessage: string;\n\n  /**\n   * The error code for the request.\n   */\n  public code: ArcGISTokenRequestErrorCodes;\n\n  /**\n   * The original JSON response the caused the error.\n   */\n  public response: any;\n\n  /**\n   * The URL of the original request that caused the error\n   */\n  public url: string;\n\n  /**\n   * The options of the original request that caused the error\n   */\n  public options: IRequestOptions;\n\n  /**\n   * Create a new `ArcGISTokenRequestError`  object.\n   *\n   * @param message - The error message from the API\n   * @param code - The error code from the API\n   * @param response - The original response from the API that caused the error\n   * @param url - The original url of the request\n   * @param options - The original options and parameters of the request\n   */\n  constructor(\n    message = \"UNKNOWN_ERROR\",\n    code = ArcGISTokenRequestErrorCodes.UNKNOWN_ERROR_CODE,\n    response?: any,\n    url?: string,\n    options?: IRequestOptions\n  ) {\n    // 'Error' breaks prototype chain here\n    super(message);\n\n    // restore prototype chain, see https://stackoverflow.com/questions/41102060/typescript-extending-error-class\n    // we don't need to check for Object.setPrototypeOf as in the answers because we are ES2017 now.\n    // Also see https://github.com/Microsoft/TypeScript-wiki/blob/main/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n    // and https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#custom_error_types\n    const actualProto = new.target.prototype;\n    Object.setPrototypeOf(this, actualProto);\n\n    this.name = \"ArcGISTokenRequestError\";\n    this.message = `${code}: ${message}`;\n    this.originalMessage = message;\n    this.code = code;\n    this.response = response;\n    this.url = url;\n    this.options = options;\n  }\n}\n","/* Copyright (c) 2017 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\n/**\n * Enum describing the different errors that might be thrown by a request.\n *\n * ```ts\n * import { request, ErrorTypes } from '@esri/arcgis-rest-request';\n *\n * request(\"...\").catch((e) => {\n *   switch(e.name) {\n *     case ErrorType.ArcGISRequestError:\n *     // handle a general error from the API\n *     break;\n *\n *     case ErrorType.ArcGISAuthError:\n *     // handle an authentication error\n *     break;\n *\n *     case ErrorType.ArcGISAccessDeniedError:\n *     // handle a user denying an authorization request in an oAuth workflow\n *     break;\n *\n *     default:\n *     // handle some other error (usually a network error)\n *   }\n * });\n * ```\n */\nexport enum ErrorTypes {\n  ArcGISRequestError = \"ArcGISRequestError\",\n  ArcGISAuthError = \"ArcGISAuthError\",\n  ArcGISAccessDeniedError = \"ArcGISAccessDeniedError\",\n  ArcGISTokenRequestError = \"ArcGISTokenRequestError\"\n}\n","/* Copyright (c) 2022 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\n/**\n * This error code will be thrown by the following methods when the user cancels or denies an authorization request on the OAuth 2.0\n * authorization screen.\n *\n * * {@linkcode ArcGISIdentityManager.beginOAuth2} when the `popup` option is `true`\n * * {@linkcode ArcGISIdentityManager.completeOAuth2}  when the `popup` option is `false`\n *\n * ```js\n * import { ArcGISIdentityManager } from \"@esri/arcgis-rest-request\";\n *\n * ArcGISIdentityManager.beginOAuth2({\n *   clientId: \"***\"\n *   redirectUri: \"***\",\n *   popup: true\n * }).then(authenticationManager => {\n *   console.log(\"OAuth 2.0 Successful\");\n * }).catch(e => {\n *   if(e.name === \"ArcGISAccessDeniedError\") {\n *     console.log(\"The user did not authorize your app.\")\n *   } else {\n *     console.log(\"Something else went wrong. Error:\", e);\n *   }\n * })\n * ```\n */\nexport class ArcGISAccessDeniedError extends Error {\n  /**\n   * The name of this error. Will always be `\"ArcGISAccessDeniedError\"` to conform with the [`Error`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error) class.\n   */\n  public name: string;\n\n  /**\n   * Formatted error message. See the [`Error`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error) class for more details.\n   */\n  public message: string;\n\n  /**\n   * Create a new `ArcGISAccessDeniedError`  object.\n   */\n  constructor() {\n    const message = \"The user has denied your authorization request.\";\n\n    super(message);\n\n    // restore prototype chain, see https://stackoverflow.com/questions/41102060/typescript-extending-error-class\n    // we don't need to check for Object.setPrototypeOf as in the answers because we are ES2017 now.\n    // Also see https://github.com/Microsoft/TypeScript-wiki/blob/main/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n    // and https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#custom_error_types\n    const actualProto = new.target.prototype;\n    Object.setPrototypeOf(this, actualProto);\n\n    this.name = \"ArcGISAccessDeniedError\";\n  }\n}\n","/* Copyright (c) 2017 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport { IJobInfo } from \"../job.js\";\nimport { JOB_STATUSES } from \"../types/job-statuses.js\";\n\n/**\n * This represents a generic error from a {@linkcode Job}. There will be details about the error in the {@linkcode ArcGISJobError.jobInfo}.\n *\n * ```js\n * job.getAllResults().catch(e => {\n *   if(e.name === \"ArcGISJobError\") {\n *     console.log(\"Something went wrong with the job\", e);\n *     console.log(\"Full job info\", e.jobInfo);\n *   }\n * })\n * ```\n */\nexport class ArcGISJobError extends Error {\n  /**\n   * The name of this error. Will always be `\"ArcGISJobError\"` to conform with the [`Error`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error) class.\n   */\n  public name: string;\n\n  /**\n   * Formatted error message. See the [`Error`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error) class for more details.\n   */\n  public message: string;\n\n  /**\n   * The status of the job.\n   */\n  public status: JOB_STATUSES;\n\n  /**\n   * The information about the current state of the job at the time of the error.\n   */\n  public jobInfo: IJobInfo;\n\n  /**\n   * The job id.\n   */\n  public id: string;\n\n  /**\n   * Create a new `ArcGISJobError` object.\n   *\n   * @param message - The error message from the API\n   * @param jobInfo - The info of the job that is in an error state\n   */\n  constructor(message = \"Unknown error\", jobInfo: IJobInfo) {\n    // 'Error' breaks prototype chain here\n    super(message);\n\n    // restore prototype chain, see https://stackoverflow.com/questions/41102060/typescript-extending-error-class\n    // we don't need to check for Object.setPrototypeOf as in the answers because we are ES2017 now.\n    // Also see https://github.com/Microsoft/TypeScript-wiki/blob/main/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n    // and https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#custom_error_types\n    const actualProto = new.target.prototype;\n    Object.setPrototypeOf(this, actualProto);\n\n    this.name = \"ArcGISJobError\";\n    this.message = `${jobInfo.status}: ${message}`;\n    this.status = jobInfo.status;\n    this.id = jobInfo.id;\n    this.jobInfo = jobInfo;\n  }\n}\n","/* Copyright (c) 2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\n/**\n * Helper method to ensure that user supplied urls don't include whitespace or a trailing slash.\n */\nexport function cleanUrl(url: string) {\n  // Guard so we don't try to trim something that's not a string\n  if (typeof url !== \"string\") {\n    return url;\n  }\n  // trim leading and trailing spaces, but not spaces inside the url\n  url = url.trim();\n\n  // remove the trailing slash to the url if one was included\n  if (url[url.length - 1] === \"/\") {\n    url = url.slice(0, -1);\n  }\n  return url;\n}\n","/* Copyright (c) 2017-2020 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nexport function decodeParam(param: string): { key: string; value: string } {\n  const [key, value] = param.split(\"=\");\n  return { key: decodeURIComponent(key), value: decodeURIComponent(value) };\n}\n\n/**\n * Decodes the passed query string as an object.\n *\n * @param query A string to be decoded.\n * @returns A decoded query param object.\n */\nexport function decodeQueryString(query?: string): { [key: string]: string } {\n  if (!query || query.length <= 0) {\n    return {};\n  }\n\n  return query\n    .replace(/^#/, \"\")\n    .replace(/^\\?/, \"\")\n    .split(\"&\")\n    .reduce((acc, entry) => {\n      const { key, value } = decodeParam(entry);\n      acc[key] = value;\n      return acc;\n    }, {} as any);\n}\n","/* Copyright (c) 2017 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport { request } from \"./request.js\";\nimport { IRequestOptions } from \"./utils/IRequestOptions.js\";\nimport { ITokenRequestOptions } from \"./utils/ITokenRequestOptions.js\";\n\nconst FIVE_MINUTES_IN_MILLISECONDS = 5 * 60 * 1000;\n\ninterface IoAuthTokenResponse {\n  access_token: string;\n  expires_in: number;\n  username: string;\n  ssl?: boolean;\n  refresh_token?: string;\n  refresh_token_expires_in?: number;\n}\n\ninterface IGenerateTokenRawResponse {\n  token: string;\n  expires: number;\n}\n\nexport interface IFetchTokenResponse {\n  token: string;\n  expires: Date;\n  username: string;\n  ssl?: boolean;\n  refreshToken?: string;\n  refreshTokenExpires?: Date;\n}\n\nexport function fetchToken(\n  url: string,\n  requestOptions: ITokenRequestOptions\n): Promise<IFetchTokenResponse> {\n  const options: IRequestOptions = requestOptions;\n\n  // we generate a response, so we can't return the raw response\n  options.rawResponse = false;\n\n  return request(url, options).then(\n    (response: IGenerateTokenRawResponse | IoAuthTokenResponse) => {\n      // Typescript uses the \"in\" keyword to determine we have a generateToken response or an oauth token response\n      if (\"token\" in response && \"expires\" in response) {\n        return {\n          token: response.token,\n          username: requestOptions.params.username,\n          expires: new Date(response.expires)\n        };\n      }\n\n      const portalTokenResponse: IFetchTokenResponse = {\n        token: response.access_token,\n        username: response.username,\n        expires: new Date(\n          // convert seconds in response to milliseconds and add the value to the current time to calculate a static expiration timestamp\n          // we subtract 5 minutes here to make sure that we refresh the token early if the user makes requests\n          Date.now() + response.expires_in * 1000 - FIVE_MINUTES_IN_MILLISECONDS\n        ),\n        ssl: response.ssl === true\n      };\n\n      if (response.refresh_token) {\n        portalTokenResponse.refreshToken = response.refresh_token;\n      }\n\n      if (response.refresh_token_expires_in) {\n        portalTokenResponse.refreshTokenExpires = new Date(\n          // convert seconds in response to milliseconds and add the value to the current time to calculate a static expiration timestamp\n          // we subtract 5 minutes here to make sure that we refresh the token early if the user makes requests\n          Date.now() +\n            response.refresh_token_expires_in * 1000 -\n            FIVE_MINUTES_IN_MILLISECONDS\n        );\n      }\n\n      return portalTokenResponse;\n    }\n  );\n}\n","import { IUser } from \"./types/user.js\";\nimport { IRequestOptions } from \"./utils/IRequestOptions.js\";\nimport { request } from \"./request.js\";\nimport { cleanUrl } from \"./utils/clean-url.js\";\n\nclass AuthenticationManagerBase {\n  /**\n   * The current portal the user is authenticated with.\n   */\n  public readonly portal: string;\n\n  /**\n   * The username of the currently authenticated user.\n   */\n  get username() {\n    if (this._username) {\n      return this._username;\n    }\n\n    if (this._user && this._user.username) {\n      return this._user.username;\n    }\n  }\n\n  constructor(options: any) {\n    this.portal = options.portal\n      ? cleanUrl(options.portal)\n      : \"https://www.arcgis.com/sharing/rest\";\n    this._username = options.username;\n  }\n\n  /**\n   * Internal varible to track the pending user request so we do not make multiple requests.\n   */\n  private _pendingUserRequest: Promise<IUser>;\n\n  /**\n   * Hydrated by a call to [getUser()](#getUser-summary).\n   */\n  private _user: IUser;\n\n  /**\n   * Internal variable to store the username.\n   */\n  private _username: string;\n\n  /**\n   * Returns the username for the currently logged in [user](https://developers.arcgis.com/rest/users-groups-and-items/user.htm). Subsequent calls will *not* result in additional web traffic. This is also used internally when a username is required for some requests but is not present in the options.\n   *\n   * ```js\n   * manager.getUsername()\n   *   .then(response => {\n   *     console.log(response); // \"casey_jones\"\n   *   })\n   * ```\n   */\n  public getUsername() {\n    if (this.username) {\n      return Promise.resolve(this.username);\n    } else {\n      return this.getUser().then((user) => {\n        return user.username;\n      });\n    }\n  }\n\n  /**\n   * Returns information about the currently logged in [user](https://developers.arcgis.com/rest/users-groups-and-items/user.htm). Subsequent calls will *not* result in additional web traffic.\n   *\n   * ```js\n   * manager.getUser()\n   *   .then(response => {\n   *     console.log(response.role); // \"org_admin\"\n   *   })\n   * ```\n   *\n   * @param requestOptions - Options for the request. NOTE: `rawResponse` is not supported by this operation.\n   * @returns A Promise that will resolve with the data from the response.\n   */\n  public getUser(requestOptions?: IRequestOptions): Promise<IUser> {\n    if (this._pendingUserRequest) {\n      return this._pendingUserRequest;\n    } else if (this._user) {\n      return Promise.resolve(this._user);\n    } else {\n      const url = `${this.portal}/community/self`;\n\n      const options = {\n        httpMethod: \"GET\",\n        authentication: this,\n        ...requestOptions,\n        rawResponse: false\n      } as IRequestOptions;\n\n      this._pendingUserRequest = request(url, options).then((response) => {\n        this._user = response;\n        this._pendingUserRequest = null;\n        return response;\n      });\n\n      return this._pendingUserRequest;\n    }\n  }\n\n  /**\n   * Clear the cached user infornation. Usefull to ensure that the most recent user information from {@linkcode AuthenticationManagerBase.getUser} is used.\n   */\n  public clearCachedUserInfo() {\n    this._user = null;\n  }\n}\n\nexport { AuthenticationManagerBase };\n","/* Copyright (c) 2017-2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport { IAuthenticationManager } from \"./utils/IAuthenticationManager.js\";\nimport { ITokenRequestOptions } from \"./utils/ITokenRequestOptions.js\";\nimport { fetchToken } from \"./fetch-token.js\";\nimport {\n  ArcGISTokenRequestError,\n  ArcGISTokenRequestErrorCodes\n} from \"./utils/ArcGISTokenRequestError.js\";\nimport { ArcGISRequestError } from \"./utils/ArcGISRequestError.js\";\nimport { AuthenticationManagerBase } from \"./AuthenticationManagerBase.js\";\nimport { Writable } from \"./utils/writable.js\";\n\nexport interface IApplicationCredentialsManagerOptions {\n  /**\n   * Client ID of your application. Can be obtained by registering an application\n   * on [ArcGIS for Developers](https://developers.arcgis.com/documentation/core-concepts/security-and-authentication/signing-in-arcgis-online-users/#registering-your-application),\n   * [ArcGIS Online](http://doc.arcgis.com/en/arcgis-online/share-maps/add-items.htm#ESRI_SECTION1_0D1B620254F745AE84F394289F8AF44B) or on your instance of ArcGIS Enterprise.\n   */\n  clientId: string;\n\n  /**\n   * A Client Secret is also obtained by registering an application\n   * on [ArcGIS for Developers](https://developers.arcgis.com/documentation/core-concepts/security-and-authentication/signing-in-arcgis-online-users/#registering-your-application),\n   * [ArcGIS Online](http://doc.arcgis.com/en/arcgis-online/share-maps/add-items.htm#ESRI_SECTION1_0D1B620254F745AE84F394289F8AF44B) or on your instance of ArcGIS Enterprise. Treat it like a password.\n   */\n  clientSecret: string;\n\n  /**\n   * OAuth 2.0 access token from a previous application session.\n   */\n  token?: string;\n\n  /**\n   * Expiration date for the `token`\n   */\n  expires?: Date;\n\n  /**\n   * URL of ArcGIS REST base, defaults to \"https://www.arcgis.com/sharing/rest\"\n   */\n  portal?: string;\n\n  /**\n   * Duration of requested tokens in minutes. defaults to 7200 (5 days).\n   */\n  duration?: number;\n}\n\n/**\n * Used to authenticate methods in ArcGIS REST JS with oAuth 2.0 application credentials. The instance of `ApplicationCredentialsManager` can be passed to {@linkcode IRequestOptions.authentication} to authenticate requests.\n *\n * ```js\n * import { ApplicationCredentialsManager } from '@esri/arcgis-rest-request';\n *\n * const session = ApplicationCredentialsManager.fromCredentials({\n *   clientId: \"abc123\",\n *   clientSecret: \"••••••\"\n * })\n * ```\n */\nexport class ApplicationCredentialsManager\n  extends AuthenticationManagerBase\n  implements IAuthenticationManager\n{\n  public readonly portal: string;\n  public readonly token: string;\n  public readonly clientId: string;\n  public readonly clientSecret: string;\n  public readonly expires: Date;\n  public readonly duration: number;\n\n  /**\n   * Preferred method for creating an `ApplicationCredentialsManager`\n   */\n  public static fromCredentials(\n    options: IApplicationCredentialsManagerOptions\n  ) {\n    return new ApplicationCredentialsManager(options);\n  }\n\n  /**\n   * Internal object to keep track of pending token requests. Used to prevent\n   *  duplicate token requests.\n   */\n  private _pendingTokenRequest: Promise<string>;\n\n  constructor(options: IApplicationCredentialsManagerOptions) {\n    super(options);\n    this.clientId = options.clientId;\n    this.clientSecret = options.clientSecret;\n    this.token = options.token;\n    this.expires = options.expires;\n    this.portal = options.portal || \"https://www.arcgis.com/sharing/rest\";\n    this.duration = options.duration || 7200;\n  }\n\n  // URL is not actually read or passed through.\n  public getToken(\n    url: string,\n    requestOptions?: ITokenRequestOptions\n  ): Promise<string> {\n    if (this.token && this.expires && this.expires.getTime() > Date.now()) {\n      return Promise.resolve(this.token);\n    }\n\n    if (this._pendingTokenRequest) {\n      return this._pendingTokenRequest;\n    }\n\n    this._pendingTokenRequest = this.refreshToken(requestOptions);\n\n    return this._pendingTokenRequest;\n  }\n\n  public refreshToken(requestOptions?: ITokenRequestOptions): Promise<string> {\n    const options = {\n      params: {\n        client_id: this.clientId,\n        client_secret: this.clientSecret,\n        grant_type: \"client_credentials\",\n        expiration: this.duration\n      },\n      ...requestOptions\n    };\n\n    return fetchToken(`${this.portal}/oauth2/token/`, options)\n      .then((response) => {\n        this._pendingTokenRequest = null;\n        this.setToken(response.token);\n        this.setExpires(response.expires);\n        return response.token;\n      })\n      .catch((e: ArcGISRequestError) => {\n        throw new ArcGISTokenRequestError(\n          e.message,\n          ArcGISTokenRequestErrorCodes.TOKEN_REFRESH_FAILED,\n          e.response,\n          e.url,\n          e.options\n        );\n      });\n  }\n\n  public refreshCredentials() {\n    this.clearCachedUserInfo();\n    return this.refreshToken().then(() => this);\n  }\n\n  /**\n   * Converts the `ApplicationCredentialsManager` instance to a JSON object. This is called when the instance is serialized to JSON with [`JSON.stringify()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify).\n   *\n   * ```js\n   * import { ApplicationCredentialsManager } from '@esri/arcgis-rest-request';\n   *\n   * const session = ApplicationCredentialsManager.fromCredentials({\n   *   clientId: \"abc123\",\n   *   clientSecret: \"••••••\"\n   * })\n   *\n   * const json = JSON.stringify(session);\n   * ```\n   *\n   * @returns A plain object representation of the instance.\n   */\n  public toJSON() {\n    return {\n      type: \"ApplicationCredentialsManager\",\n      clientId: this.clientId,\n      clientSecret: this.clientSecret,\n      token: this.token,\n      expires: this.expires,\n      portal: this.portal,\n      duration: this.duration\n    };\n  }\n\n  /**\n   * Serializes the `ApplicationCredentialsManager` instance to a JSON string.\n   * @returns The serialized JSON string.\n   */\n  public serialize(): string {\n    return JSON.stringify(this.toJSON());\n  }\n\n  /**\n   * Deserializes a JSON string previously created with {@linkcode ApplicationCredentialsManager.serialize} to an {@linkcode ApplicationCredentialsManager} instance.\n   * @param serialized - The serialized JSON string.\n   * @returns An instance of `ApplicationCredentialsManager`.\n   */\n  public static deserialize(serialized: string): ApplicationCredentialsManager {\n    const data: IApplicationCredentialsManagerOptions = JSON.parse(serialized);\n\n    return new ApplicationCredentialsManager({\n      clientId: data.clientId,\n      clientSecret: data.clientSecret,\n      token: data.token,\n      expires: new Date(data.expires),\n      portal: data.portal,\n      duration: data.duration\n    });\n  }\n\n  /*\n   * Used to update the token when the session is refreshed.\n   * @param newToken - Sets the token for the session.\n   * @internal\n   */\n  private setToken(newToken: string) {\n    (this as Writable<ApplicationCredentialsManager>).token = newToken;\n  }\n\n  /*\n   * Used to update the expiration date when the session is refreshed.\n   * @param newExpires - Sets the expiration date for the session.\n   * @internal\n   */\n  private setExpires(newExpires: Date) {\n    (this as Writable<ApplicationCredentialsManager>).expires = newExpires;\n  }\n}\n\n/**\n * @deprecated - Use {@linkcode ApplicationCredentialsManager}.\n * @internal\n */ /* istanbul ignore next */\nexport function ApplicationSession(\n  options: IApplicationCredentialsManagerOptions\n) {\n  console.log(\n    \"DEPRECATED: 'ApplicationSession' is deprecated. Use 'ApplicationCredentialsManager' instead.\"\n  );\n\n  return new ApplicationCredentialsManager(options);\n}\n","/* Copyright (c) 2017-2019 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport { IAuthenticationManager } from \"./utils/IAuthenticationManager.js\";\nimport { AuthenticationManagerBase } from \"./AuthenticationManagerBase.js\";\n\n/**\n * Options for the `ApiKey` constructor.\n */\nexport interface IApiKeyOptions {\n  key: string;\n  username?: string;\n  portal?: string;\n}\n\n/**\n * Used to authenticate methods in ArcGIS REST JS with an API keys. The instance of `ApiKeyManager` can be passed to  {@linkcode IRequestOptions.authentication} to authenticate requests.\n * \n * ```js\n * import { ApiKeyManager } from '@esri/arcgis-rest-request';\n \n * const apiKey = new ApiKeyManager.fromKey(\"...\");\n * ```\n * \n * In most cases however the API key can be passed directly to the {@linkcode IRequestOptions.authentication}.\n */\nexport class ApiKeyManager\n  extends AuthenticationManagerBase\n  implements IAuthenticationManager\n{\n  /**\n   * The current portal the user is authenticated with.\n   */\n  public readonly portal: string = \"https://www.arcgis.com/sharing/rest\";\n\n  /**\n   * The original API Key used to create this instance.\n   */\n  private readonly key: string;\n\n  /**\n   * The preferred method for creating an instance of `ApiKeyManager`.\n   */\n  public static fromKey(apiKey: string | IApiKeyOptions) {\n    if (typeof apiKey === \"string\") {\n      return new ApiKeyManager({ key: apiKey });\n    } else {\n      return new ApiKeyManager(apiKey);\n    }\n  }\n\n  constructor(options: IApiKeyOptions) {\n    super(options);\n    this.key = options.key;\n  }\n\n  /**\n   * Gets the current access token (the API Key).\n   */\n  get token() {\n    return this.key;\n  }\n\n  /**\n   * Gets the current access token (the API Key).\n   */\n  public getToken(url: string) {\n    return Promise.resolve(this.key);\n  }\n\n  /**\n   * Converts the `ApiKeyManager` instance to a JSON object. This is called when the instance is serialized to JSON with [`JSON.stringify()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify).\n   *\n   * ```js\n   * import { ApiKeyManager } from '@esri/arcgis-rest-request';\n   *\n   * const apiKey = new ApiKeyManager.fromKey(\"...\")\n   *\n   * const json = JSON.stringify(session);\n   * ```\n   *\n   * @returns A plain object representation of the instance.\n   */\n  toJSON() {\n    return {\n      type: \"ApiKeyManager\",\n      token: this.key,\n      username: this.username,\n      portal: this.portal\n    };\n  }\n\n  /**\n   * Serializes the ApiKeyManager instance to a JSON string.\n   *\n   * ```js\n   * import { ApiKeyManager } from '@esri/arcgis-rest-request';\n   *\n   * const apiKey = new ApiKeyManager.fromKey(\"...\")\n   *\n   * localStorage.setItem(\"apiKey\", apiKey.serialize());\n   * ```\n   * @returns {string} The serialized JSON string.\n   */\n  serialize() {\n    return JSON.stringify(this);\n  }\n\n  /**\n   * Deserializes a JSON string previously created with {@linkcode ApiKeyManager.deserialize} to an {@linkcode ApiKeyManager} instance.\n   *\n   * ```js\n   * import { ApiKeyManager } from '@esri/arcgis-rest-request';\n   *\n   * const apiKey = ApiKeyManager.deserialize(localStorage.getItem(\"apiKey\"));\n   * ```\n   * @param {string} serialized - The serialized JSON string.\n   * @returns {ApiKeyManager} The deserialized ApiKeyManager instance.\n   */\n  static deserialize(serialized: string) {\n    const data = JSON.parse(serialized);\n\n    return new ApiKeyManager({\n      key: data.token,\n      username: data.username,\n      portal: data.portal\n    });\n  }\n}\n\n/**\n * @deprecated - Use {@linkcode ApiKeyManager}.\n * @internal\n */ /* istanbul ignore next */\nexport function ApiKey(options: IApiKeyOptions) {\n  console.log(\n    \"DEPRECATED:, 'ApiKey' is deprecated. Use 'ApiKeyManager' instead.\"\n  );\n\n  return new ApiKeyManager(options);\n}\n","import { cleanUrl } from \"./utils/clean-url.js\";\n\n/**\n * Used to test if a URL is an ArcGIS Online URL\n */\nconst arcgisOnlineUrlRegex = /^https?:\\/\\/(\\S+)\\.arcgis\\.com.+/;\n\n/**\n * Used to test if a URL is production ArcGIS Online Portal\n */\nconst arcgisOnlinePortalRegex =\n  /^https?:\\/\\/(dev|devext|qa|qaext|www)\\.arcgis\\.com\\/sharing\\/rest+/;\n\n/**\n * Used to test if a URL is an ArcGIS Online Organization Portal\n */\nconst arcgisOnlineOrgPortalRegex =\n  /^https?:\\/\\/(?:[a-z0-9-]+\\.maps(dev|devext|qa|qaext)?)?.arcgis\\.com\\/sharing\\/rest/;\n\nexport function isOnline(url: string): boolean {\n  return arcgisOnlineUrlRegex.test(url);\n}\n\nexport function normalizeOnlinePortalUrl(portalUrl: string): string {\n  if (!arcgisOnlineUrlRegex.test(portalUrl)) {\n    return portalUrl;\n  }\n\n  switch (getOnlineEnvironment(portalUrl)) {\n    case \"dev\":\n      return \"https://devext.arcgis.com/sharing/rest\";\n    case \"qa\":\n      return \"https://qaext.arcgis.com/sharing/rest\";\n    default:\n      return \"https://www.arcgis.com/sharing/rest\";\n  }\n}\n\nexport function getOnlineEnvironment(url: string): string {\n  if (!arcgisOnlineUrlRegex.test(url)) {\n    return null;\n  }\n\n  const match = url.match(arcgisOnlineUrlRegex);\n  const subdomain = match[1].split(\".\").pop();\n\n  if (subdomain.includes(\"dev\")) {\n    return \"dev\";\n  }\n\n  if (subdomain.includes(\"qa\")) {\n    return \"qa\";\n  }\n\n  return \"production\";\n}\n\nexport function isFederated(\n  owningSystemUrl: string,\n  portalUrl: string\n): boolean {\n  const normalizedPortalUrl = cleanUrl(\n    normalizeOnlinePortalUrl(portalUrl)\n  ).replace(/https?:\\/\\//, \"\");\n\n  const normalizedOwningSystemUrl = cleanUrl(owningSystemUrl).replace(\n    /https?:\\/\\//,\n    \"\"\n  );\n\n  return new RegExp(normalizedOwningSystemUrl, \"i\").test(normalizedPortalUrl);\n}\n\nexport function canUseOnlineToken(\n  portalUrl: string,\n  requestUrl: string\n): boolean {\n  const portalIsOnline = isOnline(portalUrl);\n  const requestIsOnline = isOnline(requestUrl);\n  const portalEnv = getOnlineEnvironment(portalUrl);\n  const requestEnv = getOnlineEnvironment(requestUrl);\n\n  if (portalIsOnline && requestIsOnline && portalEnv === requestEnv) {\n    return true;\n  }\n\n  return false;\n}\n","/* Copyright (c) 2018-2020 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport { request } from \"./request.js\";\nimport { IRequestOptions } from \"./utils/IRequestOptions.js\";\n\nexport interface IAppAccess {\n  /**\n   * Verifies that the token is valid and the user has access to\n   * the specified app (clientId)\n   */\n  valid: boolean;\n  /**\n   * Should the app present the current user with a \"View Only\" mode\n   */\n  viewOnlyUserTypeApp: boolean;\n}\n\n/**\n * Validates that the user has access to the application\n * and if they user should be presented a \"View Only\" mode\n *\n * This is only needed/valid for Esri applications that are \"licensed\"\n * and shipped in ArcGIS Online or ArcGIS Enterprise. Most custom applications\n * should not need or use this.\n *\n * ```js\n * import { validateAppAccess } from '@esri/arcgis-rest-request';\n *\n * return validateAppAccess('your-token', 'theClientId')\n * .then((result) => {\n *    if (!result.value) {\n *      // redirect or show some other ui\n *    } else {\n *      if (result.viewOnlyUserTypeApp) {\n *        // use this to inform your app to show a \"View Only\" mode\n *      }\n *    }\n * })\n * .catch((err) => {\n *  // two possible errors\n *  // invalid clientId: {\"error\":{\"code\":400,\"messageCode\":\"GWM_0007\",\"message\":\"Invalid request\",\"details\":[]}}\n *  // invalid token: {\"error\":{\"code\":498,\"message\":\"Invalid token.\",\"details\":[]}}\n * })\n * ```\n *\n * Note: This is only usable by Esri applications hosted on *arcgis.com, *esri.com or within\n * an ArcGIS Enterprise installation. Custom applications can not use this.\n *\n * @param token platform token\n * @param clientId application client id\n * @param portal Optional\n */\nexport function validateAppAccess(\n  token: string,\n  clientId: string,\n  portal = \"https://www.arcgis.com/sharing/rest\"\n): Promise<IAppAccess> {\n  const url = `${portal}/oauth2/validateAppAccess`;\n  const ro = {\n    method: \"POST\",\n    params: {\n      f: \"json\",\n      client_id: clientId,\n      token\n    }\n  } as IRequestOptions;\n  return request(url, ro);\n}\n","import {\n  IRequestOptions,\n  request,\n  cleanUrl,\n  ArcGISRequestError,\n  appendCustomParams\n} from \"./index.js\";\n\nexport interface IRevokeTokenOptions extends IRequestOptions {\n  /**\n   * The token or refresh token to revoke. If a refresh token is passed all access tokens generated with that refresh token are also revoked.\n   */\n  token: string;\n\n  /**\n   * The portal of the tokens to revoke. Defaults to `https://www.arcgis.com/sharing/rest`.\n   */\n  portal?: string;\n\n  /**\n   * The client id fo the application that generated the tokens. Applications can only revoke tokens they created.\n   */\n  clientId: string;\n}\n\nexport interface IRevokeTokenResponse {\n  /**\n   * Indicates if the token was revoked. A success response will also returned for invalid tokens, expired tokens or of an unsupported type of token to prevent leaking information about the provided token.\n   */\n  success: boolean;\n}\n\n/**\n * Revokes a token generated via any oAuth 2.0 method. `token` can be either a refresh token OR an access token. If you are using  {@linkcode ArcGISIdentityManager} you should use  {@linkcode ArcGISIdentityManager.destroy} instead. Cannot revoke API keys or tokens generated by {@linkcode ApplicationCredentialsManager}.\n *\n * See [`revokeToken`](https://developers.arcgis.com/rest/users-groups-and-items/revoke-token.htm) on the ArcGIS REST API for more details.\n */\nexport function revokeToken(\n  requestOptions: IRevokeTokenOptions\n): Promise<IRevokeTokenResponse> {\n  const url = `${cleanUrl(\n    requestOptions.portal || \"https://www.arcgis.com/sharing/rest\"\n  )}/oauth2/revokeToken/`;\n\n  const token = requestOptions.token;\n  const clientId = requestOptions.clientId;\n\n  delete requestOptions.portal;\n  delete requestOptions.clientId;\n  delete requestOptions.token;\n\n  const options: IRequestOptions = {\n    ...requestOptions,\n    httpMethod: \"POST\",\n    params: {\n      client_id: clientId,\n      auth_token: token\n    }\n  };\n\n  return request(url, options).then((response) => {\n    if (!response.success) {\n      throw new ArcGISRequestError(\n        \"Unable to revoke token\",\n        500,\n        response,\n        url,\n        options\n      );\n    }\n    return response;\n  });\n}\n","/**\n * Encodes a `Uint8Array` to base 64. Used internally for hashing the `code_verifier` and `code_challenge` for PKCE.\n */\nexport function base64UrlEncode(value: any, win = window) {\n  /* istanbul ignore next: must pass in a mockwindow for tests so we can't cover the other branch */\n  if (!win && window) {\n    win = window;\n  }\n  return win\n    .btoa(String.fromCharCode.apply(null, value))\n    .replace(/\\+/g, \"-\") // replace + with -\n    .replace(/\\//g, \"_\") // replace / with _\n    .replace(/=+$/, \"\"); // trim trailing =\n}\n","import { base64UrlEncode } from \"./base-64-url.js\";\n\n/**\n * Utility to generate a random string to use as our `code_verifier`\n *\n * @param win the global `window` object for accepting a mock while testing.\n */\nexport function generateRandomString(win?: any) {\n  /* istanbul ignore next: must pass in a mockwindow for tests so we can't cover the other branch */\n  if (!win && window) {\n    win = window;\n  }\n\n  const randomBytes = win.crypto.getRandomValues(new Uint8Array(32));\n  return base64UrlEncode(randomBytes);\n}\n","/* Copyright (c) 2017-2019 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport * as http from \"http\";\nimport { ArcGISAuthError, request } from \"./request.js\";\nimport { IRequestOptions } from \"./utils/IRequestOptions.js\";\nimport { IAuthenticationManager } from \"./utils/IAuthenticationManager.js\";\nimport { ITokenRequestOptions } from \"./utils/ITokenRequestOptions.js\";\nimport { decodeQueryString } from \"./utils/decode-query-string.js\";\nimport { encodeQueryString } from \"./utils/encode-query-string.js\";\nimport { IUser } from \"./types/user.js\";\nimport { fetchToken, IFetchTokenResponse } from \"./fetch-token.js\";\nimport { canUseOnlineToken, isFederated } from \"./federation-utils.js\";\nimport { IAppAccess, validateAppAccess } from \"./validate-app-access.js\";\nimport { cleanUrl } from \"./utils/clean-url.js\";\nimport { revokeToken } from \"./revoke-token.js\";\nimport { generateCodeChallenge } from \"./utils/generate-code-challenge.js\";\nimport { generateRandomString } from \"./utils/generate-random-string.js\";\nimport { ArcGISAccessDeniedError } from \"./utils/ArcGISAccessDeniedError.js\";\nimport {\n  ArcGISTokenRequestError,\n  ArcGISTokenRequestErrorCodes\n} from \"./utils/ArcGISTokenRequestError.js\";\nimport { NODEJS_DEFAULT_REFERER_HEADER } from \"./index.js\";\nimport { AuthenticationManagerBase } from \"./AuthenticationManagerBase.js\";\n\n/**\n * distinguish between an ICredential and IArcGISIdentityManagerOptions\n */\nfunction isCredential(credential: any): credential is ICredential {\n  return (\n    typeof credential.userId === \"string\" ||\n    typeof credential.expires === \"number\"\n  );\n}\n\n/**\n * Options for {@linkcode ArcGISIdentityManager.fromToken}.\n */\nexport interface IFromTokenOptions {\n  /**\n   * The token you want to create the {@linkcode ArcGISIdentityManager} instance with.\n   */\n  token: string;\n  /**\n   * Date when this token will expire.\n   */\n  tokenExpires?: Date;\n  /**\n   * The portal that the token was generated from. Defaults to `https://www.arcgis.com/sharing/rest`. Required if you are not using the default portal.\n   */\n  portal?: string;\n  /**\n   * If the token is for a specific instance of ArcGIS Server, set `portal` to `null` or `undefined` and set `server` the URL of the ArcGIS Server.\n   */\n  server?: string;\n  /**\n   * Optionally set the username. Recommended if available.\n   */\n  username?: string;\n  /**\n   * Optional client ID. Used for refreshing expired tokens.\n   */\n  clientId?: string;\n  /**\n   * Optional set a valid redirect URL for the registered client ID. Used internally to refresh expired tokens.\n   */\n  redirectUri?: string;\n}\n\n/**\n * Options for {@linkcode ArcGISIdentityManager.signIn}.\n */\nexport interface ISignInOptions {\n  username: string;\n  password: string;\n  portal?: string;\n  referer?: string;\n}\n\nexport type AuthenticationProvider =\n  | \"arcgis\"\n  | \"facebook\"\n  | \"google\"\n  | \"github\"\n  | \"apple\";\n\n/**\n * Represents a [credential](https://developers.arcgis.com/javascript/latest/api-reference/esri-identity-Credential.html)\n * object used to access a secure ArcGIS resource.\n */\nexport interface ICredential {\n  expires: number;\n  server: string;\n  ssl: boolean;\n  token: string;\n  userId: string;\n}\n\n/**\n * Represents the [`ServerInfo`](https://developers.arcgis.com/javascript/latest/api-reference/esri-identity-ServerInfo.html) class\n * in the ArcGIS API for JavaScript.\n */\nexport interface IServerInfo {\n  server: string;\n  hasPortal: boolean;\n  hasServer: boolean;\n}\n\n/**\n * Options for static OAuth 2.0 helper methods on `ArcGISIdentityManager`.\n */\nexport interface IOAuth2Options {\n  /**\n   * Client ID of your application. Can be obtained by registering an application\n   * on [ArcGIS for Developers](https://developers.arcgis.com/documentation/core-concepts/security-and-authentication/signing-in-arcgis-online-users/#registering-your-application),\n   * [ArcGIS Online](http://doc.arcgis.com/en/arcgis-online/share-maps/add-items.htm#ESRI_SECTION1_0D1B620254F745AE84F394289F8AF44B) or on your instance of ArcGIS Enterprise.\n   */\n  clientId: string;\n\n  /**\n   * A valid URL to redirect to after a user authorizes your application. Can be set on [ArcGIS for Developers](https://developers.arcgis.com/documentation/core-concepts/security-and-authentication/signing-in-arcgis-online-users/#registering-your-application),\n   * [ArcGIS Online](http://doc.arcgis.com/en/arcgis-online/share-maps/add-items.htm#ESRI_SECTION1_0D1B620254F745AE84F394289F8AF44B) or on your instance of ArcGIS Enterprise.\n   */\n  redirectUri: string;\n\n  /**\n   * The ArcGIS Online or ArcGIS Enterprise portal you want to use for authentication. Defaults to `https://www.arcgis.com/sharing/rest` for the ArcGIS Online portal.\n   */\n  portal?: string;\n\n  /**\n   * ArcGIS Authentication is used by default. Specifying an alternative will take users directly to the corresponding provider's OAuth page.\n   */\n\n  provider?: AuthenticationProvider;\n\n  /**\n   * The requested validity in minutes for a refresh token/access token. Defaults to 20160 (2 weeks).\n   *\n   * When using PKCE or server-based OAuth this will control the duration of the refresh token. In this scenario, access tokens will always have a 30 minute validity.\n   *\n   * When using implicit auth (`pkce: false`) in {@linkcode ArcGISIdentityManager.beginOAuth2}, this controls the duration of the access token and no refresh token will be granted.\n   */\n  expiration?: number;\n\n  /**\n   * If `true` will use the PKCE oAuth 2.0 extension spec in to authorize the user and obtain a token. A value of `false` will use the deprecated oAuth 2.0 implicit grant type.\n   *\n   * @browserOnly\n   */\n  pkce?: boolean;\n\n  /**\n   * Determines whether to open the authorization window in a new tab/window or in the current window.\n   *\n   * @browserOnly\n   */\n  popup?: boolean;\n\n  /**\n   * The window features passed to [window.open()](https://developer.mozilla.org/en-US/docs/Web/API/Window/open) when `popup` is true. Defaults to `height=400,width=600,menubar=no,location=yes,resizable=yes,scrollbars=yes,status=yes`\n   *\n   * @browserOnly\n   */\n  popupWindowFeatures?: string;\n\n  /**\n   * The locale assumed to render the login page.\n   *\n   * @browserOnly\n   */\n  locale?: string;\n\n  /**\n   * Sets the color theme of the oAuth 2.0 authorization screen. Will use the system preference or a light theme by default.\n   */\n  style?: \"\" | \"light\" | \"dark\";\n\n  /**\n   * Custom value for oAuth 2.0 state. A random identifier will be generated if this is not passed.\n   */\n  state?: string;\n\n  [key: string]: any;\n}\n\n/**\n * Options for the {@linkcode ArcGISIdentityManager} constructor.\n */\nexport interface IArcGISIdentityManagerOptions {\n  /**\n   * Client ID of your application. Can be obtained by registering an application\n   * on [ArcGIS for Developers](https://developers.arcgis.com/documentation/core-concepts/security-and-authentication/signing-in-arcgis-online-users/#registering-your-application),\n   * [ArcGIS Online](http://doc.arcgis.com/en/arcgis-online/share-maps/add-items.htm#ESRI_SECTION1_0D1B620254F745AE84F394289F8AF44B) or on your instance of ArcGIS Enterprise.\n   */\n  clientId?: string;\n\n  /**\n   * A valid URL to redirect to after a user authorizes your application. Can be set on [ArcGIS for Developers](https://developers.arcgis.com/documentation/core-concepts/security-and-authentication/signing-in-arcgis-online-users/#registering-your-application),\n   * [ArcGIS Online](http://doc.arcgis.com/en/arcgis-online/share-maps/add-items.htm#ESRI_SECTION1_0D1B620254F745AE84F394289F8AF44B) or on your instance of ArcGIS Enterprise.\n   */\n  redirectUri?: string;\n\n  /**\n   * OAuth 2.0 refresh token.\n   */\n  refreshToken?: string;\n\n  /**\n   * Expiration date of the `refreshToken`\n   */\n  refreshTokenExpires?: Date;\n\n  /**\n   * The authenticated user's username. Guaranteed to be unique across ArcGIS Online or your instance of ArcGIS Enterprise.\n   */\n  username?: string;\n\n  /**\n   * Password for this user. Used in CLI apps where users cannot do OAuth 2.0.\n   */\n  password?: string;\n\n  /**\n   * OAuth 2.0 access token.\n   */\n  token?: string;\n\n  /**\n   * Expiration date for the `token`\n   */\n  tokenExpires?: Date;\n\n  /**\n   * The ArcGIS Online or ArcGIS Enterprise portal you want to use for authentication. Defaults to `https://www.arcgis.com/sharing/rest` for the ArcGIS Online portal.\n   */\n  portal?: string;\n\n  /**\n   * This value is set to true automatically if the ArcGIS Organization requires that requests be made over https.\n   */\n  ssl?: boolean;\n\n  /**\n   * ArcGIS Authentication is used by default. Specifying an alternative will take users directly to the corresponding provider's OAuth page.\n   */\n  provider?: AuthenticationProvider;\n\n  /**\n   * Duration of requested token validity in minutes. Used when requesting tokens with `username` and `password` or when validating the identity of unknown servers. Defaults to two weeks.\n   */\n  tokenDuration?: number;\n\n  /**\n   * An unfederated ArcGIS Server instance known to recognize credentials supplied manually.\n   *\n   * ```js\n   * {\n   *   server: \"https://sampleserver6.arcgisonline.com/arcgis\",\n   *   token: \"SOSlV3v..\",\n   *   tokenExpires: new Date(1545415669763)\n   * }\n   * ```\n   */\n  server?: string;\n\n  /**\n   * The referer to use when getting the token with `.signIn()`\n   */\n  referer?: string;\n}\n\n/**\n * Used to authenticate both ArcGIS Online and ArcGIS Enterprise users. `ArcGISIdentityManager` includes helper methods for [OAuth 2.0](https://developers.arcgis.com/documentation/mapping-apis-and-services/security/oauth-2.0/) in both browser and server applications.\n *\n * **It is not recommended to construct `ArcGISIdentityManager` directly**. Instead there are several static methods used for specific workflows. The 2 primary workflows relate to oAuth 2.0:\n *\n * * {@linkcode ArcGISIdentityManager.beginOAuth2} and {@linkcode ArcGISIdentityManager.completeOAuth2} for oAuth 2.0 in browser-only environment.\n * * {@linkcode ArcGISIdentityManager.authorize} and {@linkcode ArcGISIdentityManager.exchangeAuthorizationCode} for oAuth 2.0 for server-enabled application.\n *\n * Other more specialized helpers for less common workflows also exist:\n *\n * * {@linkcode ArcGISIdentityManager.fromToken} for when you have an existing token from another source and would like create an `ArcGISIdentityManager` instance.\n * * {@linkcode ArcGISIdentityManager.fromCredential} for creating  an `ArcGISIdentityManager` instance from a `Credentials` object in the ArcGIS JS API `IdentityManager`\n * * {@linkcode ArcGISIdentityManager.signIn} for authenticating directly with a user's username and password for environments with a user interface for oAuth 2.0.\n *\n * Once a manager is created there are additional utilities:\n *\n * * {@linkcode ArcGISIdentityManager.serialize} can be used to create a JSON object representing an instance of `ArcGISIdentityManager`\n * * {@linkcode ArcGISIdentityManager.deserialize} will create a new `ArcGISIdentityManager` from a JSON object created with {@linkcode ArcGISIdentityManager.serialize}\n * * {@linkcode ArcGISIdentityManager.destroy} or {@linkcode ArcGISIdentityManager.signOut} will invalidate any tokens in use by the  `ArcGISIdentityManager`.\n */\nexport class ArcGISIdentityManager\n  extends AuthenticationManagerBase\n  implements IAuthenticationManager\n{\n  /**\n   * The current ArcGIS Online or ArcGIS Enterprise `token`.\n   */\n  get token() {\n    return this._token;\n  }\n\n  /**\n   * The expiration time of the current `token`.\n   */\n  get tokenExpires() {\n    return this._tokenExpires;\n  }\n\n  /**\n   * The current token to ArcGIS Online or ArcGIS Enterprise.\n   */\n  get refreshToken() {\n    return this._refreshToken;\n  }\n\n  /**\n   * The expiration time of the current `refreshToken`.\n   */\n  get refreshTokenExpires() {\n    return this._refreshTokenExpires;\n  }\n\n  /**\n   * Returns `true` if these credentials can be refreshed and `false` if it cannot.\n   */\n  get canRefresh() {\n    if (this.username && this.password) {\n      return true;\n    }\n\n    if (this.clientId && this.refreshToken && this.redirectUri) {\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Begins a new browser-based OAuth 2.0 sign in. If `options.popup` is `true` the authentication window will open in a new tab/window. Otherwise, the user will be redirected to the authorization page in their current tab/window and the function will return `undefined`.\n   *\n   * If `popup` is `true` (the default) this method will return a `Promise` that resolves to an `ArcGISIdentityManager` instance and you must call {@linkcode ArcGISIdentityManager.completeOAuth2()} on the page defined in the `redirectUri`. Otherwise it will return undefined and the {@linkcode ArcGISIdentityManager.completeOAuth2()} method will return a `Promise` that resolves to an `ArcGISIdentityManager` instance.\n   *\n   * A {@linkcode ArcGISAccessDeniedError} error will be thrown if the user denies the request on the authorization screen.\n   *\n   * @browserOnly\n   */\n  public static beginOAuth2(\n    options: IOAuth2Options,\n    win?: any\n  ): Promise<ArcGISIdentityManager> | undefined {\n    /* istanbul ignore next: must pass in a mockwindow for tests so we can't cover the other branch */\n    if (!win && window) {\n      win = window;\n    }\n\n    const {\n      portal,\n      provider,\n      clientId,\n      expiration,\n      redirectUri,\n      popup,\n      popupWindowFeatures,\n      locale,\n      params,\n      style,\n      pkce,\n      state\n    }: IOAuth2Options = {\n      ...{\n        portal: \"https://www.arcgis.com/sharing/rest\",\n        provider: \"arcgis\",\n        expiration: 20160,\n        popup: true,\n        popupWindowFeatures:\n          \"height=400,width=600,menubar=no,location=yes,resizable=yes,scrollbars=yes,status=yes\",\n        locale: \"\",\n        style: \"\",\n        pkce: true\n      },\n      ...options\n    };\n\n    /**\n     * Generate a  random string for the `state` param and store it in local storage. This is used\n     * to validate that all parts of the oAuth process were performed on the same client.\n     */\n    const stateId = state || generateRandomString(win);\n    const stateStorageKey = `ARCGIS_REST_JS_AUTH_STATE_${clientId}`;\n\n    win.localStorage.setItem(stateStorageKey, stateId);\n\n    // Start setting up the URL to the authorization screen.\n    let authorizeUrl = `${cleanUrl(portal)}/oauth2/authorize`;\n    const authorizeUrlParams: any = {\n      client_id: clientId,\n      response_type: pkce ? \"code\" : \"token\",\n      expiration: expiration,\n      redirect_uri: redirectUri,\n      state: JSON.stringify({\n        id: stateId,\n        originalUrl: win.location.href // this is used to reset the URL back the original URL upon return\n      }),\n      locale: locale,\n      style: style\n    };\n\n    // If we are authorizing through a specific social provider update the params and base URL.\n    if (provider !== \"arcgis\") {\n      authorizeUrl = `${cleanUrl(portal)}/oauth2/social/authorize`;\n      authorizeUrlParams.socialLoginProviderName = provider;\n      authorizeUrlParams.autoAccountCreateForSocial = true;\n    }\n\n    /**\n     * set a value that will be set to a promise which will later resolve when we are ready\n     * to send users to the authorization page.\n     */\n    let setupAuth;\n\n    if (pkce) {\n      /**\n       * If we are authenticating with PKCE we need to generate the code challenge which is\n       * async so we generate the code challenge and assign the resulting Promise to `setupAuth`\n       */\n      const codeVerifier = generateRandomString(win);\n      const codeVerifierStorageKey = `ARCGIS_REST_JS_CODE_VERIFIER_${clientId}`;\n\n      win.localStorage.setItem(codeVerifierStorageKey, codeVerifier);\n\n      setupAuth = generateCodeChallenge(codeVerifier, win).then(function (\n        codeChallenge\n      ) {\n        authorizeUrlParams.code_challenge_method = codeChallenge\n          ? \"S256\"\n          : \"plain\";\n\n        authorizeUrlParams.code_challenge = codeChallenge\n          ? codeChallenge\n          : codeVerifier;\n      });\n    } else {\n      /**\n       * If we aren't authenticating with PKCE we can just assign a resolved promise to `setupAuth`\n       */\n      setupAuth = Promise.resolve();\n    }\n\n    /**\n     * Once we are done setting up with (for PKCE) we can start the auth process.\n     */\n    return setupAuth.then(() => {\n      // combine the authorize URL and params\n      authorizeUrl = `${authorizeUrl}?${encodeQueryString(authorizeUrlParams)}`;\n\n      // append additional params passed by the user\n      if (params) {\n        authorizeUrl = `${authorizeUrl}&${encodeQueryString(params)}`;\n      }\n\n      if (popup) {\n        // If we are authenticating a popup we need to return a Promise that will resolve to an ArcGISIdentityManager later.\n        return new Promise((resolve, reject) => {\n          // Add an event listener to listen for when a user calls `ArcGISIdentityManager.completeOAuth2()` in the popup.\n          win.addEventListener(\n            `arcgis-rest-js-popup-auth-${clientId}`,\n            (e: CustomEvent<any>) => {\n              if (e.detail.error === \"access_denied\") {\n                const error = new ArcGISAccessDeniedError();\n                reject(error);\n                return error;\n              }\n\n              if (e.detail.errorMessage) {\n                const error = new ArcGISAuthError(\n                  e.detail.errorMessage,\n                  e.detail.error\n                );\n                reject(error);\n                return error;\n              }\n\n              resolve(\n                new ArcGISIdentityManager({\n                  clientId,\n                  portal,\n                  ssl: e.detail.ssl,\n                  token: e.detail.token,\n                  tokenExpires: e.detail.expires,\n                  username: e.detail.username,\n                  refreshToken: e.detail.refreshToken,\n                  refreshTokenExpires: e.detail.refreshTokenExpires,\n                  redirectUri\n                })\n              );\n            },\n            {\n              once: true\n            }\n          );\n\n          // open the popup\n          win.open(authorizeUrl, \"oauth-window\", popupWindowFeatures);\n\n          win.dispatchEvent(new CustomEvent(\"arcgis-rest-js-popup-auth-start\"));\n        });\n      } else {\n        // If we aren't authenticating with a popup just send the user to the authorization page.\n        win.location.href = authorizeUrl;\n        return undefined;\n      }\n    });\n  }\n\n  /**\n   * Completes a browser-based OAuth 2.0 sign in. If `options.popup` is `true` the user\n   * will be returned to the previous window and the popup will close. Otherwise a new `ArcGISIdentityManager` will be returned. You must pass the same values for `clientId`, `popup`, `portal`, and `pkce` as you used in `beginOAuth2()`.\n   *\n   * A {@linkcode ArcGISAccessDeniedError} error will be thrown if the user denies the request on the authorization screen.\n   * @browserOnly\n   */\n  public static completeOAuth2(options: IOAuth2Options, win?: any) {\n    /* istanbul ignore next: must pass in a mockwindow for tests so we can't cover the other branch */\n    if (!win && window) {\n      win = window;\n    }\n\n    // pull out necessary options\n    const { portal, clientId, popup, pkce, redirectUri }: IOAuth2Options = {\n      ...{\n        portal: \"https://www.arcgis.com/sharing/rest\",\n        popup: true,\n        pkce: true\n      },\n      ...options\n    };\n\n    // pull the saved state id out of local storage\n    const stateStorageKey = `ARCGIS_REST_JS_AUTH_STATE_${clientId}`;\n    const stateId = win.localStorage.getItem(stateStorageKey);\n\n    // get the params provided by the server and compare the server state with the client saved state\n    const params = decodeQueryString(\n      pkce\n        ? win.location.search.replace(/^\\?/, \"\")\n        : win.location.hash.replace(/^#/, \"\")\n    );\n\n    const state = params && params.state ? JSON.parse(params.state) : undefined;\n\n    function reportError(\n      errorMessage: string,\n      error: string,\n      originalUrl?: string\n    ) {\n      win.localStorage.removeItem(stateStorageKey);\n\n      if (popup && win.opener) {\n        win.opener.dispatchEvent(\n          new CustomEvent(`arcgis-rest-js-popup-auth-${clientId}`, {\n            detail: {\n              error,\n              errorMessage\n            }\n          })\n        );\n\n        win.close();\n\n        return;\n      }\n\n      if (originalUrl) {\n        win.history.replaceState(win.history.state, \"\", originalUrl);\n      }\n\n      if (error === \"access_denied\") {\n        return Promise.reject(new ArcGISAccessDeniedError());\n      }\n\n      return Promise.reject(new ArcGISAuthError(errorMessage, error));\n    }\n\n    // create a function to create the final ArcGISIdentityManager from the token info.\n    function createManager(\n      oauthInfo: IFetchTokenResponse,\n      originalUrl: string\n    ) {\n      win.localStorage.removeItem(stateStorageKey);\n\n      if (popup && win.opener) {\n        win.opener.dispatchEvent(\n          new CustomEvent(`arcgis-rest-js-popup-auth-${clientId}`, {\n            detail: {\n              ...oauthInfo\n            }\n          })\n        );\n\n        win.close();\n\n        return;\n      }\n\n      win.history.replaceState(win.history.state, \"\", originalUrl);\n\n      return new ArcGISIdentityManager({\n        clientId,\n        portal,\n        ssl: oauthInfo.ssl,\n        token: oauthInfo.token,\n        tokenExpires: oauthInfo.expires,\n        username: oauthInfo.username,\n        refreshToken: oauthInfo.refreshToken,\n        refreshTokenExpires: oauthInfo.refreshTokenExpires,\n        // At 4.0.0 it was possible (in JS code) to not pass redirectUri and fallback to win.location.href, however this broke support for redirect URIs with query params.\n        // Now similar to 3.x.x you must pass the redirectUri parameter explicitly. See https://github.com/Esri/arcgis-rest-js/issues/995\n        redirectUri:\n          redirectUri ||\n          /* istanbul ignore next: TypeScript wont compile if we omit redirectUri */ location.href.replace(\n            location.search,\n            \"\"\n          )\n      });\n    }\n\n    if (!stateId || !state) {\n      return reportError(\n        \"No authentication state was found, call `ArcGISIdentityManager.beginOAuth2(...)` to start the authentication process.\",\n        \"no-auth-state\"\n      );\n    }\n\n    if (state.id !== stateId) {\n      return reportError(\n        \"Saved client state did not match server sent state.\",\n        \"mismatched-auth-state\"\n      );\n    }\n\n    if (params.error) {\n      const error = params.error;\n      const errorMessage = params.error_description || \"Unknown error\";\n\n      return reportError(errorMessage, error, state.originalUrl);\n    }\n    /**\n     * If we are using PKCE the authorization code will be in the query params.\n     * For implicit grants the token will be in the hash.\n     */\n    if (pkce && params.code) {\n      const tokenEndpoint = cleanUrl(`${portal}/oauth2/token/`);\n\n      const codeVerifierStorageKey = `ARCGIS_REST_JS_CODE_VERIFIER_${clientId}`;\n      const codeVerifier = win.localStorage.getItem(codeVerifierStorageKey);\n      win.localStorage.removeItem(codeVerifierStorageKey);\n\n      // exchange our auth code for a token + refresh token\n      return fetchToken(tokenEndpoint, {\n        httpMethod: \"POST\",\n        params: {\n          client_id: clientId,\n          code_verifier: codeVerifier,\n          grant_type: \"authorization_code\",\n          // using location.href here does not support query params but shipped with 4.0.0. See https://github.com/Esri/arcgis-rest-js/issues/995\n          redirect_uri:\n            redirectUri || location.href.replace(location.search, \"\"),\n          code: params.code\n        }\n      })\n        .then((tokenResponse) => {\n          return createManager(\n            { ...tokenResponse, ...state },\n            state.originalUrl\n          );\n        })\n        .catch((e) => {\n          return reportError(e.originalMessage, e.code, state.originalUrl);\n        });\n    }\n\n    if (!pkce && params.access_token) {\n      return Promise.resolve(\n        createManager(\n          {\n            token: params.access_token,\n            expires: new Date(\n              Date.now() + parseInt(params.expires_in, 10) * 1000\n            ),\n            ssl: params.ssl === \"true\",\n            username: params.username,\n            ...state\n          },\n          state.originalUrl\n        )\n      );\n    }\n\n    return reportError(\"Unknown error\", \"oauth-error\", state.originalUrl);\n  }\n\n  /**\n   * Request credentials information from the parent application\n   *\n   * When an application is embedded into another application via an IFrame, the embedded app can\n   * use `window.postMessage` to request credentials from the host application. This function wraps\n   * that behavior.\n   *\n   * The ArcGIS API for Javascript has this built into the Identity Manager as of the 4.19 release.\n   *\n   * Note: The parent application will not respond if the embedded app's origin is not:\n   * - the same origin as the parent or *.arcgis.com (JSAPI)\n   * - in the list of valid child origins (REST-JS)\n   *\n   *\n   * @param parentOrigin origin of the parent frame. Passed into the embedded application as `parentOrigin` query param\n   * @browserOnly\n   */\n  public static fromParent(parentOrigin: string, win?: any): Promise<any> {\n    /* istanbul ignore next: must pass in a mockwindow for tests so we can't cover the other branch */\n    if (!win && window) {\n      win = window;\n    }\n    // Declare handler outside of promise scope so we can detach it\n    let handler: (event: any) => void;\n    // return a promise that will resolve when the handler receives\n    // session information from the correct origin\n    return new Promise((resolve, reject) => {\n      // create an event handler that just wraps the parentMessageHandler\n      handler = (event: any) => {\n        // ensure we only listen to events from the parent\n        if (event.source === win.parent && event.data) {\n          try {\n            return resolve(ArcGISIdentityManager.parentMessageHandler(event));\n          } catch (err) {\n            return reject(err);\n          }\n        }\n      };\n      // add listener\n      win.addEventListener(\"message\", handler, false);\n      win.parent.postMessage(\n        { type: \"arcgis:auth:requestCredential\" },\n        parentOrigin\n      );\n    }).then((manager) => {\n      win.removeEventListener(\"message\", handler, false);\n      return manager;\n    });\n  }\n\n  /**\n   * Begins a new server-based OAuth 2.0 sign in. This will redirect the user to\n   * the ArcGIS Online or ArcGIS Enterprise authorization page.\n   *\n   * @nodeOnly\n   */\n  public static authorize(\n    options: IOAuth2Options,\n    response: http.ServerResponse\n  ) {\n    const { portal, clientId, expiration, redirectUri, state }: IOAuth2Options =\n      {\n        ...{ portal: \"https://arcgis.com/sharing/rest\", expiration: 20160 },\n        ...options\n      };\n\n    const queryParams: any = {\n      client_id: clientId,\n      expiration,\n      response_type: \"code\",\n      redirect_uri: redirectUri\n    };\n\n    if (state) {\n      queryParams.state = state;\n    }\n\n    const url = `${portal}/oauth2/authorize?${encodeQueryString(queryParams)}`;\n\n    response.writeHead(301, {\n      Location: url\n    });\n\n    response.end();\n  }\n\n  /**\n   * Completes the server-based OAuth 2.0 sign in process by exchanging the `authorizationCode`\n   * for a `access_token`.\n   *\n   * @nodeOnly\n   */\n  public static exchangeAuthorizationCode(\n    options: IOAuth2Options,\n    authorizationCode: string\n  ): Promise<ArcGISIdentityManager> {\n    const { portal, clientId, redirectUri }: IOAuth2Options = {\n      ...{\n        portal: \"https://www.arcgis.com/sharing/rest\"\n      },\n      ...options\n    };\n\n    return fetchToken(`${portal}/oauth2/token`, {\n      params: {\n        grant_type: \"authorization_code\",\n        client_id: clientId,\n        redirect_uri: redirectUri,\n        code: authorizationCode\n      }\n    })\n      .then((response) => {\n        return new ArcGISIdentityManager({\n          clientId,\n          portal,\n          ssl: response.ssl,\n          redirectUri,\n          refreshToken: response.refreshToken,\n          refreshTokenExpires: response.refreshTokenExpires,\n          token: response.token,\n          tokenExpires: response.expires,\n          username: response.username\n        });\n      })\n      .catch((e) => {\n        throw new ArcGISTokenRequestError(\n          e.message,\n          ArcGISTokenRequestErrorCodes.REFRESH_TOKEN_EXCHANGE_FAILED,\n          e.response,\n          e.url,\n          e.options\n        );\n      });\n  }\n\n  /**\n   * Deserializes a JSON string previously created with {@linkcode ArcGISIdentityManager.serialize} to an {@linkcode ArcGISIdentityManager} instance.\n   *\n   * ```js\n   * // create an ArcGISIdentityManager instance\n   * const serializedString = manager.serialize();\n   * localStorage.setItem(\"arcgis-identity-manager\", serializedString);\n   *\n   * // later, you can retrieve the manager from localStorage\n   * const serializedString = localStorage.getItem(\"arcgis-identity-manager\");\n   * const manager = ArcGISIdentityManager.deserialize(serializedString);\n   * ```\n   *\n   * @param str A JSON string representing an instance of `ArcGISIdentityManager`. This can be created with {@linkcode ArcGISIdentityManager.serialize}.\n   */\n  public static deserialize(str: string) {\n    const options = JSON.parse(str);\n    return new ArcGISIdentityManager({\n      clientId: options.clientId,\n      refreshToken: options.refreshToken,\n      refreshTokenExpires: options.refreshTokenExpires\n        ? new Date(options.refreshTokenExpires)\n        : undefined,\n      username: options.username,\n      password: options.password,\n      token: options.token,\n      tokenExpires: options.tokenExpires\n        ? new Date(options.tokenExpires)\n        : undefined,\n      portal: options.portal,\n      ssl: options.ssl,\n      tokenDuration: options.tokenDuration,\n      redirectUri: options.redirectUri,\n      server: options.server\n    });\n  }\n\n  /**\n   * Translates authentication from the format used in the [`IdentityManager` class in the ArcGIS API for JavaScript](https://developers.arcgis.com/javascript/latest/api-reference/esri-identity-Credential.html).\n   *\n   * You will need to call both [`IdentityManger.findCredential`](https://developers.arcgis.com/javascript/latest/api-reference/esri-identity-IdentityManager.html#findCredential) and [`IdentityManger.findServerInfo`](https://developers.arcgis.com/javascript/latest/api-reference/esri-identity-IdentityManager.html#findServerInfo) to obtain both parameters for this method.\n   *\n   * This method can be used with {@linkcode ArcGISIdentityManager.toCredential} to interop with the ArcGIS API for JavaScript.\n   *\n   * ```js\n   * require([\"esri/id\"], (esriId) => {\n   *   const credential = esriId.findCredential(\"https://www.arcgis.com/sharing/rest\");\n   *   const serverInfo = esriId.findServerInfo(\"https://www.arcgis.com/sharing/rest\");\n   *\n   *   const manager = ArcGISIdentityManager.fromCredential(credential, serverInfo);\n   * });\n   * ```\n   *\n   * @returns ArcGISIdentityManager\n   */\n  public static fromCredential(\n    credential: ICredential,\n    serverInfo: IServerInfo\n  ) {\n    // At ArcGIS Online 9.1, credentials no longer include the ssl and expires properties\n    // Here, we provide default values for them to cover this condition\n    const ssl = typeof credential.ssl !== \"undefined\" ? credential.ssl : true;\n    const expires = credential.expires || Date.now() + 7200000; /* 2 hours */\n\n    if (serverInfo.hasServer) {\n      return new ArcGISIdentityManager({\n        server: credential.server,\n        ssl,\n        token: credential.token,\n        username: credential.userId,\n        tokenExpires: new Date(expires)\n      });\n    }\n    return new ArcGISIdentityManager({\n      portal: cleanUrl(\n        credential.server.includes(\"sharing/rest\")\n          ? credential.server\n          : credential.server + `/sharing/rest`\n      ),\n      ssl,\n      token: credential.token,\n      username: credential.userId,\n      tokenExpires: new Date(expires)\n    });\n  }\n\n  /**\n   * Handle the response from the parent\n   * @param event DOM Event\n   */\n  private static parentMessageHandler(event: any): ArcGISIdentityManager {\n    if (event.data.type === \"arcgis:auth:credential\") {\n      const credential = event.data.credential as ICredential;\n      // at 4.x - 4.5 we were passing .toJSON() instead of .toCredential()\n      // so we attempt to handle either payload for backwards compatibility\n      // but at the next breaking change we should only support an ICredential\n      return isCredential(credential)\n        ? ArcGISIdentityManager.fromCredential(credential, {\n            hasPortal: true,\n            hasServer: false,\n            server: credential.server\n          } as IServerInfo)\n        : new ArcGISIdentityManager(credential);\n    }\n    if (event.data.type === \"arcgis:auth:error\") {\n      const err = new Error(event.data.error.message);\n      err.name = event.data.error.name;\n      throw err;\n    } else {\n      throw new Error(\"Unknown message type.\");\n    }\n  }\n\n  /**\n   * Revokes all active tokens for a provided {@linkcode ArcGISIdentityManager}. The can be considered the equivalent to signing the user out of your application.\n   */\n  public static destroy(manager: ArcGISIdentityManager) {\n    return revokeToken({\n      clientId: manager.clientId,\n      portal: manager.portal,\n      token: manager.refreshToken || manager.token\n    });\n  }\n\n  /**\n   * Create a  {@linkcode ArcGISIdentityManager} from an existing token. Useful for when you have a users token from a different authentication system and want to get a  {@linkcode ArcGISIdentityManager}.\n   */\n  public static fromToken(\n    options: IFromTokenOptions\n  ): Promise<ArcGISIdentityManager> {\n    const manager = new ArcGISIdentityManager(options);\n\n    return manager.getUser().then(() => {\n      return manager;\n    });\n  }\n\n  /**\n   * Initialize a {@linkcode ArcGISIdentityManager} with a user's `username` and `password`. **This method is intended ONLY for applications without a user interface such as CLI tools.**.\n   *\n   * If possible you should use {@linkcode ArcGISIdentityManager.beginOAuth2} to authenticate users in a browser or {@linkcode ArcGISIdentityManager.authorize} for authenticating users with a web server.\n   */\n  public static signIn(options: ISignInOptions) {\n    const manager = new ArcGISIdentityManager(options);\n\n    return manager.getUser().then(() => {\n      return manager;\n    });\n  }\n\n  /**\n   * Client ID being used for authentication if provided in the `constructor`.\n   */\n  public readonly clientId: string;\n\n  /**\n   * The currently authenticated user's password if provided in the `constructor`.\n   */\n  public readonly password: string;\n\n  /**\n   * The current portal the user is authenticated with.\n   */\n  public readonly portal: string;\n\n  /**\n   * This value is set to true automatically if the ArcGIS Organization requires that requests be made over https.\n   */\n  public readonly ssl: boolean;\n\n  /**\n   * The authentication provider to use.\n   */\n  public readonly provider: AuthenticationProvider;\n\n  /**\n   * Determines how long new tokens requested are valid.\n   */\n  public readonly tokenDuration: number;\n\n  /**\n   * A valid redirect URI for this application if provided in the `constructor`.\n   */\n  public readonly redirectUri: string;\n\n  /**\n   * An unfederated ArcGIS Server instance known to recognize credentials supplied manually.\n   *\n   * ```js\n   * {\n   *   server: \"https://sampleserver6.arcgisonline.com/arcgis\",\n   *   token: \"SOSlV3v..\",\n   *   tokenExpires: new Date(1545415669763)\n   * }\n   * ```\n   */\n  public readonly server: string;\n\n  /**\n   * The referer to use when getting the token with `.signIn()`\n   */\n  public readonly referer: string;\n\n  /**\n   * Hydrated by a call to [getPortal()](#getPortal-summary).\n   */\n  private _portalInfo: any;\n\n  private _token: string;\n  private _tokenExpires: Date;\n  private _refreshToken: string;\n  private _refreshTokenExpires: Date;\n  private _pendingPortalRequest: Promise<any>;\n\n  /**\n   * Internal object to keep track of pending token requests. Used to prevent\n   *  duplicate token requests.\n   */\n  private _pendingTokenRequests: {\n    [key: string]: Promise<string>;\n  };\n\n  /**\n   * Internal list of tokens to 3rd party servers (federated servers) that have\n   *  been created via `generateToken`. The object key is the root URL of the server.\n   */\n  private federatedServers: {\n    [key: string]: {\n      token: string;\n      expires: Date;\n    };\n  };\n\n  /**\n   * Internal list of 3rd party domains that should receive all cookies (credentials: \"include\").\n   * Used to for PKI and IWA workflows in high security environments.\n   */\n  private trustedDomains: string[];\n\n  private _hostHandler: any;\n\n  constructor(options: IArcGISIdentityManagerOptions) {\n    super(options);\n    this.clientId = options.clientId;\n    this._refreshToken = options.refreshToken;\n    this._refreshTokenExpires = options.refreshTokenExpires;\n    this.password = options.password;\n    this._token = options.token;\n    this._tokenExpires = options.tokenExpires;\n    this.portal = options.portal\n      ? cleanUrl(options.portal)\n      : \"https://www.arcgis.com/sharing/rest\";\n    this.ssl = options.ssl;\n    this.provider = options.provider || \"arcgis\";\n    this.tokenDuration = options.tokenDuration || 20160;\n    this.redirectUri = options.redirectUri;\n    this.server = options.server;\n    this.referer = options.referer;\n\n    this.federatedServers = {};\n    this.trustedDomains = [];\n\n    // if a non-federated server was passed explicitly, it should be trusted.\n    if (options.server) {\n      // if the url includes more than '/arcgis/', trim the rest\n      const root = this.getServerRootUrl(options.server);\n\n      this.federatedServers[root] = {\n        token: options.token,\n        expires: options.tokenExpires\n      };\n    }\n    this._pendingTokenRequests = {};\n  }\n\n  /**\n   * Returns authentication in a format useable in the [`IdentityManager.registerToken()` method in the ArcGIS API for JavaScript](https://developers.arcgis.com/javascript/latest/api-reference/esri-identity-IdentityManager.html#registerToken).\n   *\n   * This method can be used with {@linkcode ArcGISIdentityManager.fromCredential} to interop with the ArcGIS API for JavaScript.\n   *\n   * ```js\n   * require([\"esri/id\"], (esriId) => {\n   *   esriId.registerToken(manager.toCredential());\n   * })\n\n   * ```\n   *\n   * @returns ICredential\n   */\n  public toCredential(): ICredential {\n    return {\n      expires: this.tokenExpires.getTime(),\n      server: this.server || this.portal,\n      ssl: this.ssl,\n      token: this.token,\n      userId: this.username\n    };\n  }\n\n  /**\n   * Returns information about the currently logged in user's [portal](https://developers.arcgis.com/rest/users-groups-and-items/portal-self.htm). Subsequent calls will *not* result in additional web traffic.\n   *\n   * ```js\n   * manager.getPortal()\n   *   .then(response => {\n   *     console.log(portal.name); // \"City of ...\"\n   *   })\n   * ```\n   *\n   * @param requestOptions - Options for the request. NOTE: `rawResponse` is not supported by this operation.\n   * @returns A Promise that will resolve with the data from the response.\n   */\n  public getPortal(requestOptions?: IRequestOptions): Promise<any> {\n    if (this._pendingPortalRequest) {\n      return this._pendingPortalRequest;\n    } else if (this._portalInfo) {\n      return Promise.resolve(this._portalInfo);\n    } else {\n      const url = `${this.portal}/portals/self`;\n\n      const options = {\n        httpMethod: \"GET\",\n        authentication: this,\n        ...requestOptions,\n        rawResponse: false\n      } as IRequestOptions;\n\n      this._pendingPortalRequest = request(url, options).then((response) => {\n        this._portalInfo = response;\n        this._pendingPortalRequest = null;\n        return response;\n      });\n\n      return this._pendingPortalRequest;\n    }\n  }\n\n  /**\n   * Gets an appropriate token for the given URL. If `portal` is ArcGIS Online and\n   * the request is to an ArcGIS Online domain `token` will be used. If the request\n   * is to the current `portal` the current `token` will also be used. However if\n   * the request is to an unknown server we will validate the server with a request\n   * to our current `portal`.\n   */\n  public getToken(url: string, requestOptions?: ITokenRequestOptions) {\n    if (canUseOnlineToken(this.portal, url)) {\n      return this.getFreshToken(requestOptions);\n    } else if (new RegExp(this.portal, \"i\").test(url)) {\n      return this.getFreshToken(requestOptions);\n    } else {\n      return this.getTokenForServer(url, requestOptions);\n    }\n  }\n\n  /**\n   * Get application access information for the current user\n   * see `validateAppAccess` function for details\n   *\n   * @param clientId application client id\n   */\n  public validateAppAccess(clientId: string): Promise<IAppAccess> {\n    return this.getToken(this.portal).then((token) => {\n      return validateAppAccess(token, clientId);\n    });\n  }\n\n  /**\n   * Converts the `ArcGISIdentityManager` instance to a JSON object. This is called when the instance is serialized to JSON with [`JSON.stringify()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify).\n   *\n   * ```js\n   * import { ArcGISIdentityManager } from '@esri/arcgis-rest-request';\n   *\n   * const session = ArcGISIdentityManager.fromCredentials({\n   *   clientId: \"abc123\",\n   *   clientSecret: \"••••••\"\n   * })\n   *\n   * const json = JSON.stringify(session);\n   * ```\n   *\n   * @returns A plain object representation of the instance.\n   */\n  public toJSON(): IArcGISIdentityManagerOptions & { type: string } {\n    return {\n      type: \"ArcGISIdentityManager\",\n      clientId: this.clientId,\n      refreshToken: this.refreshToken,\n      refreshTokenExpires: this.refreshTokenExpires || undefined,\n      username: this.username,\n      password: this.password,\n      token: this.token,\n      tokenExpires: this.tokenExpires || undefined,\n      portal: this.portal,\n      ssl: this.ssl,\n      tokenDuration: this.tokenDuration,\n      redirectUri: this.redirectUri,\n      server: this.server\n    };\n  }\n\n  /**\n   * Serializes the `ArcGISIdentityManager` instance to a JSON string.\n   *\n   * ```js\n   * // create an ArcGISIdentityManager instance\n   * const serializedString = manager.serialize();\n   * localStorage.setItem(\"arcgis-identity-manager\", serializedString);\n   *\n   * // later, you can retrieve the manager from localStorage\n   * const serializedString = localStorage.getItem(\"arcgis-identity-manager\");\n   * const manager = ArcGISIdentityManager.deserialize(serializedString);\n   * ```\n   *\n   * @returns The serialized JSON string.\n   */\n  public serialize() {\n    return JSON.stringify(this);\n  }\n\n  /**\n   * For a \"Host\" app that embeds other platform apps via iframes, after authenticating the user\n   * and creating a ArcGISIdentityManager, the app can then enable \"post message\" style authentication by calling\n   * this method.\n   *\n   * Internally this adds an event listener on window for the `message` event\n   *\n   * @param validChildOrigins Array of origins that are allowed to request authentication from the host app\n   */\n  public enablePostMessageAuth(validChildOrigins: string[], win?: any): any {\n    /* istanbul ignore next: must pass in a mockwindow for tests so we can't cover the other branch */\n    if (!win && window) {\n      win = window;\n    }\n    this._hostHandler = this.createPostMessageHandler(validChildOrigins);\n    win.addEventListener(\"message\", this._hostHandler, false);\n  }\n\n  /**\n   * For a \"Host\" app that has embedded other platform apps via iframes, when the host needs\n   * to transition routes, it should call `ArcGISIdentityManager.disablePostMessageAuth()` to remove\n   * the event listener and prevent memory leaks\n   */\n  public disablePostMessageAuth(win?: any) {\n    /* istanbul ignore next: must pass in a mockwindow for tests so we can't cover the other branch */\n    if (!win && window) {\n      win = window;\n    }\n    win.removeEventListener(\"message\", this._hostHandler, false);\n  }\n\n  /**\n   * Manually refreshes the current `token` and `tokenExpires`.\n   */\n  public refreshCredentials(requestOptions?: ITokenRequestOptions) {\n    // make sure subsequent calls to getUser() don't returned cached metadata\n    this.clearCachedUserInfo();\n\n    if (this.username && this.password) {\n      return this.refreshWithUsernameAndPassword(requestOptions);\n    }\n\n    if (this.clientId && this.refreshToken) {\n      return this.refreshWithRefreshToken();\n    }\n\n    return Promise.reject(\n      new ArcGISTokenRequestError(\n        \"Unable to refresh token. No refresh token or password present.\",\n        ArcGISTokenRequestErrorCodes.TOKEN_REFRESH_FAILED\n      )\n    );\n  }\n\n  /**\n   * Determines the root of the ArcGIS Server or Portal for a given URL.\n   *\n   * @param url the URl to determine the root url for.\n   */\n  public getServerRootUrl(url: string) {\n    const [root] = cleanUrl(url).split(\n      /\\/rest(\\/admin)?\\/services(?:\\/|#|\\?|$)/\n    );\n    const [match, protocol, domainAndPath] = root.match(/(https?:\\/\\/)(.+)/);\n    const [domain, ...path] = domainAndPath.split(\"/\");\n\n    // only the domain is lowercased because in some cases an org id might be\n    // in the path which cannot be lowercased.\n    return `${protocol}${domain.toLowerCase()}/${path.join(\"/\")}`;\n  }\n\n  /**\n   * Returns the proper [`credentials`] option for `fetch` for a given domain.\n   * See [trusted server](https://enterprise.arcgis.com/en/portal/latest/administer/windows/configure-security.htm#ESRI_SECTION1_70CC159B3540440AB325BE5D89DBE94A).\n   * Used internally by underlying request methods to add support for specific security considerations.\n   *\n   * @param url The url of the request\n   * @returns \"include\" or \"same-origin\"\n   */\n  public getDomainCredentials(url: string): RequestCredentials {\n    if (!this.trustedDomains || !this.trustedDomains.length) {\n      return \"same-origin\";\n    }\n\n    url = url.toLowerCase();\n    return this.trustedDomains.some((domainWithProtocol) => {\n      return url.startsWith(domainWithProtocol.toLowerCase());\n    })\n      ? \"include\"\n      : \"same-origin\";\n  }\n\n  /**\n   * Convenience method for {@linkcode ArcGISIdentityManager.destroy} for this instance of `ArcGISIdentityManager`\n   */\n  public signOut() {\n    return ArcGISIdentityManager.destroy(this);\n  }\n\n  /**\n   * Return a function that closes over the validOrigins array and\n   * can be used as an event handler for the `message` event\n   *\n   * @param validOrigins Array of valid origins\n   */\n  private createPostMessageHandler(\n    validOrigins: string[]\n  ): (event: any) => void {\n    // return a function that closes over the validOrigins and\n    // has access to the credential\n    return (event: any) => {\n      // Verify that the origin is valid\n      // Note: do not use regex's here. validOrigins is an array so we're checking that the event's origin\n      // is in the array via exact match. More info about avoiding postMessage xss issues here\n      // https://jlajara.gitlab.io/web/2020/07/17/Dom_XSS_PostMessage_2.html#tipsbypasses-in-postmessage-vulnerabilities\n      const isValidOrigin = validOrigins.indexOf(event.origin) > -1;\n      // JSAPI handles this slightly differently - instead of checking a list, it will respond if\n      // event.origin === window.location.origin || event.origin.endsWith('.arcgis.com')\n      // For Hub, and to enable cross domain debugging with port's in urls, we are opting to\n      // use a list of valid origins\n\n      // Ensure the message type is something we want to handle\n      const isValidType = event.data.type === \"arcgis:auth:requestCredential\";\n      // Ensure we don't pass an expired session forward\n      const isTokenValid = this.tokenExpires.getTime() > Date.now();\n\n      if (isValidOrigin && isValidType) {\n        let msg = {};\n        if (isTokenValid) {\n          const credential = this.toCredential();\n          // the following line allows us to conform to our spec without changing other depended-on functionality\n          // https://github.com/Esri/arcgis-rest-js/blob/master/packages/arcgis-rest-auth/post-message-auth-spec.md#arcgisauthcredential\n          credential.server = credential.server.replace(\"/sharing/rest\", \"\");\n          msg = { type: \"arcgis:auth:credential\", credential };\n        } else {\n          msg = {\n            type: \"arcgis:auth:error\",\n            error: {\n              name: \"tokenExpiredError\",\n              message:\n                \"Token was expired, and not returned to the child application\"\n            }\n          };\n        }\n\n        event.source.postMessage(msg, event.origin);\n      }\n    };\n  }\n\n  /**\n   * Validates that a given URL is properly federated with our current `portal`.\n   * Attempts to use the internal `federatedServers` cache first.\n   */\n  private getTokenForServer(\n    url: string,\n    requestOptions?: ITokenRequestOptions\n  ) {\n    // requests to /rest/services/ and /rest/admin/services/ are both valid\n    // Federated servers may have inconsistent casing, so lowerCase it\n    const root = this.getServerRootUrl(url);\n    const existingToken = this.federatedServers[root];\n\n    if (\n      existingToken &&\n      existingToken.expires &&\n      existingToken.expires.getTime() > Date.now()\n    ) {\n      return Promise.resolve(existingToken.token);\n    }\n\n    if (this._pendingTokenRequests[root]) {\n      return this._pendingTokenRequests[root];\n    }\n\n    this._pendingTokenRequests[root] = this.fetchAuthorizedDomains().then(\n      () => {\n        return request(`${root}/rest/info`, {\n          credentials: this.getDomainCredentials(url)\n        })\n          .then((serverInfo) => {\n            if (serverInfo.owningSystemUrl) {\n              /**\n               * if this server is not owned by this portal\n               * bail out with an error since we know we wont\n               * be able to generate a token\n               */\n              if (!isFederated(serverInfo.owningSystemUrl, this.portal)) {\n                throw new ArcGISTokenRequestError(\n                  `${url} is not federated with ${this.portal}.`,\n                  ArcGISTokenRequestErrorCodes.NOT_FEDERATED\n                );\n              } else {\n                /**\n                 * if the server is federated, use the relevant token endpoint.\n                 */\n                return request(\n                  `${serverInfo.owningSystemUrl}/sharing/rest/info`,\n                  requestOptions\n                );\n              }\n            } else if (\n              serverInfo.authInfo &&\n              this.federatedServers[root] !== undefined\n            ) {\n              /**\n               * if its a stand-alone instance of ArcGIS Server that doesn't advertise\n               * federation, but the root server url is recognized, use its built in token endpoint.\n               */\n              return Promise.resolve({\n                authInfo: serverInfo.authInfo\n              });\n            } else {\n              throw new ArcGISTokenRequestError(\n                `${url} is not federated with any portal and is not explicitly trusted.`,\n                ArcGISTokenRequestErrorCodes.NOT_FEDERATED\n              );\n            }\n          })\n          .then((serverInfo: any) => {\n            // an expired token cant be used to generate a new token so refresh our credentials before trying to generate a server token\n            if (this.token && this.tokenExpires.getTime() < Date.now()) {\n              // If we are authenticated to a single server just refresh with username and password and use the new credentials as the credentials for this server.\n              if (this.server) {\n                return this.refreshCredentials().then(() => {\n                  return {\n                    token: this.token,\n                    expires: this.tokenExpires\n                  };\n                });\n              }\n\n              // Otherwise refresh the credentials for the portal and generate a URL for the specific server.\n              return this.refreshCredentials().then(() => {\n                return this.generateTokenForServer(\n                  serverInfo.authInfo.tokenServicesUrl,\n                  root\n                );\n              });\n            } else {\n              return this.generateTokenForServer(\n                serverInfo.authInfo.tokenServicesUrl,\n                root\n              );\n            }\n          })\n          .then((response) => {\n            this.federatedServers[root] = response;\n            delete this._pendingTokenRequests[root];\n            return response.token;\n          });\n      }\n    );\n\n    return this._pendingTokenRequests[root];\n  }\n\n  /**\n   * Generates a token for a given `serverUrl` using a given `tokenServicesUrl`.\n   */\n  private generateTokenForServer(tokenServicesUrl: string, serverUrl: string) {\n    return request(tokenServicesUrl, {\n      params: {\n        token: this.token,\n        serverUrl,\n        expiration: this.tokenDuration\n      }\n    })\n      .then((response) => {\n        return {\n          token: response.token,\n          expires: new Date(response.expires - 1000 * 60 * 5)\n        };\n      })\n      .catch((e) => {\n        throw new ArcGISTokenRequestError(\n          e.message,\n          ArcGISTokenRequestErrorCodes.GENERATE_TOKEN_FOR_SERVER_FAILED,\n          e.response,\n          e.url,\n          e.options\n        );\n      });\n  }\n\n  /**\n   * Returns an unexpired token for the current `portal`.\n   */\n  private getFreshToken(requestOptions?: ITokenRequestOptions) {\n    if (this.token && !this.tokenExpires) {\n      return Promise.resolve(this.token);\n    }\n\n    if (\n      this.token &&\n      this.tokenExpires &&\n      this.tokenExpires.getTime() > Date.now()\n    ) {\n      return Promise.resolve(this.token);\n    }\n\n    if (!this._pendingTokenRequests[this.portal]) {\n      this._pendingTokenRequests[this.portal] = this.refreshCredentials(\n        requestOptions\n      ).then(() => {\n        this._pendingTokenRequests[this.portal] = null;\n        return this.token;\n      });\n    }\n\n    return this._pendingTokenRequests[this.portal];\n  }\n\n  /**\n   * Refreshes the current `token` and `tokenExpires` with `username` and\n   * `password`.\n   */\n  private refreshWithUsernameAndPassword(\n    requestOptions?: ITokenRequestOptions\n  ) {\n    const params = {\n      username: this.username,\n      password: this.password,\n      expiration: this.tokenDuration,\n      client: \"referer\",\n      referer: this.referer\n        ? this.referer\n        : typeof window !== \"undefined\" &&\n          typeof window.document !== \"undefined\" &&\n          window.location &&\n          window.location.origin\n        ? window.location.origin\n        : /* istanbul ignore next */\n          NODEJS_DEFAULT_REFERER_HEADER\n    };\n\n    return (\n      this.server\n        ? request(`${this.getServerRootUrl(this.server)}/rest/info`).then(\n            (response) => {\n              return request(response.authInfo.tokenServicesUrl, {\n                params,\n                ...requestOptions\n              });\n            }\n          )\n        : request(`${this.portal}/generateToken`, {\n            params,\n            ...requestOptions\n          })\n    )\n      .then((response: any) => {\n        this.updateToken(response.token, new Date(response.expires));\n        return this;\n      })\n      .catch((e) => {\n        throw new ArcGISTokenRequestError(\n          e.message,\n          ArcGISTokenRequestErrorCodes.TOKEN_REFRESH_FAILED,\n          e.response,\n          e.url,\n          e.options\n        );\n      });\n  }\n\n  /**\n   * Refreshes the current `token` and `tokenExpires` with `refreshToken`.\n   */\n  private refreshWithRefreshToken(requestOptions?: ITokenRequestOptions) {\n    // If our refresh token expires sometime in the next 24 hours then refresh the refresh token\n    const ONE_DAY_IN_MILLISECONDS = 1000 * 60 * 60 * 24;\n\n    if (\n      this.refreshToken &&\n      this.refreshTokenExpires &&\n      this.refreshTokenExpires.getTime() - ONE_DAY_IN_MILLISECONDS < Date.now()\n    ) {\n      return this.exchangeRefreshToken(requestOptions);\n    }\n\n    const options: ITokenRequestOptions = {\n      params: {\n        client_id: this.clientId,\n        refresh_token: this.refreshToken,\n        grant_type: \"refresh_token\"\n      },\n      ...requestOptions\n    };\n\n    return fetchToken(`${this.portal}/oauth2/token`, options)\n      .then((response) => {\n        return this.updateToken(response.token, response.expires);\n      })\n      .catch((e) => {\n        throw new ArcGISTokenRequestError(\n          e.message,\n          ArcGISTokenRequestErrorCodes.TOKEN_REFRESH_FAILED,\n          e.response,\n          e.url,\n          e.options\n        );\n      });\n  }\n\n  /**\n   * Update the stored {@linkcode ArcGISIdentityManager.token} and {@linkcode ArcGISIdentityManager.tokenExpires} properties. This method is used internally when refreshing tokens.\n   * You may need to call this if you want update the token with a new token from an external source.\n   *\n   * @param newToken The new token to use for this instance of `ArcGISIdentityManager`.\n   * @param newTokenExpiration The new expiration date of the token.\n   * @returns\n   */\n  updateToken(newToken: string, newTokenExpiration: Date) {\n    this._token = newToken;\n    this._tokenExpires = newTokenExpiration;\n\n    return this;\n  }\n\n  /**\n   * Exchanges an unexpired `refreshToken` for a new one, also updates `token` and\n   * `tokenExpires`.\n   */\n  exchangeRefreshToken(requestOptions?: ITokenRequestOptions) {\n    const options: ITokenRequestOptions = {\n      params: {\n        client_id: this.clientId,\n        refresh_token: this.refreshToken,\n        redirect_uri: this.redirectUri,\n        grant_type: \"exchange_refresh_token\"\n      },\n      ...requestOptions\n    };\n\n    return fetchToken(`${this.portal}/oauth2/token`, options)\n      .then((response) => {\n        this._token = response.token;\n        this._tokenExpires = response.expires;\n        this._refreshToken = response.refreshToken;\n        this._refreshTokenExpires = response.refreshTokenExpires;\n        return this;\n      })\n      .catch((e) => {\n        throw new ArcGISTokenRequestError(\n          e.message,\n          ArcGISTokenRequestErrorCodes.REFRESH_TOKEN_EXCHANGE_FAILED,\n          e.response,\n          e.url,\n          e.options\n        );\n      });\n  }\n\n  /**\n   * ensures that the authorizedCrossOriginDomains are obtained from the portal and cached\n   * so we can check them later.\n   *\n   * @returns this\n   */\n  private fetchAuthorizedDomains() {\n    // if this token is for a specific server or we don't have a portal\n    // don't get the portal info because we cant get the authorizedCrossOriginDomains\n    if (this.server || !this.portal) {\n      return Promise.resolve(this);\n    }\n\n    return this.getPortal().then((portalInfo) => {\n      /**\n       * Specific domains can be configured as secure.esri.com or https://secure.esri.com this\n       * normalizes to https://secure.esri.com so we can use startsWith later.\n       */\n      if (\n        portalInfo.authorizedCrossOriginDomains &&\n        portalInfo.authorizedCrossOriginDomains.length\n      ) {\n        this.trustedDomains = portalInfo.authorizedCrossOriginDomains\n          .filter((d: string) => !d.startsWith(\"http://\"))\n          .map((d: string) => {\n            if (d.startsWith(\"https://\")) {\n              return d;\n            } else {\n              return `https://${d}`;\n            }\n          });\n      }\n      return this;\n    });\n  }\n}\n\n/**\n * @deprecated - Use {@linkcode ArcGISIdentityManager}.\n * @internal\n *\n */ /* istanbul ignore next */\nfunction UserSession(options: IArcGISIdentityManagerOptions) {\n  console.log(\n    \"DEPRECATED:, 'UserSession' is deprecated. Use 'ArcGISIdentityManager' instead.\"\n  );\n\n  return new ArcGISIdentityManager(options);\n}\n\n/**\n * @deprecated - Use {@linkcode ArcGISIdentityManager.beginOAuth2}.\n * @internal\n *\n */ /* istanbul ignore next */\nUserSession.beginOAuth2 = function (\n  ...args: Parameters<typeof ArcGISIdentityManager.beginOAuth2>\n) {\n  console.warn(\n    \"DEPRECATED:, 'UserSession.beginOAuth2' is deprecated. Use 'ArcGISIdentityManager.beginOAuth2' instead.\"\n  );\n\n  return ArcGISIdentityManager.beginOAuth2(...args);\n};\n\n/**\n * @deprecated - Use {@linkcode ArcGISIdentityManager.completeOAuth2}.\n * @internal\n *\n */ /* istanbul ignore next */\nUserSession.completeOAuth2 = function (\n  ...args: Parameters<typeof ArcGISIdentityManager.completeOAuth2>\n) {\n  console.warn(\n    \"DEPRECATED:, 'UserSession.completeOAuth2()' is deprecated. Use 'ArcGISIdentityManager.completeOAuth2()' instead.\"\n  );\n  if (args.length <= 1) {\n    console.warn(\n      \"WARNING:, 'UserSession.completeOAuth2()' is now async and returns a promise the resolves to an instance of `ArcGISIdentityManager`.\"\n    );\n  }\n\n  return ArcGISIdentityManager.completeOAuth2(...args);\n};\n\n/**\n * @deprecated - Use {@linkcode ArcGISIdentityManager.fromParent}.\n * @internal\n *\n */ /* istanbul ignore next */\nUserSession.fromParent = function (\n  ...args: Parameters<typeof ArcGISIdentityManager.fromParent>\n) {\n  console.warn(\n    \"DEPRECATED:, 'UserSession.fromParent' is deprecated. Use 'ArcGISIdentityManager.fromParent' instead.\"\n  );\n\n  return ArcGISIdentityManager.fromParent(...args);\n};\n\n/**\n * @deprecated - Use {@linkcode ArcGISIdentityManager.authorize}.\n * @internal\n *\n */ /* istanbul ignore next */\nUserSession.authorize = function (\n  ...args: Parameters<typeof ArcGISIdentityManager.authorize>\n) {\n  console.warn(\n    \"DEPRECATED:, 'UserSession.authorize' is deprecated. Use 'ArcGISIdentityManager.authorize' instead.\"\n  );\n\n  return ArcGISIdentityManager.authorize(...args);\n};\n\n/**\n * @deprecated - Use {@linkcode ArcGISIdentityManager.exchangeAuthorizationCode}.\n * @internal\n *\n */ /* istanbul ignore next */\nUserSession.exchangeAuthorizationCode = function (\n  ...args: Parameters<typeof ArcGISIdentityManager.exchangeAuthorizationCode>\n) {\n  console.warn(\n    \"DEPRECATED:, 'UserSession.exchangeAuthorizationCode' is deprecated. Use 'ArcGISIdentityManager.exchangeAuthorizationCode' instead.\"\n  );\n\n  return ArcGISIdentityManager.exchangeAuthorizationCode(...args);\n};\n\n/**\n * @deprecated - Use {@linkcode ArcGISIdentityManager.fromCredential}.\n * @internal\n *\n */ /* istanbul ignore next */\nUserSession.fromCredential = function (\n  ...args: Parameters<typeof ArcGISIdentityManager.fromCredential>\n) {\n  console.log(\n    \"DEPRECATED:, 'UserSession.fromCredential' is deprecated. Use 'ArcGISIdentityManager.fromCredential' instead.\"\n  );\n\n  console.warn(\n    \"WARNING:, 'UserSession.fromCredential' now requires a `ServerInfo` object from the JS API as a second parameter.\"\n  );\n\n  return ArcGISIdentityManager.fromCredential(...args);\n};\n\n/**\n * @deprecated - Use {@linkcode ArcGISIdentityManager.deserialize}.\n * @internal\n *\n */ /* istanbul ignore next */\nUserSession.deserialize = function (\n  ...args: Parameters<typeof ArcGISIdentityManager.deserialize>\n) {\n  console.log(\n    \"DEPRECATED:, 'UserSession.deserialize' is deprecated. Use 'ArcGISIdentityManager.deserialize' instead.\"\n  );\n\n  return ArcGISIdentityManager.deserialize(...args);\n};\n\nexport { UserSession };\n","import { base64UrlEncode } from \"./base-64-url.js\";\n\n/**\n * Utility to hash the codeVerifier using sha256\n */\nexport function generateCodeChallenge(codeVerifier: string, win = window) {\n  /* istanbul ignore next: must pass in a mockwindow for tests so we can't cover the other branch */\n  if (!win && window) {\n    win = window;\n  }\n\n  if (codeVerifier && win.isSecureContext && win.crypto && win.crypto.subtle) {\n    const encoder = new win.TextEncoder();\n    const bytes = encoder.encode(codeVerifier);\n\n    return win.crypto.subtle\n      .digest(\"SHA-256\", bytes)\n      .then((buffer) => base64UrlEncode(new Uint8Array(buffer), win));\n  }\n\n  return Promise.resolve(null);\n}\n","/* Copyright (c) 2018-2020 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport { request } from \"./request.js\";\nimport { IRequestOptions } from \"./utils/IRequestOptions.js\";\n\n/**\n * Request app-specific token, passing in the token for the current app.\n *\n * This call returns a token after performing the same checks made by validateAppAccess.\n * It returns an app-specific token of the signed-in user only if the user has access\n * to the app and the encrypted platform cookie is valid.\n *\n * A scenario where an app would use this is if it is iframed into another platform app\n * and receives credentials via postMessage. Those credentials contain a token that is\n * specific to the host app, so the embedded app would use `exchangeToken` to get one\n * that is specific to itself.\n *\n * Note: This is only usable by Esri applications hosted on *arcgis.com, *esri.com or within\n * an ArcGIS Enterprise installation. Custom applications can not use this.\n *\n * @param token\n * @param clientId application\n * @param portal\n */\nexport function exchangeToken(\n  token: string,\n  clientId: string,\n  portal = \"https://www.arcgis.com/sharing/rest\"\n): Promise<string> {\n  const url = `${portal}/oauth2/exchangeToken`;\n  const ro = {\n    method: \"POST\",\n    params: {\n      f: \"json\",\n      client_id: clientId,\n      token\n    }\n  } as IRequestOptions;\n  // make the request and return the token\n  return request(url, ro).then((response) => response.token);\n}\n\n/**\n * @internal\n * @private\n * Response from the `platformSelf(...)` function.\n */\nexport interface IPlatformSelfResponse {\n  /**\n   * Username of the user the encrypted cookie was issued for\n   */\n  username: string;\n  /**\n   * Token the consuming application can use, It is tied to the\n   * clientId used in the `platformSelf` call\n   */\n  token: string;\n  /**\n   * Token expiration, in seconds-from-now\n   */\n  expires_in: number;\n}\n\n/**\n * @internal\n * @private\n * Request a token for a specific application using the esri_aopc encrypted cookie\n *\n * When a client app boots up, it will know its clientId and the redirectUri for use\n * in the normal /oauth/authorize pop-out oAuth flow.\n *\n * If the app sees an `esri_aopc` cookie (only set if the app is hosted on *.arcgis.com),\n * it can call the /oauth2/platformSelf end-point passing in the clientId and redirectUri\n * in headers, and it will receive back an app-specific token, assuming the user has\n * access to the app.\n *\n * Since there are scenarios where an app can boot using credentials/token from localstorage\n * but those credentials are not for the same user as the esri_aopc cookie, it is recommended that\n * an app check the returned username against any existing identity they may have loaded.\n *\n * Note: This is only usable by Esri applications hosted on *arcgis.com, *esri.com or within\n * an ArcGIS Enterprise installation. Custom applications can not use this.\n *\n * ```js\n * // convert the encrypted platform cookie into a ArcGISIdentityManager\n * import { platformSelf, ArcGISIdentityManager } from '@esri/arcgis-rest-request';\n *\n * const portal = 'https://www.arcgis.com/sharing/rest';\n * const clientId = 'YOURAPPCLIENTID';\n *\n * // exchange esri_aopc cookie\n * return platformSelf(clientId, 'https://your-app-redirect-uri', portal)\n * .then((response) => {\n *  const currentTimestamp = new Date().getTime();\n *  const tokenExpiresTimestamp = currentTimestamp + (response.expires_in * 1000);\n *  // Construct the session and return it\n *  return new ArcGISIdentityManager({\n *    portal,\n *    clientId,\n *    username: response.username,\n *    token: response.token,\n *    tokenExpires: new Date(tokenExpiresTimestamp),\n *    ssl: true\n *  });\n * })\n *\n * ```\n *\n *\n * @param clientId\n * @param redirectUri\n * @param portal\n */\nexport function platformSelf(\n  clientId: string,\n  redirectUri: string,\n  portal = \"https://www.arcgis.com/sharing/rest\"\n): Promise<IPlatformSelfResponse> {\n  // TEMPORARY: the f=json should not be needed, but currently is\n  const url = `${portal}/oauth2/platformSelf?f=json`;\n  const ro = {\n    method: \"POST\",\n    headers: {\n      \"X-Esri-Auth-Client-Id\": clientId,\n      \"X-Esri-Auth-Redirect-Uri\": redirectUri\n    },\n    // Note: request has logic to include the cookie\n    // for platformSelf calls w/ the X-Esri-Auth-Client-Id header\n    params: {\n      f: \"json\"\n    }\n  } as IRequestOptions;\n  // make the request and return the token\n  return request(url, ro);\n}\n","/**\n * These statuses are based on what are returned from the job request task and have been into an enum type.\n *\n * Reference https://developers.arcgis.com/rest/services-reference/enterprise/geoanalytics-checking-job-status.htm\n */\nexport enum JOB_STATUSES {\n  Success = \"Succeeded\",\n  Failed = \"Failed\",\n  Waiting = \"Waiting\",\n  Cancelled = \"Cancelled\",\n  Cancelling = \"Cancelling\",\n  New = \"New\",\n  Executing = \"Executing\",\n  Submitted = \"Submitted\",\n  Failure = \"Failure\",\n  TimedOut = \"TimedOut\",\n  Error = \"Error\",\n  Status = \"Etatus\",\n  Unknown = \"Unknown\"\n}\n","import { request } from \"./request.js\";\nimport { cleanUrl } from \"./utils/clean-url.js\";\nimport { ArcGISJobError } from \"./utils/ArcGISJobError.js\";\nimport { JOB_STATUSES } from \"./types/job-statuses.js\";\nimport { IAuthenticationManager } from \"./utils/IAuthenticationManager.js\";\nimport mitt from \"mitt\";\nimport { processJobParams } from \"./utils/process-job-params.js\";\n\n/**\n * Options for creating a new {@linkcode Job}.\n */\nexport interface IJobOptions {\n  /**\n   * The ID of the job. Can be used to rehydrate an instance of {@linkcode Job} with {@linkcode Job.fromExistingJob} or {@linkcode Job.deserialize}.\n   */\n  id: string;\n\n  /**\n   * The base URL of the job without `/submitJob` or a trailing job id.\n   */\n  url: string;\n\n  /**\n   * Automatically monitor the job for status changes once it is created. Defaults to `false`.\n   */\n  startMonitoring?: boolean;\n\n  /**\n   * Rate in milliseconds to poll for job status changes. Defaults to `2000`.\n   */\n  pollingRate?: number;\n\n  /**\n   * Authentication manager or access token to use for all job requests.\n   */\n  authentication?: IAuthenticationManager | string;\n}\n\n/**\n * Options for {@linkcode Job.submitJob}.\n */\nexport interface ISubmitJobOptions {\n  /**\n   * Parameters necessary that are passed to the {@linkcode Job.submitJob} method.\n   */\n  params: any;\n\n  /**\n   * The base URL of the job without `/submitJob` or a trailing job id.\n   */\n  url: string;\n\n  /**\n   * Automatically monitor the job for status changes once it is created. Defaults to `false`.\n   */\n  startMonitoring?: boolean;\n\n  /**\n   * Rate in milliseconds to poll for job status changes. Defaults to `2000`.\n   */\n  pollingRate?: number;\n\n  /**\n   * Authentication manager or access token to use for all job requests.\n   */\n  authentication?: IAuthenticationManager | string;\n}\n\n/**\n * Describes the status of a job. See the [GP Job documentation for more information](https://developers.arcgis.com/rest/services-reference/enterprise/gp-job.htm).\n */\nexport interface IJobInfo {\n  /**\n   * The ID of the job. Can be used to rehydrate an instance of {@linkcode Job} with {@linkcode Job.fromExistingJob} or {@linkcode Job.deserialize}.\n   */\n  id: string;\n  /**\n   * Represents the status of the current job.\n   */\n  status: JOB_STATUSES;\n  /**\n   * A results property that are returned from a successful job.\n   */\n  results?: {\n    [key: string]: {\n      paramUrl: string;\n    };\n  };\n  /**\n   * An input property that are returned from a successful job.\n   */\n  inputs?: {\n    [key: string]: {\n      paramUrl: string;\n    };\n  };\n  /**\n   * A message property that are returned from a successful job.\n   */\n  messages?: Array<{\n    type: string;\n    description: string;\n  }>;\n  /**\n   * A progress property that is returned while the job status is {@linkcode JOB_STATUSES.Executing}\n   */\n  progress?: {\n    type: string;\n    message: string;\n    percentage: number;\n  };\n}\n\nconst DefaultJobOptions: Partial<IJobOptions> = {\n  pollingRate: 2000,\n  startMonitoring: false\n};\n\n/**\n * Jobs represent long running processing tasks running on ArcGIS Services. Typically these represent complex analysis tasks such as [geoprocessing tasks](https://developers.arcgis.com/rest/services-reference/enterprise/submit-gp-job.htm), [logistics analysis such as fleet routing](https://developers.arcgis.com/rest/network/api-reference/vehicle-routing-problem-service.htm) or [spatial analysis tasks](https://developers.arcgis.com/rest/analysis/api-reference/tasks-overview.htm).\n *\n * To create a {@linkcode Job}, use the {@linkcode Job.submitJob} method which will return an instance of the {@linkcode Job} class with a unique id.\n *\n * If you have an existing job you can use {@linkcode Job.serialize} and {@linkcode Job.deserialize} to save job information as a string and recreate the job to get results later.\n *\n * ```js\n * import { Job,  JOB_STATUSES  } from \"@esri/arcgis-rest-request\";\n *\n * const job  = async Job.submitJob(options);\n *\n * // will automatically wait for job completion and get results when the job is finished.\n * job.getAllResults().then((results) => {console.log(results)})\n *\n * // watch for all status updates\n * job.on(\"status\", ({jobStatus}) => {console.log(job.status)})\n * ```\n *\n * By default event monitoring is started when you call {@linkcode Job.waitForCompletion}, {@linkcode Job.getAllResults} or, {@linkcode Job.getResult} and stops automatically when those promises complete. Use {@linkcode Job.startEventMonitoring} and {@linkcode Job.stopEventMonitoring} to manually start and stop event monitoring outside those methods. Starting monitoring with {@linkcode Job.startEventMonitoring} will not stop monitoring when {@linkcode Job.waitForCompletion}, {@linkcode Job.getAllResults} or, {@linkcode Job.getResult} complete.\n */\nexport class Job {\n  static deserialize(serializeString: string, options?: IJobOptions) {\n    const jobOptions: IJobOptions = {\n      ...DefaultJobOptions,\n      ...JSON.parse(serializeString),\n      ...options\n    };\n\n    return request(`${jobOptions.url}/jobs/${jobOptions.id}`, {\n      authentication: jobOptions.authentication\n    }).then(() => {\n      return new Job(jobOptions);\n    });\n  }\n\n  /**\n   * Creates a new instance of {@linkcode Job} from an existing job id.\n   *\n   * @param options Requires request endpoint url and id from an existing job id.\n   * @returns An new instance of Job class with options.\n   */\n  static fromExistingJob(options: IJobOptions) {\n    const jobOptions: IJobOptions = {\n      ...DefaultJobOptions,\n      ...options\n    };\n    const baseUrl = cleanUrl(jobOptions.url.replace(/\\/submitJob\\/?/, \"\"));\n    return request(`${baseUrl}/jobs/${jobOptions.id}`, {\n      authentication: jobOptions.authentication\n    }).then(() => {\n      return new Job(jobOptions);\n    });\n  }\n\n  /**\n   * Submits a job request that will return a new instance of {@linkcode Job}.\n   *\n   * @param requestOptions Requires url and params from requestOptions.\n   * @returns An new instance of Job class with the returned job id from submitJob request and requestOptions;\n   */\n  static submitJob(requestOptions: ISubmitJobOptions) {\n    const {\n      url,\n      params,\n      authentication,\n      pollingRate,\n      startMonitoring\n    }: Partial<ISubmitJobOptions> = {\n      ...DefaultJobOptions,\n      ...requestOptions\n    };\n\n    const processedParams = processJobParams(params);\n    const baseUrl = cleanUrl(url.replace(/\\/submitJob\\/?/, \"\"));\n    const submitUrl = baseUrl + \"/submitJob\";\n    return request(submitUrl, {\n      params: processedParams,\n      authentication\n    }).then(\n      (response) =>\n        new Job({\n          url: baseUrl,\n          authentication,\n          id: response.jobId,\n          startMonitoring,\n          pollingRate\n        })\n    );\n  }\n\n  /**\n   * The base URL of the job.\n   */\n  readonly url: string;\n  /**\n   * The job id indicating the specific job.\n   */\n  readonly id: string;\n  /**\n   * Authentication manager or access token to use for all job requests.\n   */\n  readonly authentication: IAuthenticationManager | string;\n\n  /**\n   * Internal instance of [`mitt`](https://github.com/developit/mitt) used for event handlers. It is recommended to use {@linkcode Job.on}, {@linkcode Job.off} or {@linkcode Job.once} instead of `emitter.`\n   */\n  private emitter: any;\n\n  /**\n   * Private pollingRate that is set if the user changes the pollingRate.\n   */\n  private _pollingRate: number;\n  /**\n   * Private boolean that checks to see if the user enables startMonitoring.\n   */\n  private didUserEnableMonitoring: any;\n  /**\n   * Internal handler for `setInterval()` used when polling.;\n   */\n  private setIntervalHandler: any;\n\n\n  constructor(options: IJobOptions) {\n    const { url, id, pollingRate, authentication }: Partial<IJobOptions> = {\n      ...DefaultJobOptions,\n      ...options\n    };\n\n    // Setup internal properties\n    this.url = url;\n    this.id = id;\n    this.authentication = authentication;\n    this._pollingRate = pollingRate;\n    this.emitter = mitt();\n\n    if (options.startMonitoring) {\n      this.startEventMonitoring(pollingRate);\n    }\n  }\n\n  /**\n   * Getter that appends the job id to the base url.\n   */\n  private get jobUrl() {\n    return `${this.url}/jobs/${this.id}`;\n  }\n\n  /**\n   * Returns `true` if the job is polling for status changes.\n   */\n  get isMonitoring() {\n    return !!this.setIntervalHandler;\n  }\n\n  /**\n   * The rate at which event monitoring is occurring in milliseconds.\n   */\n  get pollingRate() {\n    return this._pollingRate;\n  }\n\n  /**\n   * Sets a new polling rate and restart polling for status changes.\n   */\n  set pollingRate(newRate: number) {\n    this.stopEventMonitoring();\n    this.startEventMonitoring(newRate);\n  }\n\n  /**\n   * Retrieves the status of the current job.\n   *\n   * @returns An object with the job id and jobStatus.\n   */\n  getJobInfo(): Promise<IJobInfo> {\n    return request(this.jobUrl, {\n      authentication: this.authentication\n    }).then((rawJobInfo: any) => {\n      const info: any = Object.assign(\n        {\n          id: rawJobInfo.jobId,\n          status: undefined\n        },\n        rawJobInfo\n      );\n\n      delete info.jobId;\n      delete info.jobStatus;\n\n      switch (rawJobInfo.jobStatus) {\n        case \"esriJobCancelled\":\n          info.status = JOB_STATUSES.Cancelled;\n          break;\n        case \"esriJobCancelling\":\n          info.status = JOB_STATUSES.Cancelling;\n          break;\n        case \"esriJobNew\":\n          info.status = JOB_STATUSES.New;\n          break;\n        case \"esriJobWaiting\":\n          info.status = JOB_STATUSES.Waiting;\n          break;\n        case \"esriJobExecuting\":\n          info.status = JOB_STATUSES.Executing;\n          break;\n        case \"esriJobSubmitted\":\n          info.status = JOB_STATUSES.Submitted;\n          break;\n        case \"esriJobTimedOut\":\n          info.status = JOB_STATUSES.TimedOut;\n          break;\n        case \"esriJobFailed\":\n          info.status = JOB_STATUSES.Failed;\n          break;\n        case \"expectedFailure\":\n          info.status = JOB_STATUSES.Failure;\n          break;\n        case \"esriJobSucceeded\":\n          info.status = JOB_STATUSES.Success;\n          break;\n      }\n\n      return info as IJobInfo;\n    });\n  }\n\n  /**\n   * Function that calls the {@linkcode Job.getJobInfo} to check the job status, and emits the current job status. There are custom event emitters that\n   * the user is able to listen based on the job status. Refer to {@linkcode JOB_STATUSES} to see the various enums of the job status.\n   * To get results array from the job task, the job status must be {@linkcode JOB_STATUSES.Success}.\n   *\n   * These job statuses are based on what are returned from the job request task and have been into an enum type in {@linkcode JOB_STATUSES}.\n   *\n   * Reference https://developers.arcgis.com/rest/services-reference/enterprise/geoanalytics-checking-job-status.htm\n   */\n  private executePoll = async () => {\n    let result;\n    try {\n      result = await this.getJobInfo();\n    } catch (error) {\n      this.emitter.emit(JOB_STATUSES.Error, error);\n      return;\n    }\n\n    this.emitter.emit(JOB_STATUSES.Status, result);\n    this.emitter.emit(result.status, result);\n  };\n\n  /**\n   * A handler that listens for an eventName and returns custom handler.\n   *\n   * @param eventName A string of what event to listen for.\n   * @param handler A function of what to do when eventName was called.\n   */\n  on(eventName: string, handler: (e: IJobInfo) => void) {\n    this.emitter.on(eventName, handler);\n  }\n\n  /**\n   * A handler that listens for an event once and returns a custom handler.\n   *\n   * @param eventName A string of what event to listen for.\n   * @param handler A function of what to do when eventName was called.\n   */\n  once(eventName: string, handler: (e: IJobInfo) => void) {\n    const fn = (arg: any) => {\n      this.emitter.off(eventName, fn);\n      handler(arg);\n    };\n\n    this.emitter.on(eventName, fn);\n\n    (handler as any).__arcgis_job_once_original_function__ = fn;\n  }\n\n  /**\n   * A handler that will remove a listener after its emitted and returns a custom handler.\n   *\n   * @param eventName A string of what event to listen for.\n   * @param handler A function of what to do when eventName was called.\n   */\n  off(eventName: string, handler: (e: IJobInfo) => void) {\n    if ((handler as any).__arcgis_job_once_original_function__) {\n      this.emitter.off(\n        eventName,\n        (handler as any).__arcgis_job_once_original_function__\n      );\n      return;\n    }\n    this.emitter.off(eventName, handler);\n  }\n\n  /**\n   * Get the specific results of a successful job by result name. To get all results see {@linkcode Job.getAllResults}.\n   *\n   * If monitoring is disabled it will be enabled until the job classes resolves or rejects this promise.\n   *\n   * ```\n   * Job.submitJob(options)\n   *  .then((job) => {\n   *    return job.getResult(\"result_name\")\n   *  }).then(result => {\n   *    console.log(result);\n   *  }).catch(e => {\n   *    if(e.name === \"ArcGISJobError\") {\n   *      console.log(\"Something went wrong while running the job\", e.jobInfo);\n   *    }\n   *  })\n   * ```\n   *\n   *  Will throw a {@linkcode ArcGISJobError} if it encounters a cancelled or failure status in the job.\n   *\n   * @param result The name of the result that you want to retrieve.\n   * @returns An object representing the individual result of the job.\n   */\n  async getResult(result: string) {\n    return this.waitForCompletion().then((jobInfo: any) => {\n      return request(this.jobUrl + \"/\" + jobInfo.results[result].paramUrl, {\n        authentication: this.authentication\n      });\n    });\n  }\n\n  /**\n   * Formats the requestOptions to JSON format.\n   *\n   * @returns The `Job` as a plain JavaScript object.\n   */\n  toJSON(): IJobOptions {\n    return {\n      id: this.id,\n      url: this.url,\n      startMonitoring: this.isMonitoring,\n      pollingRate: this.pollingRate\n    };\n  }\n\n  /**\n   * Converts the `Job` to a JSON string. You can rehydrate the state of the `Job` with {@linkcode Job.deserialize}.\n   *\n   * @returns A JSON string representing the `Job`.\n   */\n  serialize() {\n    return JSON.stringify(this);\n  }\n\n  /**\n   * Checks for job status and if the job status is successful it resolves the job information. Otherwise will throw a {@linkcode ArcGISJobError} if it encounters a cancelled or failure status in the job.\n   *\n   * ```\n   * Job.submitJob(options)\n   *  .then((job) => {\n   *    return job.waitForCompletion();\n   *  })\n   * .then((jobInfo) => {\n   *    console.log(\"job finished\", e.jobInfo);\n   *  })\n   * .catch(e => {\n   *    if(e.name === \"ArcGISJobError\") {\n   *      console.log(\"Something went wrong while running the job\", e.jobInfo);\n   *    }\n   *  })\n   * ```\n   *\n   * @returns An object with a successful job status, id, and results.\n   */\n  async waitForCompletion(): Promise<IJobInfo> {\n    const jobInfo = await this.getJobInfo();\n    if (jobInfo.status === JOB_STATUSES.Success) {\n      return Promise.resolve(jobInfo);\n    }\n    //if jobStatus comes back immediately with one of the statuses\n    if (\n      jobInfo.status === JOB_STATUSES.Cancelling ||\n      jobInfo.status === JOB_STATUSES.Cancelled ||\n      jobInfo.status === JOB_STATUSES.Failed ||\n      jobInfo.status === JOB_STATUSES.Failure ||\n      jobInfo.status === JOB_STATUSES.TimedOut\n    ) {\n      this.stopInternalEventMonitoring();\n\n      return Promise.reject(\n        new ArcGISJobError(\"Job cancelled or failed.\", jobInfo)\n      );\n    }\n\n    //waits to see what the status is if not immediate\n    return new Promise((resolve, reject) => {\n      this.startInternalEventMonitoring();\n\n      this.once(JOB_STATUSES.Cancelled, (jobInfo) => {\n        this.stopInternalEventMonitoring();\n        reject(new ArcGISJobError(\"Job cancelled.\", jobInfo));\n      });\n\n      this.once(JOB_STATUSES.TimedOut, (jobInfo) => {\n        this.stopInternalEventMonitoring();\n        reject(new ArcGISJobError(\"Job timed out.\", jobInfo));\n      });\n\n      this.once(JOB_STATUSES.Failed, (jobInfo) => {\n        this.stopInternalEventMonitoring();\n        reject(new ArcGISJobError(\"Job failed.\", jobInfo));\n      });\n\n      this.once(JOB_STATUSES.Success, (jobInfo) => {\n        this.stopInternalEventMonitoring();\n        resolve(jobInfo);\n      });\n    });\n  }\n\n  /**\n   * Gets all the results from a successful job by ordering all the result paramUrl requests and calling each of them until all of them are complete and returns an object with all the results.\n   *\n   * If monitoring is disabled it will be enabled until the job classes resolves or rejects this promise.\n   *\n   * ```\n   * Job.submitJob(options)\n   *  .then((job) => {\n   *    return job.getAllResults();\n   *  }).then(allResults => {\n   *    console.log(allResults);\n   *  }).catch(e => {\n   *    if(e.name === \"ArcGISJobError\") {\n   *      console.log(\"Something went wrong while running the job\", e.jobInfo);\n   *    }\n   *  })\n   * ```\n   *\n   * Will throw a {@linkcode ArcGISJobError} if it encounters a cancelled or failure status in the job.\n   *\n   * @returns An object representing all the results from a job.\n   */\n  async getAllResults() {\n    return this.waitForCompletion().then((jobInfo: any) => {\n      const keys = Object.keys(jobInfo.results);\n\n      const requests = keys.map((key) => {\n        return request(this.jobUrl + \"/\" + jobInfo.results[key].paramUrl, {\n          authentication: this.authentication\n        }).then((results) => {\n          return results;\n        });\n      });\n\n      return Promise.all(requests).then((resultsArray: any) => {\n        return keys.reduce((finalResults: any, key: string, index: number) => {\n          finalResults[keys[index]] = resultsArray[index];\n          return finalResults;\n        }, {});\n      });\n    });\n  }\n\n  /**\n   * Cancels the job request and voids the job.\n   *\n   * @returns An object that has job id, job status and messages array sequencing the status of the cancellation being submitted and completed.\n   */\n  cancelJob() {\n    return request(this.jobUrl + \"/cancel\", {\n      authentication: this.authentication,\n      params: { id: this.id, returnMessages: false }\n    }).then((response: any) => {\n      this.emitter.emit(\"cancelled\", response);\n      return response;\n    });\n  }\n\n  /**\n   * An internal monitoring if the user specifies startMonitoring: false, we need to check the status to see when the results are returned.\n   */\n  private startInternalEventMonitoring(\n    pollingRate = DefaultJobOptions.pollingRate\n  ) {\n    this._pollingRate = pollingRate;\n\n    /* istanbul ignore else - if monitoring is already running do nothing */\n    if (!this.isMonitoring) {\n      this.setIntervalHandler = setInterval(this.executePoll, this.pollingRate);\n    }\n  }\n\n  /**\n   * Stops the internal monitoring once the job has been successfully completed with results.\n   */\n  private stopInternalEventMonitoring() {\n    if (this.isMonitoring && !this.didUserEnableMonitoring) {\n      clearTimeout(this.setIntervalHandler);\n    }\n  }\n\n  /**\n   * Starts the event polling if the user enables the startMonitoring param.\n   *\n   * @param pollingRate Able to pass in a specific number or will default to 5000.\n   */\n  startEventMonitoring(pollingRate = DefaultJobOptions.pollingRate) {\n    this._pollingRate = pollingRate;\n    this.didUserEnableMonitoring = true;\n\n    /* istanbul ignore else - if not monitoring do nothing */\n    if (!this.isMonitoring) {\n      this.setIntervalHandler = setInterval(this.executePoll, this.pollingRate);\n    }\n  }\n\n  /**\n   * Stops the event polling rate. This is can only be enabled if the user calls this method directly.\n   */\n  stopEventMonitoring() {\n    /* istanbul ignore else - if not monitoring do nothing */\n    if (this.isMonitoring && this.didUserEnableMonitoring) {\n      clearTimeout(this.setIntervalHandler);\n    }\n  }\n}\n","export default function(n){return{all:n=n||new Map,on:function(t,e){var i=n.get(t);i?i.push(e):n.set(t,[e])},off:function(t,e){var i=n.get(t);i&&(e?i.splice(i.indexOf(e)>>>0,1):n.set(t,[]))},emit:function(t,e){var i=n.get(t);i&&i.slice().map(function(n){n(e)}),(i=n.get(\"*\"))&&i.slice().map(function(n){n(t,e)})}}}\n//# sourceMappingURL=mitt.mjs.map\n"," /**\n   * Processes arrays to JSON strings for Geoprocessing services. See “GPMultiValue” in https://developers.arcgis.com/rest/services-reference/enterprise/gp-data-types.htm\n   */\n  export function processJobParams(params: any) {\n  const processedParams = Object.keys(params).reduce((newParams: any, key) => {\n    const value = params[key]\n    const type = value.constructor.name;\n    newParams[key] = type === \"Array\" ? JSON.stringify(value) : value;\n    return newParams;\n  }, {});\n\n  return processedParams\n}","import { IRequestOptions } from \"../utils/IRequestOptions.js\";\n\n/**\n * Allows you to wrap individual methods with a default set of request options. This is useful to avoid setting the same option more then once and allows for interacting and setting defaults in a functional manner.\n *\n * ```js\n * import { withOptions } from \"@esri/arcgis-rest-request\";\n * import { queryFeatures } from '@esri/arcgis-rest-feature-service';\n *\n * const queryTrails = withOptions({\n *   url: \"https://services3.arcgis.com/GVgbJbqm8hXASVYi/arcgis/rest/services/Trailheads/FeatureServer/0/\"}, queryFeatures);\n *\n * queryTrails({\n *   where: \"ELEV_FT > 1000\"\n * }).then(result);\n *\n * const queryTrailsAsUser = withOptions({\n *   authentication: ArcGISIdentityManager\n * }, queryTrails);\n *\n * queryTrailsAsUser({\n *   where: \"TRL_NAME LIKE '%backbone%'\"\n * }).then(result);\n * ```\n *\n * @param defaultOptions The options to pass into to the `func`.\n * @param func Any function that accepts anything extending `IRequestOptions` as its last parameter.\n * @returns A copy of `func` with the `defaultOptions` passed in as defaults.\n */\nexport function withOptions<\n  K extends IRequestOptions,\n  T extends (...args: any[]) => any\n>(\n  defaultOptions: IRequestOptions,\n  func: T\n): (...funcArgs: Parameters<T>) => ReturnType<T> {\n  return (...args: Parameters<T>): ReturnType<T> => {\n    const options: K =\n      typeof args[args.length - 1] === \"object\"\n        ? {\n            ...defaultOptions,\n            ...args.pop()\n          }\n        : defaultOptions;\n\n    return func(...[...args, options]);\n  };\n}\n"],"names":["requiresFormData","params","Object","keys","some","key","value","toParam","constructor","name","processParams","newParams","forEach","param","firstElementType","JSON","stringify","join","valueOf","Array","isArray","encodeParam","map","arrayElem","encodeURIComponent","encodeQueryString","FormData","globalThis","File","Blob","encodeFormData","forceFormData","useFormData","formData","filename","append","ArcGISRequestError","Error","message","code","response","url","options","super","actualProto","prototype","setPrototypeOf","this","originalMessage","warn","console","apply","getFetch","Promise","resolve","fetch","Headers","Response","Request","NODEJS_DEFAULT_REFERER_HEADER","setDefaultRequestOptions","hideWarnings","authentication","DEFAULT_ARCGIS_REQUEST_OPTIONS","getDefaultRequestOptions","httpMethod","f","ArcGISAuthError","retry","getSession","retryLimit","tries","retryRequest","reject","then","session","newOptions","internalRequest","catch","e","checkForErrors","originalAuthError","error","messageCode","errorCode","status","parse","statusMessage","requestOptions","defaults","headers","rawResponse","fetchOptions","method","signal","credentials","indexOf","rawToken","portal","getToken","startsWith","suppressWarnings","ARCGIS_REST_JS_SUPPRESS_TOKEN_WARNING","originalUrl","err","token","length","getDomainCredentials","requestHeaders","hideToken","window","urlWithQueryString","maxUrlLength","RegExp","test","body","document","referer","ok","json","jsonError","statusText","details","formattedMessage","trim","text","blob","data","truncatedUrl","toLowerCase","split","federatedServers","expires","Date","now","request","internalOptions","canRefresh","refreshCredentials","appendCustomParams","customOptions","baseOptions","reduce","ArcGISTokenRequestErrorCodes","ErrorTypes","ArcGISTokenRequestError","UNKNOWN_ERROR_CODE","ArcGISAccessDeniedError","ArcGISJobError","jobInfo","id","cleanUrl","slice","decodeParam","decodeURIComponent","decodeQueryString","query","replace","acc","entry","FIVE_MINUTES_IN_MILLISECONDS","fetchToken","username","portalTokenResponse","access_token","expires_in","ssl","refresh_token","refreshToken","refresh_token_expires_in","refreshTokenExpires","AuthenticationManagerBase","_username","_user","getUsername","getUser","user","_pendingUserRequest","clearCachedUserInfo","ApplicationCredentialsManager","clientId","clientSecret","duration","static","getTime","_pendingTokenRequest","client_id","client_secret","grant_type","expiration","setToken","setExpires","TOKEN_REFRESH_FAILED","toJSON","type","serialize","serialized","newToken","newExpires","ApplicationSession","log","ApiKeyManager","apiKey","ApiKey","arcgisOnlineUrlRegex","isOnline","normalizeOnlinePortalUrl","portalUrl","getOnlineEnvironment","subdomain","match","pop","includes","isFederated","owningSystemUrl","normalizedPortalUrl","normalizedOwningSystemUrl","canUseOnlineToken","requestUrl","portalIsOnline","requestIsOnline","portalEnv","requestEnv","validateAppAccess","revokeToken","auth_token","success","base64UrlEncode","win","btoa","String","fromCharCode","generateRandomString","crypto","getRandomValues","Uint8Array","ArcGISIdentityManager","_refreshToken","_refreshTokenExpires","password","_token","_tokenExpires","tokenExpires","provider","tokenDuration","redirectUri","server","trustedDomains","root","getServerRootUrl","_pendingTokenRequests","popup","popupWindowFeatures","locale","style","pkce","state","stateId","stateStorageKey","localStorage","setItem","authorizeUrl","authorizeUrlParams","response_type","redirect_uri","location","href","setupAuth","socialLoginProviderName","autoAccountCreateForSocial","codeVerifier","codeVerifierStorageKey","isSecureContext","subtle","bytes","TextEncoder","encode","digest","buffer","generateCodeChallenge","codeChallenge","code_challenge_method","code_challenge","addEventListener","detail","errorMessage","once","open","dispatchEvent","CustomEvent","getItem","search","hash","undefined","reportError","removeItem","opener","close","history","replaceState","createManager","oauthInfo","error_description","tokenEndpoint","code_verifier","tokenResponse","parseInt","parentOrigin","handler","event","source","parent","parentMessageHandler","postMessage","manager","removeEventListener","queryParams","writeHead","Location","end","authorizationCode","REFRESH_TOKEN_EXCHANGE_FAILED","str","credential","serverInfo","hasServer","userId","isCredential","fromCredential","hasPortal","toCredential","getPortal","_pendingPortalRequest","_portalInfo","getFreshToken","getTokenForServer","enablePostMessageAuth","validChildOrigins","_hostHandler","createPostMessageHandler","disablePostMessageAuth","refreshWithUsernameAndPassword","refreshWithRefreshToken","protocol","domainAndPath","domain","path","domainWithProtocol","signOut","destroy","validOrigins","isValidOrigin","origin","isValidType","isTokenValid","msg","existingToken","fetchAuthorizedDomains","NOT_FEDERATED","authInfo","generateTokenForServer","tokenServicesUrl","serverUrl","GENERATE_TOKEN_FOR_SERVER_FAILED","client","updateToken","exchangeRefreshToken","newTokenExpiration","portalInfo","authorizedCrossOriginDomains","filter","d","UserSession","exchangeToken","platformSelf","JOB_STATUSES","beginOAuth2","args","completeOAuth2","fromParent","authorize","exchangeAuthorizationCode","deserialize","DefaultJobOptions","pollingRate","startMonitoring","Job","async","result","getJobInfo","emitter","emit","Status","n","_pollingRate","all","Map","on","t","i","get","push","set","off","splice","startEventMonitoring","serializeString","jobOptions","processedParams","processJobParams","baseUrl","jobId","jobUrl","isMonitoring","setIntervalHandler","newRate","stopEventMonitoring","rawJobInfo","info","assign","jobStatus","Cancelled","Cancelling","New","Waiting","Executing","Submitted","TimedOut","Failed","Failure","Success","eventName","fn","arg","__arcgis_job_once_original_function__","waitForCompletion","results","paramUrl","stopInternalEventMonitoring","startInternalEventMonitoring","requests","resultsArray","finalResults","index","cancelJob","returnMessages","setInterval","executePoll","didUserEnableMonitoring","clearTimeout","withOptions","defaultOptions","func"],"mappings":"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"}