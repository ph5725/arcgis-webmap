{"version":3,"file":"ApiKeyManager.js","sourceRoot":"","sources":["../../src/ApiKeyManager.ts"],"names":[],"mappings":";AAAA;gBACgB;;;AAGhB,iFAA2E;AAW3E;;;;;;;;;;GAUG;AACH,MAAa,aACX,SAAQ,wDAAyB;IAwBjC,YAAY,OAAuB;QACjC,KAAK,CAAC,OAAO,CAAC,CAAC;QAtBjB;;WAEG;QACa,WAAM,GAAW,qCAAqC,CAAC;QAoBrE,IAAI,CAAC,GAAG,GAAG,OAAO,CAAC,GAAG,CAAC;IACzB,CAAC;IAdD;;OAEG;IACI,MAAM,CAAC,OAAO,CAAC,MAA+B;QACnD,IAAI,OAAO,MAAM,KAAK,QAAQ,EAAE;YAC9B,OAAO,IAAI,aAAa,CAAC,EAAE,GAAG,EAAE,MAAM,EAAE,CAAC,CAAC;SAC3C;aAAM;YACL,OAAO,IAAI,aAAa,CAAC,MAAM,CAAC,CAAC;SAClC;IACH,CAAC;IAOD;;OAEG;IACH,IAAI,KAAK;QACP,OAAO,IAAI,CAAC,GAAG,CAAC;IAClB,CAAC;IAED;;OAEG;IACI,QAAQ,CAAC,GAAW;QACzB,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IACnC,CAAC;IAED;;;;;;;;;;;;OAYG;IACH,MAAM;QACJ,OAAO;YACL,IAAI,EAAE,eAAe;YACrB,KAAK,EAAE,IAAI,CAAC,GAAG;YACf,QAAQ,EAAE,IAAI,CAAC,QAAQ;YACvB,MAAM,EAAE,IAAI,CAAC,MAAM;SACpB,CAAC;IACJ,CAAC;IAED;;;;;;;;;;;OAWG;IACH,SAAS;QACP,OAAO,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;IAC9B,CAAC;IAED;;;;;;;;;;OAUG;IACH,MAAM,CAAC,WAAW,CAAC,UAAkB;QACnC,MAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;QAEpC,OAAO,IAAI,aAAa,CAAC;YACvB,GAAG,EAAE,IAAI,CAAC,KAAK;YACf,QAAQ,EAAE,IAAI,CAAC,QAAQ;YACvB,MAAM,EAAE,IAAI,CAAC,MAAM;SACpB,CAAC,CAAC;IACL,CAAC;CACF;AAtGD,sCAsGC;AAED;;;GAGG,CAAC,0BAA0B;AAC9B,SAAgB,MAAM,CAAC,OAAuB;IAC5C,OAAO,CAAC,GAAG,CACT,mEAAmE,CACpE,CAAC;IAEF,OAAO,IAAI,aAAa,CAAC,OAAO,CAAC,CAAC;AACpC,CAAC;AAND,wBAMC","sourcesContent":["/* Copyright (c) 2017-2019 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport { IAuthenticationManager } from \"./utils/IAuthenticationManager.js\";\nimport { AuthenticationManagerBase } from \"./AuthenticationManagerBase.js\";\n\n/**\n * Options for the `ApiKey` constructor.\n */\nexport interface IApiKeyOptions {\n  key: string;\n  username?: string;\n  portal?: string;\n}\n\n/**\n * Used to authenticate methods in ArcGIS REST JS with an API keys. The instance of `ApiKeyManager` can be passed to  {@linkcode IRequestOptions.authentication} to authenticate requests.\n * \n * ```js\n * import { ApiKeyManager } from '@esri/arcgis-rest-request';\n \n * const apiKey = new ApiKeyManager.fromKey(\"...\");\n * ```\n * \n * In most cases however the API key can be passed directly to the {@linkcode IRequestOptions.authentication}.\n */\nexport class ApiKeyManager\n  extends AuthenticationManagerBase\n  implements IAuthenticationManager\n{\n  /**\n   * The current portal the user is authenticated with.\n   */\n  public readonly portal: string = \"https://www.arcgis.com/sharing/rest\";\n\n  /**\n   * The original API Key used to create this instance.\n   */\n  private readonly key: string;\n\n  /**\n   * The preferred method for creating an instance of `ApiKeyManager`.\n   */\n  public static fromKey(apiKey: string | IApiKeyOptions) {\n    if (typeof apiKey === \"string\") {\n      return new ApiKeyManager({ key: apiKey });\n    } else {\n      return new ApiKeyManager(apiKey);\n    }\n  }\n\n  constructor(options: IApiKeyOptions) {\n    super(options);\n    this.key = options.key;\n  }\n\n  /**\n   * Gets the current access token (the API Key).\n   */\n  get token() {\n    return this.key;\n  }\n\n  /**\n   * Gets the current access token (the API Key).\n   */\n  public getToken(url: string) {\n    return Promise.resolve(this.key);\n  }\n\n  /**\n   * Converts the `ApiKeyManager` instance to a JSON object. This is called when the instance is serialized to JSON with [`JSON.stringify()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify).\n   *\n   * ```js\n   * import { ApiKeyManager } from '@esri/arcgis-rest-request';\n   *\n   * const apiKey = new ApiKeyManager.fromKey(\"...\")\n   *\n   * const json = JSON.stringify(session);\n   * ```\n   *\n   * @returns A plain object representation of the instance.\n   */\n  toJSON() {\n    return {\n      type: \"ApiKeyManager\",\n      token: this.key,\n      username: this.username,\n      portal: this.portal\n    };\n  }\n\n  /**\n   * Serializes the ApiKeyManager instance to a JSON string.\n   *\n   * ```js\n   * import { ApiKeyManager } from '@esri/arcgis-rest-request';\n   *\n   * const apiKey = new ApiKeyManager.fromKey(\"...\")\n   *\n   * localStorage.setItem(\"apiKey\", apiKey.serialize());\n   * ```\n   * @returns {string} The serialized JSON string.\n   */\n  serialize() {\n    return JSON.stringify(this);\n  }\n\n  /**\n   * Deserializes a JSON string previously created with {@linkcode ApiKeyManager.deserialize} to an {@linkcode ApiKeyManager} instance.\n   *\n   * ```js\n   * import { ApiKeyManager } from '@esri/arcgis-rest-request';\n   *\n   * const apiKey = ApiKeyManager.deserialize(localStorage.getItem(\"apiKey\"));\n   * ```\n   * @param {string} serialized - The serialized JSON string.\n   * @returns {ApiKeyManager} The deserialized ApiKeyManager instance.\n   */\n  static deserialize(serialized: string) {\n    const data = JSON.parse(serialized);\n\n    return new ApiKeyManager({\n      key: data.token,\n      username: data.username,\n      portal: data.portal\n    });\n  }\n}\n\n/**\n * @deprecated - Use {@linkcode ApiKeyManager}.\n * @internal\n */ /* istanbul ignore next */\nexport function ApiKey(options: IApiKeyOptions) {\n  console.log(\n    \"DEPRECATED:, 'ApiKey' is deprecated. Use 'ApiKeyManager' instead.\"\n  );\n\n  return new ApiKeyManager(options);\n}\n"]}