{"version":3,"file":"ApplicationCredentialsManager.js","sourceRoot":"","sources":["../../src/ApplicationCredentialsManager.ts"],"names":[],"mappings":"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","sourcesContent":["/* Copyright (c) 2017-2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport { IAuthenticationManager } from \"./utils/IAuthenticationManager.js\";\nimport { ITokenRequestOptions } from \"./utils/ITokenRequestOptions.js\";\nimport { fetchToken } from \"./fetch-token.js\";\nimport {\n  ArcGISTokenRequestError,\n  ArcGISTokenRequestErrorCodes\n} from \"./utils/ArcGISTokenRequestError.js\";\nimport { ArcGISRequestError } from \"./utils/ArcGISRequestError.js\";\nimport { AuthenticationManagerBase } from \"./AuthenticationManagerBase.js\";\nimport { Writable } from \"./utils/writable.js\";\n\nexport interface IApplicationCredentialsManagerOptions {\n  /**\n   * Client ID of your application. Can be obtained by registering an application\n   * on [ArcGIS for Developers](https://developers.arcgis.com/documentation/core-concepts/security-and-authentication/signing-in-arcgis-online-users/#registering-your-application),\n   * [ArcGIS Online](http://doc.arcgis.com/en/arcgis-online/share-maps/add-items.htm#ESRI_SECTION1_0D1B620254F745AE84F394289F8AF44B) or on your instance of ArcGIS Enterprise.\n   */\n  clientId: string;\n\n  /**\n   * A Client Secret is also obtained by registering an application\n   * on [ArcGIS for Developers](https://developers.arcgis.com/documentation/core-concepts/security-and-authentication/signing-in-arcgis-online-users/#registering-your-application),\n   * [ArcGIS Online](http://doc.arcgis.com/en/arcgis-online/share-maps/add-items.htm#ESRI_SECTION1_0D1B620254F745AE84F394289F8AF44B) or on your instance of ArcGIS Enterprise. Treat it like a password.\n   */\n  clientSecret: string;\n\n  /**\n   * OAuth 2.0 access token from a previous application session.\n   */\n  token?: string;\n\n  /**\n   * Expiration date for the `token`\n   */\n  expires?: Date;\n\n  /**\n   * URL of ArcGIS REST base, defaults to \"https://www.arcgis.com/sharing/rest\"\n   */\n  portal?: string;\n\n  /**\n   * Duration of requested tokens in minutes. defaults to 7200 (5 days).\n   */\n  duration?: number;\n}\n\n/**\n * Used to authenticate methods in ArcGIS REST JS with oAuth 2.0 application credentials. The instance of `ApplicationCredentialsManager` can be passed to {@linkcode IRequestOptions.authentication} to authenticate requests.\n *\n * ```js\n * import { ApplicationCredentialsManager } from '@esri/arcgis-rest-request';\n *\n * const session = ApplicationCredentialsManager.fromCredentials({\n *   clientId: \"abc123\",\n *   clientSecret: \"••••••\"\n * })\n * ```\n */\nexport class ApplicationCredentialsManager\n  extends AuthenticationManagerBase\n  implements IAuthenticationManager\n{\n  public readonly portal: string;\n  public readonly token: string;\n  public readonly clientId: string;\n  public readonly clientSecret: string;\n  public readonly expires: Date;\n  public readonly duration: number;\n\n  /**\n   * Preferred method for creating an `ApplicationCredentialsManager`\n   */\n  public static fromCredentials(\n    options: IApplicationCredentialsManagerOptions\n  ) {\n    return new ApplicationCredentialsManager(options);\n  }\n\n  /**\n   * Internal object to keep track of pending token requests. Used to prevent\n   *  duplicate token requests.\n   */\n  private _pendingTokenRequest: Promise<string>;\n\n  constructor(options: IApplicationCredentialsManagerOptions) {\n    super(options);\n    this.clientId = options.clientId;\n    this.clientSecret = options.clientSecret;\n    this.token = options.token;\n    this.expires = options.expires;\n    this.portal = options.portal || \"https://www.arcgis.com/sharing/rest\";\n    this.duration = options.duration || 7200;\n  }\n\n  // URL is not actually read or passed through.\n  public getToken(\n    url: string,\n    requestOptions?: ITokenRequestOptions\n  ): Promise<string> {\n    if (this.token && this.expires && this.expires.getTime() > Date.now()) {\n      return Promise.resolve(this.token);\n    }\n\n    if (this._pendingTokenRequest) {\n      return this._pendingTokenRequest;\n    }\n\n    this._pendingTokenRequest = this.refreshToken(requestOptions);\n\n    return this._pendingTokenRequest;\n  }\n\n  public refreshToken(requestOptions?: ITokenRequestOptions): Promise<string> {\n    const options = {\n      params: {\n        client_id: this.clientId,\n        client_secret: this.clientSecret,\n        grant_type: \"client_credentials\",\n        expiration: this.duration\n      },\n      ...requestOptions\n    };\n\n    return fetchToken(`${this.portal}/oauth2/token/`, options)\n      .then((response) => {\n        this._pendingTokenRequest = null;\n        this.setToken(response.token);\n        this.setExpires(response.expires);\n        return response.token;\n      })\n      .catch((e: ArcGISRequestError) => {\n        throw new ArcGISTokenRequestError(\n          e.message,\n          ArcGISTokenRequestErrorCodes.TOKEN_REFRESH_FAILED,\n          e.response,\n          e.url,\n          e.options\n        );\n      });\n  }\n\n  public refreshCredentials() {\n    this.clearCachedUserInfo();\n    return this.refreshToken().then(() => this);\n  }\n\n  /**\n   * Converts the `ApplicationCredentialsManager` instance to a JSON object. This is called when the instance is serialized to JSON with [`JSON.stringify()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify).\n   *\n   * ```js\n   * import { ApplicationCredentialsManager } from '@esri/arcgis-rest-request';\n   *\n   * const session = ApplicationCredentialsManager.fromCredentials({\n   *   clientId: \"abc123\",\n   *   clientSecret: \"••••••\"\n   * })\n   *\n   * const json = JSON.stringify(session);\n   * ```\n   *\n   * @returns A plain object representation of the instance.\n   */\n  public toJSON() {\n    return {\n      type: \"ApplicationCredentialsManager\",\n      clientId: this.clientId,\n      clientSecret: this.clientSecret,\n      token: this.token,\n      expires: this.expires,\n      portal: this.portal,\n      duration: this.duration\n    };\n  }\n\n  /**\n   * Serializes the `ApplicationCredentialsManager` instance to a JSON string.\n   * @returns The serialized JSON string.\n   */\n  public serialize(): string {\n    return JSON.stringify(this.toJSON());\n  }\n\n  /**\n   * Deserializes a JSON string previously created with {@linkcode ApplicationCredentialsManager.serialize} to an {@linkcode ApplicationCredentialsManager} instance.\n   * @param serialized - The serialized JSON string.\n   * @returns An instance of `ApplicationCredentialsManager`.\n   */\n  public static deserialize(serialized: string): ApplicationCredentialsManager {\n    const data: IApplicationCredentialsManagerOptions = JSON.parse(serialized);\n\n    return new ApplicationCredentialsManager({\n      clientId: data.clientId,\n      clientSecret: data.clientSecret,\n      token: data.token,\n      expires: new Date(data.expires),\n      portal: data.portal,\n      duration: data.duration\n    });\n  }\n\n  /*\n   * Used to update the token when the session is refreshed.\n   * @param newToken - Sets the token for the session.\n   * @internal\n   */\n  private setToken(newToken: string) {\n    (this as Writable<ApplicationCredentialsManager>).token = newToken;\n  }\n\n  /*\n   * Used to update the expiration date when the session is refreshed.\n   * @param newExpires - Sets the expiration date for the session.\n   * @internal\n   */\n  private setExpires(newExpires: Date) {\n    (this as Writable<ApplicationCredentialsManager>).expires = newExpires;\n  }\n}\n\n/**\n * @deprecated - Use {@linkcode ApplicationCredentialsManager}.\n * @internal\n */ /* istanbul ignore next */\nexport function ApplicationSession(\n  options: IApplicationCredentialsManagerOptions\n) {\n  console.log(\n    \"DEPRECATED: 'ApplicationSession' is deprecated. Use 'ApplicationCredentialsManager' instead.\"\n  );\n\n  return new ApplicationCredentialsManager(options);\n}\n"]}